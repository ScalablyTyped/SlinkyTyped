package typingsSlinky.phaser.Phaser.Cameras.Scene2D.Effects

import org.scalajs.dom.raw.CanvasRenderingContext2D
import typingsSlinky.phaser.Phaser.Cameras.Scene2D.Camera
import typingsSlinky.phaser.Phaser.Renderer.WebGL.Pipelines.TextureTintPipeline
import typingsSlinky.phaser.Phaser.Types.Cameras.Scene2D.CameraFlashCallback
import typingsSlinky.phaser.integer
import scala.scalajs.js
import scala.scalajs.js.`|`
import scala.scalajs.js.annotation.{JSGlobalScope, JSGlobal, JSImport, JSName, JSBracketAccess}

/**
  * A Camera Flash effect.
  * 
  * This effect will flash the camera viewport to the given color, over the duration specified.
  * 
  * Only the camera viewport is flashed. None of the objects it is displaying are impacted, i.e. their colors do
  * not change.
  * 
  * The effect will dispatch several events on the Camera itself and you can also specify an `onUpdate` callback,
  * which is invoked each frame for the duration of the effect, if required.
  */
@js.native
trait Flash extends js.Object {
  
  /**
    * The Camera this effect belongs to.
    */
  val camera: Camera = js.native
  
  /**
    * Destroys this effect, releasing it from the Camera.
    */
  def destroy(): Unit = js.native
  
  /**
    * The duration of the effect, in milliseconds.
    */
  val duration: integer = js.native
  
  /**
    * Called internally when the effect completes.
    */
  def effectComplete(): Unit = js.native
  
  /**
    * Is this effect actively running?
    */
  val isRunning: Boolean = js.native
  
  /**
    * Called internally by the Canvas Renderer.
    * @param ctx The Canvas context to render to.
    */
  def postRenderCanvas(ctx: CanvasRenderingContext2D): Boolean = js.native
  
  /**
    * Called internally by the WebGL Renderer.
    * @param pipeline The WebGL Pipeline to render to.
    * @param getTintFunction A function that will return the gl safe tint colors.
    */
  def postRenderWebGL(pipeline: TextureTintPipeline, getTintFunction: js.Function): Boolean = js.native
  
  /**
    * If this effect is running this holds the current percentage of the progress, a value between 0 and 1.
    */
  var progress: Double = js.native
  
  /**
    * Resets this camera effect.
    * If it was previously running, it stops instantly without calling its onComplete callback or emitting an event.
    */
  def reset(): Unit = js.native
  
  /**
    * Flashes the Camera to or from the given color over the duration specified.
    * @param duration The duration of the effect in milliseconds. Default 250.
    * @param red The amount to fade the red channel towards. A value between 0 and 255. Default 255.
    * @param green The amount to fade the green channel towards. A value between 0 and 255. Default 255.
    * @param blue The amount to fade the blue channel towards. A value between 0 and 255. Default 255.
    * @param force Force the effect to start immediately, even if already running. Default false.
    * @param callback This callback will be invoked every frame for the duration of the effect.
    * It is sent two arguments: A reference to the camera and a progress amount between 0 and 1 indicating how complete the effect is.
    * @param context The context in which the callback is invoked. Defaults to the Scene to which the Camera belongs.
    */
  def start(
    duration: js.UndefOr[integer],
    red: js.UndefOr[integer],
    green: js.UndefOr[integer],
    blue: js.UndefOr[integer],
    force: js.UndefOr[Boolean],
    callback: js.UndefOr[CameraFlashCallback],
    context: js.UndefOr[js.Any]
  ): Camera = js.native
  
  /**
    * The main update loop for this effect. Called automatically by the Camera.
    * @param time The current timestamp as generated by the Request Animation Frame or SetTimeout.
    * @param delta The delta time, in ms, elapsed since the last frame.
    */
  def update(time: integer, delta: Double): Unit = js.native
}
object Flash {
  
  @scala.inline
  def apply(
    camera: Camera,
    destroy: () => Unit,
    duration: integer,
    effectComplete: () => Unit,
    isRunning: Boolean,
    postRenderCanvas: CanvasRenderingContext2D => Boolean,
    postRenderWebGL: (TextureTintPipeline, js.Function) => Boolean,
    progress: Double,
    reset: () => Unit,
    start: (js.UndefOr[integer], js.UndefOr[integer], js.UndefOr[integer], js.UndefOr[integer], js.UndefOr[Boolean], js.UndefOr[CameraFlashCallback], js.UndefOr[js.Any]) => Camera,
    update: (integer, Double) => Unit
  ): Flash = {
    val __obj = js.Dynamic.literal(camera = camera.asInstanceOf[js.Any], destroy = js.Any.fromFunction0(destroy), duration = duration.asInstanceOf[js.Any], effectComplete = js.Any.fromFunction0(effectComplete), isRunning = isRunning.asInstanceOf[js.Any], postRenderCanvas = js.Any.fromFunction1(postRenderCanvas), postRenderWebGL = js.Any.fromFunction2(postRenderWebGL), progress = progress.asInstanceOf[js.Any], reset = js.Any.fromFunction0(reset), start = js.Any.fromFunction7(start), update = js.Any.fromFunction2(update))
    __obj.asInstanceOf[Flash]
  }
  
  @scala.inline
  implicit class FlashOps[Self <: Flash] (val x: Self) extends AnyVal {
    
    @scala.inline
    def duplicate: Self = (js.Dynamic.global.Object.assign(js.Dynamic.literal(), x)).asInstanceOf[Self]
    
    @scala.inline
    def combineWith[Other <: js.Any](other: Other): Self with Other = (js.Dynamic.global.Object.assign(js.Dynamic.literal(), x, other.asInstanceOf[js.Any])).asInstanceOf[Self with Other]
    
    @scala.inline
    def set(key: String, value: js.Any): Self = {
      x.asInstanceOf[js.Dynamic].updateDynamic(key)(value)
      x
    }
    
    @scala.inline
    def setCamera(value: Camera): Self = this.set("camera", value.asInstanceOf[js.Any])
    
    @scala.inline
    def setDestroy(value: () => Unit): Self = this.set("destroy", js.Any.fromFunction0(value))
    
    @scala.inline
    def setDuration(value: integer): Self = this.set("duration", value.asInstanceOf[js.Any])
    
    @scala.inline
    def setEffectComplete(value: () => Unit): Self = this.set("effectComplete", js.Any.fromFunction0(value))
    
    @scala.inline
    def setIsRunning(value: Boolean): Self = this.set("isRunning", value.asInstanceOf[js.Any])
    
    @scala.inline
    def setPostRenderCanvas(value: CanvasRenderingContext2D => Boolean): Self = this.set("postRenderCanvas", js.Any.fromFunction1(value))
    
    @scala.inline
    def setPostRenderWebGL(value: (TextureTintPipeline, js.Function) => Boolean): Self = this.set("postRenderWebGL", js.Any.fromFunction2(value))
    
    @scala.inline
    def setProgress(value: Double): Self = this.set("progress", value.asInstanceOf[js.Any])
    
    @scala.inline
    def setReset(value: () => Unit): Self = this.set("reset", js.Any.fromFunction0(value))
    
    @scala.inline
    def setStart(
      value: (js.UndefOr[integer], js.UndefOr[integer], js.UndefOr[integer], js.UndefOr[integer], js.UndefOr[Boolean], js.UndefOr[CameraFlashCallback], js.UndefOr[js.Any]) => Camera
    ): Self = this.set("start", js.Any.fromFunction7(value))
    
    @scala.inline
    def setUpdate(value: (integer, Double) => Unit): Self = this.set("update", js.Any.fromFunction2(value))
  }
}
