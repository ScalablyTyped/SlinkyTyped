package typingsSlinky.photoswipe.photoswipeUiDefaultMod

import org.scalajs.dom.raw.HTMLElement
import typingsSlinky.photoswipe.anon.Bottom
import scala.scalajs.js
import scala.scalajs.js.`|`
import scala.scalajs.js.annotation.{JSGlobalScope, JSGlobal, JSImport, JSName, JSBracketAccess}

@js.native
trait Options
  extends typingsSlinky.photoswipe.mod.Options {
  
  /**
    * Function to build caption markup. The function takes three parameters:
    *
    * item      - slide object
    * captionEl - caption DOM element
    * isFake    - true when content is added to fake caption container
    *             (used to get size of next or previous caption)
    *
    * Return whether to show the caption or not.
    *
    * Default is:
    *
    * function(item, captionEl, isFake) {
    *     if(!item.title) {
    *         captionEl.children[0].innerHTML = '';
    *         return false;
    *     }
    *     captionEl.children[0].innerHTML = item.title;
    *     return true;
    * }
    *
    */
  var addCaptionHTMLFn: js.UndefOr[
    js.Function3[/* item */ Item, /* captionEl */ HTMLElement, /* isFake */ Boolean, Boolean]
  ] = js.native
  
  /**
    * Whether to show the left/right directional arrows.
    *
    * Default true.
    */
  var arrowEl: js.UndefOr[Boolean] = js.native
  
  /**
    * Size of top & bottom bars in pixels. "bottom" parameter can be 'auto' (will calculate height of caption).
    * Option applies only when mouse is used, or when width of screen is more than 1200px.
    * Also look at `parseVerticalMargin` event.
    *
    * Default {top: 44, bottom: "auto"}.
    */
  var barsSize: js.UndefOr[Bottom] = js.native
  
  /**
    * Whether to show the caption.
    *
    * Default true.
    */
  var captionEl: js.UndefOr[Boolean] = js.native
  
  /**
    * Mouse click on image should close the gallery, only when image is smaller than size of the viewport.
    *
    * Default true.
    */
  var clickToCloseNonZoomable: js.UndefOr[Boolean] = js.native
  
  /**
    * Whether to show the close button.
    *
    * Default true.
    */
  var closeEl: js.UndefOr[Boolean] = js.native
  
  /**
    * Element classes that should close PhotoSwipe when clicked on.
    * In HTML markup, class should always start with "pswp__", e.g.: "pswp__item", "pswp__caption".
    *
    * "pswp__ui--over-close" class will be added to root element of UI when mouse is over one of these elements
    * By default it's used to highlight the close button.
    *
    * Default ['item', 'caption', 'zoom-wrap', 'ui', 'top-bar'].
    */
  var closeElClasses: js.UndefOr[js.Array[String]] = js.native
  
  /**
    * Whether to show the current image's index in the gallery (located in top-left corner by default).
    *
    * Default true.
    */
  var counterEl: js.UndefOr[Boolean] = js.native
  
  /**
    * Whether to show the fullscreen button.
    *
    * Default true.
    */
  var fullscreenEl: js.UndefOr[Boolean] = js.native
  
  /**
    * A callback that should return the URL for the currently selected image. The callback is passed
    * the shareButtonData entry that was clicked on.
    *
    * Default is:
    *
    * function( shareButtonData ) {
    *     // `shareButtonData` - object from shareButtons array
    *     //
    *     // `pswp` is the gallery instance object,
    *     // you should define it by yourself
    *     //
    *     return pswp.currItem.src || '';
    * }
    *
    */
  var getImageURLForShare: js.UndefOr[js.Function1[/* shareButtonData */ ShareButtonData, String]] = js.native
  
  /**
    * A callback that should return the "Page" associated with the selected image. (e.g. on Facebook, the shared
    * content will be associated with the returned page). The callback is passed the shareButtonData entry that
    * was clicked on.
    *
    * Default is:
    *
    * function( shareButtonData ) {
    *     return window.location.href;
    * }
    *
    */
  var getPageURLForShare: js.UndefOr[js.Function1[/* shareButtonData */ ShareButtonData, String]] = js.native
  
  /**
    * A callback that should return the Text associated with the selected image. The callback is passed
    * the shareButtonData entry that was clicked on.
    *
    * Default is:
    *
    * function( shareButtonData ) {
    *     return pswp.currItem.title || '';
    * }
    *
    */
  var getTextForShare: js.UndefOr[js.Function1[/* shareButtonData */ ShareButtonData, String]] = js.native
  
  /**
    * Separator for "1 of X" counter.
    *
    * Default ' / '.
    */
  var indexIndicatorSep: js.UndefOr[String] = js.native
  
  /**
    * Delay in milliseconds until loading indicator is displayed.
    *
    * Default 1000.
    */
  var loadingIndicatorDelay: js.UndefOr[Double] = js.native
  
  /**
    * A final output callback that you can use to further modify the share button's HTML. The callback is passed
    * (1) the shareButtonData entry being generated, and (2) the default HTML generated by PhotoSwipUI_Default.
    *
    * Default is:
    *
    * function(shareButtonData, shareButtonOut) {
    *     return shareButtonOut;
    * }
    *
    */
  var parseShareButtonOut: js.UndefOr[
    js.Function2[/* shareButtonData */ ShareButtonData, /* shareButtonOut */ String, String]
  ] = js.native
  
  /**
    * Whether to show the preloader element.
    *
    * Default true.
    */
  var preloaderEl: js.UndefOr[Boolean] = js.native
  
  /**
    * The entries that show up when you click the Share button.
    *
    * Default is:
    *
    * [
    *     {id:'facebook', label:'Share on Facebook', url:'https://www.facebook.com/sharer/sharer.php?u='},
    *     {id:'twitter', label:'Tweet', url:'https://twitter.com/intent/tweet?text=&url='},
    *     {id:'pinterest', label:'Pin it', url:'http://www.pinterest.com/pin/create/button/?url=&media=&description='},
    *     {id:'download', label:'Download image', url:'', download:true}
    * ]
    *
    */
  var shareButtons: js.UndefOr[js.Array[ShareButtonData]] = js.native
  
  /**
    * Whether to show the share button.
    *
    * Default true.
    */
  var shareEl: js.UndefOr[Boolean] = js.native
  
  /**
    * Tap on sliding area should close gallery.
    *
    * Default false.
    */
  var tapToClose: js.UndefOr[Boolean] = js.native
  
  /**
    * Tap should toggle visibility of controls.
    *
    * Default true.
    */
  var tapToToggleControls: js.UndefOr[Boolean] = js.native
  
  /**
    * Adds class pswp__ui--idle to pswp__ui element when mouse isn't moving for timeToIdle milliseconds.
    *
    * Default 4000.
    */
  var timeToIdle: js.UndefOr[Double] = js.native
  
  /**
    * Adds class pswp__ui--idle to pswp__ui element when mouse leaves the window for timeToIdleOutside milliseconds.
    *
    * Default 1000.
    */
  var timeToIdleOutside: js.UndefOr[Double] = js.native
  
  /**
    * Whether to show the zoom button.
    *
    * Default true.
    */
  var zoomEl: js.UndefOr[Boolean] = js.native
}
object Options {
  
  @scala.inline
  def apply(): Options = {
    val __obj = js.Dynamic.literal()
    __obj.asInstanceOf[Options]
  }
  
  @scala.inline
  implicit class OptionsOps[Self <: Options] (val x: Self) extends AnyVal {
    
    @scala.inline
    def duplicate: Self = (js.Dynamic.global.Object.assign(js.Dynamic.literal(), x)).asInstanceOf[Self]
    
    @scala.inline
    def combineWith[Other <: js.Any](other: Other): Self with Other = (js.Dynamic.global.Object.assign(js.Dynamic.literal(), x, other.asInstanceOf[js.Any])).asInstanceOf[Self with Other]
    
    @scala.inline
    def set(key: String, value: js.Any): Self = {
      x.asInstanceOf[js.Dynamic].updateDynamic(key)(value)
      x
    }
    
    @scala.inline
    def setAddCaptionHTMLFn(value: (/* item */ Item, /* captionEl */ HTMLElement, /* isFake */ Boolean) => Boolean): Self = this.set("addCaptionHTMLFn", js.Any.fromFunction3(value))
    
    @scala.inline
    def deleteAddCaptionHTMLFn: Self = this.set("addCaptionHTMLFn", js.undefined)
    
    @scala.inline
    def setArrowEl(value: Boolean): Self = this.set("arrowEl", value.asInstanceOf[js.Any])
    
    @scala.inline
    def deleteArrowEl: Self = this.set("arrowEl", js.undefined)
    
    @scala.inline
    def setBarsSize(value: Bottom): Self = this.set("barsSize", value.asInstanceOf[js.Any])
    
    @scala.inline
    def deleteBarsSize: Self = this.set("barsSize", js.undefined)
    
    @scala.inline
    def setCaptionEl(value: Boolean): Self = this.set("captionEl", value.asInstanceOf[js.Any])
    
    @scala.inline
    def deleteCaptionEl: Self = this.set("captionEl", js.undefined)
    
    @scala.inline
    def setClickToCloseNonZoomable(value: Boolean): Self = this.set("clickToCloseNonZoomable", value.asInstanceOf[js.Any])
    
    @scala.inline
    def deleteClickToCloseNonZoomable: Self = this.set("clickToCloseNonZoomable", js.undefined)
    
    @scala.inline
    def setCloseEl(value: Boolean): Self = this.set("closeEl", value.asInstanceOf[js.Any])
    
    @scala.inline
    def deleteCloseEl: Self = this.set("closeEl", js.undefined)
    
    @scala.inline
    def setCloseElClassesVarargs(value: String*): Self = this.set("closeElClasses", js.Array(value :_*))
    
    @scala.inline
    def setCloseElClasses(value: js.Array[String]): Self = this.set("closeElClasses", value.asInstanceOf[js.Any])
    
    @scala.inline
    def deleteCloseElClasses: Self = this.set("closeElClasses", js.undefined)
    
    @scala.inline
    def setCounterEl(value: Boolean): Self = this.set("counterEl", value.asInstanceOf[js.Any])
    
    @scala.inline
    def deleteCounterEl: Self = this.set("counterEl", js.undefined)
    
    @scala.inline
    def setFullscreenEl(value: Boolean): Self = this.set("fullscreenEl", value.asInstanceOf[js.Any])
    
    @scala.inline
    def deleteFullscreenEl: Self = this.set("fullscreenEl", js.undefined)
    
    @scala.inline
    def setGetImageURLForShare(value: /* shareButtonData */ ShareButtonData => String): Self = this.set("getImageURLForShare", js.Any.fromFunction1(value))
    
    @scala.inline
    def deleteGetImageURLForShare: Self = this.set("getImageURLForShare", js.undefined)
    
    @scala.inline
    def setGetPageURLForShare(value: /* shareButtonData */ ShareButtonData => String): Self = this.set("getPageURLForShare", js.Any.fromFunction1(value))
    
    @scala.inline
    def deleteGetPageURLForShare: Self = this.set("getPageURLForShare", js.undefined)
    
    @scala.inline
    def setGetTextForShare(value: /* shareButtonData */ ShareButtonData => String): Self = this.set("getTextForShare", js.Any.fromFunction1(value))
    
    @scala.inline
    def deleteGetTextForShare: Self = this.set("getTextForShare", js.undefined)
    
    @scala.inline
    def setIndexIndicatorSep(value: String): Self = this.set("indexIndicatorSep", value.asInstanceOf[js.Any])
    
    @scala.inline
    def deleteIndexIndicatorSep: Self = this.set("indexIndicatorSep", js.undefined)
    
    @scala.inline
    def setLoadingIndicatorDelay(value: Double): Self = this.set("loadingIndicatorDelay", value.asInstanceOf[js.Any])
    
    @scala.inline
    def deleteLoadingIndicatorDelay: Self = this.set("loadingIndicatorDelay", js.undefined)
    
    @scala.inline
    def setParseShareButtonOut(value: (/* shareButtonData */ ShareButtonData, /* shareButtonOut */ String) => String): Self = this.set("parseShareButtonOut", js.Any.fromFunction2(value))
    
    @scala.inline
    def deleteParseShareButtonOut: Self = this.set("parseShareButtonOut", js.undefined)
    
    @scala.inline
    def setPreloaderEl(value: Boolean): Self = this.set("preloaderEl", value.asInstanceOf[js.Any])
    
    @scala.inline
    def deletePreloaderEl: Self = this.set("preloaderEl", js.undefined)
    
    @scala.inline
    def setShareButtonsVarargs(value: ShareButtonData*): Self = this.set("shareButtons", js.Array(value :_*))
    
    @scala.inline
    def setShareButtons(value: js.Array[ShareButtonData]): Self = this.set("shareButtons", value.asInstanceOf[js.Any])
    
    @scala.inline
    def deleteShareButtons: Self = this.set("shareButtons", js.undefined)
    
    @scala.inline
    def setShareEl(value: Boolean): Self = this.set("shareEl", value.asInstanceOf[js.Any])
    
    @scala.inline
    def deleteShareEl: Self = this.set("shareEl", js.undefined)
    
    @scala.inline
    def setTapToClose(value: Boolean): Self = this.set("tapToClose", value.asInstanceOf[js.Any])
    
    @scala.inline
    def deleteTapToClose: Self = this.set("tapToClose", js.undefined)
    
    @scala.inline
    def setTapToToggleControls(value: Boolean): Self = this.set("tapToToggleControls", value.asInstanceOf[js.Any])
    
    @scala.inline
    def deleteTapToToggleControls: Self = this.set("tapToToggleControls", js.undefined)
    
    @scala.inline
    def setTimeToIdle(value: Double): Self = this.set("timeToIdle", value.asInstanceOf[js.Any])
    
    @scala.inline
    def deleteTimeToIdle: Self = this.set("timeToIdle", js.undefined)
    
    @scala.inline
    def setTimeToIdleOutside(value: Double): Self = this.set("timeToIdleOutside", value.asInstanceOf[js.Any])
    
    @scala.inline
    def deleteTimeToIdleOutside: Self = this.set("timeToIdleOutside", js.undefined)
    
    @scala.inline
    def setZoomEl(value: Boolean): Self = this.set("zoomEl", value.asInstanceOf[js.Any])
    
    @scala.inline
    def deleteZoomEl: Self = this.set("zoomEl", js.undefined)
  }
}
