package typingsSlinky.protractor.pluginsMod

import org.scalablytyped.runtime.StringDictionary
import typingsSlinky.protractor.anon.FailedCount
import typingsSlinky.protractor.configMod.Config
import typingsSlinky.q.mod.Promise
import scala.scalajs.js
import scala.scalajs.js.`|`
import scala.scalajs.js.annotation.{JSGlobalScope, JSGlobal, JSImport, JSName, JSBracketAccess}

@JSImport("protractor/built/plugins", "Plugins")
@js.native
class Plugins protected () extends js.Object {
  def this(config: Config) = this()
  
  /**
    * Adds properties to a plugin's object
    *
    * @see docs/plugins.md#provided-properties-and-functions
    */
  /* private */ def annotatePluginObj(obj: js.Any, conf: js.Any, i: js.Any): js.Any = js.native
  
  var assertions: StringDictionary[js.Array[AssertionResult]] = js.native
  
  /**
    * Gets the tests results generated by any plugins
    *
    * @see lib/frameworks/README.md#requirements for a complete description of what
    *     the results object must look like
    *
    * @return {Object} The results object
    */
  def getResults(): FailedCount = js.native
  
  def onPageLoad(args: js.Any*): js.Promise[js.Array[_]] = js.native
  
  def onPageStable(args: js.Any*): js.Promise[js.Array[_]] = js.native
  
  def onPrepare(args: js.Any*): Promise[js.Array[_]] = js.native
  
  /**
    * Generates the handler for a plugin function (e.g. the setup() function)
    *
    * @param {string} funName The name of the function to make a handler for
    * @param {PromiseType} promiseType The type of promise (WebDriver or Q) that should be used
    * @param {boolean=} failReturnVal The value that the function should return if the plugin crashes
    *
    * @return The handler
    */
  /* private */ def pluginFunFactory(funName: js.Any, promiseType: js.Any, failReturnVal: js.Any): js.Any = js.native
  
  var pluginObjs: js.Array[ProtractorPlugin] = js.native
  
  def postResults(args: js.Any*): Promise[js.Array[_]] = js.native
  
  def postTest(args: js.Any*): Promise[js.Array[_]] = js.native
  
  /* private */ def printPluginResults(specResults: js.Any): js.Any = js.native
  
  var resultsReported: Boolean = js.native
  
  /**
    * Calls a function from a plugin safely.  If the plugin's function throws an
    * exception or returns a rejected promise, that failure will be logged as a
    * failed test result instead of crashing protractor.  If the tests results have
    * already been reported, the failure will be logged to the console.
    *
    * @param {Object} pluginObj The plugin object containing the function to be run
    * @param {string} funName The name of the function we want to run
    * @param {*[]} args The arguments we want to invoke the function with
    * @param {PromiseType} promiseType The type of promise (WebDriver or Q) that
    *    should be used
    * @param {boolean} resultsReported If the results have already been reported
    * @param {*} failReturnVal The value to return if the function fails
    *
    * @return {webdriver.promise.Promise|Q.Promise} A promise which resolves to the
    *     function's return value
    */
  /* private */ def safeCallPluginFun(pluginObj: js.Any, funName: js.Any, args: js.Any, promiseType: js.Any, failReturnVal: js.Any): js.Any = js.native
  
  /**
    * @see docs/plugins.md#writing-plugins for information on these functions
    */
  def setup(args: js.Any*): Promise[js.Array[_]] = js.native
  
  /**
    * Returns true if any loaded plugin has skipAngularStability enabled.
    *
    * @return {boolean}
    */
  def skipAngularStability(): Boolean = js.native
  
  def teardown(args: js.Any*): Promise[js.Array[_]] = js.native
  
  def waitForCondition(args: js.Any*): js.Promise[js.Array[_]] = js.native
  
  def waitForPromise(args: js.Any*): js.Promise[js.Array[_]] = js.native
}
