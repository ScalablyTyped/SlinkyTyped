package typingsSlinky.pulumiAws

import org.scalablytyped.runtime.StringDictionary
import typingsSlinky.pulumiAws.arnMod.ARN
import typingsSlinky.pulumiAws.snsMixinsMod.TopicEventHandler
import typingsSlinky.pulumiAws.snsMixinsMod.TopicEventSubscription
import typingsSlinky.pulumiAws.snsMixinsMod.TopicEventSubscriptionArgs
import typingsSlinky.pulumiPulumi.mod.CustomResource
import typingsSlinky.pulumiPulumi.outputMod.Input
import typingsSlinky.pulumiPulumi.outputMod.Output_
import typingsSlinky.pulumiPulumi.resourceMod.ComponentResourceOptions
import typingsSlinky.pulumiPulumi.resourceMod.CustomResourceOptions
import typingsSlinky.pulumiPulumi.resourceMod.ID
import org.scalablytyped.runtime.StObject
import scala.scalajs.js
import scala.scalajs.js.`|`
import scala.scalajs.js.annotation.{JSGlobalScope, JSGlobal, JSImport, JSName, JSBracketAccess}

object topicMod {
  
  @JSImport("@pulumi/aws/sns/topic", "Topic")
  @js.native
  class Topic protected () extends CustomResource {
    /**
      * Create a Topic resource with the given unique name, arguments, and options.
      *
      * @param name The _unique_ name of the resource.
      * @param args The arguments to use to populate this resource's properties.
      * @param opts A bag of options that control this resource's behavior.
      */
    def this(name: String) = this()
    def this(name: String, args: TopicArgs) = this()
    def this(name: String, args: js.UndefOr[scala.Nothing], opts: CustomResourceOptions) = this()
    def this(name: String, args: TopicArgs, opts: CustomResourceOptions) = this()
    
    /**
      * IAM role for failure feedback
      */
    val applicationFailureFeedbackRoleArn: Output_[js.UndefOr[String]] = js.native
    
    /**
      * The IAM role permitted to receive success feedback for this topic
      */
    val applicationSuccessFeedbackRoleArn: Output_[js.UndefOr[String]] = js.native
    
    /**
      * Percentage of success to sample
      */
    val applicationSuccessFeedbackSampleRate: Output_[js.UndefOr[Double]] = js.native
    
    /**
      * The ARN of the SNS topic, as a more obvious property (clone of id)
      */
    val arn: Output_[ARN] = js.native
    
    /**
      * The SNS delivery policy. More on [AWS documentation](https://docs.aws.amazon.com/sns/latest/dg/DeliveryPolicies.html)
      */
    val deliveryPolicy: Output_[js.UndefOr[String]] = js.native
    
    /**
      * The display name for the SNS topic
      */
    val displayName: Output_[js.UndefOr[String]] = js.native
    
    /**
      * IAM role for failure feedback
      */
    val httpFailureFeedbackRoleArn: Output_[js.UndefOr[String]] = js.native
    
    /**
      * The IAM role permitted to receive success feedback for this topic
      */
    val httpSuccessFeedbackRoleArn: Output_[js.UndefOr[String]] = js.native
    
    /**
      * Percentage of success to sample
      */
    val httpSuccessFeedbackSampleRate: Output_[js.UndefOr[Double]] = js.native
    
    /**
      * The ID of an AWS-managed customer master key (CMK) for Amazon SNS or a custom CMK. For more information, see [Key Terms](https://docs.aws.amazon.com/sns/latest/dg/sns-server-side-encryption.html#sse-key-terms)
      */
    val kmsMasterKeyId: Output_[js.UndefOr[String]] = js.native
    
    /**
      * IAM role for failure feedback
      */
    val lambdaFailureFeedbackRoleArn: Output_[js.UndefOr[String]] = js.native
    
    /**
      * The IAM role permitted to receive success feedback for this topic
      */
    val lambdaSuccessFeedbackRoleArn: Output_[js.UndefOr[String]] = js.native
    
    /**
      * Percentage of success to sample
      */
    val lambdaSuccessFeedbackSampleRate: Output_[js.UndefOr[Double]] = js.native
    
    /**
      * The friendly name for the SNS topic. By default generated by this provider.
      */
    val name: Output_[String] = js.native
    
    /**
      * The friendly name for the SNS topic. Conflicts with `name`.
      */
    val namePrefix: Output_[js.UndefOr[String]] = js.native
    
    /**
      * Creates a new subscription to events fired from this Topic to the handler provided, along
      * with options to control the behavior of the subscription.
      */
    def onEvent(name: String, handler: TopicEventHandler): TopicEventSubscription = js.native
    def onEvent(
      name: String,
      handler: TopicEventHandler,
      args: js.UndefOr[scala.Nothing],
      opts: ComponentResourceOptions
    ): TopicEventSubscription = js.native
    def onEvent(name: String, handler: TopicEventHandler, args: TopicEventSubscriptionArgs): TopicEventSubscription = js.native
    def onEvent(
      name: String,
      handler: TopicEventHandler,
      args: TopicEventSubscriptionArgs,
      opts: ComponentResourceOptions
    ): TopicEventSubscription = js.native
    
    /**
      * The fully-formed AWS policy as JSON.
      */
    val policy: Output_[String] = js.native
    
    /**
      * IAM role for failure feedback
      */
    val sqsFailureFeedbackRoleArn: Output_[js.UndefOr[String]] = js.native
    
    /**
      * The IAM role permitted to receive success feedback for this topic
      */
    val sqsSuccessFeedbackRoleArn: Output_[js.UndefOr[String]] = js.native
    
    /**
      * Percentage of success to sample
      */
    val sqsSuccessFeedbackSampleRate: Output_[js.UndefOr[Double]] = js.native
    
    /**
      * Key-value map of resource tags
      */
    val tags: Output_[js.UndefOr[StringDictionary[String]]] = js.native
  }
  /* static members */
  object Topic {
    
    /**
      * Get an existing Topic resource's state with the given name, ID, and optional extra
      * properties used to qualify the lookup.
      *
      * @param name The _unique_ name of the resulting resource.
      * @param id The _unique_ provider ID of the resource to lookup.
      * @param state Any extra arguments used during the lookup.
      * @param opts Optional settings to control the behavior of the CustomResource.
      */
    @JSImport("@pulumi/aws/sns/topic", "Topic.get")
    @js.native
    def get(name: String, id: Input[ID]): Topic = js.native
    @JSImport("@pulumi/aws/sns/topic", "Topic.get")
    @js.native
    def get(name: String, id: Input[ID], state: js.UndefOr[scala.Nothing], opts: CustomResourceOptions): Topic = js.native
    @JSImport("@pulumi/aws/sns/topic", "Topic.get")
    @js.native
    def get(name: String, id: Input[ID], state: TopicState): Topic = js.native
    @JSImport("@pulumi/aws/sns/topic", "Topic.get")
    @js.native
    def get(name: String, id: Input[ID], state: TopicState, opts: CustomResourceOptions): Topic = js.native
    
    /**
      * Returns true if the given object is an instance of Topic.  This is designed to work even
      * when multiple copies of the Pulumi SDK have been loaded into the same process.
      */
    @JSImport("@pulumi/aws/sns/topic", "Topic.isInstance")
    @js.native
    def isInstance(obj: js.Any): /* is @pulumi/aws.@pulumi/aws/sns/topic.Topic */ Boolean = js.native
  }
  
  @js.native
  trait TopicArgs extends StObject {
    
    /**
      * IAM role for failure feedback
      */
    val applicationFailureFeedbackRoleArn: js.UndefOr[Input[String]] = js.native
    
    /**
      * The IAM role permitted to receive success feedback for this topic
      */
    val applicationSuccessFeedbackRoleArn: js.UndefOr[Input[String]] = js.native
    
    /**
      * Percentage of success to sample
      */
    val applicationSuccessFeedbackSampleRate: js.UndefOr[Input[Double]] = js.native
    
    /**
      * The SNS delivery policy. More on [AWS documentation](https://docs.aws.amazon.com/sns/latest/dg/DeliveryPolicies.html)
      */
    val deliveryPolicy: js.UndefOr[Input[String]] = js.native
    
    /**
      * The display name for the SNS topic
      */
    val displayName: js.UndefOr[Input[String]] = js.native
    
    /**
      * IAM role for failure feedback
      */
    val httpFailureFeedbackRoleArn: js.UndefOr[Input[String]] = js.native
    
    /**
      * The IAM role permitted to receive success feedback for this topic
      */
    val httpSuccessFeedbackRoleArn: js.UndefOr[Input[String]] = js.native
    
    /**
      * Percentage of success to sample
      */
    val httpSuccessFeedbackSampleRate: js.UndefOr[Input[Double]] = js.native
    
    /**
      * The ID of an AWS-managed customer master key (CMK) for Amazon SNS or a custom CMK. For more information, see [Key Terms](https://docs.aws.amazon.com/sns/latest/dg/sns-server-side-encryption.html#sse-key-terms)
      */
    val kmsMasterKeyId: js.UndefOr[Input[String]] = js.native
    
    /**
      * IAM role for failure feedback
      */
    val lambdaFailureFeedbackRoleArn: js.UndefOr[Input[String]] = js.native
    
    /**
      * The IAM role permitted to receive success feedback for this topic
      */
    val lambdaSuccessFeedbackRoleArn: js.UndefOr[Input[String]] = js.native
    
    /**
      * Percentage of success to sample
      */
    val lambdaSuccessFeedbackSampleRate: js.UndefOr[Input[Double]] = js.native
    
    /**
      * The friendly name for the SNS topic. By default generated by this provider.
      */
    val name: js.UndefOr[Input[String]] = js.native
    
    /**
      * The friendly name for the SNS topic. Conflicts with `name`.
      */
    val namePrefix: js.UndefOr[Input[String]] = js.native
    
    /**
      * The fully-formed AWS policy as JSON.
      */
    val policy: js.UndefOr[Input[String]] = js.native
    
    /**
      * IAM role for failure feedback
      */
    val sqsFailureFeedbackRoleArn: js.UndefOr[Input[String]] = js.native
    
    /**
      * The IAM role permitted to receive success feedback for this topic
      */
    val sqsSuccessFeedbackRoleArn: js.UndefOr[Input[String]] = js.native
    
    /**
      * Percentage of success to sample
      */
    val sqsSuccessFeedbackSampleRate: js.UndefOr[Input[Double]] = js.native
    
    /**
      * Key-value map of resource tags
      */
    val tags: js.UndefOr[Input[StringDictionary[Input[String]]]] = js.native
  }
  object TopicArgs {
    
    @scala.inline
    def apply(): TopicArgs = {
      val __obj = js.Dynamic.literal()
      __obj.asInstanceOf[TopicArgs]
    }
    
    @scala.inline
    implicit class TopicArgsMutableBuilder[Self <: TopicArgs] (val x: Self) extends AnyVal {
      
      @scala.inline
      def setApplicationFailureFeedbackRoleArn(value: Input[String]): Self = StObject.set(x, "applicationFailureFeedbackRoleArn", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setApplicationFailureFeedbackRoleArnUndefined: Self = StObject.set(x, "applicationFailureFeedbackRoleArn", js.undefined)
      
      @scala.inline
      def setApplicationSuccessFeedbackRoleArn(value: Input[String]): Self = StObject.set(x, "applicationSuccessFeedbackRoleArn", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setApplicationSuccessFeedbackRoleArnUndefined: Self = StObject.set(x, "applicationSuccessFeedbackRoleArn", js.undefined)
      
      @scala.inline
      def setApplicationSuccessFeedbackSampleRate(value: Input[Double]): Self = StObject.set(x, "applicationSuccessFeedbackSampleRate", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setApplicationSuccessFeedbackSampleRateUndefined: Self = StObject.set(x, "applicationSuccessFeedbackSampleRate", js.undefined)
      
      @scala.inline
      def setDeliveryPolicy(value: Input[String]): Self = StObject.set(x, "deliveryPolicy", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setDeliveryPolicyUndefined: Self = StObject.set(x, "deliveryPolicy", js.undefined)
      
      @scala.inline
      def setDisplayName(value: Input[String]): Self = StObject.set(x, "displayName", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setDisplayNameUndefined: Self = StObject.set(x, "displayName", js.undefined)
      
      @scala.inline
      def setHttpFailureFeedbackRoleArn(value: Input[String]): Self = StObject.set(x, "httpFailureFeedbackRoleArn", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setHttpFailureFeedbackRoleArnUndefined: Self = StObject.set(x, "httpFailureFeedbackRoleArn", js.undefined)
      
      @scala.inline
      def setHttpSuccessFeedbackRoleArn(value: Input[String]): Self = StObject.set(x, "httpSuccessFeedbackRoleArn", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setHttpSuccessFeedbackRoleArnUndefined: Self = StObject.set(x, "httpSuccessFeedbackRoleArn", js.undefined)
      
      @scala.inline
      def setHttpSuccessFeedbackSampleRate(value: Input[Double]): Self = StObject.set(x, "httpSuccessFeedbackSampleRate", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setHttpSuccessFeedbackSampleRateUndefined: Self = StObject.set(x, "httpSuccessFeedbackSampleRate", js.undefined)
      
      @scala.inline
      def setKmsMasterKeyId(value: Input[String]): Self = StObject.set(x, "kmsMasterKeyId", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setKmsMasterKeyIdUndefined: Self = StObject.set(x, "kmsMasterKeyId", js.undefined)
      
      @scala.inline
      def setLambdaFailureFeedbackRoleArn(value: Input[String]): Self = StObject.set(x, "lambdaFailureFeedbackRoleArn", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setLambdaFailureFeedbackRoleArnUndefined: Self = StObject.set(x, "lambdaFailureFeedbackRoleArn", js.undefined)
      
      @scala.inline
      def setLambdaSuccessFeedbackRoleArn(value: Input[String]): Self = StObject.set(x, "lambdaSuccessFeedbackRoleArn", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setLambdaSuccessFeedbackRoleArnUndefined: Self = StObject.set(x, "lambdaSuccessFeedbackRoleArn", js.undefined)
      
      @scala.inline
      def setLambdaSuccessFeedbackSampleRate(value: Input[Double]): Self = StObject.set(x, "lambdaSuccessFeedbackSampleRate", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setLambdaSuccessFeedbackSampleRateUndefined: Self = StObject.set(x, "lambdaSuccessFeedbackSampleRate", js.undefined)
      
      @scala.inline
      def setName(value: Input[String]): Self = StObject.set(x, "name", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setNamePrefix(value: Input[String]): Self = StObject.set(x, "namePrefix", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setNamePrefixUndefined: Self = StObject.set(x, "namePrefix", js.undefined)
      
      @scala.inline
      def setNameUndefined: Self = StObject.set(x, "name", js.undefined)
      
      @scala.inline
      def setPolicy(value: Input[String]): Self = StObject.set(x, "policy", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setPolicyUndefined: Self = StObject.set(x, "policy", js.undefined)
      
      @scala.inline
      def setSqsFailureFeedbackRoleArn(value: Input[String]): Self = StObject.set(x, "sqsFailureFeedbackRoleArn", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setSqsFailureFeedbackRoleArnUndefined: Self = StObject.set(x, "sqsFailureFeedbackRoleArn", js.undefined)
      
      @scala.inline
      def setSqsSuccessFeedbackRoleArn(value: Input[String]): Self = StObject.set(x, "sqsSuccessFeedbackRoleArn", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setSqsSuccessFeedbackRoleArnUndefined: Self = StObject.set(x, "sqsSuccessFeedbackRoleArn", js.undefined)
      
      @scala.inline
      def setSqsSuccessFeedbackSampleRate(value: Input[Double]): Self = StObject.set(x, "sqsSuccessFeedbackSampleRate", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setSqsSuccessFeedbackSampleRateUndefined: Self = StObject.set(x, "sqsSuccessFeedbackSampleRate", js.undefined)
      
      @scala.inline
      def setTags(value: Input[StringDictionary[Input[String]]]): Self = StObject.set(x, "tags", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setTagsUndefined: Self = StObject.set(x, "tags", js.undefined)
    }
  }
  
  @js.native
  trait TopicState extends StObject {
    
    /**
      * IAM role for failure feedback
      */
    val applicationFailureFeedbackRoleArn: js.UndefOr[Input[String]] = js.native
    
    /**
      * The IAM role permitted to receive success feedback for this topic
      */
    val applicationSuccessFeedbackRoleArn: js.UndefOr[Input[String]] = js.native
    
    /**
      * Percentage of success to sample
      */
    val applicationSuccessFeedbackSampleRate: js.UndefOr[Input[Double]] = js.native
    
    /**
      * The ARN of the SNS topic, as a more obvious property (clone of id)
      */
    val arn: js.UndefOr[Input[ARN]] = js.native
    
    /**
      * The SNS delivery policy. More on [AWS documentation](https://docs.aws.amazon.com/sns/latest/dg/DeliveryPolicies.html)
      */
    val deliveryPolicy: js.UndefOr[Input[String]] = js.native
    
    /**
      * The display name for the SNS topic
      */
    val displayName: js.UndefOr[Input[String]] = js.native
    
    /**
      * IAM role for failure feedback
      */
    val httpFailureFeedbackRoleArn: js.UndefOr[Input[String]] = js.native
    
    /**
      * The IAM role permitted to receive success feedback for this topic
      */
    val httpSuccessFeedbackRoleArn: js.UndefOr[Input[String]] = js.native
    
    /**
      * Percentage of success to sample
      */
    val httpSuccessFeedbackSampleRate: js.UndefOr[Input[Double]] = js.native
    
    /**
      * The ID of an AWS-managed customer master key (CMK) for Amazon SNS or a custom CMK. For more information, see [Key Terms](https://docs.aws.amazon.com/sns/latest/dg/sns-server-side-encryption.html#sse-key-terms)
      */
    val kmsMasterKeyId: js.UndefOr[Input[String]] = js.native
    
    /**
      * IAM role for failure feedback
      */
    val lambdaFailureFeedbackRoleArn: js.UndefOr[Input[String]] = js.native
    
    /**
      * The IAM role permitted to receive success feedback for this topic
      */
    val lambdaSuccessFeedbackRoleArn: js.UndefOr[Input[String]] = js.native
    
    /**
      * Percentage of success to sample
      */
    val lambdaSuccessFeedbackSampleRate: js.UndefOr[Input[Double]] = js.native
    
    /**
      * The friendly name for the SNS topic. By default generated by this provider.
      */
    val name: js.UndefOr[Input[String]] = js.native
    
    /**
      * The friendly name for the SNS topic. Conflicts with `name`.
      */
    val namePrefix: js.UndefOr[Input[String]] = js.native
    
    /**
      * The fully-formed AWS policy as JSON.
      */
    val policy: js.UndefOr[Input[String]] = js.native
    
    /**
      * IAM role for failure feedback
      */
    val sqsFailureFeedbackRoleArn: js.UndefOr[Input[String]] = js.native
    
    /**
      * The IAM role permitted to receive success feedback for this topic
      */
    val sqsSuccessFeedbackRoleArn: js.UndefOr[Input[String]] = js.native
    
    /**
      * Percentage of success to sample
      */
    val sqsSuccessFeedbackSampleRate: js.UndefOr[Input[Double]] = js.native
    
    /**
      * Key-value map of resource tags
      */
    val tags: js.UndefOr[Input[StringDictionary[Input[String]]]] = js.native
  }
  object TopicState {
    
    @scala.inline
    def apply(): TopicState = {
      val __obj = js.Dynamic.literal()
      __obj.asInstanceOf[TopicState]
    }
    
    @scala.inline
    implicit class TopicStateMutableBuilder[Self <: TopicState] (val x: Self) extends AnyVal {
      
      @scala.inline
      def setApplicationFailureFeedbackRoleArn(value: Input[String]): Self = StObject.set(x, "applicationFailureFeedbackRoleArn", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setApplicationFailureFeedbackRoleArnUndefined: Self = StObject.set(x, "applicationFailureFeedbackRoleArn", js.undefined)
      
      @scala.inline
      def setApplicationSuccessFeedbackRoleArn(value: Input[String]): Self = StObject.set(x, "applicationSuccessFeedbackRoleArn", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setApplicationSuccessFeedbackRoleArnUndefined: Self = StObject.set(x, "applicationSuccessFeedbackRoleArn", js.undefined)
      
      @scala.inline
      def setApplicationSuccessFeedbackSampleRate(value: Input[Double]): Self = StObject.set(x, "applicationSuccessFeedbackSampleRate", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setApplicationSuccessFeedbackSampleRateUndefined: Self = StObject.set(x, "applicationSuccessFeedbackSampleRate", js.undefined)
      
      @scala.inline
      def setArn(value: Input[ARN]): Self = StObject.set(x, "arn", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setArnUndefined: Self = StObject.set(x, "arn", js.undefined)
      
      @scala.inline
      def setDeliveryPolicy(value: Input[String]): Self = StObject.set(x, "deliveryPolicy", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setDeliveryPolicyUndefined: Self = StObject.set(x, "deliveryPolicy", js.undefined)
      
      @scala.inline
      def setDisplayName(value: Input[String]): Self = StObject.set(x, "displayName", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setDisplayNameUndefined: Self = StObject.set(x, "displayName", js.undefined)
      
      @scala.inline
      def setHttpFailureFeedbackRoleArn(value: Input[String]): Self = StObject.set(x, "httpFailureFeedbackRoleArn", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setHttpFailureFeedbackRoleArnUndefined: Self = StObject.set(x, "httpFailureFeedbackRoleArn", js.undefined)
      
      @scala.inline
      def setHttpSuccessFeedbackRoleArn(value: Input[String]): Self = StObject.set(x, "httpSuccessFeedbackRoleArn", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setHttpSuccessFeedbackRoleArnUndefined: Self = StObject.set(x, "httpSuccessFeedbackRoleArn", js.undefined)
      
      @scala.inline
      def setHttpSuccessFeedbackSampleRate(value: Input[Double]): Self = StObject.set(x, "httpSuccessFeedbackSampleRate", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setHttpSuccessFeedbackSampleRateUndefined: Self = StObject.set(x, "httpSuccessFeedbackSampleRate", js.undefined)
      
      @scala.inline
      def setKmsMasterKeyId(value: Input[String]): Self = StObject.set(x, "kmsMasterKeyId", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setKmsMasterKeyIdUndefined: Self = StObject.set(x, "kmsMasterKeyId", js.undefined)
      
      @scala.inline
      def setLambdaFailureFeedbackRoleArn(value: Input[String]): Self = StObject.set(x, "lambdaFailureFeedbackRoleArn", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setLambdaFailureFeedbackRoleArnUndefined: Self = StObject.set(x, "lambdaFailureFeedbackRoleArn", js.undefined)
      
      @scala.inline
      def setLambdaSuccessFeedbackRoleArn(value: Input[String]): Self = StObject.set(x, "lambdaSuccessFeedbackRoleArn", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setLambdaSuccessFeedbackRoleArnUndefined: Self = StObject.set(x, "lambdaSuccessFeedbackRoleArn", js.undefined)
      
      @scala.inline
      def setLambdaSuccessFeedbackSampleRate(value: Input[Double]): Self = StObject.set(x, "lambdaSuccessFeedbackSampleRate", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setLambdaSuccessFeedbackSampleRateUndefined: Self = StObject.set(x, "lambdaSuccessFeedbackSampleRate", js.undefined)
      
      @scala.inline
      def setName(value: Input[String]): Self = StObject.set(x, "name", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setNamePrefix(value: Input[String]): Self = StObject.set(x, "namePrefix", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setNamePrefixUndefined: Self = StObject.set(x, "namePrefix", js.undefined)
      
      @scala.inline
      def setNameUndefined: Self = StObject.set(x, "name", js.undefined)
      
      @scala.inline
      def setPolicy(value: Input[String]): Self = StObject.set(x, "policy", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setPolicyUndefined: Self = StObject.set(x, "policy", js.undefined)
      
      @scala.inline
      def setSqsFailureFeedbackRoleArn(value: Input[String]): Self = StObject.set(x, "sqsFailureFeedbackRoleArn", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setSqsFailureFeedbackRoleArnUndefined: Self = StObject.set(x, "sqsFailureFeedbackRoleArn", js.undefined)
      
      @scala.inline
      def setSqsSuccessFeedbackRoleArn(value: Input[String]): Self = StObject.set(x, "sqsSuccessFeedbackRoleArn", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setSqsSuccessFeedbackRoleArnUndefined: Self = StObject.set(x, "sqsSuccessFeedbackRoleArn", js.undefined)
      
      @scala.inline
      def setSqsSuccessFeedbackSampleRate(value: Input[Double]): Self = StObject.set(x, "sqsSuccessFeedbackSampleRate", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setSqsSuccessFeedbackSampleRateUndefined: Self = StObject.set(x, "sqsSuccessFeedbackSampleRate", js.undefined)
      
      @scala.inline
      def setTags(value: Input[StringDictionary[Input[String]]]): Self = StObject.set(x, "tags", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setTagsUndefined: Self = StObject.set(x, "tags", js.undefined)
    }
  }
}
