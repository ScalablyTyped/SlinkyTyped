package typingsSlinky.pulumiAws.serverMod

import org.scalablytyped.runtime.StringDictionary
import typingsSlinky.pulumiAws.inputMod.transfer.ServerEndpointDetails
import typingsSlinky.pulumiPulumi.outputMod.Input
import scala.scalajs.js
import scala.scalajs.js.`|`
import scala.scalajs.js.annotation.{JSGlobalScope, JSGlobal, JSImport, JSName, JSBracketAccess}

@js.native
trait ServerState extends js.Object {
  
  /**
    * Amazon Resource Name (ARN) of Transfer Server
    */
  val arn: js.UndefOr[Input[String]] = js.native
  
  /**
    * The endpoint of the Transfer Server (e.g. `s-12345678.server.transfer.REGION.amazonaws.com`)
    */
  val endpoint: js.UndefOr[Input[String]] = js.native
  
  /**
    * The virtual private cloud (VPC) endpoint settings that you want to configure for your SFTP server. Fields documented below.
    */
  val endpointDetails: js.UndefOr[Input[ServerEndpointDetails]] = js.native
  
  /**
    * The type of endpoint that you want your SFTP server connect to. If you connect to a `VPC_ENDPOINT`, your SFTP server isn't accessible over the public internet. If you want to connect your SFTP server via public internet, set `PUBLIC`.  Defaults to `PUBLIC`.
    */
  val endpointType: js.UndefOr[Input[String]] = js.native
  
  /**
    * A boolean that indicates all users associated with the server should be deleted so that the Server can be destroyed without error. The default value is `false`.
    */
  val forceDestroy: js.UndefOr[Input[Boolean]] = js.native
  
  /**
    * RSA private key (e.g. as generated by the `ssh-keygen -N "" -f my-new-server-key` command).
    */
  val hostKey: js.UndefOr[Input[String]] = js.native
  
  /**
    * This value contains the message-digest algorithm (MD5) hash of the server's host key. This value is equivalent to the output of the `ssh-keygen -l -E md5 -f my-new-server-key` command.
    */
  val hostKeyFingerprint: js.UndefOr[Input[String]] = js.native
  
  /**
    * The mode of authentication enabled for this service. The default value is `SERVICE_MANAGED`, which allows you to store and access SFTP user credentials within the service. `API_GATEWAY` indicates that user authentication requires a call to an API Gateway endpoint URL provided by you to integrate an identity provider of your choice.
    */
  val identityProviderType: js.UndefOr[Input[String]] = js.native
  
  /**
    * Amazon Resource Name (ARN) of the IAM role used to authenticate the user account with an `identityProviderType` of `API_GATEWAY`.
    */
  val invocationRole: js.UndefOr[Input[String]] = js.native
  
  /**
    * Amazon Resource Name (ARN) of an IAM role that allows the service to write your SFTP usersâ€™ activity to your Amazon CloudWatch logs for monitoring and auditing purposes.
    */
  val loggingRole: js.UndefOr[Input[String]] = js.native
  
  /**
    * A map of tags to assign to the resource.
    */
  val tags: js.UndefOr[Input[StringDictionary[Input[String]]]] = js.native
  
  /**
    * - URL of the service endpoint used to authenticate users with an `identityProviderType` of `API_GATEWAY`.
    */
  val url: js.UndefOr[Input[String]] = js.native
}
object ServerState {
  
  @scala.inline
  def apply(): ServerState = {
    val __obj = js.Dynamic.literal()
    __obj.asInstanceOf[ServerState]
  }
  
  @scala.inline
  implicit class ServerStateOps[Self <: ServerState] (val x: Self) extends AnyVal {
    
    @scala.inline
    def duplicate: Self = (js.Dynamic.global.Object.assign(js.Dynamic.literal(), x)).asInstanceOf[Self]
    
    @scala.inline
    def combineWith[Other <: js.Any](other: Other): Self with Other = (js.Dynamic.global.Object.assign(js.Dynamic.literal(), x, other.asInstanceOf[js.Any])).asInstanceOf[Self with Other]
    
    @scala.inline
    def set(key: String, value: js.Any): Self = {
      x.asInstanceOf[js.Dynamic].updateDynamic(key)(value)
      x
    }
    
    @scala.inline
    def setArn(value: Input[String]): Self = this.set("arn", value.asInstanceOf[js.Any])
    
    @scala.inline
    def deleteArn: Self = this.set("arn", js.undefined)
    
    @scala.inline
    def setEndpoint(value: Input[String]): Self = this.set("endpoint", value.asInstanceOf[js.Any])
    
    @scala.inline
    def deleteEndpoint: Self = this.set("endpoint", js.undefined)
    
    @scala.inline
    def setEndpointDetails(value: Input[ServerEndpointDetails]): Self = this.set("endpointDetails", value.asInstanceOf[js.Any])
    
    @scala.inline
    def deleteEndpointDetails: Self = this.set("endpointDetails", js.undefined)
    
    @scala.inline
    def setEndpointType(value: Input[String]): Self = this.set("endpointType", value.asInstanceOf[js.Any])
    
    @scala.inline
    def deleteEndpointType: Self = this.set("endpointType", js.undefined)
    
    @scala.inline
    def setForceDestroy(value: Input[Boolean]): Self = this.set("forceDestroy", value.asInstanceOf[js.Any])
    
    @scala.inline
    def deleteForceDestroy: Self = this.set("forceDestroy", js.undefined)
    
    @scala.inline
    def setHostKey(value: Input[String]): Self = this.set("hostKey", value.asInstanceOf[js.Any])
    
    @scala.inline
    def deleteHostKey: Self = this.set("hostKey", js.undefined)
    
    @scala.inline
    def setHostKeyFingerprint(value: Input[String]): Self = this.set("hostKeyFingerprint", value.asInstanceOf[js.Any])
    
    @scala.inline
    def deleteHostKeyFingerprint: Self = this.set("hostKeyFingerprint", js.undefined)
    
    @scala.inline
    def setIdentityProviderType(value: Input[String]): Self = this.set("identityProviderType", value.asInstanceOf[js.Any])
    
    @scala.inline
    def deleteIdentityProviderType: Self = this.set("identityProviderType", js.undefined)
    
    @scala.inline
    def setInvocationRole(value: Input[String]): Self = this.set("invocationRole", value.asInstanceOf[js.Any])
    
    @scala.inline
    def deleteInvocationRole: Self = this.set("invocationRole", js.undefined)
    
    @scala.inline
    def setLoggingRole(value: Input[String]): Self = this.set("loggingRole", value.asInstanceOf[js.Any])
    
    @scala.inline
    def deleteLoggingRole: Self = this.set("loggingRole", js.undefined)
    
    @scala.inline
    def setTags(value: Input[StringDictionary[Input[String]]]): Self = this.set("tags", value.asInstanceOf[js.Any])
    
    @scala.inline
    def deleteTags: Self = this.set("tags", js.undefined)
    
    @scala.inline
    def setUrl(value: Input[String]): Self = this.set("url", value.asInstanceOf[js.Any])
    
    @scala.inline
    def deleteUrl: Self = this.set("url", js.undefined)
  }
}
