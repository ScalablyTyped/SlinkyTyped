package typingsSlinky.pulumiAws.elbLoadBalancerMod

import org.scalablytyped.runtime.StringDictionary
import typingsSlinky.pulumiAws.inputMod.elb.LoadBalancerAccessLogs
import typingsSlinky.pulumiAws.inputMod.elb.LoadBalancerHealthCheck
import typingsSlinky.pulumiAws.inputMod.elb.LoadBalancerListener
import typingsSlinky.pulumiPulumi.outputMod.Input
import scala.scalajs.js
import scala.scalajs.js.`|`
import scala.scalajs.js.annotation.{JSGlobalScope, JSGlobal, JSImport, JSName, JSBracketAccess}

@js.native
trait LoadBalancerState extends js.Object {
  
  /**
    * An Access Logs block. Access Logs documented below.
    */
  val accessLogs: js.UndefOr[Input[LoadBalancerAccessLogs]] = js.native
  
  /**
    * The ARN of the ELB
    */
  val arn: js.UndefOr[Input[String]] = js.native
  
  /**
    * The AZ's to serve traffic in.
    */
  val availabilityZones: js.UndefOr[Input[js.Array[Input[String]]]] = js.native
  
  /**
    * Boolean to enable connection draining. Default: `false`
    */
  val connectionDraining: js.UndefOr[Input[Boolean]] = js.native
  
  /**
    * The time in seconds to allow for connections to drain. Default: `300`
    */
  val connectionDrainingTimeout: js.UndefOr[Input[Double]] = js.native
  
  /**
    * Enable cross-zone load balancing. Default: `true`
    */
  val crossZoneLoadBalancing: js.UndefOr[Input[Boolean]] = js.native
  
  /**
    * The DNS name of the ELB
    */
  val dnsName: js.UndefOr[Input[String]] = js.native
  
  /**
    * A healthCheck block. Health Check documented below.
    */
  val healthCheck: js.UndefOr[Input[LoadBalancerHealthCheck]] = js.native
  
  /**
    * The time in seconds that the connection is allowed to be idle. Default: `60`
    */
  val idleTimeout: js.UndefOr[Input[Double]] = js.native
  
  /**
    * A list of instance ids to place in the ELB pool.
    */
  val instances: js.UndefOr[Input[js.Array[Input[String]]]] = js.native
  
  /**
    * If true, ELB will be an internal ELB.
    */
  val internal: js.UndefOr[Input[Boolean]] = js.native
  
  /**
    * A list of listener blocks. Listeners documented below.
    */
  val listeners: js.UndefOr[Input[js.Array[Input[LoadBalancerListener]]]] = js.native
  
  /**
    * The name of the ELB. By default generated by this provider.
    */
  val name: js.UndefOr[Input[String]] = js.native
  
  /**
    * Creates a unique name beginning with the specified
    * prefix. Conflicts with `name`.
    */
  val namePrefix: js.UndefOr[Input[String]] = js.native
  
  /**
    * A list of security group IDs to assign to the ELB.
    * Only valid if creating an ELB within a VPC
    */
  val securityGroups: js.UndefOr[Input[js.Array[Input[String]]]] = js.native
  
  /**
    * The name of the security group that you can use as
    * part of your inbound rules for your load balancer's back-end application
    * instances. Use this for Classic or Default VPC only.
    */
  val sourceSecurityGroup: js.UndefOr[Input[String]] = js.native
  
  /**
    * The ID of the security group that you can use as
    * part of your inbound rules for your load balancer's back-end application
    * instances. Only available on ELBs launched in a VPC.
    */
  val sourceSecurityGroupId: js.UndefOr[Input[String]] = js.native
  
  /**
    * A list of subnet IDs to attach to the ELB.
    */
  val subnets: js.UndefOr[Input[js.Array[Input[String]]]] = js.native
  
  /**
    * A map of tags to assign to the resource.
    */
  val tags: js.UndefOr[Input[StringDictionary[Input[String]]]] = js.native
  
  /**
    * The canonical hosted zone ID of the ELB (to be used in a Route 53 Alias record)
    */
  val zoneId: js.UndefOr[Input[String]] = js.native
}
object LoadBalancerState {
  
  @scala.inline
  def apply(): LoadBalancerState = {
    val __obj = js.Dynamic.literal()
    __obj.asInstanceOf[LoadBalancerState]
  }
  
  @scala.inline
  implicit class LoadBalancerStateOps[Self <: LoadBalancerState] (val x: Self) extends AnyVal {
    
    @scala.inline
    def duplicate: Self = (js.Dynamic.global.Object.assign(js.Dynamic.literal(), x)).asInstanceOf[Self]
    
    @scala.inline
    def combineWith[Other <: js.Any](other: Other): Self with Other = (js.Dynamic.global.Object.assign(js.Dynamic.literal(), x, other.asInstanceOf[js.Any])).asInstanceOf[Self with Other]
    
    @scala.inline
    def set(key: String, value: js.Any): Self = {
      x.asInstanceOf[js.Dynamic].updateDynamic(key)(value)
      x
    }
    
    @scala.inline
    def setAccessLogs(value: Input[LoadBalancerAccessLogs]): Self = this.set("accessLogs", value.asInstanceOf[js.Any])
    
    @scala.inline
    def deleteAccessLogs: Self = this.set("accessLogs", js.undefined)
    
    @scala.inline
    def setArn(value: Input[String]): Self = this.set("arn", value.asInstanceOf[js.Any])
    
    @scala.inline
    def deleteArn: Self = this.set("arn", js.undefined)
    
    @scala.inline
    def setAvailabilityZonesVarargs(value: Input[String]*): Self = this.set("availabilityZones", js.Array(value :_*))
    
    @scala.inline
    def setAvailabilityZones(value: Input[js.Array[Input[String]]]): Self = this.set("availabilityZones", value.asInstanceOf[js.Any])
    
    @scala.inline
    def deleteAvailabilityZones: Self = this.set("availabilityZones", js.undefined)
    
    @scala.inline
    def setConnectionDraining(value: Input[Boolean]): Self = this.set("connectionDraining", value.asInstanceOf[js.Any])
    
    @scala.inline
    def deleteConnectionDraining: Self = this.set("connectionDraining", js.undefined)
    
    @scala.inline
    def setConnectionDrainingTimeout(value: Input[Double]): Self = this.set("connectionDrainingTimeout", value.asInstanceOf[js.Any])
    
    @scala.inline
    def deleteConnectionDrainingTimeout: Self = this.set("connectionDrainingTimeout", js.undefined)
    
    @scala.inline
    def setCrossZoneLoadBalancing(value: Input[Boolean]): Self = this.set("crossZoneLoadBalancing", value.asInstanceOf[js.Any])
    
    @scala.inline
    def deleteCrossZoneLoadBalancing: Self = this.set("crossZoneLoadBalancing", js.undefined)
    
    @scala.inline
    def setDnsName(value: Input[String]): Self = this.set("dnsName", value.asInstanceOf[js.Any])
    
    @scala.inline
    def deleteDnsName: Self = this.set("dnsName", js.undefined)
    
    @scala.inline
    def setHealthCheck(value: Input[LoadBalancerHealthCheck]): Self = this.set("healthCheck", value.asInstanceOf[js.Any])
    
    @scala.inline
    def deleteHealthCheck: Self = this.set("healthCheck", js.undefined)
    
    @scala.inline
    def setIdleTimeout(value: Input[Double]): Self = this.set("idleTimeout", value.asInstanceOf[js.Any])
    
    @scala.inline
    def deleteIdleTimeout: Self = this.set("idleTimeout", js.undefined)
    
    @scala.inline
    def setInstancesVarargs(value: Input[String]*): Self = this.set("instances", js.Array(value :_*))
    
    @scala.inline
    def setInstances(value: Input[js.Array[Input[String]]]): Self = this.set("instances", value.asInstanceOf[js.Any])
    
    @scala.inline
    def deleteInstances: Self = this.set("instances", js.undefined)
    
    @scala.inline
    def setInternal(value: Input[Boolean]): Self = this.set("internal", value.asInstanceOf[js.Any])
    
    @scala.inline
    def deleteInternal: Self = this.set("internal", js.undefined)
    
    @scala.inline
    def setListenersVarargs(value: Input[LoadBalancerListener]*): Self = this.set("listeners", js.Array(value :_*))
    
    @scala.inline
    def setListeners(value: Input[js.Array[Input[LoadBalancerListener]]]): Self = this.set("listeners", value.asInstanceOf[js.Any])
    
    @scala.inline
    def deleteListeners: Self = this.set("listeners", js.undefined)
    
    @scala.inline
    def setName(value: Input[String]): Self = this.set("name", value.asInstanceOf[js.Any])
    
    @scala.inline
    def deleteName: Self = this.set("name", js.undefined)
    
    @scala.inline
    def setNamePrefix(value: Input[String]): Self = this.set("namePrefix", value.asInstanceOf[js.Any])
    
    @scala.inline
    def deleteNamePrefix: Self = this.set("namePrefix", js.undefined)
    
    @scala.inline
    def setSecurityGroupsVarargs(value: Input[String]*): Self = this.set("securityGroups", js.Array(value :_*))
    
    @scala.inline
    def setSecurityGroups(value: Input[js.Array[Input[String]]]): Self = this.set("securityGroups", value.asInstanceOf[js.Any])
    
    @scala.inline
    def deleteSecurityGroups: Self = this.set("securityGroups", js.undefined)
    
    @scala.inline
    def setSourceSecurityGroup(value: Input[String]): Self = this.set("sourceSecurityGroup", value.asInstanceOf[js.Any])
    
    @scala.inline
    def deleteSourceSecurityGroup: Self = this.set("sourceSecurityGroup", js.undefined)
    
    @scala.inline
    def setSourceSecurityGroupId(value: Input[String]): Self = this.set("sourceSecurityGroupId", value.asInstanceOf[js.Any])
    
    @scala.inline
    def deleteSourceSecurityGroupId: Self = this.set("sourceSecurityGroupId", js.undefined)
    
    @scala.inline
    def setSubnetsVarargs(value: Input[String]*): Self = this.set("subnets", js.Array(value :_*))
    
    @scala.inline
    def setSubnets(value: Input[js.Array[Input[String]]]): Self = this.set("subnets", value.asInstanceOf[js.Any])
    
    @scala.inline
    def deleteSubnets: Self = this.set("subnets", js.undefined)
    
    @scala.inline
    def setTags(value: Input[StringDictionary[Input[String]]]): Self = this.set("tags", value.asInstanceOf[js.Any])
    
    @scala.inline
    def deleteTags: Self = this.set("tags", js.undefined)
    
    @scala.inline
    def setZoneId(value: Input[String]): Self = this.set("zoneId", value.asInstanceOf[js.Any])
    
    @scala.inline
    def deleteZoneId: Self = this.set("zoneId", js.undefined)
  }
}
