package typingsSlinky.pulumiAws.permissionMod

import typingsSlinky.pulumiPulumi.mod.CustomResource
import typingsSlinky.pulumiPulumi.outputMod.Input
import typingsSlinky.pulumiPulumi.outputMod.Output_
import typingsSlinky.pulumiPulumi.resourceMod.CustomResourceOptions
import typingsSlinky.pulumiPulumi.resourceMod.ID
import scala.scalajs.js
import scala.scalajs.js.`|`
import scala.scalajs.js.annotation.{JSGlobalScope, JSGlobal, JSImport, JSName, JSBracketAccess}

@JSImport("@pulumi/aws/lambda/permission", "Permission")
@js.native
class Permission protected () extends CustomResource {
  /**
    * Create a Permission resource with the given unique name, arguments, and options.
    *
    * @param name The _unique_ name of the resource.
    * @param args The arguments to use to populate this resource's properties.
    * @param opts A bag of options that control this resource's behavior.
    */
  def this(name: String, args: PermissionArgs) = this()
  def this(name: String, args: PermissionArgs, opts: CustomResourceOptions) = this()
  
  /**
    * The AWS Lambda action you want to allow in this statement. (e.g. `lambda:InvokeFunction`)
    */
  val action: Output_[String] = js.native
  
  /**
    * The Event Source Token to validate.  Used with [Alexa Skills](https://developer.amazon.com/docs/custom-skills/host-a-custom-skill-as-an-aws-lambda-function.html#use-aws-cli).
    */
  val eventSourceToken: Output_[js.UndefOr[String]] = js.native
  
  /**
    * Name of the Lambda function whose resource policy you are updating
    */
  val function: Output_[String] = js.native
  
  /**
    * The principal who is getting this permission. e.g. `s3.amazonaws.com`, an AWS account ID, or any valid AWS service principal such as `events.amazonaws.com` or `sns.amazonaws.com`.
    */
  val principal: Output_[String] = js.native
  
  /**
    * Query parameter to specify function version or alias name. The permission will then apply to the specific qualified ARN. e.g. `arn:aws:lambda:aws-region:acct-id:function:function-name:2`
    */
  val qualifier: Output_[js.UndefOr[String]] = js.native
  
  /**
    * This parameter is used for S3 and SES. The AWS account ID (without a hyphen) of the source owner.
    */
  val sourceAccount: Output_[js.UndefOr[String]] = js.native
  
  /**
    * When the principal is an AWS service, the ARN of the specific resource within that service to grant permission to.
    * Without this, any resource from `principal` will be granted permission â€“ even if that resource is from another account.
    * For S3, this should be the ARN of the S3 Bucket.
    * For CloudWatch Events, this should be the ARN of the CloudWatch Events Rule.
    * For API Gateway, this should be the ARN of the API, as described [here](https://docs.aws.amazon.com/apigateway/latest/developerguide/api-gateway-control-access-using-iam-policies-to-invoke-api.html).
    */
  val sourceArn: Output_[js.UndefOr[String]] = js.native
  
  /**
    * A unique statement identifier. By default generated by this provider.
    */
  val statementId: Output_[String] = js.native
  
  /**
    * A statement identifier prefix. This provider will generate a unique suffix. Conflicts with `statementId`.
    */
  val statementIdPrefix: Output_[js.UndefOr[String]] = js.native
}
/* static members */
@JSImport("@pulumi/aws/lambda/permission", "Permission")
@js.native
object Permission extends js.Object {
  
  /**
    * Get an existing Permission resource's state with the given name, ID, and optional extra
    * properties used to qualify the lookup.
    *
    * @param name The _unique_ name of the resulting resource.
    * @param id The _unique_ provider ID of the resource to lookup.
    * @param state Any extra arguments used during the lookup.
    * @param opts Optional settings to control the behavior of the CustomResource.
    */
  def get(name: String, id: Input[ID]): Permission = js.native
  def get(name: String, id: Input[ID], state: js.UndefOr[scala.Nothing], opts: CustomResourceOptions): Permission = js.native
  def get(name: String, id: Input[ID], state: PermissionState): Permission = js.native
  def get(name: String, id: Input[ID], state: PermissionState, opts: CustomResourceOptions): Permission = js.native
  
  /**
    * Returns true if the given object is an instance of Permission.  This is designed to work even
    * when multiple copies of the Pulumi SDK have been loaded into the same process.
    */
  def isInstance(obj: js.Any): /* is @pulumi/aws.@pulumi/aws/lambda/permission.Permission */ Boolean = js.native
}
