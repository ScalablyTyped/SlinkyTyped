package typingsSlinky.pulumiAws.permissionMod

import typingsSlinky.pulumiAws.lambdaMod.Function
import typingsSlinky.pulumiPulumi.outputMod.Input
import scala.scalajs.js
import scala.scalajs.js.`|`
import scala.scalajs.js.annotation.{JSGlobalScope, JSGlobal, JSImport, JSName, JSBracketAccess}

@js.native
trait PermissionArgs extends js.Object {
  
  /**
    * The AWS Lambda action you want to allow in this statement. (e.g. `lambda:InvokeFunction`)
    */
  val action: Input[String] = js.native
  
  /**
    * The Event Source Token to validate.  Used with [Alexa Skills](https://developer.amazon.com/docs/custom-skills/host-a-custom-skill-as-an-aws-lambda-function.html#use-aws-cli).
    */
  val eventSourceToken: js.UndefOr[Input[String]] = js.native
  
  /**
    * Name of the Lambda function whose resource policy you are updating
    */
  val function: Input[String | Function] = js.native
  
  /**
    * The principal who is getting this permission. e.g. `s3.amazonaws.com`, an AWS account ID, or any valid AWS service principal such as `events.amazonaws.com` or `sns.amazonaws.com`.
    */
  val principal: Input[String] = js.native
  
  /**
    * Query parameter to specify function version or alias name. The permission will then apply to the specific qualified ARN. e.g. `arn:aws:lambda:aws-region:acct-id:function:function-name:2`
    */
  val qualifier: js.UndefOr[Input[String]] = js.native
  
  /**
    * This parameter is used for S3 and SES. The AWS account ID (without a hyphen) of the source owner.
    */
  val sourceAccount: js.UndefOr[Input[String]] = js.native
  
  /**
    * When the principal is an AWS service, the ARN of the specific resource within that service to grant permission to.
    * Without this, any resource from `principal` will be granted permission â€“ even if that resource is from another account.
    * For S3, this should be the ARN of the S3 Bucket.
    * For CloudWatch Events, this should be the ARN of the CloudWatch Events Rule.
    * For API Gateway, this should be the ARN of the API, as described [here](https://docs.aws.amazon.com/apigateway/latest/developerguide/api-gateway-control-access-using-iam-policies-to-invoke-api.html).
    */
  val sourceArn: js.UndefOr[Input[String]] = js.native
  
  /**
    * A unique statement identifier. By default generated by this provider.
    */
  val statementId: js.UndefOr[Input[String]] = js.native
  
  /**
    * A statement identifier prefix. This provider will generate a unique suffix. Conflicts with `statementId`.
    */
  val statementIdPrefix: js.UndefOr[Input[String]] = js.native
}
object PermissionArgs {
  
  @scala.inline
  def apply(action: Input[String], function: Input[String | Function], principal: Input[String]): PermissionArgs = {
    val __obj = js.Dynamic.literal(action = action.asInstanceOf[js.Any], function = function.asInstanceOf[js.Any], principal = principal.asInstanceOf[js.Any])
    __obj.asInstanceOf[PermissionArgs]
  }
  
  @scala.inline
  implicit class PermissionArgsOps[Self <: PermissionArgs] (val x: Self) extends AnyVal {
    
    @scala.inline
    def duplicate: Self = (js.Dynamic.global.Object.assign(js.Dynamic.literal(), x)).asInstanceOf[Self]
    
    @scala.inline
    def combineWith[Other <: js.Any](other: Other): Self with Other = (js.Dynamic.global.Object.assign(js.Dynamic.literal(), x, other.asInstanceOf[js.Any])).asInstanceOf[Self with Other]
    
    @scala.inline
    def set(key: String, value: js.Any): Self = {
      x.asInstanceOf[js.Dynamic].updateDynamic(key)(value)
      x
    }
    
    @scala.inline
    def setAction(value: Input[String]): Self = this.set("action", value.asInstanceOf[js.Any])
    
    @scala.inline
    def setFunction(value: Input[String | Function]): Self = this.set("function", value.asInstanceOf[js.Any])
    
    @scala.inline
    def setPrincipal(value: Input[String]): Self = this.set("principal", value.asInstanceOf[js.Any])
    
    @scala.inline
    def setEventSourceToken(value: Input[String]): Self = this.set("eventSourceToken", value.asInstanceOf[js.Any])
    
    @scala.inline
    def deleteEventSourceToken: Self = this.set("eventSourceToken", js.undefined)
    
    @scala.inline
    def setQualifier(value: Input[String]): Self = this.set("qualifier", value.asInstanceOf[js.Any])
    
    @scala.inline
    def deleteQualifier: Self = this.set("qualifier", js.undefined)
    
    @scala.inline
    def setSourceAccount(value: Input[String]): Self = this.set("sourceAccount", value.asInstanceOf[js.Any])
    
    @scala.inline
    def deleteSourceAccount: Self = this.set("sourceAccount", js.undefined)
    
    @scala.inline
    def setSourceArn(value: Input[String]): Self = this.set("sourceArn", value.asInstanceOf[js.Any])
    
    @scala.inline
    def deleteSourceArn: Self = this.set("sourceArn", js.undefined)
    
    @scala.inline
    def setStatementId(value: Input[String]): Self = this.set("statementId", value.asInstanceOf[js.Any])
    
    @scala.inline
    def deleteStatementId: Self = this.set("statementId", js.undefined)
    
    @scala.inline
    def setStatementIdPrefix(value: Input[String]): Self = this.set("statementIdPrefix", value.asInstanceOf[js.Any])
    
    @scala.inline
    def deleteStatementIdPrefix: Self = this.set("statementIdPrefix", js.undefined)
  }
}
