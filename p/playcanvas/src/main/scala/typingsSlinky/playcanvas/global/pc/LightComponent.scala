package typingsSlinky.playcanvas.global.pc

import scala.scalajs.js
import scala.scalajs.js.`|`
import scala.scalajs.js.annotation.{JSGlobalScope, JSGlobal, JSImport, JSName, JSBracketAccess}

/**
  * Creates a new Light Component.
  * @example
  * // Add a pc.LightComponent to an entity
  * var entity = new pc.Entity();
  * entity.addComponent('light', {
  *     type: "point",
  *     color: new pc.Color(1, 0, 0),
  *     range: 10
  * });
  * @example
  * // Get the pc.LightComponent on an entity
  * var lightComponent = entity.light;
  * @example
  * // Update a property on a light component
  * entity.light.range = 20;
  * @property type - The type of light. Can be:
  * * "directional": A light that is infinitely far away and lights the entire scene from one direction.
  * * "point": A light that illuminates in all directions from a point.
  * * "spot": A light that illuminates in all directions from a point and is bounded by a cone.
  * Defaults to "directional".
  * @property color - The Color of the light. The alpha component of the color is
  * ignored. Defaults to white (1, 1, 1).
  * @property intensity - The brightness of the light. Defaults to 1.
  * @property castShadows - If enabled the light will cast shadows. Defaults to false.
  * @property shadowDistance - The distance from the viewpoint beyond which shadows
  * are no longer rendered. Affects directional lights only. Defaults to 40.
  * @property shadowResolution - The size of the texture used for the shadow map.
  * Valid sizes are 64, 128, 256, 512, 1024, 2048. Defaults to 1024.
  * @property shadowBias - The depth bias for tuning the appearance of the shadow
  * mapping generated by this light. Defaults to 0.05.
  * @property normalOffsetBias - Normal offset depth bias. Defaults to 0.
  * @property range - The range of the light. Affects point and spot lights only.
  * Defaults to 10.
  * @property innerConeAngle - The angle at which the spotlight cone starts
  * to fade off. The angle is specified in degrees. Affects spot lights only. Defaults
  * to 40.
  * @property outerConeAngle - The angle at which the spotlight cone has faded
  * to nothing. The angle is specified in degrees. Affects spot lights only. Defaults
  * to 45.
  * @property falloffMode - Controls the rate at which a light attenuates from
  * its position. Can be:
  * * {@link pc.LIGHTFALLOFF_LINEAR}: Linear.
  * * {@link pc.LIGHTFALLOFF_INVERSESQUARED}: Inverse squared.
  * Affects point and spot lights only. Defaults to pc.LIGHTFALLOFF_LINEAR.
  * @property mask - Defines a mask to determine which {@link pc.MeshInstance}s are
  * lit by this light. Defaults to 1.
  * @property affectDynamic - If enabled the light will affect non-lightmapped objects
  * @property affectLightmapped - If enabled the light will affect lightmapped objects
  * @property bake - If enabled the light will be rendered into lightmaps
  * @property bakeDir - If enabled and bake=true, the light's direction will contribute to directional lightmaps.
  * Be aware, that directional lightmap is an approximation and can only hold single direction per pixel.
  * Intersecting multiple lights with bakeDir=true may lead to incorrect look of specular/bump-mapping in the area of intersection.
  * The error is not always visible though, and highly scene-dependent.
  * @property shadowUpdateMode - Tells the renderer how often shadows must be updated for this light. Options:
  * * {@link pc.SHADOWUPDATE_NONE}: Don't render shadows.
  * * {@link pc.SHADOWUPDATE_THISFRAME}: Render shadows only once (then automatically switches to pc.SHADOWUPDATE_NONE).
  * * {@link pc.SHADOWUPDATE_REALTIME}: Render shadows every frame (default).
  * @property shadowType - Type of shadows being rendered by this light. Options:
  * * {@link pc.SHADOW_PCF3}: Render depth (color-packed on WebGL 1.0), can be used for PCF 3x3 sampling.
  * * {@link pc.SHADOW_VSM8}: Render packed variance shadow map. All shadow receivers must also cast shadows for this mode to work correctly.
  * * {@link pc.SHADOW_VSM16}: Render 16-bit exponential variance shadow map. Requires OES_texture_half_float extension. Falls back to pc.SHADOW_VSM8, if not supported.
  * * {@link pc.SHADOW_VSM32}: Render 32-bit exponential variance shadow map. Requires OES_texture_float extension. Falls back to pc.SHADOW_VSM16, if not supported.
  * * {@link pc.SHADOW_PCF5}: Render depth buffer only, can be used for hardware-accelerated PCF 5x5 sampling. Requires WebGL2. Falls back to pc.SHADOW_PCF3 on WebGL 1.0.
  * @property vsmBlurMode - Blurring mode for variance shadow maps:
  * * {@link pc.BLUR_BOX}: Box filter.
  * * {@link pc.BLUR_GAUSSIAN}: Gaussian filter. May look smoother than box, but requires more samples.
  * @property vsmBlurSize - Number of samples used for blurring a variance shadow map. Only uneven numbers work, even are incremented. Minimum value is 1, maximum is 25.
  * @property cookieAsset - Asset that has texture that will be assigned to cookie internally once asset resource is available.
  * @property cookie - Projection texture. Must be 2D for spot and cubemap for point (ignored if incorrect type is used).
  * @property cookieIntensity - Projection texture intensity (default is 1).
  * @property cookieFalloff - Toggle normal spotlight falloff when projection texture is used. When set to false, spotlight will work like a pure texture projector (only fading with distance). Default is false.
  * @property cookieChannel - Color channels of the projection texture to use. Can be "r", "g", "b", "a", "rgb" or any swizzled combination.
  * @property cookieAngle - Angle for spotlight cookie rotation.
  * @property cookieScale - Spotlight cookie scale.
  * @property cookieOffset - Spotlight cookie position offset.
  * @property isStatic - Mark light as non-movable (optimization)
  * @property layers - An array of layer IDs ({@link pc.Layer#id}) to which this light should belong.
  * Don't push/pop/splice or modify this array, if you want to change it - set a new one instead.
  * @param system - The ComponentSystem that created this Component.
  * @param entity - The Entity that this Component is attached to.
  */
@JSGlobal("pc.LightComponent")
@js.native
class LightComponent protected ()
  extends typingsSlinky.playcanvas.pc.LightComponent {
  def this(
    system: typingsSlinky.playcanvas.pc.LightComponentSystem,
    entity: typingsSlinky.playcanvas.pc.Entity
  ) = this()
}
