package typingsSlinky.playcanvas.pc

import scala.scalajs.js
import scala.scalajs.js.`|`
import scala.scalajs.js.annotation.{JSGlobalScope, JSGlobal, JSImport, JSName, JSBracketAccess}

/**
  * Create a new Material instance.
  * @property alphaTest - The alpha test reference value to control which fragments are written to the currently
  * active render target based on alpha value. All fragments with an alpha value of less than the alphaTest reference value
  * will be discarded. alphaTest defaults to 0 (all fragments pass).
  * @property alphaToCoverage - Enables or disables alpha to coverage (WebGL2 only). When enabled, and if hardware anti-aliasing is on,
  * limited order-independent transparency can be achieved. Quality depends on the number of MSAA samples of the current render target.
  * It can nicely soften edges of otherwise sharp alpha cutouts, but isn't recommended for large area semi-transparent surfaces.
  * Note, that you don't need to enable blending to make alpha to coverage work. It will work without it, just like alphaTest.
  * @property alphaWrite - If true, the alpha component of fragments generated by the shader of this material is written to
  * the color buffer of the currently active render target. If false, the alpha component will not be written. Defaults to true.
  * @property blendType - Controls how primitives are blended when being written to the currently active render target.
  * Can be:
  *
  * * {@link pc.BLEND_SUBTRACTIVE}: Subtract the color of the source fragment from the destination fragment and write the result to the frame buffer.
  * * {@link pc.BLEND_ADDITIVE}: Add the color of the source fragment to the destination fragment and write the result to the frame buffer.
  * * {@link pc.BLEND_NORMAL}: Enable simple translucency for materials such as glass. This is equivalent to enabling a source blend mode of pc.BLENDMODE_SRC_ALPHA and a destination blend mode of pc.BLENDMODE_ONE_MINUS_SRC_ALPHA.
  * * {@link pc.BLEND_NONE}: Disable blending.
  * * {@link pc.BLEND_PREMULTIPLIED}: Similar to pc.BLEND_NORMAL expect the source fragment is assumed to have already been multiplied by the source alpha value.
  * * {@link pc.BLEND_MULTIPLICATIVE}: Multiply the color of the source fragment by the color of the destination fragment and write the result to the frame buffer.
  * * {@link pc.BLEND_ADDITIVEALPHA}: Same as pc.BLEND_ADDITIVE except the source RGB is multiplied by the source alpha.
  *
  * Defaults to pc.BLEND_NONE.
  * @property blueWrite - If true, the blue component of fragments generated by the shader of this material is written to
  * the color buffer of the currently active render target. If false, the blue component will not be written. Defaults to true.
  * @property cull - Controls how triangles are culled based on their face direction with respect to the viewpoint.
  * Can be:
  *
  * * {@link pc.CULLFACE_NONE}: Do not cull triangles based on face direction.
  * * {@link pc.CULLFACE_BACK}: Cull the back faces of triangles (do not render triangles facing away from the view point).
  * * {@link pc.CULLFACE_FRONT}: Cull the front faces of triangles (do not render triangles facing towards the view point).
  * * {@link pc.CULLFACE_FRONTANDBACK}: Cull both front and back faces (triangles will not be rendered).
  *
  * Defaults to pc.CULLFACE_BACK.
  * @property depthTest - If true, fragments generated by the shader of this material are only written to the
  * current render target if they pass the depth test. If false, fragments generated by the shader of this material are
  * written to the current render target regardless of what is in the depth buffer. Defaults to true.
  * @property depthWrite - If true, fragments generated by the shader of this material write a depth value to
  * the depth buffer of the currently active render target. If false, no depth value is written. Defaults to true.
  * @property greenWrite - If true, the green component of fragments generated by the shader of this material is written to
  * the color buffer of the currently active render target. If false, the green component will not be written. Defaults to true.
  * @property name - The name of the material.
  * @property redWrite - If true, the red component of fragments generated by the shader of this material is written to
  * the color buffer of the currently active render target. If false, the red component will not be written. Defaults to true.
  * @property shader - The shader used by this material to render mesh instances (default is null).
  * @property stencilFront - Stencil parameters for front faces (default is null).
  * @property stencilBack - Stencil parameters for back faces (default is null).
  * @property depthBias - Offsets the output depth buffer value. Useful for decals to prevent z-fighting.
  * @property slopeDepthBias - Same as {@link pc.Material#depthBias}, but also depends on the slope of the triangle relative to the camera.
  */
@js.native
trait Material extends js.Object {
  
  /**
    * The alpha test reference value to control which fragments are written to the currently
    active render target based on alpha value. All fragments with an alpha value of less than the alphaTest reference value
    will be discarded. alphaTest defaults to 0 (all fragments pass).
    */
  var alphaTest: Double = js.native
  
  /**
    * Enables or disables alpha to coverage (WebGL2 only). When enabled, and if hardware anti-aliasing is on,
    limited order-independent transparency can be achieved. Quality depends on the number of MSAA samples of the current render target.
    It can nicely soften edges of otherwise sharp alpha cutouts, but isn't recommended for large area semi-transparent surfaces.
    Note, that you don't need to enable blending to make alpha to coverage work. It will work without it, just like alphaTest.
    */
  var alphaToCoverage: Boolean = js.native
  
  /**
    * If true, the alpha component of fragments generated by the shader of this material is written to
    the color buffer of the currently active render target. If false, the alpha component will not be written. Defaults to true.
    */
  var alphaWrite: Boolean = js.native
  
  /**
    * Controls how primitives are blended when being written to the currently active render target.
    Can be:
    
    * {@link pc.BLEND_SUBTRACTIVE}: Subtract the color of the source fragment from the destination fragment and write the result to the frame buffer.
    * {@link pc.BLEND_ADDITIVE}: Add the color of the source fragment to the destination fragment and write the result to the frame buffer.
    * {@link pc.BLEND_NORMAL}: Enable simple translucency for materials such as glass. This is equivalent to enabling a source blend mode of pc.BLENDMODE_SRC_ALPHA and a destination blend mode of pc.BLENDMODE_ONE_MINUS_SRC_ALPHA.
    * {@link pc.BLEND_NONE}: Disable blending.
    * {@link pc.BLEND_PREMULTIPLIED}: Similar to pc.BLEND_NORMAL expect the source fragment is assumed to have already been multiplied by the source alpha value.
    * {@link pc.BLEND_MULTIPLICATIVE}: Multiply the color of the source fragment by the color of the destination fragment and write the result to the frame buffer.
    * {@link pc.BLEND_ADDITIVEALPHA}: Same as pc.BLEND_ADDITIVE except the source RGB is multiplied by the source alpha.
    
    Defaults to pc.BLEND_NONE.
    */
  var blendType: Double = js.native
  
  /**
    * If true, the blue component of fragments generated by the shader of this material is written to
    the color buffer of the currently active render target. If false, the blue component will not be written. Defaults to true.
    */
  var blueWrite: Boolean = js.native
  
  /**
    * Controls how triangles are culled based on their face direction with respect to the viewpoint.
    Can be:
    
    * {@link pc.CULLFACE_NONE}: Do not cull triangles based on face direction.
    * {@link pc.CULLFACE_BACK}: Cull the back faces of triangles (do not render triangles facing away from the view point).
    * {@link pc.CULLFACE_FRONT}: Cull the front faces of triangles (do not render triangles facing towards the view point).
    * {@link pc.CULLFACE_FRONTANDBACK}: Cull both front and back faces (triangles will not be rendered).
    
    Defaults to pc.CULLFACE_BACK.
    */
  var cull: Double = js.native
  
  /**
    * Deletes a shader parameter on a material.
    * @param name - The name of the parameter to delete.
    */
  def deleteParameter(name: String): Unit = js.native
  
  /**
    * Offsets the output depth buffer value. Useful for decals to prevent z-fighting.
    */
  var depthBias: Double = js.native
  
  /**
    * If true, fragments generated by the shader of this material are only written to the
    current render target if they pass the depth test. If false, fragments generated by the shader of this material are
    written to the current render target regardless of what is in the depth buffer. Defaults to true.
    */
  var depthTest: Boolean = js.native
  
  /**
    * If true, fragments generated by the shader of this material write a depth value to
    the depth buffer of the currently active render target. If false, no depth value is written. Defaults to true.
    */
  var depthWrite: Boolean = js.native
  
  /**
    * Removes this material from the scene and possibly frees up memory from its shaders (if there are no other materials using it).
    */
  def destroy(): Unit = js.native
  
  /**
    * Retrieves the specified shader parameter from a material.
    * @param name - The name of the parameter to query.
    * @returns The named parameter.
    */
  def getParameter(name: String): js.Any = js.native
  
  /**
    * If true, the green component of fragments generated by the shader of this material is written to
    the color buffer of the currently active render target. If false, the green component will not be written. Defaults to true.
    */
  var greenWrite: Boolean = js.native
  
  /**
    * The name of the material.
    */
  var name: String = js.native
  
  /**
    * If true, the red component of fragments generated by the shader of this material is written to
    the color buffer of the currently active render target. If false, the red component will not be written. Defaults to true.
    */
  var redWrite: Boolean = js.native
  
  def setParameter(name: String, data: js.Array[Double]): Unit = js.native
  def setParameter(name: String, data: js.Array[Double], passFlags: Double): Unit = js.native
  /**
    * Sets a shader parameter on a material.
    * @param name - The name of the parameter to set.
    * @param data - The value for the specified parameter.
    * @param [passFlags] - Mask describing which passes the material should be included in.
    */
  def setParameter(name: String, data: Double): Unit = js.native
  def setParameter(name: String, data: Double, passFlags: Double): Unit = js.native
  def setParameter(name: String, data: Texture): Unit = js.native
  def setParameter(name: String, data: Texture, passFlags: Double): Unit = js.native
  
  /**
    * Pushes all material parameters into scope.
    */
  def setParameters(): Unit = js.native
  
  /**
    * The shader used by this material to render mesh instances (default is null).
    */
  var shader: Shader | Null = js.native
  
  /**
    * Same as {@link pc.Material#depthBias}, but also depends on the slope of the triangle relative to the camera.
    */
  var slopeDepthBias: Double = js.native
  
  /**
    * Stencil parameters for back faces (default is null).
    */
  var stencilBack: StencilParameters | Null = js.native
  
  /**
    * Stencil parameters for front faces (default is null).
    */
  var stencilFront: StencilParameters | Null = js.native
  
  /**
    * Applies any changes made to the material's properties.
    */
  def update(): Unit = js.native
}
