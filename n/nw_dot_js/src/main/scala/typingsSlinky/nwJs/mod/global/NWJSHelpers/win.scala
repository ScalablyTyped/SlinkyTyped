package typingsSlinky.nwJs.mod.global.NWJSHelpers

import org.scalajs.dom.raw.HTMLIFrameElement
import org.scalajs.dom.raw.Window
import typingsSlinky.node.eventsMod.EventEmitter
import typingsSlinky.nwJs.mod.global.nw.Menu
import typingsSlinky.nwJs.nwJsStrings.`devtools-closed`
import typingsSlinky.nwJs.nwJsStrings.`document-end`
import typingsSlinky.nwJs.nwJsStrings.`document-start`
import typingsSlinky.nwJs.nwJsStrings.`enter-fullscreen`
import typingsSlinky.nwJs.nwJsStrings.`new-win-policy`
import typingsSlinky.nwJs.nwJsStrings.blur
import typingsSlinky.nwJs.nwJsStrings.close
import typingsSlinky.nwJs.nwJsStrings.closed
import typingsSlinky.nwJs.nwJsStrings.focus
import typingsSlinky.nwJs.nwJsStrings.loaded
import typingsSlinky.nwJs.nwJsStrings.loading
import typingsSlinky.nwJs.nwJsStrings.maximize
import typingsSlinky.nwJs.nwJsStrings.minimize
import typingsSlinky.nwJs.nwJsStrings.move
import typingsSlinky.nwJs.nwJsStrings.navigation
import typingsSlinky.nwJs.nwJsStrings.resize
import typingsSlinky.nwJs.nwJsStrings.restore
import typingsSlinky.nwJs.nwJsStrings.zoom
import org.scalablytyped.runtime.StObject
import scala.scalajs.js
import scala.scalajs.js.`|`
import scala.scalajs.js.annotation.{JSGlobalScope, JSGlobal, JSImport, JSName, JSBracketAccess}

@js.native
trait win extends EventEmitter {
  
  /**
    * Move focus away.
    */
  def blur(): Unit = js.native
  
  /**
    * Returns a a boolean indicating if the platform (currently Mac OS X and Linux) support Window API method setVisibleOnAllWorkspace(Boolean).
    */
  def canSetVisibleOnAllWorkspaces(): Boolean = js.native
  
  /**
    * Captures the visible area of the window.
    *
    * @param callback {string} The callback when finished capturing the window
    * - (optional) arg {base64string|Buffer} Captured page data.
    * @param config {string|CapturePageConfig} (Optional) Conig how captured page returned.
    */
  def capturePage(callback: js.Function1[/* arg */ String | js.Object, Unit]): Unit = js.native
  def capturePage(callback: js.Function1[/* arg */ String | js.Object, Unit], config: String): Unit = js.native
  def capturePage(callback: js.Function1[/* arg */ String | js.Object, Unit], config: CapturePageConfig): Unit = js.native
  
  /**
    * Close current window.
    *
    * @param force {boolean} (Optional) Specify whether to close the window forcely and bypass close event.
    */
  def close(): Unit = js.native
  def close(force: Boolean): Unit = js.native
  
  /**
    * Close the devtools window.
    */
  def closeDevTools(): Unit = js.native
  
  /**
    * This includes multiple functions to manipulate the cookies.
    */
  var cookies: Cookies = js.native
  
  /**
    * Make the window fullscreen.
    */
  def enterFullscreen(): Unit = js.native
  
  /**
    * Enter the Kiosk mode.
    */
  def enterKioskMode(): Unit = js.native
  
  /**
    * Execute a piece of JavaScript in the frame.
    *
    * @param frame {HTMLIFrameElement} The frame to execute in. If iframe is null, it assumes in current window / frame.
    * @param script {string} The source code of the script to be executed
    */
  def eval(frame: HTMLIFrameElement, script: String): Unit = js.native
  
  /**
    * Load and execute the compiled snapshot in the frame.
    *
    * @param frame {HTMLIFrameElement} The frame to execute in. If iframe is null, it assumes in current window / frame.
    * @param path {string} the path of the snapshot file generated by nwjc
    */
  def evalNWBin(frame: HTMLIFrameElement, path: String): Unit = js.native
  
  /**
    * Focus on the window.
    */
  def focus(): Unit = js.native
  
  /**
    * Enumerate the printers in the system.
    *
    * @param callback {function(dev_win?)} callback with the native window of the DevTools window.
    * - (optional) printers {any[]} An array of json objects for the printer information.
    */
  def getPrinters(callback: js.Function1[/* printers */ js.UndefOr[js.Array[_]], Unit]): Unit = js.native
  
  /**
    * Get or set window's height.
    */
  var height: Double = js.native
  
  /**
    * Hide the window.
    */
  def hide(): Unit = js.native
  
  /**
    * Query the status of devtools window.
    */
  def isDevToolsOpen(): Boolean = js.native
  
  /**
    * Get whether we're in fullscreen mode.
    */
  var isFullscreen: Boolean = js.native
  
  /**
    * Get whether we're in kiosk mode.
    */
  var isKioskMode: Boolean = js.native
  
  /**
    * Get whether transparency is turned on
    */
  var isTransparent: Boolean = js.native
  
  /**
    * Leave the fullscreen mode.
    */
  def leaveFullscreen(): Unit = js.native
  
  /**
    * Leave the Kiosk mode.
    */
  def leaveKioskMode(): Unit = js.native
  
  /**
    * Maximize the window on GTK and Windows, and zoom the window on Mac OS X.
    */
  def maximize(): Unit = js.native
  
  /**
    * Get or set window's menubar.
    */
  var menu: Menu = js.native
  
  /**
    * Minimize the window to task bar on Windows, iconify the window on GTK, and miniaturize the window on Mac OS X.
    */
  def minimize(): Unit = js.native
  
  /**
    * Moves a window a specified number of pixels relative to its current coordinates.
    *
    * @param x {Integer} Horizontal offset
    * @param y {Integer} Vertical offset
    */
  def moveBy(x: Double, y: Double): Unit = js.native
  
  /**
    * Moves a window's left and top edge to the specified coordinates.
    *
    * @param x {Integer} Offset to the left of the screen
    * @param y {Integer} Offset to the top of the screen
    */
  def moveTo(x: Double, y: Double): Unit = js.native
  
  def on(event: String, listener: js.Function): this.type = js.native
  /**
    * Emitted when window loses focus.
    *
    * @param event {string} Event name
    * @param listener {function} The callback that handles the `blur` event.
    */
  @JSName("on")
  def on_blur(event: blur, listener: js.Function0[_]): this.type = js.native
  /**
    * The close event is a special event that will affect the result of the Window.close() function.
    *
    * @param event {string} Event name
    * @param listener {function(byCommandQ?)} The callback that handles the `close` event.
    * - (optional) byCommandQ {string} Whether it’s being closed by ⌘+Q.
    */
  @JSName("on")
  def on_close(event: close, listener: js.Function1[/* byCommandQ */ js.UndefOr[String | js.Any], _]): this.type = js.native
  /**
    * The closed event is emitted after corresponding window is closed.
    *
    * @param event {string} Event name
    * @param listener {function} The callback that handles the `closed` event.
    */
  @JSName("on")
  def on_closed(event: closed, listener: js.Function0[_]): this.type = js.native
  /**
    * Emitted after Devtools is closed.
    *
    * @param event {string} Event name
    * @param listener {function} The callback that handles the `devtools-closed` event.
    */
  @JSName("on")
  def on_devtoolsclosed(event: `devtools-closed`, listener: js.Function0[_]): this.type = js.native
  /**
    * Emitted when the document object in this window or a child iframe is unloaded, but before the onunload event is emitted.
    *
    * @param event {string} Event name
    * @param listener {function(byCommandQ?)} The callback that handles the `document-end` event.
    * - (optional) frame {HTMLIFrameElement|any} Is the iframe object, or null if the event is for the window..
    */
  @JSName("on")
  def on_documentend(event: `document-end`, listener: js.Function1[/* frame */ HTMLIFrameElement | js.Any, _]): this.type = js.native
  /**
    * Emitted when the document object in this window or a child iframe is available, after all files are loaded, but before DOM is constructed or any script is run.
    *
    * @param event {string} Event name
    * @param listener {function(byCommandQ?)} The callback that handles the `document-start` event.
    * - (optional) frame {HTMLIFrameElement|any} Is the iframe object, or null if the event is for the window..
    */
  @JSName("on")
  def on_documentstart(event: `document-start`, listener: js.Function1[/* frame */ HTMLIFrameElement | js.Any, _]): this.type = js.native
  /**
    * Emitted when window enters fullscreen state.
    *
    * @param event {string} Event name
    * @param listener {function} The callback that handles the `enter-fullscreen` event.
    */
  @JSName("on")
  def on_enterfullscreen(event: `enter-fullscreen`, listener: js.Function0[_]): this.type = js.native
  /**
    * Emitted when window gets focus.
    *
    * @param event {string} Event name
    * @param listener {function} The callback that handles the `focus` event.
    */
  @JSName("on")
  def on_focus(event: focus, listener: js.Function0[_]): this.type = js.native
  /**
    * Emitted when the window is fully loaded, this event behaves the same with window.onload, but doesn’t rely on the DOM.
    *
    * @param event {string} Event name
    * @param listener {function} The callback that handles the `loaded` event.
    */
  @JSName("on")
  def on_loaded(event: loaded, listener: js.Function0[_]): this.type = js.native
  /**
    * Emitted when the window starts to reload, normally you cannot catch this event because usually it’s emitted before you actually setup the callback.
    *
    * @param event {string} Event name
    * @param listener {function} The callback that handles the `loading` event.
    */
  @JSName("on")
  def on_loading(event: loading, listener: js.Function0[_]): this.type = js.native
  /**
    * Emitted when window is maximized.
    *
    * @param event {string} Event name
    * @param listener {function} The callback that handles the `maximize` event.
    */
  @JSName("on")
  def on_maximize(event: maximize, listener: js.Function0[_]): this.type = js.native
  /**
    * Emitted when window is minimized.
    *
    * @param event {string} Event name
    * @param listener {function} The callback that handles the `minimize` event.
    */
  @JSName("on")
  def on_minimize(event: minimize, listener: js.Function0[_]): this.type = js.native
  /**
    * Emitted after window is moved.
    *
    * @param event {string} Event name
    * @param listener {function(byCommandQ?)} The callback that handles the `move` event.
    * - (optional) x {Integer} The new location of the left corner of the window.
    * - (optional) y {Integer} The new location of the top corner of the window.
    */
  @JSName("on")
  def on_move(event: move, listener: js.Function2[/* x */ js.UndefOr[Double], /* y */ js.UndefOr[Double], _]): this.type = js.native
  /**
    * Emitted when navigating to another page.
    *
    * @param event {string} Event name
    * @param listener {function(byCommandQ?)} The callback that handles the `navigation` event.
    * - (optional) frame {HTMLIFrameElement} Is the object of the child iframe where the request is from, or null if it’s from the top window.
    * - (optional) url {string} Is the address of the requested link
    * - (optional) policy {Object} Is an object contain window policy.
    */
  @JSName("on")
  def on_navigation(
    event: navigation,
    listener: js.Function3[
      /* frame */ js.UndefOr[HTMLIFrameElement | js.Any], 
      /* url */ js.UndefOr[String], 
      /* policy */ js.UndefOr[WinNavigationPolicy], 
      _
    ]
  ): this.type = js.native
  /**
    * Emitted when a new window is requested from this window or a child iframe.
    *
    * @param event {string} Event name
    * @param listener {function(byCommandQ?)} The callback that handles the `new-win-policy` event.
    * - (optional) frame {HTMLIFrameElement} Is the object of the child iframe where the request is from, or null if it’s from the top window.
    * - (optional) url {string} Is the address of the requested link
    * - (optional) policy {Object} Is an object contain window policy.
    */
  @JSName("on")
  def on_newwinpolicy(
    event: `new-win-policy`,
    listener: js.Function3[
      /* frame */ js.UndefOr[HTMLIFrameElement | js.Any], 
      /* url */ js.UndefOr[String], 
      /* policy */ js.UndefOr[WinPolicy], 
      _
    ]
  ): this.type = js.native
  /**
    * Emitted after window is resized.
    *
    * @param event {string} Event name
    * @param listener {function(byCommandQ?)} The callback that handles the `resize` event.
    * - (optional) width {Integer} The new width of the window.
    * - (optional) height {Integer} The new height of the window.
    */
  @JSName("on")
  def on_resize(
    event: resize,
    listener: js.Function2[/* width */ js.UndefOr[Double], /* height */ js.UndefOr[Double], _]
  ): this.type = js.native
  /**
    * Emitted when window is restored from minimize, maximize and fullscreen state.
    *
    * @param event {string} Event name
    * @param listener {function} The callback that handles the `restore` event.
    */
  @JSName("on")
  def on_restore(event: restore, listener: js.Function0[_]): this.type = js.native
  /**
    * Emitted when window zooming changed.
    *
    * @param event {string} Event name
    * @param listener {function(byCommandQ?)} The callback that handles the `zoom` event.
    * - (optional) zoom {Integer} Indicating the new zoom level
    */
  @JSName("on")
  def on_zoom(event: zoom, listener: js.Function1[/* zoom */ js.UndefOr[Double], _]): this.type = js.native
  
  /**
    * Print the web contents in the window without the need for user’s interaction.
    *
    * @param options {any | PrintOption} Specify whether to close the window forcely and bypass close event.
    */
  def print(options: js.Any): Unit = js.native
  def print(options: PrintOption): Unit = js.native
  
  /**
    * Reloads the current window.
    */
  def reload(): Unit = js.native
  
  /**
    * Reloads the current page by starting a new renderer process from scratch.
    */
  def reloadDev(): Unit = js.native
  
  /**
    * Like reload(), but don't use caches (aka 'shift-reload').
    */
  def reloadIgnoringCache(): Unit = js.native
  
  /**
    * Request the user’s attension by making the window flashes in the task bar.
    *
    * @param attension {boolean | number} If a Boolean, it indicates to request or cancel user’s attension. If an Integer, it indicates the number of times the window flashes.
    */
  def requestAttention(attension: Boolean): Unit = js.native
  def requestAttention(attension: Double): Unit = js.native
  
  /**
    * Resizes a window by the specified amount.
    *
    * @param width {Integer} The offset width of the window
    * @param height {Integer} The offset height of the window
    */
  def resizeBy(width: Double, height: Double): Unit = js.native
  
  /**
    * Resizes a window to the specified width and height.
    *
    * @param width {Integer} The width of the window
    * @param height {Integer} The height of the window
    */
  def resizeTo(width: Double, height: Double): Unit = js.native
  
  /**
    * Restore window to previous state after the window is minimized.
    */
  def restore(): Unit = js.native
  
  /**
    * Sets the widget to be on top of all other windows in the window system.
    *
    * @param top {boolean} Whether the window should always be on top
    */
  def setAlwaysOnTop(top: Boolean): Unit = js.native
  
  /**
    * Set the badge label on the window icon in taskbar or dock.
    *
    * @param label {string} Badge label.
    */
  def setBadgeLabel(label: String): Unit = js.native
  
  /**
    * Set window's maximum size.
    *
    * @param width {Integer} The maximum width of the window
    * @param height {Integer} The maximum height of the window
    */
  def setMaximumSize(width: Double, height: Double): Unit = js.native
  
  /**
    * Set window's minimum size.
    *
    * @param width {Integer} The minimum width of the window
    * @param height {Integer} The minimum height of the window
    */
  def setMinimumSize(width: Double, height: Double): Unit = js.native
  
  /**
    * Move window to specified position.
    *
    * @param position {string} The position of the window. There are three valid positions: null or center or mouse
    */
  def setPosition(position: String): Unit = js.native
  
  /**
    * Show window progress bar.
    *
    * @param progress {number} valid values within [0, 1]. Setting to negative value (<0) removes the progress bar.
    */
  def setProgressBar(progress: Double): Unit = js.native
  
  /**
    * Set whether window is resizable.
    *
    * @param resizable {boolean} Whether the window can be resized
    */
  def setResizable(resizable: Boolean): Unit = js.native
  
  /**
    * Control whether to show window in taskbar or dock.
    *
    * @param show {boolean} Whether show in task bar
    */
  def setShowInTaskbar(show: Boolean): Unit = js.native
  
  /**
    * For platforms that support multiple workspaces (currently Mac OS X and Linux), this allows NW.js windows to be visible on all workspaces simultaneously.
    *
    * @param visible {boolean} Whether the window should be visible on all workspaces
    */
  def setVisibleOnAllWorkspaces(visible: Boolean): Unit = js.native
  
  /**
    * Show the window if it's not shown.
    *
    * @param is_show {boolean} (Optional) Specify whether the window should be shown or hidden. It's set to true by default.
    */
  def show(): Unit = js.native
  def show(is_show: Boolean): Unit = js.native
  
  /**
    * Open the devtools to inspect the window.
    *
    * @param iframe {Integer} (Optional) the id or the element of the <iframe> to be jailed on. By default, the DevTools is shown for entire window.
    * @param callback {function(dev_win?)} callback with the native window of the DevTools window.
    * - (optional) dev_win {window} Window object that you can use any properties and methods of Window except the events
    */
  def showDevTools(): Unit = js.native
  def showDevTools(iframe: js.UndefOr[scala.Nothing], callback: js.Function1[/* dev_win */ js.UndefOr[Window], Unit]): Unit = js.native
  def showDevTools(iframe: String): Unit = js.native
  def showDevTools(iframe: String, callback: js.Function1[/* dev_win */ js.UndefOr[Window], Unit]): Unit = js.native
  def showDevTools(iframe: HTMLIFrameElement): Unit = js.native
  def showDevTools(iframe: HTMLIFrameElement, callback: js.Function1[/* dev_win */ js.UndefOr[Window], Unit]): Unit = js.native
  
  /**
    * Get or set window's title.
    */
  var title: String = js.native
  
  /**
    * Toggle the fullscreen mode.
    */
  def toggleFullscreen(): Unit = js.native
  
  /**
    * Toggle the kiosk mode.
    */
  def toggleKioskMode(): Unit = js.native
  
  /**
    * Get or set window's width.
    */
  var width: Double = js.native
  
  /**
    * Get the corresponding DOM window object of the native window.
    */
  var window: js.Object = js.native
  
  /**
    * Get or set left offset from window to screen.
    */
  var x: Double = js.native
  
  /**
    * Get or set top offset from window to screen.
    */
  var y: Double = js.native
  
  /**
    * Get or set the page zoom.
    */
  var zoomLevel: Double = js.native
}
