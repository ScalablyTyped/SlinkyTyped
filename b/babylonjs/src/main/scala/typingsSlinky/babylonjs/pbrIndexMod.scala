package typingsSlinky.babylonjs

import typingsSlinky.babylonjs.nodeMaterialBuildStateMod.NodeMaterialBuildState
import typingsSlinky.babylonjs.typesMod.Nullable
import scala.scalajs.js
import scala.scalajs.js.`|`
import scala.scalajs.js.annotation.{JSGlobalScope, JSGlobal, JSImport, JSName, JSBracketAccess}

@JSImport("babylonjs/Materials/Node/Blocks/PBR/index", JSImport.Namespace)
@js.native
object pbrIndexMod extends js.Object {
  
  @js.native
  class AnisotropyBlock protected ()
    extends typingsSlinky.babylonjs.anisotropyBlockMod.AnisotropyBlock {
    /**
      * Create a new AnisotropyBlock
      * @param name defines the block name
      */
    def this(name: String) = this()
  }
  
  @js.native
  class ClearCoatBlock protected ()
    extends typingsSlinky.babylonjs.clearCoatBlockMod.ClearCoatBlock {
    /**
      * Create a new ClearCoatBlock
      * @param name defines the block name
      */
    def this(name: String) = this()
  }
  /* static members */
  @js.native
  object ClearCoatBlock extends js.Object {
    
    /**
      * Gets the main code of the block (fragment side)
      * @param state current state of the node material building
      * @param ccBlock instance of a ClearCoatBlock or null if the code must be generated without an active clear coat module
      * @param reflectionBlock instance of a ReflectionBlock null if the code must be generated without an active reflection module
      * @param worldPosVarName name of the variable holding the world position
      * @param generateTBNSpace if true, the code needed to create the TBN coordinate space is generated
      * @param vTBNAvailable indicate that the vTBN variable is already existing because it has already been generated by another block (PerturbNormal or Anisotropy)
      * @param worldNormalVarName name of the variable holding the world normal
      * @returns the shader code
      */
    def GetCode(
      state: NodeMaterialBuildState,
      ccBlock: Nullable[typingsSlinky.babylonjs.clearCoatBlockMod.ClearCoatBlock],
      reflectionBlock: Nullable[typingsSlinky.babylonjs.reflectionBlockMod.ReflectionBlock],
      worldPosVarName: String,
      generateTBNSpace: Boolean,
      vTBNAvailable: Boolean,
      worldNormalVarName: String
    ): String = js.native
  }
  
  @js.native
  class PBRMetallicRoughnessBlock protected ()
    extends typingsSlinky.babylonjs.pbrMetallicRoughnessBlockMod.PBRMetallicRoughnessBlock {
    /**
      * Create a new ReflectionBlock
      * @param name defines the block name
      */
    def this(name: String) = this()
  }
  
  @js.native
  class ReflectionBlock protected ()
    extends typingsSlinky.babylonjs.reflectionBlockMod.ReflectionBlock {
    /**
      * Create a new ReflectionBlock
      * @param name defines the block name
      */
    def this(name: String) = this()
  }
  
  @js.native
  class RefractionBlock protected ()
    extends typingsSlinky.babylonjs.refractionBlockMod.RefractionBlock {
    /**
      * Create a new RefractionBlock
      * @param name defines the block name
      */
    def this(name: String) = this()
  }
  
  @js.native
  class SheenBlock protected ()
    extends typingsSlinky.babylonjs.sheenBlockMod.SheenBlock {
    /**
      * Create a new SheenBlock
      * @param name defines the block name
      */
    def this(name: String) = this()
  }
  
  @js.native
  class SubSurfaceBlock protected ()
    extends typingsSlinky.babylonjs.subSurfaceBlockMod.SubSurfaceBlock {
    /**
      * Create a new SubSurfaceBlock
      * @param name defines the block name
      */
    def this(name: String) = this()
  }
  /* static members */
  @js.native
  object SubSurfaceBlock extends js.Object {
    
    /**
      * Gets the main code of the block (fragment side)
      * @param state current state of the node material building
      * @param ssBlock instance of a SubSurfaceBlock or null if the code must be generated without an active sub surface module
      * @param reflectionBlock instance of a ReflectionBlock null if the code must be generated without an active reflection module
      * @param worldPosVarName name of the variable holding the world position
      * @returns the shader code
      */
    def GetCode(
      state: NodeMaterialBuildState,
      ssBlock: Nullable[typingsSlinky.babylonjs.subSurfaceBlockMod.SubSurfaceBlock],
      reflectionBlock: Nullable[typingsSlinky.babylonjs.reflectionBlockMod.ReflectionBlock],
      worldPosVarName: String
    ): String = js.native
  }
}
