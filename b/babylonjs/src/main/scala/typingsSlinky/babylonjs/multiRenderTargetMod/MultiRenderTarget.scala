package typingsSlinky.babylonjs.multiRenderTargetMod

import typingsSlinky.babylonjs.renderTargetTextureMod.RenderTargetTexture
import typingsSlinky.babylonjs.sceneMod.Scene
import typingsSlinky.babylonjs.textureMod.Texture
import scala.scalajs.js
import scala.scalajs.js.`|`
import scala.scalajs.js.annotation.{JSGlobalScope, JSGlobal, JSImport, JSName, JSBracketAccess}

@JSImport("babylonjs/Materials/Textures/multiRenderTarget", "MultiRenderTarget")
@js.native
class MultiRenderTarget protected () extends RenderTargetTexture {
  /**
    * Instantiate a new multi render target texture.
    * A multi render target, like a render target provides the ability to render to a texture.
    * Unlike the render target, it can render to several draw buffers in one draw.
    * This is specially interesting in deferred rendering or for any effects requiring more than
    * just one color from a single pass.
    * @param name Define the name of the texture
    * @param size Define the size of the buffers to render to
    * @param count Define the number of target we are rendering into
    * @param scene Define the scene the texture belongs to
    * @param options Define the options used to create the multi render target
    */
  def this(name: String, size: js.Any, count: Double, scene: Scene) = this()
  def this(name: String, size: js.Any, count: Double, scene: Scene, options: IMultiRenderTargetOptions) = this()
  
  var _createInternalTextures: js.Any = js.native
  
  var _createTextures: js.Any = js.native
  
  var _internalTextures: js.Any = js.native
  
  var _multiRenderTargetOptions: js.Any = js.native
  
  var _textures: js.Any = js.native
  
  /**
    * Get the depth texture generated by the multi render target if options.generateDepthTexture has been set
    */
  def depthTexture: Texture = js.native
  
  /**
    * Get if draw buffers are currently supported by the used hardware and browser.
    */
  def isSupported: Boolean = js.native
  
  /**
    * Release all the underlying texture used as draw buffers.
    */
  def releaseInternalTextures(): Unit = js.native
  
  /**
    * Resize all the textures in the multi render target.
    * Be carrefull as it will recreate all the data in the new texture.
    * @param size Define the new size
    */
  def resize(size: js.Any): Unit = js.native
  
  /**
    * Get the list of textures generated by the multi render target.
    */
  def textures: js.Array[Texture] = js.native
}
