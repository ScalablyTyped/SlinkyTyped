package typingsSlinky.babylonjs.global.BABYLON

import typingsSlinky.babylonjs.BABYLON.Nullable
import scala.scalajs.js
import scala.scalajs.js.`|`
import scala.scalajs.js.annotation.{JSGlobalScope, JSGlobal, JSImport, JSName, JSBracketAccess}

@JSGlobal("BABYLON.ClearCoatBlock")
@js.native
class ClearCoatBlock protected ()
  extends typingsSlinky.babylonjs.BABYLON.ClearCoatBlock {
  /**
    * Create a new ClearCoatBlock
    * @param name defines the block name
    */
  def this(name: String) = this()
}
/* static members */
@JSGlobal("BABYLON.ClearCoatBlock")
@js.native
object ClearCoatBlock extends js.Object {
  
  /**
    * Gets the main code of the block (fragment side)
    * @param state current state of the node material building
    * @param ccBlock instance of a ClearCoatBlock or null if the code must be generated without an active clear coat module
    * @param reflectionBlock instance of a ReflectionBlock null if the code must be generated without an active reflection module
    * @param worldPosVarName name of the variable holding the world position
    * @param generateTBNSpace if true, the code needed to create the TBN coordinate space is generated
    * @param vTBNAvailable indicate that the vTBN variable is already existing because it has already been generated by another block (PerturbNormal or Anisotropy)
    * @param worldNormalVarName name of the variable holding the world normal
    * @returns the shader code
    */
  def GetCode(
    state: typingsSlinky.babylonjs.BABYLON.NodeMaterialBuildState,
    ccBlock: Nullable[typingsSlinky.babylonjs.BABYLON.ClearCoatBlock],
    reflectionBlock: Nullable[typingsSlinky.babylonjs.BABYLON.ReflectionBlock],
    worldPosVarName: String,
    generateTBNSpace: Boolean,
    vTBNAvailable: Boolean,
    worldNormalVarName: String
  ): String = js.native
}
