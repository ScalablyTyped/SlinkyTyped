package typingsSlinky.browserfs

import typingsSlinky.browserfs.nodeFsStatsMod.default
import org.scalablytyped.runtime.StObject
import scala.scalajs.js
import scala.scalajs.js.`|`
import scala.scalajs.js.annotation.{JSGlobalScope, JSGlobal, JSImport, JSName, JSBracketAccess}

object fileIndexMod {
  
  @JSImport("browserfs/dist/node/generic/file_index", "DirInode")
  @js.native
  /**
    * Constructs an inode for a directory.
    */
  class DirInode[T] () extends Inode {
    def this(data: T) = this()
    
    var _ls: js.Any = js.native
    
    /**
      * Add the given item to the directory listing. Note that the given inode is
      * not copied, and will be mutated by the DirInode if it is a DirInode.
      * @param p Item name to add to the directory listing.
      * @param inode The inode for the
      *   item to add to the directory inode.
      * @return True if it was added, false if it already existed.
      */
    def addItem(p: String, inode: Inode): Boolean = js.native
    
    var data: js.Any = js.native
    
    def getData(): T | Null = js.native
    
    /**
      * Returns the inode for the indicated item, or null if it does not exist.
      * @param p Name of item in this directory.
      */
    def getItem(p: String): Inode | Null = js.native
    
    /**
      * Returns the directory listing for this directory. Paths in the directory are
      * relative to the directory's path.
      * @return The directory listing for this directory.
      */
    def getListing(): js.Array[String] = js.native
    
    /**
      * Return a Stats object for this inode.
      * @todo Should probably remove this at some point. This isn't the
      *       responsibility of the FileIndex.
      */
    def getStats(): default = js.native
    
    /**
      * Removes the given item from the directory listing.
      * @param p Name of item to remove from the directory listing.
      * @return Returns the item
      *   removed, or null if the item did not exist.
      */
    def remItem(p: String): Inode | Null = js.native
  }
  
  @JSImport("browserfs/dist/node/generic/file_index", "FileIndex")
  @js.native
  /**
    * Constructs a new FileIndex.
    */
  class FileIndex[T] () extends StObject {
    
    var _index: js.Any = js.native
    
    /**
      * Split into a (directory path, item name) pair
      */
    /* private */ def _split_path(p: js.Any): js.Any = js.native
    
    /**
      * Adds the given absolute path to the index if it is not already in the index.
      * Creates any needed parent directories.
      * @param path The path to add to the index.
      * @param inode The inode for the
      *   path to add.
      * @return 'True' if it was added or already exists, 'false' if there
      *   was an issue adding it (e.g. item in path is a file, item exists but is
      *   different).
      * @todo If adding fails and implicitly creates directories, we do not clean up
      *   the new empty directories.
      */
    def addPath(path: String, inode: Inode): Boolean = js.native
    
    /**
      * Adds the given absolute path to the index if it is not already in the index.
      * The path is added without special treatment (no joining of adjacent separators, etc).
      * Creates any needed parent directories.
      * @param path The path to add to the index.
      * @param inode The inode for the
      *   path to add.
      * @return 'True' if it was added or already exists, 'false' if there
      *   was an issue adding it (e.g. item in path is a file, item exists but is
      *   different).
      * @todo If adding fails and implicitly creates directories, we do not clean up
      *   the new empty directories.
      */
    def addPathFast(path: String, inode: Inode): Boolean = js.native
    
    /**
      * Runs the given function over all files in the index.
      */
    def fileIterator[T](cb: js.Function1[/* file */ T | Null, Unit]): Unit = js.native
    
    /**
      * Returns the inode of the given item.
      * @return Returns null if the item does not exist.
      */
    def getInode(path: String): Inode | Null = js.native
    
    /**
      * Retrieves the directory listing of the given path.
      * @return An array of files in the given path, or 'null' if it does not exist.
      */
    def ls(path: String): js.Array[String] | Null = js.native
    
    /**
      * Removes the given path. Can be a file or a directory.
      * @return The removed item,
      *   or null if it did not exist.
      */
    def removePath(path: String): Inode | Null = js.native
  }
  /* static members */
  object FileIndex {
    
    /**
      * Static method for constructing indices from a JSON listing.
      * @param listing Directory listing generated by tools/XHRIndexer.coffee
      * @return A new FileIndex object.
      */
    @JSImport("browserfs/dist/node/generic/file_index", "FileIndex.fromListing")
    @js.native
    def fromListing[T](listing: js.Any): FileIndex[T] = js.native
  }
  
  @JSImport("browserfs/dist/node/generic/file_index", "FileInode")
  @js.native
  class FileInode[T] protected () extends Inode {
    def this(data: T) = this()
    
    var data: js.Any = js.native
    
    def getData(): T = js.native
    
    def setData(data: T): Unit = js.native
  }
  
  @JSImport("browserfs/dist/node/generic/file_index", "isDirInode")
  @js.native
  def isDirInode[T](): /* is browserfs.browserfs/dist/node/generic/file_index.DirInode<T> */ Boolean = js.native
  @JSImport("browserfs/dist/node/generic/file_index", "isDirInode")
  @js.native
  def isDirInode[T](inode: Inode): /* is browserfs.browserfs/dist/node/generic/file_index.DirInode<T> */ Boolean = js.native
  
  @JSImport("browserfs/dist/node/generic/file_index", "isFileInode")
  @js.native
  def isFileInode[T](): /* is browserfs.browserfs/dist/node/generic/file_index.FileInode<T> */ Boolean = js.native
  @JSImport("browserfs/dist/node/generic/file_index", "isFileInode")
  @js.native
  def isFileInode[T](inode: Inode): /* is browserfs.browserfs/dist/node/generic/file_index.FileInode<T> */ Boolean = js.native
  
  @js.native
  trait Inode extends StObject {
    
    def isDir(): Boolean = js.native
    
    def isFile(): Boolean = js.native
  }
  object Inode {
    
    @scala.inline
    def apply(isDir: () => Boolean, isFile: () => Boolean): Inode = {
      val __obj = js.Dynamic.literal(isDir = js.Any.fromFunction0(isDir), isFile = js.Any.fromFunction0(isFile))
      __obj.asInstanceOf[Inode]
    }
    
    @scala.inline
    implicit class InodeMutableBuilder[Self <: Inode] (val x: Self) extends AnyVal {
      
      @scala.inline
      def setIsDir(value: () => Boolean): Self = StObject.set(x, "isDir", js.Any.fromFunction0(value))
      
      @scala.inline
      def setIsFile(value: () => Boolean): Self = StObject.set(x, "isFile", js.Any.fromFunction0(value))
    }
  }
}
