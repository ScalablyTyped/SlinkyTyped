package typingsSlinky.browserfs.fileIndexMod

import scala.scalajs.js
import scala.scalajs.js.`|`
import scala.scalajs.js.annotation.{JSGlobalScope, JSGlobal, JSImport, JSName, JSBracketAccess}

@JSImport("browserfs/dist/node/generic/file_index", "FileIndex")
@js.native
/**
  * Constructs a new FileIndex.
  */
class FileIndex[T] () extends js.Object {
  
  var _index: js.Any = js.native
  
  /**
    * Split into a (directory path, item name) pair
    */
  /* private */ def _split_path(p: js.Any): js.Any = js.native
  
  /**
    * Adds the given absolute path to the index if it is not already in the index.
    * Creates any needed parent directories.
    * @param path The path to add to the index.
    * @param inode The inode for the
    *   path to add.
    * @return 'True' if it was added or already exists, 'false' if there
    *   was an issue adding it (e.g. item in path is a file, item exists but is
    *   different).
    * @todo If adding fails and implicitly creates directories, we do not clean up
    *   the new empty directories.
    */
  def addPath(path: String, inode: Inode): Boolean = js.native
  
  /**
    * Adds the given absolute path to the index if it is not already in the index.
    * The path is added without special treatment (no joining of adjacent separators, etc).
    * Creates any needed parent directories.
    * @param path The path to add to the index.
    * @param inode The inode for the
    *   path to add.
    * @return 'True' if it was added or already exists, 'false' if there
    *   was an issue adding it (e.g. item in path is a file, item exists but is
    *   different).
    * @todo If adding fails and implicitly creates directories, we do not clean up
    *   the new empty directories.
    */
  def addPathFast(path: String, inode: Inode): Boolean = js.native
  
  /**
    * Runs the given function over all files in the index.
    */
  def fileIterator[T](cb: js.Function1[/* file */ T | Null, Unit]): Unit = js.native
  
  /**
    * Returns the inode of the given item.
    * @return Returns null if the item does not exist.
    */
  def getInode(path: String): Inode | Null = js.native
  
  /**
    * Retrieves the directory listing of the given path.
    * @return An array of files in the given path, or 'null' if it does not exist.
    */
  def ls(path: String): js.Array[String] | Null = js.native
  
  /**
    * Removes the given path. Can be a file or a directory.
    * @return The removed item,
    *   or null if it did not exist.
    */
  def removePath(path: String): Inode | Null = js.native
}
/* static members */
@JSImport("browserfs/dist/node/generic/file_index", "FileIndex")
@js.native
object FileIndex extends js.Object {
  
  /**
    * Static method for constructing indices from a JSON listing.
    * @param listing Directory listing generated by tools/XHRIndexer.coffee
    * @return A new FileIndex object.
    */
  def fromListing[T](listing: js.Any): FileIndex[T] = js.native
}
