package typingsSlinky.browserfs.xmlHttpRequestMod

import typingsSlinky.browserfs.fileSystemMod.BFSCallback
import typingsSlinky.browserfs.fileSystemMod.FileSystemOptions
import scala.scalajs.js
import scala.scalajs.js.`|`
import scala.scalajs.js.annotation.{JSGlobalScope, JSGlobal, JSImport, JSName, JSBracketAccess}

@JSImport("browserfs/dist/node/backend/XmlHttpRequest", JSImport.Default)
@js.native
class default protected () extends XmlHttpRequest {
  /**
    * **Deprecated. Please use XmlHttpRequest.Create() method instead to construct XmlHttpRequest objects.**
    *
    * Constructs the file system. You must provide the directory listing as a JSON object
    * produced by the `make_xhrfs_index` script.
    *
    * **DEPRECATED:** You may pass a URL to the file index to the constructor, which will fetch the file index
    * *synchronously* and may freeze up the web page. This behavior will be removed in the next major version
    * of BrowserFS.
    *
    * @param listingUrlOrObj index object or the path to the JSON file index generated by
    *   `make_xhrfs_index`.
    * @param prefixUrl URL that is prepended to any file locations in the file index. e.g. if `prefixUrl = 'data/`, and the user wants to open the file `/foo.txt`,
    * the file system will fetch file `data/foo.txt`. The browser will access the file relative to the currrent webpage
    * URL.
    */
  def this(listingUrlOrObj: String) = this()
  def this(listingUrlOrObj: js.Object) = this()
  def this(listingUrlOrObj: String, prefixUrl: String) = this()
  def this(listingUrlOrObj: js.Object, prefixUrl: String) = this()
  def this(listingUrlOrObj: String, prefixUrl: js.UndefOr[scala.Nothing], deprecateMsg: Boolean) = this()
  def this(listingUrlOrObj: String, prefixUrl: String, deprecateMsg: Boolean) = this()
  def this(listingUrlOrObj: js.Object, prefixUrl: js.UndefOr[scala.Nothing], deprecateMsg: Boolean) = this()
  def this(listingUrlOrObj: js.Object, prefixUrl: String, deprecateMsg: Boolean) = this()
}
/* static members */
@JSImport("browserfs/dist/node/backend/XmlHttpRequest", JSImport.Default)
@js.native
object default extends js.Object {
  
  /**
    * Construct an XmlHttpRequest file system backend with the given options.
    */
  def Create(opts: XmlHttpRequestOptions, cb: BFSCallback[XmlHttpRequest]): Unit = js.native
  
  /**
    * **Deprecated. Please use XmlHttpRequest.Create() method instead to construct XmlHttpRequest objects.**
    *
    * Constructs an XmlHttpRequest object using the directory listing at the given URL.
    * Uses the base URL as the URL prefix for fetched files.
    * @param cb Called when the file system has been instantiated, or if an error occurs.
    */
  def FromURL(url: String, cb: BFSCallback[XmlHttpRequest]): Unit = js.native
  def FromURL(
    url: String,
    cb: BFSCallback[XmlHttpRequest],
    baseUrl: js.UndefOr[scala.Nothing],
    deprecateMsg: Boolean
  ): Unit = js.native
  def FromURL(url: String, cb: BFSCallback[XmlHttpRequest], baseUrl: String): Unit = js.native
  def FromURL(url: String, cb: BFSCallback[XmlHttpRequest], baseUrl: String, deprecateMsg: Boolean): Unit = js.native
  
  val Name: String = js.native
  
  val Options: FileSystemOptions = js.native
  
  def isAvailable(): Boolean = js.native
}
