package typingsSlinky.mathjax.MathJax

import scala.scalajs.js
import scala.scalajs.js.`|`
import scala.scalajs.js.annotation.{JSGlobalScope, JSGlobal, JSImport, JSName, JSBracketAccess}

@js.native
trait MMLorHTMLConfiguration extends js.Object {
  
  /*This lets you set the preferred renderer on a browser-by-browser basis. You set the browser to either "MML" or
    * "HTML" depending on whether you want to use the NativeMML or HTML-CSS output processor. Note that although
    * Opera and Safari do process some MathML natively, their support is not sufficient to handle the more
    * complicated output generated by MathJax, so their settings are "HTML" by default. Although Firefox does
    * support a large subset of MathJax, it does not implement all the features needed by MathJax, and so it is
    * also set to "HTML" by default (this is new in v2.0).
    *
    * Note that users can still use the MathJax contextual menu to select a different renderer after the default
    * one has been chosen by MMLorHTML.js.
    */
  var prefer: js.UndefOr[BrowserPreference] = js.native
}
object MMLorHTMLConfiguration {
  
  @scala.inline
  def apply(): MMLorHTMLConfiguration = {
    val __obj = js.Dynamic.literal()
    __obj.asInstanceOf[MMLorHTMLConfiguration]
  }
  
  @scala.inline
  implicit class MMLorHTMLConfigurationOps[Self <: MMLorHTMLConfiguration] (val x: Self) extends AnyVal {
    
    @scala.inline
    def duplicate: Self = (js.Dynamic.global.Object.assign(js.Dynamic.literal(), x)).asInstanceOf[Self]
    
    @scala.inline
    def combineWith[Other <: js.Any](other: Other): Self with Other = (js.Dynamic.global.Object.assign(js.Dynamic.literal(), x, other.asInstanceOf[js.Any])).asInstanceOf[Self with Other]
    
    @scala.inline
    def set(key: String, value: js.Any): Self = {
      x.asInstanceOf[js.Dynamic].updateDynamic(key)(value)
      x
    }
    
    @scala.inline
    def setPrefer(value: BrowserPreference): Self = this.set("prefer", value.asInstanceOf[js.Any])
    
    @scala.inline
    def deletePrefer: Self = this.set("prefer", js.undefined)
  }
}
