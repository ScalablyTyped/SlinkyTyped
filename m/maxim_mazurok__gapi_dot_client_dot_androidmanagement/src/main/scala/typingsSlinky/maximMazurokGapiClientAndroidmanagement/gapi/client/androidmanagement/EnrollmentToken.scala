package typingsSlinky.maximMazurokGapiClientAndroidmanagement.gapi.client.androidmanagement

import scala.scalajs.js
import scala.scalajs.js.`|`
import scala.scalajs.js.annotation.{JSGlobalScope, JSGlobal, JSImport, JSName, JSBracketAccess}

@js.native
trait EnrollmentToken extends js.Object {
  
  /**
    * Optional, arbitrary data associated with the enrollment token. This could contain, for example, the ID of an org unit the device is assigned to after enrollment. After a device
    * enrolls with the token, this data will be exposed in the enrollment_token_data field of the Device resource. The data must be 1024 characters or less; otherwise, the creation
    * request will fail.
    */
  var additionalData: js.UndefOr[String] = js.native
  
  /**
    * Controls whether personal usage is allowed on a device provisioned with this enrollment token.For company-owned devices: Enabling personal usage allows the user to set up a work
    * profile on the device. Disabling personal usage requires the user provision the device as a fully managed device.For personally-owned devices: Enabling personal usage allows the
    * user to set up a work profile on the device. Disabling personal usage will prevent the device from provisioning. Personal usage cannot be disabled on personally-owned device.
    */
  var allowPersonalUsage: js.UndefOr[String] = js.native
  
  /** The length of time the enrollment token is valid, ranging from 1 minute to 30 days. If not specified, the default duration is 1 hour. */
  var duration: js.UndefOr[String] = js.native
  
  /** The expiration time of the token. This is a read-only field generated by the server. */
  var expirationTimestamp: js.UndefOr[String] = js.native
  
  /** The name of the enrollment token, which is generated by the server during creation, in the form enterprises/{enterpriseId}/enrollmentTokens/{enrollmentTokenId}. */
  var name: js.UndefOr[String] = js.native
  
  /** Whether the enrollment token is for one time use only. If the flag is set to true, only one device can use it for registration. */
  var oneTimeOnly: js.UndefOr[Boolean] = js.native
  
  /**
    * The name of the policy initially applied to the enrolled device, in the form enterprises/{enterpriseId}/policies/{policyId}. If not specified, the policy_name for the device’s user
    * is applied. If user_name is also not specified, enterprises/{enterpriseId}/policies/default is applied by default. When updating this field, you can specify only the policyId as
    * long as the policyId doesn’t contain any slashes. The rest of the policy name will be inferred.
    */
  var policyName: js.UndefOr[String] = js.native
  
  /**
    * A JSON string whose UTF-8 representation can be used to generate a QR code to enroll a device with this enrollment token. To enroll a device using NFC, the NFC record must contain a
    * serialized java.util.Properties representation of the properties in the JSON.
    */
  var qrCode: js.UndefOr[String] = js.native
  
  /**
    * The user associated with this enrollment token. If it's specified when the enrollment token is created and the user does not exist, the user will be created. This field must not
    * contain personally identifiable information. Only the account_identifier field needs to be set.
    */
  var user: js.UndefOr[User] = js.native
  
  /** The token value that's passed to the device and authorizes the device to enroll. This is a read-only field generated by the server. */
  var value: js.UndefOr[String] = js.native
}
object EnrollmentToken {
  
  @scala.inline
  def apply(): EnrollmentToken = {
    val __obj = js.Dynamic.literal()
    __obj.asInstanceOf[EnrollmentToken]
  }
  
  @scala.inline
  implicit class EnrollmentTokenOps[Self <: EnrollmentToken] (val x: Self) extends AnyVal {
    
    @scala.inline
    def duplicate: Self = (js.Dynamic.global.Object.assign(js.Dynamic.literal(), x)).asInstanceOf[Self]
    
    @scala.inline
    def combineWith[Other <: js.Any](other: Other): Self with Other = (js.Dynamic.global.Object.assign(js.Dynamic.literal(), x, other.asInstanceOf[js.Any])).asInstanceOf[Self with Other]
    
    @scala.inline
    def set(key: String, value: js.Any): Self = {
      x.asInstanceOf[js.Dynamic].updateDynamic(key)(value)
      x
    }
    
    @scala.inline
    def setAdditionalData(value: String): Self = this.set("additionalData", value.asInstanceOf[js.Any])
    
    @scala.inline
    def deleteAdditionalData: Self = this.set("additionalData", js.undefined)
    
    @scala.inline
    def setAllowPersonalUsage(value: String): Self = this.set("allowPersonalUsage", value.asInstanceOf[js.Any])
    
    @scala.inline
    def deleteAllowPersonalUsage: Self = this.set("allowPersonalUsage", js.undefined)
    
    @scala.inline
    def setDuration(value: String): Self = this.set("duration", value.asInstanceOf[js.Any])
    
    @scala.inline
    def deleteDuration: Self = this.set("duration", js.undefined)
    
    @scala.inline
    def setExpirationTimestamp(value: String): Self = this.set("expirationTimestamp", value.asInstanceOf[js.Any])
    
    @scala.inline
    def deleteExpirationTimestamp: Self = this.set("expirationTimestamp", js.undefined)
    
    @scala.inline
    def setName(value: String): Self = this.set("name", value.asInstanceOf[js.Any])
    
    @scala.inline
    def deleteName: Self = this.set("name", js.undefined)
    
    @scala.inline
    def setOneTimeOnly(value: Boolean): Self = this.set("oneTimeOnly", value.asInstanceOf[js.Any])
    
    @scala.inline
    def deleteOneTimeOnly: Self = this.set("oneTimeOnly", js.undefined)
    
    @scala.inline
    def setPolicyName(value: String): Self = this.set("policyName", value.asInstanceOf[js.Any])
    
    @scala.inline
    def deletePolicyName: Self = this.set("policyName", js.undefined)
    
    @scala.inline
    def setQrCode(value: String): Self = this.set("qrCode", value.asInstanceOf[js.Any])
    
    @scala.inline
    def deleteQrCode: Self = this.set("qrCode", js.undefined)
    
    @scala.inline
    def setUser(value: User): Self = this.set("user", value.asInstanceOf[js.Any])
    
    @scala.inline
    def deleteUser: Self = this.set("user", js.undefined)
    
    @scala.inline
    def setValue(value: String): Self = this.set("value", value.asInstanceOf[js.Any])
    
    @scala.inline
    def deleteValue: Self = this.set("value", js.undefined)
  }
}
