package typingsSlinky.maximMazurokGapiClientFitness.gapi.client.fitness

import typingsSlinky.gapiClient.gapi.client.Request
import typingsSlinky.maximMazurokGapiClientFitness.anon.Alt
import typingsSlinky.maximMazurokGapiClientFitness.anon.DataTypeName
import typingsSlinky.maximMazurokGapiClientFitness.anon.Key
import typingsSlinky.maximMazurokGapiClientFitness.anon.Oauthtoken
import typingsSlinky.maximMazurokGapiClientFitness.anon.PrettyPrint
import org.scalablytyped.runtime.StObject
import scala.scalajs.js
import scala.scalajs.js.`|`
import scala.scalajs.js.annotation.{JSGlobalScope, JSGlobal, JSImport, JSName, JSBracketAccess}

@js.native
trait DataSourcesResource extends StObject {
  
  def create(request: Alt, body: DataSource): Request[DataSource] = js.native
  /**
    * Creates a new data source that is unique across all data sources belonging to this user. A data source is a unique source of sensor data. Data sources can expose raw data coming
    * from hardware sensors on local or companion devices. They can also expose derived data, created by transforming or merging other data sources. Multiple data sources can exist for
    * the same data type. Every data point in every dataset inserted into or read from the Fitness API has an associated data source. Each data source produces a unique stream of dataset
    * updates, with a unique data source identifier. Not all changes to data source affect the data stream ID, so that data collected by updated versions of the same application/device
    * can still be considered to belong to the same data source. Data sources are identified using a string generated by the server, based on the contents of the source being created. The
    * dataStreamId field should not be set when invoking this method. It will be automatically generated by the server with the correct format. If a dataStreamId is set, it must match the
    * format that the server would generate. This format is a combination of some fields from the data source, and has a specific order. If it doesn't match, the request will fail with an
    * error. Specifying a DataType which is not a known type (beginning with "com.google.") will create a DataSource with a *custom data type*. Custom data types are only readable by the
    * application that created them. Custom data types are *deprecated*; use standard data types instead. In addition to the data source fields included in the data source ID, the
    * developer project number that is authenticated when creating the data source is included. This developer project number is obfuscated when read by any other developer reading public
    * data types.
    */
  def create(request: Key): Request[DataSource] = js.native
  
  var dataPointChanges: DataPointChangesResource = js.native
  
  var datasets: DatasetsResource = js.native
  
  /** Deletes the specified data source. The request will fail if the data source contains any data points. */
  def delete(): Request[DataSource] = js.native
  def delete(request: Oauthtoken): Request[DataSource] = js.native
  
  /** Returns the specified data source. */
  def get(): Request[DataSource] = js.native
  def get(request: Oauthtoken): Request[DataSource] = js.native
  
  /**
    * Lists all data sources that are visible to the developer, using the OAuth scopes provided. The list is not exhaustive; the user may have private data sources that are only visible
    * to other developers, or calls using other scopes.
    */
  def list(): Request[ListDataSourcesResponse] = js.native
  def list(request: DataTypeName): Request[ListDataSourcesResponse] = js.native
  
  def update(request: Oauthtoken, body: DataSource): Request[DataSource] = js.native
  /**
    * Updates the specified data source. The dataStreamId, dataType, type, dataStreamName, and device properties with the exception of version, cannot be modified. Data sources are
    * identified by their dataStreamId.
    */
  def update(request: PrettyPrint): Request[DataSource] = js.native
}
