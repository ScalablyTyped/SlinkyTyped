package typingsSlinky.mendixmodelsdk

import typingsSlinky.mendixmodelsdk.abstractModelMod.AbstractModel
import typingsSlinky.mendixmodelsdk.abstractModelMod.IAbstractModel
import typingsSlinky.mendixmodelsdk.appservicesMod.appservices.AppServiceAction
import typingsSlinky.mendixmodelsdk.appservicesMod.appservices.AppServiceActionParameter
import typingsSlinky.mendixmodelsdk.appservicesMod.appservices.IAppServiceAction
import typingsSlinky.mendixmodelsdk.appservicesMod.appservices.IAppServiceActionParameter
import typingsSlinky.mendixmodelsdk.appservicesMod.appservices.IConsumedAppService
import typingsSlinky.mendixmodelsdk.appservicesMod.appservices.Msd
import typingsSlinky.mendixmodelsdk.appservicesMod.appservices.MsdAssociation
import typingsSlinky.mendixmodelsdk.appservicesMod.appservices.MsdAttribute
import typingsSlinky.mendixmodelsdk.appservicesMod.appservices.MsdDomainModel
import typingsSlinky.mendixmodelsdk.appservicesMod.appservices.MsdEntity
import typingsSlinky.mendixmodelsdk.appservicesMod.appservices.MsdEnumeration
import typingsSlinky.mendixmodelsdk.appservicesMod.appservices.MsdEnumerationContainer
import typingsSlinky.mendixmodelsdk.appservicesMod.appservices.MsdEnumerationValue
import typingsSlinky.mendixmodelsdk.appservicesMod.appservices.MsdMetadata
import typingsSlinky.mendixmodelsdk.appservicesMod.appservices.MsdMicroflow
import typingsSlinky.mendixmodelsdk.appservicesMod.appservices.MsdMicroflowParameter
import typingsSlinky.mendixmodelsdk.appservicesMod.appservices.MsdText
import typingsSlinky.mendixmodelsdk.appservicesMod.appservices.MsdVersion
import typingsSlinky.mendixmodelsdk.codeactionsMod.codeactions.BasicParameterType
import typingsSlinky.mendixmodelsdk.codeactionsMod.codeactions.BooleanType
import typingsSlinky.mendixmodelsdk.codeactionsMod.codeactions.ConcreteEntityType
import typingsSlinky.mendixmodelsdk.codeactionsMod.codeactions.DateTimeType
import typingsSlinky.mendixmodelsdk.codeactionsMod.codeactions.DecimalType
import typingsSlinky.mendixmodelsdk.codeactionsMod.codeactions.EntityTypeParameterType
import typingsSlinky.mendixmodelsdk.codeactionsMod.codeactions.EnumerationType
import typingsSlinky.mendixmodelsdk.codeactionsMod.codeactions.FloatType
import typingsSlinky.mendixmodelsdk.codeactionsMod.codeactions.ICodeAction
import typingsSlinky.mendixmodelsdk.codeactionsMod.codeactions.IntegerType
import typingsSlinky.mendixmodelsdk.codeactionsMod.codeactions.ListType
import typingsSlinky.mendixmodelsdk.codeactionsMod.codeactions.MicroflowActionInfo
import typingsSlinky.mendixmodelsdk.codeactionsMod.codeactions.ParameterizedEntityType
import typingsSlinky.mendixmodelsdk.codeactionsMod.codeactions.StringTemplateParameterType
import typingsSlinky.mendixmodelsdk.codeactionsMod.codeactions.StringType
import typingsSlinky.mendixmodelsdk.codeactionsMod.codeactions.TypeParameter
import typingsSlinky.mendixmodelsdk.codeactionsMod.codeactions.VoidType
import typingsSlinky.mendixmodelsdk.commonMod.common.IErrorCallback
import typingsSlinky.mendixmodelsdk.constantsMod.constants.IConstant
import typingsSlinky.mendixmodelsdk.customwidgetsMod.customwidgets.CustomWidget
import typingsSlinky.mendixmodelsdk.customwidgetsMod.customwidgets.CustomWidgetDatabaseSource
import typingsSlinky.mendixmodelsdk.customwidgetsMod.customwidgets.CustomWidgetType
import typingsSlinky.mendixmodelsdk.customwidgetsMod.customwidgets.CustomWidgetXPathSource
import typingsSlinky.mendixmodelsdk.customwidgetsMod.customwidgets.WidgetEnumerationValue
import typingsSlinky.mendixmodelsdk.customwidgetsMod.customwidgets.WidgetObject
import typingsSlinky.mendixmodelsdk.customwidgetsMod.customwidgets.WidgetObjectType
import typingsSlinky.mendixmodelsdk.customwidgetsMod.customwidgets.WidgetProperty
import typingsSlinky.mendixmodelsdk.customwidgetsMod.customwidgets.WidgetPropertyType
import typingsSlinky.mendixmodelsdk.customwidgetsMod.customwidgets.WidgetReturnType
import typingsSlinky.mendixmodelsdk.customwidgetsMod.customwidgets.WidgetTranslation
import typingsSlinky.mendixmodelsdk.customwidgetsMod.customwidgets.WidgetValue
import typingsSlinky.mendixmodelsdk.customwidgetsMod.customwidgets.WidgetValueType
import typingsSlinky.mendixmodelsdk.datasetsMod.datasets.DataSetAccess
import typingsSlinky.mendixmodelsdk.datasetsMod.datasets.DataSetColumn
import typingsSlinky.mendixmodelsdk.datasetsMod.datasets.DataSetConstraintAccess
import typingsSlinky.mendixmodelsdk.datasetsMod.datasets.DataSetDateTimeConstraint
import typingsSlinky.mendixmodelsdk.datasetsMod.datasets.DataSetModuleRoleAccess
import typingsSlinky.mendixmodelsdk.datasetsMod.datasets.DataSetNumericConstraint
import typingsSlinky.mendixmodelsdk.datasetsMod.datasets.DataSetObjectConstraint
import typingsSlinky.mendixmodelsdk.datasetsMod.datasets.DataSetParameter
import typingsSlinky.mendixmodelsdk.datasetsMod.datasets.DataSetParameterAccess
import typingsSlinky.mendixmodelsdk.datasetsMod.datasets.IDataSet
import typingsSlinky.mendixmodelsdk.datasetsMod.datasets.IDataSetParameter
import typingsSlinky.mendixmodelsdk.datasetsMod.datasets.JavaDataSetSource
import typingsSlinky.mendixmodelsdk.datasetsMod.datasets.OqlDataSetSource
import typingsSlinky.mendixmodelsdk.datatypesMod.datatypes.BinaryType
import typingsSlinky.mendixmodelsdk.datatypesMod.datatypes.EmptyType
import typingsSlinky.mendixmodelsdk.datatypesMod.datatypes.ObjectType
import typingsSlinky.mendixmodelsdk.datatypesMod.datatypes.UnknownType
import typingsSlinky.mendixmodelsdk.documenttemplatesMod.documenttemplates.ConditionSettings
import typingsSlinky.mendixmodelsdk.documenttemplatesMod.documenttemplates.DataGrid
import typingsSlinky.mendixmodelsdk.documenttemplatesMod.documenttemplates.DataGridCell
import typingsSlinky.mendixmodelsdk.documenttemplatesMod.documenttemplates.DataGridColumn
import typingsSlinky.mendixmodelsdk.documenttemplatesMod.documenttemplates.DataView
import typingsSlinky.mendixmodelsdk.documenttemplatesMod.documenttemplates.DataViewContents
import typingsSlinky.mendixmodelsdk.documenttemplatesMod.documenttemplates.DocumentTemplateParameter
import typingsSlinky.mendixmodelsdk.documenttemplatesMod.documenttemplates.DynamicImageViewer
import typingsSlinky.mendixmodelsdk.documenttemplatesMod.documenttemplates.DynamicLabel
import typingsSlinky.mendixmodelsdk.documenttemplatesMod.documenttemplates.Footer
import typingsSlinky.mendixmodelsdk.documenttemplatesMod.documenttemplates.GridSortBar
import typingsSlinky.mendixmodelsdk.documenttemplatesMod.documenttemplates.GridSortItem
import typingsSlinky.mendixmodelsdk.documenttemplatesMod.documenttemplates.Header
import typingsSlinky.mendixmodelsdk.documenttemplatesMod.documenttemplates.IDocumentTemplate
import typingsSlinky.mendixmodelsdk.documenttemplatesMod.documenttemplates.LineBreak
import typingsSlinky.mendixmodelsdk.documenttemplatesMod.documenttemplates.PageBreak
import typingsSlinky.mendixmodelsdk.documenttemplatesMod.documenttemplates.StaticImageViewer
import typingsSlinky.mendixmodelsdk.documenttemplatesMod.documenttemplates.StaticLabel
import typingsSlinky.mendixmodelsdk.documenttemplatesMod.documenttemplates.Style
import typingsSlinky.mendixmodelsdk.documenttemplatesMod.documenttemplates.Table
import typingsSlinky.mendixmodelsdk.documenttemplatesMod.documenttemplates.TableCell
import typingsSlinky.mendixmodelsdk.documenttemplatesMod.documenttemplates.TableRow
import typingsSlinky.mendixmodelsdk.documenttemplatesMod.documenttemplates.TemplateGrid
import typingsSlinky.mendixmodelsdk.documenttemplatesMod.documenttemplates.TemplateGridContents
import typingsSlinky.mendixmodelsdk.documenttemplatesMod.documenttemplates.Title
import typingsSlinky.mendixmodelsdk.domainmodelsMod.domainmodels.AccessRule
import typingsSlinky.mendixmodelsdk.domainmodelsMod.domainmodels.Annotation
import typingsSlinky.mendixmodelsdk.domainmodelsMod.domainmodels.Association
import typingsSlinky.mendixmodelsdk.domainmodelsMod.domainmodels.AssociationCapabilities
import typingsSlinky.mendixmodelsdk.domainmodelsMod.domainmodels.AssociationDeleteBehavior
import typingsSlinky.mendixmodelsdk.domainmodelsMod.domainmodels.AssociationRef
import typingsSlinky.mendixmodelsdk.domainmodelsMod.domainmodels.Attribute
import typingsSlinky.mendixmodelsdk.domainmodelsMod.domainmodels.AttributeCapabilities
import typingsSlinky.mendixmodelsdk.domainmodelsMod.domainmodels.AttributeRef
import typingsSlinky.mendixmodelsdk.domainmodelsMod.domainmodels.AutoNumberAttributeType
import typingsSlinky.mendixmodelsdk.domainmodelsMod.domainmodels.BinaryAttributeType
import typingsSlinky.mendixmodelsdk.domainmodelsMod.domainmodels.BooleanAttributeType
import typingsSlinky.mendixmodelsdk.domainmodelsMod.domainmodels.CalculatedValue
import typingsSlinky.mendixmodelsdk.domainmodelsMod.domainmodels.CrossAssociation
import typingsSlinky.mendixmodelsdk.domainmodelsMod.domainmodels.CurrencyAttributeType
import typingsSlinky.mendixmodelsdk.domainmodelsMod.domainmodels.DateTimeAttributeType
import typingsSlinky.mendixmodelsdk.domainmodelsMod.domainmodels.DecimalAttributeType
import typingsSlinky.mendixmodelsdk.domainmodelsMod.domainmodels.DirectEntityRef
import typingsSlinky.mendixmodelsdk.domainmodelsMod.domainmodels.Entity
import typingsSlinky.mendixmodelsdk.domainmodelsMod.domainmodels.EntityCapabilities
import typingsSlinky.mendixmodelsdk.domainmodelsMod.domainmodels.EntityKey
import typingsSlinky.mendixmodelsdk.domainmodelsMod.domainmodels.EntityKeyPart
import typingsSlinky.mendixmodelsdk.domainmodelsMod.domainmodels.EntityRefStep
import typingsSlinky.mendixmodelsdk.domainmodelsMod.domainmodels.EnumerationAttributeType
import typingsSlinky.mendixmodelsdk.domainmodelsMod.domainmodels.EqualsToRuleInfo
import typingsSlinky.mendixmodelsdk.domainmodelsMod.domainmodels.EventHandler
import typingsSlinky.mendixmodelsdk.domainmodelsMod.domainmodels.FloatAttributeType
import typingsSlinky.mendixmodelsdk.domainmodelsMod.domainmodels.Generalization
import typingsSlinky.mendixmodelsdk.domainmodelsMod.domainmodels.HashedStringAttributeType
import typingsSlinky.mendixmodelsdk.domainmodelsMod.domainmodels.IAssociationBase
import typingsSlinky.mendixmodelsdk.domainmodelsMod.domainmodels.IAttribute
import typingsSlinky.mendixmodelsdk.domainmodelsMod.domainmodels.IDomainModel
import typingsSlinky.mendixmodelsdk.domainmodelsMod.domainmodels.IEntity
import typingsSlinky.mendixmodelsdk.domainmodelsMod.domainmodels.IRemoteEntitySourceDocument
import typingsSlinky.mendixmodelsdk.domainmodelsMod.domainmodels.Index
import typingsSlinky.mendixmodelsdk.domainmodelsMod.domainmodels.IndexedAttribute
import typingsSlinky.mendixmodelsdk.domainmodelsMod.domainmodels.IndirectEntityRef
import typingsSlinky.mendixmodelsdk.domainmodelsMod.domainmodels.IntegerAttributeType
import typingsSlinky.mendixmodelsdk.domainmodelsMod.domainmodels.LongAttributeType
import typingsSlinky.mendixmodelsdk.domainmodelsMod.domainmodels.MaxLengthRuleInfo
import typingsSlinky.mendixmodelsdk.domainmodelsMod.domainmodels.MemberAccess
import typingsSlinky.mendixmodelsdk.domainmodelsMod.domainmodels.NoGeneralization
import typingsSlinky.mendixmodelsdk.domainmodelsMod.domainmodels.RangeRuleInfo
import typingsSlinky.mendixmodelsdk.domainmodelsMod.domainmodels.RegExRuleInfo
import typingsSlinky.mendixmodelsdk.domainmodelsMod.domainmodels.RequiredRuleInfo
import typingsSlinky.mendixmodelsdk.domainmodelsMod.domainmodels.StoredValue
import typingsSlinky.mendixmodelsdk.domainmodelsMod.domainmodels.StringAttributeType
import typingsSlinky.mendixmodelsdk.domainmodelsMod.domainmodels.UniqueRuleInfo
import typingsSlinky.mendixmodelsdk.domainmodelsMod.domainmodels.ValidationRule
import typingsSlinky.mendixmodelsdk.enumerationsMod.enumerations.Condition
import typingsSlinky.mendixmodelsdk.enumerationsMod.enumerations.EnumerationValue
import typingsSlinky.mendixmodelsdk.enumerationsMod.enumerations.IEnumeration
import typingsSlinky.mendixmodelsdk.enumerationsMod.enumerations.IEnumerationValue
import typingsSlinky.mendixmodelsdk.exportmappingsMod.exportmappings.ExportObjectMappingElement
import typingsSlinky.mendixmodelsdk.exportmappingsMod.exportmappings.ExportValueMappingElement
import typingsSlinky.mendixmodelsdk.exportmappingsMod.exportmappings.IExportMapping
import typingsSlinky.mendixmodelsdk.expressionsMod.expressions.BinaryExpression
import typingsSlinky.mendixmodelsdk.expressionsMod.expressions.BooleanLiteral
import typingsSlinky.mendixmodelsdk.expressionsMod.expressions.ConstantRefExpression
import typingsSlinky.mendixmodelsdk.expressionsMod.expressions.EmptyLiteral
import typingsSlinky.mendixmodelsdk.expressionsMod.expressions.EnumerationValueRefExpression
import typingsSlinky.mendixmodelsdk.expressionsMod.expressions.FloatLiteral
import typingsSlinky.mendixmodelsdk.expressionsMod.expressions.FunctionCallExpression
import typingsSlinky.mendixmodelsdk.expressionsMod.expressions.GlobalVariableRef
import typingsSlinky.mendixmodelsdk.expressionsMod.expressions.IfExpression
import typingsSlinky.mendixmodelsdk.expressionsMod.expressions.IntegerLiteral
import typingsSlinky.mendixmodelsdk.expressionsMod.expressions.NoExpression
import typingsSlinky.mendixmodelsdk.expressionsMod.expressions.NoVariableRef
import typingsSlinky.mendixmodelsdk.expressionsMod.expressions.ParenthesisExpression
import typingsSlinky.mendixmodelsdk.expressionsMod.expressions.StringLiteral
import typingsSlinky.mendixmodelsdk.expressionsMod.expressions.UnaryExpression
import typingsSlinky.mendixmodelsdk.expressionsMod.expressions.UnparsableExpression
import typingsSlinky.mendixmodelsdk.expressionsMod.expressions.VariableRefExpression
import typingsSlinky.mendixmodelsdk.imagesMod.images.IImage
import typingsSlinky.mendixmodelsdk.imagesMod.images.IImageCollection
import typingsSlinky.mendixmodelsdk.imagesMod.images.Image
import typingsSlinky.mendixmodelsdk.imodelserverclientMod.IModelServerClient
import typingsSlinky.mendixmodelsdk.importmappingsMod.importmappings.IImportMapping
import typingsSlinky.mendixmodelsdk.importmappingsMod.importmappings.ImportObjectMappingElement
import typingsSlinky.mendixmodelsdk.importmappingsMod.importmappings.ImportValueMappingElement
import typingsSlinky.mendixmodelsdk.javaactionsMod.javaactions.ExportMappingJavaActionParameterType
import typingsSlinky.mendixmodelsdk.javaactionsMod.javaactions.ExportMappingParameterType
import typingsSlinky.mendixmodelsdk.javaactionsMod.javaactions.IJavaAction
import typingsSlinky.mendixmodelsdk.javaactionsMod.javaactions.IJavaActionParameter
import typingsSlinky.mendixmodelsdk.javaactionsMod.javaactions.ImportMappingJavaActionParameterType
import typingsSlinky.mendixmodelsdk.javaactionsMod.javaactions.ImportMappingParameterType
import typingsSlinky.mendixmodelsdk.javaactionsMod.javaactions.JavaActionParameter
import typingsSlinky.mendixmodelsdk.javaactionsMod.javaactions.MicroflowJavaActionParameterType
import typingsSlinky.mendixmodelsdk.javaactionsMod.javaactions.MicroflowParameterType
import typingsSlinky.mendixmodelsdk.javascriptactionsMod.javascriptactions.IJavaScriptAction
import typingsSlinky.mendixmodelsdk.javascriptactionsMod.javascriptactions.IJavaScriptActionParameter
import typingsSlinky.mendixmodelsdk.javascriptactionsMod.javascriptactions.JavaScriptActionParameter
import typingsSlinky.mendixmodelsdk.javascriptactionsMod.javascriptactions.NanoflowJavaScriptActionParameterType
import typingsSlinky.mendixmodelsdk.jsonstructuresMod.jsonstructures.IJsonStructure
import typingsSlinky.mendixmodelsdk.jsonstructuresMod.jsonstructures.JsonElement
import typingsSlinky.mendixmodelsdk.kafkaMod.kafka.IConsumedKafkaService
import typingsSlinky.mendixmodelsdk.kafkaMod.kafka.IPublishedKafkaService
import typingsSlinky.mendixmodelsdk.kafkaMod.kafka.KafkaMappedValue
import typingsSlinky.mendixmodelsdk.kafkaMod.kafka.KafkaRemoteEntitySource
import typingsSlinky.mendixmodelsdk.kafkaMod.kafka.PublishedKafkaResource
import typingsSlinky.mendixmodelsdk.mappingsMod.mappings.IMappingDocument
import typingsSlinky.mendixmodelsdk.mappingsMod.mappings.MappingMicroflowCall
import typingsSlinky.mendixmodelsdk.mappingsMod.mappings.MappingMicroflowParameter
import typingsSlinky.mendixmodelsdk.menusMod.menus.IMenuDocument
import typingsSlinky.mendixmodelsdk.menusMod.menus.MenuItem
import typingsSlinky.mendixmodelsdk.menusMod.menus.MenuItemCollection
import typingsSlinky.mendixmodelsdk.messagedefinitionsMod.messagedefinitions.AssociationElement
import typingsSlinky.mendixmodelsdk.messagedefinitionsMod.messagedefinitions.AttributeElement
import typingsSlinky.mendixmodelsdk.messagedefinitionsMod.messagedefinitions.EntityElement
import typingsSlinky.mendixmodelsdk.messagedefinitionsMod.messagedefinitions.EntityMessageDefinition
import typingsSlinky.mendixmodelsdk.messagedefinitionsMod.messagedefinitions.ExposedAssociation
import typingsSlinky.mendixmodelsdk.messagedefinitionsMod.messagedefinitions.ExposedAttribute
import typingsSlinky.mendixmodelsdk.messagedefinitionsMod.messagedefinitions.ExposedEntity
import typingsSlinky.mendixmodelsdk.messagedefinitionsMod.messagedefinitions.IMessageDefinition
import typingsSlinky.mendixmodelsdk.messagedefinitionsMod.messagedefinitions.IMessageDefinitionCollection
import typingsSlinky.mendixmodelsdk.microflowsMod.microflows.ActionActivity
import typingsSlinky.mendixmodelsdk.microflowsMod.microflows.AdvancedRequestHandling
import typingsSlinky.mendixmodelsdk.microflowsMod.microflows.AggregateListAction
import typingsSlinky.mendixmodelsdk.microflowsMod.microflows.AnnotationFlow
import typingsSlinky.mendixmodelsdk.microflowsMod.microflows.AppServiceCallAction
import typingsSlinky.mendixmodelsdk.microflowsMod.microflows.AppServiceCallParameterMapping
import typingsSlinky.mendixmodelsdk.microflowsMod.microflows.AssociationRetrieveSource
import typingsSlinky.mendixmodelsdk.microflowsMod.microflows.BasicCodeActionParameterValue
import typingsSlinky.mendixmodelsdk.microflowsMod.microflows.BasicJavaActionParameterValue
import typingsSlinky.mendixmodelsdk.microflowsMod.microflows.BinaryRequestHandling
import typingsSlinky.mendixmodelsdk.microflowsMod.microflows.BreakEvent
import typingsSlinky.mendixmodelsdk.microflowsMod.microflows.CastAction
import typingsSlinky.mendixmodelsdk.microflowsMod.microflows.ChangeListAction
import typingsSlinky.mendixmodelsdk.microflowsMod.microflows.ChangeObjectAction
import typingsSlinky.mendixmodelsdk.microflowsMod.microflows.ChangeVariableAction
import typingsSlinky.mendixmodelsdk.microflowsMod.microflows.CloseFormAction
import typingsSlinky.mendixmodelsdk.microflowsMod.microflows.CommitAction
import typingsSlinky.mendixmodelsdk.microflowsMod.microflows.ConstantRange
import typingsSlinky.mendixmodelsdk.microflowsMod.microflows.Contains
import typingsSlinky.mendixmodelsdk.microflowsMod.microflows.ContinueEvent
import typingsSlinky.mendixmodelsdk.microflowsMod.microflows.CreateListAction
import typingsSlinky.mendixmodelsdk.microflowsMod.microflows.CreateObjectAction
import typingsSlinky.mendixmodelsdk.microflowsMod.microflows.CreateVariableAction
import typingsSlinky.mendixmodelsdk.microflowsMod.microflows.CustomRange
import typingsSlinky.mendixmodelsdk.microflowsMod.microflows.CustomRequestHandling
import typingsSlinky.mendixmodelsdk.microflowsMod.microflows.DatabaseRetrieveSource
import typingsSlinky.mendixmodelsdk.microflowsMod.microflows.DeleteAction
import typingsSlinky.mendixmodelsdk.microflowsMod.microflows.DocumentTemplateParameterMapping
import typingsSlinky.mendixmodelsdk.microflowsMod.microflows.DownloadFileAction
import typingsSlinky.mendixmodelsdk.microflowsMod.microflows.EndEvent
import typingsSlinky.mendixmodelsdk.microflowsMod.microflows.EntityTypeCodeActionParameterValue
import typingsSlinky.mendixmodelsdk.microflowsMod.microflows.EntityTypeJavaActionParameterValue
import typingsSlinky.mendixmodelsdk.microflowsMod.microflows.EnumerationCase
import typingsSlinky.mendixmodelsdk.microflowsMod.microflows.ErrorEvent
import typingsSlinky.mendixmodelsdk.microflowsMod.microflows.ExclusiveMerge
import typingsSlinky.mendixmodelsdk.microflowsMod.microflows.ExclusiveSplit
import typingsSlinky.mendixmodelsdk.microflowsMod.microflows.ExportMappingJavaActionParameterValue
import typingsSlinky.mendixmodelsdk.microflowsMod.microflows.ExportMappingParameterValue
import typingsSlinky.mendixmodelsdk.microflowsMod.microflows.ExportXmlAction
import typingsSlinky.mendixmodelsdk.microflowsMod.microflows.ExpressionSplitCondition
import typingsSlinky.mendixmodelsdk.microflowsMod.microflows.FileDocumentExport
import typingsSlinky.mendixmodelsdk.microflowsMod.microflows.Filter
import typingsSlinky.mendixmodelsdk.microflowsMod.microflows.Find
import typingsSlinky.mendixmodelsdk.microflowsMod.microflows.FormDataPart
import typingsSlinky.mendixmodelsdk.microflowsMod.microflows.FormDataRequestHandling
import typingsSlinky.mendixmodelsdk.microflowsMod.microflows.GenerateDocumentAction
import typingsSlinky.mendixmodelsdk.microflowsMod.microflows.Head
import typingsSlinky.mendixmodelsdk.microflowsMod.microflows.HttpConfiguration
import typingsSlinky.mendixmodelsdk.microflowsMod.microflows.HttpHeaderEntry
import typingsSlinky.mendixmodelsdk.microflowsMod.microflows.IMicroflow
import typingsSlinky.mendixmodelsdk.microflowsMod.microflows.IMicroflowBase
import typingsSlinky.mendixmodelsdk.microflowsMod.microflows.IMicroflowParameter
import typingsSlinky.mendixmodelsdk.microflowsMod.microflows.INanoflow
import typingsSlinky.mendixmodelsdk.microflowsMod.microflows.INanoflowParameter
import typingsSlinky.mendixmodelsdk.microflowsMod.microflows.IRule
import typingsSlinky.mendixmodelsdk.microflowsMod.microflows.IRuleParameter
import typingsSlinky.mendixmodelsdk.microflowsMod.microflows.IServerSideMicroflow
import typingsSlinky.mendixmodelsdk.microflowsMod.microflows.ImportMappingCall
import typingsSlinky.mendixmodelsdk.microflowsMod.microflows.ImportMappingJavaActionParameterValue
import typingsSlinky.mendixmodelsdk.microflowsMod.microflows.ImportMappingParameterValue
import typingsSlinky.mendixmodelsdk.microflowsMod.microflows.ImportXmlAction
import typingsSlinky.mendixmodelsdk.microflowsMod.microflows.InheritanceCase
import typingsSlinky.mendixmodelsdk.microflowsMod.microflows.InheritanceSplit
import typingsSlinky.mendixmodelsdk.microflowsMod.microflows.Intersect
import typingsSlinky.mendixmodelsdk.microflowsMod.microflows.JavaActionCallAction
import typingsSlinky.mendixmodelsdk.microflowsMod.microflows.JavaActionParameterMapping
import typingsSlinky.mendixmodelsdk.microflowsMod.microflows.JavaScriptActionCallAction
import typingsSlinky.mendixmodelsdk.microflowsMod.microflows.JavaScriptActionParameterMapping
import typingsSlinky.mendixmodelsdk.microflowsMod.microflows.ListEquals
import typingsSlinky.mendixmodelsdk.microflowsMod.microflows.ListOperationAction
import typingsSlinky.mendixmodelsdk.microflowsMod.microflows.LogMessageAction
import typingsSlinky.mendixmodelsdk.microflowsMod.microflows.LoopedActivity
import typingsSlinky.mendixmodelsdk.microflowsMod.microflows.MappingRequestHandling
import typingsSlinky.mendixmodelsdk.microflowsMod.microflows.MemberChange
import typingsSlinky.mendixmodelsdk.microflowsMod.microflows.MicroflowCall
import typingsSlinky.mendixmodelsdk.microflowsMod.microflows.MicroflowCallAction
import typingsSlinky.mendixmodelsdk.microflowsMod.microflows.MicroflowCallParameterMapping
import typingsSlinky.mendixmodelsdk.microflowsMod.microflows.MicroflowJavaActionParameterValue
import typingsSlinky.mendixmodelsdk.microflowsMod.microflows.MicroflowObjectCollection
import typingsSlinky.mendixmodelsdk.microflowsMod.microflows.MicroflowParameter
import typingsSlinky.mendixmodelsdk.microflowsMod.microflows.MicroflowParameterObject
import typingsSlinky.mendixmodelsdk.microflowsMod.microflows.MicroflowParameterValue
import typingsSlinky.mendixmodelsdk.microflowsMod.microflows.NanoflowCall
import typingsSlinky.mendixmodelsdk.microflowsMod.microflows.NanoflowCallAction
import typingsSlinky.mendixmodelsdk.microflowsMod.microflows.NanoflowCallParameterMapping
import typingsSlinky.mendixmodelsdk.microflowsMod.microflows.NanoflowParameter
import typingsSlinky.mendixmodelsdk.microflowsMod.microflows.NoCase
import typingsSlinky.mendixmodelsdk.microflowsMod.microflows.OpenUserTaskAction
import typingsSlinky.mendixmodelsdk.microflowsMod.microflows.PrimitiveTypedTemplateArgument
import typingsSlinky.mendixmodelsdk.microflowsMod.microflows.ProxyConfiguration
import typingsSlinky.mendixmodelsdk.microflowsMod.microflows.PushToClientAction
import typingsSlinky.mendixmodelsdk.microflowsMod.microflows.RestCallAction
import typingsSlinky.mendixmodelsdk.microflowsMod.microflows.ResultHandling
import typingsSlinky.mendixmodelsdk.microflowsMod.microflows.RetrieveAction
import typingsSlinky.mendixmodelsdk.microflowsMod.microflows.RollbackAction
import typingsSlinky.mendixmodelsdk.microflowsMod.microflows.RuleCall
import typingsSlinky.mendixmodelsdk.microflowsMod.microflows.RuleCallParameterMapping
import typingsSlinky.mendixmodelsdk.microflowsMod.microflows.RuleParameter
import typingsSlinky.mendixmodelsdk.microflowsMod.microflows.RuleSplitCondition
import typingsSlinky.mendixmodelsdk.microflowsMod.microflows.SequenceFlow
import typingsSlinky.mendixmodelsdk.microflowsMod.microflows.SetTaskOutcomeAction
import typingsSlinky.mendixmodelsdk.microflowsMod.microflows.ShowHomePageAction
import typingsSlinky.mendixmodelsdk.microflowsMod.microflows.ShowMessageAction
import typingsSlinky.mendixmodelsdk.microflowsMod.microflows.ShowPageAction
import typingsSlinky.mendixmodelsdk.microflowsMod.microflows.SimpleRequestHandling
import typingsSlinky.mendixmodelsdk.microflowsMod.microflows.Sort
import typingsSlinky.mendixmodelsdk.microflowsMod.microflows.SortItem
import typingsSlinky.mendixmodelsdk.microflowsMod.microflows.SortItemList
import typingsSlinky.mendixmodelsdk.microflowsMod.microflows.StartEvent
import typingsSlinky.mendixmodelsdk.microflowsMod.microflows.StringTemplate
import typingsSlinky.mendixmodelsdk.microflowsMod.microflows.StringTemplateParameterValue
import typingsSlinky.mendixmodelsdk.microflowsMod.microflows.Subtract
import typingsSlinky.mendixmodelsdk.microflowsMod.microflows.SynchronizeAction
import typingsSlinky.mendixmodelsdk.microflowsMod.microflows.Tail
import typingsSlinky.mendixmodelsdk.microflowsMod.microflows.TemplateArgument
import typingsSlinky.mendixmodelsdk.microflowsMod.microflows.TextTemplate
import typingsSlinky.mendixmodelsdk.microflowsMod.microflows.TypedTemplate
import typingsSlinky.mendixmodelsdk.microflowsMod.microflows.Union
import typingsSlinky.mendixmodelsdk.microflowsMod.microflows.ValidationFeedbackAction
import typingsSlinky.mendixmodelsdk.microflowsMod.microflows.VariableExport
import typingsSlinky.mendixmodelsdk.microflowsMod.microflows.WebServiceCallAction
import typingsSlinky.mendixmodelsdk.microflowsMod.microflows.WebServiceOperationAdvancedParameterMapping
import typingsSlinky.mendixmodelsdk.microflowsMod.microflows.WebServiceOperationSimpleParameterMapping
import typingsSlinky.mendixmodelsdk.microflowsMod.microflows.WorkflowCallAction
import typingsSlinky.mendixmodelsdk.nanoflowsMod.nanoflows.NanoflowParameterValue
import typingsSlinky.mendixmodelsdk.nativepagesMod.nativepages.BottomBarItem
import typingsSlinky.mendixmodelsdk.nativepagesMod.nativepages.INativeLayout
import typingsSlinky.mendixmodelsdk.nativepagesMod.nativepages.INativePage
import typingsSlinky.mendixmodelsdk.nativepagesMod.nativepages.NativeLayoutCallArgument
import typingsSlinky.mendixmodelsdk.nativepagesMod.nativepages.NativePageClientAction
import typingsSlinky.mendixmodelsdk.nativepagesMod.nativepages.NativePlaceholder
import typingsSlinky.mendixmodelsdk.navigationMod.navigation.HomePage
import typingsSlinky.mendixmodelsdk.navigationMod.navigation.INavigationDocument
import typingsSlinky.mendixmodelsdk.navigationMod.navigation.INavigationProfile
import typingsSlinky.mendixmodelsdk.navigationMod.navigation.NativeNavigationProfile
import typingsSlinky.mendixmodelsdk.navigationMod.navigation.NavigationProfile
import typingsSlinky.mendixmodelsdk.navigationMod.navigation.OfflineEntityConfig
import typingsSlinky.mendixmodelsdk.navigationMod.navigation.RoleBasedHomePage
import typingsSlinky.mendixmodelsdk.navigationMod.navigation.RoleBasedNativeHomePage
import typingsSlinky.mendixmodelsdk.pagesMod.pages.ActionButton
import typingsSlinky.mendixmodelsdk.pagesMod.pages.Appearance
import typingsSlinky.mendixmodelsdk.pagesMod.pages.AssociationSource
import typingsSlinky.mendixmodelsdk.pagesMod.pages.BackButton
import typingsSlinky.mendixmodelsdk.pagesMod.pages.CallNanoflowClientAction
import typingsSlinky.mendixmodelsdk.pagesMod.pages.CallWorkflowClientAction
import typingsSlinky.mendixmodelsdk.pagesMod.pages.CancelButton
import typingsSlinky.mendixmodelsdk.pagesMod.pages.CancelChangesClientAction
import typingsSlinky.mendixmodelsdk.pagesMod.pages.CheckBox
import typingsSlinky.mendixmodelsdk.pagesMod.pages.ClientTemplate
import typingsSlinky.mendixmodelsdk.pagesMod.pages.ClientTemplateParameter
import typingsSlinky.mendixmodelsdk.pagesMod.pages.ClosePageClientAction
import typingsSlinky.mendixmodelsdk.pagesMod.pages.ComparisonSearchField
import typingsSlinky.mendixmodelsdk.pagesMod.pages.ConditionalEditabilitySettings
import typingsSlinky.mendixmodelsdk.pagesMod.pages.ConditionalVisibilitySettings
import typingsSlinky.mendixmodelsdk.pagesMod.pages.ConfirmationInfo
import typingsSlinky.mendixmodelsdk.pagesMod.pages.CreateObjectClientAction
import typingsSlinky.mendixmodelsdk.pagesMod.pages.DataGridAddButton
import typingsSlinky.mendixmodelsdk.pagesMod.pages.DataGridExportToCSVButton
import typingsSlinky.mendixmodelsdk.pagesMod.pages.DataGridExportToExcelButton
import typingsSlinky.mendixmodelsdk.pagesMod.pages.DataGridRemoveButton
import typingsSlinky.mendixmodelsdk.pagesMod.pages.DataViewActionButton
import typingsSlinky.mendixmodelsdk.pagesMod.pages.DataViewCancelButton
import typingsSlinky.mendixmodelsdk.pagesMod.pages.DataViewCloseButton
import typingsSlinky.mendixmodelsdk.pagesMod.pages.DataViewControlBar
import typingsSlinky.mendixmodelsdk.pagesMod.pages.DataViewSaveButton
import typingsSlinky.mendixmodelsdk.pagesMod.pages.DataViewSource
import typingsSlinky.mendixmodelsdk.pagesMod.pages.DatabaseConstraint
import typingsSlinky.mendixmodelsdk.pagesMod.pages.DatePicker
import typingsSlinky.mendixmodelsdk.pagesMod.pages.DeleteClientAction
import typingsSlinky.mendixmodelsdk.pagesMod.pages.DesignPropertyValue
import typingsSlinky.mendixmodelsdk.pagesMod.pages.DivContainer
import typingsSlinky.mendixmodelsdk.pagesMod.pages.DropDown
import typingsSlinky.mendixmodelsdk.pagesMod.pages.DropDownButton
import typingsSlinky.mendixmodelsdk.pagesMod.pages.DropDownButtonItem
import typingsSlinky.mendixmodelsdk.pagesMod.pages.DropDownSearchField
import typingsSlinky.mendixmodelsdk.pagesMod.pages.DynamicText
import typingsSlinky.mendixmodelsdk.pagesMod.pages.EditPageTemplateType
import typingsSlinky.mendixmodelsdk.pagesMod.pages.FileManager
import typingsSlinky.mendixmodelsdk.pagesMod.pages.FormattingInfo
import typingsSlinky.mendixmodelsdk.pagesMod.pages.GlyphIcon
import typingsSlinky.mendixmodelsdk.pagesMod.pages.GridActionButton
import typingsSlinky.mendixmodelsdk.pagesMod.pages.GridColumn
import typingsSlinky.mendixmodelsdk.pagesMod.pages.GridControlBar
import typingsSlinky.mendixmodelsdk.pagesMod.pages.GridDatabaseSource
import typingsSlinky.mendixmodelsdk.pagesMod.pages.GridDeleteButton
import typingsSlinky.mendixmodelsdk.pagesMod.pages.GridDeselectAllButton
import typingsSlinky.mendixmodelsdk.pagesMod.pages.GridEditButton
import typingsSlinky.mendixmodelsdk.pagesMod.pages.GridNewButton
import typingsSlinky.mendixmodelsdk.pagesMod.pages.GridSearchButton
import typingsSlinky.mendixmodelsdk.pagesMod.pages.GridSelectAllButton
import typingsSlinky.mendixmodelsdk.pagesMod.pages.GridXPathSource
import typingsSlinky.mendixmodelsdk.pagesMod.pages.GroupBox
import typingsSlinky.mendixmodelsdk.pagesMod.pages.HorizontalSplitPane
import typingsSlinky.mendixmodelsdk.pagesMod.pages.IBuildingBlock
import typingsSlinky.mendixmodelsdk.pagesMod.pages.IFormBase
import typingsSlinky.mendixmodelsdk.pagesMod.pages.ILayout
import typingsSlinky.mendixmodelsdk.pagesMod.pages.ILayoutParameter
import typingsSlinky.mendixmodelsdk.pagesMod.pages.IPage
import typingsSlinky.mendixmodelsdk.pagesMod.pages.IPageTemplate
import typingsSlinky.mendixmodelsdk.pagesMod.pages.ISnippet
import typingsSlinky.mendixmodelsdk.pagesMod.pages.ITemplateFormBase
import typingsSlinky.mendixmodelsdk.pagesMod.pages.ImageIcon
import typingsSlinky.mendixmodelsdk.pagesMod.pages.ImageUploader
import typingsSlinky.mendixmodelsdk.pagesMod.pages.ImageViewerSource
import typingsSlinky.mendixmodelsdk.pagesMod.pages.InputReferenceSetSelector
import typingsSlinky.mendixmodelsdk.pagesMod.pages.Label
import typingsSlinky.mendixmodelsdk.pagesMod.pages.LayoutCall
import typingsSlinky.mendixmodelsdk.pagesMod.pages.LayoutCallArgument
import typingsSlinky.mendixmodelsdk.pagesMod.pages.LayoutGrid
import typingsSlinky.mendixmodelsdk.pagesMod.pages.LayoutGridColumn
import typingsSlinky.mendixmodelsdk.pagesMod.pages.LayoutGridRow
import typingsSlinky.mendixmodelsdk.pagesMod.pages.LayoutParameter
import typingsSlinky.mendixmodelsdk.pagesMod.pages.LinkButton
import typingsSlinky.mendixmodelsdk.pagesMod.pages.ListView
import typingsSlinky.mendixmodelsdk.pagesMod.pages.ListViewDatabaseSource
import typingsSlinky.mendixmodelsdk.pagesMod.pages.ListViewSearch
import typingsSlinky.mendixmodelsdk.pagesMod.pages.ListViewTemplate
import typingsSlinky.mendixmodelsdk.pagesMod.pages.ListViewXPathSource
import typingsSlinky.mendixmodelsdk.pagesMod.pages.ListenTargetSource
import typingsSlinky.mendixmodelsdk.pagesMod.pages.LoginButton
import typingsSlinky.mendixmodelsdk.pagesMod.pages.LoginIdTextBox
import typingsSlinky.mendixmodelsdk.pagesMod.pages.LogoutButton
import typingsSlinky.mendixmodelsdk.pagesMod.pages.MasterDetail
import typingsSlinky.mendixmodelsdk.pagesMod.pages.MasterDetailDetailRegion
import typingsSlinky.mendixmodelsdk.pagesMod.pages.MasterDetailMasterRegion
import typingsSlinky.mendixmodelsdk.pagesMod.pages.MenuBar
import typingsSlinky.mendixmodelsdk.pagesMod.pages.MenuDocumentSource
import typingsSlinky.mendixmodelsdk.pagesMod.pages.MicroflowClientAction
import typingsSlinky.mendixmodelsdk.pagesMod.pages.MicroflowParameterMapping
import typingsSlinky.mendixmodelsdk.pagesMod.pages.MicroflowSettings
import typingsSlinky.mendixmodelsdk.pagesMod.pages.MicroflowSource
import typingsSlinky.mendixmodelsdk.pagesMod.pages.NanoflowParameterMapping
import typingsSlinky.mendixmodelsdk.pagesMod.pages.NanoflowSource
import typingsSlinky.mendixmodelsdk.pagesMod.pages.NativeLayoutContent
import typingsSlinky.mendixmodelsdk.pagesMod.pages.NavigationList
import typingsSlinky.mendixmodelsdk.pagesMod.pages.NavigationListItem
import typingsSlinky.mendixmodelsdk.pagesMod.pages.NavigationSource
import typingsSlinky.mendixmodelsdk.pagesMod.pages.NavigationTree
import typingsSlinky.mendixmodelsdk.pagesMod.pages.NewButton
import typingsSlinky.mendixmodelsdk.pagesMod.pages.NoClientAction
import typingsSlinky.mendixmodelsdk.pagesMod.pages.OfflineSchema
import typingsSlinky.mendixmodelsdk.pagesMod.pages.OfflineSchemaFetchInstruction
import typingsSlinky.mendixmodelsdk.pagesMod.pages.OnClickEnlarge
import typingsSlinky.mendixmodelsdk.pagesMod.pages.OnClickMicroflow
import typingsSlinky.mendixmodelsdk.pagesMod.pages.OnClickNothing
import typingsSlinky.mendixmodelsdk.pagesMod.pages.OpenLinkClientAction
import typingsSlinky.mendixmodelsdk.pagesMod.pages.OpenUserTaskClientAction
import typingsSlinky.mendixmodelsdk.pagesMod.pages.OpenWorkflowClientAction
import typingsSlinky.mendixmodelsdk.pagesMod.pages.PageClientAction
import typingsSlinky.mendixmodelsdk.pagesMod.pages.PageForSpecialization
import typingsSlinky.mendixmodelsdk.pagesMod.pages.PageSettings
import typingsSlinky.mendixmodelsdk.pagesMod.pages.PageVariable
import typingsSlinky.mendixmodelsdk.pagesMod.pages.PasswordTextBox
import typingsSlinky.mendixmodelsdk.pagesMod.pages.Placeholder
import typingsSlinky.mendixmodelsdk.pagesMod.pages.RadioButtonGroup
import typingsSlinky.mendixmodelsdk.pagesMod.pages.RangeSearchField
import typingsSlinky.mendixmodelsdk.pagesMod.pages.ReferenceSelector
import typingsSlinky.mendixmodelsdk.pagesMod.pages.ReferenceSetSelector
import typingsSlinky.mendixmodelsdk.pagesMod.pages.ReferenceSetSource
import typingsSlinky.mendixmodelsdk.pagesMod.pages.RegularPageTemplateType
import typingsSlinky.mendixmodelsdk.pagesMod.pages.RetrievalQuery
import typingsSlinky.mendixmodelsdk.pagesMod.pages.RetrievalQueryParameter
import typingsSlinky.mendixmodelsdk.pagesMod.pages.RetrievalSchema
import typingsSlinky.mendixmodelsdk.pagesMod.pages.SaveButton
import typingsSlinky.mendixmodelsdk.pagesMod.pages.SaveChangesClientAction
import typingsSlinky.mendixmodelsdk.pagesMod.pages.ScrollContainer
import typingsSlinky.mendixmodelsdk.pagesMod.pages.ScrollContainerRegion
import typingsSlinky.mendixmodelsdk.pagesMod.pages.SearchBar
import typingsSlinky.mendixmodelsdk.pagesMod.pages.SelectButton
import typingsSlinky.mendixmodelsdk.pagesMod.pages.SelectPageTemplateType
import typingsSlinky.mendixmodelsdk.pagesMod.pages.SelectorDatabaseSource
import typingsSlinky.mendixmodelsdk.pagesMod.pages.SelectorMicroflowSource
import typingsSlinky.mendixmodelsdk.pagesMod.pages.SelectorXPathSource
import typingsSlinky.mendixmodelsdk.pagesMod.pages.SetTaskOutcomeClientAction
import typingsSlinky.mendixmodelsdk.pagesMod.pages.SidebarToggleButton
import typingsSlinky.mendixmodelsdk.pagesMod.pages.SignOutClientAction
import typingsSlinky.mendixmodelsdk.pagesMod.pages.SimpleMenuBar
import typingsSlinky.mendixmodelsdk.pagesMod.pages.SnippetCall
import typingsSlinky.mendixmodelsdk.pagesMod.pages.SnippetCallWidget
import typingsSlinky.mendixmodelsdk.pagesMod.pages.StaticOrDynamicString
import typingsSlinky.mendixmodelsdk.pagesMod.pages.SyncButton
import typingsSlinky.mendixmodelsdk.pagesMod.pages.SyncClientAction
import typingsSlinky.mendixmodelsdk.pagesMod.pages.TabContainer
import typingsSlinky.mendixmodelsdk.pagesMod.pages.TabPage
import typingsSlinky.mendixmodelsdk.pagesMod.pages.TableColumn
import typingsSlinky.mendixmodelsdk.pagesMod.pages.TemplatePlaceholder
import typingsSlinky.mendixmodelsdk.pagesMod.pages.TextArea
import typingsSlinky.mendixmodelsdk.pagesMod.pages.TextBox
import typingsSlinky.mendixmodelsdk.pagesMod.pages.UserTaskTemplateType
import typingsSlinky.mendixmodelsdk.pagesMod.pages.ValidationMessage
import typingsSlinky.mendixmodelsdk.pagesMod.pages.VerticalFlow
import typingsSlinky.mendixmodelsdk.pagesMod.pages.VerticalSplitPane
import typingsSlinky.mendixmodelsdk.pagesMod.pages.WebLayoutContent
import typingsSlinky.mendixmodelsdk.pagesMod.pages.WidgetValidation
import typingsSlinky.mendixmodelsdk.pagesMod.pages.WorkflowOverviewTemplateType
import typingsSlinky.mendixmodelsdk.projectsMod.projects.IDocument
import typingsSlinky.mendixmodelsdk.projectsMod.projects.IFolder
import typingsSlinky.mendixmodelsdk.projectsMod.projects.IFolderBase
import typingsSlinky.mendixmodelsdk.projectsMod.projects.IModule
import typingsSlinky.mendixmodelsdk.projectsMod.projects.IModuleDocument
import typingsSlinky.mendixmodelsdk.projectsMod.projects.IProject
import typingsSlinky.mendixmodelsdk.projectsMod.projects.IProjectConversion
import typingsSlinky.mendixmodelsdk.projectsMod.projects.IProjectDocument
import typingsSlinky.mendixmodelsdk.projectsMod.projects.OneTimeConversionMarker
import typingsSlinky.mendixmodelsdk.regularexpressionsMod.regularexpressions.IRegularExpression
import typingsSlinky.mendixmodelsdk.reportsMod.reports.BasicReport
import typingsSlinky.mendixmodelsdk.reportsMod.reports.BasicReportAggregate
import typingsSlinky.mendixmodelsdk.reportsMod.reports.BasicReportColumn
import typingsSlinky.mendixmodelsdk.reportsMod.reports.ReportButton
import typingsSlinky.mendixmodelsdk.reportsMod.reports.ReportChart
import typingsSlinky.mendixmodelsdk.reportsMod.reports.ReportChartSeries
import typingsSlinky.mendixmodelsdk.reportsMod.reports.ReportDateRangeField
import typingsSlinky.mendixmodelsdk.reportsMod.reports.ReportDateRangeSelector
import typingsSlinky.mendixmodelsdk.reportsMod.reports.ReportDropDown
import typingsSlinky.mendixmodelsdk.reportsMod.reports.ReportPane
import typingsSlinky.mendixmodelsdk.reportsMod.reports.ReportZoomInfo
import typingsSlinky.mendixmodelsdk.reportsMod.reports.ReportZoomMapping
import typingsSlinky.mendixmodelsdk.restMod.rest.CorsConfiguration
import typingsSlinky.mendixmodelsdk.restMod.rest.IConsumedODataService
import typingsSlinky.mendixmodelsdk.restMod.rest.IPublishedODataService
import typingsSlinky.mendixmodelsdk.restMod.rest.IPublishedRestService
import typingsSlinky.mendixmodelsdk.restMod.rest.MetadataReference
import typingsSlinky.mendixmodelsdk.restMod.rest.ODataKey
import typingsSlinky.mendixmodelsdk.restMod.rest.ODataKeyPart
import typingsSlinky.mendixmodelsdk.restMod.rest.ODataMappedValue
import typingsSlinky.mendixmodelsdk.restMod.rest.ODataRemoteAssociationSource
import typingsSlinky.mendixmodelsdk.restMod.rest.ODataRemoteEntitySource
import typingsSlinky.mendixmodelsdk.restMod.rest.PublishedRestResource
import typingsSlinky.mendixmodelsdk.restMod.rest.PublishedRestServiceOperation
import typingsSlinky.mendixmodelsdk.restMod.rest.PublishedRestServiceResource
import typingsSlinky.mendixmodelsdk.restMod.rest.RestOperationParameter
import typingsSlinky.mendixmodelsdk.scheduledeventsMod.scheduledevents.IScheduledEvent
import typingsSlinky.mendixmodelsdk.securityMod.security.DemoUser
import typingsSlinky.mendixmodelsdk.securityMod.security.FileDocumentAccessRuleContainer
import typingsSlinky.mendixmodelsdk.securityMod.security.IModuleRole
import typingsSlinky.mendixmodelsdk.securityMod.security.IModuleSecurity
import typingsSlinky.mendixmodelsdk.securityMod.security.IProjectSecurity
import typingsSlinky.mendixmodelsdk.securityMod.security.IUserRole
import typingsSlinky.mendixmodelsdk.securityMod.security.ImageAccessRuleContainer
import typingsSlinky.mendixmodelsdk.securityMod.security.ModuleRole
import typingsSlinky.mendixmodelsdk.securityMod.security.PasswordPolicySettings
import typingsSlinky.mendixmodelsdk.securityMod.security.UserRole
import typingsSlinky.mendixmodelsdk.settingsMod.settings.ActionActivityDefaultColor
import typingsSlinky.mendixmodelsdk.settingsMod.settings.Certificate
import typingsSlinky.mendixmodelsdk.settingsMod.settings.CertificateSettings
import typingsSlinky.mendixmodelsdk.settingsMod.settings.Configuration
import typingsSlinky.mendixmodelsdk.settingsMod.settings.ConfigurationSettings
import typingsSlinky.mendixmodelsdk.settingsMod.settings.ConstantValue
import typingsSlinky.mendixmodelsdk.settingsMod.settings.CustomSetting
import typingsSlinky.mendixmodelsdk.settingsMod.settings.IProjectSettings
import typingsSlinky.mendixmodelsdk.settingsMod.settings.IntegrationProjectSettingsPart
import typingsSlinky.mendixmodelsdk.settingsMod.settings.JavaActionsSettings
import typingsSlinky.mendixmodelsdk.settingsMod.settings.Language
import typingsSlinky.mendixmodelsdk.settingsMod.settings.LanguageSettings
import typingsSlinky.mendixmodelsdk.settingsMod.settings.ModelerSettings
import typingsSlinky.mendixmodelsdk.settingsMod.settings.RuntimeSettings
import typingsSlinky.mendixmodelsdk.settingsMod.settings.WebUIProjectSettingsPart
import typingsSlinky.mendixmodelsdk.settingsMod.settings.WorkflowsProjectSettingsPart
import typingsSlinky.mendixmodelsdk.textsMod.texts.ISystemTextCollection
import typingsSlinky.mendixmodelsdk.textsMod.texts.SystemText
import typingsSlinky.mendixmodelsdk.textsMod.texts.Text
import typingsSlinky.mendixmodelsdk.textsMod.texts.Translation
import typingsSlinky.mendixmodelsdk.webservicesMod.webservices.DataAssociation
import typingsSlinky.mendixmodelsdk.webservicesMod.webservices.DataAttribute
import typingsSlinky.mendixmodelsdk.webservicesMod.webservices.DataEntity
import typingsSlinky.mendixmodelsdk.webservicesMod.webservices.IImportedWebService
import typingsSlinky.mendixmodelsdk.webservicesMod.webservices.IPublishedAppService
import typingsSlinky.mendixmodelsdk.webservicesMod.webservices.IPublishedServiceBase
import typingsSlinky.mendixmodelsdk.webservicesMod.webservices.IPublishedWebService
import typingsSlinky.mendixmodelsdk.webservicesMod.webservices.OperationInfo
import typingsSlinky.mendixmodelsdk.webservicesMod.webservices.PartEncoding
import typingsSlinky.mendixmodelsdk.webservicesMod.webservices.PublishedOperation
import typingsSlinky.mendixmodelsdk.webservicesMod.webservices.PublishedParameter
import typingsSlinky.mendixmodelsdk.webservicesMod.webservices.RpcMessagePartElement
import typingsSlinky.mendixmodelsdk.webservicesMod.webservices.RpcOperationElement
import typingsSlinky.mendixmodelsdk.webservicesMod.webservices.ServiceInfo
import typingsSlinky.mendixmodelsdk.webservicesMod.webservices.SystemIdDataAttribute
import typingsSlinky.mendixmodelsdk.webservicesMod.webservices.VersionedService
import typingsSlinky.mendixmodelsdk.webservicesMod.webservices.WsdlDescription
import typingsSlinky.mendixmodelsdk.webservicesMod.webservices.WsdlEntry
import typingsSlinky.mendixmodelsdk.workflowsMod.workflows.BooleanSplitOutcome
import typingsSlinky.mendixmodelsdk.workflowsMod.workflows.CallMicroflowTask
import typingsSlinky.mendixmodelsdk.workflowsMod.workflows.CallWorkflowActivity
import typingsSlinky.mendixmodelsdk.workflowsMod.workflows.EndWorkflowActivity
import typingsSlinky.mendixmodelsdk.workflowsMod.workflows.EnumerationValueSplitOutcome
import typingsSlinky.mendixmodelsdk.workflowsMod.workflows.ExclusiveSplitActivity
import typingsSlinky.mendixmodelsdk.workflowsMod.workflows.Flow
import typingsSlinky.mendixmodelsdk.workflowsMod.workflows.IWorkflow
import typingsSlinky.mendixmodelsdk.workflowsMod.workflows.IWorkflowTaskOutcome
import typingsSlinky.mendixmodelsdk.workflowsMod.workflows.ParallelSplitActivity
import typingsSlinky.mendixmodelsdk.workflowsMod.workflows.ParallelSplitOutcome
import typingsSlinky.mendixmodelsdk.workflowsMod.workflows.UserTask
import typingsSlinky.mendixmodelsdk.workflowsMod.workflows.WorkflowTaskOutcome
import typingsSlinky.mendixmodelsdk.workflowsMod.workflows.XPathBasedUserSource
import typingsSlinky.mendixmodelsdk.xmlschemasMod.xmlschemas.IMxSchema
import typingsSlinky.mendixmodelsdk.xmlschemasMod.xmlschemas.IXmlSchema
import typingsSlinky.mendixmodelsdk.xmlschemasMod.xmlschemas.XmlElement
import typingsSlinky.mendixmodelsdk.xmlschemasMod.xmlschemas.XmlSchemaEntry
import org.scalablytyped.runtime.StObject
import scala.scalajs.js
import scala.scalajs.js.`|`
import scala.scalajs.js.annotation.{JSGlobalScope, JSGlobal, JSImport, JSName, JSBracketAccess}

object baseModelMod {
  
  /* import warning: transforms.RemoveMultipleInheritance#findNewParents newComments Dropped parents 
  - typingsSlinky.mendixmodelsdk.abstractModelMod.IAbstractModel because Already inherited
  - typingsSlinky.mendixmodelsdk.baseModelMod.IBaseModel because var conflicts: id, metaModelVersion, mxVersionForModel, workingCopy. Inlined createElement, allBuildingBlocks, allCodeActions, allConstants, allConsumedAppServices, allConsumedKafkaServices, allConsumedODataServices, allDataSets, allDocuments, allDocumentTemplates, allDomainModels, allEnumerations, allExportMappings, allFolders, allFolderBases, allFormBases, allImageCollections, allImportMappings, allImportedWebServices, allJavaActions, allJavaScriptActions, allJsonStructures, allLayouts, allMappingDocuments, allMenuDocuments, allMessageDefinitionCollections, allMicroflows, allMicroflowBases, allModules, allModuleDocuments, allModuleSecurities, allMxSchemas, allNanoflows, allNativeLayouts, allNativePages, allNavigationDocuments, allPages, allPageTemplates, allProjects, allProjectConversions, allProjectDocuments, allProjectSecurities, allProjectSettings, allPublishedAppServices, allPublishedKafkaServices, allPublishedODataServices, allPublishedRestServices, allPublishedServiceBases, allPublishedWebServices, allRegularExpressions, allRemoteEntitySourceDocuments, allRules, allScheduledEvents, allServerSideMicroflows, allSnippets, allSystemTextCollections, allTemplateFormBases, allWorkflows, allXmlSchemas, findAppServiceActionByQualifiedName, findAppServiceActionParameterByQualifiedName, findConstantByQualifiedName, findDataSetByQualifiedName, findDataSetParameterByQualifiedName, findDocumentTemplateByQualifiedName, findAssociationBaseByQualifiedName, findAttributeByQualifiedName, findEntityByQualifiedName, findRemoteEntitySourceDocumentByQualifiedName, findEnumerationByQualifiedName, findEnumerationValueByQualifiedName, findExportMappingByQualifiedName, findImageByQualifiedName, findImportMappingByQualifiedName, findJavaActionByQualifiedName, findJavaActionParameterByQualifiedName, findJavaScriptActionByQualifiedName, findJavaScriptActionParameterByQualifiedName, findJsonStructureByQualifiedName, findConsumedKafkaServiceByQualifiedName, findMenuDocumentByQualifiedName, findMessageDefinitionByQualifiedName, findMicroflowByQualifiedName, findMicroflowParameterByQualifiedName, findNanoflowByQualifiedName, findNanoflowParameterByQualifiedName, findRuleByQualifiedName, findRuleParameterByQualifiedName, findNativeLayoutByQualifiedName, findNativePageByQualifiedName, findNavigationProfileByQualifiedName, findLayoutByQualifiedName, findLayoutParameterByQualifiedName, findPageByQualifiedName, findSnippetByQualifiedName, findRegularExpressionByQualifiedName, findConsumedODataServiceByQualifiedName, findModuleRoleByQualifiedName, findUserRoleByQualifiedName, findImportedWebServiceByQualifiedName, findWorkflowByQualifiedName, findWorkflowTaskOutcomeByQualifiedName, findXmlSchemaByQualifiedName */ @JSImport("mendixmodelsdk/dist/gen/base-model", "BaseModel")
  @js.native
  abstract class BaseModel protected () extends AbstractModel {
    def this(_client: IModelServerClient, _errorHandler: IErrorCallback) = this()
    
    def allBuildingBlocks(): js.Array[IBuildingBlock] = js.native
    
    def allCodeActions(): js.Array[ICodeAction] = js.native
    
    def allConstants(): js.Array[IConstant] = js.native
    
    def allConsumedAppServices(): js.Array[IConsumedAppService] = js.native
    
    def allConsumedKafkaServices(): js.Array[IConsumedKafkaService] = js.native
    
    def allConsumedODataServices(): js.Array[IConsumedODataService] = js.native
    
    def allDataSets(): js.Array[IDataSet] = js.native
    
    def allDocumentTemplates(): js.Array[IDocumentTemplate] = js.native
    
    def allDocuments(): js.Array[IDocument] = js.native
    
    def allDomainModels(): js.Array[IDomainModel] = js.native
    
    def allEnumerations(): js.Array[IEnumeration] = js.native
    
    def allExportMappings(): js.Array[IExportMapping] = js.native
    
    def allFolderBases(): js.Array[IFolderBase] = js.native
    
    def allFolders(): js.Array[IFolder] = js.native
    
    def allFormBases(): js.Array[IFormBase] = js.native
    
    def allImageCollections(): js.Array[IImageCollection] = js.native
    
    def allImportMappings(): js.Array[IImportMapping] = js.native
    
    def allImportedWebServices(): js.Array[IImportedWebService] = js.native
    
    def allJavaActions(): js.Array[IJavaAction] = js.native
    
    def allJavaScriptActions(): js.Array[IJavaScriptAction] = js.native
    
    def allJsonStructures(): js.Array[IJsonStructure] = js.native
    
    def allLayouts(): js.Array[ILayout] = js.native
    
    def allMappingDocuments(): js.Array[IMappingDocument] = js.native
    
    def allMenuDocuments(): js.Array[IMenuDocument] = js.native
    
    def allMessageDefinitionCollections(): js.Array[IMessageDefinitionCollection] = js.native
    
    def allMicroflowBases(): js.Array[IMicroflowBase] = js.native
    
    def allMicroflows(): js.Array[IMicroflow] = js.native
    
    def allModuleDocuments(): js.Array[IModuleDocument] = js.native
    
    def allModuleSecurities(): js.Array[IModuleSecurity] = js.native
    
    def allModules(): js.Array[IModule] = js.native
    
    def allMxSchemas(): js.Array[IMxSchema] = js.native
    
    def allNanoflows(): js.Array[INanoflow] = js.native
    
    def allNativeLayouts(): js.Array[INativeLayout] = js.native
    
    def allNativePages(): js.Array[INativePage] = js.native
    
    def allNavigationDocuments(): js.Array[INavigationDocument] = js.native
    
    def allPageTemplates(): js.Array[IPageTemplate] = js.native
    
    def allPages(): js.Array[IPage] = js.native
    
    def allProjectConversions(): js.Array[IProjectConversion] = js.native
    
    def allProjectDocuments(): js.Array[IProjectDocument] = js.native
    
    def allProjectSecurities(): js.Array[IProjectSecurity] = js.native
    
    def allProjectSettings(): js.Array[IProjectSettings] = js.native
    
    def allProjects(): js.Array[IProject] = js.native
    
    def allPublishedAppServices(): js.Array[IPublishedAppService] = js.native
    
    def allPublishedKafkaServices(): js.Array[IPublishedKafkaService] = js.native
    
    def allPublishedODataServices(): js.Array[IPublishedODataService] = js.native
    
    def allPublishedRestServices(): js.Array[IPublishedRestService] = js.native
    
    def allPublishedServiceBases(): js.Array[IPublishedServiceBase] = js.native
    
    def allPublishedWebServices(): js.Array[IPublishedWebService] = js.native
    
    def allRegularExpressions(): js.Array[IRegularExpression] = js.native
    
    def allRemoteEntitySourceDocuments(): js.Array[IRemoteEntitySourceDocument] = js.native
    
    def allRules(): js.Array[IRule] = js.native
    
    def allScheduledEvents(): js.Array[IScheduledEvent] = js.native
    
    def allServerSideMicroflows(): js.Array[IServerSideMicroflow] = js.native
    
    def allSnippets(): js.Array[ISnippet] = js.native
    
    def allSystemTextCollections(): js.Array[ISystemTextCollection] = js.native
    
    def allTemplateFormBases(): js.Array[ITemplateFormBase] = js.native
    
    def allWorkflows(): js.Array[IWorkflow] = js.native
    
    def allXmlSchemas(): js.Array[IXmlSchema] = js.native
    
    /**
      * Creates and returns a new element in the SDK and on the server.
      * After creation, assign or add this instance to a property that accepts this kind of elements.
      * @param typeName `structureTypeName` of the element type you want to create
      */
    def createElement[T /* <: /* keyof mendixmodelsdk.mendixmodelsdk/dist/gen/base-model.ConcreteModelElements */ /* import warning: LimitUnionLength.leaveTypeRef Was union type with length 563 */ js.Any */](typeName: T): /* import warning: importer.ImportType#apply Failed type conversion: mendixmodelsdk.mendixmodelsdk/dist/gen/base-model.ConcreteModelElements[T] */ js.Any = js.native
    
    def findAppServiceActionByQualifiedName(qname: String): IAppServiceAction | Null = js.native
    
    def findAppServiceActionParameterByQualifiedName(qname: String): IAppServiceActionParameter | Null = js.native
    
    def findAssociationBaseByQualifiedName(qname: String): IAssociationBase | Null = js.native
    
    def findAttributeByQualifiedName(qname: String): IAttribute | Null = js.native
    
    def findConstantByQualifiedName(qname: String): IConstant | Null = js.native
    
    def findConsumedKafkaServiceByQualifiedName(qname: String): IConsumedKafkaService | Null = js.native
    
    def findConsumedODataServiceByQualifiedName(qname: String): IConsumedODataService | Null = js.native
    
    def findDataSetByQualifiedName(qname: String): IDataSet | Null = js.native
    
    def findDataSetParameterByQualifiedName(qname: String): IDataSetParameter | Null = js.native
    
    def findDocumentTemplateByQualifiedName(qname: String): IDocumentTemplate | Null = js.native
    
    def findEntityByQualifiedName(qname: String): IEntity | Null = js.native
    
    def findEnumerationByQualifiedName(qname: String): IEnumeration | Null = js.native
    
    def findEnumerationValueByQualifiedName(qname: String): IEnumerationValue | Null = js.native
    
    def findExportMappingByQualifiedName(qname: String): IExportMapping | Null = js.native
    
    def findImageByQualifiedName(qname: String): IImage | Null = js.native
    
    def findImportMappingByQualifiedName(qname: String): IImportMapping | Null = js.native
    
    def findImportedWebServiceByQualifiedName(qname: String): IImportedWebService | Null = js.native
    
    def findJavaActionByQualifiedName(qname: String): IJavaAction | Null = js.native
    
    def findJavaActionParameterByQualifiedName(qname: String): IJavaActionParameter | Null = js.native
    
    def findJavaScriptActionByQualifiedName(qname: String): IJavaScriptAction | Null = js.native
    
    def findJavaScriptActionParameterByQualifiedName(qname: String): IJavaScriptActionParameter | Null = js.native
    
    def findJsonStructureByQualifiedName(qname: String): IJsonStructure | Null = js.native
    
    def findLayoutByQualifiedName(qname: String): ILayout | Null = js.native
    
    def findLayoutParameterByQualifiedName(qname: String): ILayoutParameter | Null = js.native
    
    def findMenuDocumentByQualifiedName(qname: String): IMenuDocument | Null = js.native
    
    def findMessageDefinitionByQualifiedName(qname: String): IMessageDefinition | Null = js.native
    
    def findMicroflowByQualifiedName(qname: String): IMicroflow | Null = js.native
    
    def findMicroflowParameterByQualifiedName(qname: String): IMicroflowParameter | Null = js.native
    
    def findModuleRoleByQualifiedName(qname: String): IModuleRole | Null = js.native
    
    def findNanoflowByQualifiedName(qname: String): INanoflow | Null = js.native
    
    def findNanoflowParameterByQualifiedName(qname: String): INanoflowParameter | Null = js.native
    
    def findNativeLayoutByQualifiedName(qname: String): INativeLayout | Null = js.native
    
    def findNativePageByQualifiedName(qname: String): INativePage | Null = js.native
    
    def findNavigationProfileByQualifiedName(qname: String): INavigationProfile | Null = js.native
    
    def findPageByQualifiedName(qname: String): IPage | Null = js.native
    
    def findRegularExpressionByQualifiedName(qname: String): IRegularExpression | Null = js.native
    
    def findRemoteEntitySourceDocumentByQualifiedName(qname: String): IRemoteEntitySourceDocument | Null = js.native
    
    def findRuleByQualifiedName(qname: String): IRule | Null = js.native
    
    def findRuleParameterByQualifiedName(qname: String): IRuleParameter | Null = js.native
    
    def findSnippetByQualifiedName(qname: String): ISnippet | Null = js.native
    
    def findUserRoleByQualifiedName(qname: String): IUserRole | Null = js.native
    
    def findWorkflowByQualifiedName(qname: String): IWorkflow | Null = js.native
    
    def findWorkflowTaskOutcomeByQualifiedName(qname: String): IWorkflowTaskOutcome | Null = js.native
    
    def findXmlSchemaByQualifiedName(qname: String): IXmlSchema | Null = js.native
  }
  
  @js.native
  trait ConcreteModelElements extends StObject {
    
    @JSName("AppServices$AppServiceAction")
    var AppServices$AppServiceAction: AppServiceAction = js.native
    
    @JSName("AppServices$AppServiceActionParameter")
    var AppServices$AppServiceActionParameter: AppServiceActionParameter = js.native
    
    @JSName("AppServices$Msd")
    var AppServices$Msd: Msd = js.native
    
    @JSName("AppServices$MsdAssociation")
    var AppServices$MsdAssociation: MsdAssociation = js.native
    
    @JSName("AppServices$MsdAttribute")
    var AppServices$MsdAttribute: MsdAttribute = js.native
    
    @JSName("AppServices$MsdDomainModel")
    var AppServices$MsdDomainModel: MsdDomainModel = js.native
    
    @JSName("AppServices$MsdEntity")
    var AppServices$MsdEntity: MsdEntity = js.native
    
    @JSName("AppServices$MsdEnumeration")
    var AppServices$MsdEnumeration: MsdEnumeration = js.native
    
    @JSName("AppServices$MsdEnumerationContainer")
    var AppServices$MsdEnumerationContainer: MsdEnumerationContainer = js.native
    
    @JSName("AppServices$MsdEnumerationValue")
    var AppServices$MsdEnumerationValue: MsdEnumerationValue = js.native
    
    @JSName("AppServices$MsdMetadata")
    var AppServices$MsdMetadata: MsdMetadata = js.native
    
    @JSName("AppServices$MsdMicroflow")
    var AppServices$MsdMicroflow: MsdMicroflow = js.native
    
    @JSName("AppServices$MsdMicroflowParameter")
    var AppServices$MsdMicroflowParameter: MsdMicroflowParameter = js.native
    
    @JSName("AppServices$MsdText")
    var AppServices$MsdText: MsdText = js.native
    
    @JSName("AppServices$MsdVersion")
    var AppServices$MsdVersion: MsdVersion = js.native
    
    @JSName("CodeActions$BasicParameterType")
    var CodeActions$BasicParameterType: BasicParameterType = js.native
    
    @JSName("CodeActions$BooleanType")
    var CodeActions$BooleanType: BooleanType = js.native
    
    @JSName("CodeActions$ConcreteEntityType")
    var CodeActions$ConcreteEntityType: ConcreteEntityType = js.native
    
    @JSName("CodeActions$DateTimeType")
    var CodeActions$DateTimeType: DateTimeType = js.native
    
    @JSName("CodeActions$DecimalType")
    var CodeActions$DecimalType: DecimalType = js.native
    
    @JSName("CodeActions$EntityTypeParameterType")
    var CodeActions$EntityTypeParameterType: EntityTypeParameterType = js.native
    
    @JSName("CodeActions$EnumerationType")
    var CodeActions$EnumerationType: EnumerationType = js.native
    
    @JSName("CodeActions$FloatType")
    var CodeActions$FloatType: FloatType = js.native
    
    @JSName("CodeActions$IntegerType")
    var CodeActions$IntegerType: IntegerType = js.native
    
    @JSName("CodeActions$ListType")
    var CodeActions$ListType: ListType = js.native
    
    @JSName("CodeActions$MicroflowActionInfo")
    var CodeActions$MicroflowActionInfo: MicroflowActionInfo = js.native
    
    @JSName("CodeActions$ParameterizedEntityType")
    var CodeActions$ParameterizedEntityType: ParameterizedEntityType = js.native
    
    @JSName("CodeActions$StringTemplateParameterType")
    var CodeActions$StringTemplateParameterType: StringTemplateParameterType = js.native
    
    @JSName("CodeActions$StringType")
    var CodeActions$StringType: StringType = js.native
    
    @JSName("CodeActions$TypeParameter")
    var CodeActions$TypeParameter: TypeParameter = js.native
    
    @JSName("CodeActions$VoidType")
    var CodeActions$VoidType: VoidType = js.native
    
    @JSName("CustomWidgets$CustomWidget")
    var CustomWidgets$CustomWidget: CustomWidget = js.native
    
    @JSName("CustomWidgets$CustomWidgetDatabaseSource")
    var CustomWidgets$CustomWidgetDatabaseSource: CustomWidgetDatabaseSource = js.native
    
    @JSName("CustomWidgets$CustomWidgetType")
    var CustomWidgets$CustomWidgetType: CustomWidgetType = js.native
    
    @JSName("CustomWidgets$CustomWidgetXPathSource")
    var CustomWidgets$CustomWidgetXPathSource: CustomWidgetXPathSource = js.native
    
    @JSName("CustomWidgets$WidgetEnumerationValue")
    var CustomWidgets$WidgetEnumerationValue: WidgetEnumerationValue = js.native
    
    @JSName("CustomWidgets$WidgetObject")
    var CustomWidgets$WidgetObject: WidgetObject = js.native
    
    @JSName("CustomWidgets$WidgetObjectType")
    var CustomWidgets$WidgetObjectType: WidgetObjectType = js.native
    
    @JSName("CustomWidgets$WidgetProperty")
    var CustomWidgets$WidgetProperty: WidgetProperty = js.native
    
    @JSName("CustomWidgets$WidgetPropertyType")
    var CustomWidgets$WidgetPropertyType: WidgetPropertyType = js.native
    
    @JSName("CustomWidgets$WidgetReturnType")
    var CustomWidgets$WidgetReturnType: WidgetReturnType = js.native
    
    @JSName("CustomWidgets$WidgetTranslation")
    var CustomWidgets$WidgetTranslation: WidgetTranslation = js.native
    
    @JSName("CustomWidgets$WidgetValue")
    var CustomWidgets$WidgetValue: WidgetValue = js.native
    
    @JSName("CustomWidgets$WidgetValueType")
    var CustomWidgets$WidgetValueType: WidgetValueType = js.native
    
    @JSName("DataSets$DataSetAccess")
    var DataSets$DataSetAccess: DataSetAccess = js.native
    
    @JSName("DataSets$DataSetColumn")
    var DataSets$DataSetColumn: DataSetColumn = js.native
    
    @JSName("DataSets$DataSetConstraintAccess")
    var DataSets$DataSetConstraintAccess: DataSetConstraintAccess = js.native
    
    @JSName("DataSets$DataSetDateTimeConstraint")
    var DataSets$DataSetDateTimeConstraint: DataSetDateTimeConstraint = js.native
    
    @JSName("DataSets$DataSetModuleRoleAccess")
    var DataSets$DataSetModuleRoleAccess: DataSetModuleRoleAccess = js.native
    
    @JSName("DataSets$DataSetNumericConstraint")
    var DataSets$DataSetNumericConstraint: DataSetNumericConstraint = js.native
    
    @JSName("DataSets$DataSetObjectConstraint")
    var DataSets$DataSetObjectConstraint: DataSetObjectConstraint = js.native
    
    @JSName("DataSets$DataSetParameter")
    var DataSets$DataSetParameter: DataSetParameter = js.native
    
    @JSName("DataSets$DataSetParameterAccess")
    var DataSets$DataSetParameterAccess: DataSetParameterAccess = js.native
    
    @JSName("DataSets$JavaDataSetSource")
    var DataSets$JavaDataSetSource: JavaDataSetSource = js.native
    
    @JSName("DataSets$OqlDataSetSource")
    var DataSets$OqlDataSetSource: OqlDataSetSource = js.native
    
    @JSName("DataTypes$BinaryType")
    var DataTypes$BinaryType: BinaryType = js.native
    
    @JSName("DataTypes$BooleanType")
    var DataTypes$BooleanType: typingsSlinky.mendixmodelsdk.datatypesMod.datatypes.BooleanType = js.native
    
    @JSName("DataTypes$DateTimeType")
    var DataTypes$DateTimeType: typingsSlinky.mendixmodelsdk.datatypesMod.datatypes.DateTimeType = js.native
    
    @JSName("DataTypes$DecimalType")
    var DataTypes$DecimalType: typingsSlinky.mendixmodelsdk.datatypesMod.datatypes.DecimalType = js.native
    
    @JSName("DataTypes$EmptyType")
    var DataTypes$EmptyType: EmptyType = js.native
    
    @JSName("DataTypes$EnumerationType")
    var DataTypes$EnumerationType: typingsSlinky.mendixmodelsdk.datatypesMod.datatypes.EnumerationType = js.native
    
    @JSName("DataTypes$FloatType")
    var DataTypes$FloatType: typingsSlinky.mendixmodelsdk.datatypesMod.datatypes.FloatType = js.native
    
    @JSName("DataTypes$IntegerType")
    var DataTypes$IntegerType: typingsSlinky.mendixmodelsdk.datatypesMod.datatypes.IntegerType = js.native
    
    @JSName("DataTypes$ListType")
    var DataTypes$ListType: typingsSlinky.mendixmodelsdk.datatypesMod.datatypes.ListType = js.native
    
    @JSName("DataTypes$ObjectType")
    var DataTypes$ObjectType: ObjectType = js.native
    
    @JSName("DataTypes$StringType")
    var DataTypes$StringType: typingsSlinky.mendixmodelsdk.datatypesMod.datatypes.StringType = js.native
    
    @JSName("DataTypes$UnknownType")
    var DataTypes$UnknownType: UnknownType = js.native
    
    @JSName("DataTypes$VoidType")
    var DataTypes$VoidType: typingsSlinky.mendixmodelsdk.datatypesMod.datatypes.VoidType = js.native
    
    @JSName("DocumentTemplates$ConditionSettings")
    var DocumentTemplates$ConditionSettings: ConditionSettings = js.native
    
    @JSName("DocumentTemplates$DataGrid")
    var DocumentTemplates$DataGrid: DataGrid = js.native
    
    @JSName("DocumentTemplates$DataGridCell")
    var DocumentTemplates$DataGridCell: DataGridCell = js.native
    
    @JSName("DocumentTemplates$DataGridColumn")
    var DocumentTemplates$DataGridColumn: DataGridColumn = js.native
    
    @JSName("DocumentTemplates$DataView")
    var DocumentTemplates$DataView: DataView = js.native
    
    @JSName("DocumentTemplates$DataViewContents")
    var DocumentTemplates$DataViewContents: DataViewContents = js.native
    
    @JSName("DocumentTemplates$DocumentTemplateParameter")
    var DocumentTemplates$DocumentTemplateParameter: DocumentTemplateParameter = js.native
    
    @JSName("DocumentTemplates$DynamicImageViewer")
    var DocumentTemplates$DynamicImageViewer: DynamicImageViewer = js.native
    
    @JSName("DocumentTemplates$DynamicLabel")
    var DocumentTemplates$DynamicLabel: DynamicLabel = js.native
    
    @JSName("DocumentTemplates$Footer")
    var DocumentTemplates$Footer: Footer = js.native
    
    @JSName("DocumentTemplates$GridSortBar")
    var DocumentTemplates$GridSortBar: GridSortBar = js.native
    
    @JSName("DocumentTemplates$GridSortItem")
    var DocumentTemplates$GridSortItem: GridSortItem = js.native
    
    @JSName("DocumentTemplates$Header")
    var DocumentTemplates$Header: Header = js.native
    
    @JSName("DocumentTemplates$LineBreak")
    var DocumentTemplates$LineBreak: LineBreak = js.native
    
    @JSName("DocumentTemplates$PageBreak")
    var DocumentTemplates$PageBreak: PageBreak = js.native
    
    @JSName("DocumentTemplates$StaticImageViewer")
    var DocumentTemplates$StaticImageViewer: StaticImageViewer = js.native
    
    @JSName("DocumentTemplates$StaticLabel")
    var DocumentTemplates$StaticLabel: StaticLabel = js.native
    
    @JSName("DocumentTemplates$Style")
    var DocumentTemplates$Style: Style = js.native
    
    @JSName("DocumentTemplates$Table")
    var DocumentTemplates$Table: Table = js.native
    
    @JSName("DocumentTemplates$TableCell")
    var DocumentTemplates$TableCell: TableCell = js.native
    
    @JSName("DocumentTemplates$TableRow")
    var DocumentTemplates$TableRow: TableRow = js.native
    
    @JSName("DocumentTemplates$TemplateGrid")
    var DocumentTemplates$TemplateGrid: TemplateGrid = js.native
    
    @JSName("DocumentTemplates$TemplateGridContents")
    var DocumentTemplates$TemplateGridContents: TemplateGridContents = js.native
    
    @JSName("DocumentTemplates$Title")
    var DocumentTemplates$Title: Title = js.native
    
    @JSName("DomainModels$AccessRule")
    var DomainModels$AccessRule: AccessRule = js.native
    
    @JSName("DomainModels$Annotation")
    var DomainModels$Annotation: Annotation = js.native
    
    @JSName("DomainModels$Association")
    var DomainModels$Association: Association = js.native
    
    @JSName("DomainModels$AssociationCapabilities")
    var DomainModels$AssociationCapabilities: AssociationCapabilities = js.native
    
    @JSName("DomainModels$AssociationDeleteBehavior")
    var DomainModels$AssociationDeleteBehavior: AssociationDeleteBehavior = js.native
    
    @JSName("DomainModels$AssociationRef")
    var DomainModels$AssociationRef: AssociationRef = js.native
    
    @JSName("DomainModels$Attribute")
    var DomainModels$Attribute: Attribute = js.native
    
    @JSName("DomainModels$AttributeCapabilities")
    var DomainModels$AttributeCapabilities: AttributeCapabilities = js.native
    
    @JSName("DomainModels$AttributeRef")
    var DomainModels$AttributeRef: AttributeRef = js.native
    
    @JSName("DomainModels$AutoNumberAttributeType")
    var DomainModels$AutoNumberAttributeType: AutoNumberAttributeType = js.native
    
    @JSName("DomainModels$BinaryAttributeType")
    var DomainModels$BinaryAttributeType: BinaryAttributeType = js.native
    
    @JSName("DomainModels$BooleanAttributeType")
    var DomainModels$BooleanAttributeType: BooleanAttributeType = js.native
    
    @JSName("DomainModels$CalculatedValue")
    var DomainModels$CalculatedValue: CalculatedValue = js.native
    
    @JSName("DomainModels$CrossAssociation")
    var DomainModels$CrossAssociation: CrossAssociation = js.native
    
    @JSName("DomainModels$CurrencyAttributeType")
    var DomainModels$CurrencyAttributeType: CurrencyAttributeType = js.native
    
    @JSName("DomainModels$DateTimeAttributeType")
    var DomainModels$DateTimeAttributeType: DateTimeAttributeType = js.native
    
    @JSName("DomainModels$DecimalAttributeType")
    var DomainModels$DecimalAttributeType: DecimalAttributeType = js.native
    
    @JSName("DomainModels$DirectEntityRef")
    var DomainModels$DirectEntityRef: DirectEntityRef = js.native
    
    @JSName("DomainModels$Entity")
    var DomainModels$Entity: Entity = js.native
    
    @JSName("DomainModels$EntityCapabilities")
    var DomainModels$EntityCapabilities: EntityCapabilities = js.native
    
    @JSName("DomainModels$EntityKey")
    var DomainModels$EntityKey: EntityKey = js.native
    
    @JSName("DomainModels$EntityKeyPart")
    var DomainModels$EntityKeyPart: EntityKeyPart = js.native
    
    @JSName("DomainModels$EntityRefStep")
    var DomainModels$EntityRefStep: EntityRefStep = js.native
    
    @JSName("DomainModels$EnumerationAttributeType")
    var DomainModels$EnumerationAttributeType: EnumerationAttributeType = js.native
    
    @JSName("DomainModels$EqualsToRuleInfo")
    var DomainModels$EqualsToRuleInfo: EqualsToRuleInfo = js.native
    
    @JSName("DomainModels$EventHandler")
    var DomainModels$EventHandler: EventHandler = js.native
    
    @JSName("DomainModels$FloatAttributeType")
    var DomainModels$FloatAttributeType: FloatAttributeType = js.native
    
    @JSName("DomainModels$Generalization")
    var DomainModels$Generalization: Generalization = js.native
    
    @JSName("DomainModels$HashedStringAttributeType")
    var DomainModels$HashedStringAttributeType: HashedStringAttributeType = js.native
    
    @JSName("DomainModels$Index")
    var DomainModels$Index: Index = js.native
    
    @JSName("DomainModels$IndexedAttribute")
    var DomainModels$IndexedAttribute: IndexedAttribute = js.native
    
    @JSName("DomainModels$IndirectEntityRef")
    var DomainModels$IndirectEntityRef: IndirectEntityRef = js.native
    
    @JSName("DomainModels$IntegerAttributeType")
    var DomainModels$IntegerAttributeType: IntegerAttributeType = js.native
    
    @JSName("DomainModels$LongAttributeType")
    var DomainModels$LongAttributeType: LongAttributeType = js.native
    
    @JSName("DomainModels$MaxLengthRuleInfo")
    var DomainModels$MaxLengthRuleInfo: MaxLengthRuleInfo = js.native
    
    @JSName("DomainModels$MemberAccess")
    var DomainModels$MemberAccess: MemberAccess = js.native
    
    @JSName("DomainModels$NoGeneralization")
    var DomainModels$NoGeneralization: NoGeneralization = js.native
    
    @JSName("DomainModels$RangeRuleInfo")
    var DomainModels$RangeRuleInfo: RangeRuleInfo = js.native
    
    @JSName("DomainModels$RegExRuleInfo")
    var DomainModels$RegExRuleInfo: RegExRuleInfo = js.native
    
    @JSName("DomainModels$RequiredRuleInfo")
    var DomainModels$RequiredRuleInfo: RequiredRuleInfo = js.native
    
    @JSName("DomainModels$StoredValue")
    var DomainModels$StoredValue: StoredValue = js.native
    
    @JSName("DomainModels$StringAttributeType")
    var DomainModels$StringAttributeType: StringAttributeType = js.native
    
    @JSName("DomainModels$UniqueRuleInfo")
    var DomainModels$UniqueRuleInfo: UniqueRuleInfo = js.native
    
    @JSName("DomainModels$ValidationRule")
    var DomainModels$ValidationRule: ValidationRule = js.native
    
    @JSName("Enumerations$Condition")
    var Enumerations$Condition: Condition = js.native
    
    @JSName("Enumerations$EnumerationValue")
    var Enumerations$EnumerationValue: EnumerationValue = js.native
    
    @JSName("ExportMappings$ExportObjectMappingElement")
    var ExportMappings$ExportObjectMappingElement: ExportObjectMappingElement = js.native
    
    @JSName("ExportMappings$ExportValueMappingElement")
    var ExportMappings$ExportValueMappingElement: ExportValueMappingElement = js.native
    
    @JSName("Expressions$BinaryExpression")
    var Expressions$BinaryExpression: BinaryExpression = js.native
    
    @JSName("Expressions$BooleanLiteral")
    var Expressions$BooleanLiteral: BooleanLiteral = js.native
    
    @JSName("Expressions$ConstantRefExpression")
    var Expressions$ConstantRefExpression: ConstantRefExpression = js.native
    
    @JSName("Expressions$EmptyLiteral")
    var Expressions$EmptyLiteral: EmptyLiteral = js.native
    
    @JSName("Expressions$EnumerationValueRefExpression")
    var Expressions$EnumerationValueRefExpression: EnumerationValueRefExpression = js.native
    
    @JSName("Expressions$FloatLiteral")
    var Expressions$FloatLiteral: FloatLiteral = js.native
    
    @JSName("Expressions$FunctionCallExpression")
    var Expressions$FunctionCallExpression: FunctionCallExpression = js.native
    
    @JSName("Expressions$GlobalVariableRef")
    var Expressions$GlobalVariableRef: GlobalVariableRef = js.native
    
    @JSName("Expressions$IfExpression")
    var Expressions$IfExpression: IfExpression = js.native
    
    @JSName("Expressions$IntegerLiteral")
    var Expressions$IntegerLiteral: IntegerLiteral = js.native
    
    @JSName("Expressions$NoExpression")
    var Expressions$NoExpression: NoExpression = js.native
    
    @JSName("Expressions$NoVariableRef")
    var Expressions$NoVariableRef: NoVariableRef = js.native
    
    @JSName("Expressions$ParenthesisExpression")
    var Expressions$ParenthesisExpression: ParenthesisExpression = js.native
    
    @JSName("Expressions$StringLiteral")
    var Expressions$StringLiteral: StringLiteral = js.native
    
    @JSName("Expressions$UnaryExpression")
    var Expressions$UnaryExpression: UnaryExpression = js.native
    
    @JSName("Expressions$UnparsableExpression")
    var Expressions$UnparsableExpression: UnparsableExpression = js.native
    
    @JSName("Expressions$VariableRefExpression")
    var Expressions$VariableRefExpression: VariableRefExpression = js.native
    
    @JSName("Images$Image")
    var Images$Image: Image = js.native
    
    @JSName("ImportMappings$ImportObjectMappingElement")
    var ImportMappings$ImportObjectMappingElement: ImportObjectMappingElement = js.native
    
    @JSName("ImportMappings$ImportValueMappingElement")
    var ImportMappings$ImportValueMappingElement: ImportValueMappingElement = js.native
    
    @JSName("JavaActions$BasicParameterType")
    var JavaActions$BasicParameterType: typingsSlinky.mendixmodelsdk.javaactionsMod.javaactions.BasicParameterType = js.native
    
    @JSName("JavaActions$BooleanType")
    var JavaActions$BooleanType: typingsSlinky.mendixmodelsdk.javaactionsMod.javaactions.BooleanType = js.native
    
    @JSName("JavaActions$ConcreteEntityType")
    var JavaActions$ConcreteEntityType: typingsSlinky.mendixmodelsdk.javaactionsMod.javaactions.ConcreteEntityType = js.native
    
    @JSName("JavaActions$DateTimeType")
    var JavaActions$DateTimeType: typingsSlinky.mendixmodelsdk.javaactionsMod.javaactions.DateTimeType = js.native
    
    @JSName("JavaActions$DecimalType")
    var JavaActions$DecimalType: typingsSlinky.mendixmodelsdk.javaactionsMod.javaactions.DecimalType = js.native
    
    @JSName("JavaActions$EntityTypeParameterType")
    var JavaActions$EntityTypeParameterType: typingsSlinky.mendixmodelsdk.javaactionsMod.javaactions.EntityTypeParameterType = js.native
    
    @JSName("JavaActions$EnumerationType")
    var JavaActions$EnumerationType: typingsSlinky.mendixmodelsdk.javaactionsMod.javaactions.EnumerationType = js.native
    
    @JSName("JavaActions$ExportMappingJavaActionParameterType")
    var JavaActions$ExportMappingJavaActionParameterType: ExportMappingJavaActionParameterType = js.native
    
    @JSName("JavaActions$ExportMappingParameterType")
    var JavaActions$ExportMappingParameterType: ExportMappingParameterType = js.native
    
    @JSName("JavaActions$FloatType")
    var JavaActions$FloatType: typingsSlinky.mendixmodelsdk.javaactionsMod.javaactions.FloatType = js.native
    
    @JSName("JavaActions$ImportMappingJavaActionParameterType")
    var JavaActions$ImportMappingJavaActionParameterType: ImportMappingJavaActionParameterType = js.native
    
    @JSName("JavaActions$ImportMappingParameterType")
    var JavaActions$ImportMappingParameterType: ImportMappingParameterType = js.native
    
    @JSName("JavaActions$IntegerType")
    var JavaActions$IntegerType: typingsSlinky.mendixmodelsdk.javaactionsMod.javaactions.IntegerType = js.native
    
    @JSName("JavaActions$JavaActionParameter")
    var JavaActions$JavaActionParameter: JavaActionParameter = js.native
    
    @JSName("JavaActions$ListType")
    var JavaActions$ListType: typingsSlinky.mendixmodelsdk.javaactionsMod.javaactions.ListType = js.native
    
    @JSName("JavaActions$MicroflowActionInfo")
    var JavaActions$MicroflowActionInfo: typingsSlinky.mendixmodelsdk.javaactionsMod.javaactions.MicroflowActionInfo = js.native
    
    @JSName("JavaActions$MicroflowJavaActionParameterType")
    var JavaActions$MicroflowJavaActionParameterType: MicroflowJavaActionParameterType = js.native
    
    @JSName("JavaActions$MicroflowParameterType")
    var JavaActions$MicroflowParameterType: MicroflowParameterType = js.native
    
    @JSName("JavaActions$ParameterizedEntityType")
    var JavaActions$ParameterizedEntityType: typingsSlinky.mendixmodelsdk.javaactionsMod.javaactions.ParameterizedEntityType = js.native
    
    @JSName("JavaActions$StringType")
    var JavaActions$StringType: typingsSlinky.mendixmodelsdk.javaactionsMod.javaactions.StringType = js.native
    
    @JSName("JavaActions$TypeParameter")
    var JavaActions$TypeParameter: typingsSlinky.mendixmodelsdk.javaactionsMod.javaactions.TypeParameter = js.native
    
    @JSName("JavaScriptActions$JavaScriptActionParameter")
    var JavaScriptActions$JavaScriptActionParameter: JavaScriptActionParameter = js.native
    
    @JSName("JavaScriptActions$NanoflowJavaScriptActionParameterType")
    var JavaScriptActions$NanoflowJavaScriptActionParameterType: NanoflowJavaScriptActionParameterType = js.native
    
    @JSName("JsonStructures$JsonElement")
    var JsonStructures$JsonElement: JsonElement = js.native
    
    @JSName("Kafka$KafkaMappedValue")
    var Kafka$KafkaMappedValue: KafkaMappedValue = js.native
    
    @JSName("Kafka$KafkaRemoteEntitySource")
    var Kafka$KafkaRemoteEntitySource: KafkaRemoteEntitySource = js.native
    
    @JSName("Kafka$PublishedKafkaResource")
    var Kafka$PublishedKafkaResource: PublishedKafkaResource = js.native
    
    @JSName("Mappings$MappingMicroflowCall")
    var Mappings$MappingMicroflowCall: MappingMicroflowCall = js.native
    
    @JSName("Mappings$MappingMicroflowParameter")
    var Mappings$MappingMicroflowParameter: MappingMicroflowParameter = js.native
    
    @JSName("Menus$MenuItem")
    var Menus$MenuItem: MenuItem = js.native
    
    @JSName("Menus$MenuItemCollection")
    var Menus$MenuItemCollection: MenuItemCollection = js.native
    
    @JSName("MessageDefinitions$AssociationElement")
    var MessageDefinitions$AssociationElement: AssociationElement = js.native
    
    @JSName("MessageDefinitions$AttributeElement")
    var MessageDefinitions$AttributeElement: AttributeElement = js.native
    
    @JSName("MessageDefinitions$EntityElement")
    var MessageDefinitions$EntityElement: EntityElement = js.native
    
    @JSName("MessageDefinitions$EntityMessageDefinition")
    var MessageDefinitions$EntityMessageDefinition: EntityMessageDefinition = js.native
    
    @JSName("MessageDefinitions$ExposedAssociation")
    var MessageDefinitions$ExposedAssociation: ExposedAssociation = js.native
    
    @JSName("MessageDefinitions$ExposedAttribute")
    var MessageDefinitions$ExposedAttribute: ExposedAttribute = js.native
    
    @JSName("MessageDefinitions$ExposedEntity")
    var MessageDefinitions$ExposedEntity: ExposedEntity = js.native
    
    @JSName("Microflows$ActionActivity")
    var Microflows$ActionActivity: ActionActivity = js.native
    
    @JSName("Microflows$AdvancedRequestHandling")
    var Microflows$AdvancedRequestHandling: AdvancedRequestHandling = js.native
    
    @JSName("Microflows$AggregateListAction")
    var Microflows$AggregateListAction: AggregateListAction = js.native
    
    @JSName("Microflows$Annotation")
    var Microflows$Annotation: typingsSlinky.mendixmodelsdk.microflowsMod.microflows.Annotation = js.native
    
    @JSName("Microflows$AnnotationFlow")
    var Microflows$AnnotationFlow: AnnotationFlow = js.native
    
    @JSName("Microflows$AppServiceCallAction")
    var Microflows$AppServiceCallAction: AppServiceCallAction = js.native
    
    @JSName("Microflows$AppServiceCallParameterMapping")
    var Microflows$AppServiceCallParameterMapping: AppServiceCallParameterMapping = js.native
    
    @JSName("Microflows$AssociationRetrieveSource")
    var Microflows$AssociationRetrieveSource: AssociationRetrieveSource = js.native
    
    @JSName("Microflows$BasicCodeActionParameterValue")
    var Microflows$BasicCodeActionParameterValue: BasicCodeActionParameterValue = js.native
    
    @JSName("Microflows$BasicJavaActionParameterValue")
    var Microflows$BasicJavaActionParameterValue: BasicJavaActionParameterValue = js.native
    
    @JSName("Microflows$BinaryRequestHandling")
    var Microflows$BinaryRequestHandling: BinaryRequestHandling = js.native
    
    @JSName("Microflows$BreakEvent")
    var Microflows$BreakEvent: BreakEvent = js.native
    
    @JSName("Microflows$CastAction")
    var Microflows$CastAction: CastAction = js.native
    
    @JSName("Microflows$ChangeListAction")
    var Microflows$ChangeListAction: ChangeListAction = js.native
    
    @JSName("Microflows$ChangeObjectAction")
    var Microflows$ChangeObjectAction: ChangeObjectAction = js.native
    
    @JSName("Microflows$ChangeVariableAction")
    var Microflows$ChangeVariableAction: ChangeVariableAction = js.native
    
    @JSName("Microflows$CloseFormAction")
    var Microflows$CloseFormAction: CloseFormAction = js.native
    
    @JSName("Microflows$CommitAction")
    var Microflows$CommitAction: CommitAction = js.native
    
    @JSName("Microflows$ConstantRange")
    var Microflows$ConstantRange: ConstantRange = js.native
    
    @JSName("Microflows$Contains")
    var Microflows$Contains: Contains = js.native
    
    @JSName("Microflows$ContinueEvent")
    var Microflows$ContinueEvent: ContinueEvent = js.native
    
    @JSName("Microflows$CreateListAction")
    var Microflows$CreateListAction: CreateListAction = js.native
    
    @JSName("Microflows$CreateObjectAction")
    var Microflows$CreateObjectAction: CreateObjectAction = js.native
    
    @JSName("Microflows$CreateVariableAction")
    var Microflows$CreateVariableAction: CreateVariableAction = js.native
    
    @JSName("Microflows$CustomRange")
    var Microflows$CustomRange: CustomRange = js.native
    
    @JSName("Microflows$CustomRequestHandling")
    var Microflows$CustomRequestHandling: CustomRequestHandling = js.native
    
    @JSName("Microflows$DatabaseRetrieveSource")
    var Microflows$DatabaseRetrieveSource: DatabaseRetrieveSource = js.native
    
    @JSName("Microflows$DeleteAction")
    var Microflows$DeleteAction: DeleteAction = js.native
    
    @JSName("Microflows$DocumentTemplateParameterMapping")
    var Microflows$DocumentTemplateParameterMapping: DocumentTemplateParameterMapping = js.native
    
    @JSName("Microflows$DownloadFileAction")
    var Microflows$DownloadFileAction: DownloadFileAction = js.native
    
    @JSName("Microflows$EndEvent")
    var Microflows$EndEvent: EndEvent = js.native
    
    @JSName("Microflows$EntityTypeCodeActionParameterValue")
    var Microflows$EntityTypeCodeActionParameterValue: EntityTypeCodeActionParameterValue = js.native
    
    @JSName("Microflows$EntityTypeJavaActionParameterValue")
    var Microflows$EntityTypeJavaActionParameterValue: EntityTypeJavaActionParameterValue = js.native
    
    @JSName("Microflows$EnumerationCase")
    var Microflows$EnumerationCase: EnumerationCase = js.native
    
    @JSName("Microflows$ErrorEvent")
    var Microflows$ErrorEvent: ErrorEvent = js.native
    
    @JSName("Microflows$ExclusiveMerge")
    var Microflows$ExclusiveMerge: ExclusiveMerge = js.native
    
    @JSName("Microflows$ExclusiveSplit")
    var Microflows$ExclusiveSplit: ExclusiveSplit = js.native
    
    @JSName("Microflows$ExportMappingJavaActionParameterValue")
    var Microflows$ExportMappingJavaActionParameterValue: ExportMappingJavaActionParameterValue = js.native
    
    @JSName("Microflows$ExportMappingParameterValue")
    var Microflows$ExportMappingParameterValue: ExportMappingParameterValue = js.native
    
    @JSName("Microflows$ExportXmlAction")
    var Microflows$ExportXmlAction: ExportXmlAction = js.native
    
    @JSName("Microflows$ExpressionSplitCondition")
    var Microflows$ExpressionSplitCondition: ExpressionSplitCondition = js.native
    
    @JSName("Microflows$FileDocumentExport")
    var Microflows$FileDocumentExport: FileDocumentExport = js.native
    
    @JSName("Microflows$Filter")
    var Microflows$Filter: Filter = js.native
    
    @JSName("Microflows$Find")
    var Microflows$Find: Find = js.native
    
    @JSName("Microflows$FormDataPart")
    var Microflows$FormDataPart: FormDataPart = js.native
    
    @JSName("Microflows$FormDataRequestHandling")
    var Microflows$FormDataRequestHandling: FormDataRequestHandling = js.native
    
    @JSName("Microflows$GenerateDocumentAction")
    var Microflows$GenerateDocumentAction: GenerateDocumentAction = js.native
    
    @JSName("Microflows$Head")
    var Microflows$Head: Head = js.native
    
    @JSName("Microflows$HttpConfiguration")
    var Microflows$HttpConfiguration: HttpConfiguration = js.native
    
    @JSName("Microflows$HttpHeaderEntry")
    var Microflows$HttpHeaderEntry: HttpHeaderEntry = js.native
    
    @JSName("Microflows$ImportMappingCall")
    var Microflows$ImportMappingCall: ImportMappingCall = js.native
    
    @JSName("Microflows$ImportMappingJavaActionParameterValue")
    var Microflows$ImportMappingJavaActionParameterValue: ImportMappingJavaActionParameterValue = js.native
    
    @JSName("Microflows$ImportMappingParameterValue")
    var Microflows$ImportMappingParameterValue: ImportMappingParameterValue = js.native
    
    @JSName("Microflows$ImportXmlAction")
    var Microflows$ImportXmlAction: ImportXmlAction = js.native
    
    @JSName("Microflows$InheritanceCase")
    var Microflows$InheritanceCase: InheritanceCase = js.native
    
    @JSName("Microflows$InheritanceSplit")
    var Microflows$InheritanceSplit: InheritanceSplit = js.native
    
    @JSName("Microflows$Intersect")
    var Microflows$Intersect: Intersect = js.native
    
    @JSName("Microflows$JavaActionCallAction")
    var Microflows$JavaActionCallAction: JavaActionCallAction = js.native
    
    @JSName("Microflows$JavaActionParameterMapping")
    var Microflows$JavaActionParameterMapping: JavaActionParameterMapping = js.native
    
    @JSName("Microflows$JavaScriptActionCallAction")
    var Microflows$JavaScriptActionCallAction: JavaScriptActionCallAction = js.native
    
    @JSName("Microflows$JavaScriptActionParameterMapping")
    var Microflows$JavaScriptActionParameterMapping: JavaScriptActionParameterMapping = js.native
    
    @JSName("Microflows$ListEquals")
    var Microflows$ListEquals: ListEquals = js.native
    
    @JSName("Microflows$ListOperationAction")
    var Microflows$ListOperationAction: ListOperationAction = js.native
    
    @JSName("Microflows$LogMessageAction")
    var Microflows$LogMessageAction: LogMessageAction = js.native
    
    @JSName("Microflows$LoopedActivity")
    var Microflows$LoopedActivity: LoopedActivity = js.native
    
    @JSName("Microflows$MappingRequestHandling")
    var Microflows$MappingRequestHandling: MappingRequestHandling = js.native
    
    @JSName("Microflows$MemberChange")
    var Microflows$MemberChange: MemberChange = js.native
    
    @JSName("Microflows$MicroflowCall")
    var Microflows$MicroflowCall: MicroflowCall = js.native
    
    @JSName("Microflows$MicroflowCallAction")
    var Microflows$MicroflowCallAction: MicroflowCallAction = js.native
    
    @JSName("Microflows$MicroflowCallParameterMapping")
    var Microflows$MicroflowCallParameterMapping: MicroflowCallParameterMapping = js.native
    
    @JSName("Microflows$MicroflowJavaActionParameterValue")
    var Microflows$MicroflowJavaActionParameterValue: MicroflowJavaActionParameterValue = js.native
    
    @JSName("Microflows$MicroflowObjectCollection")
    var Microflows$MicroflowObjectCollection: MicroflowObjectCollection = js.native
    
    @JSName("Microflows$MicroflowParameter")
    var Microflows$MicroflowParameter: MicroflowParameter = js.native
    
    @JSName("Microflows$MicroflowParameterObject")
    var Microflows$MicroflowParameterObject: MicroflowParameterObject = js.native
    
    @JSName("Microflows$MicroflowParameterValue")
    var Microflows$MicroflowParameterValue: MicroflowParameterValue = js.native
    
    @JSName("Microflows$NanoflowCall")
    var Microflows$NanoflowCall: NanoflowCall = js.native
    
    @JSName("Microflows$NanoflowCallAction")
    var Microflows$NanoflowCallAction: NanoflowCallAction = js.native
    
    @JSName("Microflows$NanoflowCallParameterMapping")
    var Microflows$NanoflowCallParameterMapping: NanoflowCallParameterMapping = js.native
    
    @JSName("Microflows$NanoflowParameter")
    var Microflows$NanoflowParameter: NanoflowParameter = js.native
    
    @JSName("Microflows$NoCase")
    var Microflows$NoCase: NoCase = js.native
    
    @JSName("Microflows$OpenUserTaskAction")
    var Microflows$OpenUserTaskAction: OpenUserTaskAction = js.native
    
    @JSName("Microflows$PrimitiveTypedTemplateArgument")
    var Microflows$PrimitiveTypedTemplateArgument: PrimitiveTypedTemplateArgument = js.native
    
    @JSName("Microflows$ProxyConfiguration")
    var Microflows$ProxyConfiguration: ProxyConfiguration = js.native
    
    @JSName("Microflows$PushToClientAction")
    var Microflows$PushToClientAction: PushToClientAction = js.native
    
    @JSName("Microflows$RestCallAction")
    var Microflows$RestCallAction: RestCallAction = js.native
    
    @JSName("Microflows$ResultHandling")
    var Microflows$ResultHandling: ResultHandling = js.native
    
    @JSName("Microflows$RetrieveAction")
    var Microflows$RetrieveAction: RetrieveAction = js.native
    
    @JSName("Microflows$RollbackAction")
    var Microflows$RollbackAction: RollbackAction = js.native
    
    @JSName("Microflows$RuleCall")
    var Microflows$RuleCall: RuleCall = js.native
    
    @JSName("Microflows$RuleCallParameterMapping")
    var Microflows$RuleCallParameterMapping: RuleCallParameterMapping = js.native
    
    @JSName("Microflows$RuleParameter")
    var Microflows$RuleParameter: RuleParameter = js.native
    
    @JSName("Microflows$RuleSplitCondition")
    var Microflows$RuleSplitCondition: RuleSplitCondition = js.native
    
    @JSName("Microflows$SequenceFlow")
    var Microflows$SequenceFlow: SequenceFlow = js.native
    
    @JSName("Microflows$SetTaskOutcomeAction")
    var Microflows$SetTaskOutcomeAction: SetTaskOutcomeAction = js.native
    
    @JSName("Microflows$ShowHomePageAction")
    var Microflows$ShowHomePageAction: ShowHomePageAction = js.native
    
    @JSName("Microflows$ShowMessageAction")
    var Microflows$ShowMessageAction: ShowMessageAction = js.native
    
    @JSName("Microflows$ShowPageAction")
    var Microflows$ShowPageAction: ShowPageAction = js.native
    
    @JSName("Microflows$SimpleRequestHandling")
    var Microflows$SimpleRequestHandling: SimpleRequestHandling = js.native
    
    @JSName("Microflows$Sort")
    var Microflows$Sort: Sort = js.native
    
    @JSName("Microflows$SortItem")
    var Microflows$SortItem: SortItem = js.native
    
    @JSName("Microflows$SortItemList")
    var Microflows$SortItemList: SortItemList = js.native
    
    @JSName("Microflows$StartEvent")
    var Microflows$StartEvent: StartEvent = js.native
    
    @JSName("Microflows$StringTemplate")
    var Microflows$StringTemplate: StringTemplate = js.native
    
    @JSName("Microflows$StringTemplateParameterValue")
    var Microflows$StringTemplateParameterValue: StringTemplateParameterValue = js.native
    
    @JSName("Microflows$Subtract")
    var Microflows$Subtract: Subtract = js.native
    
    @JSName("Microflows$SynchronizeAction")
    var Microflows$SynchronizeAction: SynchronizeAction = js.native
    
    @JSName("Microflows$Tail")
    var Microflows$Tail: Tail = js.native
    
    @JSName("Microflows$TemplateArgument")
    var Microflows$TemplateArgument: TemplateArgument = js.native
    
    @JSName("Microflows$TextTemplate")
    var Microflows$TextTemplate: TextTemplate = js.native
    
    @JSName("Microflows$TypedTemplate")
    var Microflows$TypedTemplate: TypedTemplate = js.native
    
    @JSName("Microflows$Union")
    var Microflows$Union: Union = js.native
    
    @JSName("Microflows$ValidationFeedbackAction")
    var Microflows$ValidationFeedbackAction: ValidationFeedbackAction = js.native
    
    @JSName("Microflows$VariableExport")
    var Microflows$VariableExport: VariableExport = js.native
    
    @JSName("Microflows$WebServiceCallAction")
    var Microflows$WebServiceCallAction: WebServiceCallAction = js.native
    
    @JSName("Microflows$WebServiceOperationAdvancedParameterMapping")
    var Microflows$WebServiceOperationAdvancedParameterMapping: WebServiceOperationAdvancedParameterMapping = js.native
    
    @JSName("Microflows$WebServiceOperationSimpleParameterMapping")
    var Microflows$WebServiceOperationSimpleParameterMapping: WebServiceOperationSimpleParameterMapping = js.native
    
    @JSName("Microflows$WorkflowCallAction")
    var Microflows$WorkflowCallAction: WorkflowCallAction = js.native
    
    @JSName("Nanoflows$NanoflowParameterValue")
    var Nanoflows$NanoflowParameterValue: NanoflowParameterValue = js.native
    
    @JSName("NativePages$BottomBarItem")
    var NativePages$BottomBarItem: BottomBarItem = js.native
    
    @JSName("NativePages$NativeLayoutCallArgument")
    var NativePages$NativeLayoutCallArgument: NativeLayoutCallArgument = js.native
    
    @JSName("NativePages$NativePageClientAction")
    var NativePages$NativePageClientAction: NativePageClientAction = js.native
    
    @JSName("NativePages$NativePlaceholder")
    var NativePages$NativePlaceholder: NativePlaceholder = js.native
    
    @JSName("Navigation$HomePage")
    var Navigation$HomePage: HomePage = js.native
    
    @JSName("Navigation$NativeNavigationProfile")
    var Navigation$NativeNavigationProfile: NativeNavigationProfile = js.native
    
    @JSName("Navigation$NavigationProfile")
    var Navigation$NavigationProfile: NavigationProfile = js.native
    
    @JSName("Navigation$OfflineEntityConfig")
    var Navigation$OfflineEntityConfig: OfflineEntityConfig = js.native
    
    @JSName("Navigation$RoleBasedHomePage")
    var Navigation$RoleBasedHomePage: RoleBasedHomePage = js.native
    
    @JSName("Navigation$RoleBasedNativeHomePage")
    var Navigation$RoleBasedNativeHomePage: RoleBasedNativeHomePage = js.native
    
    @JSName("Pages$ActionButton")
    var Pages$ActionButton: ActionButton = js.native
    
    @JSName("Pages$Appearance")
    var Pages$Appearance: Appearance = js.native
    
    @JSName("Pages$AssociationSource")
    var Pages$AssociationSource: AssociationSource = js.native
    
    @JSName("Pages$BackButton")
    var Pages$BackButton: BackButton = js.native
    
    @JSName("Pages$CallNanoflowClientAction")
    var Pages$CallNanoflowClientAction: CallNanoflowClientAction = js.native
    
    @JSName("Pages$CallWorkflowClientAction")
    var Pages$CallWorkflowClientAction: CallWorkflowClientAction = js.native
    
    @JSName("Pages$CancelButton")
    var Pages$CancelButton: CancelButton = js.native
    
    @JSName("Pages$CancelChangesClientAction")
    var Pages$CancelChangesClientAction: CancelChangesClientAction = js.native
    
    @JSName("Pages$CheckBox")
    var Pages$CheckBox: CheckBox = js.native
    
    @JSName("Pages$ClientTemplate")
    var Pages$ClientTemplate: ClientTemplate = js.native
    
    @JSName("Pages$ClientTemplateParameter")
    var Pages$ClientTemplateParameter: ClientTemplateParameter = js.native
    
    @JSName("Pages$ClosePageClientAction")
    var Pages$ClosePageClientAction: ClosePageClientAction = js.native
    
    @JSName("Pages$ComparisonSearchField")
    var Pages$ComparisonSearchField: ComparisonSearchField = js.native
    
    @JSName("Pages$ConditionalEditabilitySettings")
    var Pages$ConditionalEditabilitySettings: ConditionalEditabilitySettings = js.native
    
    @JSName("Pages$ConditionalVisibilitySettings")
    var Pages$ConditionalVisibilitySettings: ConditionalVisibilitySettings = js.native
    
    @JSName("Pages$ConfirmationInfo")
    var Pages$ConfirmationInfo: ConfirmationInfo = js.native
    
    @JSName("Pages$CreateObjectClientAction")
    var Pages$CreateObjectClientAction: CreateObjectClientAction = js.native
    
    @JSName("Pages$DataGrid")
    var Pages$DataGrid: typingsSlinky.mendixmodelsdk.pagesMod.pages.DataGrid = js.native
    
    @JSName("Pages$DataGridAddButton")
    var Pages$DataGridAddButton: DataGridAddButton = js.native
    
    @JSName("Pages$DataGridExportToCSVButton")
    var Pages$DataGridExportToCSVButton: DataGridExportToCSVButton = js.native
    
    @JSName("Pages$DataGridExportToExcelButton")
    var Pages$DataGridExportToExcelButton: DataGridExportToExcelButton = js.native
    
    @JSName("Pages$DataGridRemoveButton")
    var Pages$DataGridRemoveButton: DataGridRemoveButton = js.native
    
    @JSName("Pages$DataView")
    var Pages$DataView: typingsSlinky.mendixmodelsdk.pagesMod.pages.DataView = js.native
    
    @JSName("Pages$DataViewActionButton")
    var Pages$DataViewActionButton: DataViewActionButton = js.native
    
    @JSName("Pages$DataViewCancelButton")
    var Pages$DataViewCancelButton: DataViewCancelButton = js.native
    
    @JSName("Pages$DataViewCloseButton")
    var Pages$DataViewCloseButton: DataViewCloseButton = js.native
    
    @JSName("Pages$DataViewControlBar")
    var Pages$DataViewControlBar: DataViewControlBar = js.native
    
    @JSName("Pages$DataViewSaveButton")
    var Pages$DataViewSaveButton: DataViewSaveButton = js.native
    
    @JSName("Pages$DataViewSource")
    var Pages$DataViewSource: DataViewSource = js.native
    
    @JSName("Pages$DatabaseConstraint")
    var Pages$DatabaseConstraint: DatabaseConstraint = js.native
    
    @JSName("Pages$DatePicker")
    var Pages$DatePicker: DatePicker = js.native
    
    @JSName("Pages$DeleteClientAction")
    var Pages$DeleteClientAction: DeleteClientAction = js.native
    
    @JSName("Pages$DesignPropertyValue")
    var Pages$DesignPropertyValue: DesignPropertyValue = js.native
    
    @JSName("Pages$DivContainer")
    var Pages$DivContainer: DivContainer = js.native
    
    @JSName("Pages$DropDown")
    var Pages$DropDown: DropDown = js.native
    
    @JSName("Pages$DropDownButton")
    var Pages$DropDownButton: DropDownButton = js.native
    
    @JSName("Pages$DropDownButtonItem")
    var Pages$DropDownButtonItem: DropDownButtonItem = js.native
    
    @JSName("Pages$DropDownSearchField")
    var Pages$DropDownSearchField: DropDownSearchField = js.native
    
    @JSName("Pages$DynamicImageViewer")
    var Pages$DynamicImageViewer: typingsSlinky.mendixmodelsdk.pagesMod.pages.DynamicImageViewer = js.native
    
    @JSName("Pages$DynamicText")
    var Pages$DynamicText: DynamicText = js.native
    
    @JSName("Pages$EditPageTemplateType")
    var Pages$EditPageTemplateType: EditPageTemplateType = js.native
    
    @JSName("Pages$FileManager")
    var Pages$FileManager: FileManager = js.native
    
    @JSName("Pages$FormattingInfo")
    var Pages$FormattingInfo: FormattingInfo = js.native
    
    @JSName("Pages$GlyphIcon")
    var Pages$GlyphIcon: GlyphIcon = js.native
    
    @JSName("Pages$GridActionButton")
    var Pages$GridActionButton: GridActionButton = js.native
    
    @JSName("Pages$GridColumn")
    var Pages$GridColumn: GridColumn = js.native
    
    @JSName("Pages$GridControlBar")
    var Pages$GridControlBar: GridControlBar = js.native
    
    @JSName("Pages$GridDatabaseSource")
    var Pages$GridDatabaseSource: GridDatabaseSource = js.native
    
    @JSName("Pages$GridDeleteButton")
    var Pages$GridDeleteButton: GridDeleteButton = js.native
    
    @JSName("Pages$GridDeselectAllButton")
    var Pages$GridDeselectAllButton: GridDeselectAllButton = js.native
    
    @JSName("Pages$GridEditButton")
    var Pages$GridEditButton: GridEditButton = js.native
    
    @JSName("Pages$GridNewButton")
    var Pages$GridNewButton: GridNewButton = js.native
    
    @JSName("Pages$GridSearchButton")
    var Pages$GridSearchButton: GridSearchButton = js.native
    
    @JSName("Pages$GridSelectAllButton")
    var Pages$GridSelectAllButton: GridSelectAllButton = js.native
    
    @JSName("Pages$GridSortBar")
    var Pages$GridSortBar: typingsSlinky.mendixmodelsdk.pagesMod.pages.GridSortBar = js.native
    
    @JSName("Pages$GridSortItem")
    var Pages$GridSortItem: typingsSlinky.mendixmodelsdk.pagesMod.pages.GridSortItem = js.native
    
    @JSName("Pages$GridXPathSource")
    var Pages$GridXPathSource: GridXPathSource = js.native
    
    @JSName("Pages$GroupBox")
    var Pages$GroupBox: GroupBox = js.native
    
    @JSName("Pages$Header")
    var Pages$Header: typingsSlinky.mendixmodelsdk.pagesMod.pages.Header = js.native
    
    @JSName("Pages$HorizontalSplitPane")
    var Pages$HorizontalSplitPane: HorizontalSplitPane = js.native
    
    @JSName("Pages$ImageIcon")
    var Pages$ImageIcon: ImageIcon = js.native
    
    @JSName("Pages$ImageUploader")
    var Pages$ImageUploader: ImageUploader = js.native
    
    @JSName("Pages$ImageViewerSource")
    var Pages$ImageViewerSource: ImageViewerSource = js.native
    
    @JSName("Pages$InputReferenceSetSelector")
    var Pages$InputReferenceSetSelector: InputReferenceSetSelector = js.native
    
    @JSName("Pages$Label")
    var Pages$Label: Label = js.native
    
    @JSName("Pages$LayoutCall")
    var Pages$LayoutCall: LayoutCall = js.native
    
    @JSName("Pages$LayoutCallArgument")
    var Pages$LayoutCallArgument: LayoutCallArgument = js.native
    
    @JSName("Pages$LayoutGrid")
    var Pages$LayoutGrid: LayoutGrid = js.native
    
    @JSName("Pages$LayoutGridColumn")
    var Pages$LayoutGridColumn: LayoutGridColumn = js.native
    
    @JSName("Pages$LayoutGridRow")
    var Pages$LayoutGridRow: LayoutGridRow = js.native
    
    @JSName("Pages$LayoutParameter")
    var Pages$LayoutParameter: LayoutParameter = js.native
    
    @JSName("Pages$LinkButton")
    var Pages$LinkButton: LinkButton = js.native
    
    @JSName("Pages$ListView")
    var Pages$ListView: ListView = js.native
    
    @JSName("Pages$ListViewDatabaseSource")
    var Pages$ListViewDatabaseSource: ListViewDatabaseSource = js.native
    
    @JSName("Pages$ListViewSearch")
    var Pages$ListViewSearch: ListViewSearch = js.native
    
    @JSName("Pages$ListViewTemplate")
    var Pages$ListViewTemplate: ListViewTemplate = js.native
    
    @JSName("Pages$ListViewXPathSource")
    var Pages$ListViewXPathSource: ListViewXPathSource = js.native
    
    @JSName("Pages$ListenTargetSource")
    var Pages$ListenTargetSource: ListenTargetSource = js.native
    
    @JSName("Pages$LoginButton")
    var Pages$LoginButton: LoginButton = js.native
    
    @JSName("Pages$LoginIdTextBox")
    var Pages$LoginIdTextBox: LoginIdTextBox = js.native
    
    @JSName("Pages$LogoutButton")
    var Pages$LogoutButton: LogoutButton = js.native
    
    @JSName("Pages$MasterDetail")
    var Pages$MasterDetail: MasterDetail = js.native
    
    @JSName("Pages$MasterDetailDetailRegion")
    var Pages$MasterDetailDetailRegion: MasterDetailDetailRegion = js.native
    
    @JSName("Pages$MasterDetailMasterRegion")
    var Pages$MasterDetailMasterRegion: MasterDetailMasterRegion = js.native
    
    @JSName("Pages$MenuBar")
    var Pages$MenuBar: MenuBar = js.native
    
    @JSName("Pages$MenuDocumentSource")
    var Pages$MenuDocumentSource: MenuDocumentSource = js.native
    
    @JSName("Pages$MicroflowClientAction")
    var Pages$MicroflowClientAction: MicroflowClientAction = js.native
    
    @JSName("Pages$MicroflowParameterMapping")
    var Pages$MicroflowParameterMapping: MicroflowParameterMapping = js.native
    
    @JSName("Pages$MicroflowSettings")
    var Pages$MicroflowSettings: MicroflowSettings = js.native
    
    @JSName("Pages$MicroflowSource")
    var Pages$MicroflowSource: MicroflowSource = js.native
    
    @JSName("Pages$NanoflowParameterMapping")
    var Pages$NanoflowParameterMapping: NanoflowParameterMapping = js.native
    
    @JSName("Pages$NanoflowSource")
    var Pages$NanoflowSource: NanoflowSource = js.native
    
    @JSName("Pages$NativeLayoutContent")
    var Pages$NativeLayoutContent: NativeLayoutContent = js.native
    
    @JSName("Pages$NavigationList")
    var Pages$NavigationList: NavigationList = js.native
    
    @JSName("Pages$NavigationListItem")
    var Pages$NavigationListItem: NavigationListItem = js.native
    
    @JSName("Pages$NavigationSource")
    var Pages$NavigationSource: NavigationSource = js.native
    
    @JSName("Pages$NavigationTree")
    var Pages$NavigationTree: NavigationTree = js.native
    
    @JSName("Pages$NewButton")
    var Pages$NewButton: NewButton = js.native
    
    @JSName("Pages$NoClientAction")
    var Pages$NoClientAction: NoClientAction = js.native
    
    @JSName("Pages$OfflineSchema")
    var Pages$OfflineSchema: OfflineSchema = js.native
    
    @JSName("Pages$OfflineSchemaFetchInstruction")
    var Pages$OfflineSchemaFetchInstruction: OfflineSchemaFetchInstruction = js.native
    
    @JSName("Pages$OnClickEnlarge")
    var Pages$OnClickEnlarge: OnClickEnlarge = js.native
    
    @JSName("Pages$OnClickMicroflow")
    var Pages$OnClickMicroflow: OnClickMicroflow = js.native
    
    @JSName("Pages$OnClickNothing")
    var Pages$OnClickNothing: OnClickNothing = js.native
    
    @JSName("Pages$OpenLinkClientAction")
    var Pages$OpenLinkClientAction: OpenLinkClientAction = js.native
    
    @JSName("Pages$OpenUserTaskClientAction")
    var Pages$OpenUserTaskClientAction: OpenUserTaskClientAction = js.native
    
    @JSName("Pages$OpenWorkflowClientAction")
    var Pages$OpenWorkflowClientAction: OpenWorkflowClientAction = js.native
    
    @JSName("Pages$PageClientAction")
    var Pages$PageClientAction: PageClientAction = js.native
    
    @JSName("Pages$PageForSpecialization")
    var Pages$PageForSpecialization: PageForSpecialization = js.native
    
    @JSName("Pages$PageSettings")
    var Pages$PageSettings: PageSettings = js.native
    
    @JSName("Pages$PageVariable")
    var Pages$PageVariable: PageVariable = js.native
    
    @JSName("Pages$PasswordTextBox")
    var Pages$PasswordTextBox: PasswordTextBox = js.native
    
    @JSName("Pages$Placeholder")
    var Pages$Placeholder: Placeholder = js.native
    
    @JSName("Pages$RadioButtonGroup")
    var Pages$RadioButtonGroup: RadioButtonGroup = js.native
    
    @JSName("Pages$RangeSearchField")
    var Pages$RangeSearchField: RangeSearchField = js.native
    
    @JSName("Pages$ReferenceSelector")
    var Pages$ReferenceSelector: ReferenceSelector = js.native
    
    @JSName("Pages$ReferenceSetSelector")
    var Pages$ReferenceSetSelector: ReferenceSetSelector = js.native
    
    @JSName("Pages$ReferenceSetSource")
    var Pages$ReferenceSetSource: ReferenceSetSource = js.native
    
    @JSName("Pages$RegularPageTemplateType")
    var Pages$RegularPageTemplateType: RegularPageTemplateType = js.native
    
    @JSName("Pages$RetrievalQuery")
    var Pages$RetrievalQuery: RetrievalQuery = js.native
    
    @JSName("Pages$RetrievalQueryParameter")
    var Pages$RetrievalQueryParameter: RetrievalQueryParameter = js.native
    
    @JSName("Pages$RetrievalSchema")
    var Pages$RetrievalSchema: RetrievalSchema = js.native
    
    @JSName("Pages$SaveButton")
    var Pages$SaveButton: SaveButton = js.native
    
    @JSName("Pages$SaveChangesClientAction")
    var Pages$SaveChangesClientAction: SaveChangesClientAction = js.native
    
    @JSName("Pages$ScrollContainer")
    var Pages$ScrollContainer: ScrollContainer = js.native
    
    @JSName("Pages$ScrollContainerRegion")
    var Pages$ScrollContainerRegion: ScrollContainerRegion = js.native
    
    @JSName("Pages$SearchBar")
    var Pages$SearchBar: SearchBar = js.native
    
    @JSName("Pages$SelectButton")
    var Pages$SelectButton: SelectButton = js.native
    
    @JSName("Pages$SelectPageTemplateType")
    var Pages$SelectPageTemplateType: SelectPageTemplateType = js.native
    
    @JSName("Pages$SelectorDatabaseSource")
    var Pages$SelectorDatabaseSource: SelectorDatabaseSource = js.native
    
    @JSName("Pages$SelectorMicroflowSource")
    var Pages$SelectorMicroflowSource: SelectorMicroflowSource = js.native
    
    @JSName("Pages$SelectorXPathSource")
    var Pages$SelectorXPathSource: SelectorXPathSource = js.native
    
    @JSName("Pages$SetTaskOutcomeClientAction")
    var Pages$SetTaskOutcomeClientAction: SetTaskOutcomeClientAction = js.native
    
    @JSName("Pages$SidebarToggleButton")
    var Pages$SidebarToggleButton: SidebarToggleButton = js.native
    
    @JSName("Pages$SignOutClientAction")
    var Pages$SignOutClientAction: SignOutClientAction = js.native
    
    @JSName("Pages$SimpleMenuBar")
    var Pages$SimpleMenuBar: SimpleMenuBar = js.native
    
    @JSName("Pages$SnippetCall")
    var Pages$SnippetCall: SnippetCall = js.native
    
    @JSName("Pages$SnippetCallWidget")
    var Pages$SnippetCallWidget: SnippetCallWidget = js.native
    
    @JSName("Pages$StaticImageViewer")
    var Pages$StaticImageViewer: typingsSlinky.mendixmodelsdk.pagesMod.pages.StaticImageViewer = js.native
    
    @JSName("Pages$StaticOrDynamicString")
    var Pages$StaticOrDynamicString: StaticOrDynamicString = js.native
    
    @JSName("Pages$SyncButton")
    var Pages$SyncButton: SyncButton = js.native
    
    @JSName("Pages$SyncClientAction")
    var Pages$SyncClientAction: SyncClientAction = js.native
    
    @JSName("Pages$TabContainer")
    var Pages$TabContainer: TabContainer = js.native
    
    @JSName("Pages$TabPage")
    var Pages$TabPage: TabPage = js.native
    
    @JSName("Pages$Table")
    var Pages$Table: typingsSlinky.mendixmodelsdk.pagesMod.pages.Table = js.native
    
    @JSName("Pages$TableCell")
    var Pages$TableCell: typingsSlinky.mendixmodelsdk.pagesMod.pages.TableCell = js.native
    
    @JSName("Pages$TableColumn")
    var Pages$TableColumn: TableColumn = js.native
    
    @JSName("Pages$TableRow")
    var Pages$TableRow: typingsSlinky.mendixmodelsdk.pagesMod.pages.TableRow = js.native
    
    @JSName("Pages$TemplateGrid")
    var Pages$TemplateGrid: typingsSlinky.mendixmodelsdk.pagesMod.pages.TemplateGrid = js.native
    
    @JSName("Pages$TemplateGridContents")
    var Pages$TemplateGridContents: typingsSlinky.mendixmodelsdk.pagesMod.pages.TemplateGridContents = js.native
    
    @JSName("Pages$TemplatePlaceholder")
    var Pages$TemplatePlaceholder: TemplatePlaceholder = js.native
    
    @JSName("Pages$TextArea")
    var Pages$TextArea: TextArea = js.native
    
    @JSName("Pages$TextBox")
    var Pages$TextBox: TextBox = js.native
    
    @JSName("Pages$Title")
    var Pages$Title: typingsSlinky.mendixmodelsdk.pagesMod.pages.Title = js.native
    
    @JSName("Pages$UserTaskTemplateType")
    var Pages$UserTaskTemplateType: UserTaskTemplateType = js.native
    
    @JSName("Pages$ValidationMessage")
    var Pages$ValidationMessage: ValidationMessage = js.native
    
    @JSName("Pages$VerticalFlow")
    var Pages$VerticalFlow: VerticalFlow = js.native
    
    @JSName("Pages$VerticalSplitPane")
    var Pages$VerticalSplitPane: VerticalSplitPane = js.native
    
    @JSName("Pages$WebLayoutContent")
    var Pages$WebLayoutContent: WebLayoutContent = js.native
    
    @JSName("Pages$WidgetValidation")
    var Pages$WidgetValidation: WidgetValidation = js.native
    
    @JSName("Pages$WorkflowOverviewTemplateType")
    var Pages$WorkflowOverviewTemplateType: WorkflowOverviewTemplateType = js.native
    
    @JSName("Projects$OneTimeConversionMarker")
    var Projects$OneTimeConversionMarker: OneTimeConversionMarker = js.native
    
    @JSName("Reports$BasicReport")
    var Reports$BasicReport: BasicReport = js.native
    
    @JSName("Reports$BasicReportAggregate")
    var Reports$BasicReportAggregate: BasicReportAggregate = js.native
    
    @JSName("Reports$BasicReportColumn")
    var Reports$BasicReportColumn: BasicReportColumn = js.native
    
    @JSName("Reports$ReportButton")
    var Reports$ReportButton: ReportButton = js.native
    
    @JSName("Reports$ReportChart")
    var Reports$ReportChart: ReportChart = js.native
    
    @JSName("Reports$ReportChartSeries")
    var Reports$ReportChartSeries: ReportChartSeries = js.native
    
    @JSName("Reports$ReportDateRangeField")
    var Reports$ReportDateRangeField: ReportDateRangeField = js.native
    
    @JSName("Reports$ReportDateRangeSelector")
    var Reports$ReportDateRangeSelector: ReportDateRangeSelector = js.native
    
    @JSName("Reports$ReportDropDown")
    var Reports$ReportDropDown: ReportDropDown = js.native
    
    @JSName("Reports$ReportPane")
    var Reports$ReportPane: ReportPane = js.native
    
    @JSName("Reports$ReportZoomInfo")
    var Reports$ReportZoomInfo: ReportZoomInfo = js.native
    
    @JSName("Reports$ReportZoomMapping")
    var Reports$ReportZoomMapping: ReportZoomMapping = js.native
    
    @JSName("Rest$CorsConfiguration")
    var Rest$CorsConfiguration: CorsConfiguration = js.native
    
    @JSName("Rest$MetadataReference")
    var Rest$MetadataReference: MetadataReference = js.native
    
    @JSName("Rest$ODataKey")
    var Rest$ODataKey: ODataKey = js.native
    
    @JSName("Rest$ODataKeyPart")
    var Rest$ODataKeyPart: ODataKeyPart = js.native
    
    @JSName("Rest$ODataMappedValue")
    var Rest$ODataMappedValue: ODataMappedValue = js.native
    
    @JSName("Rest$ODataRemoteAssociationSource")
    var Rest$ODataRemoteAssociationSource: ODataRemoteAssociationSource = js.native
    
    @JSName("Rest$ODataRemoteEntitySource")
    var Rest$ODataRemoteEntitySource: ODataRemoteEntitySource = js.native
    
    @JSName("Rest$PublishedRestResource")
    var Rest$PublishedRestResource: PublishedRestResource = js.native
    
    @JSName("Rest$PublishedRestServiceOperation")
    var Rest$PublishedRestServiceOperation: PublishedRestServiceOperation = js.native
    
    @JSName("Rest$PublishedRestServiceResource")
    var Rest$PublishedRestServiceResource: PublishedRestServiceResource = js.native
    
    @JSName("Rest$RestOperationParameter")
    var Rest$RestOperationParameter: RestOperationParameter = js.native
    
    @JSName("Security$DemoUser")
    var Security$DemoUser: DemoUser = js.native
    
    @JSName("Security$FileDocumentAccessRuleContainer")
    var Security$FileDocumentAccessRuleContainer: FileDocumentAccessRuleContainer = js.native
    
    @JSName("Security$ImageAccessRuleContainer")
    var Security$ImageAccessRuleContainer: ImageAccessRuleContainer = js.native
    
    @JSName("Security$ModuleRole")
    var Security$ModuleRole: ModuleRole = js.native
    
    @JSName("Security$PasswordPolicySettings")
    var Security$PasswordPolicySettings: PasswordPolicySettings = js.native
    
    @JSName("Security$UserRole")
    var Security$UserRole: UserRole = js.native
    
    @JSName("Settings$ActionActivityDefaultColor")
    var Settings$ActionActivityDefaultColor: ActionActivityDefaultColor = js.native
    
    @JSName("Settings$Certificate")
    var Settings$Certificate: Certificate = js.native
    
    @JSName("Settings$CertificateSettings")
    var Settings$CertificateSettings: CertificateSettings = js.native
    
    @JSName("Settings$Configuration")
    var Settings$Configuration: Configuration = js.native
    
    @JSName("Settings$ConfigurationSettings")
    var Settings$ConfigurationSettings: ConfigurationSettings = js.native
    
    @JSName("Settings$ConstantValue")
    var Settings$ConstantValue: ConstantValue = js.native
    
    @JSName("Settings$CustomSetting")
    var Settings$CustomSetting: CustomSetting = js.native
    
    @JSName("Settings$IntegrationProjectSettingsPart")
    var Settings$IntegrationProjectSettingsPart: IntegrationProjectSettingsPart = js.native
    
    @JSName("Settings$JavaActionsSettings")
    var Settings$JavaActionsSettings: JavaActionsSettings = js.native
    
    @JSName("Settings$Language")
    var Settings$Language: Language = js.native
    
    @JSName("Settings$LanguageSettings")
    var Settings$LanguageSettings: LanguageSettings = js.native
    
    @JSName("Settings$ModelerSettings")
    var Settings$ModelerSettings: ModelerSettings = js.native
    
    @JSName("Settings$RuntimeSettings")
    var Settings$RuntimeSettings: RuntimeSettings = js.native
    
    @JSName("Settings$WebUIProjectSettingsPart")
    var Settings$WebUIProjectSettingsPart: WebUIProjectSettingsPart = js.native
    
    @JSName("Settings$WorkflowsProjectSettingsPart")
    var Settings$WorkflowsProjectSettingsPart: WorkflowsProjectSettingsPart = js.native
    
    @JSName("Texts$SystemText")
    var Texts$SystemText: SystemText = js.native
    
    @JSName("Texts$Text")
    var Texts$Text: Text = js.native
    
    @JSName("Texts$Translation")
    var Texts$Translation: Translation = js.native
    
    @JSName("WebServices$DataAssociation")
    var WebServices$DataAssociation: DataAssociation = js.native
    
    @JSName("WebServices$DataAttribute")
    var WebServices$DataAttribute: DataAttribute = js.native
    
    @JSName("WebServices$DataEntity")
    var WebServices$DataEntity: DataEntity = js.native
    
    @JSName("WebServices$OperationInfo")
    var WebServices$OperationInfo: OperationInfo = js.native
    
    @JSName("WebServices$PartEncoding")
    var WebServices$PartEncoding: PartEncoding = js.native
    
    @JSName("WebServices$PublishedOperation")
    var WebServices$PublishedOperation: PublishedOperation = js.native
    
    @JSName("WebServices$PublishedParameter")
    var WebServices$PublishedParameter: PublishedParameter = js.native
    
    @JSName("WebServices$RpcMessagePartElement")
    var WebServices$RpcMessagePartElement: RpcMessagePartElement = js.native
    
    @JSName("WebServices$RpcOperationElement")
    var WebServices$RpcOperationElement: RpcOperationElement = js.native
    
    @JSName("WebServices$ServiceInfo")
    var WebServices$ServiceInfo: ServiceInfo = js.native
    
    @JSName("WebServices$SystemIdDataAttribute")
    var WebServices$SystemIdDataAttribute: SystemIdDataAttribute = js.native
    
    @JSName("WebServices$VersionedService")
    var WebServices$VersionedService: VersionedService = js.native
    
    @JSName("WebServices$WsdlDescription")
    var WebServices$WsdlDescription: WsdlDescription = js.native
    
    @JSName("WebServices$WsdlEntry")
    var WebServices$WsdlEntry: WsdlEntry = js.native
    
    @JSName("Workflows$BooleanSplitOutcome")
    var Workflows$BooleanSplitOutcome: BooleanSplitOutcome = js.native
    
    @JSName("Workflows$CallMicroflowTask")
    var Workflows$CallMicroflowTask: CallMicroflowTask = js.native
    
    @JSName("Workflows$CallWorkflowActivity")
    var Workflows$CallWorkflowActivity: CallWorkflowActivity = js.native
    
    @JSName("Workflows$EndWorkflowActivity")
    var Workflows$EndWorkflowActivity: EndWorkflowActivity = js.native
    
    @JSName("Workflows$EnumerationValueSplitOutcome")
    var Workflows$EnumerationValueSplitOutcome: EnumerationValueSplitOutcome = js.native
    
    @JSName("Workflows$ExclusiveSplitActivity")
    var Workflows$ExclusiveSplitActivity: ExclusiveSplitActivity = js.native
    
    @JSName("Workflows$Flow")
    var Workflows$Flow: Flow = js.native
    
    @JSName("Workflows$ParallelSplitActivity")
    var Workflows$ParallelSplitActivity: ParallelSplitActivity = js.native
    
    @JSName("Workflows$ParallelSplitOutcome")
    var Workflows$ParallelSplitOutcome: ParallelSplitOutcome = js.native
    
    @JSName("Workflows$UserTask")
    var Workflows$UserTask: UserTask = js.native
    
    @JSName("Workflows$WorkflowTaskOutcome")
    var Workflows$WorkflowTaskOutcome: WorkflowTaskOutcome = js.native
    
    @JSName("Workflows$XPathBasedUserSource")
    var Workflows$XPathBasedUserSource: XPathBasedUserSource = js.native
    
    @JSName("XmlSchemas$XmlElement")
    var XmlSchemas$XmlElement: XmlElement = js.native
    
    @JSName("XmlSchemas$XmlSchemaEntry")
    var XmlSchemas$XmlSchemaEntry: XmlSchemaEntry = js.native
  }
  object ConcreteModelElements {
    
    @scala.inline
    def apply(
      AppServices$AppServiceAction: AppServiceAction,
      AppServices$AppServiceActionParameter: AppServiceActionParameter,
      AppServices$Msd: Msd,
      AppServices$MsdAssociation: MsdAssociation,
      AppServices$MsdAttribute: MsdAttribute,
      AppServices$MsdDomainModel: MsdDomainModel,
      AppServices$MsdEntity: MsdEntity,
      AppServices$MsdEnumeration: MsdEnumeration,
      AppServices$MsdEnumerationContainer: MsdEnumerationContainer,
      AppServices$MsdEnumerationValue: MsdEnumerationValue,
      AppServices$MsdMetadata: MsdMetadata,
      AppServices$MsdMicroflow: MsdMicroflow,
      AppServices$MsdMicroflowParameter: MsdMicroflowParameter,
      AppServices$MsdText: MsdText,
      AppServices$MsdVersion: MsdVersion,
      CodeActions$BasicParameterType: BasicParameterType,
      CodeActions$BooleanType: BooleanType,
      CodeActions$ConcreteEntityType: ConcreteEntityType,
      CodeActions$DateTimeType: DateTimeType,
      CodeActions$DecimalType: DecimalType,
      CodeActions$EntityTypeParameterType: EntityTypeParameterType,
      CodeActions$EnumerationType: EnumerationType,
      CodeActions$FloatType: FloatType,
      CodeActions$IntegerType: IntegerType,
      CodeActions$ListType: ListType,
      CodeActions$MicroflowActionInfo: MicroflowActionInfo,
      CodeActions$ParameterizedEntityType: ParameterizedEntityType,
      CodeActions$StringTemplateParameterType: StringTemplateParameterType,
      CodeActions$StringType: StringType,
      CodeActions$TypeParameter: TypeParameter,
      CodeActions$VoidType: VoidType,
      CustomWidgets$CustomWidget: CustomWidget,
      CustomWidgets$CustomWidgetDatabaseSource: CustomWidgetDatabaseSource,
      CustomWidgets$CustomWidgetType: CustomWidgetType,
      CustomWidgets$CustomWidgetXPathSource: CustomWidgetXPathSource,
      CustomWidgets$WidgetEnumerationValue: WidgetEnumerationValue,
      CustomWidgets$WidgetObject: WidgetObject,
      CustomWidgets$WidgetObjectType: WidgetObjectType,
      CustomWidgets$WidgetProperty: WidgetProperty,
      CustomWidgets$WidgetPropertyType: WidgetPropertyType,
      CustomWidgets$WidgetReturnType: WidgetReturnType,
      CustomWidgets$WidgetTranslation: WidgetTranslation,
      CustomWidgets$WidgetValue: WidgetValue,
      CustomWidgets$WidgetValueType: WidgetValueType,
      DataSets$DataSetAccess: DataSetAccess,
      DataSets$DataSetColumn: DataSetColumn,
      DataSets$DataSetConstraintAccess: DataSetConstraintAccess,
      DataSets$DataSetDateTimeConstraint: DataSetDateTimeConstraint,
      DataSets$DataSetModuleRoleAccess: DataSetModuleRoleAccess,
      DataSets$DataSetNumericConstraint: DataSetNumericConstraint,
      DataSets$DataSetObjectConstraint: DataSetObjectConstraint,
      DataSets$DataSetParameter: DataSetParameter,
      DataSets$DataSetParameterAccess: DataSetParameterAccess,
      DataSets$JavaDataSetSource: JavaDataSetSource,
      DataSets$OqlDataSetSource: OqlDataSetSource,
      DataTypes$BinaryType: BinaryType,
      DataTypes$BooleanType: typingsSlinky.mendixmodelsdk.datatypesMod.datatypes.BooleanType,
      DataTypes$DateTimeType: typingsSlinky.mendixmodelsdk.datatypesMod.datatypes.DateTimeType,
      DataTypes$DecimalType: typingsSlinky.mendixmodelsdk.datatypesMod.datatypes.DecimalType,
      DataTypes$EmptyType: EmptyType,
      DataTypes$EnumerationType: typingsSlinky.mendixmodelsdk.datatypesMod.datatypes.EnumerationType,
      DataTypes$FloatType: typingsSlinky.mendixmodelsdk.datatypesMod.datatypes.FloatType,
      DataTypes$IntegerType: typingsSlinky.mendixmodelsdk.datatypesMod.datatypes.IntegerType,
      DataTypes$ListType: typingsSlinky.mendixmodelsdk.datatypesMod.datatypes.ListType,
      DataTypes$ObjectType: ObjectType,
      DataTypes$StringType: typingsSlinky.mendixmodelsdk.datatypesMod.datatypes.StringType,
      DataTypes$UnknownType: UnknownType,
      DataTypes$VoidType: typingsSlinky.mendixmodelsdk.datatypesMod.datatypes.VoidType,
      DocumentTemplates$ConditionSettings: ConditionSettings,
      DocumentTemplates$DataGrid: DataGrid,
      DocumentTemplates$DataGridCell: DataGridCell,
      DocumentTemplates$DataGridColumn: DataGridColumn,
      DocumentTemplates$DataView: DataView,
      DocumentTemplates$DataViewContents: DataViewContents,
      DocumentTemplates$DocumentTemplateParameter: DocumentTemplateParameter,
      DocumentTemplates$DynamicImageViewer: DynamicImageViewer,
      DocumentTemplates$DynamicLabel: DynamicLabel,
      DocumentTemplates$Footer: Footer,
      DocumentTemplates$GridSortBar: GridSortBar,
      DocumentTemplates$GridSortItem: GridSortItem,
      DocumentTemplates$Header: Header,
      DocumentTemplates$LineBreak: LineBreak,
      DocumentTemplates$PageBreak: PageBreak,
      DocumentTemplates$StaticImageViewer: StaticImageViewer,
      DocumentTemplates$StaticLabel: StaticLabel,
      DocumentTemplates$Style: Style,
      DocumentTemplates$Table: Table,
      DocumentTemplates$TableCell: TableCell,
      DocumentTemplates$TableRow: TableRow,
      DocumentTemplates$TemplateGrid: TemplateGrid,
      DocumentTemplates$TemplateGridContents: TemplateGridContents,
      DocumentTemplates$Title: Title,
      DomainModels$AccessRule: AccessRule,
      DomainModels$Annotation: Annotation,
      DomainModels$Association: Association,
      DomainModels$AssociationCapabilities: AssociationCapabilities,
      DomainModels$AssociationDeleteBehavior: AssociationDeleteBehavior,
      DomainModels$AssociationRef: AssociationRef,
      DomainModels$Attribute: Attribute,
      DomainModels$AttributeCapabilities: AttributeCapabilities,
      DomainModels$AttributeRef: AttributeRef,
      DomainModels$AutoNumberAttributeType: AutoNumberAttributeType,
      DomainModels$BinaryAttributeType: BinaryAttributeType,
      DomainModels$BooleanAttributeType: BooleanAttributeType,
      DomainModels$CalculatedValue: CalculatedValue,
      DomainModels$CrossAssociation: CrossAssociation,
      DomainModels$CurrencyAttributeType: CurrencyAttributeType,
      DomainModels$DateTimeAttributeType: DateTimeAttributeType,
      DomainModels$DecimalAttributeType: DecimalAttributeType,
      DomainModels$DirectEntityRef: DirectEntityRef,
      DomainModels$Entity: Entity,
      DomainModels$EntityCapabilities: EntityCapabilities,
      DomainModels$EntityKey: EntityKey,
      DomainModels$EntityKeyPart: EntityKeyPart,
      DomainModels$EntityRefStep: EntityRefStep,
      DomainModels$EnumerationAttributeType: EnumerationAttributeType,
      DomainModels$EqualsToRuleInfo: EqualsToRuleInfo,
      DomainModels$EventHandler: EventHandler,
      DomainModels$FloatAttributeType: FloatAttributeType,
      DomainModels$Generalization: Generalization,
      DomainModels$HashedStringAttributeType: HashedStringAttributeType,
      DomainModels$Index: Index,
      DomainModels$IndexedAttribute: IndexedAttribute,
      DomainModels$IndirectEntityRef: IndirectEntityRef,
      DomainModels$IntegerAttributeType: IntegerAttributeType,
      DomainModels$LongAttributeType: LongAttributeType,
      DomainModels$MaxLengthRuleInfo: MaxLengthRuleInfo,
      DomainModels$MemberAccess: MemberAccess,
      DomainModels$NoGeneralization: NoGeneralization,
      DomainModels$RangeRuleInfo: RangeRuleInfo,
      DomainModels$RegExRuleInfo: RegExRuleInfo,
      DomainModels$RequiredRuleInfo: RequiredRuleInfo,
      DomainModels$StoredValue: StoredValue,
      DomainModels$StringAttributeType: StringAttributeType,
      DomainModels$UniqueRuleInfo: UniqueRuleInfo,
      DomainModels$ValidationRule: ValidationRule,
      Enumerations$Condition: Condition,
      Enumerations$EnumerationValue: EnumerationValue,
      ExportMappings$ExportObjectMappingElement: ExportObjectMappingElement,
      ExportMappings$ExportValueMappingElement: ExportValueMappingElement,
      Expressions$BinaryExpression: BinaryExpression,
      Expressions$BooleanLiteral: BooleanLiteral,
      Expressions$ConstantRefExpression: ConstantRefExpression,
      Expressions$EmptyLiteral: EmptyLiteral,
      Expressions$EnumerationValueRefExpression: EnumerationValueRefExpression,
      Expressions$FloatLiteral: FloatLiteral,
      Expressions$FunctionCallExpression: FunctionCallExpression,
      Expressions$GlobalVariableRef: GlobalVariableRef,
      Expressions$IfExpression: IfExpression,
      Expressions$IntegerLiteral: IntegerLiteral,
      Expressions$NoExpression: NoExpression,
      Expressions$NoVariableRef: NoVariableRef,
      Expressions$ParenthesisExpression: ParenthesisExpression,
      Expressions$StringLiteral: StringLiteral,
      Expressions$UnaryExpression: UnaryExpression,
      Expressions$UnparsableExpression: UnparsableExpression,
      Expressions$VariableRefExpression: VariableRefExpression,
      Images$Image: Image,
      ImportMappings$ImportObjectMappingElement: ImportObjectMappingElement,
      ImportMappings$ImportValueMappingElement: ImportValueMappingElement,
      JavaActions$BasicParameterType: typingsSlinky.mendixmodelsdk.javaactionsMod.javaactions.BasicParameterType,
      JavaActions$BooleanType: typingsSlinky.mendixmodelsdk.javaactionsMod.javaactions.BooleanType,
      JavaActions$ConcreteEntityType: typingsSlinky.mendixmodelsdk.javaactionsMod.javaactions.ConcreteEntityType,
      JavaActions$DateTimeType: typingsSlinky.mendixmodelsdk.javaactionsMod.javaactions.DateTimeType,
      JavaActions$DecimalType: typingsSlinky.mendixmodelsdk.javaactionsMod.javaactions.DecimalType,
      JavaActions$EntityTypeParameterType: typingsSlinky.mendixmodelsdk.javaactionsMod.javaactions.EntityTypeParameterType,
      JavaActions$EnumerationType: typingsSlinky.mendixmodelsdk.javaactionsMod.javaactions.EnumerationType,
      JavaActions$ExportMappingJavaActionParameterType: ExportMappingJavaActionParameterType,
      JavaActions$ExportMappingParameterType: ExportMappingParameterType,
      JavaActions$FloatType: typingsSlinky.mendixmodelsdk.javaactionsMod.javaactions.FloatType,
      JavaActions$ImportMappingJavaActionParameterType: ImportMappingJavaActionParameterType,
      JavaActions$ImportMappingParameterType: ImportMappingParameterType,
      JavaActions$IntegerType: typingsSlinky.mendixmodelsdk.javaactionsMod.javaactions.IntegerType,
      JavaActions$JavaActionParameter: JavaActionParameter,
      JavaActions$ListType: typingsSlinky.mendixmodelsdk.javaactionsMod.javaactions.ListType,
      JavaActions$MicroflowActionInfo: typingsSlinky.mendixmodelsdk.javaactionsMod.javaactions.MicroflowActionInfo,
      JavaActions$MicroflowJavaActionParameterType: MicroflowJavaActionParameterType,
      JavaActions$MicroflowParameterType: MicroflowParameterType,
      JavaActions$ParameterizedEntityType: typingsSlinky.mendixmodelsdk.javaactionsMod.javaactions.ParameterizedEntityType,
      JavaActions$StringType: typingsSlinky.mendixmodelsdk.javaactionsMod.javaactions.StringType,
      JavaActions$TypeParameter: typingsSlinky.mendixmodelsdk.javaactionsMod.javaactions.TypeParameter,
      JavaScriptActions$JavaScriptActionParameter: JavaScriptActionParameter,
      JavaScriptActions$NanoflowJavaScriptActionParameterType: NanoflowJavaScriptActionParameterType,
      JsonStructures$JsonElement: JsonElement,
      Kafka$KafkaMappedValue: KafkaMappedValue,
      Kafka$KafkaRemoteEntitySource: KafkaRemoteEntitySource,
      Kafka$PublishedKafkaResource: PublishedKafkaResource,
      Mappings$MappingMicroflowCall: MappingMicroflowCall,
      Mappings$MappingMicroflowParameter: MappingMicroflowParameter,
      Menus$MenuItem: MenuItem,
      Menus$MenuItemCollection: MenuItemCollection,
      MessageDefinitions$AssociationElement: AssociationElement,
      MessageDefinitions$AttributeElement: AttributeElement,
      MessageDefinitions$EntityElement: EntityElement,
      MessageDefinitions$EntityMessageDefinition: EntityMessageDefinition,
      MessageDefinitions$ExposedAssociation: ExposedAssociation,
      MessageDefinitions$ExposedAttribute: ExposedAttribute,
      MessageDefinitions$ExposedEntity: ExposedEntity,
      Microflows$ActionActivity: ActionActivity,
      Microflows$AdvancedRequestHandling: AdvancedRequestHandling,
      Microflows$AggregateListAction: AggregateListAction,
      Microflows$Annotation: typingsSlinky.mendixmodelsdk.microflowsMod.microflows.Annotation,
      Microflows$AnnotationFlow: AnnotationFlow,
      Microflows$AppServiceCallAction: AppServiceCallAction,
      Microflows$AppServiceCallParameterMapping: AppServiceCallParameterMapping,
      Microflows$AssociationRetrieveSource: AssociationRetrieveSource,
      Microflows$BasicCodeActionParameterValue: BasicCodeActionParameterValue,
      Microflows$BasicJavaActionParameterValue: BasicJavaActionParameterValue,
      Microflows$BinaryRequestHandling: BinaryRequestHandling,
      Microflows$BreakEvent: BreakEvent,
      Microflows$CastAction: CastAction,
      Microflows$ChangeListAction: ChangeListAction,
      Microflows$ChangeObjectAction: ChangeObjectAction,
      Microflows$ChangeVariableAction: ChangeVariableAction,
      Microflows$CloseFormAction: CloseFormAction,
      Microflows$CommitAction: CommitAction,
      Microflows$ConstantRange: ConstantRange,
      Microflows$Contains: Contains,
      Microflows$ContinueEvent: ContinueEvent,
      Microflows$CreateListAction: CreateListAction,
      Microflows$CreateObjectAction: CreateObjectAction,
      Microflows$CreateVariableAction: CreateVariableAction,
      Microflows$CustomRange: CustomRange,
      Microflows$CustomRequestHandling: CustomRequestHandling,
      Microflows$DatabaseRetrieveSource: DatabaseRetrieveSource,
      Microflows$DeleteAction: DeleteAction,
      Microflows$DocumentTemplateParameterMapping: DocumentTemplateParameterMapping,
      Microflows$DownloadFileAction: DownloadFileAction,
      Microflows$EndEvent: EndEvent,
      Microflows$EntityTypeCodeActionParameterValue: EntityTypeCodeActionParameterValue,
      Microflows$EntityTypeJavaActionParameterValue: EntityTypeJavaActionParameterValue,
      Microflows$EnumerationCase: EnumerationCase,
      Microflows$ErrorEvent: ErrorEvent,
      Microflows$ExclusiveMerge: ExclusiveMerge,
      Microflows$ExclusiveSplit: ExclusiveSplit,
      Microflows$ExportMappingJavaActionParameterValue: ExportMappingJavaActionParameterValue,
      Microflows$ExportMappingParameterValue: ExportMappingParameterValue,
      Microflows$ExportXmlAction: ExportXmlAction,
      Microflows$ExpressionSplitCondition: ExpressionSplitCondition,
      Microflows$FileDocumentExport: FileDocumentExport,
      Microflows$Filter: Filter,
      Microflows$Find: Find,
      Microflows$FormDataPart: FormDataPart,
      Microflows$FormDataRequestHandling: FormDataRequestHandling,
      Microflows$GenerateDocumentAction: GenerateDocumentAction,
      Microflows$Head: Head,
      Microflows$HttpConfiguration: HttpConfiguration,
      Microflows$HttpHeaderEntry: HttpHeaderEntry,
      Microflows$ImportMappingCall: ImportMappingCall,
      Microflows$ImportMappingJavaActionParameterValue: ImportMappingJavaActionParameterValue,
      Microflows$ImportMappingParameterValue: ImportMappingParameterValue,
      Microflows$ImportXmlAction: ImportXmlAction,
      Microflows$InheritanceCase: InheritanceCase,
      Microflows$InheritanceSplit: InheritanceSplit
    ): ConcreteModelElements = {
      val __obj = js.Dynamic.literal(AppServices$AppServiceAction = AppServices$AppServiceAction.asInstanceOf[js.Any], AppServices$AppServiceActionParameter = AppServices$AppServiceActionParameter.asInstanceOf[js.Any], AppServices$Msd = AppServices$Msd.asInstanceOf[js.Any], AppServices$MsdAssociation = AppServices$MsdAssociation.asInstanceOf[js.Any], AppServices$MsdAttribute = AppServices$MsdAttribute.asInstanceOf[js.Any], AppServices$MsdDomainModel = AppServices$MsdDomainModel.asInstanceOf[js.Any], AppServices$MsdEntity = AppServices$MsdEntity.asInstanceOf[js.Any], AppServices$MsdEnumeration = AppServices$MsdEnumeration.asInstanceOf[js.Any], AppServices$MsdEnumerationContainer = AppServices$MsdEnumerationContainer.asInstanceOf[js.Any], AppServices$MsdEnumerationValue = AppServices$MsdEnumerationValue.asInstanceOf[js.Any], AppServices$MsdMetadata = AppServices$MsdMetadata.asInstanceOf[js.Any], AppServices$MsdMicroflow = AppServices$MsdMicroflow.asInstanceOf[js.Any], AppServices$MsdMicroflowParameter = AppServices$MsdMicroflowParameter.asInstanceOf[js.Any], AppServices$MsdText = AppServices$MsdText.asInstanceOf[js.Any], AppServices$MsdVersion = AppServices$MsdVersion.asInstanceOf[js.Any], CodeActions$BasicParameterType = CodeActions$BasicParameterType.asInstanceOf[js.Any], CodeActions$BooleanType = CodeActions$BooleanType.asInstanceOf[js.Any], CodeActions$ConcreteEntityType = CodeActions$ConcreteEntityType.asInstanceOf[js.Any], CodeActions$DateTimeType = CodeActions$DateTimeType.asInstanceOf[js.Any], CodeActions$DecimalType = CodeActions$DecimalType.asInstanceOf[js.Any], CodeActions$EntityTypeParameterType = CodeActions$EntityTypeParameterType.asInstanceOf[js.Any], CodeActions$EnumerationType = CodeActions$EnumerationType.asInstanceOf[js.Any], CodeActions$FloatType = CodeActions$FloatType.asInstanceOf[js.Any], CodeActions$IntegerType = CodeActions$IntegerType.asInstanceOf[js.Any], CodeActions$ListType = CodeActions$ListType.asInstanceOf[js.Any], CodeActions$MicroflowActionInfo = CodeActions$MicroflowActionInfo.asInstanceOf[js.Any], CodeActions$ParameterizedEntityType = CodeActions$ParameterizedEntityType.asInstanceOf[js.Any], CodeActions$StringTemplateParameterType = CodeActions$StringTemplateParameterType.asInstanceOf[js.Any], CodeActions$StringType = CodeActions$StringType.asInstanceOf[js.Any], CodeActions$TypeParameter = CodeActions$TypeParameter.asInstanceOf[js.Any], CodeActions$VoidType = CodeActions$VoidType.asInstanceOf[js.Any], CustomWidgets$CustomWidget = CustomWidgets$CustomWidget.asInstanceOf[js.Any], CustomWidgets$CustomWidgetDatabaseSource = CustomWidgets$CustomWidgetDatabaseSource.asInstanceOf[js.Any], CustomWidgets$CustomWidgetType = CustomWidgets$CustomWidgetType.asInstanceOf[js.Any], CustomWidgets$CustomWidgetXPathSource = CustomWidgets$CustomWidgetXPathSource.asInstanceOf[js.Any], CustomWidgets$WidgetEnumerationValue = CustomWidgets$WidgetEnumerationValue.asInstanceOf[js.Any], CustomWidgets$WidgetObject = CustomWidgets$WidgetObject.asInstanceOf[js.Any], CustomWidgets$WidgetObjectType = CustomWidgets$WidgetObjectType.asInstanceOf[js.Any], CustomWidgets$WidgetProperty = CustomWidgets$WidgetProperty.asInstanceOf[js.Any], CustomWidgets$WidgetPropertyType = CustomWidgets$WidgetPropertyType.asInstanceOf[js.Any], CustomWidgets$WidgetReturnType = CustomWidgets$WidgetReturnType.asInstanceOf[js.Any], CustomWidgets$WidgetTranslation = CustomWidgets$WidgetTranslation.asInstanceOf[js.Any], CustomWidgets$WidgetValue = CustomWidgets$WidgetValue.asInstanceOf[js.Any], CustomWidgets$WidgetValueType = CustomWidgets$WidgetValueType.asInstanceOf[js.Any], DataSets$DataSetAccess = DataSets$DataSetAccess.asInstanceOf[js.Any], DataSets$DataSetColumn = DataSets$DataSetColumn.asInstanceOf[js.Any], DataSets$DataSetConstraintAccess = DataSets$DataSetConstraintAccess.asInstanceOf[js.Any], DataSets$DataSetDateTimeConstraint = DataSets$DataSetDateTimeConstraint.asInstanceOf[js.Any], DataSets$DataSetModuleRoleAccess = DataSets$DataSetModuleRoleAccess.asInstanceOf[js.Any], DataSets$DataSetNumericConstraint = DataSets$DataSetNumericConstraint.asInstanceOf[js.Any], DataSets$DataSetObjectConstraint = DataSets$DataSetObjectConstraint.asInstanceOf[js.Any], DataSets$DataSetParameter = DataSets$DataSetParameter.asInstanceOf[js.Any], DataSets$DataSetParameterAccess = DataSets$DataSetParameterAccess.asInstanceOf[js.Any], DataSets$JavaDataSetSource = DataSets$JavaDataSetSource.asInstanceOf[js.Any], DataSets$OqlDataSetSource = DataSets$OqlDataSetSource.asInstanceOf[js.Any], DataTypes$BinaryType = DataTypes$BinaryType.asInstanceOf[js.Any], DataTypes$BooleanType = DataTypes$BooleanType.asInstanceOf[js.Any], DataTypes$DateTimeType = DataTypes$DateTimeType.asInstanceOf[js.Any], DataTypes$DecimalType = DataTypes$DecimalType.asInstanceOf[js.Any], DataTypes$EmptyType = DataTypes$EmptyType.asInstanceOf[js.Any], DataTypes$EnumerationType = DataTypes$EnumerationType.asInstanceOf[js.Any], DataTypes$FloatType = DataTypes$FloatType.asInstanceOf[js.Any], DataTypes$IntegerType = DataTypes$IntegerType.asInstanceOf[js.Any], DataTypes$ListType = DataTypes$ListType.asInstanceOf[js.Any], DataTypes$ObjectType = DataTypes$ObjectType.asInstanceOf[js.Any], DataTypes$StringType = DataTypes$StringType.asInstanceOf[js.Any], DataTypes$UnknownType = DataTypes$UnknownType.asInstanceOf[js.Any], DataTypes$VoidType = DataTypes$VoidType.asInstanceOf[js.Any], DocumentTemplates$ConditionSettings = DocumentTemplates$ConditionSettings.asInstanceOf[js.Any], DocumentTemplates$DataGrid = DocumentTemplates$DataGrid.asInstanceOf[js.Any], DocumentTemplates$DataGridCell = DocumentTemplates$DataGridCell.asInstanceOf[js.Any], DocumentTemplates$DataGridColumn = DocumentTemplates$DataGridColumn.asInstanceOf[js.Any], DocumentTemplates$DataView = DocumentTemplates$DataView.asInstanceOf[js.Any], DocumentTemplates$DataViewContents = DocumentTemplates$DataViewContents.asInstanceOf[js.Any], DocumentTemplates$DocumentTemplateParameter = DocumentTemplates$DocumentTemplateParameter.asInstanceOf[js.Any], DocumentTemplates$DynamicImageViewer = DocumentTemplates$DynamicImageViewer.asInstanceOf[js.Any], DocumentTemplates$DynamicLabel = DocumentTemplates$DynamicLabel.asInstanceOf[js.Any], DocumentTemplates$Footer = DocumentTemplates$Footer.asInstanceOf[js.Any], DocumentTemplates$GridSortBar = DocumentTemplates$GridSortBar.asInstanceOf[js.Any], DocumentTemplates$GridSortItem = DocumentTemplates$GridSortItem.asInstanceOf[js.Any], DocumentTemplates$Header = DocumentTemplates$Header.asInstanceOf[js.Any], DocumentTemplates$LineBreak = DocumentTemplates$LineBreak.asInstanceOf[js.Any], DocumentTemplates$PageBreak = DocumentTemplates$PageBreak.asInstanceOf[js.Any], DocumentTemplates$StaticImageViewer = DocumentTemplates$StaticImageViewer.asInstanceOf[js.Any], DocumentTemplates$StaticLabel = DocumentTemplates$StaticLabel.asInstanceOf[js.Any], DocumentTemplates$Style = DocumentTemplates$Style.asInstanceOf[js.Any], DocumentTemplates$Table = DocumentTemplates$Table.asInstanceOf[js.Any], DocumentTemplates$TableCell = DocumentTemplates$TableCell.asInstanceOf[js.Any], DocumentTemplates$TableRow = DocumentTemplates$TableRow.asInstanceOf[js.Any], DocumentTemplates$TemplateGrid = DocumentTemplates$TemplateGrid.asInstanceOf[js.Any], DocumentTemplates$TemplateGridContents = DocumentTemplates$TemplateGridContents.asInstanceOf[js.Any], DocumentTemplates$Title = DocumentTemplates$Title.asInstanceOf[js.Any], DomainModels$AccessRule = DomainModels$AccessRule.asInstanceOf[js.Any], DomainModels$Annotation = DomainModels$Annotation.asInstanceOf[js.Any], DomainModels$Association = DomainModels$Association.asInstanceOf[js.Any], DomainModels$AssociationCapabilities = DomainModels$AssociationCapabilities.asInstanceOf[js.Any], DomainModels$AssociationDeleteBehavior = DomainModels$AssociationDeleteBehavior.asInstanceOf[js.Any], DomainModels$AssociationRef = DomainModels$AssociationRef.asInstanceOf[js.Any], DomainModels$Attribute = DomainModels$Attribute.asInstanceOf[js.Any], DomainModels$AttributeCapabilities = DomainModels$AttributeCapabilities.asInstanceOf[js.Any], DomainModels$AttributeRef = DomainModels$AttributeRef.asInstanceOf[js.Any], DomainModels$AutoNumberAttributeType = DomainModels$AutoNumberAttributeType.asInstanceOf[js.Any], DomainModels$BinaryAttributeType = DomainModels$BinaryAttributeType.asInstanceOf[js.Any], DomainModels$BooleanAttributeType = DomainModels$BooleanAttributeType.asInstanceOf[js.Any], DomainModels$CalculatedValue = DomainModels$CalculatedValue.asInstanceOf[js.Any], DomainModels$CrossAssociation = DomainModels$CrossAssociation.asInstanceOf[js.Any], DomainModels$CurrencyAttributeType = DomainModels$CurrencyAttributeType.asInstanceOf[js.Any], DomainModels$DateTimeAttributeType = DomainModels$DateTimeAttributeType.asInstanceOf[js.Any], DomainModels$DecimalAttributeType = DomainModels$DecimalAttributeType.asInstanceOf[js.Any], DomainModels$DirectEntityRef = DomainModels$DirectEntityRef.asInstanceOf[js.Any], DomainModels$Entity = DomainModels$Entity.asInstanceOf[js.Any], DomainModels$EntityCapabilities = DomainModels$EntityCapabilities.asInstanceOf[js.Any], DomainModels$EntityKey = DomainModels$EntityKey.asInstanceOf[js.Any], DomainModels$EntityKeyPart = DomainModels$EntityKeyPart.asInstanceOf[js.Any], DomainModels$EntityRefStep = DomainModels$EntityRefStep.asInstanceOf[js.Any], DomainModels$EnumerationAttributeType = DomainModels$EnumerationAttributeType.asInstanceOf[js.Any], DomainModels$EqualsToRuleInfo = DomainModels$EqualsToRuleInfo.asInstanceOf[js.Any], DomainModels$EventHandler = DomainModels$EventHandler.asInstanceOf[js.Any], DomainModels$FloatAttributeType = DomainModels$FloatAttributeType.asInstanceOf[js.Any], DomainModels$Generalization = DomainModels$Generalization.asInstanceOf[js.Any], DomainModels$HashedStringAttributeType = DomainModels$HashedStringAttributeType.asInstanceOf[js.Any], DomainModels$Index = DomainModels$Index.asInstanceOf[js.Any], DomainModels$IndexedAttribute = DomainModels$IndexedAttribute.asInstanceOf[js.Any], DomainModels$IndirectEntityRef = DomainModels$IndirectEntityRef.asInstanceOf[js.Any], DomainModels$IntegerAttributeType = DomainModels$IntegerAttributeType.asInstanceOf[js.Any], DomainModels$LongAttributeType = DomainModels$LongAttributeType.asInstanceOf[js.Any], DomainModels$MaxLengthRuleInfo = DomainModels$MaxLengthRuleInfo.asInstanceOf[js.Any], DomainModels$MemberAccess = DomainModels$MemberAccess.asInstanceOf[js.Any], DomainModels$NoGeneralization = DomainModels$NoGeneralization.asInstanceOf[js.Any], DomainModels$RangeRuleInfo = DomainModels$RangeRuleInfo.asInstanceOf[js.Any], DomainModels$RegExRuleInfo = DomainModels$RegExRuleInfo.asInstanceOf[js.Any], DomainModels$RequiredRuleInfo = DomainModels$RequiredRuleInfo.asInstanceOf[js.Any], DomainModels$StoredValue = DomainModels$StoredValue.asInstanceOf[js.Any], DomainModels$StringAttributeType = DomainModels$StringAttributeType.asInstanceOf[js.Any], DomainModels$UniqueRuleInfo = DomainModels$UniqueRuleInfo.asInstanceOf[js.Any], DomainModels$ValidationRule = DomainModels$ValidationRule.asInstanceOf[js.Any], Enumerations$Condition = Enumerations$Condition.asInstanceOf[js.Any], Enumerations$EnumerationValue = Enumerations$EnumerationValue.asInstanceOf[js.Any], ExportMappings$ExportObjectMappingElement = ExportMappings$ExportObjectMappingElement.asInstanceOf[js.Any], ExportMappings$ExportValueMappingElement = ExportMappings$ExportValueMappingElement.asInstanceOf[js.Any], Expressions$BinaryExpression = Expressions$BinaryExpression.asInstanceOf[js.Any], Expressions$BooleanLiteral = Expressions$BooleanLiteral.asInstanceOf[js.Any], Expressions$ConstantRefExpression = Expressions$ConstantRefExpression.asInstanceOf[js.Any], Expressions$EmptyLiteral = Expressions$EmptyLiteral.asInstanceOf[js.Any], Expressions$EnumerationValueRefExpression = Expressions$EnumerationValueRefExpression.asInstanceOf[js.Any], Expressions$FloatLiteral = Expressions$FloatLiteral.asInstanceOf[js.Any], Expressions$FunctionCallExpression = Expressions$FunctionCallExpression.asInstanceOf[js.Any], Expressions$GlobalVariableRef = Expressions$GlobalVariableRef.asInstanceOf[js.Any], Expressions$IfExpression = Expressions$IfExpression.asInstanceOf[js.Any], Expressions$IntegerLiteral = Expressions$IntegerLiteral.asInstanceOf[js.Any], Expressions$NoExpression = Expressions$NoExpression.asInstanceOf[js.Any], Expressions$NoVariableRef = Expressions$NoVariableRef.asInstanceOf[js.Any], Expressions$ParenthesisExpression = Expressions$ParenthesisExpression.asInstanceOf[js.Any], Expressions$StringLiteral = Expressions$StringLiteral.asInstanceOf[js.Any], Expressions$UnaryExpression = Expressions$UnaryExpression.asInstanceOf[js.Any], Expressions$UnparsableExpression = Expressions$UnparsableExpression.asInstanceOf[js.Any], Expressions$VariableRefExpression = Expressions$VariableRefExpression.asInstanceOf[js.Any], Images$Image = Images$Image.asInstanceOf[js.Any], ImportMappings$ImportObjectMappingElement = ImportMappings$ImportObjectMappingElement.asInstanceOf[js.Any], ImportMappings$ImportValueMappingElement = ImportMappings$ImportValueMappingElement.asInstanceOf[js.Any], JavaActions$BasicParameterType = JavaActions$BasicParameterType.asInstanceOf[js.Any], JavaActions$BooleanType = JavaActions$BooleanType.asInstanceOf[js.Any], JavaActions$ConcreteEntityType = JavaActions$ConcreteEntityType.asInstanceOf[js.Any], JavaActions$DateTimeType = JavaActions$DateTimeType.asInstanceOf[js.Any], JavaActions$DecimalType = JavaActions$DecimalType.asInstanceOf[js.Any], JavaActions$EntityTypeParameterType = JavaActions$EntityTypeParameterType.asInstanceOf[js.Any], JavaActions$EnumerationType = JavaActions$EnumerationType.asInstanceOf[js.Any], JavaActions$ExportMappingJavaActionParameterType = JavaActions$ExportMappingJavaActionParameterType.asInstanceOf[js.Any], JavaActions$ExportMappingParameterType = JavaActions$ExportMappingParameterType.asInstanceOf[js.Any], JavaActions$FloatType = JavaActions$FloatType.asInstanceOf[js.Any], JavaActions$ImportMappingJavaActionParameterType = JavaActions$ImportMappingJavaActionParameterType.asInstanceOf[js.Any], JavaActions$ImportMappingParameterType = JavaActions$ImportMappingParameterType.asInstanceOf[js.Any], JavaActions$IntegerType = JavaActions$IntegerType.asInstanceOf[js.Any], JavaActions$JavaActionParameter = JavaActions$JavaActionParameter.asInstanceOf[js.Any], JavaActions$ListType = JavaActions$ListType.asInstanceOf[js.Any], JavaActions$MicroflowActionInfo = JavaActions$MicroflowActionInfo.asInstanceOf[js.Any], JavaActions$MicroflowJavaActionParameterType = JavaActions$MicroflowJavaActionParameterType.asInstanceOf[js.Any], JavaActions$MicroflowParameterType = JavaActions$MicroflowParameterType.asInstanceOf[js.Any], JavaActions$ParameterizedEntityType = JavaActions$ParameterizedEntityType.asInstanceOf[js.Any], JavaActions$StringType = JavaActions$StringType.asInstanceOf[js.Any], JavaActions$TypeParameter = JavaActions$TypeParameter.asInstanceOf[js.Any], JavaScriptActions$JavaScriptActionParameter = JavaScriptActions$JavaScriptActionParameter.asInstanceOf[js.Any], JavaScriptActions$NanoflowJavaScriptActionParameterType = JavaScriptActions$NanoflowJavaScriptActionParameterType.asInstanceOf[js.Any], JsonStructures$JsonElement = JsonStructures$JsonElement.asInstanceOf[js.Any], Kafka$KafkaMappedValue = Kafka$KafkaMappedValue.asInstanceOf[js.Any], Kafka$KafkaRemoteEntitySource = Kafka$KafkaRemoteEntitySource.asInstanceOf[js.Any], Kafka$PublishedKafkaResource = Kafka$PublishedKafkaResource.asInstanceOf[js.Any], Mappings$MappingMicroflowCall = Mappings$MappingMicroflowCall.asInstanceOf[js.Any], Mappings$MappingMicroflowParameter = Mappings$MappingMicroflowParameter.asInstanceOf[js.Any], Menus$MenuItem = Menus$MenuItem.asInstanceOf[js.Any], Menus$MenuItemCollection = Menus$MenuItemCollection.asInstanceOf[js.Any], MessageDefinitions$AssociationElement = MessageDefinitions$AssociationElement.asInstanceOf[js.Any], MessageDefinitions$AttributeElement = MessageDefinitions$AttributeElement.asInstanceOf[js.Any], MessageDefinitions$EntityElement = MessageDefinitions$EntityElement.asInstanceOf[js.Any], MessageDefinitions$EntityMessageDefinition = MessageDefinitions$EntityMessageDefinition.asInstanceOf[js.Any], MessageDefinitions$ExposedAssociation = MessageDefinitions$ExposedAssociation.asInstanceOf[js.Any], MessageDefinitions$ExposedAttribute = MessageDefinitions$ExposedAttribute.asInstanceOf[js.Any], MessageDefinitions$ExposedEntity = MessageDefinitions$ExposedEntity.asInstanceOf[js.Any], Microflows$ActionActivity = Microflows$ActionActivity.asInstanceOf[js.Any], Microflows$AdvancedRequestHandling = Microflows$AdvancedRequestHandling.asInstanceOf[js.Any], Microflows$AggregateListAction = Microflows$AggregateListAction.asInstanceOf[js.Any], Microflows$Annotation = Microflows$Annotation.asInstanceOf[js.Any], Microflows$AnnotationFlow = Microflows$AnnotationFlow.asInstanceOf[js.Any], Microflows$AppServiceCallAction = Microflows$AppServiceCallAction.asInstanceOf[js.Any], Microflows$AppServiceCallParameterMapping = Microflows$AppServiceCallParameterMapping.asInstanceOf[js.Any], Microflows$AssociationRetrieveSource = Microflows$AssociationRetrieveSource.asInstanceOf[js.Any], Microflows$BasicCodeActionParameterValue = Microflows$BasicCodeActionParameterValue.asInstanceOf[js.Any], Microflows$BasicJavaActionParameterValue = Microflows$BasicJavaActionParameterValue.asInstanceOf[js.Any], Microflows$BinaryRequestHandling = Microflows$BinaryRequestHandling.asInstanceOf[js.Any], Microflows$BreakEvent = Microflows$BreakEvent.asInstanceOf[js.Any], Microflows$CastAction = Microflows$CastAction.asInstanceOf[js.Any], Microflows$ChangeListAction = Microflows$ChangeListAction.asInstanceOf[js.Any], Microflows$ChangeObjectAction = Microflows$ChangeObjectAction.asInstanceOf[js.Any], Microflows$ChangeVariableAction = Microflows$ChangeVariableAction.asInstanceOf[js.Any], Microflows$CloseFormAction = Microflows$CloseFormAction.asInstanceOf[js.Any], Microflows$CommitAction = Microflows$CommitAction.asInstanceOf[js.Any], Microflows$ConstantRange = Microflows$ConstantRange.asInstanceOf[js.Any], Microflows$Contains = Microflows$Contains.asInstanceOf[js.Any], Microflows$ContinueEvent = Microflows$ContinueEvent.asInstanceOf[js.Any], Microflows$CreateListAction = Microflows$CreateListAction.asInstanceOf[js.Any], Microflows$CreateObjectAction = Microflows$CreateObjectAction.asInstanceOf[js.Any], Microflows$CreateVariableAction = Microflows$CreateVariableAction.asInstanceOf[js.Any], Microflows$CustomRange = Microflows$CustomRange.asInstanceOf[js.Any], Microflows$CustomRequestHandling = Microflows$CustomRequestHandling.asInstanceOf[js.Any], Microflows$DatabaseRetrieveSource = Microflows$DatabaseRetrieveSource.asInstanceOf[js.Any], Microflows$DeleteAction = Microflows$DeleteAction.asInstanceOf[js.Any], Microflows$DocumentTemplateParameterMapping = Microflows$DocumentTemplateParameterMapping.asInstanceOf[js.Any], Microflows$DownloadFileAction = Microflows$DownloadFileAction.asInstanceOf[js.Any], Microflows$EndEvent = Microflows$EndEvent.asInstanceOf[js.Any], Microflows$EntityTypeCodeActionParameterValue = Microflows$EntityTypeCodeActionParameterValue.asInstanceOf[js.Any], Microflows$EntityTypeJavaActionParameterValue = Microflows$EntityTypeJavaActionParameterValue.asInstanceOf[js.Any], Microflows$EnumerationCase = Microflows$EnumerationCase.asInstanceOf[js.Any], Microflows$ErrorEvent = Microflows$ErrorEvent.asInstanceOf[js.Any], Microflows$ExclusiveMerge = Microflows$ExclusiveMerge.asInstanceOf[js.Any], Microflows$ExclusiveSplit = Microflows$ExclusiveSplit.asInstanceOf[js.Any], Microflows$ExportMappingJavaActionParameterValue = Microflows$ExportMappingJavaActionParameterValue.asInstanceOf[js.Any], Microflows$ExportMappingParameterValue = Microflows$ExportMappingParameterValue.asInstanceOf[js.Any], Microflows$ExportXmlAction = Microflows$ExportXmlAction.asInstanceOf[js.Any], Microflows$ExpressionSplitCondition = Microflows$ExpressionSplitCondition.asInstanceOf[js.Any], Microflows$FileDocumentExport = Microflows$FileDocumentExport.asInstanceOf[js.Any], Microflows$Filter = Microflows$Filter.asInstanceOf[js.Any], Microflows$Find = Microflows$Find.asInstanceOf[js.Any], Microflows$FormDataPart = Microflows$FormDataPart.asInstanceOf[js.Any], Microflows$FormDataRequestHandling = Microflows$FormDataRequestHandling.asInstanceOf[js.Any], Microflows$GenerateDocumentAction = Microflows$GenerateDocumentAction.asInstanceOf[js.Any], Microflows$Head = Microflows$Head.asInstanceOf[js.Any], Microflows$HttpConfiguration = Microflows$HttpConfiguration.asInstanceOf[js.Any], Microflows$HttpHeaderEntry = Microflows$HttpHeaderEntry.asInstanceOf[js.Any], Microflows$ImportMappingCall = Microflows$ImportMappingCall.asInstanceOf[js.Any], Microflows$ImportMappingJavaActionParameterValue = Microflows$ImportMappingJavaActionParameterValue.asInstanceOf[js.Any], Microflows$ImportMappingParameterValue = Microflows$ImportMappingParameterValue.asInstanceOf[js.Any], Microflows$ImportXmlAction = Microflows$ImportXmlAction.asInstanceOf[js.Any], Microflows$InheritanceCase = Microflows$InheritanceCase.asInstanceOf[js.Any], Microflows$InheritanceSplit = Microflows$InheritanceSplit.asInstanceOf[js.Any])
      __obj.asInstanceOf[ConcreteModelElements]
    }
    
    @scala.inline
    implicit class ConcreteModelElementsMutableBuilder[Self <: ConcreteModelElements] (val x: Self) extends AnyVal {
      
      @scala.inline
      def setAppServices$AppServiceAction(value: AppServiceAction): Self = StObject.set(x, "AppServices$AppServiceAction", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setAppServices$AppServiceActionParameter(value: AppServiceActionParameter): Self = StObject.set(x, "AppServices$AppServiceActionParameter", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setAppServices$Msd(value: Msd): Self = StObject.set(x, "AppServices$Msd", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setAppServices$MsdAssociation(value: MsdAssociation): Self = StObject.set(x, "AppServices$MsdAssociation", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setAppServices$MsdAttribute(value: MsdAttribute): Self = StObject.set(x, "AppServices$MsdAttribute", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setAppServices$MsdDomainModel(value: MsdDomainModel): Self = StObject.set(x, "AppServices$MsdDomainModel", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setAppServices$MsdEntity(value: MsdEntity): Self = StObject.set(x, "AppServices$MsdEntity", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setAppServices$MsdEnumeration(value: MsdEnumeration): Self = StObject.set(x, "AppServices$MsdEnumeration", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setAppServices$MsdEnumerationContainer(value: MsdEnumerationContainer): Self = StObject.set(x, "AppServices$MsdEnumerationContainer", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setAppServices$MsdEnumerationValue(value: MsdEnumerationValue): Self = StObject.set(x, "AppServices$MsdEnumerationValue", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setAppServices$MsdMetadata(value: MsdMetadata): Self = StObject.set(x, "AppServices$MsdMetadata", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setAppServices$MsdMicroflow(value: MsdMicroflow): Self = StObject.set(x, "AppServices$MsdMicroflow", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setAppServices$MsdMicroflowParameter(value: MsdMicroflowParameter): Self = StObject.set(x, "AppServices$MsdMicroflowParameter", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setAppServices$MsdText(value: MsdText): Self = StObject.set(x, "AppServices$MsdText", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setAppServices$MsdVersion(value: MsdVersion): Self = StObject.set(x, "AppServices$MsdVersion", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setCodeActions$BasicParameterType(value: BasicParameterType): Self = StObject.set(x, "CodeActions$BasicParameterType", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setCodeActions$BooleanType(value: BooleanType): Self = StObject.set(x, "CodeActions$BooleanType", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setCodeActions$ConcreteEntityType(value: ConcreteEntityType): Self = StObject.set(x, "CodeActions$ConcreteEntityType", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setCodeActions$DateTimeType(value: DateTimeType): Self = StObject.set(x, "CodeActions$DateTimeType", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setCodeActions$DecimalType(value: DecimalType): Self = StObject.set(x, "CodeActions$DecimalType", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setCodeActions$EntityTypeParameterType(value: EntityTypeParameterType): Self = StObject.set(x, "CodeActions$EntityTypeParameterType", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setCodeActions$EnumerationType(value: EnumerationType): Self = StObject.set(x, "CodeActions$EnumerationType", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setCodeActions$FloatType(value: FloatType): Self = StObject.set(x, "CodeActions$FloatType", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setCodeActions$IntegerType(value: IntegerType): Self = StObject.set(x, "CodeActions$IntegerType", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setCodeActions$ListType(value: ListType): Self = StObject.set(x, "CodeActions$ListType", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setCodeActions$MicroflowActionInfo(value: MicroflowActionInfo): Self = StObject.set(x, "CodeActions$MicroflowActionInfo", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setCodeActions$ParameterizedEntityType(value: ParameterizedEntityType): Self = StObject.set(x, "CodeActions$ParameterizedEntityType", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setCodeActions$StringTemplateParameterType(value: StringTemplateParameterType): Self = StObject.set(x, "CodeActions$StringTemplateParameterType", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setCodeActions$StringType(value: StringType): Self = StObject.set(x, "CodeActions$StringType", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setCodeActions$TypeParameter(value: TypeParameter): Self = StObject.set(x, "CodeActions$TypeParameter", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setCodeActions$VoidType(value: VoidType): Self = StObject.set(x, "CodeActions$VoidType", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setCustomWidgets$CustomWidget(value: CustomWidget): Self = StObject.set(x, "CustomWidgets$CustomWidget", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setCustomWidgets$CustomWidgetDatabaseSource(value: CustomWidgetDatabaseSource): Self = StObject.set(x, "CustomWidgets$CustomWidgetDatabaseSource", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setCustomWidgets$CustomWidgetType(value: CustomWidgetType): Self = StObject.set(x, "CustomWidgets$CustomWidgetType", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setCustomWidgets$CustomWidgetXPathSource(value: CustomWidgetXPathSource): Self = StObject.set(x, "CustomWidgets$CustomWidgetXPathSource", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setCustomWidgets$WidgetEnumerationValue(value: WidgetEnumerationValue): Self = StObject.set(x, "CustomWidgets$WidgetEnumerationValue", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setCustomWidgets$WidgetObject(value: WidgetObject): Self = StObject.set(x, "CustomWidgets$WidgetObject", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setCustomWidgets$WidgetObjectType(value: WidgetObjectType): Self = StObject.set(x, "CustomWidgets$WidgetObjectType", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setCustomWidgets$WidgetProperty(value: WidgetProperty): Self = StObject.set(x, "CustomWidgets$WidgetProperty", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setCustomWidgets$WidgetPropertyType(value: WidgetPropertyType): Self = StObject.set(x, "CustomWidgets$WidgetPropertyType", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setCustomWidgets$WidgetReturnType(value: WidgetReturnType): Self = StObject.set(x, "CustomWidgets$WidgetReturnType", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setCustomWidgets$WidgetTranslation(value: WidgetTranslation): Self = StObject.set(x, "CustomWidgets$WidgetTranslation", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setCustomWidgets$WidgetValue(value: WidgetValue): Self = StObject.set(x, "CustomWidgets$WidgetValue", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setCustomWidgets$WidgetValueType(value: WidgetValueType): Self = StObject.set(x, "CustomWidgets$WidgetValueType", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setDataSets$DataSetAccess(value: DataSetAccess): Self = StObject.set(x, "DataSets$DataSetAccess", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setDataSets$DataSetColumn(value: DataSetColumn): Self = StObject.set(x, "DataSets$DataSetColumn", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setDataSets$DataSetConstraintAccess(value: DataSetConstraintAccess): Self = StObject.set(x, "DataSets$DataSetConstraintAccess", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setDataSets$DataSetDateTimeConstraint(value: DataSetDateTimeConstraint): Self = StObject.set(x, "DataSets$DataSetDateTimeConstraint", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setDataSets$DataSetModuleRoleAccess(value: DataSetModuleRoleAccess): Self = StObject.set(x, "DataSets$DataSetModuleRoleAccess", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setDataSets$DataSetNumericConstraint(value: DataSetNumericConstraint): Self = StObject.set(x, "DataSets$DataSetNumericConstraint", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setDataSets$DataSetObjectConstraint(value: DataSetObjectConstraint): Self = StObject.set(x, "DataSets$DataSetObjectConstraint", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setDataSets$DataSetParameter(value: DataSetParameter): Self = StObject.set(x, "DataSets$DataSetParameter", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setDataSets$DataSetParameterAccess(value: DataSetParameterAccess): Self = StObject.set(x, "DataSets$DataSetParameterAccess", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setDataSets$JavaDataSetSource(value: JavaDataSetSource): Self = StObject.set(x, "DataSets$JavaDataSetSource", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setDataSets$OqlDataSetSource(value: OqlDataSetSource): Self = StObject.set(x, "DataSets$OqlDataSetSource", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setDataTypes$BinaryType(value: BinaryType): Self = StObject.set(x, "DataTypes$BinaryType", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setDataTypes$BooleanType(value: typingsSlinky.mendixmodelsdk.datatypesMod.datatypes.BooleanType): Self = StObject.set(x, "DataTypes$BooleanType", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setDataTypes$DateTimeType(value: typingsSlinky.mendixmodelsdk.datatypesMod.datatypes.DateTimeType): Self = StObject.set(x, "DataTypes$DateTimeType", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setDataTypes$DecimalType(value: typingsSlinky.mendixmodelsdk.datatypesMod.datatypes.DecimalType): Self = StObject.set(x, "DataTypes$DecimalType", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setDataTypes$EmptyType(value: EmptyType): Self = StObject.set(x, "DataTypes$EmptyType", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setDataTypes$EnumerationType(value: typingsSlinky.mendixmodelsdk.datatypesMod.datatypes.EnumerationType): Self = StObject.set(x, "DataTypes$EnumerationType", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setDataTypes$FloatType(value: typingsSlinky.mendixmodelsdk.datatypesMod.datatypes.FloatType): Self = StObject.set(x, "DataTypes$FloatType", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setDataTypes$IntegerType(value: typingsSlinky.mendixmodelsdk.datatypesMod.datatypes.IntegerType): Self = StObject.set(x, "DataTypes$IntegerType", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setDataTypes$ListType(value: typingsSlinky.mendixmodelsdk.datatypesMod.datatypes.ListType): Self = StObject.set(x, "DataTypes$ListType", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setDataTypes$ObjectType(value: ObjectType): Self = StObject.set(x, "DataTypes$ObjectType", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setDataTypes$StringType(value: typingsSlinky.mendixmodelsdk.datatypesMod.datatypes.StringType): Self = StObject.set(x, "DataTypes$StringType", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setDataTypes$UnknownType(value: UnknownType): Self = StObject.set(x, "DataTypes$UnknownType", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setDataTypes$VoidType(value: typingsSlinky.mendixmodelsdk.datatypesMod.datatypes.VoidType): Self = StObject.set(x, "DataTypes$VoidType", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setDocumentTemplates$ConditionSettings(value: ConditionSettings): Self = StObject.set(x, "DocumentTemplates$ConditionSettings", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setDocumentTemplates$DataGrid(value: DataGrid): Self = StObject.set(x, "DocumentTemplates$DataGrid", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setDocumentTemplates$DataGridCell(value: DataGridCell): Self = StObject.set(x, "DocumentTemplates$DataGridCell", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setDocumentTemplates$DataGridColumn(value: DataGridColumn): Self = StObject.set(x, "DocumentTemplates$DataGridColumn", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setDocumentTemplates$DataView(value: DataView): Self = StObject.set(x, "DocumentTemplates$DataView", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setDocumentTemplates$DataViewContents(value: DataViewContents): Self = StObject.set(x, "DocumentTemplates$DataViewContents", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setDocumentTemplates$DocumentTemplateParameter(value: DocumentTemplateParameter): Self = StObject.set(x, "DocumentTemplates$DocumentTemplateParameter", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setDocumentTemplates$DynamicImageViewer(value: DynamicImageViewer): Self = StObject.set(x, "DocumentTemplates$DynamicImageViewer", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setDocumentTemplates$DynamicLabel(value: DynamicLabel): Self = StObject.set(x, "DocumentTemplates$DynamicLabel", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setDocumentTemplates$Footer(value: Footer): Self = StObject.set(x, "DocumentTemplates$Footer", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setDocumentTemplates$GridSortBar(value: GridSortBar): Self = StObject.set(x, "DocumentTemplates$GridSortBar", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setDocumentTemplates$GridSortItem(value: GridSortItem): Self = StObject.set(x, "DocumentTemplates$GridSortItem", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setDocumentTemplates$Header(value: Header): Self = StObject.set(x, "DocumentTemplates$Header", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setDocumentTemplates$LineBreak(value: LineBreak): Self = StObject.set(x, "DocumentTemplates$LineBreak", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setDocumentTemplates$PageBreak(value: PageBreak): Self = StObject.set(x, "DocumentTemplates$PageBreak", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setDocumentTemplates$StaticImageViewer(value: StaticImageViewer): Self = StObject.set(x, "DocumentTemplates$StaticImageViewer", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setDocumentTemplates$StaticLabel(value: StaticLabel): Self = StObject.set(x, "DocumentTemplates$StaticLabel", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setDocumentTemplates$Style(value: Style): Self = StObject.set(x, "DocumentTemplates$Style", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setDocumentTemplates$Table(value: Table): Self = StObject.set(x, "DocumentTemplates$Table", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setDocumentTemplates$TableCell(value: TableCell): Self = StObject.set(x, "DocumentTemplates$TableCell", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setDocumentTemplates$TableRow(value: TableRow): Self = StObject.set(x, "DocumentTemplates$TableRow", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setDocumentTemplates$TemplateGrid(value: TemplateGrid): Self = StObject.set(x, "DocumentTemplates$TemplateGrid", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setDocumentTemplates$TemplateGridContents(value: TemplateGridContents): Self = StObject.set(x, "DocumentTemplates$TemplateGridContents", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setDocumentTemplates$Title(value: Title): Self = StObject.set(x, "DocumentTemplates$Title", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setDomainModels$AccessRule(value: AccessRule): Self = StObject.set(x, "DomainModels$AccessRule", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setDomainModels$Annotation(value: Annotation): Self = StObject.set(x, "DomainModels$Annotation", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setDomainModels$Association(value: Association): Self = StObject.set(x, "DomainModels$Association", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setDomainModels$AssociationCapabilities(value: AssociationCapabilities): Self = StObject.set(x, "DomainModels$AssociationCapabilities", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setDomainModels$AssociationDeleteBehavior(value: AssociationDeleteBehavior): Self = StObject.set(x, "DomainModels$AssociationDeleteBehavior", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setDomainModels$AssociationRef(value: AssociationRef): Self = StObject.set(x, "DomainModels$AssociationRef", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setDomainModels$Attribute(value: Attribute): Self = StObject.set(x, "DomainModels$Attribute", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setDomainModels$AttributeCapabilities(value: AttributeCapabilities): Self = StObject.set(x, "DomainModels$AttributeCapabilities", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setDomainModels$AttributeRef(value: AttributeRef): Self = StObject.set(x, "DomainModels$AttributeRef", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setDomainModels$AutoNumberAttributeType(value: AutoNumberAttributeType): Self = StObject.set(x, "DomainModels$AutoNumberAttributeType", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setDomainModels$BinaryAttributeType(value: BinaryAttributeType): Self = StObject.set(x, "DomainModels$BinaryAttributeType", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setDomainModels$BooleanAttributeType(value: BooleanAttributeType): Self = StObject.set(x, "DomainModels$BooleanAttributeType", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setDomainModels$CalculatedValue(value: CalculatedValue): Self = StObject.set(x, "DomainModels$CalculatedValue", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setDomainModels$CrossAssociation(value: CrossAssociation): Self = StObject.set(x, "DomainModels$CrossAssociation", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setDomainModels$CurrencyAttributeType(value: CurrencyAttributeType): Self = StObject.set(x, "DomainModels$CurrencyAttributeType", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setDomainModels$DateTimeAttributeType(value: DateTimeAttributeType): Self = StObject.set(x, "DomainModels$DateTimeAttributeType", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setDomainModels$DecimalAttributeType(value: DecimalAttributeType): Self = StObject.set(x, "DomainModels$DecimalAttributeType", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setDomainModels$DirectEntityRef(value: DirectEntityRef): Self = StObject.set(x, "DomainModels$DirectEntityRef", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setDomainModels$Entity(value: Entity): Self = StObject.set(x, "DomainModels$Entity", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setDomainModels$EntityCapabilities(value: EntityCapabilities): Self = StObject.set(x, "DomainModels$EntityCapabilities", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setDomainModels$EntityKey(value: EntityKey): Self = StObject.set(x, "DomainModels$EntityKey", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setDomainModels$EntityKeyPart(value: EntityKeyPart): Self = StObject.set(x, "DomainModels$EntityKeyPart", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setDomainModels$EntityRefStep(value: EntityRefStep): Self = StObject.set(x, "DomainModels$EntityRefStep", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setDomainModels$EnumerationAttributeType(value: EnumerationAttributeType): Self = StObject.set(x, "DomainModels$EnumerationAttributeType", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setDomainModels$EqualsToRuleInfo(value: EqualsToRuleInfo): Self = StObject.set(x, "DomainModels$EqualsToRuleInfo", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setDomainModels$EventHandler(value: EventHandler): Self = StObject.set(x, "DomainModels$EventHandler", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setDomainModels$FloatAttributeType(value: FloatAttributeType): Self = StObject.set(x, "DomainModels$FloatAttributeType", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setDomainModels$Generalization(value: Generalization): Self = StObject.set(x, "DomainModels$Generalization", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setDomainModels$HashedStringAttributeType(value: HashedStringAttributeType): Self = StObject.set(x, "DomainModels$HashedStringAttributeType", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setDomainModels$Index(value: Index): Self = StObject.set(x, "DomainModels$Index", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setDomainModels$IndexedAttribute(value: IndexedAttribute): Self = StObject.set(x, "DomainModels$IndexedAttribute", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setDomainModels$IndirectEntityRef(value: IndirectEntityRef): Self = StObject.set(x, "DomainModels$IndirectEntityRef", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setDomainModels$IntegerAttributeType(value: IntegerAttributeType): Self = StObject.set(x, "DomainModels$IntegerAttributeType", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setDomainModels$LongAttributeType(value: LongAttributeType): Self = StObject.set(x, "DomainModels$LongAttributeType", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setDomainModels$MaxLengthRuleInfo(value: MaxLengthRuleInfo): Self = StObject.set(x, "DomainModels$MaxLengthRuleInfo", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setDomainModels$MemberAccess(value: MemberAccess): Self = StObject.set(x, "DomainModels$MemberAccess", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setDomainModels$NoGeneralization(value: NoGeneralization): Self = StObject.set(x, "DomainModels$NoGeneralization", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setDomainModels$RangeRuleInfo(value: RangeRuleInfo): Self = StObject.set(x, "DomainModels$RangeRuleInfo", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setDomainModels$RegExRuleInfo(value: RegExRuleInfo): Self = StObject.set(x, "DomainModels$RegExRuleInfo", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setDomainModels$RequiredRuleInfo(value: RequiredRuleInfo): Self = StObject.set(x, "DomainModels$RequiredRuleInfo", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setDomainModels$StoredValue(value: StoredValue): Self = StObject.set(x, "DomainModels$StoredValue", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setDomainModels$StringAttributeType(value: StringAttributeType): Self = StObject.set(x, "DomainModels$StringAttributeType", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setDomainModels$UniqueRuleInfo(value: UniqueRuleInfo): Self = StObject.set(x, "DomainModels$UniqueRuleInfo", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setDomainModels$ValidationRule(value: ValidationRule): Self = StObject.set(x, "DomainModels$ValidationRule", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setEnumerations$Condition(value: Condition): Self = StObject.set(x, "Enumerations$Condition", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setEnumerations$EnumerationValue(value: EnumerationValue): Self = StObject.set(x, "Enumerations$EnumerationValue", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setExportMappings$ExportObjectMappingElement(value: ExportObjectMappingElement): Self = StObject.set(x, "ExportMappings$ExportObjectMappingElement", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setExportMappings$ExportValueMappingElement(value: ExportValueMappingElement): Self = StObject.set(x, "ExportMappings$ExportValueMappingElement", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setExpressions$BinaryExpression(value: BinaryExpression): Self = StObject.set(x, "Expressions$BinaryExpression", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setExpressions$BooleanLiteral(value: BooleanLiteral): Self = StObject.set(x, "Expressions$BooleanLiteral", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setExpressions$ConstantRefExpression(value: ConstantRefExpression): Self = StObject.set(x, "Expressions$ConstantRefExpression", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setExpressions$EmptyLiteral(value: EmptyLiteral): Self = StObject.set(x, "Expressions$EmptyLiteral", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setExpressions$EnumerationValueRefExpression(value: EnumerationValueRefExpression): Self = StObject.set(x, "Expressions$EnumerationValueRefExpression", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setExpressions$FloatLiteral(value: FloatLiteral): Self = StObject.set(x, "Expressions$FloatLiteral", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setExpressions$FunctionCallExpression(value: FunctionCallExpression): Self = StObject.set(x, "Expressions$FunctionCallExpression", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setExpressions$GlobalVariableRef(value: GlobalVariableRef): Self = StObject.set(x, "Expressions$GlobalVariableRef", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setExpressions$IfExpression(value: IfExpression): Self = StObject.set(x, "Expressions$IfExpression", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setExpressions$IntegerLiteral(value: IntegerLiteral): Self = StObject.set(x, "Expressions$IntegerLiteral", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setExpressions$NoExpression(value: NoExpression): Self = StObject.set(x, "Expressions$NoExpression", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setExpressions$NoVariableRef(value: NoVariableRef): Self = StObject.set(x, "Expressions$NoVariableRef", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setExpressions$ParenthesisExpression(value: ParenthesisExpression): Self = StObject.set(x, "Expressions$ParenthesisExpression", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setExpressions$StringLiteral(value: StringLiteral): Self = StObject.set(x, "Expressions$StringLiteral", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setExpressions$UnaryExpression(value: UnaryExpression): Self = StObject.set(x, "Expressions$UnaryExpression", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setExpressions$UnparsableExpression(value: UnparsableExpression): Self = StObject.set(x, "Expressions$UnparsableExpression", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setExpressions$VariableRefExpression(value: VariableRefExpression): Self = StObject.set(x, "Expressions$VariableRefExpression", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setImages$Image(value: Image): Self = StObject.set(x, "Images$Image", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setImportMappings$ImportObjectMappingElement(value: ImportObjectMappingElement): Self = StObject.set(x, "ImportMappings$ImportObjectMappingElement", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setImportMappings$ImportValueMappingElement(value: ImportValueMappingElement): Self = StObject.set(x, "ImportMappings$ImportValueMappingElement", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setJavaActions$BasicParameterType(value: typingsSlinky.mendixmodelsdk.javaactionsMod.javaactions.BasicParameterType): Self = StObject.set(x, "JavaActions$BasicParameterType", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setJavaActions$BooleanType(value: typingsSlinky.mendixmodelsdk.javaactionsMod.javaactions.BooleanType): Self = StObject.set(x, "JavaActions$BooleanType", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setJavaActions$ConcreteEntityType(value: typingsSlinky.mendixmodelsdk.javaactionsMod.javaactions.ConcreteEntityType): Self = StObject.set(x, "JavaActions$ConcreteEntityType", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setJavaActions$DateTimeType(value: typingsSlinky.mendixmodelsdk.javaactionsMod.javaactions.DateTimeType): Self = StObject.set(x, "JavaActions$DateTimeType", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setJavaActions$DecimalType(value: typingsSlinky.mendixmodelsdk.javaactionsMod.javaactions.DecimalType): Self = StObject.set(x, "JavaActions$DecimalType", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setJavaActions$EntityTypeParameterType(value: typingsSlinky.mendixmodelsdk.javaactionsMod.javaactions.EntityTypeParameterType): Self = StObject.set(x, "JavaActions$EntityTypeParameterType", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setJavaActions$EnumerationType(value: typingsSlinky.mendixmodelsdk.javaactionsMod.javaactions.EnumerationType): Self = StObject.set(x, "JavaActions$EnumerationType", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setJavaActions$ExportMappingJavaActionParameterType(value: ExportMappingJavaActionParameterType): Self = StObject.set(x, "JavaActions$ExportMappingJavaActionParameterType", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setJavaActions$ExportMappingParameterType(value: ExportMappingParameterType): Self = StObject.set(x, "JavaActions$ExportMappingParameterType", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setJavaActions$FloatType(value: typingsSlinky.mendixmodelsdk.javaactionsMod.javaactions.FloatType): Self = StObject.set(x, "JavaActions$FloatType", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setJavaActions$ImportMappingJavaActionParameterType(value: ImportMappingJavaActionParameterType): Self = StObject.set(x, "JavaActions$ImportMappingJavaActionParameterType", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setJavaActions$ImportMappingParameterType(value: ImportMappingParameterType): Self = StObject.set(x, "JavaActions$ImportMappingParameterType", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setJavaActions$IntegerType(value: typingsSlinky.mendixmodelsdk.javaactionsMod.javaactions.IntegerType): Self = StObject.set(x, "JavaActions$IntegerType", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setJavaActions$JavaActionParameter(value: JavaActionParameter): Self = StObject.set(x, "JavaActions$JavaActionParameter", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setJavaActions$ListType(value: typingsSlinky.mendixmodelsdk.javaactionsMod.javaactions.ListType): Self = StObject.set(x, "JavaActions$ListType", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setJavaActions$MicroflowActionInfo(value: typingsSlinky.mendixmodelsdk.javaactionsMod.javaactions.MicroflowActionInfo): Self = StObject.set(x, "JavaActions$MicroflowActionInfo", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setJavaActions$MicroflowJavaActionParameterType(value: MicroflowJavaActionParameterType): Self = StObject.set(x, "JavaActions$MicroflowJavaActionParameterType", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setJavaActions$MicroflowParameterType(value: MicroflowParameterType): Self = StObject.set(x, "JavaActions$MicroflowParameterType", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setJavaActions$ParameterizedEntityType(value: typingsSlinky.mendixmodelsdk.javaactionsMod.javaactions.ParameterizedEntityType): Self = StObject.set(x, "JavaActions$ParameterizedEntityType", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setJavaActions$StringType(value: typingsSlinky.mendixmodelsdk.javaactionsMod.javaactions.StringType): Self = StObject.set(x, "JavaActions$StringType", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setJavaActions$TypeParameter(value: typingsSlinky.mendixmodelsdk.javaactionsMod.javaactions.TypeParameter): Self = StObject.set(x, "JavaActions$TypeParameter", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setJavaScriptActions$JavaScriptActionParameter(value: JavaScriptActionParameter): Self = StObject.set(x, "JavaScriptActions$JavaScriptActionParameter", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setJavaScriptActions$NanoflowJavaScriptActionParameterType(value: NanoflowJavaScriptActionParameterType): Self = StObject.set(x, "JavaScriptActions$NanoflowJavaScriptActionParameterType", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setJsonStructures$JsonElement(value: JsonElement): Self = StObject.set(x, "JsonStructures$JsonElement", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setKafka$KafkaMappedValue(value: KafkaMappedValue): Self = StObject.set(x, "Kafka$KafkaMappedValue", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setKafka$KafkaRemoteEntitySource(value: KafkaRemoteEntitySource): Self = StObject.set(x, "Kafka$KafkaRemoteEntitySource", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setKafka$PublishedKafkaResource(value: PublishedKafkaResource): Self = StObject.set(x, "Kafka$PublishedKafkaResource", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setMappings$MappingMicroflowCall(value: MappingMicroflowCall): Self = StObject.set(x, "Mappings$MappingMicroflowCall", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setMappings$MappingMicroflowParameter(value: MappingMicroflowParameter): Self = StObject.set(x, "Mappings$MappingMicroflowParameter", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setMenus$MenuItem(value: MenuItem): Self = StObject.set(x, "Menus$MenuItem", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setMenus$MenuItemCollection(value: MenuItemCollection): Self = StObject.set(x, "Menus$MenuItemCollection", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setMessageDefinitions$AssociationElement(value: AssociationElement): Self = StObject.set(x, "MessageDefinitions$AssociationElement", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setMessageDefinitions$AttributeElement(value: AttributeElement): Self = StObject.set(x, "MessageDefinitions$AttributeElement", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setMessageDefinitions$EntityElement(value: EntityElement): Self = StObject.set(x, "MessageDefinitions$EntityElement", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setMessageDefinitions$EntityMessageDefinition(value: EntityMessageDefinition): Self = StObject.set(x, "MessageDefinitions$EntityMessageDefinition", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setMessageDefinitions$ExposedAssociation(value: ExposedAssociation): Self = StObject.set(x, "MessageDefinitions$ExposedAssociation", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setMessageDefinitions$ExposedAttribute(value: ExposedAttribute): Self = StObject.set(x, "MessageDefinitions$ExposedAttribute", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setMessageDefinitions$ExposedEntity(value: ExposedEntity): Self = StObject.set(x, "MessageDefinitions$ExposedEntity", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setMicroflows$ActionActivity(value: ActionActivity): Self = StObject.set(x, "Microflows$ActionActivity", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setMicroflows$AdvancedRequestHandling(value: AdvancedRequestHandling): Self = StObject.set(x, "Microflows$AdvancedRequestHandling", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setMicroflows$AggregateListAction(value: AggregateListAction): Self = StObject.set(x, "Microflows$AggregateListAction", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setMicroflows$Annotation(value: typingsSlinky.mendixmodelsdk.microflowsMod.microflows.Annotation): Self = StObject.set(x, "Microflows$Annotation", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setMicroflows$AnnotationFlow(value: AnnotationFlow): Self = StObject.set(x, "Microflows$AnnotationFlow", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setMicroflows$AppServiceCallAction(value: AppServiceCallAction): Self = StObject.set(x, "Microflows$AppServiceCallAction", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setMicroflows$AppServiceCallParameterMapping(value: AppServiceCallParameterMapping): Self = StObject.set(x, "Microflows$AppServiceCallParameterMapping", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setMicroflows$AssociationRetrieveSource(value: AssociationRetrieveSource): Self = StObject.set(x, "Microflows$AssociationRetrieveSource", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setMicroflows$BasicCodeActionParameterValue(value: BasicCodeActionParameterValue): Self = StObject.set(x, "Microflows$BasicCodeActionParameterValue", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setMicroflows$BasicJavaActionParameterValue(value: BasicJavaActionParameterValue): Self = StObject.set(x, "Microflows$BasicJavaActionParameterValue", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setMicroflows$BinaryRequestHandling(value: BinaryRequestHandling): Self = StObject.set(x, "Microflows$BinaryRequestHandling", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setMicroflows$BreakEvent(value: BreakEvent): Self = StObject.set(x, "Microflows$BreakEvent", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setMicroflows$CastAction(value: CastAction): Self = StObject.set(x, "Microflows$CastAction", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setMicroflows$ChangeListAction(value: ChangeListAction): Self = StObject.set(x, "Microflows$ChangeListAction", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setMicroflows$ChangeObjectAction(value: ChangeObjectAction): Self = StObject.set(x, "Microflows$ChangeObjectAction", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setMicroflows$ChangeVariableAction(value: ChangeVariableAction): Self = StObject.set(x, "Microflows$ChangeVariableAction", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setMicroflows$CloseFormAction(value: CloseFormAction): Self = StObject.set(x, "Microflows$CloseFormAction", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setMicroflows$CommitAction(value: CommitAction): Self = StObject.set(x, "Microflows$CommitAction", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setMicroflows$ConstantRange(value: ConstantRange): Self = StObject.set(x, "Microflows$ConstantRange", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setMicroflows$Contains(value: Contains): Self = StObject.set(x, "Microflows$Contains", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setMicroflows$ContinueEvent(value: ContinueEvent): Self = StObject.set(x, "Microflows$ContinueEvent", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setMicroflows$CreateListAction(value: CreateListAction): Self = StObject.set(x, "Microflows$CreateListAction", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setMicroflows$CreateObjectAction(value: CreateObjectAction): Self = StObject.set(x, "Microflows$CreateObjectAction", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setMicroflows$CreateVariableAction(value: CreateVariableAction): Self = StObject.set(x, "Microflows$CreateVariableAction", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setMicroflows$CustomRange(value: CustomRange): Self = StObject.set(x, "Microflows$CustomRange", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setMicroflows$CustomRequestHandling(value: CustomRequestHandling): Self = StObject.set(x, "Microflows$CustomRequestHandling", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setMicroflows$DatabaseRetrieveSource(value: DatabaseRetrieveSource): Self = StObject.set(x, "Microflows$DatabaseRetrieveSource", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setMicroflows$DeleteAction(value: DeleteAction): Self = StObject.set(x, "Microflows$DeleteAction", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setMicroflows$DocumentTemplateParameterMapping(value: DocumentTemplateParameterMapping): Self = StObject.set(x, "Microflows$DocumentTemplateParameterMapping", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setMicroflows$DownloadFileAction(value: DownloadFileAction): Self = StObject.set(x, "Microflows$DownloadFileAction", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setMicroflows$EndEvent(value: EndEvent): Self = StObject.set(x, "Microflows$EndEvent", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setMicroflows$EntityTypeCodeActionParameterValue(value: EntityTypeCodeActionParameterValue): Self = StObject.set(x, "Microflows$EntityTypeCodeActionParameterValue", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setMicroflows$EntityTypeJavaActionParameterValue(value: EntityTypeJavaActionParameterValue): Self = StObject.set(x, "Microflows$EntityTypeJavaActionParameterValue", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setMicroflows$EnumerationCase(value: EnumerationCase): Self = StObject.set(x, "Microflows$EnumerationCase", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setMicroflows$ErrorEvent(value: ErrorEvent): Self = StObject.set(x, "Microflows$ErrorEvent", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setMicroflows$ExclusiveMerge(value: ExclusiveMerge): Self = StObject.set(x, "Microflows$ExclusiveMerge", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setMicroflows$ExclusiveSplit(value: ExclusiveSplit): Self = StObject.set(x, "Microflows$ExclusiveSplit", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setMicroflows$ExportMappingJavaActionParameterValue(value: ExportMappingJavaActionParameterValue): Self = StObject.set(x, "Microflows$ExportMappingJavaActionParameterValue", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setMicroflows$ExportMappingParameterValue(value: ExportMappingParameterValue): Self = StObject.set(x, "Microflows$ExportMappingParameterValue", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setMicroflows$ExportXmlAction(value: ExportXmlAction): Self = StObject.set(x, "Microflows$ExportXmlAction", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setMicroflows$ExpressionSplitCondition(value: ExpressionSplitCondition): Self = StObject.set(x, "Microflows$ExpressionSplitCondition", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setMicroflows$FileDocumentExport(value: FileDocumentExport): Self = StObject.set(x, "Microflows$FileDocumentExport", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setMicroflows$Filter(value: Filter): Self = StObject.set(x, "Microflows$Filter", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setMicroflows$Find(value: Find): Self = StObject.set(x, "Microflows$Find", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setMicroflows$FormDataPart(value: FormDataPart): Self = StObject.set(x, "Microflows$FormDataPart", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setMicroflows$FormDataRequestHandling(value: FormDataRequestHandling): Self = StObject.set(x, "Microflows$FormDataRequestHandling", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setMicroflows$GenerateDocumentAction(value: GenerateDocumentAction): Self = StObject.set(x, "Microflows$GenerateDocumentAction", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setMicroflows$Head(value: Head): Self = StObject.set(x, "Microflows$Head", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setMicroflows$HttpConfiguration(value: HttpConfiguration): Self = StObject.set(x, "Microflows$HttpConfiguration", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setMicroflows$HttpHeaderEntry(value: HttpHeaderEntry): Self = StObject.set(x, "Microflows$HttpHeaderEntry", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setMicroflows$ImportMappingCall(value: ImportMappingCall): Self = StObject.set(x, "Microflows$ImportMappingCall", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setMicroflows$ImportMappingJavaActionParameterValue(value: ImportMappingJavaActionParameterValue): Self = StObject.set(x, "Microflows$ImportMappingJavaActionParameterValue", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setMicroflows$ImportMappingParameterValue(value: ImportMappingParameterValue): Self = StObject.set(x, "Microflows$ImportMappingParameterValue", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setMicroflows$ImportXmlAction(value: ImportXmlAction): Self = StObject.set(x, "Microflows$ImportXmlAction", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setMicroflows$InheritanceCase(value: InheritanceCase): Self = StObject.set(x, "Microflows$InheritanceCase", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setMicroflows$InheritanceSplit(value: InheritanceSplit): Self = StObject.set(x, "Microflows$InheritanceSplit", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setMicroflows$Intersect(value: Intersect): Self = StObject.set(x, "Microflows$Intersect", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setMicroflows$JavaActionCallAction(value: JavaActionCallAction): Self = StObject.set(x, "Microflows$JavaActionCallAction", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setMicroflows$JavaActionParameterMapping(value: JavaActionParameterMapping): Self = StObject.set(x, "Microflows$JavaActionParameterMapping", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setMicroflows$JavaScriptActionCallAction(value: JavaScriptActionCallAction): Self = StObject.set(x, "Microflows$JavaScriptActionCallAction", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setMicroflows$JavaScriptActionParameterMapping(value: JavaScriptActionParameterMapping): Self = StObject.set(x, "Microflows$JavaScriptActionParameterMapping", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setMicroflows$ListEquals(value: ListEquals): Self = StObject.set(x, "Microflows$ListEquals", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setMicroflows$ListOperationAction(value: ListOperationAction): Self = StObject.set(x, "Microflows$ListOperationAction", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setMicroflows$LogMessageAction(value: LogMessageAction): Self = StObject.set(x, "Microflows$LogMessageAction", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setMicroflows$LoopedActivity(value: LoopedActivity): Self = StObject.set(x, "Microflows$LoopedActivity", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setMicroflows$MappingRequestHandling(value: MappingRequestHandling): Self = StObject.set(x, "Microflows$MappingRequestHandling", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setMicroflows$MemberChange(value: MemberChange): Self = StObject.set(x, "Microflows$MemberChange", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setMicroflows$MicroflowCall(value: MicroflowCall): Self = StObject.set(x, "Microflows$MicroflowCall", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setMicroflows$MicroflowCallAction(value: MicroflowCallAction): Self = StObject.set(x, "Microflows$MicroflowCallAction", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setMicroflows$MicroflowCallParameterMapping(value: MicroflowCallParameterMapping): Self = StObject.set(x, "Microflows$MicroflowCallParameterMapping", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setMicroflows$MicroflowJavaActionParameterValue(value: MicroflowJavaActionParameterValue): Self = StObject.set(x, "Microflows$MicroflowJavaActionParameterValue", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setMicroflows$MicroflowObjectCollection(value: MicroflowObjectCollection): Self = StObject.set(x, "Microflows$MicroflowObjectCollection", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setMicroflows$MicroflowParameter(value: MicroflowParameter): Self = StObject.set(x, "Microflows$MicroflowParameter", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setMicroflows$MicroflowParameterObject(value: MicroflowParameterObject): Self = StObject.set(x, "Microflows$MicroflowParameterObject", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setMicroflows$MicroflowParameterValue(value: MicroflowParameterValue): Self = StObject.set(x, "Microflows$MicroflowParameterValue", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setMicroflows$NanoflowCall(value: NanoflowCall): Self = StObject.set(x, "Microflows$NanoflowCall", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setMicroflows$NanoflowCallAction(value: NanoflowCallAction): Self = StObject.set(x, "Microflows$NanoflowCallAction", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setMicroflows$NanoflowCallParameterMapping(value: NanoflowCallParameterMapping): Self = StObject.set(x, "Microflows$NanoflowCallParameterMapping", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setMicroflows$NanoflowParameter(value: NanoflowParameter): Self = StObject.set(x, "Microflows$NanoflowParameter", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setMicroflows$NoCase(value: NoCase): Self = StObject.set(x, "Microflows$NoCase", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setMicroflows$OpenUserTaskAction(value: OpenUserTaskAction): Self = StObject.set(x, "Microflows$OpenUserTaskAction", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setMicroflows$PrimitiveTypedTemplateArgument(value: PrimitiveTypedTemplateArgument): Self = StObject.set(x, "Microflows$PrimitiveTypedTemplateArgument", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setMicroflows$ProxyConfiguration(value: ProxyConfiguration): Self = StObject.set(x, "Microflows$ProxyConfiguration", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setMicroflows$PushToClientAction(value: PushToClientAction): Self = StObject.set(x, "Microflows$PushToClientAction", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setMicroflows$RestCallAction(value: RestCallAction): Self = StObject.set(x, "Microflows$RestCallAction", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setMicroflows$ResultHandling(value: ResultHandling): Self = StObject.set(x, "Microflows$ResultHandling", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setMicroflows$RetrieveAction(value: RetrieveAction): Self = StObject.set(x, "Microflows$RetrieveAction", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setMicroflows$RollbackAction(value: RollbackAction): Self = StObject.set(x, "Microflows$RollbackAction", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setMicroflows$RuleCall(value: RuleCall): Self = StObject.set(x, "Microflows$RuleCall", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setMicroflows$RuleCallParameterMapping(value: RuleCallParameterMapping): Self = StObject.set(x, "Microflows$RuleCallParameterMapping", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setMicroflows$RuleParameter(value: RuleParameter): Self = StObject.set(x, "Microflows$RuleParameter", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setMicroflows$RuleSplitCondition(value: RuleSplitCondition): Self = StObject.set(x, "Microflows$RuleSplitCondition", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setMicroflows$SequenceFlow(value: SequenceFlow): Self = StObject.set(x, "Microflows$SequenceFlow", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setMicroflows$SetTaskOutcomeAction(value: SetTaskOutcomeAction): Self = StObject.set(x, "Microflows$SetTaskOutcomeAction", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setMicroflows$ShowHomePageAction(value: ShowHomePageAction): Self = StObject.set(x, "Microflows$ShowHomePageAction", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setMicroflows$ShowMessageAction(value: ShowMessageAction): Self = StObject.set(x, "Microflows$ShowMessageAction", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setMicroflows$ShowPageAction(value: ShowPageAction): Self = StObject.set(x, "Microflows$ShowPageAction", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setMicroflows$SimpleRequestHandling(value: SimpleRequestHandling): Self = StObject.set(x, "Microflows$SimpleRequestHandling", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setMicroflows$Sort(value: Sort): Self = StObject.set(x, "Microflows$Sort", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setMicroflows$SortItem(value: SortItem): Self = StObject.set(x, "Microflows$SortItem", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setMicroflows$SortItemList(value: SortItemList): Self = StObject.set(x, "Microflows$SortItemList", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setMicroflows$StartEvent(value: StartEvent): Self = StObject.set(x, "Microflows$StartEvent", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setMicroflows$StringTemplate(value: StringTemplate): Self = StObject.set(x, "Microflows$StringTemplate", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setMicroflows$StringTemplateParameterValue(value: StringTemplateParameterValue): Self = StObject.set(x, "Microflows$StringTemplateParameterValue", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setMicroflows$Subtract(value: Subtract): Self = StObject.set(x, "Microflows$Subtract", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setMicroflows$SynchronizeAction(value: SynchronizeAction): Self = StObject.set(x, "Microflows$SynchronizeAction", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setMicroflows$Tail(value: Tail): Self = StObject.set(x, "Microflows$Tail", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setMicroflows$TemplateArgument(value: TemplateArgument): Self = StObject.set(x, "Microflows$TemplateArgument", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setMicroflows$TextTemplate(value: TextTemplate): Self = StObject.set(x, "Microflows$TextTemplate", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setMicroflows$TypedTemplate(value: TypedTemplate): Self = StObject.set(x, "Microflows$TypedTemplate", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setMicroflows$Union(value: Union): Self = StObject.set(x, "Microflows$Union", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setMicroflows$ValidationFeedbackAction(value: ValidationFeedbackAction): Self = StObject.set(x, "Microflows$ValidationFeedbackAction", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setMicroflows$VariableExport(value: VariableExport): Self = StObject.set(x, "Microflows$VariableExport", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setMicroflows$WebServiceCallAction(value: WebServiceCallAction): Self = StObject.set(x, "Microflows$WebServiceCallAction", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setMicroflows$WebServiceOperationAdvancedParameterMapping(value: WebServiceOperationAdvancedParameterMapping): Self = StObject.set(x, "Microflows$WebServiceOperationAdvancedParameterMapping", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setMicroflows$WebServiceOperationSimpleParameterMapping(value: WebServiceOperationSimpleParameterMapping): Self = StObject.set(x, "Microflows$WebServiceOperationSimpleParameterMapping", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setMicroflows$WorkflowCallAction(value: WorkflowCallAction): Self = StObject.set(x, "Microflows$WorkflowCallAction", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setNanoflows$NanoflowParameterValue(value: NanoflowParameterValue): Self = StObject.set(x, "Nanoflows$NanoflowParameterValue", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setNativePages$BottomBarItem(value: BottomBarItem): Self = StObject.set(x, "NativePages$BottomBarItem", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setNativePages$NativeLayoutCallArgument(value: NativeLayoutCallArgument): Self = StObject.set(x, "NativePages$NativeLayoutCallArgument", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setNativePages$NativePageClientAction(value: NativePageClientAction): Self = StObject.set(x, "NativePages$NativePageClientAction", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setNativePages$NativePlaceholder(value: NativePlaceholder): Self = StObject.set(x, "NativePages$NativePlaceholder", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setNavigation$HomePage(value: HomePage): Self = StObject.set(x, "Navigation$HomePage", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setNavigation$NativeNavigationProfile(value: NativeNavigationProfile): Self = StObject.set(x, "Navigation$NativeNavigationProfile", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setNavigation$NavigationProfile(value: NavigationProfile): Self = StObject.set(x, "Navigation$NavigationProfile", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setNavigation$OfflineEntityConfig(value: OfflineEntityConfig): Self = StObject.set(x, "Navigation$OfflineEntityConfig", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setNavigation$RoleBasedHomePage(value: RoleBasedHomePage): Self = StObject.set(x, "Navigation$RoleBasedHomePage", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setNavigation$RoleBasedNativeHomePage(value: RoleBasedNativeHomePage): Self = StObject.set(x, "Navigation$RoleBasedNativeHomePage", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setPages$ActionButton(value: ActionButton): Self = StObject.set(x, "Pages$ActionButton", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setPages$Appearance(value: Appearance): Self = StObject.set(x, "Pages$Appearance", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setPages$AssociationSource(value: AssociationSource): Self = StObject.set(x, "Pages$AssociationSource", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setPages$BackButton(value: BackButton): Self = StObject.set(x, "Pages$BackButton", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setPages$CallNanoflowClientAction(value: CallNanoflowClientAction): Self = StObject.set(x, "Pages$CallNanoflowClientAction", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setPages$CallWorkflowClientAction(value: CallWorkflowClientAction): Self = StObject.set(x, "Pages$CallWorkflowClientAction", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setPages$CancelButton(value: CancelButton): Self = StObject.set(x, "Pages$CancelButton", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setPages$CancelChangesClientAction(value: CancelChangesClientAction): Self = StObject.set(x, "Pages$CancelChangesClientAction", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setPages$CheckBox(value: CheckBox): Self = StObject.set(x, "Pages$CheckBox", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setPages$ClientTemplate(value: ClientTemplate): Self = StObject.set(x, "Pages$ClientTemplate", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setPages$ClientTemplateParameter(value: ClientTemplateParameter): Self = StObject.set(x, "Pages$ClientTemplateParameter", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setPages$ClosePageClientAction(value: ClosePageClientAction): Self = StObject.set(x, "Pages$ClosePageClientAction", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setPages$ComparisonSearchField(value: ComparisonSearchField): Self = StObject.set(x, "Pages$ComparisonSearchField", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setPages$ConditionalEditabilitySettings(value: ConditionalEditabilitySettings): Self = StObject.set(x, "Pages$ConditionalEditabilitySettings", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setPages$ConditionalVisibilitySettings(value: ConditionalVisibilitySettings): Self = StObject.set(x, "Pages$ConditionalVisibilitySettings", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setPages$ConfirmationInfo(value: ConfirmationInfo): Self = StObject.set(x, "Pages$ConfirmationInfo", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setPages$CreateObjectClientAction(value: CreateObjectClientAction): Self = StObject.set(x, "Pages$CreateObjectClientAction", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setPages$DataGrid(value: typingsSlinky.mendixmodelsdk.pagesMod.pages.DataGrid): Self = StObject.set(x, "Pages$DataGrid", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setPages$DataGridAddButton(value: DataGridAddButton): Self = StObject.set(x, "Pages$DataGridAddButton", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setPages$DataGridExportToCSVButton(value: DataGridExportToCSVButton): Self = StObject.set(x, "Pages$DataGridExportToCSVButton", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setPages$DataGridExportToExcelButton(value: DataGridExportToExcelButton): Self = StObject.set(x, "Pages$DataGridExportToExcelButton", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setPages$DataGridRemoveButton(value: DataGridRemoveButton): Self = StObject.set(x, "Pages$DataGridRemoveButton", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setPages$DataView(value: typingsSlinky.mendixmodelsdk.pagesMod.pages.DataView): Self = StObject.set(x, "Pages$DataView", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setPages$DataViewActionButton(value: DataViewActionButton): Self = StObject.set(x, "Pages$DataViewActionButton", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setPages$DataViewCancelButton(value: DataViewCancelButton): Self = StObject.set(x, "Pages$DataViewCancelButton", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setPages$DataViewCloseButton(value: DataViewCloseButton): Self = StObject.set(x, "Pages$DataViewCloseButton", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setPages$DataViewControlBar(value: DataViewControlBar): Self = StObject.set(x, "Pages$DataViewControlBar", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setPages$DataViewSaveButton(value: DataViewSaveButton): Self = StObject.set(x, "Pages$DataViewSaveButton", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setPages$DataViewSource(value: DataViewSource): Self = StObject.set(x, "Pages$DataViewSource", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setPages$DatabaseConstraint(value: DatabaseConstraint): Self = StObject.set(x, "Pages$DatabaseConstraint", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setPages$DatePicker(value: DatePicker): Self = StObject.set(x, "Pages$DatePicker", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setPages$DeleteClientAction(value: DeleteClientAction): Self = StObject.set(x, "Pages$DeleteClientAction", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setPages$DesignPropertyValue(value: DesignPropertyValue): Self = StObject.set(x, "Pages$DesignPropertyValue", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setPages$DivContainer(value: DivContainer): Self = StObject.set(x, "Pages$DivContainer", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setPages$DropDown(value: DropDown): Self = StObject.set(x, "Pages$DropDown", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setPages$DropDownButton(value: DropDownButton): Self = StObject.set(x, "Pages$DropDownButton", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setPages$DropDownButtonItem(value: DropDownButtonItem): Self = StObject.set(x, "Pages$DropDownButtonItem", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setPages$DropDownSearchField(value: DropDownSearchField): Self = StObject.set(x, "Pages$DropDownSearchField", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setPages$DynamicImageViewer(value: typingsSlinky.mendixmodelsdk.pagesMod.pages.DynamicImageViewer): Self = StObject.set(x, "Pages$DynamicImageViewer", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setPages$DynamicText(value: DynamicText): Self = StObject.set(x, "Pages$DynamicText", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setPages$EditPageTemplateType(value: EditPageTemplateType): Self = StObject.set(x, "Pages$EditPageTemplateType", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setPages$FileManager(value: FileManager): Self = StObject.set(x, "Pages$FileManager", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setPages$FormattingInfo(value: FormattingInfo): Self = StObject.set(x, "Pages$FormattingInfo", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setPages$GlyphIcon(value: GlyphIcon): Self = StObject.set(x, "Pages$GlyphIcon", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setPages$GridActionButton(value: GridActionButton): Self = StObject.set(x, "Pages$GridActionButton", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setPages$GridColumn(value: GridColumn): Self = StObject.set(x, "Pages$GridColumn", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setPages$GridControlBar(value: GridControlBar): Self = StObject.set(x, "Pages$GridControlBar", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setPages$GridDatabaseSource(value: GridDatabaseSource): Self = StObject.set(x, "Pages$GridDatabaseSource", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setPages$GridDeleteButton(value: GridDeleteButton): Self = StObject.set(x, "Pages$GridDeleteButton", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setPages$GridDeselectAllButton(value: GridDeselectAllButton): Self = StObject.set(x, "Pages$GridDeselectAllButton", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setPages$GridEditButton(value: GridEditButton): Self = StObject.set(x, "Pages$GridEditButton", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setPages$GridNewButton(value: GridNewButton): Self = StObject.set(x, "Pages$GridNewButton", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setPages$GridSearchButton(value: GridSearchButton): Self = StObject.set(x, "Pages$GridSearchButton", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setPages$GridSelectAllButton(value: GridSelectAllButton): Self = StObject.set(x, "Pages$GridSelectAllButton", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setPages$GridSortBar(value: typingsSlinky.mendixmodelsdk.pagesMod.pages.GridSortBar): Self = StObject.set(x, "Pages$GridSortBar", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setPages$GridSortItem(value: typingsSlinky.mendixmodelsdk.pagesMod.pages.GridSortItem): Self = StObject.set(x, "Pages$GridSortItem", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setPages$GridXPathSource(value: GridXPathSource): Self = StObject.set(x, "Pages$GridXPathSource", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setPages$GroupBox(value: GroupBox): Self = StObject.set(x, "Pages$GroupBox", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setPages$Header(value: typingsSlinky.mendixmodelsdk.pagesMod.pages.Header): Self = StObject.set(x, "Pages$Header", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setPages$HorizontalSplitPane(value: HorizontalSplitPane): Self = StObject.set(x, "Pages$HorizontalSplitPane", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setPages$ImageIcon(value: ImageIcon): Self = StObject.set(x, "Pages$ImageIcon", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setPages$ImageUploader(value: ImageUploader): Self = StObject.set(x, "Pages$ImageUploader", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setPages$ImageViewerSource(value: ImageViewerSource): Self = StObject.set(x, "Pages$ImageViewerSource", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setPages$InputReferenceSetSelector(value: InputReferenceSetSelector): Self = StObject.set(x, "Pages$InputReferenceSetSelector", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setPages$Label(value: Label): Self = StObject.set(x, "Pages$Label", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setPages$LayoutCall(value: LayoutCall): Self = StObject.set(x, "Pages$LayoutCall", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setPages$LayoutCallArgument(value: LayoutCallArgument): Self = StObject.set(x, "Pages$LayoutCallArgument", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setPages$LayoutGrid(value: LayoutGrid): Self = StObject.set(x, "Pages$LayoutGrid", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setPages$LayoutGridColumn(value: LayoutGridColumn): Self = StObject.set(x, "Pages$LayoutGridColumn", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setPages$LayoutGridRow(value: LayoutGridRow): Self = StObject.set(x, "Pages$LayoutGridRow", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setPages$LayoutParameter(value: LayoutParameter): Self = StObject.set(x, "Pages$LayoutParameter", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setPages$LinkButton(value: LinkButton): Self = StObject.set(x, "Pages$LinkButton", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setPages$ListView(value: ListView): Self = StObject.set(x, "Pages$ListView", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setPages$ListViewDatabaseSource(value: ListViewDatabaseSource): Self = StObject.set(x, "Pages$ListViewDatabaseSource", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setPages$ListViewSearch(value: ListViewSearch): Self = StObject.set(x, "Pages$ListViewSearch", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setPages$ListViewTemplate(value: ListViewTemplate): Self = StObject.set(x, "Pages$ListViewTemplate", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setPages$ListViewXPathSource(value: ListViewXPathSource): Self = StObject.set(x, "Pages$ListViewXPathSource", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setPages$ListenTargetSource(value: ListenTargetSource): Self = StObject.set(x, "Pages$ListenTargetSource", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setPages$LoginButton(value: LoginButton): Self = StObject.set(x, "Pages$LoginButton", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setPages$LoginIdTextBox(value: LoginIdTextBox): Self = StObject.set(x, "Pages$LoginIdTextBox", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setPages$LogoutButton(value: LogoutButton): Self = StObject.set(x, "Pages$LogoutButton", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setPages$MasterDetail(value: MasterDetail): Self = StObject.set(x, "Pages$MasterDetail", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setPages$MasterDetailDetailRegion(value: MasterDetailDetailRegion): Self = StObject.set(x, "Pages$MasterDetailDetailRegion", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setPages$MasterDetailMasterRegion(value: MasterDetailMasterRegion): Self = StObject.set(x, "Pages$MasterDetailMasterRegion", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setPages$MenuBar(value: MenuBar): Self = StObject.set(x, "Pages$MenuBar", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setPages$MenuDocumentSource(value: MenuDocumentSource): Self = StObject.set(x, "Pages$MenuDocumentSource", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setPages$MicroflowClientAction(value: MicroflowClientAction): Self = StObject.set(x, "Pages$MicroflowClientAction", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setPages$MicroflowParameterMapping(value: MicroflowParameterMapping): Self = StObject.set(x, "Pages$MicroflowParameterMapping", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setPages$MicroflowSettings(value: MicroflowSettings): Self = StObject.set(x, "Pages$MicroflowSettings", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setPages$MicroflowSource(value: MicroflowSource): Self = StObject.set(x, "Pages$MicroflowSource", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setPages$NanoflowParameterMapping(value: NanoflowParameterMapping): Self = StObject.set(x, "Pages$NanoflowParameterMapping", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setPages$NanoflowSource(value: NanoflowSource): Self = StObject.set(x, "Pages$NanoflowSource", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setPages$NativeLayoutContent(value: NativeLayoutContent): Self = StObject.set(x, "Pages$NativeLayoutContent", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setPages$NavigationList(value: NavigationList): Self = StObject.set(x, "Pages$NavigationList", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setPages$NavigationListItem(value: NavigationListItem): Self = StObject.set(x, "Pages$NavigationListItem", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setPages$NavigationSource(value: NavigationSource): Self = StObject.set(x, "Pages$NavigationSource", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setPages$NavigationTree(value: NavigationTree): Self = StObject.set(x, "Pages$NavigationTree", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setPages$NewButton(value: NewButton): Self = StObject.set(x, "Pages$NewButton", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setPages$NoClientAction(value: NoClientAction): Self = StObject.set(x, "Pages$NoClientAction", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setPages$OfflineSchema(value: OfflineSchema): Self = StObject.set(x, "Pages$OfflineSchema", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setPages$OfflineSchemaFetchInstruction(value: OfflineSchemaFetchInstruction): Self = StObject.set(x, "Pages$OfflineSchemaFetchInstruction", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setPages$OnClickEnlarge(value: OnClickEnlarge): Self = StObject.set(x, "Pages$OnClickEnlarge", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setPages$OnClickMicroflow(value: OnClickMicroflow): Self = StObject.set(x, "Pages$OnClickMicroflow", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setPages$OnClickNothing(value: OnClickNothing): Self = StObject.set(x, "Pages$OnClickNothing", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setPages$OpenLinkClientAction(value: OpenLinkClientAction): Self = StObject.set(x, "Pages$OpenLinkClientAction", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setPages$OpenUserTaskClientAction(value: OpenUserTaskClientAction): Self = StObject.set(x, "Pages$OpenUserTaskClientAction", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setPages$OpenWorkflowClientAction(value: OpenWorkflowClientAction): Self = StObject.set(x, "Pages$OpenWorkflowClientAction", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setPages$PageClientAction(value: PageClientAction): Self = StObject.set(x, "Pages$PageClientAction", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setPages$PageForSpecialization(value: PageForSpecialization): Self = StObject.set(x, "Pages$PageForSpecialization", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setPages$PageSettings(value: PageSettings): Self = StObject.set(x, "Pages$PageSettings", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setPages$PageVariable(value: PageVariable): Self = StObject.set(x, "Pages$PageVariable", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setPages$PasswordTextBox(value: PasswordTextBox): Self = StObject.set(x, "Pages$PasswordTextBox", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setPages$Placeholder(value: Placeholder): Self = StObject.set(x, "Pages$Placeholder", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setPages$RadioButtonGroup(value: RadioButtonGroup): Self = StObject.set(x, "Pages$RadioButtonGroup", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setPages$RangeSearchField(value: RangeSearchField): Self = StObject.set(x, "Pages$RangeSearchField", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setPages$ReferenceSelector(value: ReferenceSelector): Self = StObject.set(x, "Pages$ReferenceSelector", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setPages$ReferenceSetSelector(value: ReferenceSetSelector): Self = StObject.set(x, "Pages$ReferenceSetSelector", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setPages$ReferenceSetSource(value: ReferenceSetSource): Self = StObject.set(x, "Pages$ReferenceSetSource", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setPages$RegularPageTemplateType(value: RegularPageTemplateType): Self = StObject.set(x, "Pages$RegularPageTemplateType", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setPages$RetrievalQuery(value: RetrievalQuery): Self = StObject.set(x, "Pages$RetrievalQuery", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setPages$RetrievalQueryParameter(value: RetrievalQueryParameter): Self = StObject.set(x, "Pages$RetrievalQueryParameter", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setPages$RetrievalSchema(value: RetrievalSchema): Self = StObject.set(x, "Pages$RetrievalSchema", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setPages$SaveButton(value: SaveButton): Self = StObject.set(x, "Pages$SaveButton", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setPages$SaveChangesClientAction(value: SaveChangesClientAction): Self = StObject.set(x, "Pages$SaveChangesClientAction", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setPages$ScrollContainer(value: ScrollContainer): Self = StObject.set(x, "Pages$ScrollContainer", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setPages$ScrollContainerRegion(value: ScrollContainerRegion): Self = StObject.set(x, "Pages$ScrollContainerRegion", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setPages$SearchBar(value: SearchBar): Self = StObject.set(x, "Pages$SearchBar", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setPages$SelectButton(value: SelectButton): Self = StObject.set(x, "Pages$SelectButton", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setPages$SelectPageTemplateType(value: SelectPageTemplateType): Self = StObject.set(x, "Pages$SelectPageTemplateType", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setPages$SelectorDatabaseSource(value: SelectorDatabaseSource): Self = StObject.set(x, "Pages$SelectorDatabaseSource", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setPages$SelectorMicroflowSource(value: SelectorMicroflowSource): Self = StObject.set(x, "Pages$SelectorMicroflowSource", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setPages$SelectorXPathSource(value: SelectorXPathSource): Self = StObject.set(x, "Pages$SelectorXPathSource", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setPages$SetTaskOutcomeClientAction(value: SetTaskOutcomeClientAction): Self = StObject.set(x, "Pages$SetTaskOutcomeClientAction", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setPages$SidebarToggleButton(value: SidebarToggleButton): Self = StObject.set(x, "Pages$SidebarToggleButton", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setPages$SignOutClientAction(value: SignOutClientAction): Self = StObject.set(x, "Pages$SignOutClientAction", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setPages$SimpleMenuBar(value: SimpleMenuBar): Self = StObject.set(x, "Pages$SimpleMenuBar", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setPages$SnippetCall(value: SnippetCall): Self = StObject.set(x, "Pages$SnippetCall", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setPages$SnippetCallWidget(value: SnippetCallWidget): Self = StObject.set(x, "Pages$SnippetCallWidget", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setPages$StaticImageViewer(value: typingsSlinky.mendixmodelsdk.pagesMod.pages.StaticImageViewer): Self = StObject.set(x, "Pages$StaticImageViewer", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setPages$StaticOrDynamicString(value: StaticOrDynamicString): Self = StObject.set(x, "Pages$StaticOrDynamicString", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setPages$SyncButton(value: SyncButton): Self = StObject.set(x, "Pages$SyncButton", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setPages$SyncClientAction(value: SyncClientAction): Self = StObject.set(x, "Pages$SyncClientAction", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setPages$TabContainer(value: TabContainer): Self = StObject.set(x, "Pages$TabContainer", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setPages$TabPage(value: TabPage): Self = StObject.set(x, "Pages$TabPage", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setPages$Table(value: typingsSlinky.mendixmodelsdk.pagesMod.pages.Table): Self = StObject.set(x, "Pages$Table", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setPages$TableCell(value: typingsSlinky.mendixmodelsdk.pagesMod.pages.TableCell): Self = StObject.set(x, "Pages$TableCell", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setPages$TableColumn(value: TableColumn): Self = StObject.set(x, "Pages$TableColumn", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setPages$TableRow(value: typingsSlinky.mendixmodelsdk.pagesMod.pages.TableRow): Self = StObject.set(x, "Pages$TableRow", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setPages$TemplateGrid(value: typingsSlinky.mendixmodelsdk.pagesMod.pages.TemplateGrid): Self = StObject.set(x, "Pages$TemplateGrid", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setPages$TemplateGridContents(value: typingsSlinky.mendixmodelsdk.pagesMod.pages.TemplateGridContents): Self = StObject.set(x, "Pages$TemplateGridContents", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setPages$TemplatePlaceholder(value: TemplatePlaceholder): Self = StObject.set(x, "Pages$TemplatePlaceholder", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setPages$TextArea(value: TextArea): Self = StObject.set(x, "Pages$TextArea", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setPages$TextBox(value: TextBox): Self = StObject.set(x, "Pages$TextBox", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setPages$Title(value: typingsSlinky.mendixmodelsdk.pagesMod.pages.Title): Self = StObject.set(x, "Pages$Title", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setPages$UserTaskTemplateType(value: UserTaskTemplateType): Self = StObject.set(x, "Pages$UserTaskTemplateType", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setPages$ValidationMessage(value: ValidationMessage): Self = StObject.set(x, "Pages$ValidationMessage", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setPages$VerticalFlow(value: VerticalFlow): Self = StObject.set(x, "Pages$VerticalFlow", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setPages$VerticalSplitPane(value: VerticalSplitPane): Self = StObject.set(x, "Pages$VerticalSplitPane", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setPages$WebLayoutContent(value: WebLayoutContent): Self = StObject.set(x, "Pages$WebLayoutContent", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setPages$WidgetValidation(value: WidgetValidation): Self = StObject.set(x, "Pages$WidgetValidation", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setPages$WorkflowOverviewTemplateType(value: WorkflowOverviewTemplateType): Self = StObject.set(x, "Pages$WorkflowOverviewTemplateType", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setProjects$OneTimeConversionMarker(value: OneTimeConversionMarker): Self = StObject.set(x, "Projects$OneTimeConversionMarker", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setReports$BasicReport(value: BasicReport): Self = StObject.set(x, "Reports$BasicReport", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setReports$BasicReportAggregate(value: BasicReportAggregate): Self = StObject.set(x, "Reports$BasicReportAggregate", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setReports$BasicReportColumn(value: BasicReportColumn): Self = StObject.set(x, "Reports$BasicReportColumn", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setReports$ReportButton(value: ReportButton): Self = StObject.set(x, "Reports$ReportButton", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setReports$ReportChart(value: ReportChart): Self = StObject.set(x, "Reports$ReportChart", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setReports$ReportChartSeries(value: ReportChartSeries): Self = StObject.set(x, "Reports$ReportChartSeries", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setReports$ReportDateRangeField(value: ReportDateRangeField): Self = StObject.set(x, "Reports$ReportDateRangeField", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setReports$ReportDateRangeSelector(value: ReportDateRangeSelector): Self = StObject.set(x, "Reports$ReportDateRangeSelector", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setReports$ReportDropDown(value: ReportDropDown): Self = StObject.set(x, "Reports$ReportDropDown", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setReports$ReportPane(value: ReportPane): Self = StObject.set(x, "Reports$ReportPane", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setReports$ReportZoomInfo(value: ReportZoomInfo): Self = StObject.set(x, "Reports$ReportZoomInfo", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setReports$ReportZoomMapping(value: ReportZoomMapping): Self = StObject.set(x, "Reports$ReportZoomMapping", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setRest$CorsConfiguration(value: CorsConfiguration): Self = StObject.set(x, "Rest$CorsConfiguration", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setRest$MetadataReference(value: MetadataReference): Self = StObject.set(x, "Rest$MetadataReference", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setRest$ODataKey(value: ODataKey): Self = StObject.set(x, "Rest$ODataKey", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setRest$ODataKeyPart(value: ODataKeyPart): Self = StObject.set(x, "Rest$ODataKeyPart", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setRest$ODataMappedValue(value: ODataMappedValue): Self = StObject.set(x, "Rest$ODataMappedValue", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setRest$ODataRemoteAssociationSource(value: ODataRemoteAssociationSource): Self = StObject.set(x, "Rest$ODataRemoteAssociationSource", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setRest$ODataRemoteEntitySource(value: ODataRemoteEntitySource): Self = StObject.set(x, "Rest$ODataRemoteEntitySource", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setRest$PublishedRestResource(value: PublishedRestResource): Self = StObject.set(x, "Rest$PublishedRestResource", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setRest$PublishedRestServiceOperation(value: PublishedRestServiceOperation): Self = StObject.set(x, "Rest$PublishedRestServiceOperation", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setRest$PublishedRestServiceResource(value: PublishedRestServiceResource): Self = StObject.set(x, "Rest$PublishedRestServiceResource", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setRest$RestOperationParameter(value: RestOperationParameter): Self = StObject.set(x, "Rest$RestOperationParameter", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setSecurity$DemoUser(value: DemoUser): Self = StObject.set(x, "Security$DemoUser", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setSecurity$FileDocumentAccessRuleContainer(value: FileDocumentAccessRuleContainer): Self = StObject.set(x, "Security$FileDocumentAccessRuleContainer", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setSecurity$ImageAccessRuleContainer(value: ImageAccessRuleContainer): Self = StObject.set(x, "Security$ImageAccessRuleContainer", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setSecurity$ModuleRole(value: ModuleRole): Self = StObject.set(x, "Security$ModuleRole", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setSecurity$PasswordPolicySettings(value: PasswordPolicySettings): Self = StObject.set(x, "Security$PasswordPolicySettings", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setSecurity$UserRole(value: UserRole): Self = StObject.set(x, "Security$UserRole", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setSettings$ActionActivityDefaultColor(value: ActionActivityDefaultColor): Self = StObject.set(x, "Settings$ActionActivityDefaultColor", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setSettings$Certificate(value: Certificate): Self = StObject.set(x, "Settings$Certificate", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setSettings$CertificateSettings(value: CertificateSettings): Self = StObject.set(x, "Settings$CertificateSettings", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setSettings$Configuration(value: Configuration): Self = StObject.set(x, "Settings$Configuration", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setSettings$ConfigurationSettings(value: ConfigurationSettings): Self = StObject.set(x, "Settings$ConfigurationSettings", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setSettings$ConstantValue(value: ConstantValue): Self = StObject.set(x, "Settings$ConstantValue", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setSettings$CustomSetting(value: CustomSetting): Self = StObject.set(x, "Settings$CustomSetting", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setSettings$IntegrationProjectSettingsPart(value: IntegrationProjectSettingsPart): Self = StObject.set(x, "Settings$IntegrationProjectSettingsPart", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setSettings$JavaActionsSettings(value: JavaActionsSettings): Self = StObject.set(x, "Settings$JavaActionsSettings", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setSettings$Language(value: Language): Self = StObject.set(x, "Settings$Language", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setSettings$LanguageSettings(value: LanguageSettings): Self = StObject.set(x, "Settings$LanguageSettings", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setSettings$ModelerSettings(value: ModelerSettings): Self = StObject.set(x, "Settings$ModelerSettings", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setSettings$RuntimeSettings(value: RuntimeSettings): Self = StObject.set(x, "Settings$RuntimeSettings", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setSettings$WebUIProjectSettingsPart(value: WebUIProjectSettingsPart): Self = StObject.set(x, "Settings$WebUIProjectSettingsPart", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setSettings$WorkflowsProjectSettingsPart(value: WorkflowsProjectSettingsPart): Self = StObject.set(x, "Settings$WorkflowsProjectSettingsPart", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setTexts$SystemText(value: SystemText): Self = StObject.set(x, "Texts$SystemText", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setTexts$Text(value: Text): Self = StObject.set(x, "Texts$Text", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setTexts$Translation(value: Translation): Self = StObject.set(x, "Texts$Translation", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setWebServices$DataAssociation(value: DataAssociation): Self = StObject.set(x, "WebServices$DataAssociation", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setWebServices$DataAttribute(value: DataAttribute): Self = StObject.set(x, "WebServices$DataAttribute", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setWebServices$DataEntity(value: DataEntity): Self = StObject.set(x, "WebServices$DataEntity", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setWebServices$OperationInfo(value: OperationInfo): Self = StObject.set(x, "WebServices$OperationInfo", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setWebServices$PartEncoding(value: PartEncoding): Self = StObject.set(x, "WebServices$PartEncoding", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setWebServices$PublishedOperation(value: PublishedOperation): Self = StObject.set(x, "WebServices$PublishedOperation", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setWebServices$PublishedParameter(value: PublishedParameter): Self = StObject.set(x, "WebServices$PublishedParameter", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setWebServices$RpcMessagePartElement(value: RpcMessagePartElement): Self = StObject.set(x, "WebServices$RpcMessagePartElement", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setWebServices$RpcOperationElement(value: RpcOperationElement): Self = StObject.set(x, "WebServices$RpcOperationElement", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setWebServices$ServiceInfo(value: ServiceInfo): Self = StObject.set(x, "WebServices$ServiceInfo", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setWebServices$SystemIdDataAttribute(value: SystemIdDataAttribute): Self = StObject.set(x, "WebServices$SystemIdDataAttribute", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setWebServices$VersionedService(value: VersionedService): Self = StObject.set(x, "WebServices$VersionedService", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setWebServices$WsdlDescription(value: WsdlDescription): Self = StObject.set(x, "WebServices$WsdlDescription", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setWebServices$WsdlEntry(value: WsdlEntry): Self = StObject.set(x, "WebServices$WsdlEntry", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setWorkflows$BooleanSplitOutcome(value: BooleanSplitOutcome): Self = StObject.set(x, "Workflows$BooleanSplitOutcome", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setWorkflows$CallMicroflowTask(value: CallMicroflowTask): Self = StObject.set(x, "Workflows$CallMicroflowTask", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setWorkflows$CallWorkflowActivity(value: CallWorkflowActivity): Self = StObject.set(x, "Workflows$CallWorkflowActivity", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setWorkflows$EndWorkflowActivity(value: EndWorkflowActivity): Self = StObject.set(x, "Workflows$EndWorkflowActivity", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setWorkflows$EnumerationValueSplitOutcome(value: EnumerationValueSplitOutcome): Self = StObject.set(x, "Workflows$EnumerationValueSplitOutcome", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setWorkflows$ExclusiveSplitActivity(value: ExclusiveSplitActivity): Self = StObject.set(x, "Workflows$ExclusiveSplitActivity", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setWorkflows$Flow(value: Flow): Self = StObject.set(x, "Workflows$Flow", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setWorkflows$ParallelSplitActivity(value: ParallelSplitActivity): Self = StObject.set(x, "Workflows$ParallelSplitActivity", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setWorkflows$ParallelSplitOutcome(value: ParallelSplitOutcome): Self = StObject.set(x, "Workflows$ParallelSplitOutcome", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setWorkflows$UserTask(value: UserTask): Self = StObject.set(x, "Workflows$UserTask", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setWorkflows$WorkflowTaskOutcome(value: WorkflowTaskOutcome): Self = StObject.set(x, "Workflows$WorkflowTaskOutcome", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setWorkflows$XPathBasedUserSource(value: XPathBasedUserSource): Self = StObject.set(x, "Workflows$XPathBasedUserSource", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setXmlSchemas$XmlElement(value: XmlElement): Self = StObject.set(x, "XmlSchemas$XmlElement", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setXmlSchemas$XmlSchemaEntry(value: XmlSchemaEntry): Self = StObject.set(x, "XmlSchemas$XmlSchemaEntry", value.asInstanceOf[js.Any])
    }
  }
  
  @js.native
  trait IBaseModel extends IAbstractModel {
    
    def allBuildingBlocks(): js.Array[IBuildingBlock] = js.native
    
    def allCodeActions(): js.Array[ICodeAction] = js.native
    
    def allConstants(): js.Array[IConstant] = js.native
    
    def allConsumedAppServices(): js.Array[IConsumedAppService] = js.native
    
    def allConsumedKafkaServices(): js.Array[IConsumedKafkaService] = js.native
    
    def allConsumedODataServices(): js.Array[IConsumedODataService] = js.native
    
    def allDataSets(): js.Array[IDataSet] = js.native
    
    def allDocumentTemplates(): js.Array[IDocumentTemplate] = js.native
    
    def allDocuments(): js.Array[IDocument] = js.native
    
    def allDomainModels(): js.Array[IDomainModel] = js.native
    
    def allEnumerations(): js.Array[IEnumeration] = js.native
    
    def allExportMappings(): js.Array[IExportMapping] = js.native
    
    def allFolderBases(): js.Array[IFolderBase] = js.native
    
    def allFolders(): js.Array[IFolder] = js.native
    
    def allFormBases(): js.Array[IFormBase] = js.native
    
    def allImageCollections(): js.Array[IImageCollection] = js.native
    
    def allImportMappings(): js.Array[IImportMapping] = js.native
    
    def allImportedWebServices(): js.Array[IImportedWebService] = js.native
    
    def allJavaActions(): js.Array[IJavaAction] = js.native
    
    def allJavaScriptActions(): js.Array[IJavaScriptAction] = js.native
    
    def allJsonStructures(): js.Array[IJsonStructure] = js.native
    
    def allLayouts(): js.Array[ILayout] = js.native
    
    def allMappingDocuments(): js.Array[IMappingDocument] = js.native
    
    def allMenuDocuments(): js.Array[IMenuDocument] = js.native
    
    def allMessageDefinitionCollections(): js.Array[IMessageDefinitionCollection] = js.native
    
    def allMicroflowBases(): js.Array[IMicroflowBase] = js.native
    
    def allMicroflows(): js.Array[IMicroflow] = js.native
    
    def allModuleDocuments(): js.Array[IModuleDocument] = js.native
    
    def allModuleSecurities(): js.Array[IModuleSecurity] = js.native
    
    def allModules(): js.Array[IModule] = js.native
    
    def allMxSchemas(): js.Array[IMxSchema] = js.native
    
    def allNanoflows(): js.Array[INanoflow] = js.native
    
    def allNativeLayouts(): js.Array[INativeLayout] = js.native
    
    def allNativePages(): js.Array[INativePage] = js.native
    
    def allNavigationDocuments(): js.Array[INavigationDocument] = js.native
    
    def allPageTemplates(): js.Array[IPageTemplate] = js.native
    
    def allPages(): js.Array[IPage] = js.native
    
    def allProjectConversions(): js.Array[IProjectConversion] = js.native
    
    def allProjectDocuments(): js.Array[IProjectDocument] = js.native
    
    def allProjectSecurities(): js.Array[IProjectSecurity] = js.native
    
    def allProjectSettings(): js.Array[IProjectSettings] = js.native
    
    def allProjects(): js.Array[IProject] = js.native
    
    def allPublishedAppServices(): js.Array[IPublishedAppService] = js.native
    
    def allPublishedKafkaServices(): js.Array[IPublishedKafkaService] = js.native
    
    def allPublishedODataServices(): js.Array[IPublishedODataService] = js.native
    
    def allPublishedRestServices(): js.Array[IPublishedRestService] = js.native
    
    def allPublishedServiceBases(): js.Array[IPublishedServiceBase] = js.native
    
    def allPublishedWebServices(): js.Array[IPublishedWebService] = js.native
    
    def allRegularExpressions(): js.Array[IRegularExpression] = js.native
    
    def allRemoteEntitySourceDocuments(): js.Array[IRemoteEntitySourceDocument] = js.native
    
    def allRules(): js.Array[IRule] = js.native
    
    def allScheduledEvents(): js.Array[IScheduledEvent] = js.native
    
    def allServerSideMicroflows(): js.Array[IServerSideMicroflow] = js.native
    
    def allSnippets(): js.Array[ISnippet] = js.native
    
    def allSystemTextCollections(): js.Array[ISystemTextCollection] = js.native
    
    def allTemplateFormBases(): js.Array[ITemplateFormBase] = js.native
    
    def allWorkflows(): js.Array[IWorkflow] = js.native
    
    def allXmlSchemas(): js.Array[IXmlSchema] = js.native
    
    /**
      * Creates and returns a new element in the SDK and on the server.
      * After creation, assign or add this instance to a property that accepts this kind of elements.
      * @param typeName `structureTypeName` of the element type you want to create
      */
    def createElement[T /* <: /* keyof mendixmodelsdk.mendixmodelsdk/dist/gen/base-model.ConcreteModelElements */ /* import warning: LimitUnionLength.leaveTypeRef Was union type with length 563 */ js.Any */](typeName: T): /* import warning: importer.ImportType#apply Failed type conversion: mendixmodelsdk.mendixmodelsdk/dist/gen/base-model.ConcreteModelElements[T] */ js.Any = js.native
    
    def findAppServiceActionByQualifiedName(qname: String): IAppServiceAction | Null = js.native
    
    def findAppServiceActionParameterByQualifiedName(qname: String): IAppServiceActionParameter | Null = js.native
    
    def findAssociationBaseByQualifiedName(qname: String): IAssociationBase | Null = js.native
    
    def findAttributeByQualifiedName(qname: String): IAttribute | Null = js.native
    
    def findConstantByQualifiedName(qname: String): IConstant | Null = js.native
    
    def findConsumedKafkaServiceByQualifiedName(qname: String): IConsumedKafkaService | Null = js.native
    
    def findConsumedODataServiceByQualifiedName(qname: String): IConsumedODataService | Null = js.native
    
    def findDataSetByQualifiedName(qname: String): IDataSet | Null = js.native
    
    def findDataSetParameterByQualifiedName(qname: String): IDataSetParameter | Null = js.native
    
    def findDocumentTemplateByQualifiedName(qname: String): IDocumentTemplate | Null = js.native
    
    def findEntityByQualifiedName(qname: String): IEntity | Null = js.native
    
    def findEnumerationByQualifiedName(qname: String): IEnumeration | Null = js.native
    
    def findEnumerationValueByQualifiedName(qname: String): IEnumerationValue | Null = js.native
    
    def findExportMappingByQualifiedName(qname: String): IExportMapping | Null = js.native
    
    def findImageByQualifiedName(qname: String): IImage | Null = js.native
    
    def findImportMappingByQualifiedName(qname: String): IImportMapping | Null = js.native
    
    def findImportedWebServiceByQualifiedName(qname: String): IImportedWebService | Null = js.native
    
    def findJavaActionByQualifiedName(qname: String): IJavaAction | Null = js.native
    
    def findJavaActionParameterByQualifiedName(qname: String): IJavaActionParameter | Null = js.native
    
    def findJavaScriptActionByQualifiedName(qname: String): IJavaScriptAction | Null = js.native
    
    def findJavaScriptActionParameterByQualifiedName(qname: String): IJavaScriptActionParameter | Null = js.native
    
    def findJsonStructureByQualifiedName(qname: String): IJsonStructure | Null = js.native
    
    def findLayoutByQualifiedName(qname: String): ILayout | Null = js.native
    
    def findLayoutParameterByQualifiedName(qname: String): ILayoutParameter | Null = js.native
    
    def findMenuDocumentByQualifiedName(qname: String): IMenuDocument | Null = js.native
    
    def findMessageDefinitionByQualifiedName(qname: String): IMessageDefinition | Null = js.native
    
    def findMicroflowByQualifiedName(qname: String): IMicroflow | Null = js.native
    
    def findMicroflowParameterByQualifiedName(qname: String): IMicroflowParameter | Null = js.native
    
    def findModuleRoleByQualifiedName(qname: String): IModuleRole | Null = js.native
    
    def findNanoflowByQualifiedName(qname: String): INanoflow | Null = js.native
    
    def findNanoflowParameterByQualifiedName(qname: String): INanoflowParameter | Null = js.native
    
    def findNativeLayoutByQualifiedName(qname: String): INativeLayout | Null = js.native
    
    def findNativePageByQualifiedName(qname: String): INativePage | Null = js.native
    
    def findNavigationProfileByQualifiedName(qname: String): INavigationProfile | Null = js.native
    
    def findPageByQualifiedName(qname: String): IPage | Null = js.native
    
    def findRegularExpressionByQualifiedName(qname: String): IRegularExpression | Null = js.native
    
    def findRemoteEntitySourceDocumentByQualifiedName(qname: String): IRemoteEntitySourceDocument | Null = js.native
    
    def findRuleByQualifiedName(qname: String): IRule | Null = js.native
    
    def findRuleParameterByQualifiedName(qname: String): IRuleParameter | Null = js.native
    
    def findSnippetByQualifiedName(qname: String): ISnippet | Null = js.native
    
    def findUserRoleByQualifiedName(qname: String): IUserRole | Null = js.native
    
    def findWorkflowByQualifiedName(qname: String): IWorkflow | Null = js.native
    
    def findWorkflowTaskOutcomeByQualifiedName(qname: String): IWorkflowTaskOutcome | Null = js.native
    
    def findXmlSchemaByQualifiedName(qname: String): IXmlSchema | Null = js.native
  }
  
  @js.native
  trait IModel extends IBaseModel {
    
    /**
      * Given a qualified name, returns a Module.
      */
    def findModuleByQualifiedName(qualifiedName: String): IModule | Null = js.native
    
    /**
      * The actual contents of the model.
      */
    var root: IProject = js.native
  }
}
