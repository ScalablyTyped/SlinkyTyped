package typingsSlinky.maximMazurokGapiClientContent.gapi.client.content

import org.scalablytyped.runtime.StObject
import scala.scalajs.js
import scala.scalajs.js.`|`
import scala.scalajs.js.annotation.{JSGlobalScope, JSGlobal, JSImport, JSName, JSBracketAccess}

@js.native
trait ReturnPolicy extends StObject {
  
  /** Required. The country of sale where the return policy is applicable. */
  var country: js.UndefOr[String] = js.native
  
  /** Identifies what kind of resource this is. Value: the fixed string "`content#returnPolicy`" */
  var kind: js.UndefOr[String] = js.native
  
  /** Required. The user-defined label of the return policy. For the default policy, use the label "default". */
  var label: js.UndefOr[String] = js.native
  
  /** Required. The name of the policy as shown in Merchant Center. */
  var name: js.UndefOr[String] = js.native
  
  /** Return reasons that will incur return fees. */
  var nonFreeReturnReasons: js.UndefOr[js.Array[String]] = js.native
  
  /** Required. The policy. */
  var policy: js.UndefOr[ReturnPolicyPolicy] = js.native
  
  /** Return policy ID generated by Google. */
  var returnPolicyId: js.UndefOr[String] = js.native
  
  /** An optional list of seasonal overrides. */
  var seasonalOverrides: js.UndefOr[js.Array[ReturnPolicySeasonalOverride]] = js.native
}
object ReturnPolicy {
  
  @scala.inline
  def apply(): ReturnPolicy = {
    val __obj = js.Dynamic.literal()
    __obj.asInstanceOf[ReturnPolicy]
  }
  
  @scala.inline
  implicit class ReturnPolicyMutableBuilder[Self <: ReturnPolicy] (val x: Self) extends AnyVal {
    
    @scala.inline
    def setCountry(value: String): Self = StObject.set(x, "country", value.asInstanceOf[js.Any])
    
    @scala.inline
    def setCountryUndefined: Self = StObject.set(x, "country", js.undefined)
    
    @scala.inline
    def setKind(value: String): Self = StObject.set(x, "kind", value.asInstanceOf[js.Any])
    
    @scala.inline
    def setKindUndefined: Self = StObject.set(x, "kind", js.undefined)
    
    @scala.inline
    def setLabel(value: String): Self = StObject.set(x, "label", value.asInstanceOf[js.Any])
    
    @scala.inline
    def setLabelUndefined: Self = StObject.set(x, "label", js.undefined)
    
    @scala.inline
    def setName(value: String): Self = StObject.set(x, "name", value.asInstanceOf[js.Any])
    
    @scala.inline
    def setNameUndefined: Self = StObject.set(x, "name", js.undefined)
    
    @scala.inline
    def setNonFreeReturnReasons(value: js.Array[String]): Self = StObject.set(x, "nonFreeReturnReasons", value.asInstanceOf[js.Any])
    
    @scala.inline
    def setNonFreeReturnReasonsUndefined: Self = StObject.set(x, "nonFreeReturnReasons", js.undefined)
    
    @scala.inline
    def setNonFreeReturnReasonsVarargs(value: String*): Self = StObject.set(x, "nonFreeReturnReasons", js.Array(value :_*))
    
    @scala.inline
    def setPolicy(value: ReturnPolicyPolicy): Self = StObject.set(x, "policy", value.asInstanceOf[js.Any])
    
    @scala.inline
    def setPolicyUndefined: Self = StObject.set(x, "policy", js.undefined)
    
    @scala.inline
    def setReturnPolicyId(value: String): Self = StObject.set(x, "returnPolicyId", value.asInstanceOf[js.Any])
    
    @scala.inline
    def setReturnPolicyIdUndefined: Self = StObject.set(x, "returnPolicyId", js.undefined)
    
    @scala.inline
    def setSeasonalOverrides(value: js.Array[ReturnPolicySeasonalOverride]): Self = StObject.set(x, "seasonalOverrides", value.asInstanceOf[js.Any])
    
    @scala.inline
    def setSeasonalOverridesUndefined: Self = StObject.set(x, "seasonalOverrides", js.undefined)
    
    @scala.inline
    def setSeasonalOverridesVarargs(value: ReturnPolicySeasonalOverride*): Self = StObject.set(x, "seasonalOverrides", js.Array(value :_*))
  }
}
