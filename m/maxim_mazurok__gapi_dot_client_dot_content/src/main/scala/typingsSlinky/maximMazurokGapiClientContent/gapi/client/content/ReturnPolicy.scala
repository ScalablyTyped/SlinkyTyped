package typingsSlinky.maximMazurokGapiClientContent.gapi.client.content

import scala.scalajs.js
import scala.scalajs.js.`|`
import scala.scalajs.js.annotation.{JSGlobalScope, JSGlobal, JSImport, JSName, JSBracketAccess}

@js.native
trait ReturnPolicy extends js.Object {
  
  /** Required. The country of sale where the return policy is applicable. */
  var country: js.UndefOr[String] = js.native
  
  /** Identifies what kind of resource this is. Value: the fixed string "`content#returnPolicy`" */
  var kind: js.UndefOr[String] = js.native
  
  /** Required. The user-defined label of the return policy. For the default policy, use the label "default". */
  var label: js.UndefOr[String] = js.native
  
  /** Required. The name of the policy as shown in Merchant Center. */
  var name: js.UndefOr[String] = js.native
  
  /** Return reasons that will incur return fees. */
  var nonFreeReturnReasons: js.UndefOr[js.Array[String]] = js.native
  
  /** Required. The policy. */
  var policy: js.UndefOr[ReturnPolicyPolicy] = js.native
  
  /** Return policy ID generated by Google. */
  var returnPolicyId: js.UndefOr[String] = js.native
  
  /** An optional list of seasonal overrides. */
  var seasonalOverrides: js.UndefOr[js.Array[ReturnPolicySeasonalOverride]] = js.native
}
object ReturnPolicy {
  
  @scala.inline
  def apply(): ReturnPolicy = {
    val __obj = js.Dynamic.literal()
    __obj.asInstanceOf[ReturnPolicy]
  }
  
  @scala.inline
  implicit class ReturnPolicyOps[Self <: ReturnPolicy] (val x: Self) extends AnyVal {
    
    @scala.inline
    def duplicate: Self = (js.Dynamic.global.Object.assign(js.Dynamic.literal(), x)).asInstanceOf[Self]
    
    @scala.inline
    def combineWith[Other <: js.Any](other: Other): Self with Other = (js.Dynamic.global.Object.assign(js.Dynamic.literal(), x, other.asInstanceOf[js.Any])).asInstanceOf[Self with Other]
    
    @scala.inline
    def set(key: String, value: js.Any): Self = {
      x.asInstanceOf[js.Dynamic].updateDynamic(key)(value)
      x
    }
    
    @scala.inline
    def setCountry(value: String): Self = this.set("country", value.asInstanceOf[js.Any])
    
    @scala.inline
    def deleteCountry: Self = this.set("country", js.undefined)
    
    @scala.inline
    def setKind(value: String): Self = this.set("kind", value.asInstanceOf[js.Any])
    
    @scala.inline
    def deleteKind: Self = this.set("kind", js.undefined)
    
    @scala.inline
    def setLabel(value: String): Self = this.set("label", value.asInstanceOf[js.Any])
    
    @scala.inline
    def deleteLabel: Self = this.set("label", js.undefined)
    
    @scala.inline
    def setName(value: String): Self = this.set("name", value.asInstanceOf[js.Any])
    
    @scala.inline
    def deleteName: Self = this.set("name", js.undefined)
    
    @scala.inline
    def setNonFreeReturnReasonsVarargs(value: String*): Self = this.set("nonFreeReturnReasons", js.Array(value :_*))
    
    @scala.inline
    def setNonFreeReturnReasons(value: js.Array[String]): Self = this.set("nonFreeReturnReasons", value.asInstanceOf[js.Any])
    
    @scala.inline
    def deleteNonFreeReturnReasons: Self = this.set("nonFreeReturnReasons", js.undefined)
    
    @scala.inline
    def setPolicy(value: ReturnPolicyPolicy): Self = this.set("policy", value.asInstanceOf[js.Any])
    
    @scala.inline
    def deletePolicy: Self = this.set("policy", js.undefined)
    
    @scala.inline
    def setReturnPolicyId(value: String): Self = this.set("returnPolicyId", value.asInstanceOf[js.Any])
    
    @scala.inline
    def deleteReturnPolicyId: Self = this.set("returnPolicyId", js.undefined)
    
    @scala.inline
    def setSeasonalOverridesVarargs(value: ReturnPolicySeasonalOverride*): Self = this.set("seasonalOverrides", js.Array(value :_*))
    
    @scala.inline
    def setSeasonalOverrides(value: js.Array[ReturnPolicySeasonalOverride]): Self = this.set("seasonalOverrides", value.asInstanceOf[js.Any])
    
    @scala.inline
    def deleteSeasonalOverrides: Self = this.set("seasonalOverrides", js.undefined)
  }
}
