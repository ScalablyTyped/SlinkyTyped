package typingsSlinky.microsoftGraph.mod

import org.scalablytyped.runtime.StObject
import scala.scalajs.js
import scala.scalajs.js.`|`
import scala.scalajs.js.annotation.{JSGlobalScope, JSGlobal, JSImport, JSName, JSBracketAccess}

@js.native
trait VulnerabilityState extends StObject {
  
  // Common Vulnerabilities and Exposures (CVE) for the vulnerability.
  var cve: js.UndefOr[NullableOption[String]] = js.native
  
  // Base Common Vulnerability Scoring System (CVSS) severity score for this vulnerability.
  var severity: js.UndefOr[NullableOption[String]] = js.native
  
  /**
    * Indicates whether the detected vulnerability (file) was running at the time of detection or was the file detected at
    * rest on the disk.
    */
  var wasRunning: js.UndefOr[NullableOption[Boolean]] = js.native
}
object VulnerabilityState {
  
  @scala.inline
  def apply(): VulnerabilityState = {
    val __obj = js.Dynamic.literal()
    __obj.asInstanceOf[VulnerabilityState]
  }
  
  @scala.inline
  implicit class VulnerabilityStateMutableBuilder[Self <: VulnerabilityState] (val x: Self) extends AnyVal {
    
    @scala.inline
    def setCve(value: NullableOption[String]): Self = StObject.set(x, "cve", value.asInstanceOf[js.Any])
    
    @scala.inline
    def setCveNull: Self = StObject.set(x, "cve", null)
    
    @scala.inline
    def setCveUndefined: Self = StObject.set(x, "cve", js.undefined)
    
    @scala.inline
    def setSeverity(value: NullableOption[String]): Self = StObject.set(x, "severity", value.asInstanceOf[js.Any])
    
    @scala.inline
    def setSeverityNull: Self = StObject.set(x, "severity", null)
    
    @scala.inline
    def setSeverityUndefined: Self = StObject.set(x, "severity", js.undefined)
    
    @scala.inline
    def setWasRunning(value: NullableOption[Boolean]): Self = StObject.set(x, "wasRunning", value.asInstanceOf[js.Any])
    
    @scala.inline
    def setWasRunningNull: Self = StObject.set(x, "wasRunning", null)
    
    @scala.inline
    def setWasRunningUndefined: Self = StObject.set(x, "wasRunning", js.undefined)
  }
}
