package typingsSlinky.mocha.Mocha

import typingsSlinky.mocha.NodeJS.EventEmitter
import typingsSlinky.mocha.mochaStrings.error
import typingsSlinky.mocha.mochaStrings.failed
import typingsSlinky.mocha.mochaStrings.passed
import scala.scalajs.js
import scala.scalajs.js.`|`
import scala.scalajs.js.annotation.{JSGlobalScope, JSGlobal, JSImport, JSName, JSBracketAccess}

// #endregion Runnable "error" event
// #region Runnable untyped events
// #region Runnable "error" event
/**
  * Initialize a new `Runnable` with the given `title` and callback `fn`.
  *
  * @see https://mochajs.org/api/Runnable.html
  */
@js.native
trait Runnable extends EventEmitter {
  
  var _currentRetry: js.Any = js.native
  
  var _retries: js.Any = js.native
  
  var _slow: js.Any = js.native
  
  var _timeout: js.Any = js.native
  
  var _timeoutError: js.Any = js.native
  
  def addListener(event: String, listener: js.Function1[/* repeated */ js.Any, Unit]): this.type = js.native
  @JSName("addListener")
  def addListener_error(event: error, listener: js.Function1[/* error */ js.Any, Unit]): this.type = js.native
  
  var allowUncaught: js.UndefOr[Boolean] = js.native
  
  var async: Boolean = js.native
  
  var body: String = js.native
  
  var callback: js.UndefOr[Done] = js.native
  
  /**
    * Clear the timeout.
    *
    * @see https://mochajs.org/api/Runnable.html#clearTimeout
    */
  def clearTimeout(): Unit = js.native
  
  var ctx: js.UndefOr[Context] = js.native
  
  /**
    * Set or get current retry
    *
    * @see https://mochajs.org/api/Runnable.html#currentRetry
    */
  /* protected */ def currentRetry(): Double = js.native
  /**
    * Set or get current retry
    *
    * @see https://mochajs.org/api/Runnable.html#currentRetry
    */
  /* protected */ def currentRetry(n: Double): Unit = js.native
  
  var duration: js.UndefOr[Double] = js.native
  
  def emit(name: String, args: js.Any*): Boolean = js.native
  @JSName("emit")
  def emit_error(name: error, error: js.Any): Boolean = js.native
  
  var file: js.UndefOr[String] = js.native
  
  var fn: js.UndefOr[Func | AsyncFunc] = js.native
  
  /**
    * Return the full title generated by recursively concatenating the parent's full title.
    */
  def fullTitle(): String = js.native
  
  /**
    * Get a list of whitelisted globals for this test run.
    *
    * @see https://mochajs.org/api/Runnable.html#globals
    */
  def globals(): js.Array[String] = js.native
  /**
    * Set a list of whitelisted globals for this test run.
    *
    * @see https://mochajs.org/api/Runnable.html#globals
    */
  def globals(globals: js.Array[String]): Unit = js.native
  
  /**
    * Inspect the runnable void of private properties.
    *
    * @see https://mochajs.org/api/Runnable.html#inspect
    */
  def inspect(): String = js.native
  
  /**
    * Return `true` if this Runnable has failed.
    */
  def isFailed(): Boolean = js.native
  
  /**
    * Return `true` if this Runnable has passed.
    */
  def isPassed(): Boolean = js.native
  
  /**
    * Check if this runnable or its parent suite is marked as pending.
    *
    * @see https://mochajs.org/api/Runnable.html#isPending
    */
  def isPending(): Boolean = js.native
  
  def on(event: String, listener: js.Function1[/* repeated */ js.Any, Unit]): this.type = js.native
  @JSName("on")
  def on_error(event: error, listener: js.Function1[/* error */ js.Any, Unit]): this.type = js.native
  
  def once(event: String, listener: js.Function1[/* repeated */ js.Any, Unit]): this.type = js.native
  @JSName("once")
  def once_error(event: error, listener: js.Function1[/* error */ js.Any, Unit]): this.type = js.native
  
  var parent: js.UndefOr[Suite] = js.native
  
  var pending: Boolean = js.native
  
  def prependListener(event: String, listener: js.Function1[/* repeated */ js.Any, Unit]): this.type = js.native
  @JSName("prependListener")
  def prependListener_error(event: error, listener: js.Function1[/* error */ js.Any, Unit]): this.type = js.native
  
  def prependOnceListener(event: String, listener: js.Function1[/* repeated */ js.Any, Unit]): this.type = js.native
  @JSName("prependOnceListener")
  def prependOnceListener_error(event: error, listener: js.Function1[/* error */ js.Any, Unit]): this.type = js.native
  
  def removeListener(event: String, listener: js.Function1[/* repeated */ js.Any, Unit]): this.type = js.native
  @JSName("removeListener")
  def removeListener_error(event: error, listener: js.Function1[/* error */ js.Any, Unit]): this.type = js.native
  
  /**
    * Reset the timeout.
    *
    * @see https://mochajs.org/api/Runnable.html#resetTimeout
    */
  def resetTimeout(): Unit = js.native
  
  /**
    * Set or get number of retries.
    *
    * @see https://mochajs.org/api/Runnable.html#retries
    */
  def retries(): Double = js.native
  /**
    * Set or get number of retries.
    *
    * @see https://mochajs.org/api/Runnable.html#retries
    */
  def retries(n: Double): Unit = js.native
  
  /**
    * Run the test and invoke `fn(err)`.
    *
    * @see https://mochajs.org/api/Runnable.html#run
    */
  def run(fn: Done): Unit = js.native
  
  /**
    * Halt and mark as pending.
    */
  def skip(): scala.Nothing = js.native
  
  /**
    * Get test slowness threshold.
    *
    * @see https://mochajs.org/api/Runnable.html#slow
    */
  def slow(): Double = js.native
  /**
    * Set test slowness threshold.
    *
    * @see https://mochajs.org/api/Runnable.html#slow
    */
  def slow(ms: String): this.type = js.native
  def slow(ms: Double): this.type = js.native
  
  var state: js.UndefOr[failed | passed] = js.native
  
  var sync: Boolean = js.native
  
  var timedOut: Boolean = js.native
  
  /**
    * Get test timeout.
    *
    * @see https://mochajs.org/api/Runnable.html#timeout
    */
  def timeout(): Double = js.native
  /**
    * Set test timeout.
    *
    * @see https://mochajs.org/api/Runnable.html#timeout
    */
  def timeout(ms: String): this.type = js.native
  def timeout(ms: Double): this.type = js.native
  
  var timer: js.UndefOr[js.Any] = js.native
  
  var title: String = js.native
  
  /**
    * Return the title path generated by concatenating the parent's title path with the title.
    */
  def titlePath(): js.Array[String] = js.native
}
