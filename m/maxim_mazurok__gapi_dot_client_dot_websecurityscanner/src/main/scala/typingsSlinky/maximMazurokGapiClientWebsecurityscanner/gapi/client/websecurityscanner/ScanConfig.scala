package typingsSlinky.maximMazurokGapiClientWebsecurityscanner.gapi.client.websecurityscanner

import scala.scalajs.js
import scala.scalajs.js.`|`
import scala.scalajs.js.annotation.{JSGlobalScope, JSGlobal, JSImport, JSName, JSBracketAccess}

@js.native
trait ScanConfig extends js.Object {
  
  /** The authentication configuration. If specified, service will use the authentication configuration during scanning. */
  var authentication: js.UndefOr[Authentication] = js.native
  
  /** The excluded URL patterns as described in https://cloud.google.com/security-command-center/docs/how-to-use-web-security-scanner#excluding_urls */
  var blacklistPatterns: js.UndefOr[js.Array[String]] = js.native
  
  /** Required. The user provided display name of the ScanConfig. */
  var displayName: js.UndefOr[String] = js.native
  
  /** Controls export of scan configurations and results to Security Command Center. */
  var exportToSecurityCommandCenter: js.UndefOr[String] = js.native
  
  /** Whether the scan config is managed by Web Security Scanner, output only. */
  var managedScan: js.UndefOr[Boolean] = js.native
  
  /**
    * The maximum QPS during scanning. A valid value ranges from 5 to 20 inclusively. If the field is unspecified or its value is set 0, server will default to 15. Other values outside of
    * [5, 20] range will be rejected with INVALID_ARGUMENT error.
    */
  var maxQps: js.UndefOr[Double] = js.native
  
  /** The resource name of the ScanConfig. The name follows the format of 'projects/{projectId}/scanConfigs/{scanConfigId}'. The ScanConfig IDs are generated by the system. */
  var name: js.UndefOr[String] = js.native
  
  /** The risk level selected for the scan */
  var riskLevel: js.UndefOr[String] = js.native
  
  /** The schedule of the ScanConfig. */
  var schedule: js.UndefOr[Schedule] = js.native
  
  /** Required. The starting URLs from which the scanner finds site pages. */
  var startingUrls: js.UndefOr[js.Array[String]] = js.native
  
  /** Whether the scan configuration has enabled static IP address scan feature. If enabled, the scanner will access applications from static IP addresses. */
  var staticIpScan: js.UndefOr[Boolean] = js.native
  
  /** The user agent used during scanning. */
  var userAgent: js.UndefOr[String] = js.native
}
object ScanConfig {
  
  @scala.inline
  def apply(): ScanConfig = {
    val __obj = js.Dynamic.literal()
    __obj.asInstanceOf[ScanConfig]
  }
  
  @scala.inline
  implicit class ScanConfigOps[Self <: ScanConfig] (val x: Self) extends AnyVal {
    
    @scala.inline
    def duplicate: Self = (js.Dynamic.global.Object.assign(js.Dynamic.literal(), x)).asInstanceOf[Self]
    
    @scala.inline
    def combineWith[Other <: js.Any](other: Other): Self with Other = (js.Dynamic.global.Object.assign(js.Dynamic.literal(), x, other.asInstanceOf[js.Any])).asInstanceOf[Self with Other]
    
    @scala.inline
    def set(key: String, value: js.Any): Self = {
      x.asInstanceOf[js.Dynamic].updateDynamic(key)(value)
      x
    }
    
    @scala.inline
    def setAuthentication(value: Authentication): Self = this.set("authentication", value.asInstanceOf[js.Any])
    
    @scala.inline
    def deleteAuthentication: Self = this.set("authentication", js.undefined)
    
    @scala.inline
    def setBlacklistPatternsVarargs(value: String*): Self = this.set("blacklistPatterns", js.Array(value :_*))
    
    @scala.inline
    def setBlacklistPatterns(value: js.Array[String]): Self = this.set("blacklistPatterns", value.asInstanceOf[js.Any])
    
    @scala.inline
    def deleteBlacklistPatterns: Self = this.set("blacklistPatterns", js.undefined)
    
    @scala.inline
    def setDisplayName(value: String): Self = this.set("displayName", value.asInstanceOf[js.Any])
    
    @scala.inline
    def deleteDisplayName: Self = this.set("displayName", js.undefined)
    
    @scala.inline
    def setExportToSecurityCommandCenter(value: String): Self = this.set("exportToSecurityCommandCenter", value.asInstanceOf[js.Any])
    
    @scala.inline
    def deleteExportToSecurityCommandCenter: Self = this.set("exportToSecurityCommandCenter", js.undefined)
    
    @scala.inline
    def setManagedScan(value: Boolean): Self = this.set("managedScan", value.asInstanceOf[js.Any])
    
    @scala.inline
    def deleteManagedScan: Self = this.set("managedScan", js.undefined)
    
    @scala.inline
    def setMaxQps(value: Double): Self = this.set("maxQps", value.asInstanceOf[js.Any])
    
    @scala.inline
    def deleteMaxQps: Self = this.set("maxQps", js.undefined)
    
    @scala.inline
    def setName(value: String): Self = this.set("name", value.asInstanceOf[js.Any])
    
    @scala.inline
    def deleteName: Self = this.set("name", js.undefined)
    
    @scala.inline
    def setRiskLevel(value: String): Self = this.set("riskLevel", value.asInstanceOf[js.Any])
    
    @scala.inline
    def deleteRiskLevel: Self = this.set("riskLevel", js.undefined)
    
    @scala.inline
    def setSchedule(value: Schedule): Self = this.set("schedule", value.asInstanceOf[js.Any])
    
    @scala.inline
    def deleteSchedule: Self = this.set("schedule", js.undefined)
    
    @scala.inline
    def setStartingUrlsVarargs(value: String*): Self = this.set("startingUrls", js.Array(value :_*))
    
    @scala.inline
    def setStartingUrls(value: js.Array[String]): Self = this.set("startingUrls", value.asInstanceOf[js.Any])
    
    @scala.inline
    def deleteStartingUrls: Self = this.set("startingUrls", js.undefined)
    
    @scala.inline
    def setStaticIpScan(value: Boolean): Self = this.set("staticIpScan", value.asInstanceOf[js.Any])
    
    @scala.inline
    def deleteStaticIpScan: Self = this.set("staticIpScan", js.undefined)
    
    @scala.inline
    def setUserAgent(value: String): Self = this.set("userAgent", value.asInstanceOf[js.Any])
    
    @scala.inline
    def deleteUserAgent: Self = this.set("userAgent", js.undefined)
  }
}
