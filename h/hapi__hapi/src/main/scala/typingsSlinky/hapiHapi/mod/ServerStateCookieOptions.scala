package typingsSlinky.hapiHapi.mod

import typingsSlinky.hapiHapi.anon.Integrity
import typingsSlinky.hapiHapi.hapiHapiStrings.base64
import typingsSlinky.hapiHapi.hapiHapiStrings.base64json
import typingsSlinky.hapiHapi.hapiHapiStrings.form
import typingsSlinky.hapiHapi.hapiHapiStrings.iron
import typingsSlinky.hapiHapi.hapiHapiStrings.none_
import typingsSlinky.hapiIron.mod.SealOptions
import org.scalablytyped.runtime.StObject
import scala.scalajs.js
import scala.scalajs.js.`|`
import scala.scalajs.js.annotation.{JSGlobalScope, JSGlobal, JSImport, JSName, JSBracketAccess}

@js.native
trait ServerStateCookieOptions extends StObject {
  
  /**
    * if present and the cookie was not received from the client or explicitly set by the route handler, the
    * cookie is automatically added to the response with the provided value. The value can be
    * a function with signature async function(request) where:
    */
  var autoValue: js.UndefOr[js.Function1[/* request */ Request, Unit]] = js.native
  
  /** if true, automatically instruct the client to remove invalid cookies. Defaults to false. */
  var clearInvalid: js.UndefOr[Boolean] = js.native
  
  /** the domain scope. Defaults to null (no domain). */
  var domain: js.UndefOr[String | Null] = js.native
  
  /**
    * encoding performs on the provided value before serialization. Options are:
    *  * 'none' - no encoding. When used, the cookie value must be a string. This is the default value.
    *  * 'base64' - string value is encoded using Base64.
    *  * 'base64json' - object value is JSON-stringified then encoded using Base64.
    *  * 'form' - object value is encoded using the x-www-form-urlencoded method.
    *  * 'iron' - Encrypts and sign the value using iron.
    */
  var encoding: js.UndefOr[none_ | base64 | base64json | form | iron] = js.native
  
  /** if true, errors are ignored and treated as missing cookies. */
  var ignoreErrors: js.UndefOr[Boolean] = js.native
  
  /** options for 'iron' encoding. Defaults to require('@hapi/iron').defaults. */
  var iron: js.UndefOr[SealOptions] = js.native
  
  /** sets the 'HttpOnly' flag. Defaults to true. */
  var isHttpOnly: js.UndefOr[Boolean] = js.native
  
  /**
    * sets the 'SameSite' flag. The value must be one of:
    *  * false - no flag.
    *  * 'Strict' - sets the value to 'Strict' (this is the default value).
    *  * 'Lax' - sets the value to 'Lax'.
    */
  var isSameSite: js.UndefOr[SameSitePolicy] = js.native
  
  /** sets the 'Secure' flag. Defaults to true. */
  var isSecure: js.UndefOr[Boolean] = js.native
  
  /** used by proxy plugins (e.g. h2o2). */
  var passThrough: js.UndefOr[js.Any] = js.native
  
  /** password used for 'iron' encoding (must be at least 32 characters long). */
  var password: js.UndefOr[String] = js.native
  
  /** the path scope. Defaults to null (no path). */
  var path: js.UndefOr[String | Null] = js.native
  
  /**
    * an object used to calculate an HMAC for cookie integrity validation. This does not provide privacy, only a mean
    * to verify that the cookie value was generated by the server. Redundant when 'iron' encoding is used. Options are:
    *  * integrity - algorithm options. Defaults to require('@hapi/iron').defaults.integrity.
    *  * password - password used for HMAC key generation (must be at least 32 characters long).
    */
  var sign: js.UndefOr[Integrity] = js.native
  
  /** if false, allows any cookie value including values in violation of RFC 6265. Defaults to true. */
  var strictHeader: js.UndefOr[Boolean] = js.native
  
  /** time-to-live in milliseconds. Defaults to null (session time-life - cookies are deleted when the browser is closed). */
  var ttl: js.UndefOr[Double | Null] = js.native
}
object ServerStateCookieOptions {
  
  @scala.inline
  def apply(): ServerStateCookieOptions = {
    val __obj = js.Dynamic.literal()
    __obj.asInstanceOf[ServerStateCookieOptions]
  }
  
  @scala.inline
  implicit class ServerStateCookieOptionsMutableBuilder[Self <: ServerStateCookieOptions] (val x: Self) extends AnyVal {
    
    @scala.inline
    def setAutoValue(value: /* request */ Request => Unit): Self = StObject.set(x, "autoValue", js.Any.fromFunction1(value))
    
    @scala.inline
    def setAutoValueUndefined: Self = StObject.set(x, "autoValue", js.undefined)
    
    @scala.inline
    def setClearInvalid(value: Boolean): Self = StObject.set(x, "clearInvalid", value.asInstanceOf[js.Any])
    
    @scala.inline
    def setClearInvalidUndefined: Self = StObject.set(x, "clearInvalid", js.undefined)
    
    @scala.inline
    def setDomain(value: String): Self = StObject.set(x, "domain", value.asInstanceOf[js.Any])
    
    @scala.inline
    def setDomainNull: Self = StObject.set(x, "domain", null)
    
    @scala.inline
    def setDomainUndefined: Self = StObject.set(x, "domain", js.undefined)
    
    @scala.inline
    def setEncoding(value: none_ | base64 | base64json | form | iron): Self = StObject.set(x, "encoding", value.asInstanceOf[js.Any])
    
    @scala.inline
    def setEncodingUndefined: Self = StObject.set(x, "encoding", js.undefined)
    
    @scala.inline
    def setIgnoreErrors(value: Boolean): Self = StObject.set(x, "ignoreErrors", value.asInstanceOf[js.Any])
    
    @scala.inline
    def setIgnoreErrorsUndefined: Self = StObject.set(x, "ignoreErrors", js.undefined)
    
    @scala.inline
    def setIron(value: SealOptions): Self = StObject.set(x, "iron", value.asInstanceOf[js.Any])
    
    @scala.inline
    def setIronUndefined: Self = StObject.set(x, "iron", js.undefined)
    
    @scala.inline
    def setIsHttpOnly(value: Boolean): Self = StObject.set(x, "isHttpOnly", value.asInstanceOf[js.Any])
    
    @scala.inline
    def setIsHttpOnlyUndefined: Self = StObject.set(x, "isHttpOnly", js.undefined)
    
    @scala.inline
    def setIsSameSite(value: SameSitePolicy): Self = StObject.set(x, "isSameSite", value.asInstanceOf[js.Any])
    
    @scala.inline
    def setIsSameSiteUndefined: Self = StObject.set(x, "isSameSite", js.undefined)
    
    @scala.inline
    def setIsSecure(value: Boolean): Self = StObject.set(x, "isSecure", value.asInstanceOf[js.Any])
    
    @scala.inline
    def setIsSecureUndefined: Self = StObject.set(x, "isSecure", js.undefined)
    
    @scala.inline
    def setPassThrough(value: js.Any): Self = StObject.set(x, "passThrough", value.asInstanceOf[js.Any])
    
    @scala.inline
    def setPassThroughUndefined: Self = StObject.set(x, "passThrough", js.undefined)
    
    @scala.inline
    def setPassword(value: String): Self = StObject.set(x, "password", value.asInstanceOf[js.Any])
    
    @scala.inline
    def setPasswordUndefined: Self = StObject.set(x, "password", js.undefined)
    
    @scala.inline
    def setPath(value: String): Self = StObject.set(x, "path", value.asInstanceOf[js.Any])
    
    @scala.inline
    def setPathNull: Self = StObject.set(x, "path", null)
    
    @scala.inline
    def setPathUndefined: Self = StObject.set(x, "path", js.undefined)
    
    @scala.inline
    def setSign(value: Integrity): Self = StObject.set(x, "sign", value.asInstanceOf[js.Any])
    
    @scala.inline
    def setSignUndefined: Self = StObject.set(x, "sign", js.undefined)
    
    @scala.inline
    def setStrictHeader(value: Boolean): Self = StObject.set(x, "strictHeader", value.asInstanceOf[js.Any])
    
    @scala.inline
    def setStrictHeaderUndefined: Self = StObject.set(x, "strictHeader", js.undefined)
    
    @scala.inline
    def setTtl(value: Double): Self = StObject.set(x, "ttl", value.asInstanceOf[js.Any])
    
    @scala.inline
    def setTtlNull: Self = StObject.set(x, "ttl", null)
    
    @scala.inline
    def setTtlUndefined: Self = StObject.set(x, "ttl", js.undefined)
  }
}
