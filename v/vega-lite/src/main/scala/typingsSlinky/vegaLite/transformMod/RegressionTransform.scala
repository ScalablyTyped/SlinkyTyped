package typingsSlinky.vegaLite.transformMod

import typingsSlinky.vegaLite.channeldefMod.FieldName
import typingsSlinky.vegaLite.vegaLiteStrings.exp
import typingsSlinky.vegaLite.vegaLiteStrings.linear
import typingsSlinky.vegaLite.vegaLiteStrings.log
import typingsSlinky.vegaLite.vegaLiteStrings.poly
import typingsSlinky.vegaLite.vegaLiteStrings.pow
import typingsSlinky.vegaLite.vegaLiteStrings.quad
import org.scalablytyped.runtime.StObject
import scala.scalajs.js
import scala.scalajs.js.`|`
import scala.scalajs.js.annotation.{JSGlobalScope, JSGlobal, JSImport, JSName, JSBracketAccess}

@js.native
trait RegressionTransform extends Transform {
  
  /**
    * The output field names for the smoothed points generated by the regression transform.
    *
    * __Default value:__ The field names of the input x and y values.
    */
  var as: js.UndefOr[js.Tuple2[FieldName, FieldName]] = js.native
  
  /**
    * A [min, max] domain over the independent (x) field for the starting and ending points of the generated trend line.
    */
  var extent: js.UndefOr[js.Tuple2[Double, Double]] = js.native
  
  /**
    * The data fields to group by. If not specified, a single group containing all data objects will be used.
    */
  var groupby: js.UndefOr[js.Array[FieldName]] = js.native
  
  /**
    * The functional form of the regression model. One of `"linear"`, `"log"`, `"exp"`, `"pow"`, `"quad"`, or `"poly"`.
    *
    * __Default value:__ `"linear"`
    */
  var method: js.UndefOr[linear | log | exp | pow | quad | poly] = js.native
  
  /**
    * The data field of the independent variable to use a predictor.
    */
  var on: FieldName = js.native
  
  /**
    * The polynomial order (number of coefficients) for the 'poly' method.
    *
    * __Default value:__ `3`
    */
  var order: js.UndefOr[Double] = js.native
  
  /**
    * A boolean flag indicating if the transform should return the regression model parameters (one object per group), rather than trend line points.
    * The resulting objects include a `coef` array of fitted coefficient values (starting with the intercept term and then including terms of increasing order)
    * and an `rSquared` value (indicating the total variance explained by the model).
    *
    * __Default value:__ `false`
    */
  var params: js.UndefOr[Boolean] = js.native
  
  /**
    * The data field of the dependent variable to predict.
    */
  var regression: FieldName = js.native
}
object RegressionTransform {
  
  @scala.inline
  def apply(on: FieldName, regression: FieldName): RegressionTransform = {
    val __obj = js.Dynamic.literal(on = on.asInstanceOf[js.Any], regression = regression.asInstanceOf[js.Any])
    __obj.asInstanceOf[RegressionTransform]
  }
  
  @scala.inline
  implicit class RegressionTransformMutableBuilder[Self <: RegressionTransform] (val x: Self) extends AnyVal {
    
    @scala.inline
    def setAs(value: js.Tuple2[FieldName, FieldName]): Self = StObject.set(x, "as", value.asInstanceOf[js.Any])
    
    @scala.inline
    def setAsUndefined: Self = StObject.set(x, "as", js.undefined)
    
    @scala.inline
    def setExtent(value: js.Tuple2[Double, Double]): Self = StObject.set(x, "extent", value.asInstanceOf[js.Any])
    
    @scala.inline
    def setExtentUndefined: Self = StObject.set(x, "extent", js.undefined)
    
    @scala.inline
    def setGroupby(value: js.Array[FieldName]): Self = StObject.set(x, "groupby", value.asInstanceOf[js.Any])
    
    @scala.inline
    def setGroupbyUndefined: Self = StObject.set(x, "groupby", js.undefined)
    
    @scala.inline
    def setGroupbyVarargs(value: FieldName*): Self = StObject.set(x, "groupby", js.Array(value :_*))
    
    @scala.inline
    def setMethod(value: linear | log | exp | pow | quad | poly): Self = StObject.set(x, "method", value.asInstanceOf[js.Any])
    
    @scala.inline
    def setMethodUndefined: Self = StObject.set(x, "method", js.undefined)
    
    @scala.inline
    def setOn(value: FieldName): Self = StObject.set(x, "on", value.asInstanceOf[js.Any])
    
    @scala.inline
    def setOrder(value: Double): Self = StObject.set(x, "order", value.asInstanceOf[js.Any])
    
    @scala.inline
    def setOrderUndefined: Self = StObject.set(x, "order", js.undefined)
    
    @scala.inline
    def setParams(value: Boolean): Self = StObject.set(x, "params", value.asInstanceOf[js.Any])
    
    @scala.inline
    def setParamsUndefined: Self = StObject.set(x, "params", js.undefined)
    
    @scala.inline
    def setRegression(value: FieldName): Self = StObject.set(x, "regression", value.asInstanceOf[js.Any])
  }
}
