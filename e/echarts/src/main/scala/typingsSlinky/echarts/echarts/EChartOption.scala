package typingsSlinky.echarts.echarts

import org.scalablytyped.runtime.StringDictionary
import org.scalajs.dom.raw.HTMLCanvasElement
import org.scalajs.dom.raw.HTMLElement
import org.scalajs.dom.raw.HTMLImageElement
import typingsSlinky.echarts.anon.Animation
import typingsSlinky.echarts.anon.AnimationAnimationDelay
import typingsSlinky.echarts.anon.AnimationDelay
import typingsSlinky.echarts.anon.AnimationDelayAnimationDelayUpdate
import typingsSlinky.echarts.anon.AnimationDelayUpdate
import typingsSlinky.echarts.anon.AnimationDuration
import typingsSlinky.echarts.anon.AnimationDurationUpdate
import typingsSlinky.echarts.anon.AnimationEasing
import typingsSlinky.echarts.anon.AnimationEasingUpdate
import typingsSlinky.echarts.anon.AnimationThreshold
import typingsSlinky.echarts.anon.AreaColorEmphasis
import typingsSlinky.echarts.anon.AreaStyle
import typingsSlinky.echarts.anon.AreaStyleItemStyle
import typingsSlinky.echarts.anon.BarBorderColor
import typingsSlinky.echarts.anon.BarBorderRadius
import typingsSlinky.echarts.anon.BarBorderWidth
import typingsSlinky.echarts.anon.BorderColor
import typingsSlinky.echarts.anon.BorderColor0
import typingsSlinky.echarts.anon.BorderColorBorderType
import typingsSlinky.echarts.anon.BorderColorSaturation
import typingsSlinky.echarts.anon.BorderRadius
import typingsSlinky.echarts.anon.BorderType
import typingsSlinky.echarts.anon.BorderWidth
import typingsSlinky.echarts.anon.Bottom
import typingsSlinky.echarts.anon.BrushType
import typingsSlinky.echarts.anon.Children
import typingsSlinky.echarts.anon.ChildrenVisibleMin
import typingsSlinky.echarts.anon.Clockwise
import typingsSlinky.echarts.anon.ColorCurveness
import typingsSlinky.echarts.anon.ColorOpacity
import typingsSlinky.echarts.anon.ConstantSpeed
import typingsSlinky.echarts.anon.Cpx1
import typingsSlinky.echarts.anon.CurvenessShadowBlur
import typingsSlinky.echarts.anon.Cx
import typingsSlinky.echarts.anon.Cy
import typingsSlinky.echarts.anon.D
import typingsSlinky.echarts.anon.DictunknownProperty
import typingsSlinky.echarts.anon.DictunknownPropertyBorderColor
import typingsSlinky.echarts.anon.Distance
import typingsSlinky.echarts.anon.Downplay
import typingsSlinky.echarts.anon.EdgeLabel
import typingsSlinky.echarts.anon.EdgeLength
import typingsSlinky.echarts.anon.Ellipsis
import typingsSlinky.echarts.anon.EmphasisItemStyle
import typingsSlinky.echarts.anon.Fill
import typingsSlinky.echarts.anon.Font
import typingsSlinky.echarts.anon.FontFamily
import typingsSlinky.echarts.anon.FontSize
import typingsSlinky.echarts.anon.FontWeight
import typingsSlinky.echarts.anon.Height
import typingsSlinky.echarts.anon.Icon
import typingsSlinky.echarts.anon.ItemStyle
import typingsSlinky.echarts.anon.ItemStyleLabel
import typingsSlinky.echarts.anon.ItemStyleLabelLineStyle
import typingsSlinky.echarts.anon.LabelLabelLine
import typingsSlinky.echarts.anon.LabelLine
import typingsSlinky.echarts.anon.LabelLineStyle
import typingsSlinky.echarts.anon.Length
import typingsSlinky.echarts.anon.Length2
import typingsSlinky.echarts.anon.LengthLineStyle
import typingsSlinky.echarts.anon.LengthShow
import typingsSlinky.echarts.anon.LineStyleShow
import typingsSlinky.echarts.anon.Max
import typingsSlinky.echarts.anon.Min
import typingsSlinky.echarts.anon.MinAngle
import typingsSlinky.echarts.anon.Offset
import typingsSlinky.echarts.anon.OffsetCenter
import typingsSlinky.echarts.anon.Opacity
import typingsSlinky.echarts.anon.Origin
import typingsSlinky.echarts.anon.Padding
import typingsSlinky.echarts.anon.Percent
import typingsSlinky.echarts.anon.Points
import typingsSlinky.echarts.anon.Precision
import typingsSlinky.echarts.anon.R
import typingsSlinky.echarts.anon.Rich
import typingsSlinky.echarts.anon.Rotate
import typingsSlinky.echarts.anon.RotateLabel
import typingsSlinky.echarts.anon.ShadowBlur
import typingsSlinky.echarts.anon.ShadowColor
import typingsSlinky.echarts.anon.ShadowOffsetY
import typingsSlinky.echarts.anon.Silent
import typingsSlinky.echarts.anon.Smooth
import typingsSlinky.echarts.anon.SplitNumber
import typingsSlinky.echarts.anon.TextBorderColor
import typingsSlinky.echarts.anon.TextBorderWidth
import typingsSlinky.echarts.anon.TextShadowColor
import typingsSlinky.echarts.anon.UpperLabel
import typingsSlinky.echarts.anon.`10`
import typingsSlinky.echarts.anon.`11`
import typingsSlinky.echarts.anon.`14`
import typingsSlinky.echarts.anon.`15`
import typingsSlinky.echarts.anon.`16`
import typingsSlinky.echarts.anon.`17`
import typingsSlinky.echarts.anon.`18`
import typingsSlinky.echarts.anon.`19`
import typingsSlinky.echarts.anon.`20`
import typingsSlinky.echarts.anon.`21`
import typingsSlinky.echarts.anon.`22`
import typingsSlinky.echarts.anon.`23`
import typingsSlinky.echarts.anon.`24`
import typingsSlinky.echarts.anon.`2`
import typingsSlinky.echarts.anon.`3`
import typingsSlinky.echarts.anon.`4`
import typingsSlinky.echarts.anon.`7`
import typingsSlinky.echarts.anon.`8`
import typingsSlinky.echarts.anon.`9`
import typingsSlinky.echarts.echarts.EChartOption.AxisPointer
import typingsSlinky.echarts.echarts.EChartOption.BaseTextStyle
import typingsSlinky.echarts.echarts.EChartOption.BasicComponents.CartesianAxis
import typingsSlinky.echarts.echarts.EChartOption.BasicComponents.CartesianAxis.DataObject
import typingsSlinky.echarts.echarts.EChartOption.BasicComponents.CartesianAxis.Label
import typingsSlinky.echarts.echarts.EChartOption.BasicComponents.CartesianAxis.MinorSplitLine
import typingsSlinky.echarts.echarts.EChartOption.BasicComponents.CartesianAxis.MinorTick
import typingsSlinky.echarts.echarts.EChartOption.BasicComponents.CartesianAxis.Pointer
import typingsSlinky.echarts.echarts.EChartOption.BasicComponents.CartesianAxis.PointerLabel
import typingsSlinky.echarts.echarts.EChartOption.BasicComponents.CartesianAxis.SplitArea
import typingsSlinky.echarts.echarts.EChartOption.BasicComponents.CartesianAxis.SplitLine
import typingsSlinky.echarts.echarts.EChartOption.BasicComponents.CartesianAxis.Tick
import typingsSlinky.echarts.echarts.EChartOption.Calendar
import typingsSlinky.echarts.echarts.EChartOption.Calendar.DayLabel
import typingsSlinky.echarts.echarts.EChartOption.Calendar.MonthLabel
import typingsSlinky.echarts.echarts.EChartOption.Calendar.YearLabel
import typingsSlinky.echarts.echarts.EChartOption.Color
import typingsSlinky.echarts.echarts.EChartOption.DataZoom
import typingsSlinky.echarts.echarts.EChartOption.Dataset
import typingsSlinky.echarts.echarts.EChartOption.Dataset.DimensionObject
import typingsSlinky.echarts.echarts.EChartOption.Grid
import typingsSlinky.echarts.echarts.EChartOption.Legend
import typingsSlinky.echarts.echarts.EChartOption.Legend.LegendDataObject
import typingsSlinky.echarts.echarts.EChartOption.Legend.PageFormatter
import typingsSlinky.echarts.echarts.EChartOption.Legend.PageIcons
import typingsSlinky.echarts.echarts.EChartOption.SeriesCustom.RenderItem
import typingsSlinky.echarts.echarts.EChartOption.SeriesGraph.CategoryObject
import typingsSlinky.echarts.echarts.EChartOption.SeriesGraph.LinkObject
import typingsSlinky.echarts.echarts.EChartOption.SingleAxis
import typingsSlinky.echarts.echarts.EChartOption.Tooltip
import typingsSlinky.echarts.echarts.EChartOption.Tooltip.Format
import typingsSlinky.echarts.echarts.EChartOption.Tooltip.Formatter
import typingsSlinky.echarts.echarts.EChartOption.Tooltip.Position.Obj
import typingsSlinky.echarts.echarts.EChartOption.Tooltip.Position.Type
import typingsSlinky.echarts.echarts.EChartOption.XAxis
import typingsSlinky.echarts.echarts.EChartOption.YAxis
import typingsSlinky.echarts.echartsNumbers.`100`
import typingsSlinky.echarts.echartsNumbers.`200`
import typingsSlinky.echarts.echartsNumbers.`300`
import typingsSlinky.echarts.echartsNumbers.`400`
import typingsSlinky.echarts.echartsNumbers.`500`
import typingsSlinky.echarts.echartsNumbers.`600`
import typingsSlinky.echarts.echartsNumbers.`700`
import typingsSlinky.echarts.echartsNumbers.`800`
import typingsSlinky.echarts.echartsNumbers.`900`
import typingsSlinky.echarts.echartsStrings.`no-repeat`
import typingsSlinky.echarts.echartsStrings.`repeat-x`
import typingsSlinky.echarts.echartsStrings.`repeat-y`
import typingsSlinky.echarts.echartsStrings.angle
import typingsSlinky.echarts.echartsStrings.auto
import typingsSlinky.echarts.echartsStrings.axis
import typingsSlinky.echarts.echartsStrings.bar
import typingsSlinky.echarts.echartsStrings.bold
import typingsSlinky.echarts.echartsStrings.bolder
import typingsSlinky.echarts.echartsStrings.bottom
import typingsSlinky.echarts.echartsStrings.calendar
import typingsSlinky.echarts.echartsStrings.cartesian2d
import typingsSlinky.echarts.echartsStrings.center
import typingsSlinky.echarts.echartsStrings.click
import typingsSlinky.echarts.echartsStrings.cross
import typingsSlinky.echarts.echartsStrings.dashed
import typingsSlinky.echarts.echartsStrings.dotted
import typingsSlinky.echarts.echartsStrings.empty
import typingsSlinky.echarts.echartsStrings.end
import typingsSlinky.echarts.echartsStrings.filter
import typingsSlinky.echarts.echartsStrings.float
import typingsSlinky.echarts.echartsStrings.geo
import typingsSlinky.echarts.echartsStrings.horizontal
import typingsSlinky.echarts.echartsStrings.html
import typingsSlinky.echarts.echartsStrings.int
import typingsSlinky.echarts.echartsStrings.italic
import typingsSlinky.echarts.echartsStrings.item
import typingsSlinky.echarts.echartsStrings.left
import typingsSlinky.echarts.echartsStrings.lighter
import typingsSlinky.echarts.echartsStrings.line
import typingsSlinky.echarts.echartsStrings.linear
import typingsSlinky.echarts.echartsStrings.middle
import typingsSlinky.echarts.echartsStrings.mousemove
import typingsSlinky.echarts.echartsStrings.mousemoveVerticallineclick
import typingsSlinky.echarts.echartsStrings.multiple
import typingsSlinky.echarts.echartsStrings.none
import typingsSlinky.echarts.echartsStrings.normal
import typingsSlinky.echarts.echartsStrings.number
import typingsSlinky.echarts.echartsStrings.oblique
import typingsSlinky.echarts.echartsStrings.ordinal
import typingsSlinky.echarts.echartsStrings.plain
import typingsSlinky.echarts.echartsStrings.polar
import typingsSlinky.echarts.echartsStrings.radial
import typingsSlinky.echarts.echartsStrings.radius
import typingsSlinky.echarts.echartsStrings.repeat
import typingsSlinky.echarts.echartsStrings.right
import typingsSlinky.echarts.echartsStrings.scroll
import typingsSlinky.echarts.echartsStrings.series
import typingsSlinky.echarts.echartsStrings.shadow
import typingsSlinky.echarts.echartsStrings.single
import typingsSlinky.echarts.echartsStrings.singleAxis
import typingsSlinky.echarts.echartsStrings.solid
import typingsSlinky.echarts.echartsStrings.start
import typingsSlinky.echarts.echartsStrings.time
import typingsSlinky.echarts.echartsStrings.top
import typingsSlinky.echarts.echartsStrings.vertical
import typingsSlinky.echarts.echartsStrings.weakFilter
import typingsSlinky.echarts.echartsStrings.x
import typingsSlinky.echarts.echartsStrings.y
import org.scalablytyped.runtime.StObject
import scala.scalajs.js
import scala.scalajs.js.`|`
import scala.scalajs.js.annotation.{JSGlobalScope, JSGlobal, JSImport, JSName, JSBracketAccess}

@js.native
trait EChartOption[TSeries] extends StObject {
  
  /**
    * The angle axis in Polar Coordinate.
    *
    * @see https://echarts.apache.org/en/option.html#angleAxis
    */
  var angleAxis: js.UndefOr[js.Object] = js.native
  
  /**
    * Whether to enable animation.
    *
    * @see https://echarts.apache.org/en/option.html#animation
    */
  var animation: js.UndefOr[Boolean] = js.native
  
  /**
    * Delay before updating the first animation, which supports
    * callback function for different data
    * to have different animation effect.
    *
    * @example
    * animationDelay: function (idx) {
    *     // delay for later data is larger
    *     return idx * 100;
    * }
    * @see https://echarts.apache.org/en/option.html#animationDelay
    */
  var animationDelay: js.UndefOr[Double | js.Function] = js.native
  
  /**
    * Delay before updating animation, which supports callback function
    * for different data to have different animation effect.
    *
    * @example
    * animationDelayUpdate: function (idx) {
    *     // delay for later data is larger
    *     return idx * 100;
    * }
    * @see https://echarts.apache.org/en/option.html#animationDelayUpdate
    */
  var animationDelayUpdate: js.UndefOr[Double | js.Function] = js.native
  
  /**
    * Duration of the first animation, which supports callback function
    * for different data to have different animation effect
    *
    * @example
    * animationDuration: function (idx) {
    *     // delay for later data is larger
    *     return idx * 100;
    * }
    * @see https://echarts.apache.org/en/option.html#animationDuration
    */
  var animationDuration: js.UndefOr[Double] = js.native
  
  /**
    * Time for animation to complete, which supports callback function
    * for different data to have different animation effect
    *
    * @example
    * animationDurationUpdate: function (idx) {
    *     // delay for later data is larger
    *     return idx * 100;
    * }
    * @see https://echarts.apache.org/en/option.html#animationDurationUpdate
    */
  var animationDurationUpdate: js.UndefOr[Double | js.Function] = js.native
  
  /**
    * Easing method used for the first animation.
    * Varied easing effects can be found at `easing effect example`.
    *
    * @see https://echarts.apache.org/en/option.html#animationEasing
    */
  var animationEasing: js.UndefOr[String] = js.native
  
  /**
    * Easing method used for animation.
    *
    * @see https://echarts.apache.org/en/option.html#animationEasingUpdate
    */
  var animationEasingUpdate: js.UndefOr[String] = js.native
  
  /**
    * Whether to set graphic number threshold to animation.
    * Animation will be disabled when graphic number is larger than threshold.
    *
    * @see https://echarts.apache.org/en/option.html#animationThreshold
    */
  var animationThreshold: js.UndefOr[Double] = js.native
  
  /**
    * `dataset` component is published since ECharts 4.
    * `dataset` brings convenience in data management separated with styles
    * and enables data reuse by different series.
    * More importantly, is enables data encoding from data to visual,
    * which brings convenience in some scenarios.
    * More details about `dataset` can be checked in the tutorial.
    * @see https://echarts.apache.org/en/option.html#aria
    */
  var aria: js.UndefOr[js.Object] = js.native
  
  /**
    * `axisPointer` is a tool for displaying reference line and axis value
    * under mouse pointer.
    *
    * @see https://echarts.apache.org/en/option.html#axisPointer
    */
  var axisPointer: js.UndefOr[AxisPointer] = js.native
  
  /**
    * Background color. Defaults to have no background.
    *
    * @see https://echarts.apache.org/en/option.html#backgroundColor
    */
  var backgroundColor: js.UndefOr[Color] = js.native
  
  /**
    * Equal to CanvasRenderingContext2D.globalCompositeOperation
    *
    * @see https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/globalCompositeOperation
    *
    */
  var blendMode: js.UndefOr[String] = js.native
  
  /**
    * `brush` is an area-selecting component, with which user can select
    * part of data from a chart to display in detail, or doing calculations
    * with them.
    *
    * @see https://echarts.apache.org/en/option.html#brush
    */
  var brush: js.UndefOr[js.Object] = js.native
  
  /**
    * Calendar coordinates.
    * In ECharts, we are very creative to achieve the calendar chart,
    * by using the calendar coordinates
    * to achieve the calendar chart, as shown in the following example,
    * we can use calendar coordinates
    * in `heatmap`, `scatter`, `effectScatter`, and `graph`.
    * @see https://echarts.apache.org/en/option.html#calendar
    */
  var calendar: js.UndefOr[Calendar | js.Array[Calendar]] = js.native
  
  /**
    * The color list of palette.
    * If no color is set in series, the colors would be adopted sequentially
    * and circularly from this list
    * as the colors of series.
    * @default
    * [
    *   '#c23531','#2f4554','#61a0a8','#d48265','#91c7ae',
    *   '#749f83', '#ca8622','#bda29a','#6e7074','#546570',
    *   '#c4ccd3'
    * ]
    *
    * @see https://echarts.apache.org/en/option.html#color
    */
  var color: js.UndefOr[js.Array[String]] = js.native
  
  /**
    * `dataZoom` component is used for zooming a specific area,
    * which enables user to investigate data in detail,
    * or get an overview of the data,
    * or get rid of outlier points.
    * These types of `dataZoom` component are supported:
    * + `dataZoomInside`: Data zoom functionalities is embeded
    *   inside coordinate systems, enable user to zoom
    *   or roam coordinate system by mouse dragging,
    *   mouse move or finger touch (in touch screen).
    * + `dataZoomSlider`: A special slider bar is provided,
    *   on which coordinate systems can be zoomed or roamed
    *   by mouse dragging or finger touch (in touch screen).
    * + `dataZoomSelect`: A marquee tool is provided for zooming
    *   or roaming coordinate system.
    *   That is `toolbox.feature.dataZoom`, which can only be configured
    *   in toolbox.
    *
    * @see https://echarts.apache.org/en/option.html#dataZoom
    */
  var dataZoom: js.UndefOr[js.Array[DataZoom]] = js.native
  
  /**
    * @see https://echarts.apache.org/en/option.html#dataset
    */
  var dataset: js.UndefOr[Dataset | js.Array[Dataset]] = js.native
  
  /**
    * Geographic coorinate system component.
    * Geographic coorinate system component is used to draw maps,
    * which also supports `scatter series`, and `line series`.
    *
    * @see https://echarts.apache.org/en/option.html#geo
    */
  var geo: js.UndefOr[js.Object] = js.native
  
  /**
    * `graphic` component enable creating graphic elements in echarts.
    * Those graphic type are supported.
    * `image`, `text`, `circle`, `sector`, `ring`, `polygon`,
    * `polyline`, `rect`, `line`, `bezierCurve`, `arc`, `group`,
    *
    * @see https://echarts.apache.org/en/option.html#graphic
    */
  var graphic: js.UndefOr[js.Object | js.Array[js.Object]] = js.native
  
  /**
    * Drawing grid in rectangular coordinate.
    * In a single grid, at most two X and Y axes each is allowed.
    * `Line chart`, `bar chart`, and `scatter chart (bubble chart)`
    * can be drawn in grid.
    * In ECharts 2.x, there could only be one single grid component
    * at most in a single echarts instance.
    * But in ECharts 3, there is no limitation.
    *
    * @see https://echarts.apache.org/en/option.html#grid
    */
  var grid: js.UndefOr[Grid | js.Array[Grid]] = js.native
  
  /**
    * Threshold of if use single hover layer to optimize.
    * It is recommended that `hoverLayerThreshold` is equivalent to or less than
    * `progressiveThreshold`, otherwise hover will cause restart of progressive,
    * which is unexpected.
    * see example <echarts/test/heatmap-large.html>.
    *
    * @default 3000
    */
  var hoverLayerThreshold: js.UndefOr[Double] = js.native
  
  /**
    * Legend component.
    * Legend component shows symbol, color and name of different series.
    * You can click legends to toggle displaying series in the chart.
    * In ECharts 3, a single echarts instance may contain multiple
    * legend components, which makes it easier for the layout of multiple
    * legend components.
    * If there have to be too many legend items, `vertically scrollable` legend
    * or `horizontally scrollable` legend are options to paginate them.
    * Check `legend.type` please.
    *
    * @see https://echarts.apache.org/en/option.html#legend
    */
  var legend: js.UndefOr[Legend] = js.native
  
  /**
    * `Parallel Coordinates` is a common way of visualizing high-dimensional
    * geometry and analyzing multivariate data.
    * For example, `series-parallel.data` is the following data:
    *
    * @example
    * [
    *     [1,  55,  9,   56,  0.46,  18,  6,  'good'],
    *     [2,  25,  11,  21,  0.65,  34,  9,  'excellent'],
    *     [3,  56,  7,   63,  0.3,   14,  5,  'good'],
    *     [4,  33,  7,   29,  0.33,  16,  6,  'excellent'],
    *     { // Data item can also be an Object,
    *       // so that perticular settings of its line can be set here.
    *         value: [5,  42,  24,  44,  0.76,  40,  16, 'excellent']
    *         lineStyle: {...},
    *     }
    *     ...
    * ]
    *
    * @see https://echarts.apache.org/en/option.html#parallel
    */
  var parallel: js.UndefOr[js.Object] = js.native
  
  /**
    * This component is the coordinate axis for parallel coordinate.
    *
    * @see https://echarts.apache.org/en/option.html#parallelAxis
    */
  var parallelAxis: js.UndefOr[js.Object] = js.native
  
  /**
    * Polar coordinate can be used in scatter and line chart.
    * Every polar coordinate has an `angleAxis` and a `radiusAxis`.
    *
    * @see https://echarts.apache.org/en/option.html#polar
    */
  var polar: js.UndefOr[js.Object] = js.native
  
  /**
    * Configuration for progressive/incremental rendering
    *
    * @default 400
    */
  var progressive: js.UndefOr[Double] = js.native
  
  /**
    * Configuration for progressive/incremental rendering
    *
    * @default 3000
    */
  var progressiveThreshold: js.UndefOr[Double] = js.native
  
  /**
    * Coordinate for `radar charts`.
    * This component is equal to the polar component in ECharts 2.
    * Because the polar component in the echarts 3 is reconstructed
    * to be the standard polar coordinate component,
    * this component is renamed to be radar to avoid confusion.
    * Radar chart coordinate is different from polar coordinate,
    * in that every axis indicator of the radar chart coordinate
    * is an individual dimension.
    * The style of indicator coordinate axis could be configured
    * through the following configuration items,
    * including `name`, `axisLine`, `axisTick`, `axisLabel`,
    * `splitLine`, `splitArea`.
    *
    * @see https://echarts.apache.org/en/option.html#radar
    */
  var radar: js.UndefOr[js.Object] = js.native
  
  /**
    * Radial axis of polar coordinate.
    *
    * @see https://echarts.apache.org/en/option.html#radiusAxis
    */
  var radiusAxis: js.UndefOr[js.Object] = js.native
  
  /**
    * @see https://echarts.apache.org/en/option.html#series
    */
  var series: js.UndefOr[js.Array[TSeries]] = js.native
  
  /**
    * An axis with a single dimension. It can be used to display data
    * in one dimension.
    *
    * @see https://echarts.apache.org/en/option.html#singleAxis
    */
  var singleAxis: js.UndefOr[SingleAxis | js.Array[SingleAxis]] = js.native
  
  /**
    * Global font style.
    *
    * @see https://echarts.apache.org/en/option.html#textStyle
    */
  var textStyle: js.UndefOr[BaseTextStyle] = js.native
  
  /**
    * `timeline` component, which provides functions like switching and playing
    * between multiple ECharts `options`.
    *
    * @see https://echarts.apache.org/en/option.html#timeline
    */
  var timeline: js.UndefOr[js.Object] = js.native
  
  /**
    * Title component, including main title and subtitle.
    * In ECharts 2.x, a single instance of ECharts could contains
    * one title component at most.
    * However, in ECharts 3, there could be one or more
    * than one title components.
    * It is more useful when multiple diagrams in one instance all need titles.
    *
    * @see https://echarts.apache.org/en/option.html#title
    */
  var title: js.UndefOr[EChartTitleOption | js.Array[EChartTitleOption]] = js.native
  
  /**
    * A group of utility tools, which includes `export`, `data view`,
    * `dynamic type switching`, `data area zooming`, and `reset`.
    *
    * @see https://echarts.apache.org/en/option.html#toolbox
    */
  var toolbox: js.UndefOr[js.Object] = js.native
  
  /**
    * Tooltip component.
    * It can be configured on different places:
    * + Configured on global: `tooltip`
    * + Configured in a coordinate system: `grid.tooltip`,
    *   `polar.tooltip`, `single.tooltip`
    * + Configured in a series: `series.tooltip`
    * + Configured in each item of `series.data`: `series.data.tooltip`
    *
    * @see https://echarts.apache.org/en/option.html#tooltip
    */
  var tooltip: js.UndefOr[Tooltip] = js.native
  
  /**
    * Whether to use UTC in display.
    * - `true`: When `axis.type` is `'time'`, ticks is determined
    *   according to UTC, and `axisLabel` and `tooltip` use UTC by default.
    * - `false`: When `axis.type` is `'time'`, ticks is determined
    *   according to local time, and `axisLabel` and `tooltip` use local time
    *   by default.
    *
    * The default value of useUTC is false, for sake of considering:
    * - In many cases, labels should be displayed in local time
    *   (whether the time is stored in server in local time or UTC).
    * - If user uses time string (like '2012-01-02') in data,
    * it usually means local time if time zone is not specified.
    * Time should be displayed in its original time zone by default.
    *
    * Notice: the setting only effects 'display time', but not 'parse time'.
    * About how time value (like `1491339540396`, `'2013-01-04'`, ...)
    * is parsed in echarts, see `the time part in date`.
    *
    * @see https://echarts.apache.org/en/option.html#useUTC
    */
  var useUTC: js.UndefOr[Boolean] = js.native
  
  /**
    * `visualMap` is a type of component for visual encoding,
    * which maps the data to visual channels, including:
    * + symbol: Type of symbol.
    * + symbolSize: Symbol size.
    * + color: Symbol color.
    * + colorAlpha: Symbol alpha channel.
    * + opacity: Opacity of symbol and others (like labels).
    * + colorLightness: Lightness in HSL.
    * + colorSaturation: Saturation in HSL.
    * + colorHue: Hue in HSL.
    * Myltiple `visualMap` component could be defined in a chart instance,
    * which enable that different dimensions
    * of a series data are mapped to different visual channels.
    * `visualMap` could be defined as `Piecewise (visualMapPiecewise)`
    * or `Continuous (visualMapContinuous)`,
    * which is distinguished by the property type.
    *
    * @example
    * option = {
    *   visualMap: [
    *       { // the first visualMap component
    *           type: 'continuous', // defined to be continuous viusalMap
    *           ...
    *       },
    *       { // the sencond visualMap component
    *           type: 'piecewise', // defined to be piecewise visualMap
    *           ...
    *       }
    *   ],
    *   ...
    * };
    *
    * @see https://echarts.apache.org/en/option.html#visualMap
    */
  var visualMap: js.UndefOr[js.Array[typingsSlinky.echarts.echarts.EChartOption.VisualMap]] = js.native
  
  /**
    * The x axis in cartesian(rectangular) coordinate.
    * Usually a single grid component can place at most 2 x axis,
    * one on the bottom and another on the top.
    * offset can be used to avoid overlap when you need to put more
    * than two x axis.
    *
    * @see https://echarts.apache.org/en/option.html#xAxis
    */
  var xAxis: js.UndefOr[XAxis | js.Array[XAxis]] = js.native
  
  /**
    * The y axis in cartesian(rectangular) coordinate.
    * Usually a single grid component can place at most 2 y axis,
    * one on the left and another on the right. offset can be used
    * to avoid overlap when you need to put more than two y axis.
    *
    * @see https://echarts.apache.org/en/option.html#yAxis
    */
  var yAxis: js.UndefOr[YAxis | js.Array[YAxis]] = js.native
}
object EChartOption {
  
  @scala.inline
  def apply[TSeries](): EChartOption[TSeries] = {
    val __obj = js.Dynamic.literal()
    __obj.asInstanceOf[EChartOption[TSeries]]
  }
  
  /**
    * @todo describe
    */
  @js.native
  trait AxisPointer extends Pointer {
    
    /**
      * Component ID, not specified by default.
      * If specified, it can be used to refer the component
      * in option or API.
      */
    var id: js.UndefOr[String] = js.native
    
    /**
      * axisPointers can be linked to each other.
      * The term 'link' represents that axes are synchronized
      * and move together.
      * Axes are linked according to the value of axisPointer.
      * See
      * [sampleA](https://echarts.apache.org/examples/en/view.html?c=candlestick-brush&edit=1&reset=1)
      * and
      * [sampleB](https://echarts.apache.org/examples/en/view.html?c=scatter-nutrients-matrix&edit=1&reset=1).
      * link is an array, where each item represents a 'link group'.
      * Axes will be linked when they are refered
      * in the same link group.
      *
      * @example:
      * link: [
      *     {
      *         // All axes with xAxisIndex 0, 3, 4 and yAxisName 'sameName' will be linked.
      *         xAxisIndex: [0, 3, 4],
      *         yAxisName: 'someName'
      *     },
      *     {
      *         // All axes with xAxisId 'aa', 'cc' and all angleAxis will be linked.
      *         xAxisId: ['aa', 'cc'],
      *         angleAxis: 'all'
      *     },
      *     ...
      * ]
      *
      * @see https://echarts.apache.org/en/option.html#axisPointer.link
      */
    var link: js.UndefOr[js.Array[js.Object]] = js.native
    
    /**
      * Conditions to trigger tooltip.
      * Options:
      * + `'mousemove'` - Trigger when mouse moves.
      * + `'click'` - Trigger when mouse clicks.
      * + `'mousemove|click'` - Trigger when mouse clicks and moves.
      *   `'none'` - Do not triggered by `'mousemove'` and `'click'`.
      *   Tooltip can be triggered and hidden manually by calling
      *   `action.tooltip.showTip` and `action.tooltip.hideTip`.
      *   It can also be triggered by `axisPointer.handle` in this case.
      *
      * This attribute is new to ECharts 3.0.
      *
      * @default 'mousemove|click'
      */
    var triggerOn: js.UndefOr[mousemove | click | mousemoveVerticallineclick | none] = js.native
  }
  object AxisPointer {
    
    @scala.inline
    def apply(): AxisPointer = {
      val __obj = js.Dynamic.literal()
      __obj.asInstanceOf[AxisPointer]
    }
    
    @scala.inline
    implicit class AxisPointerMutableBuilder[Self <: AxisPointer] (val x: Self) extends AnyVal {
      
      @scala.inline
      def setId(value: String): Self = StObject.set(x, "id", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setIdUndefined: Self = StObject.set(x, "id", js.undefined)
      
      @scala.inline
      def setLink(value: js.Array[js.Object]): Self = StObject.set(x, "link", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setLinkUndefined: Self = StObject.set(x, "link", js.undefined)
      
      @scala.inline
      def setLinkVarargs(value: js.Object*): Self = StObject.set(x, "link", js.Array(value :_*))
      
      @scala.inline
      def setTriggerOn(value: mousemove | click | mousemoveVerticallineclick | none): Self = StObject.set(x, "triggerOn", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setTriggerOnUndefined: Self = StObject.set(x, "triggerOn", js.undefined)
    }
  }
  
  /**
    * @see https://echarts.apache.org/en/option.html#textStyle
    */
  @js.native
  trait BaseTextStyle extends StObject {
    
    var color: js.UndefOr[String] = js.native
    
    var fontFamily: js.UndefOr[String] = js.native
    
    var fontSize: js.UndefOr[Double] = js.native
    
    var fontStyle: js.UndefOr[normal | italic | oblique] = js.native
    
    var fontWeight: js.UndefOr[
        normal | bold | bolder | lighter | `100` | `200` | `300` | `400` | `500` | `600` | `700` | `800` | `900`
      ] = js.native
    
    var height: js.UndefOr[Double | String] = js.native
    
    var lineHeight: js.UndefOr[Double] = js.native
    
    var textBorderColor: js.UndefOr[String] = js.native
    
    var textBorderWidth: js.UndefOr[Double] = js.native
    
    var textShadowBlur: js.UndefOr[Double] = js.native
    
    var textShadowColor: js.UndefOr[String] = js.native
    
    var textShadowOffsetX: js.UndefOr[Double] = js.native
    
    var textShadowOffsetY: js.UndefOr[Double] = js.native
    
    var width: js.UndefOr[Double | String] = js.native
  }
  object BaseTextStyle {
    
    @scala.inline
    def apply(): BaseTextStyle = {
      val __obj = js.Dynamic.literal()
      __obj.asInstanceOf[BaseTextStyle]
    }
    
    @scala.inline
    implicit class BaseTextStyleMutableBuilder[Self <: BaseTextStyle] (val x: Self) extends AnyVal {
      
      @scala.inline
      def setColor(value: String): Self = StObject.set(x, "color", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setColorUndefined: Self = StObject.set(x, "color", js.undefined)
      
      @scala.inline
      def setFontFamily(value: String): Self = StObject.set(x, "fontFamily", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setFontFamilyUndefined: Self = StObject.set(x, "fontFamily", js.undefined)
      
      @scala.inline
      def setFontSize(value: Double): Self = StObject.set(x, "fontSize", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setFontSizeUndefined: Self = StObject.set(x, "fontSize", js.undefined)
      
      @scala.inline
      def setFontStyle(value: normal | italic | oblique): Self = StObject.set(x, "fontStyle", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setFontStyleUndefined: Self = StObject.set(x, "fontStyle", js.undefined)
      
      @scala.inline
      def setFontWeight(
        value: normal | bold | bolder | lighter | `100` | `200` | `300` | `400` | `500` | `600` | `700` | `800` | `900`
      ): Self = StObject.set(x, "fontWeight", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setFontWeightUndefined: Self = StObject.set(x, "fontWeight", js.undefined)
      
      @scala.inline
      def setHeight(value: Double | String): Self = StObject.set(x, "height", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setHeightUndefined: Self = StObject.set(x, "height", js.undefined)
      
      @scala.inline
      def setLineHeight(value: Double): Self = StObject.set(x, "lineHeight", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setLineHeightUndefined: Self = StObject.set(x, "lineHeight", js.undefined)
      
      @scala.inline
      def setTextBorderColor(value: String): Self = StObject.set(x, "textBorderColor", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setTextBorderColorUndefined: Self = StObject.set(x, "textBorderColor", js.undefined)
      
      @scala.inline
      def setTextBorderWidth(value: Double): Self = StObject.set(x, "textBorderWidth", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setTextBorderWidthUndefined: Self = StObject.set(x, "textBorderWidth", js.undefined)
      
      @scala.inline
      def setTextShadowBlur(value: Double): Self = StObject.set(x, "textShadowBlur", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setTextShadowBlurUndefined: Self = StObject.set(x, "textShadowBlur", js.undefined)
      
      @scala.inline
      def setTextShadowColor(value: String): Self = StObject.set(x, "textShadowColor", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setTextShadowColorUndefined: Self = StObject.set(x, "textShadowColor", js.undefined)
      
      @scala.inline
      def setTextShadowOffsetX(value: Double): Self = StObject.set(x, "textShadowOffsetX", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setTextShadowOffsetXUndefined: Self = StObject.set(x, "textShadowOffsetX", js.undefined)
      
      @scala.inline
      def setTextShadowOffsetY(value: Double): Self = StObject.set(x, "textShadowOffsetY", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setTextShadowOffsetYUndefined: Self = StObject.set(x, "textShadowOffsetY", js.undefined)
      
      @scala.inline
      def setWidth(value: Double | String): Self = StObject.set(x, "width", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setWidthUndefined: Self = StObject.set(x, "width", js.undefined)
    }
  }
  
  @js.native
  trait BaseTextStyleWithRich extends StObject {
    
    var rich: js.UndefOr[RichStyle] = js.native
  }
  object BaseTextStyleWithRich {
    
    @scala.inline
    def apply(): BaseTextStyleWithRich = {
      val __obj = js.Dynamic.literal()
      __obj.asInstanceOf[BaseTextStyleWithRich]
    }
    
    @scala.inline
    implicit class BaseTextStyleWithRichMutableBuilder[Self <: BaseTextStyleWithRich] (val x: Self) extends AnyVal {
      
      @scala.inline
      def setRich(value: RichStyle): Self = StObject.set(x, "rich", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setRichUndefined: Self = StObject.set(x, "rich", js.undefined)
    }
  }
  
  @js.native
  trait BaseTooltip extends StObject {
    
    /**
      * The background color of tooltip's floating layer.
      *
      * @default 'rgba(50, 50, 50, 0.7)'
      */
    var backgroundColor: js.UndefOr[String] = js.native
    
    /**
      * The border color of tooltip's floating layer.
      *
      * @default '#333'
      */
    var borderColor: js.UndefOr[String] = js.native
    
    /**
      * The border width of tooltip's floating layer.
      *
      * @default 0
      */
    var borderWidth: js.UndefOr[Double] = js.native
    
    /**
      * Extra CSS style for floating layer.
      * The following is an example for adding shadow.
      *
      * @example
      * extraCssText: 'box-shadow: 0 0 3px rgba(0, 0, 0, 0.3);'
      */
    var extraCssText: js.UndefOr[String] = js.native
    
    /**
      * The content formatter of tooltip's floating layer
      * which supports string template and callback function.
      *
      * Types:
      * 1. String.
      * The template variables are `{a}`, `{b}`, `{c}`, `{d}` and `{e}`,
      * which stands for series name, data name and data value and ect.
      * When trigger is set to be `'axis'`, there may be data
      * from multiple series. In this time, series index can be refered
      * as `{a0}`, `{a1}`, or `{a2}`.
      * `{a}`, `{b}`, `{c}`, `{d}` have different meanings
      * for different series types:
      *   + Line (area) charts, bar (column) charts, K charts:
      *   `{a}` for series name,
      *   `{b}` for category name,
      *   `{c}` for data value,
      *   `{d}` for none;
      *   + Scatter (bubble) charts:
      *   `{a}` for series name,
      *   `{b}` for data name,
      *   `{c}` for data value,
      *   `{d}` for none;
      *   + Map:
      *   `{a}` for series name,
      *   `{b}` for area name,
      *   `{c}` for merging data,
      *   `{d}` for none;
      *   + Pie charts, gauge charts, funnel charts:
      *   `{a}` for series name,
      *   `{b}` for data item name,
      *   `{c}` for data value,
      *   `{d}` for percentage.
      *
      * 2. Function.
      * The first parameter params is the data that the formatter needs.
      * Its format is shown as {Format}
      * When trigger is `'axis'`, or when tooltip is triggered by
      * `axisPointer`, params is the data array of multiple series.
      * `Note`: Using array to present all the parameters in ECharts 2.x
      * is not supported anymore.
      * The second parameter ticket is the asynchronous callback flag
      * which should be used along with the third parameter callback
      * when it is used.
      * The third parameter callback is asynchronous callback.
      * When the content of tooltip is acquired asynchronously,
      * ticket and htm as introduced above can be used to update tooltip
      * with callback.
      *
      * @example
      * ```
      *
      * //string
      * formatter: '{b0}: {c0}<br />{b1}: {c1}'
      *
      * // function
      * formatter: function (params, ticket, callback) {
      *     $.get('detail?name=' + params.name, function (content) {
      *         callback(ticket, toHTML(content));
      *     });
      *     return 'Loading';
      * }
      * ```
      */
    var formatter: js.UndefOr[String | Formatter] = js.native
    
    /**
      * The floating layer of tooltip space around content.
      * The unit is px. Default values for each position are 5.
      * And they can be set to different values with left, right,
      * top, and bottom.
      *
      * @example
      * // Set padding to be 5
      * padding: 5
      * // Set the top and bottom paddings to be 5, and left and right paddings to be 10
      * padding: [5, 10]
      * // Set each of the four paddings seperately
      * padding: [
      *     5,  // up
      *     10, // right
      *     5,  // down
      *     10, // left
      * ]
      *
      * @default 5
      */
    var padding: js.UndefOr[Double | js.Array[Double]] = js.native
    
    /**
      * The position of the tooltip's floating layer,
      * which would follow the position of mouse by default.
      *
      * Options:
      * 1. String.
      *   + 'inside' - Center position of the graphic element
      *   where the mouse is in, which is only valid when trigger
      *   is 'item'.
      *   + 'top' - Top position of the graphic element where the mouse
      *   is in, which is only valid when trigger is 'item'.
      *   + 'left' - Left position of the graphic element where the mouse
      *   is in, which is only valid when trigger is 'item'.
      *   + 'right' - Right position of the graphic element where
      *   the mouse is in, which is only valid when trigger is 'item'.
      *   + 'bottom' - Bottom position of the graphic element where
      *   the mouse is in, which is only valid when trigger is 'item'.
      *
      * 2. Object - Object with optional properties such as `top`,
      * `left`, `right` and `bottom` that could be `string` or `number`.
      * e.g. `{left: 10, top: 30}`, or `{right: '20%', bottom: 40}`
      *
      * 3. Array - Display the position of tooltip's floating layer
      * through array, which supports absolute position
      * and relative percentage.
      *
      * 4. Function.
      *   + Parameters:
      *     + point: Mouse position.
      *     + param: The same as formatter.
      *     + dom: The DOM object of tooltip.
      *     + rect: It is valid only when mouse is on graphic elements,
      *       which stands for a bounding box with x, y, width, and height.
      *     + size: The size of dom echarts container.
      *       For example:
      *       `{contentSize: [width, height], viewSize: [width, height]}`
      *   + Return:
      *     position as `String`, `Array` or `Object` described above
      *
      * @see https://echarts.apache.org/en/option.html#tooltip.position
      */
    var position: js.UndefOr[Type] = js.native
    
    /**
      * The text style of tooltip's floating layer.
      */
    var textStyle: js.UndefOr[BaseTextStyle] = js.native
  }
  object BaseTooltip {
    
    @scala.inline
    def apply(): BaseTooltip = {
      val __obj = js.Dynamic.literal()
      __obj.asInstanceOf[BaseTooltip]
    }
    
    @scala.inline
    implicit class BaseTooltipMutableBuilder[Self <: BaseTooltip] (val x: Self) extends AnyVal {
      
      @scala.inline
      def setBackgroundColor(value: String): Self = StObject.set(x, "backgroundColor", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setBackgroundColorUndefined: Self = StObject.set(x, "backgroundColor", js.undefined)
      
      @scala.inline
      def setBorderColor(value: String): Self = StObject.set(x, "borderColor", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setBorderColorUndefined: Self = StObject.set(x, "borderColor", js.undefined)
      
      @scala.inline
      def setBorderWidth(value: Double): Self = StObject.set(x, "borderWidth", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setBorderWidthUndefined: Self = StObject.set(x, "borderWidth", js.undefined)
      
      @scala.inline
      def setExtraCssText(value: String): Self = StObject.set(x, "extraCssText", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setExtraCssTextUndefined: Self = StObject.set(x, "extraCssText", js.undefined)
      
      @scala.inline
      def setFormatter(value: String | Formatter): Self = StObject.set(x, "formatter", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setFormatterFunction3(
        value: (/* params */ Format | js.Array[Format], /* ticket */ String, /* callback */ js.Function2[/* ticket */ String, /* html */ String, Unit]) => String
      ): Self = StObject.set(x, "formatter", js.Any.fromFunction3(value))
      
      @scala.inline
      def setFormatterUndefined: Self = StObject.set(x, "formatter", js.undefined)
      
      @scala.inline
      def setPadding(value: Double | js.Array[Double]): Self = StObject.set(x, "padding", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setPaddingUndefined: Self = StObject.set(x, "padding", js.undefined)
      
      @scala.inline
      def setPaddingVarargs(value: Double*): Self = StObject.set(x, "padding", js.Array(value :_*))
      
      @scala.inline
      def setPosition(value: Type): Self = StObject.set(x, "position", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setPositionFunction5(
        value: (/* point */ js.Array[Double | String], /* params */ js.Object | js.Array[js.Object], /* element */ HTMLElement, /* rect */ js.Object, /* size */ js.Object) => (js.Array[Double | String]) | Obj
      ): Self = StObject.set(x, "position", js.Any.fromFunction5(value))
      
      @scala.inline
      def setPositionUndefined: Self = StObject.set(x, "position", js.undefined)
      
      @scala.inline
      def setPositionVarargs(value: (Double | String)*): Self = StObject.set(x, "position", js.Array(value :_*))
      
      @scala.inline
      def setTextStyle(value: BaseTextStyle): Self = StObject.set(x, "textStyle", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setTextStyleUndefined: Self = StObject.set(x, "textStyle", js.undefined)
    }
  }
  
  object BasicComponents {
    
    @js.native
    trait CartesianAxis extends StObject {
      
      /**
        * Settings related to axis label.
        *
        * @see https://echarts.apache.org/en/option.html#yAxis.axisLabel
        */
      var axisLabel: js.UndefOr[Label] = js.native
      
      /**
        * Settings related to axis line.
        *
        * @see https://echarts.apache.org/en/option.html#yAxis.axisLine
        */
      var axisLine: js.UndefOr[Line] = js.native
      
      /**
        * axisPointer settings on the axis.
        *
        * @see https://echarts.apache.org/en/option.html#yAxis.axisPointer
        */
      var axisPointer: js.UndefOr[Pointer] = js.native
      
      /**
        * Settings related to axis tick.
        *
        * @see https://echarts.apache.org/en/option.html#yAxis.axisTick
        */
      var axisTick: js.UndefOr[Tick] = js.native
      
      /**
        * The boundary gap on both sides of a coordinate axis.
        * The setting and behavior of category axes and non-category axes are
        * different. The `boundaryGap` of category axis can be set to either
        * `true` or `false`. Default value is set to be `true`, in which case
        * `axisTick` is served only as a separation line, and labels and data
        * appear only in the center part of two axis ticks, which is called
        * band. For non-category axis, including time, numerical value, and
        * log axes, `boundaryGap` is an array of two values, representing the
        * spanning range between minimum and maximum value.
        * The value can be set in numeric value or relative percentage,
        * which becomes invalid after setting `min` and `max`.
        *
        * @example
        * boundaryGap: ['20%', '20%']
        *
        * @see https://echarts.apache.org/en/option.html#yAxis.boundaryGap
        */
      var boundaryGap: js.UndefOr[Boolean | (js.Array[String | Double])] = js.native
      
      /**
        * Category data, available in type: `'category'` axis.
        * If `type` is not specified, but `axis.data` is specified,
        * the `type` is auto set as `'category'`.
        * If type is specified as `'category'`,
        * but axis.data is not specified, `axis.data` will be
        * auto collected from `series.data`.
        * It brings convenience, but we should notice that
        * `axis.data` provides then value range of the `'category'` axis.
        * If it is auto collected from `series.data`,
        * Only the values appearing in series.data can be collected.
        * For example, if series.data is empty, nothing will be collected.
        *
        * @example
        *  // Name list of all categories
        *  data: ['Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday', 'Sunday']
        *  // Each item could also be a specific configuration item.
        *  // In this case, `value` is used as the category name.
        *  data: [{
        *      value: 'Monday',
        *      // Highlight Monday
        *      textStyle: {
        *          fontSize: 20,
        *          color: 'red'
        *      }
        *  }, 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday', 'Sunday']
        *
        * @see https://echarts.apache.org/en/option.html#yAxis.data
        */
      var data: js.UndefOr[js.Array[String | Double | DataObject]] = js.native
      
      /**
        * The index of grid which this axis belongs to.
        * Defaults to be in the first grid.
        *
        * @default 0
        */
      var gridIndex: js.UndefOr[Double] = js.native
      
      /**
        * Component ID, not specified by default.
        * If specified, it can be used to refer the component in option or API.
        */
      var id: js.UndefOr[String] = js.native
      
      /**
        * Compulsively set segmentation interval for axis.
        * As splitNumber is a recommendation value,
        * the calculated tick may not be the same as expected.
        * In this case, interval should be used along with min and max
        * to compulsively set tickings.
        * But in most cases, we do not suggest using this,
        * out automatic calculation is enough for most situations.
        * This is unavailable for category axis.
        * Timestamp should be passed for type: `'time'` axis.
        * Logged value should be passed for type: `'log'` axis.
        *
        * @see https://echarts.apache.org/en/option.html#yAxis.interval
        */
      var interval: js.UndefOr[Double] = js.native
      
      /**
        * Whether axis is inversed. New option from ECharts 3.
        *
        * @default false
        */
      var inverse: js.UndefOr[Boolean] = js.native
      
      /**
        * Base of logarithm, which is valid only for numeric axes with type:
        * `'log'`.
        *
        * @default 10
        * @see https://echarts.apache.org/en/option.html#yAxis.logBase
        */
      var logBase: js.UndefOr[Double] = js.native
      
      /**
        * The maximum value of axis.
        * It can be set to a special value `'dataMax'` so that
        * the minimum value on this axis is set to be the maximum label.
        * It will be automatically computed to make sure axis tick is equally
        * distributed when not set.
        * In category axis, it can also be set as the ordinal number.
        * For example, if a catergory axis has
        * `data: ['categoryA', 'categoryB', 'categoryC']`
        * , and the ordinal `2` represents `'categoryC'`.
        * Moreover, it can be set as negative number, like `-3`.
        *
        * @default null
        * @see https://echarts.apache.org/option.html#yAxis.max
        */
      var max: js.UndefOr[Double | String | (js.Function1[/* value */ Max, Double])] = js.native
      
      /**
        * The minimun value of axis.
        * It can be set to a special value `'dataMin'` so that
        * the minimum value on this axis is set to be the minimum label.
        * It will be automatically computed to make sure axis tick is equally
        * distributed when not set. In category axis, it can also be set
        * as the ordinal number.
        * For example, if a catergory axis has
        * `data: ['categoryA', 'categoryB', 'categoryC']`
        * , and the ordinal `2` represents `'categoryC'`.
        * Moreover, it can be set as negative number, like `-3`.
        *
        * @default null
        * @see https://echarts.apache.org/option.html#yAxis.min
        */
      var min: js.UndefOr[Double | String | (js.Function1[/* value */ Max, Double])] = js.native
      
      /**
        * Maximum gap between split lines.
        * For example, in time axis (type is `'time'`),
        * it can be set to be `3600 * 24 * 1000` to make sure
        * that the gap between axis labels is less than or equal to one day.
        * @example
        * {
        *     maxInterval: 3600 * 1000 * 24
        * }
        * It is available only for axis of type `'value'` or `'time'`.
        * @see https://echarts.apache.org/en/option.html#yAxis.minInterval
        */
      var minInterval: js.UndefOr[js.Any] = js.native
      
      /**
        * Minor SplitLine of axis in grid area.
        *
        * @see https://echarts.apache.org/en/option.html#yAxis.minorSplitLine
        */
      var minorSplitLine: js.UndefOr[MinorSplitLine] = js.native
      
      /**
        * Settings related to axis minor tick.
        *
        * @see https://echarts.apache.org/en/option.html#yAxis.minorTick
        */
      var minorTick: js.UndefOr[MinorTick] = js.native
      
      /**
        * Name of axis.
        */
      var name: js.UndefOr[String] = js.native
      
      /**
        * Gap between axis name and axis line.
        *
        * @default 15
        */
      var nameGap: js.UndefOr[Double] = js.native
      
      /**
        * Location of axis name.
        *
        * @default 'start'
        */
      var nameLocation: js.UndefOr[start | middle | center | end] = js.native
      
      /**
        * Rotation of axis name.
        *
        * @default null
        */
      var nameRotate: js.UndefOr[Double] = js.native
      
      /**
        * Text style of axis name.
        *
        * @see https://echarts.apache.org/en/option.html#yAxis.nameTextStyle
        */
      var nameTextStyle: js.UndefOr[TextStyleWithRich] = js.native
      
      /**
        * Offset of this axis relative to default position.
        * Useful when multiple axis of this type has same position value.
        *
        * @default 0
        * @see https://echarts.apache.org/en/option.html#yAxis.offset
        */
      var offset: js.UndefOr[Double] = js.native
      
      /**
        * It is available only in numerical axis, i.e., type: `'value'`.
        * It specifies whether not to contain zero position
        * of axis compulsively.
        * When it is set to be `true`, the axis may not contain zero position,
        * which is useful in the scatter chart for both value axes.
        * This configuration item is unavailable when the `min` and `max`
        * are set.
        *
        * @default false
        * @see https://echarts.apache.org/en/option.html#yAxis.scale
        */
      var scale: js.UndefOr[Boolean] = js.native
      
      /**
        * If show this axis.
        *
        * @default 'true'
        */
      var show: js.UndefOr[Boolean] = js.native
      
      /**
        * True for axis that cannot be interacted with.
        *
        * @default false
        */
      var silent: js.UndefOr[Boolean] = js.native
      
      /**
        * Split area of axis in grid area, not shown by default.
        *
        * @see https://echarts.apache.org/en/option.html#yAxis.splitArea
        */
      var splitArea: js.UndefOr[SplitArea] = js.native
      
      /**
        * SplitLine of axis in grid area.
        *
        * @see https://echarts.apache.org/en/option.html#yAxis.splitLine
        */
      var splitLine: js.UndefOr[SplitLine] = js.native
      
      /**
        * Number of segments that the axis is split into.
        * Note that this number serves only as a recommendation,
        * and the true segments may be adjusted based on readability.
        * This is unavailable for category axis.
        *
        * @default 5
        * @see https://echarts.apache.org/en/option.html#yAxis.splitNumber
        */
      var splitNumber: js.UndefOr[Double] = js.native
      
      /**
        * Whether the labels of axis triggers and reacts to mouse events.
        * Parameters of event includes:
        *
        * @example
        * {
        *     // Component type: xAxis, yAxis, radiusAxis, angleAxis
        *     // Each of which has an attribute for index, e.g., xAxisIndex for xAxis
        *     componentType: string,
        *     // Value on axis before being formatted.
        *     // Click on value label to trigger event.
        *     value: '',
        *     // Name of axis.
        *     // Click on laben name to trigger event.
        *     name: ''
        * }
        *
        * @default false
        */
      var triggerEvent: js.UndefOr[Boolean] = js.native
      
      /**
        * z value of all graghical elements in this axis,
        * which controls order of drawing graphical components.
        * Components with smaller z values may be overwritten by those
        * with larger z values.
        * z has a lower priority to zlevel, and will not create new Canvas.
        *
        * @see https://echarts.apache.org/en/option.html#yAxis.z
        */
      var z: js.UndefOr[Double] = js.native
      
      /**
        * `zlevel` value of all graghical elements in this axis.
        * `zlevel` is used to make layers with Canvas.
        * Graphical elements with different `zlevel` values will be placed
        * in different Canvases, which is a common optimization technique.
        * We can put those frequently changed elements
        * (like those with animations) to a seperate `zlevel`.
        * Notice that too many Canvases will increase memory cost,
        * and should be used carefully on mobile phones to avoid crash.
        * Canvases with bigger `zlevel` will be placed on Canvases
        * with smaller `zlevel`.
        *
        * @default 0
        * @see https://echarts.apache.org/en/option.html#yAxis.zlevel
        */
      var zlevel: js.UndefOr[Double] = js.native
    }
    object CartesianAxis {
      
      @scala.inline
      def apply(): CartesianAxis = {
        val __obj = js.Dynamic.literal()
        __obj.asInstanceOf[CartesianAxis]
      }
      
      @scala.inline
      implicit class CartesianAxisMutableBuilder[Self <: CartesianAxis] (val x: Self) extends AnyVal {
        
        @scala.inline
        def setAxisLabel(value: Label): Self = StObject.set(x, "axisLabel", value.asInstanceOf[js.Any])
        
        @scala.inline
        def setAxisLabelUndefined: Self = StObject.set(x, "axisLabel", js.undefined)
        
        @scala.inline
        def setAxisLine(value: Line): Self = StObject.set(x, "axisLine", value.asInstanceOf[js.Any])
        
        @scala.inline
        def setAxisLineUndefined: Self = StObject.set(x, "axisLine", js.undefined)
        
        @scala.inline
        def setAxisPointer(value: Pointer): Self = StObject.set(x, "axisPointer", value.asInstanceOf[js.Any])
        
        @scala.inline
        def setAxisPointerUndefined: Self = StObject.set(x, "axisPointer", js.undefined)
        
        @scala.inline
        def setAxisTick(value: Tick): Self = StObject.set(x, "axisTick", value.asInstanceOf[js.Any])
        
        @scala.inline
        def setAxisTickUndefined: Self = StObject.set(x, "axisTick", js.undefined)
        
        @scala.inline
        def setBoundaryGap(value: Boolean | (js.Array[String | Double])): Self = StObject.set(x, "boundaryGap", value.asInstanceOf[js.Any])
        
        @scala.inline
        def setBoundaryGapUndefined: Self = StObject.set(x, "boundaryGap", js.undefined)
        
        @scala.inline
        def setBoundaryGapVarargs(value: (String | Double)*): Self = StObject.set(x, "boundaryGap", js.Array(value :_*))
        
        @scala.inline
        def setData(value: js.Array[String | Double | DataObject]): Self = StObject.set(x, "data", value.asInstanceOf[js.Any])
        
        @scala.inline
        def setDataUndefined: Self = StObject.set(x, "data", js.undefined)
        
        @scala.inline
        def setDataVarargs(value: (String | Double | DataObject)*): Self = StObject.set(x, "data", js.Array(value :_*))
        
        @scala.inline
        def setGridIndex(value: Double): Self = StObject.set(x, "gridIndex", value.asInstanceOf[js.Any])
        
        @scala.inline
        def setGridIndexUndefined: Self = StObject.set(x, "gridIndex", js.undefined)
        
        @scala.inline
        def setId(value: String): Self = StObject.set(x, "id", value.asInstanceOf[js.Any])
        
        @scala.inline
        def setIdUndefined: Self = StObject.set(x, "id", js.undefined)
        
        @scala.inline
        def setInterval(value: Double): Self = StObject.set(x, "interval", value.asInstanceOf[js.Any])
        
        @scala.inline
        def setIntervalUndefined: Self = StObject.set(x, "interval", js.undefined)
        
        @scala.inline
        def setInverse(value: Boolean): Self = StObject.set(x, "inverse", value.asInstanceOf[js.Any])
        
        @scala.inline
        def setInverseUndefined: Self = StObject.set(x, "inverse", js.undefined)
        
        @scala.inline
        def setLogBase(value: Double): Self = StObject.set(x, "logBase", value.asInstanceOf[js.Any])
        
        @scala.inline
        def setLogBaseUndefined: Self = StObject.set(x, "logBase", js.undefined)
        
        @scala.inline
        def setMax(value: Double | String | (js.Function1[/* value */ Max, Double])): Self = StObject.set(x, "max", value.asInstanceOf[js.Any])
        
        @scala.inline
        def setMaxFunction1(value: /* value */ Max => Double): Self = StObject.set(x, "max", js.Any.fromFunction1(value))
        
        @scala.inline
        def setMaxUndefined: Self = StObject.set(x, "max", js.undefined)
        
        @scala.inline
        def setMin(value: Double | String | (js.Function1[/* value */ Max, Double])): Self = StObject.set(x, "min", value.asInstanceOf[js.Any])
        
        @scala.inline
        def setMinFunction1(value: /* value */ Max => Double): Self = StObject.set(x, "min", js.Any.fromFunction1(value))
        
        @scala.inline
        def setMinInterval(value: js.Any): Self = StObject.set(x, "minInterval", value.asInstanceOf[js.Any])
        
        @scala.inline
        def setMinIntervalUndefined: Self = StObject.set(x, "minInterval", js.undefined)
        
        @scala.inline
        def setMinUndefined: Self = StObject.set(x, "min", js.undefined)
        
        @scala.inline
        def setMinorSplitLine(value: MinorSplitLine): Self = StObject.set(x, "minorSplitLine", value.asInstanceOf[js.Any])
        
        @scala.inline
        def setMinorSplitLineUndefined: Self = StObject.set(x, "minorSplitLine", js.undefined)
        
        @scala.inline
        def setMinorTick(value: MinorTick): Self = StObject.set(x, "minorTick", value.asInstanceOf[js.Any])
        
        @scala.inline
        def setMinorTickUndefined: Self = StObject.set(x, "minorTick", js.undefined)
        
        @scala.inline
        def setName(value: String): Self = StObject.set(x, "name", value.asInstanceOf[js.Any])
        
        @scala.inline
        def setNameGap(value: Double): Self = StObject.set(x, "nameGap", value.asInstanceOf[js.Any])
        
        @scala.inline
        def setNameGapUndefined: Self = StObject.set(x, "nameGap", js.undefined)
        
        @scala.inline
        def setNameLocation(value: start | middle | center | end): Self = StObject.set(x, "nameLocation", value.asInstanceOf[js.Any])
        
        @scala.inline
        def setNameLocationUndefined: Self = StObject.set(x, "nameLocation", js.undefined)
        
        @scala.inline
        def setNameRotate(value: Double): Self = StObject.set(x, "nameRotate", value.asInstanceOf[js.Any])
        
        @scala.inline
        def setNameRotateUndefined: Self = StObject.set(x, "nameRotate", js.undefined)
        
        @scala.inline
        def setNameTextStyle(value: TextStyleWithRich): Self = StObject.set(x, "nameTextStyle", value.asInstanceOf[js.Any])
        
        @scala.inline
        def setNameTextStyleUndefined: Self = StObject.set(x, "nameTextStyle", js.undefined)
        
        @scala.inline
        def setNameUndefined: Self = StObject.set(x, "name", js.undefined)
        
        @scala.inline
        def setOffset(value: Double): Self = StObject.set(x, "offset", value.asInstanceOf[js.Any])
        
        @scala.inline
        def setOffsetUndefined: Self = StObject.set(x, "offset", js.undefined)
        
        @scala.inline
        def setScale(value: Boolean): Self = StObject.set(x, "scale", value.asInstanceOf[js.Any])
        
        @scala.inline
        def setScaleUndefined: Self = StObject.set(x, "scale", js.undefined)
        
        @scala.inline
        def setShow(value: Boolean): Self = StObject.set(x, "show", value.asInstanceOf[js.Any])
        
        @scala.inline
        def setShowUndefined: Self = StObject.set(x, "show", js.undefined)
        
        @scala.inline
        def setSilent(value: Boolean): Self = StObject.set(x, "silent", value.asInstanceOf[js.Any])
        
        @scala.inline
        def setSilentUndefined: Self = StObject.set(x, "silent", js.undefined)
        
        @scala.inline
        def setSplitArea(value: SplitArea): Self = StObject.set(x, "splitArea", value.asInstanceOf[js.Any])
        
        @scala.inline
        def setSplitAreaUndefined: Self = StObject.set(x, "splitArea", js.undefined)
        
        @scala.inline
        def setSplitLine(value: SplitLine): Self = StObject.set(x, "splitLine", value.asInstanceOf[js.Any])
        
        @scala.inline
        def setSplitLineUndefined: Self = StObject.set(x, "splitLine", js.undefined)
        
        @scala.inline
        def setSplitNumber(value: Double): Self = StObject.set(x, "splitNumber", value.asInstanceOf[js.Any])
        
        @scala.inline
        def setSplitNumberUndefined: Self = StObject.set(x, "splitNumber", js.undefined)
        
        @scala.inline
        def setTriggerEvent(value: Boolean): Self = StObject.set(x, "triggerEvent", value.asInstanceOf[js.Any])
        
        @scala.inline
        def setTriggerEventUndefined: Self = StObject.set(x, "triggerEvent", js.undefined)
        
        @scala.inline
        def setZ(value: Double): Self = StObject.set(x, "z", value.asInstanceOf[js.Any])
        
        @scala.inline
        def setZUndefined: Self = StObject.set(x, "z", js.undefined)
        
        @scala.inline
        def setZlevel(value: Double): Self = StObject.set(x, "zlevel", value.asInstanceOf[js.Any])
        
        @scala.inline
        def setZlevelUndefined: Self = StObject.set(x, "zlevel", js.undefined)
      }
      
      /**
        * @todo describe
        */
      @js.native
      trait DataObject extends StObject {
        
        var textStyle: js.UndefOr[TextStyleWithRich] = js.native
        
        var value: js.UndefOr[String | Double] = js.native
      }
      object DataObject {
        
        @scala.inline
        def apply(): DataObject = {
          val __obj = js.Dynamic.literal()
          __obj.asInstanceOf[DataObject]
        }
        
        @scala.inline
        implicit class DataObjectMutableBuilder[Self <: DataObject] (val x: Self) extends AnyVal {
          
          @scala.inline
          def setTextStyle(value: TextStyleWithRich): Self = StObject.set(x, "textStyle", value.asInstanceOf[js.Any])
          
          @scala.inline
          def setTextStyleUndefined: Self = StObject.set(x, "textStyle", js.undefined)
          
          @scala.inline
          def setValue(value: String | Double): Self = StObject.set(x, "value", value.asInstanceOf[js.Any])
          
          @scala.inline
          def setValueUndefined: Self = StObject.set(x, "value", js.undefined)
        }
      }
      
      /**
        * @todo describe
        */
      @js.native
      trait Label extends TextStyleWithRich {
        
        var formatter: js.UndefOr[String | js.Function] = js.native
        
        var inside: js.UndefOr[Boolean] = js.native
        
        var interval: js.UndefOr[Double | js.Function] = js.native
        
        var margin: js.UndefOr[Double] = js.native
        
        var rotate: js.UndefOr[Double] = js.native
        
        var show: js.UndefOr[Boolean] = js.native
        
        var showMaxLabel: js.UndefOr[Boolean] = js.native
        
        var showMinLabel: js.UndefOr[Boolean] = js.native
      }
      object Label {
        
        @scala.inline
        def apply(): Label = {
          val __obj = js.Dynamic.literal()
          __obj.asInstanceOf[Label]
        }
        
        @scala.inline
        implicit class LabelMutableBuilder[Self <: Label] (val x: Self) extends AnyVal {
          
          @scala.inline
          def setFormatter(value: String | js.Function): Self = StObject.set(x, "formatter", value.asInstanceOf[js.Any])
          
          @scala.inline
          def setFormatterUndefined: Self = StObject.set(x, "formatter", js.undefined)
          
          @scala.inline
          def setInside(value: Boolean): Self = StObject.set(x, "inside", value.asInstanceOf[js.Any])
          
          @scala.inline
          def setInsideUndefined: Self = StObject.set(x, "inside", js.undefined)
          
          @scala.inline
          def setInterval(value: Double | js.Function): Self = StObject.set(x, "interval", value.asInstanceOf[js.Any])
          
          @scala.inline
          def setIntervalUndefined: Self = StObject.set(x, "interval", js.undefined)
          
          @scala.inline
          def setMargin(value: Double): Self = StObject.set(x, "margin", value.asInstanceOf[js.Any])
          
          @scala.inline
          def setMarginUndefined: Self = StObject.set(x, "margin", js.undefined)
          
          @scala.inline
          def setRotate(value: Double): Self = StObject.set(x, "rotate", value.asInstanceOf[js.Any])
          
          @scala.inline
          def setRotateUndefined: Self = StObject.set(x, "rotate", js.undefined)
          
          @scala.inline
          def setShow(value: Boolean): Self = StObject.set(x, "show", value.asInstanceOf[js.Any])
          
          @scala.inline
          def setShowMaxLabel(value: Boolean): Self = StObject.set(x, "showMaxLabel", value.asInstanceOf[js.Any])
          
          @scala.inline
          def setShowMaxLabelUndefined: Self = StObject.set(x, "showMaxLabel", js.undefined)
          
          @scala.inline
          def setShowMinLabel(value: Boolean): Self = StObject.set(x, "showMinLabel", value.asInstanceOf[js.Any])
          
          @scala.inline
          def setShowMinLabelUndefined: Self = StObject.set(x, "showMinLabel", js.undefined)
          
          @scala.inline
          def setShowUndefined: Self = StObject.set(x, "show", js.undefined)
        }
      }
      
      /**
        * @todo describe
        */
      @js.native
      trait MinorSplitLine extends StObject {
        
        var lineStyle: js.UndefOr[LineStyle] = js.native
        
        var show: js.UndefOr[Boolean] = js.native
      }
      object MinorSplitLine {
        
        @scala.inline
        def apply(): MinorSplitLine = {
          val __obj = js.Dynamic.literal()
          __obj.asInstanceOf[MinorSplitLine]
        }
        
        @scala.inline
        implicit class MinorSplitLineMutableBuilder[Self <: MinorSplitLine] (val x: Self) extends AnyVal {
          
          @scala.inline
          def setLineStyle(value: LineStyle): Self = StObject.set(x, "lineStyle", value.asInstanceOf[js.Any])
          
          @scala.inline
          def setLineStyleUndefined: Self = StObject.set(x, "lineStyle", js.undefined)
          
          @scala.inline
          def setShow(value: Boolean): Self = StObject.set(x, "show", value.asInstanceOf[js.Any])
          
          @scala.inline
          def setShowUndefined: Self = StObject.set(x, "show", js.undefined)
        }
      }
      
      /**
        * @todo describe
        */
      @js.native
      trait MinorTick extends StObject {
        
        var length: js.UndefOr[Double] = js.native
        
        var lineStyle: js.UndefOr[LineStyle] = js.native
        
        var show: js.UndefOr[Boolean] = js.native
        
        var splitNumber: js.UndefOr[Double] = js.native
      }
      object MinorTick {
        
        @scala.inline
        def apply(): MinorTick = {
          val __obj = js.Dynamic.literal()
          __obj.asInstanceOf[MinorTick]
        }
        
        @scala.inline
        implicit class MinorTickMutableBuilder[Self <: MinorTick] (val x: Self) extends AnyVal {
          
          @scala.inline
          def setLength(value: Double): Self = StObject.set(x, "length", value.asInstanceOf[js.Any])
          
          @scala.inline
          def setLengthUndefined: Self = StObject.set(x, "length", js.undefined)
          
          @scala.inline
          def setLineStyle(value: LineStyle): Self = StObject.set(x, "lineStyle", value.asInstanceOf[js.Any])
          
          @scala.inline
          def setLineStyleUndefined: Self = StObject.set(x, "lineStyle", js.undefined)
          
          @scala.inline
          def setShow(value: Boolean): Self = StObject.set(x, "show", value.asInstanceOf[js.Any])
          
          @scala.inline
          def setShowUndefined: Self = StObject.set(x, "show", js.undefined)
          
          @scala.inline
          def setSplitNumber(value: Double): Self = StObject.set(x, "splitNumber", value.asInstanceOf[js.Any])
          
          @scala.inline
          def setSplitNumberUndefined: Self = StObject.set(x, "splitNumber", js.undefined)
        }
      }
      
      /**
        * @todo describe
        */
      @js.native
      trait Pointer extends StObject {
        
        var handle: js.UndefOr[Icon] = js.native
        
        var label: js.UndefOr[PointerLabel] = js.native
        
        var lineStyle: js.UndefOr[LineStyle] = js.native
        
        var shadowStyle: js.UndefOr[Opacity] = js.native
        
        var show: js.UndefOr[Boolean] = js.native
        
        var snap: js.UndefOr[Boolean] = js.native
        
        var status: js.UndefOr[Boolean] = js.native
        
        var triggerTooltip: js.UndefOr[Boolean] = js.native
        
        var `type`: js.UndefOr[line | shadow | none] = js.native
        
        var value: js.UndefOr[Double] = js.native
        
        var z: js.UndefOr[Double] = js.native
      }
      object Pointer {
        
        @scala.inline
        def apply(): Pointer = {
          val __obj = js.Dynamic.literal()
          __obj.asInstanceOf[Pointer]
        }
        
        @scala.inline
        implicit class PointerMutableBuilder[Self <: Pointer] (val x: Self) extends AnyVal {
          
          @scala.inline
          def setHandle(value: Icon): Self = StObject.set(x, "handle", value.asInstanceOf[js.Any])
          
          @scala.inline
          def setHandleUndefined: Self = StObject.set(x, "handle", js.undefined)
          
          @scala.inline
          def setLabel(value: PointerLabel): Self = StObject.set(x, "label", value.asInstanceOf[js.Any])
          
          @scala.inline
          def setLabelUndefined: Self = StObject.set(x, "label", js.undefined)
          
          @scala.inline
          def setLineStyle(value: LineStyle): Self = StObject.set(x, "lineStyle", value.asInstanceOf[js.Any])
          
          @scala.inline
          def setLineStyleUndefined: Self = StObject.set(x, "lineStyle", js.undefined)
          
          @scala.inline
          def setShadowStyle(value: Opacity): Self = StObject.set(x, "shadowStyle", value.asInstanceOf[js.Any])
          
          @scala.inline
          def setShadowStyleUndefined: Self = StObject.set(x, "shadowStyle", js.undefined)
          
          @scala.inline
          def setShow(value: Boolean): Self = StObject.set(x, "show", value.asInstanceOf[js.Any])
          
          @scala.inline
          def setShowUndefined: Self = StObject.set(x, "show", js.undefined)
          
          @scala.inline
          def setSnap(value: Boolean): Self = StObject.set(x, "snap", value.asInstanceOf[js.Any])
          
          @scala.inline
          def setSnapUndefined: Self = StObject.set(x, "snap", js.undefined)
          
          @scala.inline
          def setStatus(value: Boolean): Self = StObject.set(x, "status", value.asInstanceOf[js.Any])
          
          @scala.inline
          def setStatusUndefined: Self = StObject.set(x, "status", js.undefined)
          
          @scala.inline
          def setTriggerTooltip(value: Boolean): Self = StObject.set(x, "triggerTooltip", value.asInstanceOf[js.Any])
          
          @scala.inline
          def setTriggerTooltipUndefined: Self = StObject.set(x, "triggerTooltip", js.undefined)
          
          @scala.inline
          def setType(value: line | shadow | none): Self = StObject.set(x, "type", value.asInstanceOf[js.Any])
          
          @scala.inline
          def setTypeUndefined: Self = StObject.set(x, "type", js.undefined)
          
          @scala.inline
          def setValue(value: Double): Self = StObject.set(x, "value", value.asInstanceOf[js.Any])
          
          @scala.inline
          def setValueUndefined: Self = StObject.set(x, "value", js.undefined)
          
          @scala.inline
          def setZ(value: Double): Self = StObject.set(x, "z", value.asInstanceOf[js.Any])
          
          @scala.inline
          def setZUndefined: Self = StObject.set(x, "z", js.undefined)
        }
      }
      
      @js.native
      trait PointerLabel extends StObject {
        
        var backgroundColor: js.UndefOr[String | js.Object] = js.native
        
        var borderColor: js.UndefOr[String] = js.native
        
        var borderRadius: js.UndefOr[Double] = js.native
        
        var borderWidth: js.UndefOr[Double] = js.native
        
        var color: js.UndefOr[String] = js.native
        
        var fontFamily: js.UndefOr[String] = js.native
        
        var fontSize: js.UndefOr[Double] = js.native
        
        var fontStyle: js.UndefOr[normal | italic | oblique] = js.native
        
        var fontWeight: js.UndefOr[
                normal | bold | bolder | lighter | `100` | `200` | `300` | `400` | `500` | `600` | `700` | `800` | `900`
              ] = js.native
        
        var formatter: js.UndefOr[String | js.Function] = js.native
        
        var height: js.UndefOr[Double | String] = js.native
        
        var lineHeight: js.UndefOr[Double] = js.native
        
        var margin: js.UndefOr[Double] = js.native
        
        var padding: js.UndefOr[Double | js.Array[Double]] = js.native
        
        var precision: js.UndefOr[Double | String] = js.native
        
        var shadowBlur: js.UndefOr[Double] = js.native
        
        var shadowColor: js.UndefOr[String] = js.native
        
        var shadowOffsetX: js.UndefOr[Double] = js.native
        
        var shadowOffsetY: js.UndefOr[Double] = js.native
        
        var show: js.UndefOr[Boolean] = js.native
        
        var textBorderColor: js.UndefOr[String] = js.native
        
        var textBorderWidth: js.UndefOr[Double] = js.native
        
        var textShadowBlur: js.UndefOr[Double] = js.native
        
        var textShadowColor: js.UndefOr[String] = js.native
        
        var textShadowOffsetX: js.UndefOr[Double] = js.native
        
        var textShadowOffsetY: js.UndefOr[Double] = js.native
        
        var width: js.UndefOr[Double | String] = js.native
      }
      object PointerLabel {
        
        @scala.inline
        def apply(): PointerLabel = {
          val __obj = js.Dynamic.literal()
          __obj.asInstanceOf[PointerLabel]
        }
        
        @scala.inline
        implicit class PointerLabelMutableBuilder[Self <: PointerLabel] (val x: Self) extends AnyVal {
          
          @scala.inline
          def setBackgroundColor(value: String | js.Object): Self = StObject.set(x, "backgroundColor", value.asInstanceOf[js.Any])
          
          @scala.inline
          def setBackgroundColorUndefined: Self = StObject.set(x, "backgroundColor", js.undefined)
          
          @scala.inline
          def setBorderColor(value: String): Self = StObject.set(x, "borderColor", value.asInstanceOf[js.Any])
          
          @scala.inline
          def setBorderColorUndefined: Self = StObject.set(x, "borderColor", js.undefined)
          
          @scala.inline
          def setBorderRadius(value: Double): Self = StObject.set(x, "borderRadius", value.asInstanceOf[js.Any])
          
          @scala.inline
          def setBorderRadiusUndefined: Self = StObject.set(x, "borderRadius", js.undefined)
          
          @scala.inline
          def setBorderWidth(value: Double): Self = StObject.set(x, "borderWidth", value.asInstanceOf[js.Any])
          
          @scala.inline
          def setBorderWidthUndefined: Self = StObject.set(x, "borderWidth", js.undefined)
          
          @scala.inline
          def setColor(value: String): Self = StObject.set(x, "color", value.asInstanceOf[js.Any])
          
          @scala.inline
          def setColorUndefined: Self = StObject.set(x, "color", js.undefined)
          
          @scala.inline
          def setFontFamily(value: String): Self = StObject.set(x, "fontFamily", value.asInstanceOf[js.Any])
          
          @scala.inline
          def setFontFamilyUndefined: Self = StObject.set(x, "fontFamily", js.undefined)
          
          @scala.inline
          def setFontSize(value: Double): Self = StObject.set(x, "fontSize", value.asInstanceOf[js.Any])
          
          @scala.inline
          def setFontSizeUndefined: Self = StObject.set(x, "fontSize", js.undefined)
          
          @scala.inline
          def setFontStyle(value: normal | italic | oblique): Self = StObject.set(x, "fontStyle", value.asInstanceOf[js.Any])
          
          @scala.inline
          def setFontStyleUndefined: Self = StObject.set(x, "fontStyle", js.undefined)
          
          @scala.inline
          def setFontWeight(
            value: normal | bold | bolder | lighter | `100` | `200` | `300` | `400` | `500` | `600` | `700` | `800` | `900`
          ): Self = StObject.set(x, "fontWeight", value.asInstanceOf[js.Any])
          
          @scala.inline
          def setFontWeightUndefined: Self = StObject.set(x, "fontWeight", js.undefined)
          
          @scala.inline
          def setFormatter(value: String | js.Function): Self = StObject.set(x, "formatter", value.asInstanceOf[js.Any])
          
          @scala.inline
          def setFormatterUndefined: Self = StObject.set(x, "formatter", js.undefined)
          
          @scala.inline
          def setHeight(value: Double | String): Self = StObject.set(x, "height", value.asInstanceOf[js.Any])
          
          @scala.inline
          def setHeightUndefined: Self = StObject.set(x, "height", js.undefined)
          
          @scala.inline
          def setLineHeight(value: Double): Self = StObject.set(x, "lineHeight", value.asInstanceOf[js.Any])
          
          @scala.inline
          def setLineHeightUndefined: Self = StObject.set(x, "lineHeight", js.undefined)
          
          @scala.inline
          def setMargin(value: Double): Self = StObject.set(x, "margin", value.asInstanceOf[js.Any])
          
          @scala.inline
          def setMarginUndefined: Self = StObject.set(x, "margin", js.undefined)
          
          @scala.inline
          def setPadding(value: Double | js.Array[Double]): Self = StObject.set(x, "padding", value.asInstanceOf[js.Any])
          
          @scala.inline
          def setPaddingUndefined: Self = StObject.set(x, "padding", js.undefined)
          
          @scala.inline
          def setPaddingVarargs(value: Double*): Self = StObject.set(x, "padding", js.Array(value :_*))
          
          @scala.inline
          def setPrecision(value: Double | String): Self = StObject.set(x, "precision", value.asInstanceOf[js.Any])
          
          @scala.inline
          def setPrecisionUndefined: Self = StObject.set(x, "precision", js.undefined)
          
          @scala.inline
          def setShadowBlur(value: Double): Self = StObject.set(x, "shadowBlur", value.asInstanceOf[js.Any])
          
          @scala.inline
          def setShadowBlurUndefined: Self = StObject.set(x, "shadowBlur", js.undefined)
          
          @scala.inline
          def setShadowColor(value: String): Self = StObject.set(x, "shadowColor", value.asInstanceOf[js.Any])
          
          @scala.inline
          def setShadowColorUndefined: Self = StObject.set(x, "shadowColor", js.undefined)
          
          @scala.inline
          def setShadowOffsetX(value: Double): Self = StObject.set(x, "shadowOffsetX", value.asInstanceOf[js.Any])
          
          @scala.inline
          def setShadowOffsetXUndefined: Self = StObject.set(x, "shadowOffsetX", js.undefined)
          
          @scala.inline
          def setShadowOffsetY(value: Double): Self = StObject.set(x, "shadowOffsetY", value.asInstanceOf[js.Any])
          
          @scala.inline
          def setShadowOffsetYUndefined: Self = StObject.set(x, "shadowOffsetY", js.undefined)
          
          @scala.inline
          def setShow(value: Boolean): Self = StObject.set(x, "show", value.asInstanceOf[js.Any])
          
          @scala.inline
          def setShowUndefined: Self = StObject.set(x, "show", js.undefined)
          
          @scala.inline
          def setTextBorderColor(value: String): Self = StObject.set(x, "textBorderColor", value.asInstanceOf[js.Any])
          
          @scala.inline
          def setTextBorderColorUndefined: Self = StObject.set(x, "textBorderColor", js.undefined)
          
          @scala.inline
          def setTextBorderWidth(value: Double): Self = StObject.set(x, "textBorderWidth", value.asInstanceOf[js.Any])
          
          @scala.inline
          def setTextBorderWidthUndefined: Self = StObject.set(x, "textBorderWidth", js.undefined)
          
          @scala.inline
          def setTextShadowBlur(value: Double): Self = StObject.set(x, "textShadowBlur", value.asInstanceOf[js.Any])
          
          @scala.inline
          def setTextShadowBlurUndefined: Self = StObject.set(x, "textShadowBlur", js.undefined)
          
          @scala.inline
          def setTextShadowColor(value: String): Self = StObject.set(x, "textShadowColor", value.asInstanceOf[js.Any])
          
          @scala.inline
          def setTextShadowColorUndefined: Self = StObject.set(x, "textShadowColor", js.undefined)
          
          @scala.inline
          def setTextShadowOffsetX(value: Double): Self = StObject.set(x, "textShadowOffsetX", value.asInstanceOf[js.Any])
          
          @scala.inline
          def setTextShadowOffsetXUndefined: Self = StObject.set(x, "textShadowOffsetX", js.undefined)
          
          @scala.inline
          def setTextShadowOffsetY(value: Double): Self = StObject.set(x, "textShadowOffsetY", value.asInstanceOf[js.Any])
          
          @scala.inline
          def setTextShadowOffsetYUndefined: Self = StObject.set(x, "textShadowOffsetY", js.undefined)
          
          @scala.inline
          def setWidth(value: Double | String): Self = StObject.set(x, "width", value.asInstanceOf[js.Any])
          
          @scala.inline
          def setWidthUndefined: Self = StObject.set(x, "width", js.undefined)
        }
      }
      
      /**
        * @todo describe
        */
      @js.native
      trait SplitArea extends StObject {
        
        var areaStyle: js.UndefOr[typingsSlinky.echarts.anon.Color] = js.native
        
        var interval: js.UndefOr[Double | js.Function] = js.native
        
        var show: js.UndefOr[Boolean] = js.native
      }
      object SplitArea {
        
        @scala.inline
        def apply(): SplitArea = {
          val __obj = js.Dynamic.literal()
          __obj.asInstanceOf[SplitArea]
        }
        
        @scala.inline
        implicit class SplitAreaMutableBuilder[Self <: SplitArea] (val x: Self) extends AnyVal {
          
          @scala.inline
          def setAreaStyle(value: typingsSlinky.echarts.anon.Color): Self = StObject.set(x, "areaStyle", value.asInstanceOf[js.Any])
          
          @scala.inline
          def setAreaStyleUndefined: Self = StObject.set(x, "areaStyle", js.undefined)
          
          @scala.inline
          def setInterval(value: Double | js.Function): Self = StObject.set(x, "interval", value.asInstanceOf[js.Any])
          
          @scala.inline
          def setIntervalUndefined: Self = StObject.set(x, "interval", js.undefined)
          
          @scala.inline
          def setShow(value: Boolean): Self = StObject.set(x, "show", value.asInstanceOf[js.Any])
          
          @scala.inline
          def setShowUndefined: Self = StObject.set(x, "show", js.undefined)
        }
      }
      
      /**
        * @todo describe
        */
      @js.native
      trait SplitLine extends StObject {
        
        var interval: js.UndefOr[Double | js.Function] = js.native
        
        var lineStyle: js.UndefOr[LineStyle] = js.native
        
        var show: js.UndefOr[Boolean] = js.native
      }
      object SplitLine {
        
        @scala.inline
        def apply(): SplitLine = {
          val __obj = js.Dynamic.literal()
          __obj.asInstanceOf[SplitLine]
        }
        
        @scala.inline
        implicit class SplitLineMutableBuilder[Self <: SplitLine] (val x: Self) extends AnyVal {
          
          @scala.inline
          def setInterval(value: Double | js.Function): Self = StObject.set(x, "interval", value.asInstanceOf[js.Any])
          
          @scala.inline
          def setIntervalUndefined: Self = StObject.set(x, "interval", js.undefined)
          
          @scala.inline
          def setLineStyle(value: LineStyle): Self = StObject.set(x, "lineStyle", value.asInstanceOf[js.Any])
          
          @scala.inline
          def setLineStyleUndefined: Self = StObject.set(x, "lineStyle", js.undefined)
          
          @scala.inline
          def setShow(value: Boolean): Self = StObject.set(x, "show", value.asInstanceOf[js.Any])
          
          @scala.inline
          def setShowUndefined: Self = StObject.set(x, "show", js.undefined)
        }
      }
      
      /**
        * @todo describe
        */
      @js.native
      trait Tick extends StObject {
        
        var alignWithLabel: js.UndefOr[Boolean] = js.native
        
        var inside: js.UndefOr[Boolean] = js.native
        
        var interval: js.UndefOr[Double | js.Function] = js.native
        
        var length: js.UndefOr[Double] = js.native
        
        var lineStyle: js.UndefOr[LineStyle] = js.native
        
        var show: js.UndefOr[Boolean] = js.native
      }
      object Tick {
        
        @scala.inline
        def apply(): Tick = {
          val __obj = js.Dynamic.literal()
          __obj.asInstanceOf[Tick]
        }
        
        @scala.inline
        implicit class TickMutableBuilder[Self <: Tick] (val x: Self) extends AnyVal {
          
          @scala.inline
          def setAlignWithLabel(value: Boolean): Self = StObject.set(x, "alignWithLabel", value.asInstanceOf[js.Any])
          
          @scala.inline
          def setAlignWithLabelUndefined: Self = StObject.set(x, "alignWithLabel", js.undefined)
          
          @scala.inline
          def setInside(value: Boolean): Self = StObject.set(x, "inside", value.asInstanceOf[js.Any])
          
          @scala.inline
          def setInsideUndefined: Self = StObject.set(x, "inside", js.undefined)
          
          @scala.inline
          def setInterval(value: Double | js.Function): Self = StObject.set(x, "interval", value.asInstanceOf[js.Any])
          
          @scala.inline
          def setIntervalUndefined: Self = StObject.set(x, "interval", js.undefined)
          
          @scala.inline
          def setLength(value: Double): Self = StObject.set(x, "length", value.asInstanceOf[js.Any])
          
          @scala.inline
          def setLengthUndefined: Self = StObject.set(x, "length", js.undefined)
          
          @scala.inline
          def setLineStyle(value: LineStyle): Self = StObject.set(x, "lineStyle", value.asInstanceOf[js.Any])
          
          @scala.inline
          def setLineStyleUndefined: Self = StObject.set(x, "lineStyle", js.undefined)
          
          @scala.inline
          def setShow(value: Boolean): Self = StObject.set(x, "show", value.asInstanceOf[js.Any])
          
          @scala.inline
          def setShowUndefined: Self = StObject.set(x, "show", js.undefined)
        }
      }
      
      /* Rewritten from type alias, can be one of: 
        - typingsSlinky.echarts.echartsStrings.value
        - typingsSlinky.echarts.echartsStrings.category
        - typingsSlinky.echarts.echartsStrings.time
        - typingsSlinky.echarts.echartsStrings.log
      */
      trait Type extends StObject
      object Type {
        
        @scala.inline
        def category: typingsSlinky.echarts.echartsStrings.category = "category".asInstanceOf[typingsSlinky.echarts.echartsStrings.category]
        
        @scala.inline
        def log: typingsSlinky.echarts.echartsStrings.log = "log".asInstanceOf[typingsSlinky.echarts.echartsStrings.log]
        
        @scala.inline
        def time: typingsSlinky.echarts.echartsStrings.time = "time".asInstanceOf[typingsSlinky.echarts.echartsStrings.time]
        
        @scala.inline
        def value: typingsSlinky.echarts.echartsStrings.value = "value".asInstanceOf[typingsSlinky.echarts.echartsStrings.value]
      }
    }
    
    /**
      * @todo describe
      */
    @js.native
    trait Line extends StObject {
      
      var lineStyle: js.UndefOr[LineStyle] = js.native
      
      var onZero: js.UndefOr[Boolean] = js.native
      
      var onZeroAxisIndex: js.UndefOr[Double] = js.native
      
      var show: js.UndefOr[Boolean] = js.native
      
      var symbol: js.UndefOr[String | js.Array[String]] = js.native
      
      var symbolOffset: js.UndefOr[js.Array[Double]] = js.native
      
      var symbolSize: js.UndefOr[js.Array[Double]] = js.native
    }
    object Line {
      
      @scala.inline
      def apply(): Line = {
        val __obj = js.Dynamic.literal()
        __obj.asInstanceOf[Line]
      }
      
      @scala.inline
      implicit class LineMutableBuilder[Self <: Line] (val x: Self) extends AnyVal {
        
        @scala.inline
        def setLineStyle(value: LineStyle): Self = StObject.set(x, "lineStyle", value.asInstanceOf[js.Any])
        
        @scala.inline
        def setLineStyleUndefined: Self = StObject.set(x, "lineStyle", js.undefined)
        
        @scala.inline
        def setOnZero(value: Boolean): Self = StObject.set(x, "onZero", value.asInstanceOf[js.Any])
        
        @scala.inline
        def setOnZeroAxisIndex(value: Double): Self = StObject.set(x, "onZeroAxisIndex", value.asInstanceOf[js.Any])
        
        @scala.inline
        def setOnZeroAxisIndexUndefined: Self = StObject.set(x, "onZeroAxisIndex", js.undefined)
        
        @scala.inline
        def setOnZeroUndefined: Self = StObject.set(x, "onZero", js.undefined)
        
        @scala.inline
        def setShow(value: Boolean): Self = StObject.set(x, "show", value.asInstanceOf[js.Any])
        
        @scala.inline
        def setShowUndefined: Self = StObject.set(x, "show", js.undefined)
        
        @scala.inline
        def setSymbol(value: String | js.Array[String]): Self = StObject.set(x, "symbol", value.asInstanceOf[js.Any])
        
        @scala.inline
        def setSymbolOffset(value: js.Array[Double]): Self = StObject.set(x, "symbolOffset", value.asInstanceOf[js.Any])
        
        @scala.inline
        def setSymbolOffsetUndefined: Self = StObject.set(x, "symbolOffset", js.undefined)
        
        @scala.inline
        def setSymbolOffsetVarargs(value: Double*): Self = StObject.set(x, "symbolOffset", js.Array(value :_*))
        
        @scala.inline
        def setSymbolSize(value: js.Array[Double]): Self = StObject.set(x, "symbolSize", value.asInstanceOf[js.Any])
        
        @scala.inline
        def setSymbolSizeUndefined: Self = StObject.set(x, "symbolSize", js.undefined)
        
        @scala.inline
        def setSymbolSizeVarargs(value: Double*): Self = StObject.set(x, "symbolSize", js.Array(value :_*))
        
        @scala.inline
        def setSymbolUndefined: Self = StObject.set(x, "symbol", js.undefined)
        
        @scala.inline
        def setSymbolVarargs(value: String*): Self = StObject.set(x, "symbol", js.Array(value :_*))
      }
    }
  }
  
  /**
    * Calendar coordinates.
    *
    * @see https://echarts.apache.org/en/option.html#calendar
    */
  @js.native
  trait Calendar extends StObject {
    
    /**
      * Distance between calendar component and the bottom side of the container.
      * bottom value can be instant pixel value like 20;
      * it can also be percentage value relative to container width like '20%'.
      * Adaptive by default.
      *
      * @default 'auto'
      */
    var bottom: js.UndefOr[Double | String] = js.native
    
    /**
      * The size of each rect of calendar coordinates,
      * can be set to a single value or array,
      * the first element is width and the second element is height.
      * Support setting self-adaptation: auto, the default width and height to be 20.
      *
      * @default 20
      */
    var cellSize: js.UndefOr[Double | auto | (js.Array[auto | Double])] = js.native
    
    /**
      * Day style in calendar coordinates.
      * @see https://echarts.apache.org/en/option.html#calendar.dayLabel
      */
    var dayLabel: js.UndefOr[DayLabel] = js.native
    
    /**
      * The height of calendar coordinates.
      * Note: cellSize is 20 by default.
      * If height is set, cellSize[1] will be forced to auto;
      */
    var height: js.UndefOr[Double | String] = js.native
    
    /**
      * Component ID, not specified by default.
      * If specified, it can be used to refer the component in option or API.
      */
    var id: js.UndefOr[String] = js.native
    
    /**
      * Every rect style in calendar coordinates.
      *
      * @see https://echarts.apache.org/en/option.html#calendar.itemStyle
      */
    var itemStyle: js.UndefOr[BorderColor] = js.native
    
    /**
      * Distance between calendar component and the left side of the container.
      * left value can be instant pixel value like 20;
      * it can also be percentage value relative to container width like '20%';
      * and it can also be 'left', 'center', or 'right'.
      * If the left value is set to be 'left', 'center', or 'right',
      * then the component will be aligned automatically based on position.
      *
      * @default 80
      */
    var left: js.UndefOr[Double | String] = js.native
    
    /**
      * Month label in calendar coordinates.
      * @see https://echarts.apache.org/en/option.html#calendar.monthLabel
      */
    var monthLabel: js.UndefOr[MonthLabel] = js.native
    
    /**
      * The layout orientation of calendar.
      */
    var orient: js.UndefOr[horizontal | vertical] = js.native
    
    /**
      * Required, range of Calendar coordinates, support multiple formats.
      *
      * @see https://echarts.apache.org/en/option.html#calendar
      */
    var range: js.UndefOr[Double | String | (js.Array[Double | String])] = js.native
    
    /**
      * Distance between calendar component and the right side of the container.
      * right value can be instant pixel value like 20;
      * it can also be percentage value relative to container width like '20%'.
      * Adaptive by default.
      *
      * @default 'auto'
      */
    var right: js.UndefOr[Double | String] = js.native
    
    /**
      * Whether to ignore mouse events.
      * Default value is false, for triggering and responding to mouse events.
      *
      * @default false
      */
    var silent: js.UndefOr[Boolean] = js.native
    
    /**
      * Calendar coordinates splitLine style.
      */
    var splitLine: js.UndefOr[typingsSlinky.echarts.anon.LineStyle] = js.native
    
    /**
      * Distance between calendar component and the top side of the container.
      * top value can be instant pixel value like 20;
      * it can also be percentage value relative to container width like '20%';
      * and it can also be 'top', 'middle', or 'bottom'.
      * If the left value is set to be 'top', 'middle', or 'bottom',
      * then the component will be aligned automatically based on position.
      *
      * @default 60
      */
    var top: js.UndefOr[Double | String] = js.native
    
    /**
      * The height of calendar coordinates.
      * Note: cellSize is 20 by default.
      * If width is set, cellSize[0] will be forced to auto;
      *
      * @default 'auto'
      */
    var width: js.UndefOr[Double | String] = js.native
    
    /**
      * Year label in calendar coordinates.
      * @see https://echarts.apache.org/en/option.html#calendar.yearLabel
      */
    var yearLabel: js.UndefOr[YearLabel] = js.native
    
    /**
      * z value of all graphical elements in, which controls order of drawing graphical components.
      * Components with smaller z values may be overwritten by those with larger z values.
      * z has a lower priority to zlevel, and will not create new Canvas.
      *
      * @default 2
      */
    var z: js.UndefOr[Double] = js.native
    
    /**
      * zlevel value of all graphical elements in.
      * zlevel is used to make layers with Canvas.
      * Graphical elements with different zlevel values will be placed in different Canvases,
      * which is a common optimization technique.
      * We can put those frequently changed elements (like those with animations) to a seperate zlevel.
      * Notice that too many Canvases will increase memory cost, and should be used carefully on mobile phones to avoid crash.
      *
      * @default 0
      */
    var zlevel: js.UndefOr[Double] = js.native
  }
  object Calendar {
    
    @scala.inline
    def apply(): Calendar = {
      val __obj = js.Dynamic.literal()
      __obj.asInstanceOf[Calendar]
    }
    
    @scala.inline
    implicit class CalendarMutableBuilder[Self <: Calendar] (val x: Self) extends AnyVal {
      
      @scala.inline
      def setBottom(value: Double | String): Self = StObject.set(x, "bottom", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setBottomUndefined: Self = StObject.set(x, "bottom", js.undefined)
      
      @scala.inline
      def setCellSize(value: Double | auto | (js.Array[auto | Double])): Self = StObject.set(x, "cellSize", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setCellSizeUndefined: Self = StObject.set(x, "cellSize", js.undefined)
      
      @scala.inline
      def setCellSizeVarargs(value: (auto | Double)*): Self = StObject.set(x, "cellSize", js.Array(value :_*))
      
      @scala.inline
      def setDayLabel(value: DayLabel): Self = StObject.set(x, "dayLabel", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setDayLabelUndefined: Self = StObject.set(x, "dayLabel", js.undefined)
      
      @scala.inline
      def setHeight(value: Double | String): Self = StObject.set(x, "height", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setHeightUndefined: Self = StObject.set(x, "height", js.undefined)
      
      @scala.inline
      def setId(value: String): Self = StObject.set(x, "id", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setIdUndefined: Self = StObject.set(x, "id", js.undefined)
      
      @scala.inline
      def setItemStyle(value: BorderColor): Self = StObject.set(x, "itemStyle", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setItemStyleUndefined: Self = StObject.set(x, "itemStyle", js.undefined)
      
      @scala.inline
      def setLeft(value: Double | String): Self = StObject.set(x, "left", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setLeftUndefined: Self = StObject.set(x, "left", js.undefined)
      
      @scala.inline
      def setMonthLabel(value: MonthLabel): Self = StObject.set(x, "monthLabel", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setMonthLabelUndefined: Self = StObject.set(x, "monthLabel", js.undefined)
      
      @scala.inline
      def setOrient(value: horizontal | vertical): Self = StObject.set(x, "orient", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setOrientUndefined: Self = StObject.set(x, "orient", js.undefined)
      
      @scala.inline
      def setRange(value: Double | String | (js.Array[Double | String])): Self = StObject.set(x, "range", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setRangeUndefined: Self = StObject.set(x, "range", js.undefined)
      
      @scala.inline
      def setRangeVarargs(value: (Double | String)*): Self = StObject.set(x, "range", js.Array(value :_*))
      
      @scala.inline
      def setRight(value: Double | String): Self = StObject.set(x, "right", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setRightUndefined: Self = StObject.set(x, "right", js.undefined)
      
      @scala.inline
      def setSilent(value: Boolean): Self = StObject.set(x, "silent", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setSilentUndefined: Self = StObject.set(x, "silent", js.undefined)
      
      @scala.inline
      def setSplitLine(value: typingsSlinky.echarts.anon.LineStyle): Self = StObject.set(x, "splitLine", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setSplitLineUndefined: Self = StObject.set(x, "splitLine", js.undefined)
      
      @scala.inline
      def setTop(value: Double | String): Self = StObject.set(x, "top", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setTopUndefined: Self = StObject.set(x, "top", js.undefined)
      
      @scala.inline
      def setWidth(value: Double | String): Self = StObject.set(x, "width", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setWidthUndefined: Self = StObject.set(x, "width", js.undefined)
      
      @scala.inline
      def setYearLabel(value: YearLabel): Self = StObject.set(x, "yearLabel", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setYearLabelUndefined: Self = StObject.set(x, "yearLabel", js.undefined)
      
      @scala.inline
      def setZ(value: Double): Self = StObject.set(x, "z", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setZUndefined: Self = StObject.set(x, "z", js.undefined)
      
      @scala.inline
      def setZlevel(value: Double): Self = StObject.set(x, "zlevel", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setZlevelUndefined: Self = StObject.set(x, "zlevel", js.undefined)
    }
    
    @js.native
    trait DayLabel
      extends typingsSlinky.echarts.echarts.EChartOption.Calendar.Label {
      
      /**
        * A week from the beginning of the week, the default starting on Sunday.
        *
        * @default 0
        */
      var firstDay: js.UndefOr[Double] = js.native
      
      /**
        * Position of week, at the beginning or end of the range.
        *
        * @default 'start'
        */
      var position: js.UndefOr[start | end] = js.native
    }
    object DayLabel {
      
      @scala.inline
      def apply(): DayLabel = {
        val __obj = js.Dynamic.literal()
        __obj.asInstanceOf[DayLabel]
      }
      
      @scala.inline
      implicit class DayLabelMutableBuilder[Self <: DayLabel] (val x: Self) extends AnyVal {
        
        @scala.inline
        def setFirstDay(value: Double): Self = StObject.set(x, "firstDay", value.asInstanceOf[js.Any])
        
        @scala.inline
        def setFirstDayUndefined: Self = StObject.set(x, "firstDay", js.undefined)
        
        @scala.inline
        def setPosition(value: start | end): Self = StObject.set(x, "position", value.asInstanceOf[js.Any])
        
        @scala.inline
        def setPositionUndefined: Self = StObject.set(x, "position", js.undefined)
      }
    }
    
    @js.native
    trait Label extends TextStyleWithRich {
      
      /**
        * The margin between the label and the axis line.
        */
      var margin: js.UndefOr[Double] = js.native
      
      /**
        * Week text content, defaults to 'en'; It supports Chinese, English, and custom;
        * index 0 always means Sunday;
        *
        * @default 'en'
        */
      var nameMap: js.UndefOr[String | Double | (js.Array[String | Double])] = js.native
      
      /**
        * Set this to false to prevent label from showing.
        *
        * @default true
        */
      var show: js.UndefOr[Boolean] = js.native
    }
    object Label {
      
      @scala.inline
      def apply(): typingsSlinky.echarts.echarts.EChartOption.Calendar.Label = {
        val __obj = js.Dynamic.literal()
        __obj.asInstanceOf[typingsSlinky.echarts.echarts.EChartOption.Calendar.Label]
      }
      
      @scala.inline
      implicit class LabelMutableBuilder[Self <: typingsSlinky.echarts.echarts.EChartOption.Calendar.Label] (val x: Self) extends AnyVal {
        
        @scala.inline
        def setMargin(value: Double): Self = StObject.set(x, "margin", value.asInstanceOf[js.Any])
        
        @scala.inline
        def setMarginUndefined: Self = StObject.set(x, "margin", js.undefined)
        
        @scala.inline
        def setNameMap(value: String | Double | (js.Array[String | Double])): Self = StObject.set(x, "nameMap", value.asInstanceOf[js.Any])
        
        @scala.inline
        def setNameMapUndefined: Self = StObject.set(x, "nameMap", js.undefined)
        
        @scala.inline
        def setNameMapVarargs(value: (String | Double)*): Self = StObject.set(x, "nameMap", js.Array(value :_*))
        
        @scala.inline
        def setShow(value: Boolean): Self = StObject.set(x, "show", value.asInstanceOf[js.Any])
        
        @scala.inline
        def setShowUndefined: Self = StObject.set(x, "show", js.undefined)
      }
    }
    
    @js.native
    trait MonthLabel
      extends typingsSlinky.echarts.echarts.EChartOption.Calendar.Label {
      
      /**
        * Formatter of month text label, which supports string template and callback function.
        */
      var formatter: js.UndefOr[String | MonthLabelFormatter] = js.native
      
      /**
        * Position of week, at the beginning or end of the range.
        *
        * @default 'start'
        */
      var position: js.UndefOr[start | end] = js.native
    }
    object MonthLabel {
      
      @scala.inline
      def apply(): MonthLabel = {
        val __obj = js.Dynamic.literal()
        __obj.asInstanceOf[MonthLabel]
      }
      
      @scala.inline
      implicit class MonthLabelMutableBuilder[Self <: MonthLabel] (val x: Self) extends AnyVal {
        
        @scala.inline
        def setFormatter(value: String | MonthLabelFormatter): Self = StObject.set(x, "formatter", value.asInstanceOf[js.Any])
        
        @scala.inline
        def setFormatterFunction1(value: /* params */ MonthLabelFormatterParams => String): Self = StObject.set(x, "formatter", js.Any.fromFunction1(value))
        
        @scala.inline
        def setFormatterUndefined: Self = StObject.set(x, "formatter", js.undefined)
        
        @scala.inline
        def setPosition(value: start | end): Self = StObject.set(x, "position", value.asInstanceOf[js.Any])
        
        @scala.inline
        def setPositionUndefined: Self = StObject.set(x, "position", js.undefined)
      }
    }
    
    type MonthLabelFormatter = js.Function1[/* params */ MonthLabelFormatterParams, String]
    
    @js.native
    trait MonthLabelFormatterParams extends StObject {
      
      var M: js.UndefOr[Double] = js.native
      
      var MM: js.UndefOr[Double] = js.native
      
      var nameMap: js.UndefOr[String | Double | (js.Array[String | Double])] = js.native
      
      var yy: js.UndefOr[Double] = js.native
      
      var yyyy: js.UndefOr[Double] = js.native
    }
    object MonthLabelFormatterParams {
      
      @scala.inline
      def apply(): MonthLabelFormatterParams = {
        val __obj = js.Dynamic.literal()
        __obj.asInstanceOf[MonthLabelFormatterParams]
      }
      
      @scala.inline
      implicit class MonthLabelFormatterParamsMutableBuilder[Self <: MonthLabelFormatterParams] (val x: Self) extends AnyVal {
        
        @scala.inline
        def setM(value: Double): Self = StObject.set(x, "M", value.asInstanceOf[js.Any])
        
        @scala.inline
        def setMM(value: Double): Self = StObject.set(x, "MM", value.asInstanceOf[js.Any])
        
        @scala.inline
        def setMMUndefined: Self = StObject.set(x, "MM", js.undefined)
        
        @scala.inline
        def setMUndefined: Self = StObject.set(x, "M", js.undefined)
        
        @scala.inline
        def setNameMap(value: String | Double | (js.Array[String | Double])): Self = StObject.set(x, "nameMap", value.asInstanceOf[js.Any])
        
        @scala.inline
        def setNameMapUndefined: Self = StObject.set(x, "nameMap", js.undefined)
        
        @scala.inline
        def setNameMapVarargs(value: (String | Double)*): Self = StObject.set(x, "nameMap", js.Array(value :_*))
        
        @scala.inline
        def setYy(value: Double): Self = StObject.set(x, "yy", value.asInstanceOf[js.Any])
        
        @scala.inline
        def setYyUndefined: Self = StObject.set(x, "yy", js.undefined)
        
        @scala.inline
        def setYyyy(value: Double): Self = StObject.set(x, "yyyy", value.asInstanceOf[js.Any])
        
        @scala.inline
        def setYyyyUndefined: Self = StObject.set(x, "yyyy", js.undefined)
      }
    }
    
    @js.native
    trait YearLabel
      extends typingsSlinky.echarts.echarts.EChartOption.Calendar.Label {
      
      /**
        * Formatter of year text label, which supports string template and callback function.
        * By default, the current range of the year,
        * if the interval across the year, showing the first year and the last year
        */
      var formatter: js.UndefOr[String] = js.native
      
      /**
        * Position of year.
        * Default: when orient is set as horizontal,
        * position is left when orient is set as vertical, position is top
        */
      var position: js.UndefOr[top | bottom | left | right] = js.native
    }
    object YearLabel {
      
      @scala.inline
      def apply(): YearLabel = {
        val __obj = js.Dynamic.literal()
        __obj.asInstanceOf[YearLabel]
      }
      
      @scala.inline
      implicit class YearLabelMutableBuilder[Self <: YearLabel] (val x: Self) extends AnyVal {
        
        @scala.inline
        def setFormatter(value: String): Self = StObject.set(x, "formatter", value.asInstanceOf[js.Any])
        
        @scala.inline
        def setFormatterUndefined: Self = StObject.set(x, "formatter", js.undefined)
        
        @scala.inline
        def setPosition(value: top | bottom | left | right): Self = StObject.set(x, "position", value.asInstanceOf[js.Any])
        
        @scala.inline
        def setPositionUndefined: Self = StObject.set(x, "position", js.undefined)
      }
    }
    
    type YearLabelFormatter = js.Function1[/* params */ YearLabelFormatterParams, String]
    
    @js.native
    trait YearLabelFormatterParams extends StObject {
      
      var end: js.UndefOr[Double] = js.native
      
      var nameMap: js.UndefOr[String | Double | (js.Array[String | Double])] = js.native
      
      var start: js.UndefOr[Double] = js.native
    }
    object YearLabelFormatterParams {
      
      @scala.inline
      def apply(): YearLabelFormatterParams = {
        val __obj = js.Dynamic.literal()
        __obj.asInstanceOf[YearLabelFormatterParams]
      }
      
      @scala.inline
      implicit class YearLabelFormatterParamsMutableBuilder[Self <: YearLabelFormatterParams] (val x: Self) extends AnyVal {
        
        @scala.inline
        def setEnd(value: Double): Self = StObject.set(x, "end", value.asInstanceOf[js.Any])
        
        @scala.inline
        def setEndUndefined: Self = StObject.set(x, "end", js.undefined)
        
        @scala.inline
        def setNameMap(value: String | Double | (js.Array[String | Double])): Self = StObject.set(x, "nameMap", value.asInstanceOf[js.Any])
        
        @scala.inline
        def setNameMapUndefined: Self = StObject.set(x, "nameMap", js.undefined)
        
        @scala.inline
        def setNameMapVarargs(value: (String | Double)*): Self = StObject.set(x, "nameMap", js.Array(value :_*))
        
        @scala.inline
        def setStart(value: Double): Self = StObject.set(x, "start", value.asInstanceOf[js.Any])
        
        @scala.inline
        def setStartUndefined: Self = StObject.set(x, "start", js.undefined)
      }
    }
  }
  
  /**
    * Color type for itemStyle / areaStyle etc.
    * + string
    * + LinearGradient
    * + RadialGradient.
    * + Texture
    */
  /* Rewritten from type alias, can be one of: 
    - java.lang.String
    - typingsSlinky.echarts.echarts.EChartOption.LinearGradient
    - typingsSlinky.echarts.echarts.EChartOption.RadialGradient
    - typingsSlinky.echarts.echarts.EChartOption.Texture
  */
  type Color = _Color | String
  
  type ColorStops = js.Array[Offset]
  
  /**
    * Data zoom component of inside type.
    * Refer to dataZoom for more information.
    * The inside means it's inside the coordinates.
    * Translation: data area can be translated when moving in coordinates.
    * Scaling:
    * PC: when mouse rolls (similar with touch pad) in coordinates.
    * Mobile: when touches and moved with two fingers in coordinates
    * on touch screens.
    *
    * @todo describe
    * @see https://echarts.apache.org/en/option.html#dataZoom-inside
    * @see https://echarts.apache.org/en/option.html#dataZoom-slider
    */
  /* Rewritten from type alias, can be one of: 
    - typingsSlinky.echarts.echarts.EChartOption.DataZoom.Inside
    - typingsSlinky.echarts.echarts.EChartOption.DataZoom.Slider
  */
  trait DataZoom extends StObject
  object DataZoom {
    
    /**
      * Data zoom component of inside type.
      * Refer to dataZoom for more information.
      * The inside means it's inside the coordinates.
      * Translation: data area can be translated when moving in coordinates.
      * Scaling:
      * PC: when mouse rolls (similar with touch pad) in coordinates.
      * Mobile: when touches and moved with two fingers in coordinates
      * on touch screens.
      *
      * @see https://echarts.apache.org/en/option.html#dataZoom-inside
      */
    @js.native
    trait Inside extends DataZoom {
      
      var angleAxisIndex: js.UndefOr[Double | js.Array[Double]] = js.native
      
      var disabled: js.UndefOr[Boolean] = js.native
      
      var end: js.UndefOr[Double] = js.native
      
      var endValue: js.UndefOr[Double | String | js.Date] = js.native
      
      var filterMode: js.UndefOr[filter | weakFilter | empty | none] = js.native
      
      var id: js.UndefOr[String] = js.native
      
      var maxSpan: js.UndefOr[Double] = js.native
      
      var maxValueSpan: js.UndefOr[Double | String | js.Date] = js.native
      
      var minSpan: js.UndefOr[Double] = js.native
      
      var minValueSpan: js.UndefOr[Double | String | js.Date] = js.native
      
      var moveOnMouseMove: js.UndefOr[Boolean] = js.native
      
      var moveOnMouseWheel: js.UndefOr[Boolean] = js.native
      
      var orient: js.UndefOr[String] = js.native
      
      var preventDefaultMouseMove: js.UndefOr[Boolean] = js.native
      
      var radiusAxisIndex: js.UndefOr[Double | js.Array[Double]] = js.native
      
      var rangeMode: js.UndefOr[js.Array[String]] = js.native
      
      var singleAxisIndex: js.UndefOr[Double | js.Array[Double]] = js.native
      
      var start: js.UndefOr[Double] = js.native
      
      var startValue: js.UndefOr[Double | String | js.Date] = js.native
      
      var throttle: js.UndefOr[Double] = js.native
      
      var `type`: js.UndefOr[String] = js.native
      
      var xAxisIndex: js.UndefOr[Double | js.Array[Double]] = js.native
      
      var yAxisIndex: js.UndefOr[Double | js.Array[Double]] = js.native
      
      var zoomLock: js.UndefOr[Boolean] = js.native
      
      var zoomOnMouseWheel: js.UndefOr[Boolean] = js.native
    }
    object Inside {
      
      @scala.inline
      def apply(): Inside = {
        val __obj = js.Dynamic.literal()
        __obj.asInstanceOf[Inside]
      }
      
      @scala.inline
      implicit class InsideMutableBuilder[Self <: Inside] (val x: Self) extends AnyVal {
        
        @scala.inline
        def setAngleAxisIndex(value: Double | js.Array[Double]): Self = StObject.set(x, "angleAxisIndex", value.asInstanceOf[js.Any])
        
        @scala.inline
        def setAngleAxisIndexUndefined: Self = StObject.set(x, "angleAxisIndex", js.undefined)
        
        @scala.inline
        def setAngleAxisIndexVarargs(value: Double*): Self = StObject.set(x, "angleAxisIndex", js.Array(value :_*))
        
        @scala.inline
        def setDisabled(value: Boolean): Self = StObject.set(x, "disabled", value.asInstanceOf[js.Any])
        
        @scala.inline
        def setDisabledUndefined: Self = StObject.set(x, "disabled", js.undefined)
        
        @scala.inline
        def setEnd(value: Double): Self = StObject.set(x, "end", value.asInstanceOf[js.Any])
        
        @scala.inline
        def setEndUndefined: Self = StObject.set(x, "end", js.undefined)
        
        @scala.inline
        def setEndValue(value: Double | String | js.Date): Self = StObject.set(x, "endValue", value.asInstanceOf[js.Any])
        
        @scala.inline
        def setEndValueDate(value: js.Date): Self = StObject.set(x, "endValue", value.asInstanceOf[js.Any])
        
        @scala.inline
        def setEndValueUndefined: Self = StObject.set(x, "endValue", js.undefined)
        
        @scala.inline
        def setFilterMode(value: filter | weakFilter | empty | none): Self = StObject.set(x, "filterMode", value.asInstanceOf[js.Any])
        
        @scala.inline
        def setFilterModeUndefined: Self = StObject.set(x, "filterMode", js.undefined)
        
        @scala.inline
        def setId(value: String): Self = StObject.set(x, "id", value.asInstanceOf[js.Any])
        
        @scala.inline
        def setIdUndefined: Self = StObject.set(x, "id", js.undefined)
        
        @scala.inline
        def setMaxSpan(value: Double): Self = StObject.set(x, "maxSpan", value.asInstanceOf[js.Any])
        
        @scala.inline
        def setMaxSpanUndefined: Self = StObject.set(x, "maxSpan", js.undefined)
        
        @scala.inline
        def setMaxValueSpan(value: Double | String | js.Date): Self = StObject.set(x, "maxValueSpan", value.asInstanceOf[js.Any])
        
        @scala.inline
        def setMaxValueSpanDate(value: js.Date): Self = StObject.set(x, "maxValueSpan", value.asInstanceOf[js.Any])
        
        @scala.inline
        def setMaxValueSpanUndefined: Self = StObject.set(x, "maxValueSpan", js.undefined)
        
        @scala.inline
        def setMinSpan(value: Double): Self = StObject.set(x, "minSpan", value.asInstanceOf[js.Any])
        
        @scala.inline
        def setMinSpanUndefined: Self = StObject.set(x, "minSpan", js.undefined)
        
        @scala.inline
        def setMinValueSpan(value: Double | String | js.Date): Self = StObject.set(x, "minValueSpan", value.asInstanceOf[js.Any])
        
        @scala.inline
        def setMinValueSpanDate(value: js.Date): Self = StObject.set(x, "minValueSpan", value.asInstanceOf[js.Any])
        
        @scala.inline
        def setMinValueSpanUndefined: Self = StObject.set(x, "minValueSpan", js.undefined)
        
        @scala.inline
        def setMoveOnMouseMove(value: Boolean): Self = StObject.set(x, "moveOnMouseMove", value.asInstanceOf[js.Any])
        
        @scala.inline
        def setMoveOnMouseMoveUndefined: Self = StObject.set(x, "moveOnMouseMove", js.undefined)
        
        @scala.inline
        def setMoveOnMouseWheel(value: Boolean): Self = StObject.set(x, "moveOnMouseWheel", value.asInstanceOf[js.Any])
        
        @scala.inline
        def setMoveOnMouseWheelUndefined: Self = StObject.set(x, "moveOnMouseWheel", js.undefined)
        
        @scala.inline
        def setOrient(value: String): Self = StObject.set(x, "orient", value.asInstanceOf[js.Any])
        
        @scala.inline
        def setOrientUndefined: Self = StObject.set(x, "orient", js.undefined)
        
        @scala.inline
        def setPreventDefaultMouseMove(value: Boolean): Self = StObject.set(x, "preventDefaultMouseMove", value.asInstanceOf[js.Any])
        
        @scala.inline
        def setPreventDefaultMouseMoveUndefined: Self = StObject.set(x, "preventDefaultMouseMove", js.undefined)
        
        @scala.inline
        def setRadiusAxisIndex(value: Double | js.Array[Double]): Self = StObject.set(x, "radiusAxisIndex", value.asInstanceOf[js.Any])
        
        @scala.inline
        def setRadiusAxisIndexUndefined: Self = StObject.set(x, "radiusAxisIndex", js.undefined)
        
        @scala.inline
        def setRadiusAxisIndexVarargs(value: Double*): Self = StObject.set(x, "radiusAxisIndex", js.Array(value :_*))
        
        @scala.inline
        def setRangeMode(value: js.Array[String]): Self = StObject.set(x, "rangeMode", value.asInstanceOf[js.Any])
        
        @scala.inline
        def setRangeModeUndefined: Self = StObject.set(x, "rangeMode", js.undefined)
        
        @scala.inline
        def setRangeModeVarargs(value: String*): Self = StObject.set(x, "rangeMode", js.Array(value :_*))
        
        @scala.inline
        def setSingleAxisIndex(value: Double | js.Array[Double]): Self = StObject.set(x, "singleAxisIndex", value.asInstanceOf[js.Any])
        
        @scala.inline
        def setSingleAxisIndexUndefined: Self = StObject.set(x, "singleAxisIndex", js.undefined)
        
        @scala.inline
        def setSingleAxisIndexVarargs(value: Double*): Self = StObject.set(x, "singleAxisIndex", js.Array(value :_*))
        
        @scala.inline
        def setStart(value: Double): Self = StObject.set(x, "start", value.asInstanceOf[js.Any])
        
        @scala.inline
        def setStartUndefined: Self = StObject.set(x, "start", js.undefined)
        
        @scala.inline
        def setStartValue(value: Double | String | js.Date): Self = StObject.set(x, "startValue", value.asInstanceOf[js.Any])
        
        @scala.inline
        def setStartValueDate(value: js.Date): Self = StObject.set(x, "startValue", value.asInstanceOf[js.Any])
        
        @scala.inline
        def setStartValueUndefined: Self = StObject.set(x, "startValue", js.undefined)
        
        @scala.inline
        def setThrottle(value: Double): Self = StObject.set(x, "throttle", value.asInstanceOf[js.Any])
        
        @scala.inline
        def setThrottleUndefined: Self = StObject.set(x, "throttle", js.undefined)
        
        @scala.inline
        def setType(value: String): Self = StObject.set(x, "type", value.asInstanceOf[js.Any])
        
        @scala.inline
        def setTypeUndefined: Self = StObject.set(x, "type", js.undefined)
        
        @scala.inline
        def setXAxisIndex(value: Double | js.Array[Double]): Self = StObject.set(x, "xAxisIndex", value.asInstanceOf[js.Any])
        
        @scala.inline
        def setXAxisIndexUndefined: Self = StObject.set(x, "xAxisIndex", js.undefined)
        
        @scala.inline
        def setXAxisIndexVarargs(value: Double*): Self = StObject.set(x, "xAxisIndex", js.Array(value :_*))
        
        @scala.inline
        def setYAxisIndex(value: Double | js.Array[Double]): Self = StObject.set(x, "yAxisIndex", value.asInstanceOf[js.Any])
        
        @scala.inline
        def setYAxisIndexUndefined: Self = StObject.set(x, "yAxisIndex", js.undefined)
        
        @scala.inline
        def setYAxisIndexVarargs(value: Double*): Self = StObject.set(x, "yAxisIndex", js.Array(value :_*))
        
        @scala.inline
        def setZoomLock(value: Boolean): Self = StObject.set(x, "zoomLock", value.asInstanceOf[js.Any])
        
        @scala.inline
        def setZoomLockUndefined: Self = StObject.set(x, "zoomLock", js.undefined)
        
        @scala.inline
        def setZoomOnMouseWheel(value: Boolean): Self = StObject.set(x, "zoomOnMouseWheel", value.asInstanceOf[js.Any])
        
        @scala.inline
        def setZoomOnMouseWheelUndefined: Self = StObject.set(x, "zoomOnMouseWheel", js.undefined)
      }
    }
    
    /**
      * @see https://echarts.apache.org/en/option.html#dataZoom-slider
      */
    @js.native
    trait Slider extends DataZoom {
      
      var angleAxisIndex: js.UndefOr[Double | js.Array[Double]] = js.native
      
      var backgroundColor: js.UndefOr[String] = js.native
      
      var borderColor: js.UndefOr[String] = js.native
      
      var bottom: js.UndefOr[String | Double] = js.native
      
      var dataBackground: js.UndefOr[js.Object] = js.native
      
      var end: js.UndefOr[Double] = js.native
      
      var endValue: js.UndefOr[Double | String | js.Date] = js.native
      
      var fillerColor: js.UndefOr[String] = js.native
      
      var filterMode: js.UndefOr[filter | weakFilter | empty | none] = js.native
      
      var handleIcon: js.UndefOr[String] = js.native
      
      var handleSize: js.UndefOr[Double | String] = js.native
      
      var handleStyle: js.UndefOr[js.Object] = js.native
      
      var id: js.UndefOr[String] = js.native
      
      var labelFormatter: js.UndefOr[String | js.Function] = js.native
      
      var labelPrecision: js.UndefOr[Double] = js.native
      
      var left: js.UndefOr[String | Double] = js.native
      
      var maxSpan: js.UndefOr[Double] = js.native
      
      var maxValueSpan: js.UndefOr[Double | String | js.Date] = js.native
      
      var minSpan: js.UndefOr[Double] = js.native
      
      var minValueSpan: js.UndefOr[Double | String | js.Date] = js.native
      
      var orient: js.UndefOr[vertical | horizontal] = js.native
      
      var radiusAxisIndex: js.UndefOr[Double | js.Array[Double]] = js.native
      
      var rangeMode: js.UndefOr[js.Array[String]] = js.native
      
      var realtime: js.UndefOr[Boolean] = js.native
      
      var right: js.UndefOr[String | Double] = js.native
      
      var show: js.UndefOr[Boolean] = js.native
      
      var showDataShadow: js.UndefOr[String] = js.native
      
      var showDetail: js.UndefOr[Boolean] = js.native
      
      var singleAxisIndex: js.UndefOr[Double | js.Array[Double]] = js.native
      
      var start: js.UndefOr[Double] = js.native
      
      var startValue: js.UndefOr[Double | String | js.Date] = js.native
      
      var textStyle: js.UndefOr[BaseTextStyle] = js.native
      
      var throttle: js.UndefOr[Double] = js.native
      
      var top: js.UndefOr[String | Double] = js.native
      
      var `type`: js.UndefOr[String] = js.native
      
      var xAxisIndex: js.UndefOr[Double | js.Array[Double]] = js.native
      
      var yAxisIndex: js.UndefOr[Double | js.Array[Double]] = js.native
      
      var z: js.UndefOr[Double] = js.native
      
      var zlevel: js.UndefOr[Double] = js.native
      
      var zoomLock: js.UndefOr[Boolean] = js.native
    }
    object Slider {
      
      @scala.inline
      def apply(): Slider = {
        val __obj = js.Dynamic.literal()
        __obj.asInstanceOf[Slider]
      }
      
      @scala.inline
      implicit class SliderMutableBuilder[Self <: Slider] (val x: Self) extends AnyVal {
        
        @scala.inline
        def setAngleAxisIndex(value: Double | js.Array[Double]): Self = StObject.set(x, "angleAxisIndex", value.asInstanceOf[js.Any])
        
        @scala.inline
        def setAngleAxisIndexUndefined: Self = StObject.set(x, "angleAxisIndex", js.undefined)
        
        @scala.inline
        def setAngleAxisIndexVarargs(value: Double*): Self = StObject.set(x, "angleAxisIndex", js.Array(value :_*))
        
        @scala.inline
        def setBackgroundColor(value: String): Self = StObject.set(x, "backgroundColor", value.asInstanceOf[js.Any])
        
        @scala.inline
        def setBackgroundColorUndefined: Self = StObject.set(x, "backgroundColor", js.undefined)
        
        @scala.inline
        def setBorderColor(value: String): Self = StObject.set(x, "borderColor", value.asInstanceOf[js.Any])
        
        @scala.inline
        def setBorderColorUndefined: Self = StObject.set(x, "borderColor", js.undefined)
        
        @scala.inline
        def setBottom(value: String | Double): Self = StObject.set(x, "bottom", value.asInstanceOf[js.Any])
        
        @scala.inline
        def setBottomUndefined: Self = StObject.set(x, "bottom", js.undefined)
        
        @scala.inline
        def setDataBackground(value: js.Object): Self = StObject.set(x, "dataBackground", value.asInstanceOf[js.Any])
        
        @scala.inline
        def setDataBackgroundUndefined: Self = StObject.set(x, "dataBackground", js.undefined)
        
        @scala.inline
        def setEnd(value: Double): Self = StObject.set(x, "end", value.asInstanceOf[js.Any])
        
        @scala.inline
        def setEndUndefined: Self = StObject.set(x, "end", js.undefined)
        
        @scala.inline
        def setEndValue(value: Double | String | js.Date): Self = StObject.set(x, "endValue", value.asInstanceOf[js.Any])
        
        @scala.inline
        def setEndValueDate(value: js.Date): Self = StObject.set(x, "endValue", value.asInstanceOf[js.Any])
        
        @scala.inline
        def setEndValueUndefined: Self = StObject.set(x, "endValue", js.undefined)
        
        @scala.inline
        def setFillerColor(value: String): Self = StObject.set(x, "fillerColor", value.asInstanceOf[js.Any])
        
        @scala.inline
        def setFillerColorUndefined: Self = StObject.set(x, "fillerColor", js.undefined)
        
        @scala.inline
        def setFilterMode(value: filter | weakFilter | empty | none): Self = StObject.set(x, "filterMode", value.asInstanceOf[js.Any])
        
        @scala.inline
        def setFilterModeUndefined: Self = StObject.set(x, "filterMode", js.undefined)
        
        @scala.inline
        def setHandleIcon(value: String): Self = StObject.set(x, "handleIcon", value.asInstanceOf[js.Any])
        
        @scala.inline
        def setHandleIconUndefined: Self = StObject.set(x, "handleIcon", js.undefined)
        
        @scala.inline
        def setHandleSize(value: Double | String): Self = StObject.set(x, "handleSize", value.asInstanceOf[js.Any])
        
        @scala.inline
        def setHandleSizeUndefined: Self = StObject.set(x, "handleSize", js.undefined)
        
        @scala.inline
        def setHandleStyle(value: js.Object): Self = StObject.set(x, "handleStyle", value.asInstanceOf[js.Any])
        
        @scala.inline
        def setHandleStyleUndefined: Self = StObject.set(x, "handleStyle", js.undefined)
        
        @scala.inline
        def setId(value: String): Self = StObject.set(x, "id", value.asInstanceOf[js.Any])
        
        @scala.inline
        def setIdUndefined: Self = StObject.set(x, "id", js.undefined)
        
        @scala.inline
        def setLabelFormatter(value: String | js.Function): Self = StObject.set(x, "labelFormatter", value.asInstanceOf[js.Any])
        
        @scala.inline
        def setLabelFormatterUndefined: Self = StObject.set(x, "labelFormatter", js.undefined)
        
        @scala.inline
        def setLabelPrecision(value: Double): Self = StObject.set(x, "labelPrecision", value.asInstanceOf[js.Any])
        
        @scala.inline
        def setLabelPrecisionUndefined: Self = StObject.set(x, "labelPrecision", js.undefined)
        
        @scala.inline
        def setLeft(value: String | Double): Self = StObject.set(x, "left", value.asInstanceOf[js.Any])
        
        @scala.inline
        def setLeftUndefined: Self = StObject.set(x, "left", js.undefined)
        
        @scala.inline
        def setMaxSpan(value: Double): Self = StObject.set(x, "maxSpan", value.asInstanceOf[js.Any])
        
        @scala.inline
        def setMaxSpanUndefined: Self = StObject.set(x, "maxSpan", js.undefined)
        
        @scala.inline
        def setMaxValueSpan(value: Double | String | js.Date): Self = StObject.set(x, "maxValueSpan", value.asInstanceOf[js.Any])
        
        @scala.inline
        def setMaxValueSpanDate(value: js.Date): Self = StObject.set(x, "maxValueSpan", value.asInstanceOf[js.Any])
        
        @scala.inline
        def setMaxValueSpanUndefined: Self = StObject.set(x, "maxValueSpan", js.undefined)
        
        @scala.inline
        def setMinSpan(value: Double): Self = StObject.set(x, "minSpan", value.asInstanceOf[js.Any])
        
        @scala.inline
        def setMinSpanUndefined: Self = StObject.set(x, "minSpan", js.undefined)
        
        @scala.inline
        def setMinValueSpan(value: Double | String | js.Date): Self = StObject.set(x, "minValueSpan", value.asInstanceOf[js.Any])
        
        @scala.inline
        def setMinValueSpanDate(value: js.Date): Self = StObject.set(x, "minValueSpan", value.asInstanceOf[js.Any])
        
        @scala.inline
        def setMinValueSpanUndefined: Self = StObject.set(x, "minValueSpan", js.undefined)
        
        @scala.inline
        def setOrient(value: vertical | horizontal): Self = StObject.set(x, "orient", value.asInstanceOf[js.Any])
        
        @scala.inline
        def setOrientUndefined: Self = StObject.set(x, "orient", js.undefined)
        
        @scala.inline
        def setRadiusAxisIndex(value: Double | js.Array[Double]): Self = StObject.set(x, "radiusAxisIndex", value.asInstanceOf[js.Any])
        
        @scala.inline
        def setRadiusAxisIndexUndefined: Self = StObject.set(x, "radiusAxisIndex", js.undefined)
        
        @scala.inline
        def setRadiusAxisIndexVarargs(value: Double*): Self = StObject.set(x, "radiusAxisIndex", js.Array(value :_*))
        
        @scala.inline
        def setRangeMode(value: js.Array[String]): Self = StObject.set(x, "rangeMode", value.asInstanceOf[js.Any])
        
        @scala.inline
        def setRangeModeUndefined: Self = StObject.set(x, "rangeMode", js.undefined)
        
        @scala.inline
        def setRangeModeVarargs(value: String*): Self = StObject.set(x, "rangeMode", js.Array(value :_*))
        
        @scala.inline
        def setRealtime(value: Boolean): Self = StObject.set(x, "realtime", value.asInstanceOf[js.Any])
        
        @scala.inline
        def setRealtimeUndefined: Self = StObject.set(x, "realtime", js.undefined)
        
        @scala.inline
        def setRight(value: String | Double): Self = StObject.set(x, "right", value.asInstanceOf[js.Any])
        
        @scala.inline
        def setRightUndefined: Self = StObject.set(x, "right", js.undefined)
        
        @scala.inline
        def setShow(value: Boolean): Self = StObject.set(x, "show", value.asInstanceOf[js.Any])
        
        @scala.inline
        def setShowDataShadow(value: String): Self = StObject.set(x, "showDataShadow", value.asInstanceOf[js.Any])
        
        @scala.inline
        def setShowDataShadowUndefined: Self = StObject.set(x, "showDataShadow", js.undefined)
        
        @scala.inline
        def setShowDetail(value: Boolean): Self = StObject.set(x, "showDetail", value.asInstanceOf[js.Any])
        
        @scala.inline
        def setShowDetailUndefined: Self = StObject.set(x, "showDetail", js.undefined)
        
        @scala.inline
        def setShowUndefined: Self = StObject.set(x, "show", js.undefined)
        
        @scala.inline
        def setSingleAxisIndex(value: Double | js.Array[Double]): Self = StObject.set(x, "singleAxisIndex", value.asInstanceOf[js.Any])
        
        @scala.inline
        def setSingleAxisIndexUndefined: Self = StObject.set(x, "singleAxisIndex", js.undefined)
        
        @scala.inline
        def setSingleAxisIndexVarargs(value: Double*): Self = StObject.set(x, "singleAxisIndex", js.Array(value :_*))
        
        @scala.inline
        def setStart(value: Double): Self = StObject.set(x, "start", value.asInstanceOf[js.Any])
        
        @scala.inline
        def setStartUndefined: Self = StObject.set(x, "start", js.undefined)
        
        @scala.inline
        def setStartValue(value: Double | String | js.Date): Self = StObject.set(x, "startValue", value.asInstanceOf[js.Any])
        
        @scala.inline
        def setStartValueDate(value: js.Date): Self = StObject.set(x, "startValue", value.asInstanceOf[js.Any])
        
        @scala.inline
        def setStartValueUndefined: Self = StObject.set(x, "startValue", js.undefined)
        
        @scala.inline
        def setTextStyle(value: BaseTextStyle): Self = StObject.set(x, "textStyle", value.asInstanceOf[js.Any])
        
        @scala.inline
        def setTextStyleUndefined: Self = StObject.set(x, "textStyle", js.undefined)
        
        @scala.inline
        def setThrottle(value: Double): Self = StObject.set(x, "throttle", value.asInstanceOf[js.Any])
        
        @scala.inline
        def setThrottleUndefined: Self = StObject.set(x, "throttle", js.undefined)
        
        @scala.inline
        def setTop(value: String | Double): Self = StObject.set(x, "top", value.asInstanceOf[js.Any])
        
        @scala.inline
        def setTopUndefined: Self = StObject.set(x, "top", js.undefined)
        
        @scala.inline
        def setType(value: String): Self = StObject.set(x, "type", value.asInstanceOf[js.Any])
        
        @scala.inline
        def setTypeUndefined: Self = StObject.set(x, "type", js.undefined)
        
        @scala.inline
        def setXAxisIndex(value: Double | js.Array[Double]): Self = StObject.set(x, "xAxisIndex", value.asInstanceOf[js.Any])
        
        @scala.inline
        def setXAxisIndexUndefined: Self = StObject.set(x, "xAxisIndex", js.undefined)
        
        @scala.inline
        def setXAxisIndexVarargs(value: Double*): Self = StObject.set(x, "xAxisIndex", js.Array(value :_*))
        
        @scala.inline
        def setYAxisIndex(value: Double | js.Array[Double]): Self = StObject.set(x, "yAxisIndex", value.asInstanceOf[js.Any])
        
        @scala.inline
        def setYAxisIndexUndefined: Self = StObject.set(x, "yAxisIndex", js.undefined)
        
        @scala.inline
        def setYAxisIndexVarargs(value: Double*): Self = StObject.set(x, "yAxisIndex", js.Array(value :_*))
        
        @scala.inline
        def setZ(value: Double): Self = StObject.set(x, "z", value.asInstanceOf[js.Any])
        
        @scala.inline
        def setZUndefined: Self = StObject.set(x, "z", js.undefined)
        
        @scala.inline
        def setZlevel(value: Double): Self = StObject.set(x, "zlevel", value.asInstanceOf[js.Any])
        
        @scala.inline
        def setZlevelUndefined: Self = StObject.set(x, "zlevel", js.undefined)
        
        @scala.inline
        def setZoomLock(value: Boolean): Self = StObject.set(x, "zoomLock", value.asInstanceOf[js.Any])
        
        @scala.inline
        def setZoomLockUndefined: Self = StObject.set(x, "zoomLock", js.undefined)
      }
    }
  }
  
  /**
    * Dataset component is published since ECharts 4.
    * Dataset brings convenience in data management separated with styles and enables data reuse by different series.
    * More importantly, is enables data encoding from data to visual, which brings convenience in some scenarios.
    *
    * @see https://echarts.apache.org/en/option.html#dataset
    */
  @js.native
  trait Dataset extends StObject {
    
    /**
      * dimensions can be used to define dimension info for series.data or dataset.source.
      * Notice: if dataset is used, we can provide dimension names in the first column/row of dataset.source,
      * and not need to specify dimensions here. But if dimensions is specified here,
      * echarts will not retrieve dimension names from the first row/column of dataset.source any more.
      *
      * @see https://echarts.apache.org/en/option.html#dataset.dimensions
      */
    var dimensions: js.UndefOr[js.Array[DimensionObject | String]] = js.native
    
    /**
      * Component ID, not specified by default.
      * If specified, it can be used to refer the component in option or API.
      */
    var id: js.UndefOr[String] = js.native
    
    /**
      * Source data. Generally speaking, a source data describe a table, where these format below can be applied:
      * 2d array, where dimension names can be provided in the first row/column, or do not provide, only data.
      *
      * @see https://echarts.apache.org/en/option.html#dataset.source
      */
    var source: js.UndefOr[js.Array[_] | js.Object] = js.native
  }
  object Dataset {
    
    @scala.inline
    def apply(): Dataset = {
      val __obj = js.Dynamic.literal()
      __obj.asInstanceOf[Dataset]
    }
    
    @scala.inline
    implicit class DatasetMutableBuilder[Self <: Dataset] (val x: Self) extends AnyVal {
      
      @scala.inline
      def setDimensions(value: js.Array[DimensionObject | String]): Self = StObject.set(x, "dimensions", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setDimensionsUndefined: Self = StObject.set(x, "dimensions", js.undefined)
      
      @scala.inline
      def setDimensionsVarargs(value: (DimensionObject | String)*): Self = StObject.set(x, "dimensions", js.Array(value :_*))
      
      @scala.inline
      def setId(value: String): Self = StObject.set(x, "id", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setIdUndefined: Self = StObject.set(x, "id", js.undefined)
      
      @scala.inline
      def setSource(value: js.Array[_] | js.Object): Self = StObject.set(x, "source", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setSourceUndefined: Self = StObject.set(x, "source", js.undefined)
      
      @scala.inline
      def setSourceVarargs(value: js.Any*): Self = StObject.set(x, "source", js.Array(value :_*))
    }
    
    /**
      * @see https://echarts.apache.org/en/option.html#dataset.dimensions
      */
    @js.native
    trait DimensionObject extends StObject {
      
      var displayName: js.UndefOr[String] = js.native
      
      var name: js.UndefOr[String] = js.native
      
      var `type`: js.UndefOr[number | float | int | ordinal | time] = js.native
    }
    object DimensionObject {
      
      @scala.inline
      def apply(): DimensionObject = {
        val __obj = js.Dynamic.literal()
        __obj.asInstanceOf[DimensionObject]
      }
      
      @scala.inline
      implicit class DimensionObjectMutableBuilder[Self <: DimensionObject] (val x: Self) extends AnyVal {
        
        @scala.inline
        def setDisplayName(value: String): Self = StObject.set(x, "displayName", value.asInstanceOf[js.Any])
        
        @scala.inline
        def setDisplayNameUndefined: Self = StObject.set(x, "displayName", js.undefined)
        
        @scala.inline
        def setName(value: String): Self = StObject.set(x, "name", value.asInstanceOf[js.Any])
        
        @scala.inline
        def setNameUndefined: Self = StObject.set(x, "name", js.undefined)
        
        @scala.inline
        def setType(value: number | float | int | ordinal | time): Self = StObject.set(x, "type", value.asInstanceOf[js.Any])
        
        @scala.inline
        def setTypeUndefined: Self = StObject.set(x, "type", js.undefined)
      }
    }
  }
  
  @scala.inline
  implicit class EChartOptionMutableBuilder[Self <: EChartOption[_], TSeries] (val x: Self with EChartOption[TSeries]) extends AnyVal {
    
    @scala.inline
    def setAngleAxis(value: js.Object): Self = StObject.set(x, "angleAxis", value.asInstanceOf[js.Any])
    
    @scala.inline
    def setAngleAxisUndefined: Self = StObject.set(x, "angleAxis", js.undefined)
    
    @scala.inline
    def setAnimation(value: Boolean): Self = StObject.set(x, "animation", value.asInstanceOf[js.Any])
    
    @scala.inline
    def setAnimationDelay(value: Double | js.Function): Self = StObject.set(x, "animationDelay", value.asInstanceOf[js.Any])
    
    @scala.inline
    def setAnimationDelayUndefined: Self = StObject.set(x, "animationDelay", js.undefined)
    
    @scala.inline
    def setAnimationDelayUpdate(value: Double | js.Function): Self = StObject.set(x, "animationDelayUpdate", value.asInstanceOf[js.Any])
    
    @scala.inline
    def setAnimationDelayUpdateUndefined: Self = StObject.set(x, "animationDelayUpdate", js.undefined)
    
    @scala.inline
    def setAnimationDuration(value: Double): Self = StObject.set(x, "animationDuration", value.asInstanceOf[js.Any])
    
    @scala.inline
    def setAnimationDurationUndefined: Self = StObject.set(x, "animationDuration", js.undefined)
    
    @scala.inline
    def setAnimationDurationUpdate(value: Double | js.Function): Self = StObject.set(x, "animationDurationUpdate", value.asInstanceOf[js.Any])
    
    @scala.inline
    def setAnimationDurationUpdateUndefined: Self = StObject.set(x, "animationDurationUpdate", js.undefined)
    
    @scala.inline
    def setAnimationEasing(value: String): Self = StObject.set(x, "animationEasing", value.asInstanceOf[js.Any])
    
    @scala.inline
    def setAnimationEasingUndefined: Self = StObject.set(x, "animationEasing", js.undefined)
    
    @scala.inline
    def setAnimationEasingUpdate(value: String): Self = StObject.set(x, "animationEasingUpdate", value.asInstanceOf[js.Any])
    
    @scala.inline
    def setAnimationEasingUpdateUndefined: Self = StObject.set(x, "animationEasingUpdate", js.undefined)
    
    @scala.inline
    def setAnimationThreshold(value: Double): Self = StObject.set(x, "animationThreshold", value.asInstanceOf[js.Any])
    
    @scala.inline
    def setAnimationThresholdUndefined: Self = StObject.set(x, "animationThreshold", js.undefined)
    
    @scala.inline
    def setAnimationUndefined: Self = StObject.set(x, "animation", js.undefined)
    
    @scala.inline
    def setAria(value: js.Object): Self = StObject.set(x, "aria", value.asInstanceOf[js.Any])
    
    @scala.inline
    def setAriaUndefined: Self = StObject.set(x, "aria", js.undefined)
    
    @scala.inline
    def setAxisPointer(value: AxisPointer): Self = StObject.set(x, "axisPointer", value.asInstanceOf[js.Any])
    
    @scala.inline
    def setAxisPointerUndefined: Self = StObject.set(x, "axisPointer", js.undefined)
    
    @scala.inline
    def setBackgroundColor(value: Color): Self = StObject.set(x, "backgroundColor", value.asInstanceOf[js.Any])
    
    @scala.inline
    def setBackgroundColorUndefined: Self = StObject.set(x, "backgroundColor", js.undefined)
    
    @scala.inline
    def setBlendMode(value: String): Self = StObject.set(x, "blendMode", value.asInstanceOf[js.Any])
    
    @scala.inline
    def setBlendModeUndefined: Self = StObject.set(x, "blendMode", js.undefined)
    
    @scala.inline
    def setBrush(value: js.Object): Self = StObject.set(x, "brush", value.asInstanceOf[js.Any])
    
    @scala.inline
    def setBrushUndefined: Self = StObject.set(x, "brush", js.undefined)
    
    @scala.inline
    def setCalendar(value: Calendar | js.Array[Calendar]): Self = StObject.set(x, "calendar", value.asInstanceOf[js.Any])
    
    @scala.inline
    def setCalendarUndefined: Self = StObject.set(x, "calendar", js.undefined)
    
    @scala.inline
    def setCalendarVarargs(value: Calendar*): Self = StObject.set(x, "calendar", js.Array(value :_*))
    
    @scala.inline
    def setColor(value: js.Array[String]): Self = StObject.set(x, "color", value.asInstanceOf[js.Any])
    
    @scala.inline
    def setColorUndefined: Self = StObject.set(x, "color", js.undefined)
    
    @scala.inline
    def setColorVarargs(value: String*): Self = StObject.set(x, "color", js.Array(value :_*))
    
    @scala.inline
    def setDataZoom(value: js.Array[DataZoom]): Self = StObject.set(x, "dataZoom", value.asInstanceOf[js.Any])
    
    @scala.inline
    def setDataZoomUndefined: Self = StObject.set(x, "dataZoom", js.undefined)
    
    @scala.inline
    def setDataZoomVarargs(value: DataZoom*): Self = StObject.set(x, "dataZoom", js.Array(value :_*))
    
    @scala.inline
    def setDataset(value: Dataset | js.Array[Dataset]): Self = StObject.set(x, "dataset", value.asInstanceOf[js.Any])
    
    @scala.inline
    def setDatasetUndefined: Self = StObject.set(x, "dataset", js.undefined)
    
    @scala.inline
    def setDatasetVarargs(value: Dataset*): Self = StObject.set(x, "dataset", js.Array(value :_*))
    
    @scala.inline
    def setGeo(value: js.Object): Self = StObject.set(x, "geo", value.asInstanceOf[js.Any])
    
    @scala.inline
    def setGeoUndefined: Self = StObject.set(x, "geo", js.undefined)
    
    @scala.inline
    def setGraphic(value: js.Object | js.Array[js.Object]): Self = StObject.set(x, "graphic", value.asInstanceOf[js.Any])
    
    @scala.inline
    def setGraphicUndefined: Self = StObject.set(x, "graphic", js.undefined)
    
    @scala.inline
    def setGraphicVarargs(value: js.Object*): Self = StObject.set(x, "graphic", js.Array(value :_*))
    
    @scala.inline
    def setGrid(value: Grid | js.Array[Grid]): Self = StObject.set(x, "grid", value.asInstanceOf[js.Any])
    
    @scala.inline
    def setGridUndefined: Self = StObject.set(x, "grid", js.undefined)
    
    @scala.inline
    def setGridVarargs(value: Grid*): Self = StObject.set(x, "grid", js.Array(value :_*))
    
    @scala.inline
    def setHoverLayerThreshold(value: Double): Self = StObject.set(x, "hoverLayerThreshold", value.asInstanceOf[js.Any])
    
    @scala.inline
    def setHoverLayerThresholdUndefined: Self = StObject.set(x, "hoverLayerThreshold", js.undefined)
    
    @scala.inline
    def setLegend(value: Legend): Self = StObject.set(x, "legend", value.asInstanceOf[js.Any])
    
    @scala.inline
    def setLegendUndefined: Self = StObject.set(x, "legend", js.undefined)
    
    @scala.inline
    def setParallel(value: js.Object): Self = StObject.set(x, "parallel", value.asInstanceOf[js.Any])
    
    @scala.inline
    def setParallelAxis(value: js.Object): Self = StObject.set(x, "parallelAxis", value.asInstanceOf[js.Any])
    
    @scala.inline
    def setParallelAxisUndefined: Self = StObject.set(x, "parallelAxis", js.undefined)
    
    @scala.inline
    def setParallelUndefined: Self = StObject.set(x, "parallel", js.undefined)
    
    @scala.inline
    def setPolar(value: js.Object): Self = StObject.set(x, "polar", value.asInstanceOf[js.Any])
    
    @scala.inline
    def setPolarUndefined: Self = StObject.set(x, "polar", js.undefined)
    
    @scala.inline
    def setProgressive(value: Double): Self = StObject.set(x, "progressive", value.asInstanceOf[js.Any])
    
    @scala.inline
    def setProgressiveThreshold(value: Double): Self = StObject.set(x, "progressiveThreshold", value.asInstanceOf[js.Any])
    
    @scala.inline
    def setProgressiveThresholdUndefined: Self = StObject.set(x, "progressiveThreshold", js.undefined)
    
    @scala.inline
    def setProgressiveUndefined: Self = StObject.set(x, "progressive", js.undefined)
    
    @scala.inline
    def setRadar(value: js.Object): Self = StObject.set(x, "radar", value.asInstanceOf[js.Any])
    
    @scala.inline
    def setRadarUndefined: Self = StObject.set(x, "radar", js.undefined)
    
    @scala.inline
    def setRadiusAxis(value: js.Object): Self = StObject.set(x, "radiusAxis", value.asInstanceOf[js.Any])
    
    @scala.inline
    def setRadiusAxisUndefined: Self = StObject.set(x, "radiusAxis", js.undefined)
    
    @scala.inline
    def setSeries(value: js.Array[TSeries]): Self = StObject.set(x, "series", value.asInstanceOf[js.Any])
    
    @scala.inline
    def setSeriesUndefined: Self = StObject.set(x, "series", js.undefined)
    
    @scala.inline
    def setSeriesVarargs(value: TSeries*): Self = StObject.set(x, "series", js.Array(value :_*))
    
    @scala.inline
    def setSingleAxis(value: SingleAxis | js.Array[SingleAxis]): Self = StObject.set(x, "singleAxis", value.asInstanceOf[js.Any])
    
    @scala.inline
    def setSingleAxisUndefined: Self = StObject.set(x, "singleAxis", js.undefined)
    
    @scala.inline
    def setSingleAxisVarargs(value: SingleAxis*): Self = StObject.set(x, "singleAxis", js.Array(value :_*))
    
    @scala.inline
    def setTextStyle(value: BaseTextStyle): Self = StObject.set(x, "textStyle", value.asInstanceOf[js.Any])
    
    @scala.inline
    def setTextStyleUndefined: Self = StObject.set(x, "textStyle", js.undefined)
    
    @scala.inline
    def setTimeline(value: js.Object): Self = StObject.set(x, "timeline", value.asInstanceOf[js.Any])
    
    @scala.inline
    def setTimelineUndefined: Self = StObject.set(x, "timeline", js.undefined)
    
    @scala.inline
    def setTitle(value: EChartTitleOption | js.Array[EChartTitleOption]): Self = StObject.set(x, "title", value.asInstanceOf[js.Any])
    
    @scala.inline
    def setTitleUndefined: Self = StObject.set(x, "title", js.undefined)
    
    @scala.inline
    def setTitleVarargs(value: EChartTitleOption*): Self = StObject.set(x, "title", js.Array(value :_*))
    
    @scala.inline
    def setToolbox(value: js.Object): Self = StObject.set(x, "toolbox", value.asInstanceOf[js.Any])
    
    @scala.inline
    def setToolboxUndefined: Self = StObject.set(x, "toolbox", js.undefined)
    
    @scala.inline
    def setTooltip(value: Tooltip): Self = StObject.set(x, "tooltip", value.asInstanceOf[js.Any])
    
    @scala.inline
    def setTooltipUndefined: Self = StObject.set(x, "tooltip", js.undefined)
    
    @scala.inline
    def setUseUTC(value: Boolean): Self = StObject.set(x, "useUTC", value.asInstanceOf[js.Any])
    
    @scala.inline
    def setUseUTCUndefined: Self = StObject.set(x, "useUTC", js.undefined)
    
    @scala.inline
    def setVisualMap(value: js.Array[typingsSlinky.echarts.echarts.EChartOption.VisualMap]): Self = StObject.set(x, "visualMap", value.asInstanceOf[js.Any])
    
    @scala.inline
    def setVisualMapUndefined: Self = StObject.set(x, "visualMap", js.undefined)
    
    @scala.inline
    def setVisualMapVarargs(value: typingsSlinky.echarts.echarts.EChartOption.VisualMap*): Self = StObject.set(x, "visualMap", js.Array(value :_*))
    
    @scala.inline
    def setXAxis(value: XAxis | js.Array[XAxis]): Self = StObject.set(x, "xAxis", value.asInstanceOf[js.Any])
    
    @scala.inline
    def setXAxisUndefined: Self = StObject.set(x, "xAxis", js.undefined)
    
    @scala.inline
    def setXAxisVarargs(value: XAxis*): Self = StObject.set(x, "xAxis", js.Array(value :_*))
    
    @scala.inline
    def setYAxis(value: YAxis | js.Array[YAxis]): Self = StObject.set(x, "yAxis", value.asInstanceOf[js.Any])
    
    @scala.inline
    def setYAxisUndefined: Self = StObject.set(x, "yAxis", js.undefined)
    
    @scala.inline
    def setYAxisVarargs(value: YAxis*): Self = StObject.set(x, "yAxis", js.Array(value :_*))
  }
  
  /**
    * Drawing grid in rectangular coordinate.
    * In a single grid, at most two X and Y axes each is allowed.
    * Line chart, bar chart, and scatter chart (bubble chart) can be drawn in grid.
    *
    * @see https://echarts.apache.org/en/option.html#grid
    */
  @js.native
  trait Grid extends StObject {
    
    /**
      * Background color of grid, which is transparent by default.
      * Attention: Works only if show: true is set.
      *
      * @default 'transparent'
      */
    var backgroundColor: js.UndefOr[String] = js.native
    
    /**
      * Border color of grid. Support the same color format as backgroundColor.
      * Attention: Works only if show: true is set.
      *
      * @default '#ccc'
      */
    var borderColor: js.UndefOr[String] = js.native
    
    /**
      * Border width of grid.
      * Attention: Works only if show: true is set.
      *
      * @default 1
      */
    var borderWidth: js.UndefOr[Double] = js.native
    
    /**
      * Distance between grid component and the bottom side of the container.
      * bottom value can be instant pixel value like 20; it can also be percentage value relative to container width like '20%'.
      *
      * @default 60
      */
    var bottom: js.UndefOr[Double | String] = js.native
    
    /**
      * Whether the grid region contains axis tick label of axis.
      * When containLabel is false:
      * grid.left grid.right grid.top grid.bottom grid.width grid.height decide the location
      * and size of the rectangle that is made of by xAxis and yAxis.
      * Setting to false will help when multiple grids need to be aligned at their axes.
      * When containLabel is true:
      * grid.left grid.right grid.top grid.bottom grid.width grid.height decide the location
      * and size of the rectangle that contains the axes and the labels of the axes.
      * Setting to true will help when the length of axis labels is dynamic and is hard to approximate.
      * This will avoid labels from overflowing the container or overlapping other components.
      *
      * @default false
      */
    var containLabel: js.UndefOr[Boolean] = js.native
    
    /**
      * Height of grid component. Adaptive by default.
      *
      * @default 'auto'
      */
    var height: js.UndefOr[Double | String] = js.native
    
    /**
      * Component ID, not specified by default.
      * If specified, it can be used to refer the component in option or API.
      */
    var id: js.UndefOr[String] = js.native
    
    /**
      * Distance between grid component and the left side of the container.
      * left value can be instant pixel value like 20;
      * it can also be percentage value relative to container width like '20%';
      * and it can also be 'left', 'center', or 'right'.
      * If the left value is set to be 'left', 'center', or 'right',
      * then the component will be aligned automatically based on position.
      *
      * @default '10%'
      */
    var left: js.UndefOr[Double | String] = js.native
    
    /**
      * Distance between grid component and the right side of the container.
      * right value can be instant pixel value like 20;
      * it can also be percentage value relative to container width like '20%'.
      *
      * @default '10%'
      */
    var right: js.UndefOr[Double | String] = js.native
    
    /**
      * Size of shadow blur. This attribute should be used along with
      * shadowColor,shadowOffsetX, shadowOffsetY to set shadow to component.
      * Attention:
      * This property works only if show: true is configured and
      * backgroundColor is defined other than transparent.
      */
    var shadowBlur: js.UndefOr[Double] = js.native
    
    /**
      * Shadow color. Support same format as color.
      * Attention: This property works only if show: true configured.
      */
    var shadowColor: js.UndefOr[String] = js.native
    
    /**
      * Offset distance on the horizontal direction of shadow.
      * Attention: This property works only if show: true configured.
      *
      * @default 0
      */
    var shadowOffsetX: js.UndefOr[Double] = js.native
    
    /**
      * Offset distance on the vertical direction of shadow.
      * Attention: This property works only if show: true configured.
      *
      * @default 0
      */
    var shadowOffsetY: js.UndefOr[Double] = js.native
    
    /**
      * Whether to show the grid in rectangular coordinate.
      *
      * @default false
      */
    var show: js.UndefOr[Boolean] = js.native
    
    /**
      * tooltip settings in the coordinate system component.
      * @see https://echarts.apache.org/en/option.html#grid.tooltip
      */
    var tooltip: js.UndefOr[Tooltip] = js.native
    
    /**
      * Distance between grid component and the top side of the container.
      * top value can be instant pixel value like 20;
      * it can also be percentage value relative to container width like '20%';
      * and it can also be 'top', 'middle', or 'bottom'.
      *
      * @default 60
      */
    var top: js.UndefOr[Double | String] = js.native
    
    /**
      * Width of grid component. Adaptive by default.
      *
      * @default 'auto'
      */
    var width: js.UndefOr[Double | String] = js.native
    
    /**
      * z value of all graphical elements in , which controls order of drawing graphical components.
      * Components with smaller z values may be overwritten by those with larger z values.
      * z has a lower priority to zlevel, and will not create new Canvas.
      *
      * @default 2
      */
    var z: js.UndefOr[Double] = js.native
    
    /**
      * zlevel value of all graphical elements in.
      * zlevel is used to make layers with Canvas.
      * Graphical elements with different zlevel values will be placed in different Canvases,
      * which is a common optimization technique.
      * We can put those frequently changed elements (like those with animations) to a seperate zlevel.
      * Notice that too many Canvases will increase memory cost, and should be used carefully on mobile phones to avoid crash.
      * Canvases with bigger zlevel will be placed on Canvases with smaller zlevel.
      *
      * @default 0
      */
    var zlevel: js.UndefOr[Double] = js.native
  }
  object Grid {
    
    @scala.inline
    def apply(): Grid = {
      val __obj = js.Dynamic.literal()
      __obj.asInstanceOf[Grid]
    }
    
    @scala.inline
    implicit class GridMutableBuilder[Self <: Grid] (val x: Self) extends AnyVal {
      
      @scala.inline
      def setBackgroundColor(value: String): Self = StObject.set(x, "backgroundColor", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setBackgroundColorUndefined: Self = StObject.set(x, "backgroundColor", js.undefined)
      
      @scala.inline
      def setBorderColor(value: String): Self = StObject.set(x, "borderColor", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setBorderColorUndefined: Self = StObject.set(x, "borderColor", js.undefined)
      
      @scala.inline
      def setBorderWidth(value: Double): Self = StObject.set(x, "borderWidth", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setBorderWidthUndefined: Self = StObject.set(x, "borderWidth", js.undefined)
      
      @scala.inline
      def setBottom(value: Double | String): Self = StObject.set(x, "bottom", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setBottomUndefined: Self = StObject.set(x, "bottom", js.undefined)
      
      @scala.inline
      def setContainLabel(value: Boolean): Self = StObject.set(x, "containLabel", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setContainLabelUndefined: Self = StObject.set(x, "containLabel", js.undefined)
      
      @scala.inline
      def setHeight(value: Double | String): Self = StObject.set(x, "height", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setHeightUndefined: Self = StObject.set(x, "height", js.undefined)
      
      @scala.inline
      def setId(value: String): Self = StObject.set(x, "id", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setIdUndefined: Self = StObject.set(x, "id", js.undefined)
      
      @scala.inline
      def setLeft(value: Double | String): Self = StObject.set(x, "left", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setLeftUndefined: Self = StObject.set(x, "left", js.undefined)
      
      @scala.inline
      def setRight(value: Double | String): Self = StObject.set(x, "right", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setRightUndefined: Self = StObject.set(x, "right", js.undefined)
      
      @scala.inline
      def setShadowBlur(value: Double): Self = StObject.set(x, "shadowBlur", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setShadowBlurUndefined: Self = StObject.set(x, "shadowBlur", js.undefined)
      
      @scala.inline
      def setShadowColor(value: String): Self = StObject.set(x, "shadowColor", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setShadowColorUndefined: Self = StObject.set(x, "shadowColor", js.undefined)
      
      @scala.inline
      def setShadowOffsetX(value: Double): Self = StObject.set(x, "shadowOffsetX", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setShadowOffsetXUndefined: Self = StObject.set(x, "shadowOffsetX", js.undefined)
      
      @scala.inline
      def setShadowOffsetY(value: Double): Self = StObject.set(x, "shadowOffsetY", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setShadowOffsetYUndefined: Self = StObject.set(x, "shadowOffsetY", js.undefined)
      
      @scala.inline
      def setShow(value: Boolean): Self = StObject.set(x, "show", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setShowUndefined: Self = StObject.set(x, "show", js.undefined)
      
      @scala.inline
      def setTooltip(value: Tooltip): Self = StObject.set(x, "tooltip", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setTooltipUndefined: Self = StObject.set(x, "tooltip", js.undefined)
      
      @scala.inline
      def setTop(value: Double | String): Self = StObject.set(x, "top", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setTopUndefined: Self = StObject.set(x, "top", js.undefined)
      
      @scala.inline
      def setWidth(value: Double | String): Self = StObject.set(x, "width", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setWidthUndefined: Self = StObject.set(x, "width", js.undefined)
      
      @scala.inline
      def setZ(value: Double): Self = StObject.set(x, "z", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setZUndefined: Self = StObject.set(x, "z", js.undefined)
      
      @scala.inline
      def setZlevel(value: Double): Self = StObject.set(x, "zlevel", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setZlevelUndefined: Self = StObject.set(x, "zlevel", js.undefined)
    }
  }
  
  /**
    * @see https://echarts.apache.org/en/option.html#legend
    */
  @js.native
  trait Legend extends StObject {
    
    /**
      * Legend mrker and text aligning. By default,
      * it automatically calculates from component location and orient.
      * When left value of this component is 'right',
      * and the vertical layout (orient is 'vertical'),
      * it would be aligned to 'right'.
      *
      * @default 'auto'
      */
    var align: js.UndefOr[auto | left | right] = js.native
    
    /**
      * Whether to use animation when page scrolll.
      */
    var animation: js.UndefOr[Boolean] = js.native
    
    /**
      * Duration of the page scroll animation.
      *
      * @default 800
      */
    var animationDurationUpdate: js.UndefOr[Double] = js.native
    
    /**
      * Background color of legend, which is transparent by default.
      * Color can be represented in RGB, for example 'rgb(128, 128, 128)'.
      * RGBA can be used when you need alpha channel, for example 'rgba(128, 128, 128, 0.5)'.
      * You may also use hexadecimal format, for example '#ccc'.
      *
      * @default 'transparent'
      */
    var backgroundColor: js.UndefOr[String] = js.native
    
    /**
      * Border color of legend. Support the same color format as backgroundColor.
      *
      * @default '#ccc'
      */
    var borderColor: js.UndefOr[String] = js.native
    
    /**
      * The radius of rounded corner. Its unit is px.
      * And it supports use array to respectively specify the 4 corner radiuses.
      *
      * @default 0
      *
      * @example
      *
      * ```
      * borderRadius: 5, // consistently set the size of 4 rounded corners
      * borderRadius: [5, 5, 0, 0] // (clockwise upper left, upper right, bottom right and bottom left)
      * ```
      */
    var borderRadius: js.UndefOr[Double | js.Array[Double]] = js.native
    
    /**
      * Border width of legend.
      *
      * @default 1
      */
    var borderWidth: js.UndefOr[Double] = js.native
    
    /**
      * Distance between legend component and the bottom side of the container.
      * bottom value can be instant pixel value like 20;
      * it can also be percentage value relative to container width like '20%'.
      * Adaptive by default.
      *
      * @default 'auto'
      */
    var bottom: js.UndefOr[String | Double] = js.native
    
    /**
      * Data array of legend. An array item is usually a name representing string.
      * (If it is a pie chart, it could also be the name of a single data in the pie chart) of a series.
      * Legend component would automatically calculate the color and icon according to series.
      * Special string '' (null string) or '\n' (new line string) can be used for a new line.
      * If data is not specified, it will be auto collected from series. For most of series,
      * it will be collected from series.name or the dimension name specified by seriesName of series.encode.
      * For some types of series like pie and funnel, it will be collected from the name field of series.data.
      * If you need to set the style for a single item, you may also set the configuration of it.
      * In this case, name attribute is used to represent name of series.
      *
      * @see https://echarts.apache.org/en/option.html#legend.data
      */
    var data: js.UndefOr[js.Array[LegendDataObject | String]] = js.native
    
    /**
      * Formatter is used to format label of legend, which supports string template and callback function.
      *
      * @default null
      */
    var formatter: js.UndefOr[String | typingsSlinky.echarts.echarts.EChartOption.Legend.Formatter] = js.native
    
    /**
      * Height of legend component. Adaptive by default.
      *
      * @default 'auto'
      */
    var height: js.UndefOr[Double] = js.native
    
    /**
      * Icon of the legend items.
      * Icon types provided by ECharts includes 'circle', 'rect', 'roundRect', 'triangle', 'diamond', 'pin', 'arrow', 'none'
      * It can be set to an image with 'image://url' , in which URL is the link to an image, or dataURI of an image.
      * Icons can be set to arbitrary vector path via 'path://' in ECharts.
      * As compared with raster image, vector paths prevent from jagging and blurring when scaled,
      * and have a better control over changing colors. Size of vectoer icon will be adapted automatically.
      * Refer to SVG PathData for more information about format of path. You may export vector paths from tools like Adobe Illustrator.
      *
      * @see https://echarts.apache.org/en/option.html#legend.icon
      */
    var icon: js.UndefOr[String] = js.native
    
    /**
      * Component ID, not specified by default.
      * If specified, it can be used to refer the component in option or API.
      */
    var id: js.UndefOr[String] = js.native
    
    /**
      * Legend color when not selected.
      *
      * @default '#ccc'
      */
    var inactiveColor: js.UndefOr[String] = js.native
    
    /**
      * The distance between each legend, horizontal distance in horizontal layout,
      * and vertical distance in vertical layout.
      *
      * @default 10
      */
    var itemGap: js.UndefOr[Double] = js.native
    
    /**
      * Image height of legend symbol.
      *
      * @default 14
      */
    var itemHeight: js.UndefOr[Double] = js.native
    
    /**
      * Image width of legend symbol.
      *
      * @default 25
      */
    var itemWidth: js.UndefOr[Double] = js.native
    
    /**
      * Distance between legend component and the left side of the container.
      * left value can be instant pixel value like 20;
      * it can also be percentage value relative to container width like '20%';
      * and it can also be 'left', 'center', or 'right'.
      * If the left value is set to be 'left', 'center', or 'right',
      * then the component will be aligned automatically based on position.
      *
      * @default 'auto'
      */
    var left: js.UndefOr[String | Double] = js.native
    
    /**
      * The layout orientation of legend.
      *
      * @default 'horizontal'
      */
    var orient: js.UndefOr[horizontal | vertical] = js.native
    
    /**
      * Legend space around content.
      * The unit is px. Default values for each position are 5.
      * And they can be set to different values with left, right, top, and bottom.
      *
      * @example
      * ```
      * // Set padding to be 5
      * padding: 5
      * // Set the top and bottom paddings to be 5, and left and right paddings to be 10
      * padding: [5, 10]
      * // Set each of the four paddings seperately
      * padding: [
      *    5,  // up
      *    10, // right
      *    5,  // down
      *    10, // left
      * ]
      * ```
      */
    var padding: js.UndefOr[Double | js.Array[Double]] = js.native
    
    /**
      * It works when legend.type is 'scroll'.
      * The gap between page buttons and legend items.
      *
      * @default null
      */
    var pageButtonGap: js.UndefOr[Double] = js.native
    
    /**
      * It works when legend.type is 'scroll'.
      * The gap between page buttons and page info text.
      *
      * @default 5
      */
    var pageButtonItemGap: js.UndefOr[Double] = js.native
    
    /**
      * It works when legend.type is 'scroll'.
      * The position of page buttons and page info. Optional values:
      * 'start': on the left or top.
      * 'end': on the right or bottom.
      *
      * @default 'end'
      */
    var pageButtonPosition: js.UndefOr[start | end] = js.native
    
    /**
      * It works when legend.type is 'scroll'.
      * Page info formatter. It is '{current}/{total}' by default,
      * where {current} is current page number (start from 1), and {total} is the total page number.
      *
      * @default '{current}/{total}'
      */
    var pageFormatter: js.UndefOr[String | PageFormatter] = js.native
    
    /**
      * It works when legend.type is 'scroll'.
      * The color of page buttons.
      *
      * @default '#2f4554'
      */
    var pageIconColor: js.UndefOr[String] = js.native
    
    /**
      * It works when legend.type is 'scroll'.
      * The color of page buttons when they are inactive.
      *
      * @default '#aaa'
      */
    var pageIconInactiveColor: js.UndefOr[String] = js.native
    
    /**
      * It works when legend.type is 'scroll'.
      * The size of page buttons. It can be a number, or an array, like [10, 3], represents [width, height].
      *
      * @default 15
      */
    var pageIconSize: js.UndefOr[Double | js.Array[Double]] = js.native
    
    /**
      * @see https://echarts.apache.org/en/option.html#legend.pageIcons
      */
    var pageIcons: js.UndefOr[PageIcons] = js.native
    
    /**
      * It works when legend.type is 'scroll'.
      * The text style of page info.
      */
    var pageTextStyle: js.UndefOr[TextStyle] = js.native
    
    /**
      * Distance between legend component and the right side of the container.
      * right value can be instant pixel value like 20;
      * it can also be percentage value relative to container width like '20%'.
      * Adaptive by default.
      *
      * @default 'auto'
      */
    var right: js.UndefOr[String | Double] = js.native
    
    /**
      * It works when legend.type is 'scroll'.
      * dataIndex of the left top most displayed item.
      * Although the scrolling of legend items can be controlled by calling setOption and specifying this property,
      * we suggest that do not controll legend in this way unless necessary (setOption might be time-consuming),
      * but just use action legendScroll to do that.
      *
      * @default 0
      * @see https://echarts.apache.org/en/option.html#legend.scrollDataIndex
      */
    var scrollDataIndex: js.UndefOr[Double] = js.native
    
    /**
      * State table of selected legend.
      *
      * @example
      * ```
      * selected: {
      *   // selected'series 1'
      *   'series 1': true,
      *   // unselected'series 2'
      *   'series 2': false
      * }
      * ```
      */
    var selected: js.UndefOr[js.Object] = js.native
    
    /**
      * Selected mode of legend, which controls whether series can be toggled displaying by clicking legends.
      * It is enabled by default, and you may set it to be false to disabled it.
      * Besides, it can be set to 'single' or 'multiple', for single selection and multiple selection.
      *
      * @default true
      */
    var selectedMode: js.UndefOr[Boolean | single | multiple] = js.native
    
    /**
      * Size of shadow blur. This attribute should be used along with shadowColor,
      * shadowOffsetX, shadowOffsetY to set shadow to component.
      * Attention:
      * This property works only if show: true is configured and backgroundColor is defined other than transparent.
      */
    var shadowBlur: js.UndefOr[Double] = js.native
    
    /**
      * Shadow color. Support same format as color.
      * Attention: This property works only if show: true configured.
      */
    var shadowColor: js.UndefOr[String] = js.native
    
    /**
      * Offset distance on the horizontal direction of shadow.
      * Attention: This property works only if show: true configured.
      *
      * @default 0
      */
    var shadowOffsetX: js.UndefOr[Double] = js.native
    
    /**
      * Offset distance on the vertical direction of shadow.
      * Attention: This property works only if show: true configured.
      *
      * @default 0
      */
    var shadowOffsetY: js.UndefOr[Double] = js.native
    
    /**
      * Whether to show the legend component.
      * @default true
      */
    var show: js.UndefOr[Boolean] = js.native
    
    /**
      * Whether to keep aspect for icons
      * (from series.symbol or user-defined legend.data.icon) in the form of path://.
      *
      * @default true
      */
    var symbolKeepAspect: js.UndefOr[Boolean] = js.native
    
    /**
      * Legend text style.
      */
    var textStyle: js.UndefOr[TextStyleWithRich] = js.native
    
    /**
      * Tooltip configuration for legend tooltip, which is similar to tooltip.
      *
      * @see https://echarts.apache.org/en/option.html#legend.tooltip
      */
    var tooltip: js.UndefOr[Tooltip] = js.native
    
    /**
      * Distance between legend component and the top side of the container.
      * top value can be instant pixel value like 20;
      * it can also be percentage value relative to container width like '20%';
      * and it can also be 'top', 'middle', or 'bottom'.
      * If the left value is set to be 'top', 'middle', or 'bottom',
      * then the component will be aligned automatically based on position.
      *
      * @default 'auto'
      */
    var top: js.UndefOr[String | Double] = js.native
    
    /**
      * Type of legend.
      * Optional values:
      *  'plain': Simple legend. (default)
      *  'scroll': Scrollable legend. It helps when too
      *   many legend items needed to be shown.
      *
      * @default 'plain'
      */
    var `type`: js.UndefOr[plain | scroll] = js.native
    
    /**
      * Width of legend component. Adaptive by default.
      *
      * @default 'auto'
      */
    var width: js.UndefOr[Double] = js.native
    
    /**
      * z value of all graphical elements in, which controls order of drawing graphical components.
      * Components with smaller z values may be overwritten by those with larger z values.
      * z has a lower priority to zlevel, and will not create new Canvas.
      *
      * @deafult 2
      */
    var z: js.UndefOr[Double] = js.native
    
    /**
      * zlevel value of all graphical elements in.
      * zlevel is used to make layers with Canvas.
      * Graphical elements with different zlevel values will be placed in different Canvases,
      * which is a common optimization technique.
      * We can put those frequently changed elements (like those with animations) to a seperate zlevel.
      * Notice that too many Canvases will increase memory cost,
      * and should be used carefully on mobile phones to avoid crash.
      * Canvases with bigger zlevel will be placed on Canvases with smaller zlevel.
      *
      * @default 0
      */
    var zlevel: js.UndefOr[Double] = js.native
  }
  object Legend {
    
    @scala.inline
    def apply(): Legend = {
      val __obj = js.Dynamic.literal()
      __obj.asInstanceOf[Legend]
    }
    
    type Formatter = js.Function1[/* name */ String, String]
    
    @js.native
    trait LegendDataObject extends StObject {
      
      /**
        * Icon of the legend items.
        * Icon types provided by ECharts includes 'circle', 'rect', 'roundRect', 'triangle', 'diamond', 'pin', 'arrow', 'none'
        * It can be set to an image with 'image://url' , in which URL is the link to an image, or dataURI of an image.
        * Icons can be set to arbitrary vector path via 'path://' in ECharts.
        * As compared with raster image, vector paths prevent from jagging and blurring when scaled,
        * and have a better control over changing colors. Size of vectoer icon will be adapted automatically.
        * Refer to SVG PathData for more information about format of path. You may export vector paths from tools like Adobe Illustrator.
        *
        * @see https://echarts.apache.org/en/option.html#legend.data.icon
        */
      var icon: js.UndefOr[String] = js.native
      
      /**
        * Name of legend, which should be the name value of a certain series.
        * If it is a pie chart, legend name can also be the name of a single data item.
        */
      var name: js.UndefOr[String] = js.native
      
      /**
        * Text style of legend.
        */
      var textStyle: js.UndefOr[TextStyle] = js.native
    }
    object LegendDataObject {
      
      @scala.inline
      def apply(): LegendDataObject = {
        val __obj = js.Dynamic.literal()
        __obj.asInstanceOf[LegendDataObject]
      }
      
      @scala.inline
      implicit class LegendDataObjectMutableBuilder[Self <: LegendDataObject] (val x: Self) extends AnyVal {
        
        @scala.inline
        def setIcon(value: String): Self = StObject.set(x, "icon", value.asInstanceOf[js.Any])
        
        @scala.inline
        def setIconUndefined: Self = StObject.set(x, "icon", js.undefined)
        
        @scala.inline
        def setName(value: String): Self = StObject.set(x, "name", value.asInstanceOf[js.Any])
        
        @scala.inline
        def setNameUndefined: Self = StObject.set(x, "name", js.undefined)
        
        @scala.inline
        def setTextStyle(value: TextStyle): Self = StObject.set(x, "textStyle", value.asInstanceOf[js.Any])
        
        @scala.inline
        def setTextStyleUndefined: Self = StObject.set(x, "textStyle", js.undefined)
      }
    }
    
    @scala.inline
    implicit class LegendMutableBuilder[Self <: Legend] (val x: Self) extends AnyVal {
      
      @scala.inline
      def setAlign(value: auto | left | right): Self = StObject.set(x, "align", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setAlignUndefined: Self = StObject.set(x, "align", js.undefined)
      
      @scala.inline
      def setAnimation(value: Boolean): Self = StObject.set(x, "animation", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setAnimationDurationUpdate(value: Double): Self = StObject.set(x, "animationDurationUpdate", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setAnimationDurationUpdateUndefined: Self = StObject.set(x, "animationDurationUpdate", js.undefined)
      
      @scala.inline
      def setAnimationUndefined: Self = StObject.set(x, "animation", js.undefined)
      
      @scala.inline
      def setBackgroundColor(value: String): Self = StObject.set(x, "backgroundColor", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setBackgroundColorUndefined: Self = StObject.set(x, "backgroundColor", js.undefined)
      
      @scala.inline
      def setBorderColor(value: String): Self = StObject.set(x, "borderColor", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setBorderColorUndefined: Self = StObject.set(x, "borderColor", js.undefined)
      
      @scala.inline
      def setBorderRadius(value: Double | js.Array[Double]): Self = StObject.set(x, "borderRadius", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setBorderRadiusUndefined: Self = StObject.set(x, "borderRadius", js.undefined)
      
      @scala.inline
      def setBorderRadiusVarargs(value: Double*): Self = StObject.set(x, "borderRadius", js.Array(value :_*))
      
      @scala.inline
      def setBorderWidth(value: Double): Self = StObject.set(x, "borderWidth", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setBorderWidthUndefined: Self = StObject.set(x, "borderWidth", js.undefined)
      
      @scala.inline
      def setBottom(value: String | Double): Self = StObject.set(x, "bottom", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setBottomUndefined: Self = StObject.set(x, "bottom", js.undefined)
      
      @scala.inline
      def setData(value: js.Array[LegendDataObject | String]): Self = StObject.set(x, "data", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setDataUndefined: Self = StObject.set(x, "data", js.undefined)
      
      @scala.inline
      def setDataVarargs(value: (LegendDataObject | String)*): Self = StObject.set(x, "data", js.Array(value :_*))
      
      @scala.inline
      def setFormatter(value: String | typingsSlinky.echarts.echarts.EChartOption.Legend.Formatter): Self = StObject.set(x, "formatter", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setFormatterFunction1(value: /* name */ String => String): Self = StObject.set(x, "formatter", js.Any.fromFunction1(value))
      
      @scala.inline
      def setFormatterUndefined: Self = StObject.set(x, "formatter", js.undefined)
      
      @scala.inline
      def setHeight(value: Double): Self = StObject.set(x, "height", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setHeightUndefined: Self = StObject.set(x, "height", js.undefined)
      
      @scala.inline
      def setIcon(value: String): Self = StObject.set(x, "icon", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setIconUndefined: Self = StObject.set(x, "icon", js.undefined)
      
      @scala.inline
      def setId(value: String): Self = StObject.set(x, "id", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setIdUndefined: Self = StObject.set(x, "id", js.undefined)
      
      @scala.inline
      def setInactiveColor(value: String): Self = StObject.set(x, "inactiveColor", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setInactiveColorUndefined: Self = StObject.set(x, "inactiveColor", js.undefined)
      
      @scala.inline
      def setItemGap(value: Double): Self = StObject.set(x, "itemGap", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setItemGapUndefined: Self = StObject.set(x, "itemGap", js.undefined)
      
      @scala.inline
      def setItemHeight(value: Double): Self = StObject.set(x, "itemHeight", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setItemHeightUndefined: Self = StObject.set(x, "itemHeight", js.undefined)
      
      @scala.inline
      def setItemWidth(value: Double): Self = StObject.set(x, "itemWidth", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setItemWidthUndefined: Self = StObject.set(x, "itemWidth", js.undefined)
      
      @scala.inline
      def setLeft(value: String | Double): Self = StObject.set(x, "left", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setLeftUndefined: Self = StObject.set(x, "left", js.undefined)
      
      @scala.inline
      def setOrient(value: horizontal | vertical): Self = StObject.set(x, "orient", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setOrientUndefined: Self = StObject.set(x, "orient", js.undefined)
      
      @scala.inline
      def setPadding(value: Double | js.Array[Double]): Self = StObject.set(x, "padding", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setPaddingUndefined: Self = StObject.set(x, "padding", js.undefined)
      
      @scala.inline
      def setPaddingVarargs(value: Double*): Self = StObject.set(x, "padding", js.Array(value :_*))
      
      @scala.inline
      def setPageButtonGap(value: Double): Self = StObject.set(x, "pageButtonGap", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setPageButtonGapUndefined: Self = StObject.set(x, "pageButtonGap", js.undefined)
      
      @scala.inline
      def setPageButtonItemGap(value: Double): Self = StObject.set(x, "pageButtonItemGap", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setPageButtonItemGapUndefined: Self = StObject.set(x, "pageButtonItemGap", js.undefined)
      
      @scala.inline
      def setPageButtonPosition(value: start | end): Self = StObject.set(x, "pageButtonPosition", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setPageButtonPositionUndefined: Self = StObject.set(x, "pageButtonPosition", js.undefined)
      
      @scala.inline
      def setPageFormatter(value: String | PageFormatter): Self = StObject.set(x, "pageFormatter", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setPageFormatterFunction2(value: (/* current */ Double, /* total */ Double) => String): Self = StObject.set(x, "pageFormatter", js.Any.fromFunction2(value))
      
      @scala.inline
      def setPageFormatterUndefined: Self = StObject.set(x, "pageFormatter", js.undefined)
      
      @scala.inline
      def setPageIconColor(value: String): Self = StObject.set(x, "pageIconColor", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setPageIconColorUndefined: Self = StObject.set(x, "pageIconColor", js.undefined)
      
      @scala.inline
      def setPageIconInactiveColor(value: String): Self = StObject.set(x, "pageIconInactiveColor", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setPageIconInactiveColorUndefined: Self = StObject.set(x, "pageIconInactiveColor", js.undefined)
      
      @scala.inline
      def setPageIconSize(value: Double | js.Array[Double]): Self = StObject.set(x, "pageIconSize", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setPageIconSizeUndefined: Self = StObject.set(x, "pageIconSize", js.undefined)
      
      @scala.inline
      def setPageIconSizeVarargs(value: Double*): Self = StObject.set(x, "pageIconSize", js.Array(value :_*))
      
      @scala.inline
      def setPageIcons(value: PageIcons): Self = StObject.set(x, "pageIcons", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setPageIconsUndefined: Self = StObject.set(x, "pageIcons", js.undefined)
      
      @scala.inline
      def setPageTextStyle(value: TextStyle): Self = StObject.set(x, "pageTextStyle", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setPageTextStyleUndefined: Self = StObject.set(x, "pageTextStyle", js.undefined)
      
      @scala.inline
      def setRight(value: String | Double): Self = StObject.set(x, "right", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setRightUndefined: Self = StObject.set(x, "right", js.undefined)
      
      @scala.inline
      def setScrollDataIndex(value: Double): Self = StObject.set(x, "scrollDataIndex", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setScrollDataIndexUndefined: Self = StObject.set(x, "scrollDataIndex", js.undefined)
      
      @scala.inline
      def setSelected(value: js.Object): Self = StObject.set(x, "selected", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setSelectedMode(value: Boolean | single | multiple): Self = StObject.set(x, "selectedMode", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setSelectedModeUndefined: Self = StObject.set(x, "selectedMode", js.undefined)
      
      @scala.inline
      def setSelectedUndefined: Self = StObject.set(x, "selected", js.undefined)
      
      @scala.inline
      def setShadowBlur(value: Double): Self = StObject.set(x, "shadowBlur", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setShadowBlurUndefined: Self = StObject.set(x, "shadowBlur", js.undefined)
      
      @scala.inline
      def setShadowColor(value: String): Self = StObject.set(x, "shadowColor", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setShadowColorUndefined: Self = StObject.set(x, "shadowColor", js.undefined)
      
      @scala.inline
      def setShadowOffsetX(value: Double): Self = StObject.set(x, "shadowOffsetX", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setShadowOffsetXUndefined: Self = StObject.set(x, "shadowOffsetX", js.undefined)
      
      @scala.inline
      def setShadowOffsetY(value: Double): Self = StObject.set(x, "shadowOffsetY", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setShadowOffsetYUndefined: Self = StObject.set(x, "shadowOffsetY", js.undefined)
      
      @scala.inline
      def setShow(value: Boolean): Self = StObject.set(x, "show", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setShowUndefined: Self = StObject.set(x, "show", js.undefined)
      
      @scala.inline
      def setSymbolKeepAspect(value: Boolean): Self = StObject.set(x, "symbolKeepAspect", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setSymbolKeepAspectUndefined: Self = StObject.set(x, "symbolKeepAspect", js.undefined)
      
      @scala.inline
      def setTextStyle(value: TextStyleWithRich): Self = StObject.set(x, "textStyle", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setTextStyleUndefined: Self = StObject.set(x, "textStyle", js.undefined)
      
      @scala.inline
      def setTooltip(value: Tooltip): Self = StObject.set(x, "tooltip", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setTooltipUndefined: Self = StObject.set(x, "tooltip", js.undefined)
      
      @scala.inline
      def setTop(value: String | Double): Self = StObject.set(x, "top", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setTopUndefined: Self = StObject.set(x, "top", js.undefined)
      
      @scala.inline
      def setType(value: plain | scroll): Self = StObject.set(x, "type", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setTypeUndefined: Self = StObject.set(x, "type", js.undefined)
      
      @scala.inline
      def setWidth(value: Double): Self = StObject.set(x, "width", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setWidthUndefined: Self = StObject.set(x, "width", js.undefined)
      
      @scala.inline
      def setZ(value: Double): Self = StObject.set(x, "z", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setZUndefined: Self = StObject.set(x, "z", js.undefined)
      
      @scala.inline
      def setZlevel(value: Double): Self = StObject.set(x, "zlevel", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setZlevelUndefined: Self = StObject.set(x, "zlevel", js.undefined)
    }
    
    type PageFormatter = js.Function2[/* current */ Double, /* total */ Double, String]
    
    @js.native
    trait PageIcons extends StObject {
      
      /**
        * The icons of page buttons when legend.orient is 'horizontal'.
        * It should be an array, [previous page button, next page button], ['M0,0L12,-10L12,10z', 'M0,0L-12,-10L-12,10z'] by default.
        *
        * @see https://echarts.apache.org/en/option.html#legend.pageIcons.horizontal
        */
      var horizontal: js.UndefOr[js.Array[String]] = js.native
      
      /**
        * The icons of page buttons when legend.orient is 'vertical'.
        * It should be an array, [previous page button, next page button], ['M0,0L20,0L10,-20z', 'M0,0L20,0L10,20z'] by default.
        *
        * @see https://echarts.apache.org/en/option.html#legend.pageIcons.vertical
        */
      var vertical: js.UndefOr[js.Array[String]] = js.native
    }
    object PageIcons {
      
      @scala.inline
      def apply(): PageIcons = {
        val __obj = js.Dynamic.literal()
        __obj.asInstanceOf[PageIcons]
      }
      
      @scala.inline
      implicit class PageIconsMutableBuilder[Self <: PageIcons] (val x: Self) extends AnyVal {
        
        @scala.inline
        def setHorizontal(value: js.Array[String]): Self = StObject.set(x, "horizontal", value.asInstanceOf[js.Any])
        
        @scala.inline
        def setHorizontalUndefined: Self = StObject.set(x, "horizontal", js.undefined)
        
        @scala.inline
        def setHorizontalVarargs(value: String*): Self = StObject.set(x, "horizontal", js.Array(value :_*))
        
        @scala.inline
        def setVertical(value: js.Array[String]): Self = StObject.set(x, "vertical", value.asInstanceOf[js.Any])
        
        @scala.inline
        def setVerticalUndefined: Self = StObject.set(x, "vertical", js.undefined)
        
        @scala.inline
        def setVerticalVarargs(value: String*): Self = StObject.set(x, "vertical", js.Array(value :_*))
      }
    }
  }
  
  /**
    * Line style
    */
  @js.native
  trait LineStyle extends StObject {
    
    var color: js.UndefOr[Color] = js.native
    
    var opacity: js.UndefOr[Double] = js.native
    
    var shadowBlur: js.UndefOr[Double] = js.native
    
    var shadowColor: js.UndefOr[Color] = js.native
    
    var shadowOffsetX: js.UndefOr[Double] = js.native
    
    var shadowOffsetY: js.UndefOr[Double] = js.native
    
    var `type`: js.UndefOr[solid | dashed | dotted] = js.native
    
    var width: js.UndefOr[Double] = js.native
  }
  object LineStyle {
    
    @scala.inline
    def apply(): LineStyle = {
      val __obj = js.Dynamic.literal()
      __obj.asInstanceOf[LineStyle]
    }
    
    @scala.inline
    implicit class LineStyleMutableBuilder[Self <: LineStyle] (val x: Self) extends AnyVal {
      
      @scala.inline
      def setColor(value: Color): Self = StObject.set(x, "color", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setColorUndefined: Self = StObject.set(x, "color", js.undefined)
      
      @scala.inline
      def setOpacity(value: Double): Self = StObject.set(x, "opacity", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setOpacityUndefined: Self = StObject.set(x, "opacity", js.undefined)
      
      @scala.inline
      def setShadowBlur(value: Double): Self = StObject.set(x, "shadowBlur", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setShadowBlurUndefined: Self = StObject.set(x, "shadowBlur", js.undefined)
      
      @scala.inline
      def setShadowColor(value: Color): Self = StObject.set(x, "shadowColor", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setShadowColorUndefined: Self = StObject.set(x, "shadowColor", js.undefined)
      
      @scala.inline
      def setShadowOffsetX(value: Double): Self = StObject.set(x, "shadowOffsetX", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setShadowOffsetXUndefined: Self = StObject.set(x, "shadowOffsetX", js.undefined)
      
      @scala.inline
      def setShadowOffsetY(value: Double): Self = StObject.set(x, "shadowOffsetY", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setShadowOffsetYUndefined: Self = StObject.set(x, "shadowOffsetY", js.undefined)
      
      @scala.inline
      def setType(value: solid | dashed | dotted): Self = StObject.set(x, "type", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setTypeUndefined: Self = StObject.set(x, "type", js.undefined)
      
      @scala.inline
      def setWidth(value: Double): Self = StObject.set(x, "width", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setWidthUndefined: Self = StObject.set(x, "width", js.undefined)
    }
  }
  
  /**
    * Linear gradient.
    *
    * First four parameters are x0, y0, x2, and y2, each ranged from 0 to 1, standing for percentage in the bounding box.
    *
    * If global is `true`, then the first four parameters are in absolute pixel positions.
    */
  @js.native
  trait LinearGradient extends _Color {
    
    var colorStops: ColorStops = js.native
    
    var global: Boolean = js.native
    
    var `type`: linear = js.native
    
    var x: Double = js.native
    
    var x2: Double = js.native
    
    var y: Double = js.native
    
    var y2: Double = js.native
  }
  object LinearGradient {
    
    @scala.inline
    def apply(
      colorStops: ColorStops,
      global: Boolean,
      `type`: linear,
      x: Double,
      x2: Double,
      y: Double,
      y2: Double
    ): LinearGradient = {
      val __obj = js.Dynamic.literal(colorStops = colorStops.asInstanceOf[js.Any], global = global.asInstanceOf[js.Any], x = x.asInstanceOf[js.Any], x2 = x2.asInstanceOf[js.Any], y = y.asInstanceOf[js.Any], y2 = y2.asInstanceOf[js.Any])
      __obj.updateDynamic("type")(`type`.asInstanceOf[js.Any])
      __obj.asInstanceOf[LinearGradient]
    }
    
    @scala.inline
    implicit class LinearGradientMutableBuilder[Self <: LinearGradient] (val x: Self) extends AnyVal {
      
      @scala.inline
      def setColorStops(value: ColorStops): Self = StObject.set(x, "colorStops", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setColorStopsVarargs(value: Offset*): Self = StObject.set(x, "colorStops", js.Array(value :_*))
      
      @scala.inline
      def setGlobal(value: Boolean): Self = StObject.set(x, "global", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setType(value: linear): Self = StObject.set(x, "type", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setX(value: Double): Self = StObject.set(x, "x", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setX2(value: Double): Self = StObject.set(x, "x2", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setY(value: Double): Self = StObject.set(x, "y", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setY2(value: Double): Self = StObject.set(x, "y2", value.asInstanceOf[js.Any])
    }
  }
  
  /**
    * Radial gradient.
    *
    * First three parameters are x and y positions of center, and radius, similar to linear gradient.
    */
  @js.native
  trait RadialGradient extends _Color {
    
    var colorStops: ColorStops = js.native
    
    var global: Boolean = js.native
    
    var r: Double = js.native
    
    var `type`: radial = js.native
    
    var x: Double = js.native
    
    var y: Double = js.native
  }
  object RadialGradient {
    
    @scala.inline
    def apply(colorStops: ColorStops, global: Boolean, r: Double, `type`: radial, x: Double, y: Double): RadialGradient = {
      val __obj = js.Dynamic.literal(colorStops = colorStops.asInstanceOf[js.Any], global = global.asInstanceOf[js.Any], r = r.asInstanceOf[js.Any], x = x.asInstanceOf[js.Any], y = y.asInstanceOf[js.Any])
      __obj.updateDynamic("type")(`type`.asInstanceOf[js.Any])
      __obj.asInstanceOf[RadialGradient]
    }
    
    @scala.inline
    implicit class RadialGradientMutableBuilder[Self <: RadialGradient] (val x: Self) extends AnyVal {
      
      @scala.inline
      def setColorStops(value: ColorStops): Self = StObject.set(x, "colorStops", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setColorStopsVarargs(value: Offset*): Self = StObject.set(x, "colorStops", js.Array(value :_*))
      
      @scala.inline
      def setGlobal(value: Boolean): Self = StObject.set(x, "global", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setR(value: Double): Self = StObject.set(x, "r", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setType(value: radial): Self = StObject.set(x, "type", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setX(value: Double): Self = StObject.set(x, "x", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setY(value: Double): Self = StObject.set(x, "y", value.asInstanceOf[js.Any])
    }
  }
  
  /**
    * @see https://echarts.apache.org/en/tutorial.html#Rich%20Text
    */
  type RichStyle = StringDictionary[TextStyle]
  
  /* Rewritten from type alias, can be one of: 
    - typingsSlinky.echarts.echarts.EChartOption.SeriesLine
    - typingsSlinky.echarts.echarts.EChartOption.SeriesBar
    - typingsSlinky.echarts.echarts.EChartOption.SeriesPie
    - typingsSlinky.echarts.echarts.EChartOption.SeriesScatter
    - typingsSlinky.echarts.echarts.EChartOption.SeriesEffectScatter
    - typingsSlinky.echarts.echarts.EChartOption.SeriesRadar
    - typingsSlinky.echarts.echarts.EChartOption.SeriesTree
    - typingsSlinky.echarts.echarts.EChartOption.SeriesTreemap
    - typingsSlinky.echarts.echarts.EChartOption.SeriesSunburst
    - typingsSlinky.echarts.echarts.EChartOption.SeriesBoxplot
    - typingsSlinky.echarts.echarts.EChartOption.SeriesCandlestick
    - typingsSlinky.echarts.echarts.EChartOption.SeriesHeatmap
    - typingsSlinky.echarts.echarts.EChartOption.SeriesMap
    - typingsSlinky.echarts.echarts.EChartOption.SeriesParallel
    - typingsSlinky.echarts.echarts.EChartOption.SeriesLines
    - typingsSlinky.echarts.echarts.EChartOption.SeriesGraph
    - typingsSlinky.echarts.echarts.EChartOption.SeriesSankey
    - typingsSlinky.echarts.echarts.EChartOption.SeriesFunnel
    - typingsSlinky.echarts.echarts.EChartOption.SeriesGauge
    - typingsSlinky.echarts.echarts.EChartOption.SeriesPictorialBar
    - typingsSlinky.echarts.echarts.EChartOption.SeriesThemeRiver
    - typingsSlinky.echarts.echarts.EChartOption.SeriesCustom
  */
  trait Series extends StObject
  object Series {
    
    @scala.inline
    def SeriesBar(): typingsSlinky.echarts.echarts.EChartOption.SeriesBar = {
      val __obj = js.Dynamic.literal()
      __obj.asInstanceOf[typingsSlinky.echarts.echarts.EChartOption.SeriesBar]
    }
    
    @scala.inline
    def SeriesBoxplot(): typingsSlinky.echarts.echarts.EChartOption.SeriesBoxplot = {
      val __obj = js.Dynamic.literal()
      __obj.asInstanceOf[typingsSlinky.echarts.echarts.EChartOption.SeriesBoxplot]
    }
    
    @scala.inline
    def SeriesCandlestick(): typingsSlinky.echarts.echarts.EChartOption.SeriesCandlestick = {
      val __obj = js.Dynamic.literal()
      __obj.asInstanceOf[typingsSlinky.echarts.echarts.EChartOption.SeriesCandlestick]
    }
    
    @scala.inline
    def SeriesCustom(): typingsSlinky.echarts.echarts.EChartOption.SeriesCustom = {
      val __obj = js.Dynamic.literal()
      __obj.asInstanceOf[typingsSlinky.echarts.echarts.EChartOption.SeriesCustom]
    }
    
    @scala.inline
    def SeriesEffectScatter(): typingsSlinky.echarts.echarts.EChartOption.SeriesEffectScatter = {
      val __obj = js.Dynamic.literal()
      __obj.asInstanceOf[typingsSlinky.echarts.echarts.EChartOption.SeriesEffectScatter]
    }
    
    @scala.inline
    def SeriesFunnel(): typingsSlinky.echarts.echarts.EChartOption.SeriesFunnel = {
      val __obj = js.Dynamic.literal()
      __obj.asInstanceOf[typingsSlinky.echarts.echarts.EChartOption.SeriesFunnel]
    }
    
    @scala.inline
    def SeriesGauge(): typingsSlinky.echarts.echarts.EChartOption.SeriesGauge = {
      val __obj = js.Dynamic.literal()
      __obj.asInstanceOf[typingsSlinky.echarts.echarts.EChartOption.SeriesGauge]
    }
    
    @scala.inline
    def SeriesGraph(): typingsSlinky.echarts.echarts.EChartOption.SeriesGraph = {
      val __obj = js.Dynamic.literal()
      __obj.asInstanceOf[typingsSlinky.echarts.echarts.EChartOption.SeriesGraph]
    }
    
    @scala.inline
    def SeriesHeatmap(): typingsSlinky.echarts.echarts.EChartOption.SeriesHeatmap = {
      val __obj = js.Dynamic.literal()
      __obj.asInstanceOf[typingsSlinky.echarts.echarts.EChartOption.SeriesHeatmap]
    }
    
    @scala.inline
    def SeriesLine(): typingsSlinky.echarts.echarts.EChartOption.SeriesLine = {
      val __obj = js.Dynamic.literal()
      __obj.asInstanceOf[typingsSlinky.echarts.echarts.EChartOption.SeriesLine]
    }
    
    @scala.inline
    def SeriesLines(): typingsSlinky.echarts.echarts.EChartOption.SeriesLines = {
      val __obj = js.Dynamic.literal()
      __obj.asInstanceOf[typingsSlinky.echarts.echarts.EChartOption.SeriesLines]
    }
    
    @scala.inline
    def SeriesMap(): typingsSlinky.echarts.echarts.EChartOption.SeriesMap = {
      val __obj = js.Dynamic.literal()
      __obj.asInstanceOf[typingsSlinky.echarts.echarts.EChartOption.SeriesMap]
    }
    
    @scala.inline
    def SeriesParallel(): typingsSlinky.echarts.echarts.EChartOption.SeriesParallel = {
      val __obj = js.Dynamic.literal()
      __obj.asInstanceOf[typingsSlinky.echarts.echarts.EChartOption.SeriesParallel]
    }
    
    @scala.inline
    def SeriesPictorialBar(): typingsSlinky.echarts.echarts.EChartOption.SeriesPictorialBar = {
      val __obj = js.Dynamic.literal()
      __obj.asInstanceOf[typingsSlinky.echarts.echarts.EChartOption.SeriesPictorialBar]
    }
    
    @scala.inline
    def SeriesPie(): typingsSlinky.echarts.echarts.EChartOption.SeriesPie = {
      val __obj = js.Dynamic.literal()
      __obj.asInstanceOf[typingsSlinky.echarts.echarts.EChartOption.SeriesPie]
    }
    
    @scala.inline
    def SeriesRadar(): typingsSlinky.echarts.echarts.EChartOption.SeriesRadar = {
      val __obj = js.Dynamic.literal()
      __obj.asInstanceOf[typingsSlinky.echarts.echarts.EChartOption.SeriesRadar]
    }
    
    @scala.inline
    def SeriesSankey(): typingsSlinky.echarts.echarts.EChartOption.SeriesSankey = {
      val __obj = js.Dynamic.literal()
      __obj.asInstanceOf[typingsSlinky.echarts.echarts.EChartOption.SeriesSankey]
    }
    
    @scala.inline
    def SeriesScatter(): typingsSlinky.echarts.echarts.EChartOption.SeriesScatter = {
      val __obj = js.Dynamic.literal()
      __obj.asInstanceOf[typingsSlinky.echarts.echarts.EChartOption.SeriesScatter]
    }
    
    @scala.inline
    def SeriesSunburst(): typingsSlinky.echarts.echarts.EChartOption.SeriesSunburst = {
      val __obj = js.Dynamic.literal()
      __obj.asInstanceOf[typingsSlinky.echarts.echarts.EChartOption.SeriesSunburst]
    }
    
    @scala.inline
    def SeriesThemeRiver(): typingsSlinky.echarts.echarts.EChartOption.SeriesThemeRiver = {
      val __obj = js.Dynamic.literal()
      __obj.asInstanceOf[typingsSlinky.echarts.echarts.EChartOption.SeriesThemeRiver]
    }
    
    @scala.inline
    def SeriesTree(): typingsSlinky.echarts.echarts.EChartOption.SeriesTree = {
      val __obj = js.Dynamic.literal()
      __obj.asInstanceOf[typingsSlinky.echarts.echarts.EChartOption.SeriesTree]
    }
    
    @scala.inline
    def SeriesTreemap(): typingsSlinky.echarts.echarts.EChartOption.SeriesTreemap = {
      val __obj = js.Dynamic.literal()
      __obj.asInstanceOf[typingsSlinky.echarts.echarts.EChartOption.SeriesTreemap]
    }
  }
  
  /**
    * **bar chart**
    *
    * Bar chart shows different data through the height of a bar, which
    * is used in
    * [rectangular coordinate](https://echarts.apache.org/en/option.html#grid)
    * with at least 1 category axis.
    *
    *
    * @see https://echarts.apache.org/en/option.html#series-bar
    */
  @js.native
  trait SeriesBar extends Series {
    
    /**
      * Whether to enable animation.
      *
      *
      * @default
      * "true"
      * @see https://echarts.apache.org/en/option.html#series-bar.animation
      */
    var animation: js.UndefOr[Boolean] = js.native
    
    /**
      * Delay before updating the first animation, which supports callback
      * function for different data to have different animation effect.
      *
      * For example:
      *
      * [see doc](https://echarts.apache.org/en/option.html#series-bar.bar)
      *
      * See
      * [this example](https://echarts.apache.org/examples/en/editor.html?c=bar-animation-delay)
      * for more information.
      *
      *
      * @see https://echarts.apache.org/en/option.html#series-bar.animationDelay
      */
    var animationDelay: js.UndefOr[js.Function | Double] = js.native
    
    /**
      * Delay before updating animation, which supports callback function
      * for different data to have different animation effect.
      *
      * For example:
      *
      * [see doc](https://echarts.apache.org/en/option.html#series-bar.bar)
      *
      * See
      * [this example](https://echarts.apache.org/examples/en/editor.html?c=bar-animation-delay)
      * for more information.
      *
      *
      * @see https://echarts.apache.org/en/option.html#series-bar.animationDelayUpdate
      */
    var animationDelayUpdate: js.UndefOr[js.Function | Double] = js.native
    
    /**
      * Duration of the first animation, which supports callback function
      * for different data to have different animation effect:
      *
      * [see doc](https://echarts.apache.org/en/option.html#series-bar.bar)
      *
      *
      * @default
      * 1000
      * @see https://echarts.apache.org/en/option.html#series-bar.animationDuration
      */
    var animationDuration: js.UndefOr[js.Function | Double] = js.native
    
    /**
      * Time for animation to complete, which supports callback function
      * for different data to have different animation effect:
      *
      * [see doc](https://echarts.apache.org/en/option.html#series-bar.bar)
      *
      *
      * @default
      * 300
      * @see https://echarts.apache.org/en/option.html#series-bar.animationDurationUpdate
      */
    var animationDurationUpdate: js.UndefOr[js.Function | Double] = js.native
    
    /**
      * Easing method used for the first animation.
      * Varied easing effects can be found at
      * [easing effect example](https://echarts.apache.org/examples/en/editor.html?c=line-easing)
      * .
      *
      *
      * @default
      * "cubicOut"
      * @see https://echarts.apache.org/en/option.html#series-bar.animationEasing
      */
    var animationEasing: js.UndefOr[String] = js.native
    
    /**
      * Easing method used for animation.
      *
      *
      * @default
      * "cubicOut"
      * @see https://echarts.apache.org/en/option.html#series-bar.animationEasingUpdate
      */
    var animationEasingUpdate: js.UndefOr[String] = js.native
    
    /**
      * Whether to set graphic number threshold to animation.
      * Animation will be disabled when graphic number is larger than
      * threshold.
      *
      *
      * @default
      * 2000
      * @see https://echarts.apache.org/en/option.html#series-bar.animationThreshold
      */
    var animationThreshold: js.UndefOr[Double] = js.native
    
    /**
      * The bar gap of a single series, defaults to be `20%` of the category
      * gap, can be set as a fixed value.
      *
      * In a single coodinate system, this attribute is shared by multiple
      * `'bar'` series.
      * This attribute should be set on the last `'bar'` series in the
      * coodinate system, then it will be adopted by all `'bar'` series
      * in the coordinate system.
      *
      *
      * @default
      * '20%'
      * @see https://echarts.apache.org/en/option.html#series-bar.barCategoryGap
      */
    var barCategoryGap: js.UndefOr[String] = js.native
    
    /**
      * The gap between bars between different series, is a percent value
      * like `'30%'`, which means `30%` of the bar width.
      *
      * Set barGap as `'-100%'` can overlap bars that belong to different
      * series, which is useful when making a series of bar be background.
      *
      * In a single coodinate system, this attribute is shared by multiple
      * `'bar'` series.
      * This attribute should be set on the last `'bar'` series in the
      * coodinate system, then it will be adopted by all `'bar'` series
      * in the coordinate system.
      *
      * For example:
      *
      * [see doc](https://echarts.apache.org/en/option.html#series-bar.bar)
      *
      *
      * @default
      * 30%
      * @see https://echarts.apache.org/en/option.html#series-bar.barGap
      */
    var barGap: js.UndefOr[String] = js.native
    
    /**
      * The maximum width of the bar. Adaptive when not specified.
      *
      * Has higer priority than barWidth.
      *
      * Can be an absolute value like 40 or a percent value like '60%'. The percent is based on the calculated category width.
      *
      * In a single coodinate system, this attribute is shared by multiple
      * `'bar'` series.
      * This attribute should be set on the last `'bar'` series in the
      * coodinate system, then it will be adopted by all `'bar'` series
      * in the coordinate system.
      *
      *
      * @see https://echarts.apache.org/en/option.html#series-bar.barMaxWidth
      */
    var barMaxWidth: js.UndefOr[Double | String] = js.native
    
    /**
      * The minimum width of bar.
      * It could be used to avoid the following situation: the interaction
      * would be affected when the value of some data item is too small.
      *
      *
      * @see https://echarts.apache.org/en/option.html#series-bar.barMinHeight
      */
    var barMinHeight: js.UndefOr[Double] = js.native
    
    /**
      * The minimum width of the bar. In cartesian the default value is 1, otherwise the default value if null.
      *
      * Has higer priority than barWidth.
      *
      * Can be an absolute value like 40 or a percent value like ''60%''. The percent is based on the calculated category width.
      *
      * In a single coodinate system, this attribute is shared by multiple
      * ''bar'' series.
      * This attribute should be set on the last ''bar'' series in the
      * coodinate system, then it will be adopted by all 'bar' series
      * in the coordinate system.
      *
      *              *
      * @see https://echarts.apache.org/en/option.html#series-bar.barMinWidth
      */
    var barMinWidth: js.UndefOr[Double | String] = js.native
    
    /**
      * The width of the bar. Adaptive when not specified.
      *
      * Can be an absolute value like 40 or a percent value like '60%'. The percent is based on the calculated category width.
      *
      * In a single coodinate system, this attribute is shared by multiple
      * `'bar'` series.
      * This attribute should be set on the last `'bar'` series in the
      * coodinate system, then it will be adopted by all `'bar'` series
      * in the coordinate system.
      *
      *
      * @see https://echarts.apache.org/en/option.html#series-bar.barWidth
      */
    var barWidth: js.UndefOr[Double | String] = js.native
    
    /**
      * The coordinate used in the series, whose options are:
      *
      * + `'cartesian2d'`
      *
      * Use a two-dimensional rectangular coordinate (also known as Cartesian
      * coordinate), with
      * [xAxisIndex](https://echarts.apache.org/en/option.html#series-bar.xAxisIndex)
      * and
      * [yAxisIndex](https://echarts.apache.org/en/option.html#series-bar.yAxisIndex)
      * to assign the corresponding axis component.
      *
      *
      * @default
      * "cartesian2d"
      * @see https://echarts.apache.org/en/option.html#series-bar.coordinateSystem
      */
    var coordinateSystem: js.UndefOr[String] = js.native
    
    /**
      * The mouse style when mouse hovers on an element, the same as
      * `cursor` property in `CSS`.
      *
      *
      * @default
      * "pointer"
      * @see https://echarts.apache.org/en/option.html#series-bar.cursor
      */
    var cursor: js.UndefOr[String] = js.native
    
    /**
      * Data array of series, which can be in the following forms:
      *
      * Notice, if no `data` specified in series, and there is
      * [dataset](https://echarts.apache.org/en/option.html#dataset)
      * in option, series will use the first
      * [dataset](https://echarts.apache.org/en/option.html#dataset)
      * as its datasource. If `data` has been specified,
      * [dataset](https://echarts.apache.org/en/option.html#dataset)
      * will not used.
      *
      * `series.datasetIndex` can be used to specify other
      * [dataset](https://echarts.apache.org/en/option.html#dataset)
      * .
      *
      * Basically, data is represented by a two-dimension array, like
      * the example below, where each colum is named as a "dimension".
      *
      * [see doc](https://echarts.apache.org/en/option.html#series-bar.bar)
      *
      * + In
      * [cartesian (grid)](https://echarts.apache.org/en/option.html#grid)
      * , "dimX" and "dimY" correspond to
      * [xAxis](https://echarts.apache.org/en/option.html#xAxis)
      * and
      * [yAxis](https://echarts.apache.org/en/option.html#yAxis)
      * repectively.
      * + In
      * [polar](https://echarts.apache.org/en/option.html#polar)
      * "dimX" and "dimY" correspond to
      * [radiusAxis](https://echarts.apache.org/en/option.html#radiusAxis)
      * 和
      * [angleAxis](https://echarts.apache.org/en/option.html#anbleAxis)
      * repectively.
      * + Other dimensions are optional, which can be used in other place.
      * For example:
      * + [visualMap](https://echarts.apache.org/en/option.html#visualMap)
      * can map one or more dimensions to viusal (color, symbol size
      * ...).
      * + [series.symbolSize](https://echarts.apache.org/en/option.html#series.symbolSize)
      * can be set as a callback function, where symbol size can be calculated
      * by values of a certain dimension.
      * + Values in other dimensions can be shown by
      * [tooltip.formatter](https://echarts.apache.org/en/option.html#tooltip.formatter)
      * or
      * [series.label.formatter](https://echarts.apache.org/en/option.html#series.label.formatter)
      * .
      *
      * Especially, when there is one and only one category axis (axis.type
      * is `'category'`), data can be simply be represented by a one-dimension
      * array, like:
      *
      * [see doc](https://echarts.apache.org/en/option.html#series-bar.bar)
      *
      * **Relationship between "value" and
      * [axis.type](https://echarts.apache.org/en/option.html#xAxis.type)
      * **
      *
      * + When a dimension corresponds to a value axis (axis.type
      * is `'value'` or `'log'`):
      *
      * The value can be a `number` (like `12`) (can also be a number
      * in a `string` format, like `'12'`).
      *
      * + When a dimension corresponds to a category axis (axis.type
      * is `'category'`):
      *
      * The value should be the ordinal of the axis.data
      * (based on `0`), the string value of the axis.data.
      * For example:
      *
      * [see doc](https://echarts.apache.org/en/option.html#series-bar.bar)
      *
      * There is an example of double category axes:
      * [Github Punchcard](https://echarts.apache.org/examples/en/editor.html?c=scatter-punchCard)
      * .
      *
      * + When a dimension corresponds to a time axis (type is `'time'`),
      * the value can be:
      *
      * + a timestamp, like `1484141700832`, which represents a UTC time.
      * + a date string, in one of the formats below:
      * + a subset of
      * [ISO 8601](http://www.ecma-international.org/ecma-262/5.1/#se
      * c-15.9.1.15)
      * , only including (all of these are treated as local time unless
      * timezone is specified, which is consistent with
      * [moment](https://momentjs.com/)
      * ):
      * + only part of year/month/date/time are specified: `'2012-03'`,
      * `'2012-03-01'`, `'2012-03-01 05'`, `'2012-03-01 05:06'`.
      * + separated by `"T"` or a space: `'2012-03-01T12:22:33.123'`,
      * `'2012-03-01 12:22:33.123'`.
      * + timezone specified: `'2012-03-01T12:22:33Z'`, `'2012-03-01T12:22:33+8000'`,
      * `'2012-03-01T12:22:33-05:00'`.
      * + other date string format (all of these are treated as local
      * time): `'2012'`, `'2012-3-1'`, `'2012/3/1'`, `'2012/03/01'`,
      * `'2009/6/12 2:00'`, `'2009/6/12 2:05:08'`, `'2009/6/12 2:05:08.123'`.
      * + a JavaScript Date instance created by user:
      * + Caution, when using a data string to create a Date instance,
      * [browser differences and inconsistencies](http://dygraphs.com/date-formats.html)
      * should be considered.
      * + For example: In chrome, `new Date('2012-01-01')` is treated
      * as a Jan 1st 2012 in UTC, while `new Date('2012-1-1')` and `new
      * Date('2012/01/01')` are treated as Jan 1st 2012 in local timezone.
      * In safari `new Date('2012-1-1')` is not supported.
      * + So if you intent to perform `new Date(dateString)`, it is strongly
      * recommended to use a time parse library (e.g.,
      * [moment](https://momentjs.com/)
      * ), or use `echarts.number.parseDate`, or check
      * [this](http://dygraphs.com/date-formats.html)
      * .
      *
      * **Customize a data item:**
      *
      * When needing to customize a data item, it can be set as an object,
      * where property `value` reprensent real value. For example:
      *
      * [see doc](https://echarts.apache.org/en/option.html#series-bar.bar)
      *
      * **Empty value:**
      *
      * `'-'` or `null` or `undefined` or `NaN` can be used to describe
      * that a data item is not exists (ps：_not exist_ does not means
      * its value is `0`).
      *
      * For example, line chart can break when encounter an empty value,
      * and scatter chart do not display graphic elements for empty values.
      *
      *
      * @see https://echarts.apache.org/en/option.html#series-bar.data
      */
    var data: js.UndefOr[
        js.Array[
          (js.Array[
            Unit | String | Double | typingsSlinky.echarts.echarts.EChartOption.SeriesBar.DataObject
          ]) | typingsSlinky.echarts.echarts.EChartOption.SeriesBar.DataObject | Double | String | Unit
        ]
      ] = js.native
    
    /**
      * If
      * [series.data](https://echarts.apache.org/en/option.html#series.data)
      * is not specified, and
      * [dataset](https://echarts.apache.org/en/option.html#dataset)
      * exists, the series will use `dataset`.
      * `datasetIndex` specifies which dataset will be used.
      *
      *
      * @see https://echarts.apache.org/en/option.html#series-bar.datasetIndex
      */
    var datasetIndex: js.UndefOr[Double] = js.native
    
    /**
      * `dimensions` can be used to define dimension info for `series.data`
      * or `dataset.source`.
      *
      * Notice: if
      * [dataset](https://echarts.apache.org/en/option.html#dataset)
      * is used, we can provide dimension names in the first column/row
      * of
      * [dataset.source](https://echarts.apache.org/en/option.html#dataset.source)
      * , and not need to specify `dimensions` here.
      * But if `dimensions` is specified here, echarts will not retrieve
      * dimension names from the first row/column of `dataset.source`
      * any more.
      *
      * For example:
      *
      * [see doc](https://echarts.apache.org/en/option.html#series-bar.bar)
      * [see doc](https://echarts.apache.org/en/option.html#series-bar.bar)
      *
      * Each data item of `dimensions` can be:
      *
      * + `string`, for example, `'someName'`, which equals to `{name:
      * 'someName'}`.
      * + `Object`, where the attributes can be:
      * + name: `string`.
      * + type: `string`, supports:
      * + `number`
      * + `float`, that is,
      * [Float64Array](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Float64Array)
      *
      * + `int`, that is,
      * [Int32Array](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Int32Array)
      *
      * + `ordinal`, discrete value, which represents string generally.
      * + `time`, time value, see
      * [data](https://echarts.apache.org/en/option.html#series.data)
      * to check the format of time value.
      * + displayName: `string`, generally used in tooltip for dimension
      * display. If not specified, use `name` by default.
      *
      * When `dimensions` is specified, the default `tooltip` will be
      * displayed vertically, which is better to show diemsion names.
      * Otherwise, `tooltip` will displayed only value horizontally.
      *
      *
      * @see https://echarts.apache.org/en/option.html#series-bar.dimensions
      */
    var dimensions: js.UndefOr[js.Array[_]] = js.native
    
    /**
      * @see https://echarts.apache.org/en/option.html#series-bar.emphasis
      */
    var emphasis: js.UndefOr[ItemStyle] = js.native
    
    /**
      * Define what is encoded to for each dimension of `data`.
      * For example:
      *
      * [see doc](https://echarts.apache.org/en/option.html#series-bar.bar)
      *
      * Attributes of encode are different according to the type of coordinate
      * systtems. For
      * [cartesian2d](https://echarts.apache.org/en/option.html#grid)
      * , `x` and `y` can be defined. For
      * [polar](https://echarts.apache.org/en/option.html#polar)
      * , `radius` and `angle` can be defined. For
      * [geo](https://echarts.apache.org/en/option.html#geo)
      * , `lng` and `lat` can be defined.
      * Attribute `tooltip` and `itemName` (data item name in tooltip)
      * are always able to be defined.
      *
      * When
      * [dimensions](https://echarts.apache.org/en/option.html#series.dimensions)
      * is used to defined name for a certain dimension, `encode` can
      * refer the name directly. For example:
      *
      * [see doc](https://echarts.apache.org/en/option.html#series-bar.bar)
      *
      * Specially, in \[custom series(~series-custom), some property
      * in `encode`, corresponding to axis, can be set as null to make
      * the series not controlled by the axis, that is, the series data
      * will not be count in the extent of the axis, and the
      * [dataZoom](https://echarts.apache.org/en/option.html#dataZoom)
      * on the axis will not filter the series.
      *
      * [see doc](https://echarts.apache.org/en/option.html#series-bar.bar)
      *
      *
      * @see https://echarts.apache.org/en/option.html#series-bar.encode
      */
    var encode: js.UndefOr[js.Object] = js.native
    
    /**
      * Component ID, not specified by default.
      * If specified, it can be used to refer the component in option
      * or API.
      *
      *
      * @see https://echarts.apache.org/en/option.html#series-bar.id
      */
    var id: js.UndefOr[String] = js.native
    
    /**
      * Graphic style of , `emphasis` is the style when it is highlighted,
      * like being hovered by mouse, or highlighted via legend connect.
      *
      *
      * @see https://echarts.apache.org/en/option.html#series-bar.itemStyle
      */
    var itemStyle: js.UndefOr[BarBorderColor] = js.native
    
    /**
      * Text label of , to explain some data information about graphic
      * item like value, name and so on.
      * `label` is placed under `itemStyle` in ECharts 2.x.
      * In ECharts 3, to make the configuration structure flatter, `label`is
      * taken to be at the same level with `itemStyle`, and has `emphasis`
      * as `itemStyle` does.
      *
      *
      * @see https://echarts.apache.org/en/option.html#series-bar.label
      */
    var label: js.UndefOr[DictunknownProperty] = js.native
    
    /**
      * Whether to enable the optimization of large-scale data.
      * It could be set when large data causes performance problem.
      *
      * After being enabled, `largeThreshold` can be used to indicate
      * the minimum number for turning on the optimization.
      *
      * But when the optimization enabled, the style of single data item
      * can't be customized any more.
      *
      *
      * @see https://echarts.apache.org/en/option.html#series-bar.large
      */
    var large: js.UndefOr[Boolean] = js.native
    
    /**
      * The threshold enabling the drawing optimization.
      *
      *
      * @default
      * 400
      * @see https://echarts.apache.org/en/option.html#series-bar.largeThreshold
      */
    var largeThreshold: js.UndefOr[Double] = js.native
    
    /**
      * Whether to enable highlighting chart when
      * [legend](https://echarts.apache.org/en/option.html#legend)
      * is being hovered.
      *
      *
      * @default
      * "true"
      * @see https://echarts.apache.org/en/option.html#series-bar.legendHoverLink
      */
    var legendHoverLink: js.UndefOr[Boolean] = js.native
    
    /**
      * Used to mark an area in chart.
      * For example, mark a time interval.
      *
      *
      * @see https://echarts.apache.org/en/option.html#series-bar.markArea
      */
    var markArea: js.UndefOr[AnimationDelayUpdate] = js.native
    
    /**
      * Use a line in the chart to illustrate.
      *
      *
      * @see https://echarts.apache.org/en/option.html#series-bar.markLine
      */
    var markLine: js.UndefOr[AnimationDelay] = js.native
    
    /**
      * Mark point in a chart.
      *
      *
      * @see https://echarts.apache.org/en/option.html#series-bar.markPoint
      */
    var markPoint: js.UndefOr[Animation] = js.native
    
    /**
      * Series name used for displaying in
      * [tooltip](https://echarts.apache.org/en/option.html#tooltip)
      * and filtering with
      * [legend](https://echarts.apache.org/en/option.html#legend)
      * , or updaing data and configuration with `setOption`.
      *
      *
      * @see https://echarts.apache.org/en/option.html#series-bar.name
      */
    var name: js.UndefOr[String] = js.native
    
    /**
      * `progressive` specifies the amount of graphic elements that can
      * be rendered within a frame (about 16ms) if "progressive rendering"
      * enabled.
      *
      * When data amount is from thousand to more than 10 million, it
      * will take too long time to render all of the graphic elements.
      * Since ECharts 4, "progressive rendering" is supported in its
      * workflow, which processes and renders data chunk by chunk alone
      * with each frame, avoiding to block the UI thread of the browser.
      *
      *
      * @default
      * 5000
      * @see https://echarts.apache.org/en/option.html#series-bar.progressive
      */
    var progressive: js.UndefOr[Double] = js.native
    
    /**
      * Chunk approach, optional values:
      *
      * + `'sequential'`: slice data by data index.
      * + `'mod'`: slice data by mod, which make the data items of each
      * chunk coming from all over the data, bringing better visual effect
      * while progressive rendering.
      *
      *
      * @default
      * "mod"
      * @see https://echarts.apache.org/en/option.html#series-bar.progressiveChunkMode
      */
    var progressiveChunkMode: js.UndefOr[String] = js.native
    
    /**
      * If current data amount is over the threshold, "progressive rendering"
      * is enabled.
      *
      *
      * @default
      * 3000
      * @see https://echarts.apache.org/en/option.html#series-bar.progressiveThreshold
      */
    var progressiveThreshold: js.UndefOr[Double] = js.native
    
    /**
      * When
      * [dataset](https://echarts.apache.org/en/option.html#dataset)
      * is used, `seriesLayoutBy` specifies whether the column or the
      * row of `dataset` is mapped to the series, namely, the series
      * is "layout" on columns or rows. Optional values:
      *
      * + 'column': by default, the columns of `dataset` are mapped the
      * series. In this case, each column represents a dimension.
      * + 'row'：the rows of `dataset` are mapped to the series.
      * In this case, each row represents a dimension.
      *
      * Check this
      * [example](https://echarts.apache.org/examples/en/editor.html?c=dataset-series-layout-by)
      * .
      *
      *
      * @default
      * "column"
      * @see https://echarts.apache.org/en/option.html#series-bar.seriesLayoutBy
      */
    var seriesLayoutBy: js.UndefOr[String] = js.native
    
    /**
      * Name of stack.
      * On the same category axis, the series with the same `stack` name
      * would be put on top of each other.
      *
      *
      * @see https://echarts.apache.org/en/option.html#series-bar.stack
      */
    var stack: js.UndefOr[String] = js.native
    
    /**
      * tooltip settings in this series.
      *
      *
      * @see https://echarts.apache.org/en/option.html#series-bar.tooltip
      */
    var tooltip: js.UndefOr[BaseTooltip] = js.native
    
    /**
      * @default
      * "bar"
      * @see https://echarts.apache.org/en/option.html#series-bar.type
      */
    var `type`: js.UndefOr[bar] = js.native
    
    /**
      * Index of
      * [x axis](https://echarts.apache.org/en/option.html#xAxis)
      * to combine with, which is useful for multiple x axes in one chart.
      *
      *
      * @see https://echarts.apache.org/en/option.html#series-bar.xAxisIndex
      */
    var xAxisIndex: js.UndefOr[Double] = js.native
    
    /**
      * Index of
      * [y axis](https://echarts.apache.org/en/option.html#yAxis)
      * to combine with, which is useful for multiple y axes in one chart.
      *
      *
      * @see https://echarts.apache.org/en/option.html#series-bar.yAxisIndex
      */
    var yAxisIndex: js.UndefOr[Double] = js.native
    
    /**
      * `z` value of all graghical elements in bar chart, which controls
      * order of drawing graphical components.
      * Components with smaller `z` values may be overwritten by those
      * with larger `z` values.
      *
      * `z` has a lower priority to `zlevel`, and will not create new
      * Canvas.
      *
      *
      * @default
      * 2
      * @see https://echarts.apache.org/en/option.html#series-bar.z
      */
    var z: js.UndefOr[Double] = js.native
    
    /**
      * `zlevel` value of all graghical elements in bar chart.
      *
      * `zlevel` is used to make layers with Canvas.
      * Graphical elements with different `zlevel` values will be placed
      * in different Canvases, which is a common optimization technique.
      * We can put those frequently changed elements (like those with
      * animations) to a seperate `zlevel`.
      * Notice that too many Canvases will increase memory cost, and
      * should be used carefully on mobile phones to avoid crash.
      *
      * Canvases with bigger `zlevel` will be placed on Canvases with
      * smaller `zlevel`.
      *
      *
      * @see https://echarts.apache.org/en/option.html#series-bar.zlevel
      */
    var zlevel: js.UndefOr[Double] = js.native
  }
  object SeriesBar {
    
    @scala.inline
    def apply(): SeriesBar = {
      val __obj = js.Dynamic.literal()
      __obj.asInstanceOf[SeriesBar]
    }
    
    @js.native
    trait DataObject extends StObject {
      
      /**
        * @see https://echarts.apache.org/en/option.html#series-bar.data.itemStyle
        */
      var itemStyle: js.UndefOr[BarBorderRadius] = js.native
      
      /**
        * The style setting of the text label in a single bar.
        *
        *
        * @see https://echarts.apache.org/en/option.html#series-bar.data.label
        */
      var label: js.UndefOr[FontFamily] = js.native
      
      /**
        * The name of data item.
        *
        *
        * @see https://echarts.apache.org/en/option.html#series-bar.data.name
        */
      var name: js.UndefOr[String] = js.native
      
      /**
        * tooltip settings in this series data.
        *
        *
        * @see https://echarts.apache.org/en/option.html#series-bar.data.tooltip
        */
      var tooltip: js.UndefOr[BaseTooltip] = js.native
      
      /**
        * The value of a single data item.
        *
        *
        * @see https://echarts.apache.org/en/option.html#series-bar.data.value
        */
      var value: js.UndefOr[Double] = js.native
    }
    object DataObject {
      
      @scala.inline
      def apply(): typingsSlinky.echarts.echarts.EChartOption.SeriesBar.DataObject = {
        val __obj = js.Dynamic.literal()
        __obj.asInstanceOf[typingsSlinky.echarts.echarts.EChartOption.SeriesBar.DataObject]
      }
      
      @scala.inline
      implicit class DataObjectMutableBuilder[Self <: typingsSlinky.echarts.echarts.EChartOption.SeriesBar.DataObject] (val x: Self) extends AnyVal {
        
        @scala.inline
        def setItemStyle(value: BarBorderRadius): Self = StObject.set(x, "itemStyle", value.asInstanceOf[js.Any])
        
        @scala.inline
        def setItemStyleUndefined: Self = StObject.set(x, "itemStyle", js.undefined)
        
        @scala.inline
        def setLabel(value: FontFamily): Self = StObject.set(x, "label", value.asInstanceOf[js.Any])
        
        @scala.inline
        def setLabelUndefined: Self = StObject.set(x, "label", js.undefined)
        
        @scala.inline
        def setName(value: String): Self = StObject.set(x, "name", value.asInstanceOf[js.Any])
        
        @scala.inline
        def setNameUndefined: Self = StObject.set(x, "name", js.undefined)
        
        @scala.inline
        def setTooltip(value: BaseTooltip): Self = StObject.set(x, "tooltip", value.asInstanceOf[js.Any])
        
        @scala.inline
        def setTooltipUndefined: Self = StObject.set(x, "tooltip", js.undefined)
        
        @scala.inline
        def setValue(value: Double): Self = StObject.set(x, "value", value.asInstanceOf[js.Any])
        
        @scala.inline
        def setValueUndefined: Self = StObject.set(x, "value", js.undefined)
      }
    }
    
    @scala.inline
    implicit class SeriesBarMutableBuilder[Self <: SeriesBar] (val x: Self) extends AnyVal {
      
      @scala.inline
      def setAnimation(value: Boolean): Self = StObject.set(x, "animation", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setAnimationDelay(value: js.Function | Double): Self = StObject.set(x, "animationDelay", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setAnimationDelayUndefined: Self = StObject.set(x, "animationDelay", js.undefined)
      
      @scala.inline
      def setAnimationDelayUpdate(value: js.Function | Double): Self = StObject.set(x, "animationDelayUpdate", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setAnimationDelayUpdateUndefined: Self = StObject.set(x, "animationDelayUpdate", js.undefined)
      
      @scala.inline
      def setAnimationDuration(value: js.Function | Double): Self = StObject.set(x, "animationDuration", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setAnimationDurationUndefined: Self = StObject.set(x, "animationDuration", js.undefined)
      
      @scala.inline
      def setAnimationDurationUpdate(value: js.Function | Double): Self = StObject.set(x, "animationDurationUpdate", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setAnimationDurationUpdateUndefined: Self = StObject.set(x, "animationDurationUpdate", js.undefined)
      
      @scala.inline
      def setAnimationEasing(value: String): Self = StObject.set(x, "animationEasing", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setAnimationEasingUndefined: Self = StObject.set(x, "animationEasing", js.undefined)
      
      @scala.inline
      def setAnimationEasingUpdate(value: String): Self = StObject.set(x, "animationEasingUpdate", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setAnimationEasingUpdateUndefined: Self = StObject.set(x, "animationEasingUpdate", js.undefined)
      
      @scala.inline
      def setAnimationThreshold(value: Double): Self = StObject.set(x, "animationThreshold", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setAnimationThresholdUndefined: Self = StObject.set(x, "animationThreshold", js.undefined)
      
      @scala.inline
      def setAnimationUndefined: Self = StObject.set(x, "animation", js.undefined)
      
      @scala.inline
      def setBarCategoryGap(value: String): Self = StObject.set(x, "barCategoryGap", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setBarCategoryGapUndefined: Self = StObject.set(x, "barCategoryGap", js.undefined)
      
      @scala.inline
      def setBarGap(value: String): Self = StObject.set(x, "barGap", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setBarGapUndefined: Self = StObject.set(x, "barGap", js.undefined)
      
      @scala.inline
      def setBarMaxWidth(value: Double | String): Self = StObject.set(x, "barMaxWidth", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setBarMaxWidthUndefined: Self = StObject.set(x, "barMaxWidth", js.undefined)
      
      @scala.inline
      def setBarMinHeight(value: Double): Self = StObject.set(x, "barMinHeight", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setBarMinHeightUndefined: Self = StObject.set(x, "barMinHeight", js.undefined)
      
      @scala.inline
      def setBarMinWidth(value: Double | String): Self = StObject.set(x, "barMinWidth", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setBarMinWidthUndefined: Self = StObject.set(x, "barMinWidth", js.undefined)
      
      @scala.inline
      def setBarWidth(value: Double | String): Self = StObject.set(x, "barWidth", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setBarWidthUndefined: Self = StObject.set(x, "barWidth", js.undefined)
      
      @scala.inline
      def setCoordinateSystem(value: String): Self = StObject.set(x, "coordinateSystem", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setCoordinateSystemUndefined: Self = StObject.set(x, "coordinateSystem", js.undefined)
      
      @scala.inline
      def setCursor(value: String): Self = StObject.set(x, "cursor", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setCursorUndefined: Self = StObject.set(x, "cursor", js.undefined)
      
      @scala.inline
      def setData(
        value: js.Array[
              (js.Array[
                Unit | String | Double | typingsSlinky.echarts.echarts.EChartOption.SeriesBar.DataObject
              ]) | typingsSlinky.echarts.echarts.EChartOption.SeriesBar.DataObject | Double | String | Unit
            ]
      ): Self = StObject.set(x, "data", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setDataUndefined: Self = StObject.set(x, "data", js.undefined)
      
      @scala.inline
      def setDataVarargs(
        value: ((js.Array[
              Unit | String | Double | typingsSlinky.echarts.echarts.EChartOption.SeriesBar.DataObject
            ]) | typingsSlinky.echarts.echarts.EChartOption.SeriesBar.DataObject | Double | String | Unit)*
      ): Self = StObject.set(x, "data", js.Array(value :_*))
      
      @scala.inline
      def setDatasetIndex(value: Double): Self = StObject.set(x, "datasetIndex", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setDatasetIndexUndefined: Self = StObject.set(x, "datasetIndex", js.undefined)
      
      @scala.inline
      def setDimensions(value: js.Array[_]): Self = StObject.set(x, "dimensions", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setDimensionsUndefined: Self = StObject.set(x, "dimensions", js.undefined)
      
      @scala.inline
      def setDimensionsVarargs(value: js.Any*): Self = StObject.set(x, "dimensions", js.Array(value :_*))
      
      @scala.inline
      def setEmphasis(value: ItemStyle): Self = StObject.set(x, "emphasis", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setEmphasisUndefined: Self = StObject.set(x, "emphasis", js.undefined)
      
      @scala.inline
      def setEncode(value: js.Object): Self = StObject.set(x, "encode", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setEncodeUndefined: Self = StObject.set(x, "encode", js.undefined)
      
      @scala.inline
      def setId(value: String): Self = StObject.set(x, "id", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setIdUndefined: Self = StObject.set(x, "id", js.undefined)
      
      @scala.inline
      def setItemStyle(value: BarBorderColor): Self = StObject.set(x, "itemStyle", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setItemStyleUndefined: Self = StObject.set(x, "itemStyle", js.undefined)
      
      @scala.inline
      def setLabel(value: DictunknownProperty): Self = StObject.set(x, "label", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setLabelUndefined: Self = StObject.set(x, "label", js.undefined)
      
      @scala.inline
      def setLarge(value: Boolean): Self = StObject.set(x, "large", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setLargeThreshold(value: Double): Self = StObject.set(x, "largeThreshold", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setLargeThresholdUndefined: Self = StObject.set(x, "largeThreshold", js.undefined)
      
      @scala.inline
      def setLargeUndefined: Self = StObject.set(x, "large", js.undefined)
      
      @scala.inline
      def setLegendHoverLink(value: Boolean): Self = StObject.set(x, "legendHoverLink", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setLegendHoverLinkUndefined: Self = StObject.set(x, "legendHoverLink", js.undefined)
      
      @scala.inline
      def setMarkArea(value: AnimationDelayUpdate): Self = StObject.set(x, "markArea", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setMarkAreaUndefined: Self = StObject.set(x, "markArea", js.undefined)
      
      @scala.inline
      def setMarkLine(value: AnimationDelay): Self = StObject.set(x, "markLine", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setMarkLineUndefined: Self = StObject.set(x, "markLine", js.undefined)
      
      @scala.inline
      def setMarkPoint(value: Animation): Self = StObject.set(x, "markPoint", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setMarkPointUndefined: Self = StObject.set(x, "markPoint", js.undefined)
      
      @scala.inline
      def setName(value: String): Self = StObject.set(x, "name", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setNameUndefined: Self = StObject.set(x, "name", js.undefined)
      
      @scala.inline
      def setProgressive(value: Double): Self = StObject.set(x, "progressive", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setProgressiveChunkMode(value: String): Self = StObject.set(x, "progressiveChunkMode", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setProgressiveChunkModeUndefined: Self = StObject.set(x, "progressiveChunkMode", js.undefined)
      
      @scala.inline
      def setProgressiveThreshold(value: Double): Self = StObject.set(x, "progressiveThreshold", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setProgressiveThresholdUndefined: Self = StObject.set(x, "progressiveThreshold", js.undefined)
      
      @scala.inline
      def setProgressiveUndefined: Self = StObject.set(x, "progressive", js.undefined)
      
      @scala.inline
      def setSeriesLayoutBy(value: String): Self = StObject.set(x, "seriesLayoutBy", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setSeriesLayoutByUndefined: Self = StObject.set(x, "seriesLayoutBy", js.undefined)
      
      @scala.inline
      def setStack(value: String): Self = StObject.set(x, "stack", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setStackUndefined: Self = StObject.set(x, "stack", js.undefined)
      
      @scala.inline
      def setTooltip(value: BaseTooltip): Self = StObject.set(x, "tooltip", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setTooltipUndefined: Self = StObject.set(x, "tooltip", js.undefined)
      
      @scala.inline
      def setType(value: bar): Self = StObject.set(x, "type", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setTypeUndefined: Self = StObject.set(x, "type", js.undefined)
      
      @scala.inline
      def setXAxisIndex(value: Double): Self = StObject.set(x, "xAxisIndex", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setXAxisIndexUndefined: Self = StObject.set(x, "xAxisIndex", js.undefined)
      
      @scala.inline
      def setYAxisIndex(value: Double): Self = StObject.set(x, "yAxisIndex", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setYAxisIndexUndefined: Self = StObject.set(x, "yAxisIndex", js.undefined)
      
      @scala.inline
      def setZ(value: Double): Self = StObject.set(x, "z", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setZUndefined: Self = StObject.set(x, "z", js.undefined)
      
      @scala.inline
      def setZlevel(value: Double): Self = StObject.set(x, "zlevel", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setZlevelUndefined: Self = StObject.set(x, "zlevel", js.undefined)
    }
  }
  
  /**
    * [Boxplot](https://en.wikipedia.org/wiki/Box_plot)
    * is a convenient way of graphically depicting groups of numerical
    * data through their quartiles.
    *
    * **Example:**
    *
    * [see doc](https://echarts.apache.org/en/option.html#series-boxplot)
    *
    * Multiple `series` can be displayed in the same coordinate system.
    * Please refer to
    * [this example](https://echarts.apache.org/examples/en/editor.html?c=boxplot-multi&edit=1&reset=1)
    * .
    *
    *
    * @see https://echarts.apache.org/en/option.html#series-boxplot
    */
  @js.native
  trait SeriesBoxplot extends Series {
    
    /**
      * Delay before updating the first animation, which supports callback
      * function for different data to have different animation effect.
      *
      * For example:
      *
      * [see doc](https://echarts.apache.org/en/option.html#series-boxplot.boxplot)
      *
      * See
      * [this example](https://echarts.apache.org/examples/en/editor.html?c=bar-animation-delay)
      * for more information.
      *
      *
      * @see https://echarts.apache.org/en/option.html#series-boxplot.animationDelay
      */
    var animationDelay: js.UndefOr[js.Function | Double] = js.native
    
    /**
      * Duration of the first animation, which supports callback function
      * for different data to have different animation effect:
      *
      * [see doc](https://echarts.apache.org/en/option.html#series-boxplot.boxplot)
      *
      *
      * @default
      * 800
      * @see https://echarts.apache.org/en/option.html#series-boxplot.animationDuration
      */
    var animationDuration: js.UndefOr[js.Function | Double] = js.native
    
    /**
      * Easing method used for the first animation.
      * Varied easing effects can be found at
      * [easing effect example](https://echarts.apache.org/examples/en/editor.html?c=line-easing)
      * .
      *
      *
      * @default
      * "elasticOut"
      * @see https://echarts.apache.org/en/option.html#series-boxplot.animationEasing
      */
    var animationEasing: js.UndefOr[String] = js.native
    
    /**
      * Up and bottom boundary of box width.
      * The array is in the form of `[min, max]`.
      *
      * It could be absolute value in pixel, such as `[7, 50]`, or percentage,
      * such as `['40%', '90%']`.
      * The percentage means the percentage to the maximum possible width.
      *
      *
      * @default
      * [7, 50]
      * @see https://echarts.apache.org/en/option.html#series-boxplot.boxWidth
      */
    var boxWidth: js.UndefOr[js.Array[_]] = js.native
    
    /**
      * The coordinate used in the series, whose options are:
      *
      * + `'cartesian2d'`
      *
      * Use a two-dimensional rectangular coordinate (also known as Cartesian
      * coordinate), with
      * [xAxisIndex](https://echarts.apache.org/en/option.html#series-cartesian2d.xAxisIndex)
      * and
      * [yAxisIndex](https://echarts.apache.org/en/option.html#series-cartesian2d.yAxisIndex)
      * to assign the corresponding axis component.
      *
      *
      * @default
      * "cartesian2d"
      * @see https://echarts.apache.org/en/option.html#series-boxplot.coordinateSystem
      */
    var coordinateSystem: js.UndefOr[String] = js.native
    
    /**
      * Data should be the two-dimensional array shown as follow.
      *
      * [see doc](https://echarts.apache.org/en/option.html#series-boxplot.boxplot)
      *
      * Every data item (each line in the example above) in the two-dimensional
      * array will be rendered into a box, and each line have five values
      * as:
      *
      * ```
      * [min, Q1, median (or Q2), Q3, max]
      *
      * ```
      *
      * **Data Processing**
      *
      * ECharts doesn't contain data processing modules, so the five
      * statistic values should be calculated by yourself and then passes
      * into `boxplot`.
      *
      * However, ECharts also provide some simple
      * [raw data processing tools](https://github.com/ecomfe/echarts/tree/master/extension/dataTool)
      * . For example, this
      * [example](https://echarts.apache.org/examples/en/editor.html?c=boxplot-light-velocity&edit=1&reset=1)
      * uses `echarts.dataTool.prepareBoxplotData`
      * to proceed simple data statistics.
      *
      *
      * @see https://echarts.apache.org/en/option.html#series-boxplot.data
      */
    var data: js.UndefOr[
        js.Array[
          js.Array[Double | typingsSlinky.echarts.echarts.EChartOption.SeriesBoxplot.DataObject]
        ]
      ] = js.native
    
    /**
      * `dimensions` can be used to define dimension info for `series.data`
      * or `dataset.source`.
      *
      * Notice: if
      * [dataset](https://echarts.apache.org/en/option.html#dataset)
      * is used, we can provide dimension names in the first column/row
      * of
      * [dataset.source](https://echarts.apache.org/en/option.html#dataset.source)
      * , and not need to specify `dimensions` here.
      * But if `dimensions` is specified here, echarts will not retrieve
      * dimension names from the first row/column of `dataset.source`
      * any more.
      *
      * For example:
      *
      * [see doc](https://echarts.apache.org/en/option.html#series-boxplot.boxplot)
      * [see doc](https://echarts.apache.org/en/option.html#series-boxplot.boxplot)
      *
      * Each data item of `dimensions` can be:
      *
      * + `string`, for example, `'someName'`, which equals to `{name:
      * 'someName'}`.
      * + `Object`, where the attributes can be:
      * + name: `string`.
      * + type: `string`, supports:
      * + `number`
      * + `float`, that is,
      * [Float64Array](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Float64Array)
      *
      * + `int`, that is,
      * [Int32Array](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Int32Array)
      *
      * + `ordinal`, discrete value, which represents string generally.
      * + `time`, time value, see
      * [data](https://echarts.apache.org/en/option.html#series.data)
      * to check the format of time value.
      * + displayName: `string`, generally used in tooltip for dimension
      * display. If not specified, use `name` by default.
      *
      * When `dimensions` is specified, the default `tooltip` will be
      * displayed vertically, which is better to show diemsion names.
      * Otherwise, `tooltip` will displayed only value horizontally.
      *
      *
      * @see https://echarts.apache.org/en/option.html#series-boxplot.dimensions
      */
    var dimensions: js.UndefOr[js.Array[_]] = js.native
    
    /**
      * @see https://echarts.apache.org/en/option.html#series-boxplot.emphasis
      */
    var emphasis: js.UndefOr[`2`] = js.native
    
    /**
      * Define what is encoded to for each dimension of `data`.
      * For example:
      *
      * [see doc](https://echarts.apache.org/en/option.html#series-boxplot.boxplot)
      *
      * Attributes of encode are different according to the type of coordinate
      * systtems. For
      * [cartesian2d](https://echarts.apache.org/en/option.html#grid)
      * , `x` and `y` can be defined. For
      * [polar](https://echarts.apache.org/en/option.html#polar)
      * , `radius` and `angle` can be defined. For
      * [geo](https://echarts.apache.org/en/option.html#geo)
      * , `lng` and `lat` can be defined.
      * Attribute `tooltip` and `itemName` (data item name in tooltip)
      * are always able to be defined.
      *
      * When
      * [dimensions](https://echarts.apache.org/en/option.html#series.dimensions)
      * is used to defined name for a certain dimension, `encode` can
      * refer the name directly. For example:
      *
      * [see doc](https://echarts.apache.org/en/option.html#series-boxplot.boxplot)
      *
      * Specially, in \[custom series(~series-custom), some property
      * in `encode`, corresponding to axis, can be set as null to make
      * the series not controlled by the axis, that is, the series data
      * will not be count in the extent of the axis, and the
      * [dataZoom](https://echarts.apache.org/en/option.html#dataZoom)
      * on the axis will not filter the series.
      *
      * [see doc](https://echarts.apache.org/en/option.html#series-boxplot.boxplot)
      *
      *
      * @see https://echarts.apache.org/en/option.html#series-boxplot.encode
      */
    var encode: js.UndefOr[js.Object] = js.native
    
    /**
      * Whether to enable the animation when hovering on box.
      *
      *
      * @default
      * "true"
      * @see https://echarts.apache.org/en/option.html#series-boxplot.hoverAnimation
      */
    var hoverAnimation: js.UndefOr[Boolean] = js.native
    
    /**
      * Component ID, not specified by default.
      * If specified, it can be used to refer the component in option
      * or API.
      *
      *
      * @see https://echarts.apache.org/en/option.html#series-boxplot.id
      */
    var id: js.UndefOr[String] = js.native
    
    /**
      * @see https://echarts.apache.org/en/option.html#series-boxplot.itemStyle
      */
    var itemStyle: js.UndefOr[BorderType] = js.native
    
    /**
      * Layout methods, whose optional values are:
      *
      * + `'horizontal'`: horizontally layout all boxes.
      *
      * + `'vertical'`: vertically layout all boxes.
      *
      * The default value is decided by:
      *
      * + if there is a `category` axis:
      * + if it is horizontal, use `'horizontal'`;
      * + otherwise use `'vertical'`;
      * + otherwise use `'horizontal'`.
      *
      *
      * @see https://echarts.apache.org/en/option.html#series-boxplot.layout
      */
    var layout: js.UndefOr[String] = js.native
    
    /**
      * Whether to enable highlighting chart when
      * [legend](https://echarts.apache.org/en/option.html#legend)
      * is being hovered.
      *
      *
      * @default
      * "true"
      * @see https://echarts.apache.org/en/option.html#series-boxplot.legendHoverLink
      */
    var legendHoverLink: js.UndefOr[Boolean] = js.native
    
    /**
      * Used to mark an area in chart.
      * For example, mark a time interval.
      *
      *
      * @see https://echarts.apache.org/en/option.html#series-boxplot.markArea
      */
    var markArea: js.UndefOr[AnimationDelayUpdate] = js.native
    
    /**
      * Use a line in the chart to illustrate.
      *
      *
      * @see https://echarts.apache.org/en/option.html#series-boxplot.markLine
      */
    var markLine: js.UndefOr[AnimationDurationUpdate] = js.native
    
    /**
      * Mark point in a chart.
      *
      *
      * @see https://echarts.apache.org/en/option.html#series-boxplot.markPoint
      */
    var markPoint: js.UndefOr[AnimationDuration] = js.native
    
    /**
      * Series name used for displaying in
      * [tooltip](https://echarts.apache.org/en/option.html#tooltip)
      * and filtering with
      * [legend](https://echarts.apache.org/en/option.html#legend)
      * , or updaing data and configuration with `setOption`.
      *
      *
      * @see https://echarts.apache.org/en/option.html#series-boxplot.name
      */
    var name: js.UndefOr[String] = js.native
    
    /**
      * Whether to ignore mouse events.
      * Default value is false, for triggering and responding to mouse
      * events.
      *
      *
      * @see https://echarts.apache.org/en/option.html#series-boxplot.silent
      */
    var silent: js.UndefOr[Boolean] = js.native
    
    /**
      * tooltip settings in this series.
      *
      *
      * @see https://echarts.apache.org/en/option.html#series-boxplot.tooltip
      */
    var tooltip: js.UndefOr[BaseTooltip] = js.native
    
    /**
      * @default
      * "boxplot"
      * @see https://echarts.apache.org/en/option.html#series-boxplot.type
      */
    var `type`: js.UndefOr[String] = js.native
    
    /**
      * Index of
      * [x axis](https://echarts.apache.org/en/option.html#xAxis)
      * to combine with, which is useful for multiple x axes in one chart.
      *
      *
      * @see https://echarts.apache.org/en/option.html#series-boxplot.xAxisIndex
      */
    var xAxisIndex: js.UndefOr[Double] = js.native
    
    /**
      * Index of
      * [y axis](https://echarts.apache.org/en/option.html#yAxis)
      * to combine with, which is useful for multiple y axes in one chart.
      *
      *
      * @see https://echarts.apache.org/en/option.html#series-boxplot.yAxisIndex
      */
    var yAxisIndex: js.UndefOr[Double] = js.native
    
    /**
      * `z` value of all graghical elements in Box plot, which controls
      * order of drawing graphical components.
      * Components with smaller `z` values may be overwritten by those
      * with larger `z` values.
      *
      * `z` has a lower priority to `zlevel`, and will not create new
      * Canvas.
      *
      *
      * @default
      * 2
      * @see https://echarts.apache.org/en/option.html#series-boxplot.z
      */
    var z: js.UndefOr[Double] = js.native
    
    /**
      * `zlevel` value of all graghical elements in Box plot.
      *
      * `zlevel` is used to make layers with Canvas.
      * Graphical elements with different `zlevel` values will be placed
      * in different Canvases, which is a common optimization technique.
      * We can put those frequently changed elements (like those with
      * animations) to a seperate `zlevel`.
      * Notice that too many Canvases will increase memory cost, and
      * should be used carefully on mobile phones to avoid crash.
      *
      * Canvases with bigger `zlevel` will be placed on Canvases with
      * smaller `zlevel`.
      *
      *
      * @see https://echarts.apache.org/en/option.html#series-boxplot.zlevel
      */
    var zlevel: js.UndefOr[Double] = js.native
  }
  object SeriesBoxplot {
    
    @scala.inline
    def apply(): SeriesBoxplot = {
      val __obj = js.Dynamic.literal()
      __obj.asInstanceOf[SeriesBoxplot]
    }
    
    @js.native
    trait DataObject extends StObject {
      
      /**
        * @see https://echarts.apache.org/en/option.html#series-boxplot.data.emphasis
        */
      var emphasis: js.UndefOr[`2`] = js.native
      
      /**
        * @see https://echarts.apache.org/en/option.html#series-boxplot.data.itemStyle
        */
      var itemStyle: js.UndefOr[BorderType] = js.native
      
      /**
        * Name of data item.
        *
        *
        * @see https://echarts.apache.org/en/option.html#series-boxplot.data.name
        */
      var name: js.UndefOr[String] = js.native
      
      /**
        * tooltip settings in this series data.
        *
        *
        * @see https://echarts.apache.org/en/option.html#series-boxplot.data.tooltip
        */
      var tooltip: js.UndefOr[BaseTooltip] = js.native
      
      /**
        * Value of data item.
        *
        * ```
        * [min, Q1, median (or Q2), Q3, max]
        *
        * ```
        *
        *
        * @see https://echarts.apache.org/en/option.html#series-boxplot.data.value
        */
      var value: js.UndefOr[js.Array[_]] = js.native
    }
    object DataObject {
      
      @scala.inline
      def apply(): typingsSlinky.echarts.echarts.EChartOption.SeriesBoxplot.DataObject = {
        val __obj = js.Dynamic.literal()
        __obj.asInstanceOf[typingsSlinky.echarts.echarts.EChartOption.SeriesBoxplot.DataObject]
      }
      
      @scala.inline
      implicit class DataObjectMutableBuilder[Self <: typingsSlinky.echarts.echarts.EChartOption.SeriesBoxplot.DataObject] (val x: Self) extends AnyVal {
        
        @scala.inline
        def setEmphasis(value: `2`): Self = StObject.set(x, "emphasis", value.asInstanceOf[js.Any])
        
        @scala.inline
        def setEmphasisUndefined: Self = StObject.set(x, "emphasis", js.undefined)
        
        @scala.inline
        def setItemStyle(value: BorderType): Self = StObject.set(x, "itemStyle", value.asInstanceOf[js.Any])
        
        @scala.inline
        def setItemStyleUndefined: Self = StObject.set(x, "itemStyle", js.undefined)
        
        @scala.inline
        def setName(value: String): Self = StObject.set(x, "name", value.asInstanceOf[js.Any])
        
        @scala.inline
        def setNameUndefined: Self = StObject.set(x, "name", js.undefined)
        
        @scala.inline
        def setTooltip(value: BaseTooltip): Self = StObject.set(x, "tooltip", value.asInstanceOf[js.Any])
        
        @scala.inline
        def setTooltipUndefined: Self = StObject.set(x, "tooltip", js.undefined)
        
        @scala.inline
        def setValue(value: js.Array[_]): Self = StObject.set(x, "value", value.asInstanceOf[js.Any])
        
        @scala.inline
        def setValueUndefined: Self = StObject.set(x, "value", js.undefined)
        
        @scala.inline
        def setValueVarargs(value: js.Any*): Self = StObject.set(x, "value", js.Array(value :_*))
      }
    }
    
    @scala.inline
    implicit class SeriesBoxplotMutableBuilder[Self <: SeriesBoxplot] (val x: Self) extends AnyVal {
      
      @scala.inline
      def setAnimationDelay(value: js.Function | Double): Self = StObject.set(x, "animationDelay", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setAnimationDelayUndefined: Self = StObject.set(x, "animationDelay", js.undefined)
      
      @scala.inline
      def setAnimationDuration(value: js.Function | Double): Self = StObject.set(x, "animationDuration", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setAnimationDurationUndefined: Self = StObject.set(x, "animationDuration", js.undefined)
      
      @scala.inline
      def setAnimationEasing(value: String): Self = StObject.set(x, "animationEasing", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setAnimationEasingUndefined: Self = StObject.set(x, "animationEasing", js.undefined)
      
      @scala.inline
      def setBoxWidth(value: js.Array[_]): Self = StObject.set(x, "boxWidth", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setBoxWidthUndefined: Self = StObject.set(x, "boxWidth", js.undefined)
      
      @scala.inline
      def setBoxWidthVarargs(value: js.Any*): Self = StObject.set(x, "boxWidth", js.Array(value :_*))
      
      @scala.inline
      def setCoordinateSystem(value: String): Self = StObject.set(x, "coordinateSystem", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setCoordinateSystemUndefined: Self = StObject.set(x, "coordinateSystem", js.undefined)
      
      @scala.inline
      def setData(
        value: js.Array[
              js.Array[Double | typingsSlinky.echarts.echarts.EChartOption.SeriesBoxplot.DataObject]
            ]
      ): Self = StObject.set(x, "data", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setDataUndefined: Self = StObject.set(x, "data", js.undefined)
      
      @scala.inline
      def setDataVarargs(value: (js.Array[Double | typingsSlinky.echarts.echarts.EChartOption.SeriesBoxplot.DataObject])*): Self = StObject.set(x, "data", js.Array(value :_*))
      
      @scala.inline
      def setDimensions(value: js.Array[_]): Self = StObject.set(x, "dimensions", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setDimensionsUndefined: Self = StObject.set(x, "dimensions", js.undefined)
      
      @scala.inline
      def setDimensionsVarargs(value: js.Any*): Self = StObject.set(x, "dimensions", js.Array(value :_*))
      
      @scala.inline
      def setEmphasis(value: `2`): Self = StObject.set(x, "emphasis", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setEmphasisUndefined: Self = StObject.set(x, "emphasis", js.undefined)
      
      @scala.inline
      def setEncode(value: js.Object): Self = StObject.set(x, "encode", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setEncodeUndefined: Self = StObject.set(x, "encode", js.undefined)
      
      @scala.inline
      def setHoverAnimation(value: Boolean): Self = StObject.set(x, "hoverAnimation", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setHoverAnimationUndefined: Self = StObject.set(x, "hoverAnimation", js.undefined)
      
      @scala.inline
      def setId(value: String): Self = StObject.set(x, "id", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setIdUndefined: Self = StObject.set(x, "id", js.undefined)
      
      @scala.inline
      def setItemStyle(value: BorderType): Self = StObject.set(x, "itemStyle", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setItemStyleUndefined: Self = StObject.set(x, "itemStyle", js.undefined)
      
      @scala.inline
      def setLayout(value: String): Self = StObject.set(x, "layout", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setLayoutUndefined: Self = StObject.set(x, "layout", js.undefined)
      
      @scala.inline
      def setLegendHoverLink(value: Boolean): Self = StObject.set(x, "legendHoverLink", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setLegendHoverLinkUndefined: Self = StObject.set(x, "legendHoverLink", js.undefined)
      
      @scala.inline
      def setMarkArea(value: AnimationDelayUpdate): Self = StObject.set(x, "markArea", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setMarkAreaUndefined: Self = StObject.set(x, "markArea", js.undefined)
      
      @scala.inline
      def setMarkLine(value: AnimationDurationUpdate): Self = StObject.set(x, "markLine", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setMarkLineUndefined: Self = StObject.set(x, "markLine", js.undefined)
      
      @scala.inline
      def setMarkPoint(value: AnimationDuration): Self = StObject.set(x, "markPoint", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setMarkPointUndefined: Self = StObject.set(x, "markPoint", js.undefined)
      
      @scala.inline
      def setName(value: String): Self = StObject.set(x, "name", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setNameUndefined: Self = StObject.set(x, "name", js.undefined)
      
      @scala.inline
      def setSilent(value: Boolean): Self = StObject.set(x, "silent", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setSilentUndefined: Self = StObject.set(x, "silent", js.undefined)
      
      @scala.inline
      def setTooltip(value: BaseTooltip): Self = StObject.set(x, "tooltip", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setTooltipUndefined: Self = StObject.set(x, "tooltip", js.undefined)
      
      @scala.inline
      def setType(value: String): Self = StObject.set(x, "type", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setTypeUndefined: Self = StObject.set(x, "type", js.undefined)
      
      @scala.inline
      def setXAxisIndex(value: Double): Self = StObject.set(x, "xAxisIndex", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setXAxisIndexUndefined: Self = StObject.set(x, "xAxisIndex", js.undefined)
      
      @scala.inline
      def setYAxisIndex(value: Double): Self = StObject.set(x, "yAxisIndex", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setYAxisIndexUndefined: Self = StObject.set(x, "yAxisIndex", js.undefined)
      
      @scala.inline
      def setZ(value: Double): Self = StObject.set(x, "z", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setZUndefined: Self = StObject.set(x, "z", js.undefined)
      
      @scala.inline
      def setZlevel(value: Double): Self = StObject.set(x, "zlevel", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setZlevelUndefined: Self = StObject.set(x, "zlevel", js.undefined)
    }
  }
  
  /**
    * A
    * [candlestick](https://en.wikipedia.org/wiki/Candlestick_chart)
    * chart (also called Japanese candlestick chart) is a style of financial
    * chart used to describe price movements of a security, derivative,
    * or currency.
    *
    * ECharts3 supports both `'candlestick'` and `'k'` in
    * [series.type](https://echarts.apache.org/en/option.html#(series.type)
    * (`'k'` would automatically turns into `'candlestick'`).
    *
    * **An example:**
    *
    * [see doc](https://echarts.apache.org/en/option.html#series-candlestick)
    *
    * **About color of increase and decrease**
    *
    * Different countries or regions have different implications on the
    * color of candle stick chart.
    * It may use red to imply increasing with red and decreasing with blue
    * (in China mainland, Taiwan, Japan, Koera, and so on), or to imply
    * increasing with green and decreasing with red (in Europ, North America,
    * Hong Kong, Singapore, and so on).
    * Besides color, the increase and decrease of stock may also be represented
    * with candle stick with or without filling colors.
    *
    * We use red to represent increasing and blue decreasing by default.
    * If you want to change the configuration, you may change the following
    * parameters.
    *
    * + [series-candlestick.itemStyle.color](https://echarts.apache.org/en/option.html#series-candlestick.itemStyle.color)
    * : fill color for bullish candle stick (namely, increase)
    * + [series-candlestick.itemStyle.color0](https://echarts.apache.org/en/option.html#series-candlestick.itemStyle.color0)
    * : fill color for bearish candle stick (namely, decrease)
    * + [series-candlestick.itemStyle.borderColor](https://echarts.apache.org/en/option.html#series-candlestick.itemStyle.borderColor)
    * : border color for bullish candle stick (namely, increase)
    * + [series-candlestick.itemStyle.borderColor0](https://echarts.apache.org/en/option.htmlseries-candlestick.itemStyle.borderColor0)
    * : border color for bearish candle stick (namely, decrease)
    *
    *
    * @see https://echarts.apache.org/en/option.html#series-candlestick
    */
  @js.native
  trait SeriesCandlestick extends Series {
    
    /**
      * Delay before updating the first animation, which supports callback
      * function for different data to have different animation effect.
      *
      * For example:
      *
      * [see doc](https://echarts.apache.org/en/option.html#series-candlestick.candlestick)
      *
      * See
      * [this example](https://echarts.apache.org/examples/en/editor.html?c=bar-animation-delay)
      * for more information.
      *
      *
      * @see https://echarts.apache.org/en/option.html#series-candlestick.animationDelay
      */
    var animationDelay: js.UndefOr[js.Function | Double] = js.native
    
    /**
      * Duration of the first animation, which supports callback function
      * for different data to have different animation effect:
      *
      * [see doc](https://echarts.apache.org/en/option.html#series-candlestick.candlestick)
      *
      *
      * @default
      * 300
      * @see https://echarts.apache.org/en/option.html#series-candlestick.animationDuration
      */
    var animationDuration: js.UndefOr[js.Function | Double] = js.native
    
    /**
      * Easing method used for the first animation.
      * Varied easing effects can be found at
      * [easing effect example](https://echarts.apache.org/examples/en/editor.html?c=line-easing)
      * .
      *
      *
      * @default
      * "linear"
      * @see https://echarts.apache.org/en/option.html#series-candlestick.animationEasing
      */
    var animationEasing: js.UndefOr[String] = js.native
    
    /**
      * Specify bar max width.
      * Absolute value (like `10`) or percentage (like `'20%'`, according
      * to band width) can be used. Auto adapt by default.
      *
      *
      * @see https://echarts.apache.org/en/option.html#series-candlestick.barMaxWidth
      */
    var barMaxWidth: js.UndefOr[Double] = js.native
    
    /**
      * Specify bar min width.
      * Absolute value (like `10`) or percentage (like `'20%'`, according
      * to band width) can be used. Auto adapt by default.
      *
      *
      * @see https://echarts.apache.org/en/option.html#series-candlestick.barMinWidth
      */
    var barMinWidth: js.UndefOr[Double] = js.native
    
    /**
      * Specify bar width.
      * Absolute value (like `10`) or percentage (like `'20%'`, according
      * to band width) can be used. Auto adapt by default.
      *
      *
      * @see https://echarts.apache.org/en/option.html#series-candlestick.barWidth
      */
    var barWidth: js.UndefOr[Double] = js.native
    
    /**
      * The coordinate used in the series, whose options are:
      *
      * + `'cartesian2d'`
      *
      * Use a two-dimensional rectangular coordinate (also known as Cartesian
      * coordinate), with
      * [xAxisIndex](https://echarts.apache.org/en/option.html#series-cartesian2d.xAxisIndex)
      * and
      * [yAxisIndex](https://echarts.apache.org/en/option.html#series-cartesian2d.yAxisIndex)
      * to assign the corresponding axis component.
      *
      *
      * @default
      * "cartesian2d"
      * @see https://echarts.apache.org/en/option.html#series-candlestick.coordinateSystem
      */
    var coordinateSystem: js.UndefOr[String] = js.native
    
    /**
      * Data should be the two-dimensional array shown as follow.
      *
      * [see doc](https://echarts.apache.org/en/option.html#series-candlestick.candlestick)
      *
      * Every data item (each line in the example above) represents a
      * box, which contains 4 values. They are:
      *
      * [see doc](https://echarts.apache.org/en/option.html#series-candlestick.candlestick)
      *
      *
      * @see https://echarts.apache.org/en/option.html#series-candlestick.data
      */
    var data: js.UndefOr[
        js.Array[
          js.Array[Double | typingsSlinky.echarts.echarts.EChartOption.SeriesCandlestick.DataObject]
        ]
      ] = js.native
    
    /**
      * `dimensions` can be used to define dimension info for `series.data`
      * or `dataset.source`.
      *
      * Notice: if
      * [dataset](https://echarts.apache.org/en/option.html#dataset)
      * is used, we can provide dimension names in the first column/row
      * of
      * [dataset.source](https://echarts.apache.org/en/option.html#dataset.source)
      * , and not need to specify `dimensions` here.
      * But if `dimensions` is specified here, echarts will not retrieve
      * dimension names from the first row/column of `dataset.source`
      * any more.
      *
      * For example:
      *
      * [see doc](https://echarts.apache.org/en/option.html#series-candlestick.candlestick)
      * [see doc](https://echarts.apache.org/en/option.html#series-candlestick.candlestick)
      *
      * Each data item of `dimensions` can be:
      *
      * + `string`, for example, `'someName'`, which equals to `{name:
      * 'someName'}`.
      * + `Object`, where the attributes can be:
      * + name: `string`.
      * + type: `string`, supports:
      * + `number`
      * + `float`, that is,
      * [Float64Array](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Float64Array)
      *
      * + `int`, that is,
      * [Int32Array](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Int32Array)
      *
      * + `ordinal`, discrete value, which represents string generally.
      * + `time`, time value, see
      * [data](https://echarts.apache.org/en/option.html#series.data)
      * to check the format of time value.
      * + displayName: `string`, generally used in tooltip for dimension
      * display. If not specified, use `name` by default.
      *
      * When `dimensions` is specified, the default `tooltip` will be
      * displayed vertically, which is better to show diemsion names.
      * Otherwise, `tooltip` will displayed only value horizontally.
      *
      *
      * @see https://echarts.apache.org/en/option.html#series-candlestick.dimensions
      */
    var dimensions: js.UndefOr[js.Array[_]] = js.native
    
    /**
      * Emphasis style of candlestick.
      *
      *
      * @see https://echarts.apache.org/en/option.html#series-candlestick.emphasis
      */
    var emphasis: js.UndefOr[`3`] = js.native
    
    /**
      * Define what is encoded to for each dimension of `data`.
      * For example:
      *
      * [see doc](https://echarts.apache.org/en/option.html#series-candlestick.candlestick)
      *
      * Attributes of encode are different according to the type of coordinate
      * systtems. For
      * [cartesian2d](https://echarts.apache.org/en/option.html#grid)
      * , `x` and `y` can be defined. For
      * [polar](https://echarts.apache.org/en/option.html#polar)
      * , `radius` and `angle` can be defined. For
      * [geo](https://echarts.apache.org/en/option.html#geo)
      * , `lng` and `lat` can be defined.
      * Attribute `tooltip` and `itemName` (data item name in tooltip)
      * are always able to be defined.
      *
      * When
      * [dimensions](https://echarts.apache.org/en/option.html#series.dimensions)
      * is used to defined name for a certain dimension, `encode` can
      * refer the name directly. For example:
      *
      * [see doc](https://echarts.apache.org/en/option.html#series-candlestick.candlestick)
      *
      * Specially, in \[custom series(~series-custom), some property
      * in `encode`, corresponding to axis, can be set as null to make
      * the series not controlled by the axis, that is, the series data
      * will not be count in the extent of the axis, and the
      * [dataZoom](https://echarts.apache.org/en/option.html#dataZoom)
      * on the axis will not filter the series.
      *
      * [see doc](https://echarts.apache.org/en/option.html#series-candlestick.candlestick)
      *
      *
      * @see https://echarts.apache.org/en/option.html#series-candlestick.encode
      */
    var encode: js.UndefOr[js.Object] = js.native
    
    /**
      * Whether to enable animitation when hovering on box.
      *
      *
      * @default
      * "true"
      * @see https://echarts.apache.org/en/option.html#series-candlestick.hoverAnimation
      */
    var hoverAnimation: js.UndefOr[Boolean] = js.native
    
    /**
      * Component ID, not specified by default.
      * If specified, it can be used to refer the component in option
      * or API.
      *
      *
      * @see https://echarts.apache.org/en/option.html#series-candlestick.id
      */
    var id: js.UndefOr[String] = js.native
    
    /**
      * Item style of candlestick.
      *
      *
      * @see https://echarts.apache.org/en/option.html#series-candlestick.itemStyle
      */
    var itemStyle: js.UndefOr[BorderColor0] = js.native
    
    /**
      * Whether to enable the optimization of large-scale data.
      * It could be set when large data causes performance problem.
      *
      * After being enabled, `largeThreshold` can be used to indicate
      * the minimum number for turning on the optimization.
      *
      * But when the optimization enabled, the style of single data item
      * can't be customized any more.
      *
      *
      * @default
      * "true"
      * @see https://echarts.apache.org/en/option.html#series-candlestick.large
      */
    var large: js.UndefOr[Boolean] = js.native
    
    /**
      * The threshold enabling the drawing optimization.
      *
      *
      * @default
      * 600
      * @see https://echarts.apache.org/en/option.html#series-candlestick.largeThreshold
      */
    var largeThreshold: js.UndefOr[Double] = js.native
    
    /**
      * Layout method, whose values may be:
      *
      * + `'horizontal'`: horizontally layout all boxs.
      *
      * + `'vertical'`: vertically layout all boxs.
      *
      * The default value is decided by:
      *
      * + if there is a `category` axis:
      * + if it is horizontal, use `'horizontal'`;
      * + otherwise use `'vertical'`;
      * + otherwise use `'horizontal'`.
      *
      *
      * @see https://echarts.apache.org/en/option.html#series-candlestick.layout
      */
    var layout: js.UndefOr[String] = js.native
    
    /**
      * Whether to enable highlighting chart when
      * [legend](https://echarts.apache.org/en/option.html#legend)
      * is being hovered.
      *
      *
      * @default
      * "true"
      * @see https://echarts.apache.org/en/option.html#series-candlestick.legendHoverLink
      */
    var legendHoverLink: js.UndefOr[Boolean] = js.native
    
    /**
      * Used to mark an area in chart.
      * For example, mark a time interval.
      *
      *
      * @see https://echarts.apache.org/en/option.html#series-candlestick.markArea
      */
    var markArea: js.UndefOr[AnimationDelayUpdate] = js.native
    
    /**
      * Use a line in the chart to illustrate.
      *
      *
      * @see https://echarts.apache.org/en/option.html#series-candlestick.markLine
      */
    var markLine: js.UndefOr[AnimationDelay] = js.native
    
    /**
      * Mark point in a chart.
      *
      *
      * @see https://echarts.apache.org/en/option.html#series-candlestick.markPoint
      */
    var markPoint: js.UndefOr[AnimationDuration] = js.native
    
    /**
      * Series name used for displaying in
      * [tooltip](https://echarts.apache.org/en/option.html#tooltip)
      * and filtering with
      * [legend](https://echarts.apache.org/en/option.html#legend)
      * , or updaing data and configuration with `setOption`.
      *
      *
      * @see https://echarts.apache.org/en/option.html#series-candlestick.name
      */
    var name: js.UndefOr[String] = js.native
    
    /**
      * `progressive` specifies the amount of graphic elements that can
      * be rendered within a frame (about 16ms) if "progressive rendering"
      * enabled.
      *
      * When data amount is from thousand to more than 10 million, it
      * will take too long time to render all of the graphic elements.
      * Since ECharts 4, "progressive rendering" is supported in its
      * workflow, which processes and renders data chunk by chunk alone
      * with each frame, avoiding to block the UI thread of the browser.
      *
      *
      * @default
      * 5000
      * @see https://echarts.apache.org/en/option.html#series-candlestick.progressive
      */
    var progressive: js.UndefOr[Double] = js.native
    
    /**
      * Chunk approach, optional values:
      *
      * + `'sequential'`: slice data by data index.
      * + `'mod'`: slice data by mod, which make the data items of each
      * chunk coming from all over the data, bringing better visual effect
      * while progressive rendering.
      *
      *
      * @default
      * "mod"
      * @see https://echarts.apache.org/en/option.html#series-candlestick.progressiveChunkMode
      */
    var progressiveChunkMode: js.UndefOr[String] = js.native
    
    /**
      * If current data amount is over the threshold, "progressive rendering"
      * is enabled.
      *
      *
      * @default
      * 10000
      * @see https://echarts.apache.org/en/option.html#series-candlestick.progressiveThreshold
      */
    var progressiveThreshold: js.UndefOr[Double] = js.native
    
    /**
      * Whether to ignore mouse events.
      * Default value is false, for triggering and responding to mouse
      * events.
      *
      *
      * @see https://echarts.apache.org/en/option.html#series-candlestick.silent
      */
    var silent: js.UndefOr[Boolean] = js.native
    
    /**
      * tooltip settings in this series.
      *
      *
      * @see https://echarts.apache.org/en/option.html#series-candlestick.tooltip
      */
    var tooltip: js.UndefOr[BaseTooltip] = js.native
    
    /**
      * @default
      * "candlestick"
      * @see https://echarts.apache.org/en/option.html#series-candlestick.type
      */
    var `type`: js.UndefOr[String] = js.native
    
    /**
      * Index of
      * [x axis](https://echarts.apache.org/en/option.html#xAxis)
      * to combine with, which is useful for multiple x axes in one chart.
      *
      *
      * @see https://echarts.apache.org/en/option.html#series-candlestick.xAxisIndex
      */
    var xAxisIndex: js.UndefOr[Double] = js.native
    
    /**
      * Index of
      * [y axis](https://echarts.apache.org/en/option.html#yAxis)
      * to combine with, which is useful for multiple y axes in one chart.
      *
      *
      * @see https://echarts.apache.org/en/option.html#series-candlestick.yAxisIndex
      */
    var yAxisIndex: js.UndefOr[Double] = js.native
    
    /**
      * `z` value of all graghical elements in candlestick, which controls
      * order of drawing graphical components.
      * Components with smaller `z` values may be overwritten by those
      * with larger `z` values.
      *
      * `z` has a lower priority to `zlevel`, and will not create new
      * Canvas.
      *
      *
      * @default
      * 2
      * @see https://echarts.apache.org/en/option.html#series-candlestick.z
      */
    var z: js.UndefOr[Double] = js.native
    
    /**
      * `zlevel` value of all graghical elements in candlestick.
      *
      * `zlevel` is used to make layers with Canvas.
      * Graphical elements with different `zlevel` values will be placed
      * in different Canvases, which is a common optimization technique.
      * We can put those frequently changed elements (like those with
      * animations) to a seperate `zlevel`.
      * Notice that too many Canvases will increase memory cost, and
      * should be used carefully on mobile phones to avoid crash.
      *
      * Canvases with bigger `zlevel` will be placed on Canvases with
      * smaller `zlevel`.
      *
      *
      * @see https://echarts.apache.org/en/option.html#series-candlestick.zlevel
      */
    var zlevel: js.UndefOr[Double] = js.native
  }
  object SeriesCandlestick {
    
    @scala.inline
    def apply(): SeriesCandlestick = {
      val __obj = js.Dynamic.literal()
      __obj.asInstanceOf[SeriesCandlestick]
    }
    
    @js.native
    trait DataObject extends StObject {
      
      /**
        * Emphasis style of a candle box.
        *
        *
        * @see https://echarts.apache.org/en/option.html#series-candlestick.data.emphasis
        */
      var emphasis: js.UndefOr[`3`] = js.native
      
      /**
        * Style of a candle box.
        *
        *
        * @see https://echarts.apache.org/en/option.html#series-candlestick.data.itemStyle
        */
      var itemStyle: js.UndefOr[BorderColor0] = js.native
      
      /**
        * Name of data item.
        *
        *
        * @see https://echarts.apache.org/en/option.html#series-candlestick.data.name
        */
      var name: js.UndefOr[String] = js.native
      
      /**
        * tooltip settings in this series data.
        *
        *
        * @see https://echarts.apache.org/en/option.html#series-candlestick.data.tooltip
        */
      var tooltip: js.UndefOr[BaseTooltip] = js.native
      
      /**
        * Value of data item.
        *
        * [see doc](https://echarts.apache.org/en/option.html#series-candlestick.candlestick.data)
        *
        *
        * @see https://echarts.apache.org/en/option.html#series-candlestick.data.value
        */
      var value: js.UndefOr[js.Array[_]] = js.native
    }
    object DataObject {
      
      @scala.inline
      def apply(): typingsSlinky.echarts.echarts.EChartOption.SeriesCandlestick.DataObject = {
        val __obj = js.Dynamic.literal()
        __obj.asInstanceOf[typingsSlinky.echarts.echarts.EChartOption.SeriesCandlestick.DataObject]
      }
      
      @scala.inline
      implicit class DataObjectMutableBuilder[Self <: typingsSlinky.echarts.echarts.EChartOption.SeriesCandlestick.DataObject] (val x: Self) extends AnyVal {
        
        @scala.inline
        def setEmphasis(value: `3`): Self = StObject.set(x, "emphasis", value.asInstanceOf[js.Any])
        
        @scala.inline
        def setEmphasisUndefined: Self = StObject.set(x, "emphasis", js.undefined)
        
        @scala.inline
        def setItemStyle(value: BorderColor0): Self = StObject.set(x, "itemStyle", value.asInstanceOf[js.Any])
        
        @scala.inline
        def setItemStyleUndefined: Self = StObject.set(x, "itemStyle", js.undefined)
        
        @scala.inline
        def setName(value: String): Self = StObject.set(x, "name", value.asInstanceOf[js.Any])
        
        @scala.inline
        def setNameUndefined: Self = StObject.set(x, "name", js.undefined)
        
        @scala.inline
        def setTooltip(value: BaseTooltip): Self = StObject.set(x, "tooltip", value.asInstanceOf[js.Any])
        
        @scala.inline
        def setTooltipUndefined: Self = StObject.set(x, "tooltip", js.undefined)
        
        @scala.inline
        def setValue(value: js.Array[_]): Self = StObject.set(x, "value", value.asInstanceOf[js.Any])
        
        @scala.inline
        def setValueUndefined: Self = StObject.set(x, "value", js.undefined)
        
        @scala.inline
        def setValueVarargs(value: js.Any*): Self = StObject.set(x, "value", js.Array(value :_*))
      }
    }
    
    @scala.inline
    implicit class SeriesCandlestickMutableBuilder[Self <: SeriesCandlestick] (val x: Self) extends AnyVal {
      
      @scala.inline
      def setAnimationDelay(value: js.Function | Double): Self = StObject.set(x, "animationDelay", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setAnimationDelayUndefined: Self = StObject.set(x, "animationDelay", js.undefined)
      
      @scala.inline
      def setAnimationDuration(value: js.Function | Double): Self = StObject.set(x, "animationDuration", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setAnimationDurationUndefined: Self = StObject.set(x, "animationDuration", js.undefined)
      
      @scala.inline
      def setAnimationEasing(value: String): Self = StObject.set(x, "animationEasing", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setAnimationEasingUndefined: Self = StObject.set(x, "animationEasing", js.undefined)
      
      @scala.inline
      def setBarMaxWidth(value: Double): Self = StObject.set(x, "barMaxWidth", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setBarMaxWidthUndefined: Self = StObject.set(x, "barMaxWidth", js.undefined)
      
      @scala.inline
      def setBarMinWidth(value: Double): Self = StObject.set(x, "barMinWidth", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setBarMinWidthUndefined: Self = StObject.set(x, "barMinWidth", js.undefined)
      
      @scala.inline
      def setBarWidth(value: Double): Self = StObject.set(x, "barWidth", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setBarWidthUndefined: Self = StObject.set(x, "barWidth", js.undefined)
      
      @scala.inline
      def setCoordinateSystem(value: String): Self = StObject.set(x, "coordinateSystem", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setCoordinateSystemUndefined: Self = StObject.set(x, "coordinateSystem", js.undefined)
      
      @scala.inline
      def setData(
        value: js.Array[
              js.Array[Double | typingsSlinky.echarts.echarts.EChartOption.SeriesCandlestick.DataObject]
            ]
      ): Self = StObject.set(x, "data", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setDataUndefined: Self = StObject.set(x, "data", js.undefined)
      
      @scala.inline
      def setDataVarargs(
        value: (js.Array[Double | typingsSlinky.echarts.echarts.EChartOption.SeriesCandlestick.DataObject])*
      ): Self = StObject.set(x, "data", js.Array(value :_*))
      
      @scala.inline
      def setDimensions(value: js.Array[_]): Self = StObject.set(x, "dimensions", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setDimensionsUndefined: Self = StObject.set(x, "dimensions", js.undefined)
      
      @scala.inline
      def setDimensionsVarargs(value: js.Any*): Self = StObject.set(x, "dimensions", js.Array(value :_*))
      
      @scala.inline
      def setEmphasis(value: `3`): Self = StObject.set(x, "emphasis", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setEmphasisUndefined: Self = StObject.set(x, "emphasis", js.undefined)
      
      @scala.inline
      def setEncode(value: js.Object): Self = StObject.set(x, "encode", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setEncodeUndefined: Self = StObject.set(x, "encode", js.undefined)
      
      @scala.inline
      def setHoverAnimation(value: Boolean): Self = StObject.set(x, "hoverAnimation", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setHoverAnimationUndefined: Self = StObject.set(x, "hoverAnimation", js.undefined)
      
      @scala.inline
      def setId(value: String): Self = StObject.set(x, "id", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setIdUndefined: Self = StObject.set(x, "id", js.undefined)
      
      @scala.inline
      def setItemStyle(value: BorderColor0): Self = StObject.set(x, "itemStyle", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setItemStyleUndefined: Self = StObject.set(x, "itemStyle", js.undefined)
      
      @scala.inline
      def setLarge(value: Boolean): Self = StObject.set(x, "large", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setLargeThreshold(value: Double): Self = StObject.set(x, "largeThreshold", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setLargeThresholdUndefined: Self = StObject.set(x, "largeThreshold", js.undefined)
      
      @scala.inline
      def setLargeUndefined: Self = StObject.set(x, "large", js.undefined)
      
      @scala.inline
      def setLayout(value: String): Self = StObject.set(x, "layout", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setLayoutUndefined: Self = StObject.set(x, "layout", js.undefined)
      
      @scala.inline
      def setLegendHoverLink(value: Boolean): Self = StObject.set(x, "legendHoverLink", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setLegendHoverLinkUndefined: Self = StObject.set(x, "legendHoverLink", js.undefined)
      
      @scala.inline
      def setMarkArea(value: AnimationDelayUpdate): Self = StObject.set(x, "markArea", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setMarkAreaUndefined: Self = StObject.set(x, "markArea", js.undefined)
      
      @scala.inline
      def setMarkLine(value: AnimationDelay): Self = StObject.set(x, "markLine", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setMarkLineUndefined: Self = StObject.set(x, "markLine", js.undefined)
      
      @scala.inline
      def setMarkPoint(value: AnimationDuration): Self = StObject.set(x, "markPoint", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setMarkPointUndefined: Self = StObject.set(x, "markPoint", js.undefined)
      
      @scala.inline
      def setName(value: String): Self = StObject.set(x, "name", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setNameUndefined: Self = StObject.set(x, "name", js.undefined)
      
      @scala.inline
      def setProgressive(value: Double): Self = StObject.set(x, "progressive", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setProgressiveChunkMode(value: String): Self = StObject.set(x, "progressiveChunkMode", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setProgressiveChunkModeUndefined: Self = StObject.set(x, "progressiveChunkMode", js.undefined)
      
      @scala.inline
      def setProgressiveThreshold(value: Double): Self = StObject.set(x, "progressiveThreshold", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setProgressiveThresholdUndefined: Self = StObject.set(x, "progressiveThreshold", js.undefined)
      
      @scala.inline
      def setProgressiveUndefined: Self = StObject.set(x, "progressive", js.undefined)
      
      @scala.inline
      def setSilent(value: Boolean): Self = StObject.set(x, "silent", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setSilentUndefined: Self = StObject.set(x, "silent", js.undefined)
      
      @scala.inline
      def setTooltip(value: BaseTooltip): Self = StObject.set(x, "tooltip", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setTooltipUndefined: Self = StObject.set(x, "tooltip", js.undefined)
      
      @scala.inline
      def setType(value: String): Self = StObject.set(x, "type", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setTypeUndefined: Self = StObject.set(x, "type", js.undefined)
      
      @scala.inline
      def setXAxisIndex(value: Double): Self = StObject.set(x, "xAxisIndex", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setXAxisIndexUndefined: Self = StObject.set(x, "xAxisIndex", js.undefined)
      
      @scala.inline
      def setYAxisIndex(value: Double): Self = StObject.set(x, "yAxisIndex", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setYAxisIndexUndefined: Self = StObject.set(x, "yAxisIndex", js.undefined)
      
      @scala.inline
      def setZ(value: Double): Self = StObject.set(x, "z", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setZUndefined: Self = StObject.set(x, "z", js.undefined)
      
      @scala.inline
      def setZlevel(value: Double): Self = StObject.set(x, "zlevel", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setZlevelUndefined: Self = StObject.set(x, "zlevel", js.undefined)
    }
  }
  
  /**
    * **custom series**
    *
    * `custom series` supports customizing graphic elements, and then generate
    * more types of charts.
    *
    * echarts manages the creation, deletion, animation and interaction
    * with other components (like
    * [dataZoom](https://echarts.apache.org/en/option.html#dataZoom)
    * 、
    * [visualMap](https://echarts.apache.org/en/option.html#visualMap)
    * ), which frees developers from handle those issue themselves.
    *
    * **For example, a "x-range" chart is made by custom sereis:**
    *
    * [see doc](https://echarts.apache.org/en/option.html#series-custom)
    *
    * **
    * [More samples of custom series](https://echarts.apache.org/examples/en/index.html#chart-type-custom)
    * **
    *
    * **
    * [A tutotial of custom series](https://echarts.apache.org/en/tutorial.html#Custom%20Series)
    * **
    *
    * **Customize the render logic (in renderItem method)**
    *
    * `custom series` requires developers to write a render logic by themselves.
    * This render logic is called
    * [renderItem](https://echarts.apache.org/en/option.html#series-custom.renderItem)
    * .
    *
    * For example:
    *
    * [see doc](https://echarts.apache.org/en/option.html#series-custom)
    *
    * [renderItem](https://echarts.apache.org/en/option.html#series-custom.renderItem)
    * will be called on each data item.
    *
    * [renderItem](https://echarts.apache.org/en/option.html#series-custom.renderItem)
    * provides two parameters:
    *
    * + [params](https://echarts.apache.org/en/option.html#series-custom.renderItem.arguments.params)
    * : provides info about the current series and data and coordinate
    * system.
    * + [api](https://echarts.apache.org/en/option.html#series-custom.renderItem.arguments.api)
    * : includes some methods.
    *
    * [renderItem](https://echarts.apache.org/en/option.html#series-custom.renderItem)
    * method should returns graphic elements definitions.See
    * [renderItem.return](https://echarts.apache.org/en/option.html#series-custom.renderItem.return)
    * .
    *
    * Generally, the main process of
    * [renderItem](https://echarts.apache.org/en/option.html#series-custom.renderItem)
    * is that retrieve value from data and convert them to graphic elements
    * on the current coordinate system. Two methods in
    * [renderItem.arguments.api](https://echarts.apache.org/en/option.html#series-custom.renderItem.arguments.api)
    * are always used in this procedure:
    *
    * + [api.value(...)](https://echarts.apache.org/en/option.html#series-custom.renderItem.arguments.api.value)
    * is used to retrieve value from data.
    * For example, `api.value(0)`
    * retrieve the value of the first dimension in the current data item.
    * + [api.coord(...)](https://echarts.apache.org/en/option.html#series-custom.renderItem.arguments.api.coord)
    * is used to convert data to coordinate.
    * For example, `var point = api.coord([api.value(0),
    * api.value(1)])`
    * converet the data to the point on the current coordinate system.
    *
    * Sometimes
    * [api.size(...)](https://echarts.apache.org/en/option.html#series-custom.renderItem.arguments.api.size)
    * method is needed, which calculates the size on the coordinate system
    * by a given data range.
    *
    * Moreover,
    * [api.style(...)](https://echarts.apache.org/en/option.html#series-custom.renderItem.arguments.api.style)
    * method can be used to set style.
    * It provides not only the style settings specified in
    * [series.itemStyle](https://echarts.apache.org/en/option.html#series-custom.itemStyle)
    * , but also the result of visual mapping.
    * This method can also be called like `api.style({fill:
    * 'green', stroke: 'yellow'})` to override those style settings.
    *
    * **Dimension mapping (by encode and dimension option)**
    *
    * In most cases,
    * [series.encode](https://echarts.apache.org/en/option.html#series-custom.encode)
    * is needed to be specified when using `custom series` serise, which
    * indicate the mapping of dimensions, and then echarts can render appropriate
    * axis by the extent of those data.
    *
    * `encode.tooltip`
    * and `encode.label`
    * can also be specified to define the content of default `tooltip`
    * and `label`.
    * [series.dimensions](https://echarts.apache.org/en/option.html#series-custom.dimensions)
    * can also be specified to defined names of each dimensions, which
    * will be displayed in tooltip.
    *
    * For example:
    *
    * [see doc](https://echarts.apache.org/en/option.html#series-custom)
    *
    * **Controlled by dataZoom**
    *
    * When use `custom series` with
    * [dataZoom](https://echarts.apache.org/en/option.html#dataZoom)
    * ,
    * [dataZoom.filterMode](https://echarts.apache.org/en/option.html#dataZoom.filterMode)
    * usually be set as `'weakFilter'`, which prevent `dataItem` from being
    * filtered when only part of its dimensions are out of the current
    * data window.
    *
    * **Difference between `dataIndex` and `dataIndexInside`**
    *
    * + `dataIndex` is the index of a `dataItem` in the original data.
    * + `dataIndexInside` is the index of a `dataItem` in the current data
    * window (see
    * [dataZoom](https://echarts.apache.org/en/option.html#dataZoom)
    * .
    *
    * [renderItem.arguments.api](https://echarts.apache.org/en/option.html#series-custom.renderItem.arguments.api)
    * uses `dataIndexInside` as the input parameter but not `dataIndex`,
    * because conversion from `dataIndex` to `dataIndexInside` is time-consuming.
    *
    * **Event listener**
    *
    * [see doc](https://echarts.apache.org/en/option.html#series-custom)
    *
    *
    * @see https://echarts.apache.org/en/option.html#series-custom
    */
  @js.native
  trait SeriesCustom extends Series {
    
    /**
      * Whether to enable animation.
      *
      *
      * @default
      * "true"
      * @see https://echarts.apache.org/en/option.html#series-custom.animation
      */
    var animation: js.UndefOr[Boolean] = js.native
    
    /**
      * Delay before updating the first animation, which supports callback
      * function for different data to have different animation effect.
      *
      * For example:
      *
      * [see doc](https://echarts.apache.org/en/option.html#series-custom.custom)
      *
      * See
      * [this example](https://echarts.apache.org/examples/en/editor.html?c=bar-animation-delay)
      * for more information.
      *
      *
      * @see https://echarts.apache.org/en/option.html#series-custom.animationDelay
      */
    var animationDelay: js.UndefOr[js.Function | Double] = js.native
    
    /**
      * Delay before updating animation, which supports callback function
      * for different data to have different animation effect.
      *
      * For example:
      *
      * [see doc](https://echarts.apache.org/en/option.html#series-custom.custom)
      *
      * See
      * [this example](https://echarts.apache.org/examples/en/editor.html?c=bar-animation-delay)
      * for more information.
      *
      *
      * @see https://echarts.apache.org/en/option.html#series-custom.animationDelayUpdate
      */
    var animationDelayUpdate: js.UndefOr[js.Function | Double] = js.native
    
    /**
      * Duration of the first animation, which supports callback function
      * for different data to have different animation effect:
      *
      * [see doc](https://echarts.apache.org/en/option.html#series-custom.custom)
      *
      *
      * @default
      * 1000
      * @see https://echarts.apache.org/en/option.html#series-custom.animationDuration
      */
    var animationDuration: js.UndefOr[js.Function | Double] = js.native
    
    /**
      * Time for animation to complete, which supports callback function
      * for different data to have different animation effect:
      *
      * [see doc](https://echarts.apache.org/en/option.html#series-custom.custom)
      *
      *
      * @default
      * 300
      * @see https://echarts.apache.org/en/option.html#series-custom.animationDurationUpdate
      */
    var animationDurationUpdate: js.UndefOr[js.Function | Double] = js.native
    
    /**
      * Easing method used for the first animation.
      * Varied easing effects can be found at
      * [easing effect example](https://echarts.apache.org/examples/en/editor.html?c=line-easing)
      * .
      *
      *
      * @default
      * "cubicOut"
      * @see https://echarts.apache.org/en/option.html#series-custom.animationEasing
      */
    var animationEasing: js.UndefOr[String] = js.native
    
    /**
      * Easing method used for animation.
      *
      *
      * @default
      * "cubicOut"
      * @see https://echarts.apache.org/en/option.html#series-custom.animationEasingUpdate
      */
    var animationEasingUpdate: js.UndefOr[String] = js.native
    
    /**
      * Whether to set graphic number threshold to animation.
      * Animation will be disabled when graphic number is larger than
      * threshold.
      *
      *
      * @default
      * 2000
      * @see https://echarts.apache.org/en/option.html#series-custom.animationThreshold
      */
    var animationThreshold: js.UndefOr[Double] = js.native
    
    /**
      * Index of
      * [calendar coordinates](https://echarts.apache.org/en/option.html#calendar)
      * to combine with, which is useful for multiple calendar coordinates
      * in one chart.
      *
      *
      * @see https://echarts.apache.org/en/option.html#series-custom.calendarIndex
      */
    var calendarIndex: js.UndefOr[Double] = js.native
    
    /**
      * The coordinate used in the series, whose options are:
      *
      * + `null` or `'none'`
      *
      * No coordinate.
      *
      * + `'cartesian2d'`
      *
      * Use a two-dimensional rectangular coordinate (also known as Cartesian
      * coordinate), with
      * [xAxisIndex](https://echarts.apache.org/en/option.html#series-custom.xAxisIndex)
      * and
      * [yAxisIndex](https://echarts.apache.org/en/option.html#series-custom.yAxisIndex)
      * to assign the corresponding axis component.
      *
      * + `'polar'`
      *
      * Use polar coordinates, with
      * [polarIndex](https://echarts.apache.org/en/option.html#series-custom.polarIndex)
      * to assign the corresponding polar coordinate component.
      *
      * + `'geo'`
      *
      * Use geographic coordinate, with
      * [geoIndex](https://echarts.apache.org/en/option.html#series-custom.geoIndex)
      * to assign the corresponding geographic coordinate components.
      *
      * + `'none'`
      *
      * Do not use coordinate system.
      *
      *
      * @default
      * "cartesian2d"
      * @see https://echarts.apache.org/en/option.html#series-custom.coordinateSystem
      */
    var coordinateSystem: js.UndefOr[String] = js.native
    
    /**
      * Data array of series, which can be in the following forms:
      *
      * Notice, if no `data` specified in series, and there is
      * [dataset](https://echarts.apache.org/en/option.html#dataset)
      * in option, series will use the first
      * [dataset](https://echarts.apache.org/en/option.html#dataset)
      * as its datasource. If `data` has been specified,
      * [dataset](https://echarts.apache.org/en/option.html#dataset)
      * will not used.
      *
      * `series.datasetIndex` can be used to specify other
      * [dataset](https://echarts.apache.org/en/option.html#dataset)
      * .
      *
      * Basically, data is represented by a two-dimension array, like
      * the example below, where each colum is named as a "dimension".
      *
      * [see doc](https://echarts.apache.org/en/option.html#series-custom.custom)
      *
      * + In
      * [cartesian (grid)](https://echarts.apache.org/en/option.html#grid)
      * , "dimX" and "dimY" correspond to
      * [xAxis](https://echarts.apache.org/en/option.html#xAxis)
      * and
      * [yAxis](https://echarts.apache.org/en/option.html#yAxis)
      * repectively.
      * + In
      * [polar](https://echarts.apache.org/en/option.html#polar)
      * "dimX" and "dimY" correspond to
      * [radiusAxis](https://echarts.apache.org/en/option.html#radiusAxis)
      * 和
      * [angleAxis](https://echarts.apache.org/en/option.html#anbleAxis)
      * repectively.
      * + Other dimensions are optional, which can be used in other place.
      * For example:
      * + [visualMap](https://echarts.apache.org/en/option.html#visualMap)
      * can map one or more dimensions to viusal (color, symbol size
      * ...).
      * + [series.symbolSize](https://echarts.apache.org/en/option.html#series.symbolSize)
      * can be set as a callback function, where symbol size can be calculated
      * by values of a certain dimension.
      * + Values in other dimensions can be shown by
      * [tooltip.formatter](https://echarts.apache.org/en/option.html#tooltip.formatter)
      * or
      * [series.label.formatter](https://echarts.apache.org/en/option.html#series.label.formatter)
      * .
      *
      * Especially, when there is one and only one category axis (axis.type
      * is `'category'`), data can be simply be represented by a one-dimension
      * array, like:
      *
      * [see doc](https://echarts.apache.org/en/option.html#series-custom.custom)
      *
      * **Relationship between "value" and
      * [axis.type](https://echarts.apache.org/en/option.html#xAxis.type)
      * **
      *
      * + When a dimension corresponds to a value axis (axis.type
      * is `'value'` or `'log'`):
      *
      * The value can be a `number` (like `12`) (can also be a number
      * in a `string` format, like `'12'`).
      *
      * + When a dimension corresponds to a category axis (axis.type
      * is `'category'`):
      *
      * The value should be the ordinal of the axis.data
      * (based on `0`), the string value of the axis.data.
      * For example:
      *
      * [see doc](https://echarts.apache.org/en/option.html#series-custom.custom)
      *
      * There is an example of double category axes:
      * [Github Punchcard](https://echarts.apache.org/examples/en/editor.html?c=scatter-punchCard)
      * .
      *
      * + When a dimension corresponds to a time axis (type is `'time'`),
      * the value can be:
      *
      * + a timestamp, like `1484141700832`, which represents a UTC time.
      * + a date string, in one of the formats below:
      * + a subset of
      * [ISO 8601](http://www.ecma-international.org/ecma-262/5.1/#se
      * c-15.9.1.15)
      * , only including (all of these are treated as local time unless
      * timezone is specified, which is consistent with
      * [moment](https://momentjs.com/)
      * ):
      * + only part of year/month/date/time are specified: `'2012-03'`,
      * `'2012-03-01'`, `'2012-03-01 05'`, `'2012-03-01 05:06'`.
      * + separated by `"T"` or a space: `'2012-03-01T12:22:33.123'`,
      * `'2012-03-01 12:22:33.123'`.
      * + timezone specified: `'2012-03-01T12:22:33Z'`, `'2012-03-01T12:22:33+8000'`,
      * `'2012-03-01T12:22:33-05:00'`.
      * + other date string format (all of these are treated as local
      * time): `'2012'`, `'2012-3-1'`, `'2012/3/1'`, `'2012/03/01'`,
      * `'2009/6/12 2:00'`, `'2009/6/12 2:05:08'`, `'2009/6/12 2:05:08.123'`.
      * + a JavaScript Date instance created by user:
      * + Caution, when using a data string to create a Date instance,
      * [browser differences and inconsistencies](http://dygraphs.com/date-formats.html)
      * should be considered.
      * + For example: In chrome, `new Date('2012-01-01')` is treated
      * as a Jan 1st 2012 in UTC, while `new Date('2012-1-1')` and `new
      * Date('2012/01/01')` are treated as Jan 1st 2012 in local timezone.
      * In safari `new Date('2012-1-1')` is not supported.
      * + So if you intent to perform `new Date(dateString)`, it is strongly
      * recommended to use a time parse library (e.g.,
      * [moment](https://momentjs.com/)
      * ), or use `echarts.number.parseDate`, or check
      * [this](http://dygraphs.com/date-formats.html)
      * .
      *
      * **Customize a data item:**
      *
      * When needing to customize a data item, it can be set as an object,
      * where property `value` reprensent real value. For example:
      *
      * [see doc](https://echarts.apache.org/en/option.html#series-custom.custom)
      *
      * **Empty value:**
      *
      * `'-'` or `null` or `undefined` or `NaN` can be used to describe
      * that a data item is not exists (ps：_not exist_ does not means
      * its value is `0`).
      *
      * For example, line chart can break when encounter an empty value,
      * and scatter chart do not display graphic elements for empty values.
      *
      *
      * @see https://echarts.apache.org/en/option.html#series-custom.data
      */
    var data: js.UndefOr[
        js.Array[
          (js.Array[
            Unit | String | Double | typingsSlinky.echarts.echarts.EChartOption.SeriesCustom.DataObject
          ]) | typingsSlinky.echarts.echarts.EChartOption.SeriesCustom.DataObject | Double | String | Unit
        ]
      ] = js.native
    
    /**
      * If
      * [series.data](https://echarts.apache.org/en/option.html#series.data)
      * is not specified, and
      * [dataset](https://echarts.apache.org/en/option.html#dataset)
      * exists, the series will use `dataset`.
      * `datasetIndex` specifies which dataset will be used.
      *
      *
      * @see https://echarts.apache.org/en/option.html#series-custom.datasetIndex
      */
    var datasetIndex: js.UndefOr[Double] = js.native
    
    /**
      * `dimensions` can be used to define dimension info for `series.data`
      * or `dataset.source`.
      *
      * Notice: if
      * [dataset](https://echarts.apache.org/en/option.html#dataset)
      * is used, we can provide dimension names in the first column/row
      * of
      * [dataset.source](https://echarts.apache.org/en/option.html#dataset.source)
      * , and not need to specify `dimensions` here.
      * But if `dimensions` is specified here, echarts will not retrieve
      * dimension names from the first row/column of `dataset.source`
      * any more.
      *
      * For example:
      *
      * [see doc](https://echarts.apache.org/en/option.html#series-custom.custom)
      * [see doc](https://echarts.apache.org/en/option.html#series-custom.custom)
      *
      * Each data item of `dimensions` can be:
      *
      * + `string`, for example, `'someName'`, which equals to `{name:
      * 'someName'}`.
      * + `Object`, where the attributes can be:
      * + name: `string`.
      * + type: `string`, supports:
      * + `number`
      * + `float`, that is,
      * [Float64Array](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Float64Array)
      *
      * + `int`, that is,
      * [Int32Array](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Int32Array)
      *
      * + `ordinal`, discrete value, which represents string generally.
      * + `time`, time value, see
      * [data](https://echarts.apache.org/en/option.html#series.data)
      * to check the format of time value.
      * + displayName: `string`, generally used in tooltip for dimension
      * display. If not specified, use `name` by default.
      *
      * When `dimensions` is specified, the default `tooltip` will be
      * displayed vertically, which is better to show diemsion names.
      * Otherwise, `tooltip` will displayed only value horizontally.
      *
      *
      * @see https://echarts.apache.org/en/option.html#series-custom.dimensions
      */
    var dimensions: js.UndefOr[js.Array[_]] = js.native
    
    /**
      * @see https://echarts.apache.org/en/option.html#series-custom.emphasis
      */
    var emphasis: js.UndefOr[`2`] = js.native
    
    /**
      * Define what is encoded to for each dimension of `data`.
      * For example:
      *
      * [see doc](https://echarts.apache.org/en/option.html#series-custom.custom)
      *
      * Attributes of encode are different according to the type of coordinate
      * systtems. For
      * [cartesian2d](https://echarts.apache.org/en/option.html#grid)
      * , `x` and `y` can be defined. For
      * [polar](https://echarts.apache.org/en/option.html#polar)
      * , `radius` and `angle` can be defined. For
      * [geo](https://echarts.apache.org/en/option.html#geo)
      * , `lng` and `lat` can be defined.
      * Attribute `tooltip` and `itemName` (data item name in tooltip)
      * are always able to be defined.
      *
      * When
      * [dimensions](https://echarts.apache.org/en/option.html#series.dimensions)
      * is used to defined name for a certain dimension, `encode` can
      * refer the name directly. For example:
      *
      * [see doc](https://echarts.apache.org/en/option.html#series-custom.custom)
      *
      * Specially, in \[custom series(~series-custom), some property
      * in `encode`, corresponding to axis, can be set as null to make
      * the series not controlled by the axis, that is, the series data
      * will not be count in the extent of the axis, and the
      * [dataZoom](https://echarts.apache.org/en/option.html#dataZoom)
      * on the axis will not filter the series.
      *
      * [see doc](https://echarts.apache.org/en/option.html#series-custom.custom)
      *
      *
      * @see https://echarts.apache.org/en/option.html#series-custom.encode
      */
    var encode: js.UndefOr[js.Object] = js.native
    
    /**
      * Index of
      * [geographic coordinate](https://echarts.apache.org/en/option.html#geo)
      * to combine with, which is useful for multiple geographic axes
      * in one chart.
      *
      *
      * @see https://echarts.apache.org/en/option.html#series-custom.geoIndex
      */
    var geoIndex: js.UndefOr[Double] = js.native
    
    /**
      * Component ID, not specified by default.
      * If specified, it can be used to refer the component in option
      * or API.
      *
      *
      * @see https://echarts.apache.org/en/option.html#series-custom.id
      */
    var id: js.UndefOr[String] = js.native
    
    /**
      * Graphic style of , `emphasis` is the style when it is highlighted,
      * like being hovered by mouse, or highlighted via legend connect.
      *
      *
      * @see https://echarts.apache.org/en/option.html#series-custom.itemStyle
      */
    var itemStyle: js.UndefOr[BorderType] = js.native
    
    /**
      * Whether to enable highlighting chart when
      * [legend](https://echarts.apache.org/en/option.html#legend)
      * is being hovered.
      *
      *
      * @default
      * "true"
      * @see https://echarts.apache.org/en/option.html#series-custom.legendHoverLink
      */
    var legendHoverLink: js.UndefOr[Boolean] = js.native
    
    /**
      * Series name used for displaying in
      * [tooltip](https://echarts.apache.org/en/option.html#tooltip)
      * and filtering with
      * [legend](https://echarts.apache.org/en/option.html#legend)
      * , or updaing data and configuration with `setOption`.
      *
      *
      * @see https://echarts.apache.org/en/option.html#series-custom.name
      */
    var name: js.UndefOr[String] = js.native
    
    /**
      * Index of
      * [polar coordinate](https://echarts.apache.org/en/option.html#polar)
      * to combine with, which is useful for multiple polar axes in one
      * chart.
      *
      *
      * @see https://echarts.apache.org/en/option.html#series-custom.polarIndex
      */
    var polarIndex: js.UndefOr[Double] = js.native
    
    /**
      * `custom series` requires developers to write a render logic by
      * themselves. This render logic is called
      * [renderItem](https://echarts.apache.org/en/option.html#series-custom.renderItem)
      * .
      *
      * For example:
      *
      * [see doc](https://echarts.apache.org/en/option.html#series-custom.custom)
      *
      * [renderItem](https://echarts.apache.org/en/option.html#series-custom.renderItem)
      * will be called on each data item.
      *
      * [renderItem](https://echarts.apache.org/en/option.html#series-custom.renderItem)
      * provides two parameters:
      *
      * + [params](https://echarts.apache.org/en/option.html#series-custom.renderItem.arguments.params)
      * : provides info about the current series and data and coordinate
      * system.
      * + [api](https://echarts.apache.org/en/option.html#series-custom.renderItem.arguments.api)
      * : includes some methods.
      *
      * [renderItem](https://echarts.apache.org/en/option.html#series-custom.renderItem)
      * method should returns graphic elements definitions.See
      * [renderItem.return](https://echarts.apache.org/en/option.html#series-custom.renderItem.return)
      * .
      *
      * Generally, the main process of
      * [renderItem](https://echarts.apache.org/en/option.html#series-custom.renderItem)
      * is that retrieve value from data and convert them to graphic
      * elements on the current coordinate system. Two methods in
      * [renderItem.arguments.api](https://echarts.apache.org/en/option.html#series-custom.renderItem.arguments.api)
      * are always used in this procedure:
      *
      * + [api.value(...)](https://echarts.apache.org/en/option.html#series-custom.renderItem.arguments.api.value)
      * is used to retrieve value from data.
      * For example, `api.value(0)`
      * retrieve the value of the first dimension in the current data
      * item.
      * + [api.coord(...)](https://echarts.apache.org/en/option.html#series-custom.renderItem.arguments.api.coord)
      * is used to convert data to coordinate.
      * For example, `var point = api.coord([api.value(0),
      * api.value(1)])`
      * converet the data to the point on the current coordinate system.
      *
      * Sometimes
      * [api.size(...)](https://echarts.apache.org/en/option.html#series-custom.renderItem.arguments.api.size)
      * method is needed, which calculates the size on the coordinate
      * system by a given data range.
      *
      * Moreover,
      * [api.style(...)](https://echarts.apache.org/en/option.html#series-custom.renderItem.arguments.api.style)
      * method can be used to set style.
      * It provides not only the style settings specified in
      * [series.itemStyle](https://echarts.apache.org/en/option.html#series-custom.itemStyle)
      * , but also the result of visual mapping.
      * This method can also be called like `api.style({fill:
      * 'green', stroke: 'yellow'})` to override those style settings.
      *
      *
      * @see https://echarts.apache.org/en/option.html#series-custom.renderItem
      *
      * @returns
      * `renderItem` should returns graphic element definitions.
      * Each graphic element is an object. See
      * [graphic](https://echarts.apache.org/en/option.html#graphic.elements)
      * for detailed info.
      * (But width\\height\\top\\bottom is not supported here)
      *
      * If nothing should be rendered in this data item, just returns
      * nothing.
      *
      * For example:
      *
      * [see doc](https://echarts.apache.org/en/option.html#series-custom.custom.renderItem)
      * [see doc](https://echarts.apache.org/en/option.html#series-custom.custom.renderItem)
      *
      *
      * @see https://echarts.apache.org/en/option.html#series-custom.renderItem.return
      */
    var renderItem: js.UndefOr[RenderItem] = js.native
    
    /**
      * When
      * [dataset](https://echarts.apache.org/en/option.html#dataset)
      * is used, `seriesLayoutBy` specifies whether the column or the
      * row of `dataset` is mapped to the series, namely, the series
      * is "layout" on columns or rows. Optional values:
      *
      * + 'column': by default, the columns of `dataset` are mapped the
      * series. In this case, each column represents a dimension.
      * + 'row'：the rows of `dataset` are mapped to the series.
      * In this case, each row represents a dimension.
      *
      * Check this
      * [example](https://echarts.apache.org/examples/en/editor.html?c=dataset-series-layout-by)
      * .
      *
      *
      * @default
      * "column"
      * @see https://echarts.apache.org/en/option.html#series-custom.seriesLayoutBy
      */
    var seriesLayoutBy: js.UndefOr[String] = js.native
    
    /**
      * Whether to ignore mouse events.
      * Default value is false, for triggering and responding to mouse
      * events.
      *
      *
      * @see https://echarts.apache.org/en/option.html#series-custom.silent
      */
    var silent: js.UndefOr[Boolean] = js.native
    
    /**
      * tooltip settings in this series.
      *
      *
      * @see https://echarts.apache.org/en/option.html#series-custom.tooltip
      */
    var tooltip: js.UndefOr[BaseTooltip] = js.native
    
    /**
      * @default
      * "custom"
      * @see https://echarts.apache.org/en/option.html#series-custom.type
      */
    var `type`: js.UndefOr[String] = js.native
    
    /**
      * Index of
      * [x axis](https://echarts.apache.org/en/option.html#xAxis)
      * to combine with, which is useful for multiple x axes in one chart.
      *
      *
      * @see https://echarts.apache.org/en/option.html#series-custom.xAxisIndex
      */
    var xAxisIndex: js.UndefOr[Double] = js.native
    
    /**
      * Index of
      * [y axis](https://echarts.apache.org/en/option.html#yAxis)
      * to combine with, which is useful for multiple y axes in one chart.
      *
      *
      * @see https://echarts.apache.org/en/option.html#series-custom.yAxisIndex
      */
    var yAxisIndex: js.UndefOr[Double] = js.native
    
    /**
      * `z` value of all graghical elements in custom series, which controls
      * order of drawing graphical components.
      * Components with smaller `z` values may be overwritten by those
      * with larger `z` values.
      *
      * `z` has a lower priority to `zlevel`, and will not create new
      * Canvas.
      *
      *
      * @default
      * 2
      * @see https://echarts.apache.org/en/option.html#series-custom.z
      */
    var z: js.UndefOr[Double] = js.native
    
    /**
      * `zlevel` value of all graghical elements in custom series.
      *
      * `zlevel` is used to make layers with Canvas.
      * Graphical elements with different `zlevel` values will be placed
      * in different Canvases, which is a common optimization technique.
      * We can put those frequently changed elements (like those with
      * animations) to a seperate `zlevel`.
      * Notice that too many Canvases will increase memory cost, and
      * should be used carefully on mobile phones to avoid crash.
      *
      * Canvases with bigger `zlevel` will be placed on Canvases with
      * smaller `zlevel`.
      *
      *
      * @see https://echarts.apache.org/en/option.html#series-custom.zlevel
      */
    var zlevel: js.UndefOr[Double] = js.native
  }
  object SeriesCustom {
    
    @scala.inline
    def apply(): SeriesCustom = {
      val __obj = js.Dynamic.literal()
      __obj.asInstanceOf[SeriesCustom]
    }
    
    /**
      * coordSys is variable by different types of coordinate systems.
      */
    @js.native
    trait CoordSys extends StObject {
      
      /**
        * calendar cellHeight
        *
        * It is valid when type is 'calendar'
        */
      var cellHeight: js.UndefOr[Double] = js.native
      
      // calendar cellWidth
      /**
        * calendar cellWidth
        *
        * It is valid when type is 'calendar'
        */
      var cellWidth: js.UndefOr[Double] = js.native
      
      /**
        * x of polar center.
        *
        * It is valid when type is 'polar'
        */
      var cx: js.UndefOr[Double] = js.native
      
      /**
        * y of polar center.
        *
        * It is valid when type is 'polar'
        */
      var cy: js.UndefOr[Double] = js.native
      
      /**
        * height of grid rect, calendar rect, geo rect or singleAxis rect
        *
        * It is not valid when type is 'polar'
        */
      var height: js.UndefOr[Double] = js.native
      
      /**
        * outer radius of polar.
        *
        * It is valid when type is 'polar'
        */
      var r: js.UndefOr[Double] = js.native
      
      /**
        * inner radius of polar.
        *
        * It is valid when type is 'polar'
        */
      var r0: js.UndefOr[Double] = js.native
      
      /**
        * calendar rangeInfo
        *
        * It is valid when type is 'calendar'
        */
      var rangeInfo: js.UndefOr[RangeInfo] = js.native
      
      var `type`: js.UndefOr[cartesian2d | calendar | geo | polar | singleAxis] = js.native
      
      /**
        * width of grid rect, calendar rect, geo rect or singleAxis rect
        *
        * It is not valid when type is 'polar'
        */
      var width: js.UndefOr[Double] = js.native
      
      /**
        * x of grid rect, calendar rect, geo rect or singleAxis rect
        *
        * It is not valid when type is 'polar'
        */
      var x: js.UndefOr[Double] = js.native
      
      /**
        * y of grid rect, calendar rect, geo rect or singleAxis rect
        *
        * It is not valid when type is 'polar'
        */
      var y: js.UndefOr[Double] = js.native
      
      /**
        * zoom ratio, 1 if no zoom, 0.5 means shrink to 50%.
        *
        * It is valid when type is 'geo'
        */
      var zoom: js.UndefOr[Double] = js.native
    }
    object CoordSys {
      
      @scala.inline
      def apply(): CoordSys = {
        val __obj = js.Dynamic.literal()
        __obj.asInstanceOf[CoordSys]
      }
      
      @scala.inline
      implicit class CoordSysMutableBuilder[Self <: CoordSys] (val x: Self) extends AnyVal {
        
        @scala.inline
        def setCellHeight(value: Double): Self = StObject.set(x, "cellHeight", value.asInstanceOf[js.Any])
        
        @scala.inline
        def setCellHeightUndefined: Self = StObject.set(x, "cellHeight", js.undefined)
        
        @scala.inline
        def setCellWidth(value: Double): Self = StObject.set(x, "cellWidth", value.asInstanceOf[js.Any])
        
        @scala.inline
        def setCellWidthUndefined: Self = StObject.set(x, "cellWidth", js.undefined)
        
        @scala.inline
        def setCx(value: Double): Self = StObject.set(x, "cx", value.asInstanceOf[js.Any])
        
        @scala.inline
        def setCxUndefined: Self = StObject.set(x, "cx", js.undefined)
        
        @scala.inline
        def setCy(value: Double): Self = StObject.set(x, "cy", value.asInstanceOf[js.Any])
        
        @scala.inline
        def setCyUndefined: Self = StObject.set(x, "cy", js.undefined)
        
        @scala.inline
        def setHeight(value: Double): Self = StObject.set(x, "height", value.asInstanceOf[js.Any])
        
        @scala.inline
        def setHeightUndefined: Self = StObject.set(x, "height", js.undefined)
        
        @scala.inline
        def setR(value: Double): Self = StObject.set(x, "r", value.asInstanceOf[js.Any])
        
        @scala.inline
        def setR0(value: Double): Self = StObject.set(x, "r0", value.asInstanceOf[js.Any])
        
        @scala.inline
        def setR0Undefined: Self = StObject.set(x, "r0", js.undefined)
        
        @scala.inline
        def setRUndefined: Self = StObject.set(x, "r", js.undefined)
        
        @scala.inline
        def setRangeInfo(value: RangeInfo): Self = StObject.set(x, "rangeInfo", value.asInstanceOf[js.Any])
        
        @scala.inline
        def setRangeInfoUndefined: Self = StObject.set(x, "rangeInfo", js.undefined)
        
        @scala.inline
        def setType(value: cartesian2d | calendar | geo | polar | singleAxis): Self = StObject.set(x, "type", value.asInstanceOf[js.Any])
        
        @scala.inline
        def setTypeUndefined: Self = StObject.set(x, "type", js.undefined)
        
        @scala.inline
        def setWidth(value: Double): Self = StObject.set(x, "width", value.asInstanceOf[js.Any])
        
        @scala.inline
        def setWidthUndefined: Self = StObject.set(x, "width", js.undefined)
        
        @scala.inline
        def setX(value: Double): Self = StObject.set(x, "x", value.asInstanceOf[js.Any])
        
        @scala.inline
        def setXUndefined: Self = StObject.set(x, "x", js.undefined)
        
        @scala.inline
        def setY(value: Double): Self = StObject.set(x, "y", value.asInstanceOf[js.Any])
        
        @scala.inline
        def setYUndefined: Self = StObject.set(x, "y", js.undefined)
        
        @scala.inline
        def setZoom(value: Double): Self = StObject.set(x, "zoom", value.asInstanceOf[js.Any])
        
        @scala.inline
        def setZoomUndefined: Self = StObject.set(x, "zoom", js.undefined)
      }
    }
    
    @js.native
    trait DataObject extends StObject {
      
      /**
        * @see https://echarts.apache.org/en/option.html#series-custom.data.emphasis
        */
      var emphasis: js.UndefOr[`2`] = js.native
      
      /**
        * @see https://echarts.apache.org/en/option.html#series-custom.data.itemStyle
        */
      var itemStyle: js.UndefOr[BorderType] = js.native
      
      /**
        * Name of data item.
        *
        *
        * @see https://echarts.apache.org/en/option.html#series-custom.data.name
        */
      var name: js.UndefOr[String] = js.native
      
      /**
        * tooltip settings in this series data.
        *
        *
        * @see https://echarts.apache.org/en/option.html#series-custom.data.tooltip
        */
      var tooltip: js.UndefOr[BaseTooltip] = js.native
      
      /**
        * Value of data item.
        *
        *
        * @see https://echarts.apache.org/en/option.html#series-custom.data.value
        */
      var value: js.UndefOr[Double | js.Array[Double]] = js.native
    }
    object DataObject {
      
      @scala.inline
      def apply(): typingsSlinky.echarts.echarts.EChartOption.SeriesCustom.DataObject = {
        val __obj = js.Dynamic.literal()
        __obj.asInstanceOf[typingsSlinky.echarts.echarts.EChartOption.SeriesCustom.DataObject]
      }
      
      @scala.inline
      implicit class DataObjectMutableBuilder[Self <: typingsSlinky.echarts.echarts.EChartOption.SeriesCustom.DataObject] (val x: Self) extends AnyVal {
        
        @scala.inline
        def setEmphasis(value: `2`): Self = StObject.set(x, "emphasis", value.asInstanceOf[js.Any])
        
        @scala.inline
        def setEmphasisUndefined: Self = StObject.set(x, "emphasis", js.undefined)
        
        @scala.inline
        def setItemStyle(value: BorderType): Self = StObject.set(x, "itemStyle", value.asInstanceOf[js.Any])
        
        @scala.inline
        def setItemStyleUndefined: Self = StObject.set(x, "itemStyle", js.undefined)
        
        @scala.inline
        def setName(value: String): Self = StObject.set(x, "name", value.asInstanceOf[js.Any])
        
        @scala.inline
        def setNameUndefined: Self = StObject.set(x, "name", js.undefined)
        
        @scala.inline
        def setTooltip(value: BaseTooltip): Self = StObject.set(x, "tooltip", value.asInstanceOf[js.Any])
        
        @scala.inline
        def setTooltipUndefined: Self = StObject.set(x, "tooltip", js.undefined)
        
        @scala.inline
        def setValue(value: Double | js.Array[Double]): Self = StObject.set(x, "value", value.asInstanceOf[js.Any])
        
        @scala.inline
        def setValueUndefined: Self = StObject.set(x, "value", js.undefined)
        
        @scala.inline
        def setValueVarargs(value: Double*): Self = StObject.set(x, "value", js.Array(value :_*))
      }
    }
    
    /**
      * calendar rangeInfo
      */
    @js.native
    trait RangeInfo extends StObject {
      
      /**
        * day count in calendar.
        */
      var dayCount: js.UndefOr[Double] = js.native
      
      /**
        * date end of calendar.
        */
      var end: js.UndefOr[js.Any] = js.native
      
      /**
        * date start of calendar.
        */
      var start: js.UndefOr[js.Any] = js.native
      
      /**
        * number of weeks in calendar.
        */
      var weeks: js.UndefOr[Double] = js.native
    }
    object RangeInfo {
      
      @scala.inline
      def apply(): RangeInfo = {
        val __obj = js.Dynamic.literal()
        __obj.asInstanceOf[RangeInfo]
      }
      
      @scala.inline
      implicit class RangeInfoMutableBuilder[Self <: RangeInfo] (val x: Self) extends AnyVal {
        
        @scala.inline
        def setDayCount(value: Double): Self = StObject.set(x, "dayCount", value.asInstanceOf[js.Any])
        
        @scala.inline
        def setDayCountUndefined: Self = StObject.set(x, "dayCount", js.undefined)
        
        @scala.inline
        def setEnd(value: js.Any): Self = StObject.set(x, "end", value.asInstanceOf[js.Any])
        
        @scala.inline
        def setEndUndefined: Self = StObject.set(x, "end", js.undefined)
        
        @scala.inline
        def setStart(value: js.Any): Self = StObject.set(x, "start", value.asInstanceOf[js.Any])
        
        @scala.inline
        def setStartUndefined: Self = StObject.set(x, "start", js.undefined)
        
        @scala.inline
        def setWeeks(value: Double): Self = StObject.set(x, "weeks", value.asInstanceOf[js.Any])
        
        @scala.inline
        def setWeeksUndefined: Self = StObject.set(x, "weeks", js.undefined)
      }
    }
    
    /**
      * `custom series` requires developers to write a render logic by
      * themselves. This render logic is called
      * [renderItem](https://echarts.apache.org/en/option.html#series-custom.renderItem)
      * .
      *
      * For example:
      *
      * [see doc](https://echarts.apache.org/en/option.html#series-custom.custom)
      *
      * [renderItem](https://echarts.apache.org/en/option.html#series-custom.renderItem)
      * will be called on each data item.
      *
      * [renderItem](https://echarts.apache.org/en/option.html#series-custom.renderItem)
      * provides two parameters:
      *
      * + [params](https://echarts.apache.org/en/option.html#series-custom.renderItem.arguments.params)
      * : provides info about the current series and data and coordinate
      * system.
      * + [api](https://echarts.apache.org/en/option.html#series-custom.renderItem.arguments.api)
      * : includes some methods.
      *
      * [renderItem](https://echarts.apache.org/en/option.html#series-custom.renderItem)
      * method should returns graphic elements definitions.See
      * [renderItem.return](https://echarts.apache.org/en/option.html#series-custom.renderItem.return)
      * .
      *
      * Generally, the main process of
      * [renderItem](https://echarts.apache.org/en/option.html#series-custom.renderItem)
      * is that retrieve value from data and convert them to graphic
      * elements on the current coordinate system. Two methods in
      * [renderItem.arguments.api](https://echarts.apache.org/en/option.html#series-custom.renderItem.arguments.api)
      * are always used in this procedure:
      *
      * + [api.value(...)](https://echarts.apache.org/en/option.html#series-custom.renderItem.arguments.api.value)
      * is used to retrieve value from data.
      * For example, `api.value(0)`
      * retrieve the value of the first dimension in the current data
      * item.
      * + [api.coord(...)](https://echarts.apache.org/en/option.html#series-custom.renderItem.arguments.api.coord)
      * is used to convert data to coordinate.
      * For example, `var point = api.coord([api.value(0),
      * api.value(1)])`
      * converet the data to the point on the current coordinate system.
      *
      * Sometimes
      * [api.size(...)](https://echarts.apache.org/en/option.html#series-custom.renderItem.arguments.api.size)
      * method is needed, which calculates the size on the coordinate
      * system by a given data range.
      *
      * Moreover,
      * [api.style(...)](https://echarts.apache.org/en/option.html#series-custom.renderItem.arguments.api.style)
      * method can be used to set style.
      * It provides not only the style settings specified in
      * [series.itemStyle](https://echarts.apache.org/en/option.html#series-custom.itemStyle)
      * , but also the result of visual mapping.
      * This method can also be called like `api.style({fill:
      * 'green', stroke: 'yellow'})` to override those style settings.
      *
      *
      * @see https://echarts.apache.org/en/option.html#series-custom.renderItem
      */
    type RenderItem = js.Function2[
        /* params */ RenderItemParams, 
        /* api */ RenderItemApi, 
        RenderItemReturnGroup | RenderItemReturnPath | RenderItemReturnImage | RenderItemReturnText | RenderItemReturnRect | RenderItemReturnCircle | RenderItemReturnRing | RenderItemReturnSector | RenderItemReturnArc | RenderItemReturnPolygon | RenderItemReturnPolyline | RenderItemReturnLine | RenderItemReturnBezierCurve
      ]
    
    /**
      * The second parameter of `renderItem`.
      *
      *
      * @see https://echarts.apache.org/en/option.html#series-custom.renderItem.arguments.api
      */
    @js.native
    trait RenderItemApi extends StObject {
      
      /**
        * When `barLayout` is needed, (for example, when attaching
        * some extra graphic elements to bar chart), this method
        * can be used to obtain bar layout info.
        *
        * See a
        * [sample](https://echarts.apache.org/examples/en/editor.html?c=custom-bar-trend)
        * .
        *
        * [see doc](https://echarts.apache.org/en/option.html#series-custom.custom.renderItem.arguments.api)
        *
        *
        * @see https://echarts.apache.org/en/option.html#series-custom.renderItem.arguments.api.barLayout
        */
      var barLayout: js.UndefOr[js.Function] = js.native
      
      /**
        * Convert data to coordinate.
        *
        * [see doc](https://echarts.apache.org/en/option.html#series-custom.custom.renderItem.arguments.api)
        *
        *
        * @see https://echarts.apache.org/en/option.html#series-custom.renderItem.arguments.api.coord
        */
      var coord: js.UndefOr[js.Function] = js.native
      
      /**
        * Obtain the current series index.
        * Notice that the `currentSeriesIndex` is different
        * from `seriesIndex` when legend is used to filter
        * some series.
        *
        * ```
        * @return {number}
        *
        * ```
        *
        *
        * @see https://echarts.apache.org/en/option.html#series-custom.renderItem.arguments.api.currentSeriesIndices
        */
      var currentSeriesIndices: js.UndefOr[js.Function] = js.native
      
      /**
        * Obtain font string, which can be used on style setting
        * directly.
        *
        * [see doc](https://echarts.apache.org/en/option.html#series-custom.custom.renderItem.arguments.api)
        *
        *
        * @see https://echarts.apache.org/en/option.html#series-custom.renderItem.arguments.api.font
        */
      var font: js.UndefOr[js.Function] = js.native
      
      /**
        * ```
        * @return {number} The current devicePixelRatio。
        *
        * ```
        *
        *
        * @see https://echarts.apache.org/en/option.html#series-custom.renderItem.arguments.api.getDevicePixelRatio
        */
      var getDevicePixelRatio: js.UndefOr[js.Function] = js.native
      
      /**
        * ```
        * @return {number} Height of echarts container.
        *
        * ```
        *
        *
        * @see https://echarts.apache.org/en/option.html#series-custom.renderItem.arguments.api.getHeight
        */
      var getHeight: js.UndefOr[js.Function] = js.native
      
      /**
        * ```
        * @return {number} Width of echarts containter.
        *
        * ```
        *
        *
        * @see https://echarts.apache.org/en/option.html#series-custom.renderItem.arguments.api.getWidth
        */
      var getWidth: js.UndefOr[js.Function] = js.native
      
      /**
        * ```
        * @return {module:zrender} zrender instance.
        *
        * ```
        *
        *
        * @see https://echarts.apache.org/en/option.html#series-custom.renderItem.arguments.api.getZr
        */
      var getZr: js.UndefOr[js.Function] = js.native
      
      /**
        * Get the size by the given data range.
        *
        * For example, in `cartesian2d`, suppose calling `api.size([2,
        * 4])` returns `[12.4,
        * 55]`.
        * It represents that on x axis, data range `2` corresponds
        * to size `12.4`,
        * and on y axis data range `4` corresponds to size
        * `55`.
        *
        * In some coordinate systems (for example, polar) or
        * when log axis is used, the size is different in different
        * point.
        * So the second parameter is necessary to calculate
        * size on the given point.
        *
        * [see doc](https://echarts.apache.org/en/option.html#series-custom.custom.renderItem.arguments.api)
        *
        *
        * @see https://echarts.apache.org/en/option.html#series-custom.renderItem.arguments.api.size
        */
      var size: js.UndefOr[js.Function] = js.native
      
      /**
        * The method obtains style info defined in
        * [series.itemStyle](https://echarts.apache.org/en/option.html#series-custom.itemStyle)
        * , and visual info obtained by visual mapping, and
        * return them.
        * Those returned info can be assigned to `style` attribute
        * of graphic element definition directly.
        * Developers can also override style info by calling
        * this method like this: `api.style({fill:
        * 'green', stroke: 'yellow'})`.
        *
        * [see doc](https://echarts.apache.org/en/option.html#series-custom.custom.renderItem.arguments.api)
        *
        *
        * @see https://echarts.apache.org/en/option.html#series-custom.renderItem.arguments.api.style
        */
      var style: js.UndefOr[js.Function] = js.native
      
      /**
        * The method obtains style info defined in
        * [series.itemStyle.emphasis](https://echarts.apache.org/en/option.html#series-custom.itemStyle.emphasis)
        * , and visual info obtained by visual mapping, and
        * return them.
        * Those returned info can be assigned to `style` attribute
        * of graphic element definition directly.
        * Developers can also override style info by calling
        * this method like this: `api.style({fill:
        * 'green', stroke: 'yellow'})`.
        *
        * [see doc](https://echarts.apache.org/en/option.html#series-custom.custom.renderItem.arguments.api)
        *
        *
        * @see https://echarts.apache.org/en/option.html#series-custom.renderItem.arguments.api.styleEmphasis
        */
      var styleEmphasis: js.UndefOr[js.Function] = js.native
      
      /**
        * Get value on the given dimension.
        *
        * [see doc](https://echarts.apache.org/en/option.html#series-custom.custom.renderItem.arguments.api)
        *
        *
        * @see https://echarts.apache.org/en/option.html#series-custom.renderItem.arguments.api.value
        */
      var value: js.UndefOr[js.Function] = js.native
      
      /**
        * Get the visual info. It is rarely be used.
        *
        * [see doc](https://echarts.apache.org/en/option.html#series-custom.custom.renderItem.arguments.api)
        *
        *
        * @see https://echarts.apache.org/en/option.html#series-custom.renderItem.arguments.api.visual
        */
      var visual: js.UndefOr[js.Function] = js.native
    }
    object RenderItemApi {
      
      @scala.inline
      def apply(): RenderItemApi = {
        val __obj = js.Dynamic.literal()
        __obj.asInstanceOf[RenderItemApi]
      }
      
      @scala.inline
      implicit class RenderItemApiMutableBuilder[Self <: RenderItemApi] (val x: Self) extends AnyVal {
        
        @scala.inline
        def setBarLayout(value: js.Function): Self = StObject.set(x, "barLayout", value.asInstanceOf[js.Any])
        
        @scala.inline
        def setBarLayoutUndefined: Self = StObject.set(x, "barLayout", js.undefined)
        
        @scala.inline
        def setCoord(value: js.Function): Self = StObject.set(x, "coord", value.asInstanceOf[js.Any])
        
        @scala.inline
        def setCoordUndefined: Self = StObject.set(x, "coord", js.undefined)
        
        @scala.inline
        def setCurrentSeriesIndices(value: js.Function): Self = StObject.set(x, "currentSeriesIndices", value.asInstanceOf[js.Any])
        
        @scala.inline
        def setCurrentSeriesIndicesUndefined: Self = StObject.set(x, "currentSeriesIndices", js.undefined)
        
        @scala.inline
        def setFont(value: js.Function): Self = StObject.set(x, "font", value.asInstanceOf[js.Any])
        
        @scala.inline
        def setFontUndefined: Self = StObject.set(x, "font", js.undefined)
        
        @scala.inline
        def setGetDevicePixelRatio(value: js.Function): Self = StObject.set(x, "getDevicePixelRatio", value.asInstanceOf[js.Any])
        
        @scala.inline
        def setGetDevicePixelRatioUndefined: Self = StObject.set(x, "getDevicePixelRatio", js.undefined)
        
        @scala.inline
        def setGetHeight(value: js.Function): Self = StObject.set(x, "getHeight", value.asInstanceOf[js.Any])
        
        @scala.inline
        def setGetHeightUndefined: Self = StObject.set(x, "getHeight", js.undefined)
        
        @scala.inline
        def setGetWidth(value: js.Function): Self = StObject.set(x, "getWidth", value.asInstanceOf[js.Any])
        
        @scala.inline
        def setGetWidthUndefined: Self = StObject.set(x, "getWidth", js.undefined)
        
        @scala.inline
        def setGetZr(value: js.Function): Self = StObject.set(x, "getZr", value.asInstanceOf[js.Any])
        
        @scala.inline
        def setGetZrUndefined: Self = StObject.set(x, "getZr", js.undefined)
        
        @scala.inline
        def setSize(value: js.Function): Self = StObject.set(x, "size", value.asInstanceOf[js.Any])
        
        @scala.inline
        def setSizeUndefined: Self = StObject.set(x, "size", js.undefined)
        
        @scala.inline
        def setStyle(value: js.Function): Self = StObject.set(x, "style", value.asInstanceOf[js.Any])
        
        @scala.inline
        def setStyleEmphasis(value: js.Function): Self = StObject.set(x, "styleEmphasis", value.asInstanceOf[js.Any])
        
        @scala.inline
        def setStyleEmphasisUndefined: Self = StObject.set(x, "styleEmphasis", js.undefined)
        
        @scala.inline
        def setStyleUndefined: Self = StObject.set(x, "style", js.undefined)
        
        @scala.inline
        def setValue(value: js.Function): Self = StObject.set(x, "value", value.asInstanceOf[js.Any])
        
        @scala.inline
        def setValueUndefined: Self = StObject.set(x, "value", js.undefined)
        
        @scala.inline
        def setVisual(value: js.Function): Self = StObject.set(x, "visual", value.asInstanceOf[js.Any])
        
        @scala.inline
        def setVisualUndefined: Self = StObject.set(x, "visual", js.undefined)
      }
    }
    
    /**
      * The first parameter of `renderItem`, including:
      *
      * [see doc](https://echarts.apache.org/en/option.html#series-custom.custom.renderItem.arguments)
      *
      * Difference between `dataIndex` and `dataIndexInside`:
      *
      * + `dataIndex` is the index of a `dataItem` in the original
      * data.
      * + `dataIndexInside` is the index of a `dataItem` in the
      * current data window (see
      * [dataZoom](https://echarts.apache.org/en/option.html#dataZoom)
      * .
      *
      * [renderItem.arguments.api](https://echarts.apache.org/en/option.html#series-custom.renderItem.arguments.api)
      * uses `dataIndexInside` as the input parameter but not
      * `dataIndex`, because conversion from `dataIndex` to `dataIndexInside`
      * is time-consuming.
      *
      *
      * @see https://echarts.apache.org/en/option.html#series-custom.renderItem.arguments.params
      */
    @js.native
    trait RenderItemParams extends StObject {
      
      /**
        * The type of action that trigger this render.
        */
      var actionType: js.UndefOr[String] = js.native
      
      /**
        * An object that developers can store something temporarily here. Life cycle: current round of rendering.
        */
      var context: js.UndefOr[String] = js.native
      
      /**
        * coordSys is variable by different types of coordinate systems.
        */
      var coordSys: js.UndefOr[CoordSys] = js.native
      
      /**
        * The index of this data item.
        */
      var dataIndex: js.UndefOr[Double] = js.native
      
      /**
        * The index of this data item in the current data window (see dataZoom).
        */
      var dataIndexInside: js.UndefOr[Double] = js.native
      
      /**
        * The count of data in the current data window (see dataZoom).
        */
      var dataInsideLength: js.UndefOr[Double] = js.native
      
      /**
        * The id of this series.
        */
      var seriesId: js.UndefOr[String] = js.native
      
      /**
        * The index of this series.
        */
      var seriesIndex: js.UndefOr[Double] = js.native
      
      /**
        * The name of this series.
        */
      var seriesName: js.UndefOr[String] = js.native
    }
    object RenderItemParams {
      
      @scala.inline
      def apply(): RenderItemParams = {
        val __obj = js.Dynamic.literal()
        __obj.asInstanceOf[RenderItemParams]
      }
      
      @scala.inline
      implicit class RenderItemParamsMutableBuilder[Self <: RenderItemParams] (val x: Self) extends AnyVal {
        
        @scala.inline
        def setActionType(value: String): Self = StObject.set(x, "actionType", value.asInstanceOf[js.Any])
        
        @scala.inline
        def setActionTypeUndefined: Self = StObject.set(x, "actionType", js.undefined)
        
        @scala.inline
        def setContext(value: String): Self = StObject.set(x, "context", value.asInstanceOf[js.Any])
        
        @scala.inline
        def setContextUndefined: Self = StObject.set(x, "context", js.undefined)
        
        @scala.inline
        def setCoordSys(value: CoordSys): Self = StObject.set(x, "coordSys", value.asInstanceOf[js.Any])
        
        @scala.inline
        def setCoordSysUndefined: Self = StObject.set(x, "coordSys", js.undefined)
        
        @scala.inline
        def setDataIndex(value: Double): Self = StObject.set(x, "dataIndex", value.asInstanceOf[js.Any])
        
        @scala.inline
        def setDataIndexInside(value: Double): Self = StObject.set(x, "dataIndexInside", value.asInstanceOf[js.Any])
        
        @scala.inline
        def setDataIndexInsideUndefined: Self = StObject.set(x, "dataIndexInside", js.undefined)
        
        @scala.inline
        def setDataIndexUndefined: Self = StObject.set(x, "dataIndex", js.undefined)
        
        @scala.inline
        def setDataInsideLength(value: Double): Self = StObject.set(x, "dataInsideLength", value.asInstanceOf[js.Any])
        
        @scala.inline
        def setDataInsideLengthUndefined: Self = StObject.set(x, "dataInsideLength", js.undefined)
        
        @scala.inline
        def setSeriesId(value: String): Self = StObject.set(x, "seriesId", value.asInstanceOf[js.Any])
        
        @scala.inline
        def setSeriesIdUndefined: Self = StObject.set(x, "seriesId", js.undefined)
        
        @scala.inline
        def setSeriesIndex(value: Double): Self = StObject.set(x, "seriesIndex", value.asInstanceOf[js.Any])
        
        @scala.inline
        def setSeriesIndexUndefined: Self = StObject.set(x, "seriesIndex", js.undefined)
        
        @scala.inline
        def setSeriesName(value: String): Self = StObject.set(x, "seriesName", value.asInstanceOf[js.Any])
        
        @scala.inline
        def setSeriesNameUndefined: Self = StObject.set(x, "seriesName", js.undefined)
      }
    }
    
    /**
      * Arc element.
      *
      *
      * @see https://echarts.apache.org/en/option.html#series-custom.renderItem.return_arc
      */
    @js.native
    trait RenderItemReturnArc extends StObject {
      
      /**
        * id is used to specifying element when willing to update
        * it. id can be ignored if you do not need it.
        *
        *
        * @default
        * "undefined"
        * @see https://echarts.apache.org/en/option.html#series-custom.renderItem.return_arc.id
        */
      var id: js.UndefOr[String] = js.native
      
      /**
        * Whether the element is totally ignored (neither render
        * nor listen events).
        *
        *
        * @see https://echarts.apache.org/en/option.html#series-custom.renderItem.return_arc.ignore
        */
      var ignore: js.UndefOr[Boolean] = js.native
      
      /**
        * User defined data, can be visited in event listeners.
        *
        * [see doc](https://echarts.apache.org/en/option.html#series-custom.custom.renderItem.return_arc)
        *
        *
        * @see https://echarts.apache.org/en/option.html#series-custom.renderItem.return_arc.info
        */
      var info: js.UndefOr[js.Any] = js.native
      
      /**
        * Whether the element is visible.
        *
        *
        * @see https://echarts.apache.org/en/option.html#series-custom.renderItem.return_arc.invisible
        */
      var invisible: js.UndefOr[Boolean] = js.native
      
      /**
        * See
        * [diffChildrenByName](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_polygon.diffChildrenByName)
        * 。
        *
        *
        * @default
        * "undefined"
        * @see https://echarts.apache.org/en/option.html#series-custom.renderItem.return_arc.name
        */
      var name: js.UndefOr[String] = js.native
      
      /**
        * `2D transform` can be applied to graphic elements, including:
        *
        * + [position](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_polygon.position)
        * : `[horizontal translate offset, vertical translate offset]`,
        * `[0, 0]` by default.
        * Positive value means translate towards right or bottom.
        * + [rotation](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_polygon.rotation)
        * : Rotation in radian, `0` by default.
        * Positive when anticlockwise.
        * + [scale](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_polygon.scale)
        * : `[horizontal scale factor, vertical scale factor]`,
        * `[1, 1]` by default.
        *
        * [origin](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_polygon.origin)
        * specifies the origin point of rotation and scaling, `[0,
        * 0]` by default.
        *
        * Notice:
        *
        * + The coordinates specified in the transform attribute
        * above are relative to the `[0, 0]` of the parent element
        * (that is,
        * [group](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_group)
        * or the root canvas). Thus we are able to
        * [group](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_group)
        * multiple elements, and
        * [groups](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_group)
        * can be nested.
        * + The order that the transform attributes are applied
        * to a single graphic element is: Firstly, `rotation`,
        * then, `scale`, finally, `position`.
        *
        *
        * @default
        * [0, 0]
        * @see https://echarts.apache.org/en/option.html#series-custom.renderItem.return_arc.origin
        */
      var origin: js.UndefOr[Double] = js.native
      
      /**
        * `2D transform` can be applied to graphic elements, including:
        *
        * + [position](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_polygon.position)
        * : `[horizontal translate offset, vertical translate offset]`,
        * `[0, 0]` by default.
        * Positive value means translate towards right or bottom.
        * + [rotation](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_polygon.rotation)
        * : Rotation in radian, `0` by default.
        * Positive when anticlockwise.
        * + [scale](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_polygon.scale)
        * : `[horizontal scale factor, vertical scale factor]`,
        * `[1, 1]` by default.
        *
        * [origin](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_polygon.origin)
        * specifies the origin point of rotation and scaling, `[0,
        * 0]` by default.
        *
        * Notice:
        *
        * + The coordinates specified in the transform attribute
        * above are relative to the `[0, 0]` of the parent element
        * (that is,
        * [group](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_group)
        * or the root canvas). Thus we are able to
        * [group](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_group)
        * multiple elements, and
        * [groups](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_group)
        * can be nested.
        * + The order that the transform attributes are applied
        * to a single graphic element is: Firstly, `rotation`,
        * then, `scale`, finally, `position`.
        *
        *
        * @default
        * [0, 0]
        * @see https://echarts.apache.org/en/option.html#series-custom.renderItem.return_arc.position
        */
      var position: js.UndefOr[js.Array[_]] = js.native
      
      /**
        * `2D transform` can be applied to graphic elements, including:
        *
        * + [position](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_polygon.position)
        * : `[horizontal translate offset, vertical translate offset]`,
        * `[0, 0]` by default.
        * Positive value means translate towards right or bottom.
        * + [rotation](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_polygon.rotation)
        * : Rotation in radian, `0` by default.
        * Positive when anticlockwise.
        * + [scale](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_polygon.scale)
        * : `[horizontal scale factor, vertical scale factor]`,
        * `[1, 1]` by default.
        *
        * [origin](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_polygon.origin)
        * specifies the origin point of rotation and scaling, `[0,
        * 0]` by default.
        *
        * Notice:
        *
        * + The coordinates specified in the transform attribute
        * above are relative to the `[0, 0]` of the parent element
        * (that is,
        * [group](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_group)
        * or the root canvas). Thus we are able to
        * [group](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_group)
        * multiple elements, and
        * [groups](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_group)
        * can be nested.
        * + The order that the transform attributes are applied
        * to a single graphic element is: Firstly, `rotation`,
        * then, `scale`, finally, `position`.
        *
        *
        * @see https://echarts.apache.org/en/option.html#series-custom.renderItem.return_arc.rotation
        */
      var rotation: js.UndefOr[Double] = js.native
      
      /**
        * `2D transform` can be applied to graphic elements, including:
        *
        * + [position](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_polygon.position)
        * : `[horizontal translate offset, vertical translate offset]`,
        * `[0, 0]` by default.
        * Positive value means translate towards right or bottom.
        * + [rotation](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_polygon.rotation)
        * : Rotation in radian, `0` by default.
        * Positive when anticlockwise.
        * + [scale](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_polygon.scale)
        * : `[horizontal scale factor, vertical scale factor]`,
        * `[1, 1]` by default.
        *
        * [origin](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_polygon.origin)
        * specifies the origin point of rotation and scaling, `[0,
        * 0]` by default.
        *
        * Notice:
        *
        * + The coordinates specified in the transform attribute
        * above are relative to the `[0, 0]` of the parent element
        * (that is,
        * [group](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_group)
        * or the root canvas). Thus we are able to
        * [group](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_group)
        * multiple elements, and
        * [groups](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_group)
        * can be nested.
        * + The order that the transform attributes are applied
        * to a single graphic element is: Firstly, `rotation`,
        * then, `scale`, finally, `position`.
        *
        *
        * @default
        * [1, 1]
        * @see https://echarts.apache.org/en/option.html#series-custom.renderItem.return_arc.scale
        */
      var scale: js.UndefOr[js.Array[_]] = js.native
      
      /**
        * @see https://echarts.apache.org/en/option.html#series-custom.renderItem.return_arc.shape
        */
      var shape: js.UndefOr[Clockwise] = js.native
      
      /**
        * Whether response to mouse events / touch events.
        *
        *
        * @see https://echarts.apache.org/en/option.html#series-custom.renderItem.return_arc.silent
        */
      var silent: js.UndefOr[Boolean] = js.native
      
      /**
        * More attributes in `style` (for example,
        * [rich text](https://echarts.apache.org/en/tutorial.html#Rich%20Text)
        * ), see the `style` related attributes in
        * [zrender/graphic/Displayable](https://ecomfe.github.io/zrender-doc/public/api.html#zrenderdisplayable)
        * .
        *
        * Notice, the attribute names of the `style` of graphic
        * elements is derived from `zrender`, which may be different
        * from the attribute names in `echarts label`, `echarts
        * itemStyle`, etc.,
        * although they have the same meaning. For example:
        *
        * + [itemStyle.color](https://echarts.apache.org/en/option.html#series-scatter.label.color)
        * => `style.fill`
        * + [itemStyle.borderColor](https://echarts.apache.org/en/option.html#series-scatter.label.color)
        * => `style.stroke`
        * + [label.color](https://echarts.apache.org/en/option.html#series-scatter.label.color)
        * => `style.textFill`
        * + [label.textBorderColor](https://echarts.apache.org/en/option.html#series-scatter.label.textBorderColor)
        * => `style.textStroke`
        * + ...
        *
        *
        * @see https://echarts.apache.org/en/option.html#series-custom.renderItem.return_arc.style
        */
      var style: js.UndefOr[Fill] = js.native
      
      /**
        * Empahsis style of the graphic element, whose structure
        * is the same as
        * [style](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_polygon.style)
        * .
        *
        *
        * @see https://echarts.apache.org/en/option.html#series-custom.renderItem.return_arc.styleEmphasis
        */
      var styleEmphasis: js.UndefOr[js.Object] = js.native
      
      /**
        * Must be specified when define a graphic element at the
        * first time.
        *
        * Optional values:
        *
        * [image](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_image)
        * ,
        * [text](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_text)
        * ,
        * [circle](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_circle)
        * ,
        * [sector](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_sector)
        * ,
        * [ring](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_ring)
        * ,
        * [polygon](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_polygon)
        * ,
        * [polyline](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_polyline)
        * ,
        * [rect](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_rect)
        * ,
        * [line](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_line)
        * ,
        * [bezierCurve](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_bezierCurve)
        * ,
        * [arc](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_arc)
        * ,
        * [group](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_group)
        * ,
        *
        *
        * @default
        * "arc"
        * @see https://echarts.apache.org/en/option.html#series-custom.renderItem.return_arc.type
        */
      var `type`: js.UndefOr[String] = js.native
      
      /**
        * Define the overlap relationship between graphic elements.
        *
        *
        * @default
        * "undefined"
        * @see https://echarts.apache.org/en/option.html#series-custom.renderItem.return_arc.z2
        */
      var z2: js.UndefOr[Double] = js.native
    }
    object RenderItemReturnArc {
      
      @scala.inline
      def apply(): RenderItemReturnArc = {
        val __obj = js.Dynamic.literal()
        __obj.asInstanceOf[RenderItemReturnArc]
      }
      
      @scala.inline
      implicit class RenderItemReturnArcMutableBuilder[Self <: RenderItemReturnArc] (val x: Self) extends AnyVal {
        
        @scala.inline
        def setId(value: String): Self = StObject.set(x, "id", value.asInstanceOf[js.Any])
        
        @scala.inline
        def setIdUndefined: Self = StObject.set(x, "id", js.undefined)
        
        @scala.inline
        def setIgnore(value: Boolean): Self = StObject.set(x, "ignore", value.asInstanceOf[js.Any])
        
        @scala.inline
        def setIgnoreUndefined: Self = StObject.set(x, "ignore", js.undefined)
        
        @scala.inline
        def setInfo(value: js.Any): Self = StObject.set(x, "info", value.asInstanceOf[js.Any])
        
        @scala.inline
        def setInfoUndefined: Self = StObject.set(x, "info", js.undefined)
        
        @scala.inline
        def setInvisible(value: Boolean): Self = StObject.set(x, "invisible", value.asInstanceOf[js.Any])
        
        @scala.inline
        def setInvisibleUndefined: Self = StObject.set(x, "invisible", js.undefined)
        
        @scala.inline
        def setName(value: String): Self = StObject.set(x, "name", value.asInstanceOf[js.Any])
        
        @scala.inline
        def setNameUndefined: Self = StObject.set(x, "name", js.undefined)
        
        @scala.inline
        def setOrigin(value: Double): Self = StObject.set(x, "origin", value.asInstanceOf[js.Any])
        
        @scala.inline
        def setOriginUndefined: Self = StObject.set(x, "origin", js.undefined)
        
        @scala.inline
        def setPosition(value: js.Array[_]): Self = StObject.set(x, "position", value.asInstanceOf[js.Any])
        
        @scala.inline
        def setPositionUndefined: Self = StObject.set(x, "position", js.undefined)
        
        @scala.inline
        def setPositionVarargs(value: js.Any*): Self = StObject.set(x, "position", js.Array(value :_*))
        
        @scala.inline
        def setRotation(value: Double): Self = StObject.set(x, "rotation", value.asInstanceOf[js.Any])
        
        @scala.inline
        def setRotationUndefined: Self = StObject.set(x, "rotation", js.undefined)
        
        @scala.inline
        def setScale(value: js.Array[_]): Self = StObject.set(x, "scale", value.asInstanceOf[js.Any])
        
        @scala.inline
        def setScaleUndefined: Self = StObject.set(x, "scale", js.undefined)
        
        @scala.inline
        def setScaleVarargs(value: js.Any*): Self = StObject.set(x, "scale", js.Array(value :_*))
        
        @scala.inline
        def setShape(value: Clockwise): Self = StObject.set(x, "shape", value.asInstanceOf[js.Any])
        
        @scala.inline
        def setShapeUndefined: Self = StObject.set(x, "shape", js.undefined)
        
        @scala.inline
        def setSilent(value: Boolean): Self = StObject.set(x, "silent", value.asInstanceOf[js.Any])
        
        @scala.inline
        def setSilentUndefined: Self = StObject.set(x, "silent", js.undefined)
        
        @scala.inline
        def setStyle(value: Fill): Self = StObject.set(x, "style", value.asInstanceOf[js.Any])
        
        @scala.inline
        def setStyleEmphasis(value: js.Object): Self = StObject.set(x, "styleEmphasis", value.asInstanceOf[js.Any])
        
        @scala.inline
        def setStyleEmphasisUndefined: Self = StObject.set(x, "styleEmphasis", js.undefined)
        
        @scala.inline
        def setStyleUndefined: Self = StObject.set(x, "style", js.undefined)
        
        @scala.inline
        def setType(value: String): Self = StObject.set(x, "type", value.asInstanceOf[js.Any])
        
        @scala.inline
        def setTypeUndefined: Self = StObject.set(x, "type", js.undefined)
        
        @scala.inline
        def setZ2(value: Double): Self = StObject.set(x, "z2", value.asInstanceOf[js.Any])
        
        @scala.inline
        def setZ2Undefined: Self = StObject.set(x, "z2", js.undefined)
      }
    }
    
    /**
      * Quadratic bezier curve or cubic bezier curve.
      *
      *
      * @see https://echarts.apache.org/en/option.html#series-custom.renderItem.return_bezierCurve
      */
    @js.native
    trait RenderItemReturnBezierCurve extends StObject {
      
      /**
        * id is used to specifying element when willing to update
        * it. id can be ignored if you do not need it.
        *
        *
        * @default
        * "undefined"
        * @see https://echarts.apache.org/en/option.html#series-custom.renderItem.return_bezierCurve.id
        */
      var id: js.UndefOr[String] = js.native
      
      /**
        * Whether the element is totally ignored (neither render
        * nor listen events).
        *
        *
        * @see https://echarts.apache.org/en/option.html#series-custom.renderItem.return_bezierCurve.ignore
        */
      var ignore: js.UndefOr[Boolean] = js.native
      
      /**
        * User defined data, can be visited in event listeners.
        *
        * [see doc](https://echarts.apache.org/en/option.html#series-custom.custom.renderItem.return_bezierCurve)
        *
        *
        * @see https://echarts.apache.org/en/option.html#series-custom.renderItem.return_bezierCurve.info
        */
      var info: js.UndefOr[js.Any] = js.native
      
      /**
        * Whether the element is visible.
        *
        *
        * @see https://echarts.apache.org/en/option.html#series-custom.renderItem.return_bezierCurve.invisible
        */
      var invisible: js.UndefOr[Boolean] = js.native
      
      /**
        * See
        * [diffChildrenByName](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_polygon.diffChildrenByName)
        * 。
        *
        *
        * @default
        * "undefined"
        * @see https://echarts.apache.org/en/option.html#series-custom.renderItem.return_bezierCurve.name
        */
      var name: js.UndefOr[String] = js.native
      
      /**
        * `2D transform` can be applied to graphic elements, including:
        *
        * + [position](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_polygon.position)
        * : `[horizontal translate offset, vertical translate offset]`,
        * `[0, 0]` by default.
        * Positive value means translate towards right or bottom.
        * + [rotation](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_polygon.rotation)
        * : Rotation in radian, `0` by default.
        * Positive when anticlockwise.
        * + [scale](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_polygon.scale)
        * : `[horizontal scale factor, vertical scale factor]`,
        * `[1, 1]` by default.
        *
        * [origin](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_polygon.origin)
        * specifies the origin point of rotation and scaling, `[0,
        * 0]` by default.
        *
        * Notice:
        *
        * + The coordinates specified in the transform attribute
        * above are relative to the `[0, 0]` of the parent element
        * (that is,
        * [group](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_group)
        * or the root canvas). Thus we are able to
        * [group](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_group)
        * multiple elements, and
        * [groups](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_group)
        * can be nested.
        * + The order that the transform attributes are applied
        * to a single graphic element is: Firstly, `rotation`,
        * then, `scale`, finally, `position`.
        *
        *
        * @default
        * [0, 0]
        * @see https://echarts.apache.org/en/option.html#series-custom.renderItem.return_bezierCurve.origin
        */
      var origin: js.UndefOr[Double] = js.native
      
      /**
        * `2D transform` can be applied to graphic elements, including:
        *
        * + [position](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_polygon.position)
        * : `[horizontal translate offset, vertical translate offset]`,
        * `[0, 0]` by default.
        * Positive value means translate towards right or bottom.
        * + [rotation](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_polygon.rotation)
        * : Rotation in radian, `0` by default.
        * Positive when anticlockwise.
        * + [scale](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_polygon.scale)
        * : `[horizontal scale factor, vertical scale factor]`,
        * `[1, 1]` by default.
        *
        * [origin](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_polygon.origin)
        * specifies the origin point of rotation and scaling, `[0,
        * 0]` by default.
        *
        * Notice:
        *
        * + The coordinates specified in the transform attribute
        * above are relative to the `[0, 0]` of the parent element
        * (that is,
        * [group](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_group)
        * or the root canvas). Thus we are able to
        * [group](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_group)
        * multiple elements, and
        * [groups](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_group)
        * can be nested.
        * + The order that the transform attributes are applied
        * to a single graphic element is: Firstly, `rotation`,
        * then, `scale`, finally, `position`.
        *
        *
        * @default
        * [0, 0]
        * @see https://echarts.apache.org/en/option.html#series-custom.renderItem.return_bezierCurve.position
        */
      var position: js.UndefOr[js.Array[_]] = js.native
      
      /**
        * `2D transform` can be applied to graphic elements, including:
        *
        * + [position](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_polygon.position)
        * : `[horizontal translate offset, vertical translate offset]`,
        * `[0, 0]` by default.
        * Positive value means translate towards right or bottom.
        * + [rotation](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_polygon.rotation)
        * : Rotation in radian, `0` by default.
        * Positive when anticlockwise.
        * + [scale](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_polygon.scale)
        * : `[horizontal scale factor, vertical scale factor]`,
        * `[1, 1]` by default.
        *
        * [origin](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_polygon.origin)
        * specifies the origin point of rotation and scaling, `[0,
        * 0]` by default.
        *
        * Notice:
        *
        * + The coordinates specified in the transform attribute
        * above are relative to the `[0, 0]` of the parent element
        * (that is,
        * [group](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_group)
        * or the root canvas). Thus we are able to
        * [group](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_group)
        * multiple elements, and
        * [groups](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_group)
        * can be nested.
        * + The order that the transform attributes are applied
        * to a single graphic element is: Firstly, `rotation`,
        * then, `scale`, finally, `position`.
        *
        *
        * @see https://echarts.apache.org/en/option.html#series-custom.renderItem.return_bezierCurve.rotation
        */
      var rotation: js.UndefOr[Double] = js.native
      
      /**
        * `2D transform` can be applied to graphic elements, including:
        *
        * + [position](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_polygon.position)
        * : `[horizontal translate offset, vertical translate offset]`,
        * `[0, 0]` by default.
        * Positive value means translate towards right or bottom.
        * + [rotation](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_polygon.rotation)
        * : Rotation in radian, `0` by default.
        * Positive when anticlockwise.
        * + [scale](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_polygon.scale)
        * : `[horizontal scale factor, vertical scale factor]`,
        * `[1, 1]` by default.
        *
        * [origin](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_polygon.origin)
        * specifies the origin point of rotation and scaling, `[0,
        * 0]` by default.
        *
        * Notice:
        *
        * + The coordinates specified in the transform attribute
        * above are relative to the `[0, 0]` of the parent element
        * (that is,
        * [group](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_group)
        * or the root canvas). Thus we are able to
        * [group](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_group)
        * multiple elements, and
        * [groups](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_group)
        * can be nested.
        * + The order that the transform attributes are applied
        * to a single graphic element is: Firstly, `rotation`,
        * then, `scale`, finally, `position`.
        *
        *
        * @default
        * [1, 1]
        * @see https://echarts.apache.org/en/option.html#series-custom.renderItem.return_bezierCurve.scale
        */
      var scale: js.UndefOr[js.Array[_]] = js.native
      
      /**
        * @see https://echarts.apache.org/en/option.html#series-custom.renderItem.return_bezierCurve.shape
        */
      var shape: js.UndefOr[Cpx1] = js.native
      
      /**
        * Whether response to mouse events / touch events.
        *
        *
        * @see https://echarts.apache.org/en/option.html#series-custom.renderItem.return_bezierCurve.silent
        */
      var silent: js.UndefOr[Boolean] = js.native
      
      /**
        * More attributes in `style` (for example,
        * [rich text](https://echarts.apache.org/en/tutorial.html#Rich%20Text)
        * ), see the `style` related attributes in
        * [zrender/graphic/Displayable](https://ecomfe.github.io/zrender-doc/public/api.html#zrenderdisplayable)
        * .
        *
        * Notice, the attribute names of the `style` of graphic
        * elements is derived from `zrender`, which may be different
        * from the attribute names in `echarts label`, `echarts
        * itemStyle`, etc.,
        * although they have the same meaning. For example:
        *
        * + [itemStyle.color](https://echarts.apache.org/en/option.html#series-scatter.label.color)
        * => `style.fill`
        * + [itemStyle.borderColor](https://echarts.apache.org/en/option.html#series-scatter.label.color)
        * => `style.stroke`
        * + [label.color](https://echarts.apache.org/en/option.html#series-scatter.label.color)
        * => `style.textFill`
        * + [label.textBorderColor](https://echarts.apache.org/en/option.html#series-scatter.label.textBorderColor)
        * => `style.textStroke`
        * + ...
        *
        *
        * @see https://echarts.apache.org/en/option.html#series-custom.renderItem.return_bezierCurve.style
        */
      var style: js.UndefOr[Fill] = js.native
      
      /**
        * Empahsis style of the graphic element, whose structure
        * is the same as
        * [style](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_polygon.style)
        * .
        *
        *
        * @see https://echarts.apache.org/en/option.html#series-custom.renderItem.return_bezierCurve.styleEmphasis
        */
      var styleEmphasis: js.UndefOr[js.Object] = js.native
      
      /**
        * Must be specified when define a graphic element at the
        * first time.
        *
        * Optional values:
        *
        * [image](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_image)
        * ,
        * [text](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_text)
        * ,
        * [circle](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_circle)
        * ,
        * [sector](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_sector)
        * ,
        * [ring](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_ring)
        * ,
        * [polygon](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_polygon)
        * ,
        * [polyline](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_polyline)
        * ,
        * [rect](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_rect)
        * ,
        * [line](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_line)
        * ,
        * [bezierCurve](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_bezierCurve)
        * ,
        * [arc](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_arc)
        * ,
        * [group](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_group)
        * ,
        *
        *
        * @default
        * "bezierCurve"
        * @see https://echarts.apache.org/en/option.html#series-custom.renderItem.return_bezierCurve.type
        */
      var `type`: js.UndefOr[String] = js.native
      
      /**
        * Define the overlap relationship between graphic elements.
        *
        *
        * @default
        * "undefined"
        * @see https://echarts.apache.org/en/option.html#series-custom.renderItem.return_bezierCurve.z2
        */
      var z2: js.UndefOr[Double] = js.native
    }
    object RenderItemReturnBezierCurve {
      
      @scala.inline
      def apply(): RenderItemReturnBezierCurve = {
        val __obj = js.Dynamic.literal()
        __obj.asInstanceOf[RenderItemReturnBezierCurve]
      }
      
      @scala.inline
      implicit class RenderItemReturnBezierCurveMutableBuilder[Self <: RenderItemReturnBezierCurve] (val x: Self) extends AnyVal {
        
        @scala.inline
        def setId(value: String): Self = StObject.set(x, "id", value.asInstanceOf[js.Any])
        
        @scala.inline
        def setIdUndefined: Self = StObject.set(x, "id", js.undefined)
        
        @scala.inline
        def setIgnore(value: Boolean): Self = StObject.set(x, "ignore", value.asInstanceOf[js.Any])
        
        @scala.inline
        def setIgnoreUndefined: Self = StObject.set(x, "ignore", js.undefined)
        
        @scala.inline
        def setInfo(value: js.Any): Self = StObject.set(x, "info", value.asInstanceOf[js.Any])
        
        @scala.inline
        def setInfoUndefined: Self = StObject.set(x, "info", js.undefined)
        
        @scala.inline
        def setInvisible(value: Boolean): Self = StObject.set(x, "invisible", value.asInstanceOf[js.Any])
        
        @scala.inline
        def setInvisibleUndefined: Self = StObject.set(x, "invisible", js.undefined)
        
        @scala.inline
        def setName(value: String): Self = StObject.set(x, "name", value.asInstanceOf[js.Any])
        
        @scala.inline
        def setNameUndefined: Self = StObject.set(x, "name", js.undefined)
        
        @scala.inline
        def setOrigin(value: Double): Self = StObject.set(x, "origin", value.asInstanceOf[js.Any])
        
        @scala.inline
        def setOriginUndefined: Self = StObject.set(x, "origin", js.undefined)
        
        @scala.inline
        def setPosition(value: js.Array[_]): Self = StObject.set(x, "position", value.asInstanceOf[js.Any])
        
        @scala.inline
        def setPositionUndefined: Self = StObject.set(x, "position", js.undefined)
        
        @scala.inline
        def setPositionVarargs(value: js.Any*): Self = StObject.set(x, "position", js.Array(value :_*))
        
        @scala.inline
        def setRotation(value: Double): Self = StObject.set(x, "rotation", value.asInstanceOf[js.Any])
        
        @scala.inline
        def setRotationUndefined: Self = StObject.set(x, "rotation", js.undefined)
        
        @scala.inline
        def setScale(value: js.Array[_]): Self = StObject.set(x, "scale", value.asInstanceOf[js.Any])
        
        @scala.inline
        def setScaleUndefined: Self = StObject.set(x, "scale", js.undefined)
        
        @scala.inline
        def setScaleVarargs(value: js.Any*): Self = StObject.set(x, "scale", js.Array(value :_*))
        
        @scala.inline
        def setShape(value: Cpx1): Self = StObject.set(x, "shape", value.asInstanceOf[js.Any])
        
        @scala.inline
        def setShapeUndefined: Self = StObject.set(x, "shape", js.undefined)
        
        @scala.inline
        def setSilent(value: Boolean): Self = StObject.set(x, "silent", value.asInstanceOf[js.Any])
        
        @scala.inline
        def setSilentUndefined: Self = StObject.set(x, "silent", js.undefined)
        
        @scala.inline
        def setStyle(value: Fill): Self = StObject.set(x, "style", value.asInstanceOf[js.Any])
        
        @scala.inline
        def setStyleEmphasis(value: js.Object): Self = StObject.set(x, "styleEmphasis", value.asInstanceOf[js.Any])
        
        @scala.inline
        def setStyleEmphasisUndefined: Self = StObject.set(x, "styleEmphasis", js.undefined)
        
        @scala.inline
        def setStyleUndefined: Self = StObject.set(x, "style", js.undefined)
        
        @scala.inline
        def setType(value: String): Self = StObject.set(x, "type", value.asInstanceOf[js.Any])
        
        @scala.inline
        def setTypeUndefined: Self = StObject.set(x, "type", js.undefined)
        
        @scala.inline
        def setZ2(value: Double): Self = StObject.set(x, "z2", value.asInstanceOf[js.Any])
        
        @scala.inline
        def setZ2Undefined: Self = StObject.set(x, "z2", js.undefined)
      }
    }
    
    /**
      * Circle element.
      *
      *
      * @see https://echarts.apache.org/en/option.html#series-custom.renderItem.return_circle
      */
    @js.native
    trait RenderItemReturnCircle extends StObject {
      
      /**
        * id is used to specifying element when willing to update
        * it. id can be ignored if you do not need it.
        *
        *
        * @default
        * "undefined"
        * @see https://echarts.apache.org/en/option.html#series-custom.renderItem.return_circle.id
        */
      var id: js.UndefOr[String] = js.native
      
      /**
        * Whether the element is totally ignored (neither render
        * nor listen events).
        *
        *
        * @see https://echarts.apache.org/en/option.html#series-custom.renderItem.return_circle.ignore
        */
      var ignore: js.UndefOr[Boolean] = js.native
      
      /**
        * User defined data, can be visited in event listeners.
        *
        * [see doc](https://echarts.apache.org/en/option.html#series-custom.custom.renderItem.return_circle)
        *
        *
        * @see https://echarts.apache.org/en/option.html#series-custom.renderItem.return_circle.info
        */
      var info: js.UndefOr[js.Any] = js.native
      
      /**
        * Whether the element is visible.
        *
        *
        * @see https://echarts.apache.org/en/option.html#series-custom.renderItem.return_circle.invisible
        */
      var invisible: js.UndefOr[Boolean] = js.native
      
      /**
        * See
        * [diffChildrenByName](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_polygon.diffChildrenByName)
        * 。
        *
        *
        * @default
        * "undefined"
        * @see https://echarts.apache.org/en/option.html#series-custom.renderItem.return_circle.name
        */
      var name: js.UndefOr[String] = js.native
      
      /**
        * `2D transform` can be applied to graphic elements, including:
        *
        * + [position](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_polygon.position)
        * : `[horizontal translate offset, vertical translate offset]`,
        * `[0, 0]` by default.
        * Positive value means translate towards right or bottom.
        * + [rotation](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_polygon.rotation)
        * : Rotation in radian, `0` by default.
        * Positive when anticlockwise.
        * + [scale](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_polygon.scale)
        * : `[horizontal scale factor, vertical scale factor]`,
        * `[1, 1]` by default.
        *
        * [origin](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_polygon.origin)
        * specifies the origin point of rotation and scaling, `[0,
        * 0]` by default.
        *
        * Notice:
        *
        * + The coordinates specified in the transform attribute
        * above are relative to the `[0, 0]` of the parent element
        * (that is,
        * [group](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_group)
        * or the root canvas). Thus we are able to
        * [group](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_group)
        * multiple elements, and
        * [groups](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_group)
        * can be nested.
        * + The order that the transform attributes are applied
        * to a single graphic element is: Firstly, `rotation`,
        * then, `scale`, finally, `position`.
        *
        *
        * @default
        * [0, 0]
        * @see https://echarts.apache.org/en/option.html#series-custom.renderItem.return_circle.origin
        */
      var origin: js.UndefOr[Double] = js.native
      
      /**
        * `2D transform` can be applied to graphic elements, including:
        *
        * + [position](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_polygon.position)
        * : `[horizontal translate offset, vertical translate offset]`,
        * `[0, 0]` by default.
        * Positive value means translate towards right or bottom.
        * + [rotation](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_polygon.rotation)
        * : Rotation in radian, `0` by default.
        * Positive when anticlockwise.
        * + [scale](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_polygon.scale)
        * : `[horizontal scale factor, vertical scale factor]`,
        * `[1, 1]` by default.
        *
        * [origin](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_polygon.origin)
        * specifies the origin point of rotation and scaling, `[0,
        * 0]` by default.
        *
        * Notice:
        *
        * + The coordinates specified in the transform attribute
        * above are relative to the `[0, 0]` of the parent element
        * (that is,
        * [group](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_group)
        * or the root canvas). Thus we are able to
        * [group](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_group)
        * multiple elements, and
        * [groups](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_group)
        * can be nested.
        * + The order that the transform attributes are applied
        * to a single graphic element is: Firstly, `rotation`,
        * then, `scale`, finally, `position`.
        *
        *
        * @default
        * [0, 0]
        * @see https://echarts.apache.org/en/option.html#series-custom.renderItem.return_circle.position
        */
      var position: js.UndefOr[js.Array[_]] = js.native
      
      /**
        * `2D transform` can be applied to graphic elements, including:
        *
        * + [position](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_polygon.position)
        * : `[horizontal translate offset, vertical translate offset]`,
        * `[0, 0]` by default.
        * Positive value means translate towards right or bottom.
        * + [rotation](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_polygon.rotation)
        * : Rotation in radian, `0` by default.
        * Positive when anticlockwise.
        * + [scale](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_polygon.scale)
        * : `[horizontal scale factor, vertical scale factor]`,
        * `[1, 1]` by default.
        *
        * [origin](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_polygon.origin)
        * specifies the origin point of rotation and scaling, `[0,
        * 0]` by default.
        *
        * Notice:
        *
        * + The coordinates specified in the transform attribute
        * above are relative to the `[0, 0]` of the parent element
        * (that is,
        * [group](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_group)
        * or the root canvas). Thus we are able to
        * [group](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_group)
        * multiple elements, and
        * [groups](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_group)
        * can be nested.
        * + The order that the transform attributes are applied
        * to a single graphic element is: Firstly, `rotation`,
        * then, `scale`, finally, `position`.
        *
        *
        * @see https://echarts.apache.org/en/option.html#series-custom.renderItem.return_circle.rotation
        */
      var rotation: js.UndefOr[Double] = js.native
      
      /**
        * `2D transform` can be applied to graphic elements, including:
        *
        * + [position](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_polygon.position)
        * : `[horizontal translate offset, vertical translate offset]`,
        * `[0, 0]` by default.
        * Positive value means translate towards right or bottom.
        * + [rotation](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_polygon.rotation)
        * : Rotation in radian, `0` by default.
        * Positive when anticlockwise.
        * + [scale](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_polygon.scale)
        * : `[horizontal scale factor, vertical scale factor]`,
        * `[1, 1]` by default.
        *
        * [origin](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_polygon.origin)
        * specifies the origin point of rotation and scaling, `[0,
        * 0]` by default.
        *
        * Notice:
        *
        * + The coordinates specified in the transform attribute
        * above are relative to the `[0, 0]` of the parent element
        * (that is,
        * [group](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_group)
        * or the root canvas). Thus we are able to
        * [group](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_group)
        * multiple elements, and
        * [groups](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_group)
        * can be nested.
        * + The order that the transform attributes are applied
        * to a single graphic element is: Firstly, `rotation`,
        * then, `scale`, finally, `position`.
        *
        *
        * @default
        * [1, 1]
        * @see https://echarts.apache.org/en/option.html#series-custom.renderItem.return_circle.scale
        */
      var scale: js.UndefOr[js.Array[_]] = js.native
      
      /**
        * @see https://echarts.apache.org/en/option.html#series-custom.renderItem.return_circle.shape
        */
      var shape: js.UndefOr[Cx] = js.native
      
      /**
        * Whether response to mouse events / touch events.
        *
        *
        * @see https://echarts.apache.org/en/option.html#series-custom.renderItem.return_circle.silent
        */
      var silent: js.UndefOr[Boolean] = js.native
      
      /**
        * More attributes in `style` (for example,
        * [rich text](https://echarts.apache.org/en/tutorial.html#Rich%20Text)
        * ), see the `style` related attributes in
        * [zrender/graphic/Displayable](https://ecomfe.github.io/zrender-doc/public/api.html#zrenderdisplayable)
        * .
        *
        * Notice, the attribute names of the `style` of graphic
        * elements is derived from `zrender`, which may be different
        * from the attribute names in `echarts label`, `echarts
        * itemStyle`, etc.,
        * although they have the same meaning. For example:
        *
        * + [itemStyle.color](https://echarts.apache.org/en/option.html#series-scatter.label.color)
        * => `style.fill`
        * + [itemStyle.borderColor](https://echarts.apache.org/en/option.html#series-scatter.label.color)
        * => `style.stroke`
        * + [label.color](https://echarts.apache.org/en/option.html#series-scatter.label.color)
        * => `style.textFill`
        * + [label.textBorderColor](https://echarts.apache.org/en/option.html#series-scatter.label.textBorderColor)
        * => `style.textStroke`
        * + ...
        *
        *
        * @see https://echarts.apache.org/en/option.html#series-custom.renderItem.return_circle.style
        */
      var style: js.UndefOr[Fill] = js.native
      
      /**
        * Empahsis style of the graphic element, whose structure
        * is the same as
        * [style](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_polygon.style)
        * .
        *
        *
        * @see https://echarts.apache.org/en/option.html#series-custom.renderItem.return_circle.styleEmphasis
        */
      var styleEmphasis: js.UndefOr[js.Object] = js.native
      
      /**
        * Must be specified when define a graphic element at the
        * first time.
        *
        * Optional values:
        *
        * [image](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_image)
        * ,
        * [text](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_text)
        * ,
        * [circle](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_circle)
        * ,
        * [sector](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_sector)
        * ,
        * [ring](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_ring)
        * ,
        * [polygon](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_polygon)
        * ,
        * [polyline](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_polyline)
        * ,
        * [rect](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_rect)
        * ,
        * [line](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_line)
        * ,
        * [bezierCurve](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_bezierCurve)
        * ,
        * [arc](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_arc)
        * ,
        * [group](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_group)
        * ,
        *
        *
        * @default
        * "circle"
        * @see https://echarts.apache.org/en/option.html#series-custom.renderItem.return_circle.type
        */
      var `type`: js.UndefOr[String] = js.native
      
      /**
        * Define the overlap relationship between graphic elements.
        *
        *
        * @default
        * "undefined"
        * @see https://echarts.apache.org/en/option.html#series-custom.renderItem.return_circle.z2
        */
      var z2: js.UndefOr[Double] = js.native
    }
    object RenderItemReturnCircle {
      
      @scala.inline
      def apply(): RenderItemReturnCircle = {
        val __obj = js.Dynamic.literal()
        __obj.asInstanceOf[RenderItemReturnCircle]
      }
      
      @scala.inline
      implicit class RenderItemReturnCircleMutableBuilder[Self <: RenderItemReturnCircle] (val x: Self) extends AnyVal {
        
        @scala.inline
        def setId(value: String): Self = StObject.set(x, "id", value.asInstanceOf[js.Any])
        
        @scala.inline
        def setIdUndefined: Self = StObject.set(x, "id", js.undefined)
        
        @scala.inline
        def setIgnore(value: Boolean): Self = StObject.set(x, "ignore", value.asInstanceOf[js.Any])
        
        @scala.inline
        def setIgnoreUndefined: Self = StObject.set(x, "ignore", js.undefined)
        
        @scala.inline
        def setInfo(value: js.Any): Self = StObject.set(x, "info", value.asInstanceOf[js.Any])
        
        @scala.inline
        def setInfoUndefined: Self = StObject.set(x, "info", js.undefined)
        
        @scala.inline
        def setInvisible(value: Boolean): Self = StObject.set(x, "invisible", value.asInstanceOf[js.Any])
        
        @scala.inline
        def setInvisibleUndefined: Self = StObject.set(x, "invisible", js.undefined)
        
        @scala.inline
        def setName(value: String): Self = StObject.set(x, "name", value.asInstanceOf[js.Any])
        
        @scala.inline
        def setNameUndefined: Self = StObject.set(x, "name", js.undefined)
        
        @scala.inline
        def setOrigin(value: Double): Self = StObject.set(x, "origin", value.asInstanceOf[js.Any])
        
        @scala.inline
        def setOriginUndefined: Self = StObject.set(x, "origin", js.undefined)
        
        @scala.inline
        def setPosition(value: js.Array[_]): Self = StObject.set(x, "position", value.asInstanceOf[js.Any])
        
        @scala.inline
        def setPositionUndefined: Self = StObject.set(x, "position", js.undefined)
        
        @scala.inline
        def setPositionVarargs(value: js.Any*): Self = StObject.set(x, "position", js.Array(value :_*))
        
        @scala.inline
        def setRotation(value: Double): Self = StObject.set(x, "rotation", value.asInstanceOf[js.Any])
        
        @scala.inline
        def setRotationUndefined: Self = StObject.set(x, "rotation", js.undefined)
        
        @scala.inline
        def setScale(value: js.Array[_]): Self = StObject.set(x, "scale", value.asInstanceOf[js.Any])
        
        @scala.inline
        def setScaleUndefined: Self = StObject.set(x, "scale", js.undefined)
        
        @scala.inline
        def setScaleVarargs(value: js.Any*): Self = StObject.set(x, "scale", js.Array(value :_*))
        
        @scala.inline
        def setShape(value: Cx): Self = StObject.set(x, "shape", value.asInstanceOf[js.Any])
        
        @scala.inline
        def setShapeUndefined: Self = StObject.set(x, "shape", js.undefined)
        
        @scala.inline
        def setSilent(value: Boolean): Self = StObject.set(x, "silent", value.asInstanceOf[js.Any])
        
        @scala.inline
        def setSilentUndefined: Self = StObject.set(x, "silent", js.undefined)
        
        @scala.inline
        def setStyle(value: Fill): Self = StObject.set(x, "style", value.asInstanceOf[js.Any])
        
        @scala.inline
        def setStyleEmphasis(value: js.Object): Self = StObject.set(x, "styleEmphasis", value.asInstanceOf[js.Any])
        
        @scala.inline
        def setStyleEmphasisUndefined: Self = StObject.set(x, "styleEmphasis", js.undefined)
        
        @scala.inline
        def setStyleUndefined: Self = StObject.set(x, "style", js.undefined)
        
        @scala.inline
        def setType(value: String): Self = StObject.set(x, "type", value.asInstanceOf[js.Any])
        
        @scala.inline
        def setTypeUndefined: Self = StObject.set(x, "type", js.undefined)
        
        @scala.inline
        def setZ2(value: Double): Self = StObject.set(x, "z2", value.asInstanceOf[js.Any])
        
        @scala.inline
        def setZ2Undefined: Self = StObject.set(x, "z2", js.undefined)
      }
    }
    
    /**
      * `group` is the only type that can contain children, so that
      * a group of elements can be positioned and transformed together.
      *
      *
      * @see https://echarts.apache.org/en/option.html#series-custom.renderItem.return_group
      */
    @js.native
    trait RenderItemReturnGroup extends StObject {
      
      /**
        * A list of children, each item is a declaration of an
        * element.
        *
        *
        * @see https://echarts.apache.org/en/option.html#series-custom.renderItem.return_group.children
        */
      var children: js.UndefOr[js.Array[_]] = js.native
      
      /**
        * In
        * [custom series](https://echarts.apache.org/en/option.html#series-custom)
        * , when `diffChildrenByName` is set as `true`, for each
        * [group](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_group)
        * returned from
        * [renderItem](https://echarts.apache.org/en/option.html#series-custom.renderItem)
        * , "diff" will be performed to its
        * [children](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_group.children)
        * according to the
        * [name](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_polygon.name)
        * attribute of each graphic elements.
        * Here "diff" means that map the coming graphic elements
        * to the existing graphic elements when repainting according
        * to `name`, which enables the transition animation if
        * data is modified.
        *
        * But notice that the operation is performance consuming,
        * do not use it for large data amount.
        *
        *
        * @see https://echarts.apache.org/en/option.html#series-custom.renderItem.return_group.diffChildrenByName
        */
      var diffChildrenByName: js.UndefOr[Boolean] = js.native
      
      /**
        * Specify height of this `group`.
        *
        * This height is only used for the positioning of its children.
        *
        * When height is `0`, children can also be positioned according
        * to its parent using `top: 'middle'`.
        *
        *
        * @see https://echarts.apache.org/en/option.html#series-custom.renderItem.return_group.height
        */
      var height: js.UndefOr[Double] = js.native
      
      /**
        * id is used to specifying element when willing to update
        * it. id can be ignored if you do not need it.
        *
        *
        * @default
        * "undefined"
        * @see https://echarts.apache.org/en/option.html#series-custom.renderItem.return_group.id
        */
      var id: js.UndefOr[String] = js.native
      
      /**
        * Whether the element is totally ignored (neither render
        * nor listen events).
        *
        *
        * @see https://echarts.apache.org/en/option.html#series-custom.renderItem.return_group.ignore
        */
      var ignore: js.UndefOr[Boolean] = js.native
      
      /**
        * User defined data, can be visited in event listeners.
        *
        * [see doc](https://echarts.apache.org/en/option.html#series-custom.custom.renderItem.return_group)
        *
        *
        * @see https://echarts.apache.org/en/option.html#series-custom.renderItem.return_group.info
        */
      var info: js.UndefOr[js.Any] = js.native
      
      /**
        * Whether the element is visible.
        *
        *
        * @see https://echarts.apache.org/en/option.html#series-custom.renderItem.return_group.invisible
        */
      var invisible: js.UndefOr[Boolean] = js.native
      
      /**
        * See
        * [diffChildrenByName](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_polygon.diffChildrenByName)
        * 。
        *
        *
        * @default
        * "undefined"
        * @see https://echarts.apache.org/en/option.html#series-custom.renderItem.return_group.name
        */
      var name: js.UndefOr[String] = js.native
      
      /**
        * `2D transform` can be applied to graphic elements, including:
        *
        * + [position](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_polygon.position)
        * : `[horizontal translate offset, vertical translate offset]`,
        * `[0, 0]` by default.
        * Positive value means translate towards right or bottom.
        * + [rotation](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_polygon.rotation)
        * : Rotation in radian, `0` by default.
        * Positive when anticlockwise.
        * + [scale](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_polygon.scale)
        * : `[horizontal scale factor, vertical scale factor]`,
        * `[1, 1]` by default.
        *
        * [origin](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_polygon.origin)
        * specifies the origin point of rotation and scaling, `[0,
        * 0]` by default.
        *
        * Notice:
        *
        * + The coordinates specified in the transform attribute
        * above are relative to the `[0, 0]` of the parent element
        * (that is,
        * [group](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_group)
        * or the root canvas). Thus we are able to
        * [group](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_group)
        * multiple elements, and
        * [groups](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_group)
        * can be nested.
        * + The order that the transform attributes are applied
        * to a single graphic element is: Firstly, `rotation`,
        * then, `scale`, finally, `position`.
        *
        *
        * @default
        * [0, 0]
        * @see https://echarts.apache.org/en/option.html#series-custom.renderItem.return_group.origin
        */
      var origin: js.UndefOr[Double] = js.native
      
      /**
        * `2D transform` can be applied to graphic elements, including:
        *
        * + [position](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_polygon.position)
        * : `[horizontal translate offset, vertical translate offset]`,
        * `[0, 0]` by default.
        * Positive value means translate towards right or bottom.
        * + [rotation](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_polygon.rotation)
        * : Rotation in radian, `0` by default.
        * Positive when anticlockwise.
        * + [scale](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_polygon.scale)
        * : `[horizontal scale factor, vertical scale factor]`,
        * `[1, 1]` by default.
        *
        * [origin](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_polygon.origin)
        * specifies the origin point of rotation and scaling, `[0,
        * 0]` by default.
        *
        * Notice:
        *
        * + The coordinates specified in the transform attribute
        * above are relative to the `[0, 0]` of the parent element
        * (that is,
        * [group](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_group)
        * or the root canvas). Thus we are able to
        * [group](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_group)
        * multiple elements, and
        * [groups](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_group)
        * can be nested.
        * + The order that the transform attributes are applied
        * to a single graphic element is: Firstly, `rotation`,
        * then, `scale`, finally, `position`.
        *
        *
        * @default
        * [0, 0]
        * @see https://echarts.apache.org/en/option.html#series-custom.renderItem.return_group.position
        */
      var position: js.UndefOr[js.Array[_]] = js.native
      
      /**
        * `2D transform` can be applied to graphic elements, including:
        *
        * + [position](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_polygon.position)
        * : `[horizontal translate offset, vertical translate offset]`,
        * `[0, 0]` by default.
        * Positive value means translate towards right or bottom.
        * + [rotation](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_polygon.rotation)
        * : Rotation in radian, `0` by default.
        * Positive when anticlockwise.
        * + [scale](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_polygon.scale)
        * : `[horizontal scale factor, vertical scale factor]`,
        * `[1, 1]` by default.
        *
        * [origin](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_polygon.origin)
        * specifies the origin point of rotation and scaling, `[0,
        * 0]` by default.
        *
        * Notice:
        *
        * + The coordinates specified in the transform attribute
        * above are relative to the `[0, 0]` of the parent element
        * (that is,
        * [group](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_group)
        * or the root canvas). Thus we are able to
        * [group](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_group)
        * multiple elements, and
        * [groups](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_group)
        * can be nested.
        * + The order that the transform attributes are applied
        * to a single graphic element is: Firstly, `rotation`,
        * then, `scale`, finally, `position`.
        *
        *
        * @see https://echarts.apache.org/en/option.html#series-custom.renderItem.return_group.rotation
        */
      var rotation: js.UndefOr[Double] = js.native
      
      /**
        * `2D transform` can be applied to graphic elements, including:
        *
        * + [position](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_polygon.position)
        * : `[horizontal translate offset, vertical translate offset]`,
        * `[0, 0]` by default.
        * Positive value means translate towards right or bottom.
        * + [rotation](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_polygon.rotation)
        * : Rotation in radian, `0` by default.
        * Positive when anticlockwise.
        * + [scale](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_polygon.scale)
        * : `[horizontal scale factor, vertical scale factor]`,
        * `[1, 1]` by default.
        *
        * [origin](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_polygon.origin)
        * specifies the origin point of rotation and scaling, `[0,
        * 0]` by default.
        *
        * Notice:
        *
        * + The coordinates specified in the transform attribute
        * above are relative to the `[0, 0]` of the parent element
        * (that is,
        * [group](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_group)
        * or the root canvas). Thus we are able to
        * [group](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_group)
        * multiple elements, and
        * [groups](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_group)
        * can be nested.
        * + The order that the transform attributes are applied
        * to a single graphic element is: Firstly, `rotation`,
        * then, `scale`, finally, `position`.
        *
        *
        * @default
        * [1, 1]
        * @see https://echarts.apache.org/en/option.html#series-custom.renderItem.return_group.scale
        */
      var scale: js.UndefOr[js.Array[_]] = js.native
      
      /**
        * Whether response to mouse events / touch events.
        *
        *
        * @see https://echarts.apache.org/en/option.html#series-custom.renderItem.return_group.silent
        */
      var silent: js.UndefOr[Boolean] = js.native
      
      /**
        * Empahsis style of the graphic element, whose structure
        * is the same as
        * [style](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_polygon.style)
        * .
        *
        *
        * @see https://echarts.apache.org/en/option.html#series-custom.renderItem.return_group.styleEmphasis
        */
      var styleEmphasis: js.UndefOr[js.Object] = js.native
      
      /**
        * Must be specified when define a graphic element at the
        * first time.
        *
        * Optional value
        *
        * [image](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_image)
        * ,
        * [text](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_text)
        * ,
        * [circle](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_circle)
        * ,
        * [sector](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_sector)
        * ,
        * [ring](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_ring)
        * ,
        * [polygon](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_polygon)
        * ,
        * [polyline](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_polyline)
        * ,
        * [rect](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_rect)
        * ,
        * [line](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_line)
        * ,
        * [bezierCurve](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_bezierCurve)
        * ,
        * [arc](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_arc)
        * ,
        * [group](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_group)
        * ,
        *
        *
        * @default
        * "group"
        * @see https://echarts.apache.org/en/option.html#series-custom.renderItem.return_group.type
        */
      var `type`: js.UndefOr[String] = js.native
      
      /**
        * Specify width of this `group`.
        *
        * This width is only used for the positioning of its children.
        *
        * When width is `0`, children can also be positioned according
        * to its parent using `left: 'center'`.
        *
        *
        * @see https://echarts.apache.org/en/option.html#series-custom.renderItem.return_group.width
        */
      var width: js.UndefOr[Double] = js.native
      
      /**
        * Define the overlap relationship between graphic elements.
        *
        *
        * @default
        * "undefined"
        * @see https://echarts.apache.org/en/option.html#series-custom.renderItem.return_group.z2
        */
      var z2: js.UndefOr[Double] = js.native
    }
    object RenderItemReturnGroup {
      
      @scala.inline
      def apply(): RenderItemReturnGroup = {
        val __obj = js.Dynamic.literal()
        __obj.asInstanceOf[RenderItemReturnGroup]
      }
      
      @scala.inline
      implicit class RenderItemReturnGroupMutableBuilder[Self <: RenderItemReturnGroup] (val x: Self) extends AnyVal {
        
        @scala.inline
        def setChildren(value: js.Array[_]): Self = StObject.set(x, "children", value.asInstanceOf[js.Any])
        
        @scala.inline
        def setChildrenUndefined: Self = StObject.set(x, "children", js.undefined)
        
        @scala.inline
        def setChildrenVarargs(value: js.Any*): Self = StObject.set(x, "children", js.Array(value :_*))
        
        @scala.inline
        def setDiffChildrenByName(value: Boolean): Self = StObject.set(x, "diffChildrenByName", value.asInstanceOf[js.Any])
        
        @scala.inline
        def setDiffChildrenByNameUndefined: Self = StObject.set(x, "diffChildrenByName", js.undefined)
        
        @scala.inline
        def setHeight(value: Double): Self = StObject.set(x, "height", value.asInstanceOf[js.Any])
        
        @scala.inline
        def setHeightUndefined: Self = StObject.set(x, "height", js.undefined)
        
        @scala.inline
        def setId(value: String): Self = StObject.set(x, "id", value.asInstanceOf[js.Any])
        
        @scala.inline
        def setIdUndefined: Self = StObject.set(x, "id", js.undefined)
        
        @scala.inline
        def setIgnore(value: Boolean): Self = StObject.set(x, "ignore", value.asInstanceOf[js.Any])
        
        @scala.inline
        def setIgnoreUndefined: Self = StObject.set(x, "ignore", js.undefined)
        
        @scala.inline
        def setInfo(value: js.Any): Self = StObject.set(x, "info", value.asInstanceOf[js.Any])
        
        @scala.inline
        def setInfoUndefined: Self = StObject.set(x, "info", js.undefined)
        
        @scala.inline
        def setInvisible(value: Boolean): Self = StObject.set(x, "invisible", value.asInstanceOf[js.Any])
        
        @scala.inline
        def setInvisibleUndefined: Self = StObject.set(x, "invisible", js.undefined)
        
        @scala.inline
        def setName(value: String): Self = StObject.set(x, "name", value.asInstanceOf[js.Any])
        
        @scala.inline
        def setNameUndefined: Self = StObject.set(x, "name", js.undefined)
        
        @scala.inline
        def setOrigin(value: Double): Self = StObject.set(x, "origin", value.asInstanceOf[js.Any])
        
        @scala.inline
        def setOriginUndefined: Self = StObject.set(x, "origin", js.undefined)
        
        @scala.inline
        def setPosition(value: js.Array[_]): Self = StObject.set(x, "position", value.asInstanceOf[js.Any])
        
        @scala.inline
        def setPositionUndefined: Self = StObject.set(x, "position", js.undefined)
        
        @scala.inline
        def setPositionVarargs(value: js.Any*): Self = StObject.set(x, "position", js.Array(value :_*))
        
        @scala.inline
        def setRotation(value: Double): Self = StObject.set(x, "rotation", value.asInstanceOf[js.Any])
        
        @scala.inline
        def setRotationUndefined: Self = StObject.set(x, "rotation", js.undefined)
        
        @scala.inline
        def setScale(value: js.Array[_]): Self = StObject.set(x, "scale", value.asInstanceOf[js.Any])
        
        @scala.inline
        def setScaleUndefined: Self = StObject.set(x, "scale", js.undefined)
        
        @scala.inline
        def setScaleVarargs(value: js.Any*): Self = StObject.set(x, "scale", js.Array(value :_*))
        
        @scala.inline
        def setSilent(value: Boolean): Self = StObject.set(x, "silent", value.asInstanceOf[js.Any])
        
        @scala.inline
        def setSilentUndefined: Self = StObject.set(x, "silent", js.undefined)
        
        @scala.inline
        def setStyleEmphasis(value: js.Object): Self = StObject.set(x, "styleEmphasis", value.asInstanceOf[js.Any])
        
        @scala.inline
        def setStyleEmphasisUndefined: Self = StObject.set(x, "styleEmphasis", js.undefined)
        
        @scala.inline
        def setType(value: String): Self = StObject.set(x, "type", value.asInstanceOf[js.Any])
        
        @scala.inline
        def setTypeUndefined: Self = StObject.set(x, "type", js.undefined)
        
        @scala.inline
        def setWidth(value: Double): Self = StObject.set(x, "width", value.asInstanceOf[js.Any])
        
        @scala.inline
        def setWidthUndefined: Self = StObject.set(x, "width", js.undefined)
        
        @scala.inline
        def setZ2(value: Double): Self = StObject.set(x, "z2", value.asInstanceOf[js.Any])
        
        @scala.inline
        def setZ2Undefined: Self = StObject.set(x, "z2", js.undefined)
      }
    }
    
    /**
      * @see https://echarts.apache.org/en/option.html#series-custom.renderItem.return_image
      */
    @js.native
    trait RenderItemReturnImage extends StObject {
      
      /**
        * id is used to specifying element when willing to update
        * it. id can be ignored if you do not need it.
        *
        *
        * @default
        * "undefined"
        * @see https://echarts.apache.org/en/option.html#series-custom.renderItem.return_image.id
        */
      var id: js.UndefOr[String] = js.native
      
      /**
        * Whether the element is totally ignored (neither render
        * nor listen events).
        *
        *
        * @see https://echarts.apache.org/en/option.html#series-custom.renderItem.return_image.ignore
        */
      var ignore: js.UndefOr[Boolean] = js.native
      
      /**
        * User defined data, can be visited in event listeners.
        *
        * [see doc](https://echarts.apache.org/en/option.html#series-custom.custom.renderItem.return_image)
        *
        *
        * @see https://echarts.apache.org/en/option.html#series-custom.renderItem.return_image.info
        */
      var info: js.UndefOr[js.Any] = js.native
      
      /**
        * Whether the element is visible.
        *
        *
        * @see https://echarts.apache.org/en/option.html#series-custom.renderItem.return_image.invisible
        */
      var invisible: js.UndefOr[Boolean] = js.native
      
      /**
        * See
        * [diffChildrenByName](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_polygon.diffChildrenByName)
        * 。
        *
        *
        * @default
        * "undefined"
        * @see https://echarts.apache.org/en/option.html#series-custom.renderItem.return_image.name
        */
      var name: js.UndefOr[String] = js.native
      
      /**
        * `2D transform` can be applied to graphic elements, including:
        *
        * + [position](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_polygon.position)
        * : `[horizontal translate offset, vertical translate offset]`,
        * `[0, 0]` by default.
        * Positive value means translate towards right or bottom.
        * + [rotation](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_polygon.rotation)
        * : Rotation in radian, `0` by default.
        * Positive when anticlockwise.
        * + [scale](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_polygon.scale)
        * : `[horizontal scale factor, vertical scale factor]`,
        * `[1, 1]` by default.
        *
        * [origin](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_polygon.origin)
        * specifies the origin point of rotation and scaling, `[0,
        * 0]` by default.
        *
        * Notice:
        *
        * + The coordinates specified in the transform attribute
        * above are relative to the `[0, 0]` of the parent element
        * (that is,
        * [group](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_group)
        * or the root canvas). Thus we are able to
        * [group](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_group)
        * multiple elements, and
        * [groups](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_group)
        * can be nested.
        * + The order that the transform attributes are applied
        * to a single graphic element is: Firstly, `rotation`,
        * then, `scale`, finally, `position`.
        *
        *
        * @default
        * [0, 0]
        * @see https://echarts.apache.org/en/option.html#series-custom.renderItem.return_image.origin
        */
      var origin: js.UndefOr[Double] = js.native
      
      /**
        * `2D transform` can be applied to graphic elements, including:
        *
        * + [position](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_polygon.position)
        * : `[horizontal translate offset, vertical translate offset]`,
        * `[0, 0]` by default.
        * Positive value means translate towards right or bottom.
        * + [rotation](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_polygon.rotation)
        * : Rotation in radian, `0` by default.
        * Positive when anticlockwise.
        * + [scale](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_polygon.scale)
        * : `[horizontal scale factor, vertical scale factor]`,
        * `[1, 1]` by default.
        *
        * [origin](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_polygon.origin)
        * specifies the origin point of rotation and scaling, `[0,
        * 0]` by default.
        *
        * Notice:
        *
        * + The coordinates specified in the transform attribute
        * above are relative to the `[0, 0]` of the parent element
        * (that is,
        * [group](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_group)
        * or the root canvas). Thus we are able to
        * [group](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_group)
        * multiple elements, and
        * [groups](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_group)
        * can be nested.
        * + The order that the transform attributes are applied
        * to a single graphic element is: Firstly, `rotation`,
        * then, `scale`, finally, `position`.
        *
        *
        * @default
        * [0, 0]
        * @see https://echarts.apache.org/en/option.html#series-custom.renderItem.return_image.position
        */
      var position: js.UndefOr[js.Array[_]] = js.native
      
      /**
        * `2D transform` can be applied to graphic elements, including:
        *
        * + [position](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_polygon.position)
        * : `[horizontal translate offset, vertical translate offset]`,
        * `[0, 0]` by default.
        * Positive value means translate towards right or bottom.
        * + [rotation](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_polygon.rotation)
        * : Rotation in radian, `0` by default.
        * Positive when anticlockwise.
        * + [scale](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_polygon.scale)
        * : `[horizontal scale factor, vertical scale factor]`,
        * `[1, 1]` by default.
        *
        * [origin](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_polygon.origin)
        * specifies the origin point of rotation and scaling, `[0,
        * 0]` by default.
        *
        * Notice:
        *
        * + The coordinates specified in the transform attribute
        * above are relative to the `[0, 0]` of the parent element
        * (that is,
        * [group](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_group)
        * or the root canvas). Thus we are able to
        * [group](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_group)
        * multiple elements, and
        * [groups](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_group)
        * can be nested.
        * + The order that the transform attributes are applied
        * to a single graphic element is: Firstly, `rotation`,
        * then, `scale`, finally, `position`.
        *
        *
        * @see https://echarts.apache.org/en/option.html#series-custom.renderItem.return_image.rotation
        */
      var rotation: js.UndefOr[Double] = js.native
      
      /**
        * `2D transform` can be applied to graphic elements, including:
        *
        * + [position](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_polygon.position)
        * : `[horizontal translate offset, vertical translate offset]`,
        * `[0, 0]` by default.
        * Positive value means translate towards right or bottom.
        * + [rotation](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_polygon.rotation)
        * : Rotation in radian, `0` by default.
        * Positive when anticlockwise.
        * + [scale](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_polygon.scale)
        * : `[horizontal scale factor, vertical scale factor]`,
        * `[1, 1]` by default.
        *
        * [origin](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_polygon.origin)
        * specifies the origin point of rotation and scaling, `[0,
        * 0]` by default.
        *
        * Notice:
        *
        * + The coordinates specified in the transform attribute
        * above are relative to the `[0, 0]` of the parent element
        * (that is,
        * [group](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_group)
        * or the root canvas). Thus we are able to
        * [group](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_group)
        * multiple elements, and
        * [groups](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_group)
        * can be nested.
        * + The order that the transform attributes are applied
        * to a single graphic element is: Firstly, `rotation`,
        * then, `scale`, finally, `position`.
        *
        *
        * @default
        * [1, 1]
        * @see https://echarts.apache.org/en/option.html#series-custom.renderItem.return_image.scale
        */
      var scale: js.UndefOr[js.Array[_]] = js.native
      
      /**
        * Whether response to mouse events / touch events.
        *
        *
        * @see https://echarts.apache.org/en/option.html#series-custom.renderItem.return_image.silent
        */
      var silent: js.UndefOr[Boolean] = js.native
      
      /**
        * @see https://echarts.apache.org/en/option.html#series-custom.renderItem.return_image.style
        */
      var style: js.UndefOr[Height] = js.native
      
      /**
        * Empahsis style of the graphic element, whose structure
        * is the same as
        * [style](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_polygon.style)
        * .
        *
        *
        * @see https://echarts.apache.org/en/option.html#series-custom.renderItem.return_image.styleEmphasis
        */
      var styleEmphasis: js.UndefOr[js.Object] = js.native
      
      /**
        * Must be specified when define a graphic element at the
        * first time.
        *
        * Optional values:
        *
        * [image](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_image)
        * ,
        * [text](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_text)
        * ,
        * [circle](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_circle)
        * ,
        * [sector](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_sector)
        * ,
        * [ring](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_ring)
        * ,
        * [polygon](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_polygon)
        * ,
        * [polyline](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_polyline)
        * ,
        * [rect](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_rect)
        * ,
        * [line](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_line)
        * ,
        * [bezierCurve](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_bezierCurve)
        * ,
        * [arc](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_arc)
        * ,
        * [group](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_group)
        * ,
        *
        *
        * @default
        * "image"
        * @see https://echarts.apache.org/en/option.html#series-custom.renderItem.return_image.type
        */
      var `type`: js.UndefOr[String] = js.native
      
      /**
        * Define the overlap relationship between graphic elements.
        *
        *
        * @default
        * "undefined"
        * @see https://echarts.apache.org/en/option.html#series-custom.renderItem.return_image.z2
        */
      var z2: js.UndefOr[Double] = js.native
    }
    object RenderItemReturnImage {
      
      @scala.inline
      def apply(): RenderItemReturnImage = {
        val __obj = js.Dynamic.literal()
        __obj.asInstanceOf[RenderItemReturnImage]
      }
      
      @scala.inline
      implicit class RenderItemReturnImageMutableBuilder[Self <: RenderItemReturnImage] (val x: Self) extends AnyVal {
        
        @scala.inline
        def setId(value: String): Self = StObject.set(x, "id", value.asInstanceOf[js.Any])
        
        @scala.inline
        def setIdUndefined: Self = StObject.set(x, "id", js.undefined)
        
        @scala.inline
        def setIgnore(value: Boolean): Self = StObject.set(x, "ignore", value.asInstanceOf[js.Any])
        
        @scala.inline
        def setIgnoreUndefined: Self = StObject.set(x, "ignore", js.undefined)
        
        @scala.inline
        def setInfo(value: js.Any): Self = StObject.set(x, "info", value.asInstanceOf[js.Any])
        
        @scala.inline
        def setInfoUndefined: Self = StObject.set(x, "info", js.undefined)
        
        @scala.inline
        def setInvisible(value: Boolean): Self = StObject.set(x, "invisible", value.asInstanceOf[js.Any])
        
        @scala.inline
        def setInvisibleUndefined: Self = StObject.set(x, "invisible", js.undefined)
        
        @scala.inline
        def setName(value: String): Self = StObject.set(x, "name", value.asInstanceOf[js.Any])
        
        @scala.inline
        def setNameUndefined: Self = StObject.set(x, "name", js.undefined)
        
        @scala.inline
        def setOrigin(value: Double): Self = StObject.set(x, "origin", value.asInstanceOf[js.Any])
        
        @scala.inline
        def setOriginUndefined: Self = StObject.set(x, "origin", js.undefined)
        
        @scala.inline
        def setPosition(value: js.Array[_]): Self = StObject.set(x, "position", value.asInstanceOf[js.Any])
        
        @scala.inline
        def setPositionUndefined: Self = StObject.set(x, "position", js.undefined)
        
        @scala.inline
        def setPositionVarargs(value: js.Any*): Self = StObject.set(x, "position", js.Array(value :_*))
        
        @scala.inline
        def setRotation(value: Double): Self = StObject.set(x, "rotation", value.asInstanceOf[js.Any])
        
        @scala.inline
        def setRotationUndefined: Self = StObject.set(x, "rotation", js.undefined)
        
        @scala.inline
        def setScale(value: js.Array[_]): Self = StObject.set(x, "scale", value.asInstanceOf[js.Any])
        
        @scala.inline
        def setScaleUndefined: Self = StObject.set(x, "scale", js.undefined)
        
        @scala.inline
        def setScaleVarargs(value: js.Any*): Self = StObject.set(x, "scale", js.Array(value :_*))
        
        @scala.inline
        def setSilent(value: Boolean): Self = StObject.set(x, "silent", value.asInstanceOf[js.Any])
        
        @scala.inline
        def setSilentUndefined: Self = StObject.set(x, "silent", js.undefined)
        
        @scala.inline
        def setStyle(value: Height): Self = StObject.set(x, "style", value.asInstanceOf[js.Any])
        
        @scala.inline
        def setStyleEmphasis(value: js.Object): Self = StObject.set(x, "styleEmphasis", value.asInstanceOf[js.Any])
        
        @scala.inline
        def setStyleEmphasisUndefined: Self = StObject.set(x, "styleEmphasis", js.undefined)
        
        @scala.inline
        def setStyleUndefined: Self = StObject.set(x, "style", js.undefined)
        
        @scala.inline
        def setType(value: String): Self = StObject.set(x, "type", value.asInstanceOf[js.Any])
        
        @scala.inline
        def setTypeUndefined: Self = StObject.set(x, "type", js.undefined)
        
        @scala.inline
        def setZ2(value: Double): Self = StObject.set(x, "z2", value.asInstanceOf[js.Any])
        
        @scala.inline
        def setZ2Undefined: Self = StObject.set(x, "z2", js.undefined)
      }
    }
    
    /**
      * Line element.
      *
      *
      * @see https://echarts.apache.org/en/option.html#series-custom.renderItem.return_line
      */
    @js.native
    trait RenderItemReturnLine extends StObject {
      
      /**
        * id is used to specifying element when willing to update
        * it. id can be ignored if you do not need it.
        *
        *
        * @default
        * "undefined"
        * @see https://echarts.apache.org/en/option.html#series-custom.renderItem.return_line.id
        */
      var id: js.UndefOr[String] = js.native
      
      /**
        * Whether the element is totally ignored (neither render
        * nor listen events).
        *
        *
        * @see https://echarts.apache.org/en/option.html#series-custom.renderItem.return_line.ignore
        */
      var ignore: js.UndefOr[Boolean] = js.native
      
      /**
        * User defined data, can be visited in event listeners.
        *
        * [see doc](https://echarts.apache.org/en/option.html#series-custom.custom.renderItem.return_line)
        *
        *
        * @see https://echarts.apache.org/en/option.html#series-custom.renderItem.return_line.info
        */
      var info: js.UndefOr[js.Any] = js.native
      
      /**
        * Whether the element is visible.
        *
        *
        * @see https://echarts.apache.org/en/option.html#series-custom.renderItem.return_line.invisible
        */
      var invisible: js.UndefOr[Boolean] = js.native
      
      /**
        * See
        * [diffChildrenByName](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_polygon.diffChildrenByName)
        * 。
        *
        *
        * @default
        * "undefined"
        * @see https://echarts.apache.org/en/option.html#series-custom.renderItem.return_line.name
        */
      var name: js.UndefOr[String] = js.native
      
      /**
        * `2D transform` can be applied to graphic elements, including:
        *
        * + [position](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_polygon.position)
        * : `[horizontal translate offset, vertical translate offset]`,
        * `[0, 0]` by default.
        * Positive value means translate towards right or bottom.
        * + [rotation](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_polygon.rotation)
        * : Rotation in radian, `0` by default.
        * Positive when anticlockwise.
        * + [scale](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_polygon.scale)
        * : `[horizontal scale factor, vertical scale factor]`,
        * `[1, 1]` by default.
        *
        * [origin](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_polygon.origin)
        * specifies the origin point of rotation and scaling, `[0,
        * 0]` by default.
        *
        * Notice:
        *
        * + The coordinates specified in the transform attribute
        * above are relative to the `[0, 0]` of the parent element
        * (that is,
        * [group](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_group)
        * or the root canvas). Thus we are able to
        * [group](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_group)
        * multiple elements, and
        * [groups](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_group)
        * can be nested.
        * + The order that the transform attributes are applied
        * to a single graphic element is: Firstly, `rotation`,
        * then, `scale`, finally, `position`.
        *
        *
        * @default
        * [0, 0]
        * @see https://echarts.apache.org/en/option.html#series-custom.renderItem.return_line.origin
        */
      var origin: js.UndefOr[Double] = js.native
      
      /**
        * `2D transform` can be applied to graphic elements, including:
        *
        * + [position](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_polygon.position)
        * : `[horizontal translate offset, vertical translate offset]`,
        * `[0, 0]` by default.
        * Positive value means translate towards right or bottom.
        * + [rotation](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_polygon.rotation)
        * : Rotation in radian, `0` by default.
        * Positive when anticlockwise.
        * + [scale](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_polygon.scale)
        * : `[horizontal scale factor, vertical scale factor]`,
        * `[1, 1]` by default.
        *
        * [origin](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_polygon.origin)
        * specifies the origin point of rotation and scaling, `[0,
        * 0]` by default.
        *
        * Notice:
        *
        * + The coordinates specified in the transform attribute
        * above are relative to the `[0, 0]` of the parent element
        * (that is,
        * [group](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_group)
        * or the root canvas). Thus we are able to
        * [group](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_group)
        * multiple elements, and
        * [groups](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_group)
        * can be nested.
        * + The order that the transform attributes are applied
        * to a single graphic element is: Firstly, `rotation`,
        * then, `scale`, finally, `position`.
        *
        *
        * @default
        * [0, 0]
        * @see https://echarts.apache.org/en/option.html#series-custom.renderItem.return_line.position
        */
      var position: js.UndefOr[js.Array[_]] = js.native
      
      /**
        * `2D transform` can be applied to graphic elements, including:
        *
        * + [position](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_polygon.position)
        * : `[horizontal translate offset, vertical translate offset]`,
        * `[0, 0]` by default.
        * Positive value means translate towards right or bottom.
        * + [rotation](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_polygon.rotation)
        * : Rotation in radian, `0` by default.
        * Positive when anticlockwise.
        * + [scale](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_polygon.scale)
        * : `[horizontal scale factor, vertical scale factor]`,
        * `[1, 1]` by default.
        *
        * [origin](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_polygon.origin)
        * specifies the origin point of rotation and scaling, `[0,
        * 0]` by default.
        *
        * Notice:
        *
        * + The coordinates specified in the transform attribute
        * above are relative to the `[0, 0]` of the parent element
        * (that is,
        * [group](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_group)
        * or the root canvas). Thus we are able to
        * [group](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_group)
        * multiple elements, and
        * [groups](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_group)
        * can be nested.
        * + The order that the transform attributes are applied
        * to a single graphic element is: Firstly, `rotation`,
        * then, `scale`, finally, `position`.
        *
        *
        * @see https://echarts.apache.org/en/option.html#series-custom.renderItem.return_line.rotation
        */
      var rotation: js.UndefOr[Double] = js.native
      
      /**
        * `2D transform` can be applied to graphic elements, including:
        *
        * + [position](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_polygon.position)
        * : `[horizontal translate offset, vertical translate offset]`,
        * `[0, 0]` by default.
        * Positive value means translate towards right or bottom.
        * + [rotation](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_polygon.rotation)
        * : Rotation in radian, `0` by default.
        * Positive when anticlockwise.
        * + [scale](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_polygon.scale)
        * : `[horizontal scale factor, vertical scale factor]`,
        * `[1, 1]` by default.
        *
        * [origin](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_polygon.origin)
        * specifies the origin point of rotation and scaling, `[0,
        * 0]` by default.
        *
        * Notice:
        *
        * + The coordinates specified in the transform attribute
        * above are relative to the `[0, 0]` of the parent element
        * (that is,
        * [group](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_group)
        * or the root canvas). Thus we are able to
        * [group](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_group)
        * multiple elements, and
        * [groups](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_group)
        * can be nested.
        * + The order that the transform attributes are applied
        * to a single graphic element is: Firstly, `rotation`,
        * then, `scale`, finally, `position`.
        *
        *
        * @default
        * [1, 1]
        * @see https://echarts.apache.org/en/option.html#series-custom.renderItem.return_line.scale
        */
      var scale: js.UndefOr[js.Array[_]] = js.native
      
      /**
        * @see https://echarts.apache.org/en/option.html#series-custom.renderItem.return_line.shape
        */
      var shape: js.UndefOr[Percent] = js.native
      
      /**
        * Whether response to mouse events / touch events.
        *
        *
        * @see https://echarts.apache.org/en/option.html#series-custom.renderItem.return_line.silent
        */
      var silent: js.UndefOr[Boolean] = js.native
      
      /**
        * More attributes in `style` (for example,
        * [rich text](https://echarts.apache.org/en/tutorial.html#Rich%20Text)
        * ), see the `style` related attributes in
        * [zrender/graphic/Displayable](https://ecomfe.github.io/zrender-doc/public/api.html#zrenderdisplayable)
        * .
        *
        * Notice, the attribute names of the `style` of graphic
        * elements is derived from `zrender`, which may be different
        * from the attribute names in `echarts label`, `echarts
        * itemStyle`, etc.,
        * although they have the same meaning. For example:
        *
        * + [itemStyle.color](https://echarts.apache.org/en/option.html#series-scatter.label.color)
        * => `style.fill`
        * + [itemStyle.borderColor](https://echarts.apache.org/en/option.html#series-scatter.label.color)
        * => `style.stroke`
        * + [label.color](https://echarts.apache.org/en/option.html#series-scatter.label.color)
        * => `style.textFill`
        * + [label.textBorderColor](https://echarts.apache.org/en/option.html#series-scatter.label.textBorderColor)
        * => `style.textStroke`
        * + ...
        *
        *
        * @see https://echarts.apache.org/en/option.html#series-custom.renderItem.return_line.style
        */
      var style: js.UndefOr[Fill] = js.native
      
      /**
        * Empahsis style of the graphic element, whose structure
        * is the same as
        * [style](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_polygon.style)
        * .
        *
        *
        * @see https://echarts.apache.org/en/option.html#series-custom.renderItem.return_line.styleEmphasis
        */
      var styleEmphasis: js.UndefOr[js.Object] = js.native
      
      /**
        * Must be specified when define a graphic element at the
        * first time.
        *
        * Optional values:
        *
        * [image](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_image)
        * ,
        * [text](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_text)
        * ,
        * [circle](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_circle)
        * ,
        * [sector](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_sector)
        * ,
        * [ring](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_ring)
        * ,
        * [polygon](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_polygon)
        * ,
        * [polyline](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_polyline)
        * ,
        * [rect](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_rect)
        * ,
        * [line](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_line)
        * ,
        * [bezierCurve](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_bezierCurve)
        * ,
        * [arc](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_arc)
        * ,
        * [group](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_group)
        * ,
        *
        *
        * @default
        * "line"
        * @see https://echarts.apache.org/en/option.html#series-custom.renderItem.return_line.type
        */
      var `type`: js.UndefOr[String] = js.native
      
      /**
        * Define the overlap relationship between graphic elements.
        *
        *
        * @default
        * "undefined"
        * @see https://echarts.apache.org/en/option.html#series-custom.renderItem.return_line.z2
        */
      var z2: js.UndefOr[Double] = js.native
    }
    object RenderItemReturnLine {
      
      @scala.inline
      def apply(): RenderItemReturnLine = {
        val __obj = js.Dynamic.literal()
        __obj.asInstanceOf[RenderItemReturnLine]
      }
      
      @scala.inline
      implicit class RenderItemReturnLineMutableBuilder[Self <: RenderItemReturnLine] (val x: Self) extends AnyVal {
        
        @scala.inline
        def setId(value: String): Self = StObject.set(x, "id", value.asInstanceOf[js.Any])
        
        @scala.inline
        def setIdUndefined: Self = StObject.set(x, "id", js.undefined)
        
        @scala.inline
        def setIgnore(value: Boolean): Self = StObject.set(x, "ignore", value.asInstanceOf[js.Any])
        
        @scala.inline
        def setIgnoreUndefined: Self = StObject.set(x, "ignore", js.undefined)
        
        @scala.inline
        def setInfo(value: js.Any): Self = StObject.set(x, "info", value.asInstanceOf[js.Any])
        
        @scala.inline
        def setInfoUndefined: Self = StObject.set(x, "info", js.undefined)
        
        @scala.inline
        def setInvisible(value: Boolean): Self = StObject.set(x, "invisible", value.asInstanceOf[js.Any])
        
        @scala.inline
        def setInvisibleUndefined: Self = StObject.set(x, "invisible", js.undefined)
        
        @scala.inline
        def setName(value: String): Self = StObject.set(x, "name", value.asInstanceOf[js.Any])
        
        @scala.inline
        def setNameUndefined: Self = StObject.set(x, "name", js.undefined)
        
        @scala.inline
        def setOrigin(value: Double): Self = StObject.set(x, "origin", value.asInstanceOf[js.Any])
        
        @scala.inline
        def setOriginUndefined: Self = StObject.set(x, "origin", js.undefined)
        
        @scala.inline
        def setPosition(value: js.Array[_]): Self = StObject.set(x, "position", value.asInstanceOf[js.Any])
        
        @scala.inline
        def setPositionUndefined: Self = StObject.set(x, "position", js.undefined)
        
        @scala.inline
        def setPositionVarargs(value: js.Any*): Self = StObject.set(x, "position", js.Array(value :_*))
        
        @scala.inline
        def setRotation(value: Double): Self = StObject.set(x, "rotation", value.asInstanceOf[js.Any])
        
        @scala.inline
        def setRotationUndefined: Self = StObject.set(x, "rotation", js.undefined)
        
        @scala.inline
        def setScale(value: js.Array[_]): Self = StObject.set(x, "scale", value.asInstanceOf[js.Any])
        
        @scala.inline
        def setScaleUndefined: Self = StObject.set(x, "scale", js.undefined)
        
        @scala.inline
        def setScaleVarargs(value: js.Any*): Self = StObject.set(x, "scale", js.Array(value :_*))
        
        @scala.inline
        def setShape(value: Percent): Self = StObject.set(x, "shape", value.asInstanceOf[js.Any])
        
        @scala.inline
        def setShapeUndefined: Self = StObject.set(x, "shape", js.undefined)
        
        @scala.inline
        def setSilent(value: Boolean): Self = StObject.set(x, "silent", value.asInstanceOf[js.Any])
        
        @scala.inline
        def setSilentUndefined: Self = StObject.set(x, "silent", js.undefined)
        
        @scala.inline
        def setStyle(value: Fill): Self = StObject.set(x, "style", value.asInstanceOf[js.Any])
        
        @scala.inline
        def setStyleEmphasis(value: js.Object): Self = StObject.set(x, "styleEmphasis", value.asInstanceOf[js.Any])
        
        @scala.inline
        def setStyleEmphasisUndefined: Self = StObject.set(x, "styleEmphasis", js.undefined)
        
        @scala.inline
        def setStyleUndefined: Self = StObject.set(x, "style", js.undefined)
        
        @scala.inline
        def setType(value: String): Self = StObject.set(x, "type", value.asInstanceOf[js.Any])
        
        @scala.inline
        def setTypeUndefined: Self = StObject.set(x, "type", js.undefined)
        
        @scala.inline
        def setZ2(value: Double): Self = StObject.set(x, "z2", value.asInstanceOf[js.Any])
        
        @scala.inline
        def setZ2Undefined: Self = StObject.set(x, "z2", js.undefined)
      }
    }
    
    /**
      * Use
      * [SVG PathData](http://www.w3.org/TR/SVG/paths.html#PathData)
      * to describe a path.
      * Can be used to draw icons or any other shapes fitting the
      * specified size by auto transforming.
      *
      * See examples:
      * [icons](https://echarts.apache.org/examples/en/editor.html?c=custom-calendar-icon)
      * and
      * [shapes](https://echarts.apache.org/examples/en/editor.html?c=custom-gantt-flight)
      * .
      *
      *
      * @see https://echarts.apache.org/en/option.html#series-custom.renderItem.return_path
      */
    @js.native
    trait RenderItemReturnPath extends StObject {
      
      /**
        * id is used to specifying element when willing to update
        * it. id can be ignored if you do not need it.
        *
        *
        * @default
        * "undefined"
        * @see https://echarts.apache.org/en/option.html#series-custom.renderItem.return_path.id
        */
      var id: js.UndefOr[String] = js.native
      
      /**
        * Whether the element is totally ignored (neither render
        * nor listen events).
        *
        *
        * @see https://echarts.apache.org/en/option.html#series-custom.renderItem.return_path.ignore
        */
      var ignore: js.UndefOr[Boolean] = js.native
      
      /**
        * User defined data, can be visited in event listeners.
        *
        * [see doc](https://echarts.apache.org/en/option.html#series-custom.custom.renderItem.return_path)
        *
        *
        * @see https://echarts.apache.org/en/option.html#series-custom.renderItem.return_path.info
        */
      var info: js.UndefOr[js.Any] = js.native
      
      /**
        * Whether the element is visible.
        *
        *
        * @see https://echarts.apache.org/en/option.html#series-custom.renderItem.return_path.invisible
        */
      var invisible: js.UndefOr[Boolean] = js.native
      
      /**
        * See
        * [diffChildrenByName](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_polygon.diffChildrenByName)
        * 。
        *
        *
        * @default
        * "undefined"
        * @see https://echarts.apache.org/en/option.html#series-custom.renderItem.return_path.name
        */
      var name: js.UndefOr[String] = js.native
      
      /**
        * `2D transform` can be applied to graphic elements, including:
        *
        * + [position](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_polygon.position)
        * : `[horizontal translate offset, vertical translate offset]`,
        * `[0, 0]` by default.
        * Positive value means translate towards right or bottom.
        * + [rotation](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_polygon.rotation)
        * : Rotation in radian, `0` by default.
        * Positive when anticlockwise.
        * + [scale](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_polygon.scale)
        * : `[horizontal scale factor, vertical scale factor]`,
        * `[1, 1]` by default.
        *
        * [origin](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_polygon.origin)
        * specifies the origin point of rotation and scaling, `[0,
        * 0]` by default.
        *
        * Notice:
        *
        * + The coordinates specified in the transform attribute
        * above are relative to the `[0, 0]` of the parent element
        * (that is,
        * [group](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_group)
        * or the root canvas). Thus we are able to
        * [group](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_group)
        * multiple elements, and
        * [groups](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_group)
        * can be nested.
        * + The order that the transform attributes are applied
        * to a single graphic element is: Firstly, `rotation`,
        * then, `scale`, finally, `position`.
        *
        *
        * @default
        * [0, 0]
        * @see https://echarts.apache.org/en/option.html#series-custom.renderItem.return_path.origin
        */
      var origin: js.UndefOr[Double] = js.native
      
      /**
        * `2D transform` can be applied to graphic elements, including:
        *
        * + [position](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_polygon.position)
        * : `[horizontal translate offset, vertical translate offset]`,
        * `[0, 0]` by default.
        * Positive value means translate towards right or bottom.
        * + [rotation](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_polygon.rotation)
        * : Rotation in radian, `0` by default.
        * Positive when anticlockwise.
        * + [scale](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_polygon.scale)
        * : `[horizontal scale factor, vertical scale factor]`,
        * `[1, 1]` by default.
        *
        * [origin](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_polygon.origin)
        * specifies the origin point of rotation and scaling, `[0,
        * 0]` by default.
        *
        * Notice:
        *
        * + The coordinates specified in the transform attribute
        * above are relative to the `[0, 0]` of the parent element
        * (that is,
        * [group](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_group)
        * or the root canvas). Thus we are able to
        * [group](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_group)
        * multiple elements, and
        * [groups](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_group)
        * can be nested.
        * + The order that the transform attributes are applied
        * to a single graphic element is: Firstly, `rotation`,
        * then, `scale`, finally, `position`.
        *
        *
        * @default
        * [0, 0]
        * @see https://echarts.apache.org/en/option.html#series-custom.renderItem.return_path.position
        */
      var position: js.UndefOr[js.Array[_]] = js.native
      
      /**
        * `2D transform` can be applied to graphic elements, including:
        *
        * + [position](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_polygon.position)
        * : `[horizontal translate offset, vertical translate offset]`,
        * `[0, 0]` by default.
        * Positive value means translate towards right or bottom.
        * + [rotation](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_polygon.rotation)
        * : Rotation in radian, `0` by default.
        * Positive when anticlockwise.
        * + [scale](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_polygon.scale)
        * : `[horizontal scale factor, vertical scale factor]`,
        * `[1, 1]` by default.
        *
        * [origin](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_polygon.origin)
        * specifies the origin point of rotation and scaling, `[0,
        * 0]` by default.
        *
        * Notice:
        *
        * + The coordinates specified in the transform attribute
        * above are relative to the `[0, 0]` of the parent element
        * (that is,
        * [group](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_group)
        * or the root canvas). Thus we are able to
        * [group](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_group)
        * multiple elements, and
        * [groups](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_group)
        * can be nested.
        * + The order that the transform attributes are applied
        * to a single graphic element is: Firstly, `rotation`,
        * then, `scale`, finally, `position`.
        *
        *
        * @see https://echarts.apache.org/en/option.html#series-custom.renderItem.return_path.rotation
        */
      var rotation: js.UndefOr[Double] = js.native
      
      /**
        * `2D transform` can be applied to graphic elements, including:
        *
        * + [position](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_polygon.position)
        * : `[horizontal translate offset, vertical translate offset]`,
        * `[0, 0]` by default.
        * Positive value means translate towards right or bottom.
        * + [rotation](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_polygon.rotation)
        * : Rotation in radian, `0` by default.
        * Positive when anticlockwise.
        * + [scale](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_polygon.scale)
        * : `[horizontal scale factor, vertical scale factor]`,
        * `[1, 1]` by default.
        *
        * [origin](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_polygon.origin)
        * specifies the origin point of rotation and scaling, `[0,
        * 0]` by default.
        *
        * Notice:
        *
        * + The coordinates specified in the transform attribute
        * above are relative to the `[0, 0]` of the parent element
        * (that is,
        * [group](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_group)
        * or the root canvas). Thus we are able to
        * [group](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_group)
        * multiple elements, and
        * [groups](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_group)
        * can be nested.
        * + The order that the transform attributes are applied
        * to a single graphic element is: Firstly, `rotation`,
        * then, `scale`, finally, `position`.
        *
        *
        * @default
        * [1, 1]
        * @see https://echarts.apache.org/en/option.html#series-custom.renderItem.return_path.scale
        */
      var scale: js.UndefOr[js.Array[_]] = js.native
      
      /**
        * @see https://echarts.apache.org/en/option.html#series-custom.renderItem.return_path.shape
        */
      var shape: js.UndefOr[D] = js.native
      
      /**
        * Whether response to mouse events / touch events.
        *
        *
        * @see https://echarts.apache.org/en/option.html#series-custom.renderItem.return_path.silent
        */
      var silent: js.UndefOr[Boolean] = js.native
      
      /**
        * More attributes in `style` (for example,
        * [rich text](https://echarts.apache.org/en/tutorial.html#Rich%20Text)
        * ), see the `style` related attributes in
        * [zrender/graphic/Displayable](https://ecomfe.github.io/zrender-doc/public/api.html#zrenderdisplayable)
        * .
        *
        * Notice, the attribute names of the `style` of graphic
        * elements is derived from `zrender`, which may be different
        * from the attribute names in `echarts label`, `echarts
        * itemStyle`, etc.,
        * although they have the same meaning. For example:
        *
        * + [itemStyle.color](https://echarts.apache.org/en/option.html#series-scatter.label.color)
        * => `style.fill`
        * + [itemStyle.borderColor](https://echarts.apache.org/en/option.html#series-scatter.label.color)
        * => `style.stroke`
        * + [label.color](https://echarts.apache.org/en/option.html#series-scatter.label.color)
        * => `style.textFill`
        * + [label.textBorderColor](https://echarts.apache.org/en/option.html#series-scatter.label.textBorderColor)
        * => `style.textStroke`
        * + ...
        *
        *
        * @see https://echarts.apache.org/en/option.html#series-custom.renderItem.return_path.style
        */
      var style: js.UndefOr[Fill] = js.native
      
      /**
        * Empahsis style of the graphic element, whose structure
        * is the same as
        * [style](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_polygon.style)
        * .
        *
        *
        * @see https://echarts.apache.org/en/option.html#series-custom.renderItem.return_path.styleEmphasis
        */
      var styleEmphasis: js.UndefOr[js.Object] = js.native
      
      /**
        * Must be specified when define a graphic element at the
        * first time.
        *
        * Optional values:
        *
        * [image](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_image)
        * ,
        * [text](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_text)
        * ,
        * [circle](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_circle)
        * ,
        * [sector](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_sector)
        * ,
        * [ring](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_ring)
        * ,
        * [polygon](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_polygon)
        * ,
        * [polyline](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_polyline)
        * ,
        * [rect](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_rect)
        * ,
        * [line](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_line)
        * ,
        * [bezierCurve](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_bezierCurve)
        * ,
        * [arc](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_arc)
        * ,
        * [group](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_group)
        * ,
        *
        *
        * @default
        * "path"
        * @see https://echarts.apache.org/en/option.html#series-custom.renderItem.return_path.type
        */
      var `type`: js.UndefOr[String] = js.native
      
      /**
        * Define the overlap relationship between graphic elements.
        *
        *
        * @default
        * "undefined"
        * @see https://echarts.apache.org/en/option.html#series-custom.renderItem.return_path.z2
        */
      var z2: js.UndefOr[Double] = js.native
    }
    object RenderItemReturnPath {
      
      @scala.inline
      def apply(): RenderItemReturnPath = {
        val __obj = js.Dynamic.literal()
        __obj.asInstanceOf[RenderItemReturnPath]
      }
      
      @scala.inline
      implicit class RenderItemReturnPathMutableBuilder[Self <: RenderItemReturnPath] (val x: Self) extends AnyVal {
        
        @scala.inline
        def setId(value: String): Self = StObject.set(x, "id", value.asInstanceOf[js.Any])
        
        @scala.inline
        def setIdUndefined: Self = StObject.set(x, "id", js.undefined)
        
        @scala.inline
        def setIgnore(value: Boolean): Self = StObject.set(x, "ignore", value.asInstanceOf[js.Any])
        
        @scala.inline
        def setIgnoreUndefined: Self = StObject.set(x, "ignore", js.undefined)
        
        @scala.inline
        def setInfo(value: js.Any): Self = StObject.set(x, "info", value.asInstanceOf[js.Any])
        
        @scala.inline
        def setInfoUndefined: Self = StObject.set(x, "info", js.undefined)
        
        @scala.inline
        def setInvisible(value: Boolean): Self = StObject.set(x, "invisible", value.asInstanceOf[js.Any])
        
        @scala.inline
        def setInvisibleUndefined: Self = StObject.set(x, "invisible", js.undefined)
        
        @scala.inline
        def setName(value: String): Self = StObject.set(x, "name", value.asInstanceOf[js.Any])
        
        @scala.inline
        def setNameUndefined: Self = StObject.set(x, "name", js.undefined)
        
        @scala.inline
        def setOrigin(value: Double): Self = StObject.set(x, "origin", value.asInstanceOf[js.Any])
        
        @scala.inline
        def setOriginUndefined: Self = StObject.set(x, "origin", js.undefined)
        
        @scala.inline
        def setPosition(value: js.Array[_]): Self = StObject.set(x, "position", value.asInstanceOf[js.Any])
        
        @scala.inline
        def setPositionUndefined: Self = StObject.set(x, "position", js.undefined)
        
        @scala.inline
        def setPositionVarargs(value: js.Any*): Self = StObject.set(x, "position", js.Array(value :_*))
        
        @scala.inline
        def setRotation(value: Double): Self = StObject.set(x, "rotation", value.asInstanceOf[js.Any])
        
        @scala.inline
        def setRotationUndefined: Self = StObject.set(x, "rotation", js.undefined)
        
        @scala.inline
        def setScale(value: js.Array[_]): Self = StObject.set(x, "scale", value.asInstanceOf[js.Any])
        
        @scala.inline
        def setScaleUndefined: Self = StObject.set(x, "scale", js.undefined)
        
        @scala.inline
        def setScaleVarargs(value: js.Any*): Self = StObject.set(x, "scale", js.Array(value :_*))
        
        @scala.inline
        def setShape(value: D): Self = StObject.set(x, "shape", value.asInstanceOf[js.Any])
        
        @scala.inline
        def setShapeUndefined: Self = StObject.set(x, "shape", js.undefined)
        
        @scala.inline
        def setSilent(value: Boolean): Self = StObject.set(x, "silent", value.asInstanceOf[js.Any])
        
        @scala.inline
        def setSilentUndefined: Self = StObject.set(x, "silent", js.undefined)
        
        @scala.inline
        def setStyle(value: Fill): Self = StObject.set(x, "style", value.asInstanceOf[js.Any])
        
        @scala.inline
        def setStyleEmphasis(value: js.Object): Self = StObject.set(x, "styleEmphasis", value.asInstanceOf[js.Any])
        
        @scala.inline
        def setStyleEmphasisUndefined: Self = StObject.set(x, "styleEmphasis", js.undefined)
        
        @scala.inline
        def setStyleUndefined: Self = StObject.set(x, "style", js.undefined)
        
        @scala.inline
        def setType(value: String): Self = StObject.set(x, "type", value.asInstanceOf[js.Any])
        
        @scala.inline
        def setTypeUndefined: Self = StObject.set(x, "type", js.undefined)
        
        @scala.inline
        def setZ2(value: Double): Self = StObject.set(x, "z2", value.asInstanceOf[js.Any])
        
        @scala.inline
        def setZ2Undefined: Self = StObject.set(x, "z2", js.undefined)
      }
    }
    
    /**
      * Polygon element.
      *
      *
      * @see https://echarts.apache.org/en/option.html#series-custom.renderItem.return_polygon
      */
    @js.native
    trait RenderItemReturnPolygon extends StObject {
      
      /**
        * id is used to specifying element when willing to update
        * it. id can be ignored if you do not need it.
        *
        *
        * @default
        * "undefined"
        * @see https://echarts.apache.org/en/option.html#series-custom.renderItem.return_polygon.id
        */
      var id: js.UndefOr[String] = js.native
      
      /**
        * Whether the element is totally ignored (neither render
        * nor listen events).
        *
        *
        * @see https://echarts.apache.org/en/option.html#series-custom.renderItem.return_polygon.ignore
        */
      var ignore: js.UndefOr[Boolean] = js.native
      
      /**
        * User defined data, can be visited in event listeners.
        *
        * [see doc](https://echarts.apache.org/en/option.html#series-custom.custom.renderItem.return_polygon)
        *
        *
        * @see https://echarts.apache.org/en/option.html#series-custom.renderItem.return_polygon.info
        */
      var info: js.UndefOr[js.Any] = js.native
      
      /**
        * Whether the element is visible.
        *
        *
        * @see https://echarts.apache.org/en/option.html#series-custom.renderItem.return_polygon.invisible
        */
      var invisible: js.UndefOr[Boolean] = js.native
      
      /**
        * See
        * [diffChildrenByName](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_polygon.diffChildrenByName)
        * 。
        *
        *
        * @default
        * "undefined"
        * @see https://echarts.apache.org/en/option.html#series-custom.renderItem.return_polygon.name
        */
      var name: js.UndefOr[String] = js.native
      
      /**
        * `2D transform` can be applied to graphic elements, including:
        *
        * + [position](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_polygon.position)
        * : `[horizontal translate offset, vertical translate offset]`,
        * `[0, 0]` by default.
        * Positive value means translate towards right or bottom.
        * + [rotation](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_polygon.rotation)
        * : Rotation in radian, `0` by default.
        * Positive when anticlockwise.
        * + [scale](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_polygon.scale)
        * : `[horizontal scale factor, vertical scale factor]`,
        * `[1, 1]` by default.
        *
        * [origin](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_polygon.origin)
        * specifies the origin point of rotation and scaling, `[0,
        * 0]` by default.
        *
        * Notice:
        *
        * + The coordinates specified in the transform attribute
        * above are relative to the `[0, 0]` of the parent element
        * (that is,
        * [group](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_group)
        * or the root canvas). Thus we are able to
        * [group](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_group)
        * multiple elements, and
        * [groups](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_group)
        * can be nested.
        * + The order that the transform attributes are applied
        * to a single graphic element is: Firstly, `rotation`,
        * then, `scale`, finally, `position`.
        *
        *
        * @default
        * [0, 0]
        * @see https://echarts.apache.org/en/option.html#series-custom.renderItem.return_polygon.origin
        */
      var origin: js.UndefOr[Double] = js.native
      
      /**
        * `2D transform` can be applied to graphic elements, including:
        *
        * + [position](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_polygon.position)
        * : `[horizontal translate offset, vertical translate offset]`,
        * `[0, 0]` by default.
        * Positive value means translate towards right or bottom.
        * + [rotation](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_polygon.rotation)
        * : Rotation in radian, `0` by default.
        * Positive when anticlockwise.
        * + [scale](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_polygon.scale)
        * : `[horizontal scale factor, vertical scale factor]`,
        * `[1, 1]` by default.
        *
        * [origin](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_polygon.origin)
        * specifies the origin point of rotation and scaling, `[0,
        * 0]` by default.
        *
        * Notice:
        *
        * + The coordinates specified in the transform attribute
        * above are relative to the `[0, 0]` of the parent element
        * (that is,
        * [group](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_group)
        * or the root canvas). Thus we are able to
        * [group](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_group)
        * multiple elements, and
        * [groups](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_group)
        * can be nested.
        * + The order that the transform attributes are applied
        * to a single graphic element is: Firstly, `rotation`,
        * then, `scale`, finally, `position`.
        *
        *
        * @default
        * [0, 0]
        * @see https://echarts.apache.org/en/option.html#series-custom.renderItem.return_polygon.position
        */
      var position: js.UndefOr[js.Array[_]] = js.native
      
      /**
        * `2D transform` can be applied to graphic elements, including:
        *
        * + [position](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_polygon.position)
        * : `[horizontal translate offset, vertical translate offset]`,
        * `[0, 0]` by default.
        * Positive value means translate towards right or bottom.
        * + [rotation](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_polygon.rotation)
        * : Rotation in radian, `0` by default.
        * Positive when anticlockwise.
        * + [scale](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_polygon.scale)
        * : `[horizontal scale factor, vertical scale factor]`,
        * `[1, 1]` by default.
        *
        * [origin](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_polygon.origin)
        * specifies the origin point of rotation and scaling, `[0,
        * 0]` by default.
        *
        * Notice:
        *
        * + The coordinates specified in the transform attribute
        * above are relative to the `[0, 0]` of the parent element
        * (that is,
        * [group](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_group)
        * or the root canvas). Thus we are able to
        * [group](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_group)
        * multiple elements, and
        * [groups](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_group)
        * can be nested.
        * + The order that the transform attributes are applied
        * to a single graphic element is: Firstly, `rotation`,
        * then, `scale`, finally, `position`.
        *
        *
        * @see https://echarts.apache.org/en/option.html#series-custom.renderItem.return_polygon.rotation
        */
      var rotation: js.UndefOr[Double] = js.native
      
      /**
        * `2D transform` can be applied to graphic elements, including:
        *
        * + [position](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_polygon.position)
        * : `[horizontal translate offset, vertical translate offset]`,
        * `[0, 0]` by default.
        * Positive value means translate towards right or bottom.
        * + [rotation](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_polygon.rotation)
        * : Rotation in radian, `0` by default.
        * Positive when anticlockwise.
        * + [scale](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_polygon.scale)
        * : `[horizontal scale factor, vertical scale factor]`,
        * `[1, 1]` by default.
        *
        * [origin](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_polygon.origin)
        * specifies the origin point of rotation and scaling, `[0,
        * 0]` by default.
        *
        * Notice:
        *
        * + The coordinates specified in the transform attribute
        * above are relative to the `[0, 0]` of the parent element
        * (that is,
        * [group](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_group)
        * or the root canvas). Thus we are able to
        * [group](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_group)
        * multiple elements, and
        * [groups](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_group)
        * can be nested.
        * + The order that the transform attributes are applied
        * to a single graphic element is: Firstly, `rotation`,
        * then, `scale`, finally, `position`.
        *
        *
        * @default
        * [1, 1]
        * @see https://echarts.apache.org/en/option.html#series-custom.renderItem.return_polygon.scale
        */
      var scale: js.UndefOr[js.Array[_]] = js.native
      
      /**
        * @see https://echarts.apache.org/en/option.html#series-custom.renderItem.return_polygon.shape
        */
      var shape: js.UndefOr[Points] = js.native
      
      /**
        * Whether response to mouse events / touch events.
        *
        *
        * @see https://echarts.apache.org/en/option.html#series-custom.renderItem.return_polygon.silent
        */
      var silent: js.UndefOr[Boolean] = js.native
      
      /**
        * More attributes in `style` (for example,
        * [rich text](https://echarts.apache.org/en/tutorial.html#Rich%20Text)
        * ), see the `style` related attributes in
        * [zrender/graphic/Displayable](https://ecomfe.github.io/zrender-doc/public/api.html#zrenderdisplayable)
        * .
        *
        * Notice, the attribute names of the `style` of graphic
        * elements is derived from `zrender`, which may be different
        * from the attribute names in `echarts label`, `echarts
        * itemStyle`, etc.,
        * although they have the same meaning. For example:
        *
        * + [itemStyle.color](https://echarts.apache.org/en/option.html#series-scatter.label.color)
        * => `style.fill`
        * + [itemStyle.borderColor](https://echarts.apache.org/en/option.html#series-scatter.label.color)
        * => `style.stroke`
        * + [label.color](https://echarts.apache.org/en/option.html#series-scatter.label.color)
        * => `style.textFill`
        * + [label.textBorderColor](https://echarts.apache.org/en/option.html#series-scatter.label.textBorderColor)
        * => `style.textStroke`
        * + ...
        *
        *
        * @see https://echarts.apache.org/en/option.html#series-custom.renderItem.return_polygon.style
        */
      var style: js.UndefOr[Fill] = js.native
      
      /**
        * Empahsis style of the graphic element, whose structure
        * is the same as
        * [style](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_polygon.style)
        * .
        *
        *
        * @see https://echarts.apache.org/en/option.html#series-custom.renderItem.return_polygon.styleEmphasis
        */
      var styleEmphasis: js.UndefOr[js.Object] = js.native
      
      /**
        * Must be specified when define a graphic element at the
        * first time.
        *
        * Optional values:
        *
        * [image](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_image)
        * ,
        * [text](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_text)
        * ,
        * [circle](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_circle)
        * ,
        * [sector](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_sector)
        * ,
        * [ring](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_ring)
        * ,
        * [polygon](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_polygon)
        * ,
        * [polyline](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_polyline)
        * ,
        * [rect](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_rect)
        * ,
        * [line](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_line)
        * ,
        * [bezierCurve](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_bezierCurve)
        * ,
        * [arc](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_arc)
        * ,
        * [group](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_group)
        * ,
        *
        *
        * @default
        * "polygon"
        * @see https://echarts.apache.org/en/option.html#series-custom.renderItem.return_polygon.type
        */
      var `type`: js.UndefOr[String] = js.native
      
      /**
        * Define the overlap relationship between graphic elements.
        *
        *
        * @default
        * "undefined"
        * @see https://echarts.apache.org/en/option.html#series-custom.renderItem.return_polygon.z2
        */
      var z2: js.UndefOr[Double] = js.native
    }
    object RenderItemReturnPolygon {
      
      @scala.inline
      def apply(): RenderItemReturnPolygon = {
        val __obj = js.Dynamic.literal()
        __obj.asInstanceOf[RenderItemReturnPolygon]
      }
      
      @scala.inline
      implicit class RenderItemReturnPolygonMutableBuilder[Self <: RenderItemReturnPolygon] (val x: Self) extends AnyVal {
        
        @scala.inline
        def setId(value: String): Self = StObject.set(x, "id", value.asInstanceOf[js.Any])
        
        @scala.inline
        def setIdUndefined: Self = StObject.set(x, "id", js.undefined)
        
        @scala.inline
        def setIgnore(value: Boolean): Self = StObject.set(x, "ignore", value.asInstanceOf[js.Any])
        
        @scala.inline
        def setIgnoreUndefined: Self = StObject.set(x, "ignore", js.undefined)
        
        @scala.inline
        def setInfo(value: js.Any): Self = StObject.set(x, "info", value.asInstanceOf[js.Any])
        
        @scala.inline
        def setInfoUndefined: Self = StObject.set(x, "info", js.undefined)
        
        @scala.inline
        def setInvisible(value: Boolean): Self = StObject.set(x, "invisible", value.asInstanceOf[js.Any])
        
        @scala.inline
        def setInvisibleUndefined: Self = StObject.set(x, "invisible", js.undefined)
        
        @scala.inline
        def setName(value: String): Self = StObject.set(x, "name", value.asInstanceOf[js.Any])
        
        @scala.inline
        def setNameUndefined: Self = StObject.set(x, "name", js.undefined)
        
        @scala.inline
        def setOrigin(value: Double): Self = StObject.set(x, "origin", value.asInstanceOf[js.Any])
        
        @scala.inline
        def setOriginUndefined: Self = StObject.set(x, "origin", js.undefined)
        
        @scala.inline
        def setPosition(value: js.Array[_]): Self = StObject.set(x, "position", value.asInstanceOf[js.Any])
        
        @scala.inline
        def setPositionUndefined: Self = StObject.set(x, "position", js.undefined)
        
        @scala.inline
        def setPositionVarargs(value: js.Any*): Self = StObject.set(x, "position", js.Array(value :_*))
        
        @scala.inline
        def setRotation(value: Double): Self = StObject.set(x, "rotation", value.asInstanceOf[js.Any])
        
        @scala.inline
        def setRotationUndefined: Self = StObject.set(x, "rotation", js.undefined)
        
        @scala.inline
        def setScale(value: js.Array[_]): Self = StObject.set(x, "scale", value.asInstanceOf[js.Any])
        
        @scala.inline
        def setScaleUndefined: Self = StObject.set(x, "scale", js.undefined)
        
        @scala.inline
        def setScaleVarargs(value: js.Any*): Self = StObject.set(x, "scale", js.Array(value :_*))
        
        @scala.inline
        def setShape(value: Points): Self = StObject.set(x, "shape", value.asInstanceOf[js.Any])
        
        @scala.inline
        def setShapeUndefined: Self = StObject.set(x, "shape", js.undefined)
        
        @scala.inline
        def setSilent(value: Boolean): Self = StObject.set(x, "silent", value.asInstanceOf[js.Any])
        
        @scala.inline
        def setSilentUndefined: Self = StObject.set(x, "silent", js.undefined)
        
        @scala.inline
        def setStyle(value: Fill): Self = StObject.set(x, "style", value.asInstanceOf[js.Any])
        
        @scala.inline
        def setStyleEmphasis(value: js.Object): Self = StObject.set(x, "styleEmphasis", value.asInstanceOf[js.Any])
        
        @scala.inline
        def setStyleEmphasisUndefined: Self = StObject.set(x, "styleEmphasis", js.undefined)
        
        @scala.inline
        def setStyleUndefined: Self = StObject.set(x, "style", js.undefined)
        
        @scala.inline
        def setType(value: String): Self = StObject.set(x, "type", value.asInstanceOf[js.Any])
        
        @scala.inline
        def setTypeUndefined: Self = StObject.set(x, "type", js.undefined)
        
        @scala.inline
        def setZ2(value: Double): Self = StObject.set(x, "z2", value.asInstanceOf[js.Any])
        
        @scala.inline
        def setZ2Undefined: Self = StObject.set(x, "z2", js.undefined)
      }
    }
    
    /**
      * Polyline element.
      *
      *
      * @see https://echarts.apache.org/en/option.html#series-custom.renderItem.return_polyline
      */
    @js.native
    trait RenderItemReturnPolyline extends StObject {
      
      /**
        * id is used to specifying element when willing to update
        * it. id can be ignored if you do not need it.
        *
        *
        * @default
        * "undefined"
        * @see https://echarts.apache.org/en/option.html#series-custom.renderItem.return_polyline.id
        */
      var id: js.UndefOr[String] = js.native
      
      /**
        * Whether the element is totally ignored (neither render
        * nor listen events).
        *
        *
        * @see https://echarts.apache.org/en/option.html#series-custom.renderItem.return_polyline.ignore
        */
      var ignore: js.UndefOr[Boolean] = js.native
      
      /**
        * User defined data, can be visited in event listeners.
        *
        * [see doc](https://echarts.apache.org/en/option.html#series-custom.custom.renderItem.return_polyline)
        *
        *
        * @see https://echarts.apache.org/en/option.html#series-custom.renderItem.return_polyline.info
        */
      var info: js.UndefOr[js.Any] = js.native
      
      /**
        * Whether the element is visible.
        *
        *
        * @see https://echarts.apache.org/en/option.html#series-custom.renderItem.return_polyline.invisible
        */
      var invisible: js.UndefOr[Boolean] = js.native
      
      /**
        * See
        * [diffChildrenByName](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_polygon.diffChildrenByName)
        * 。
        *
        *
        * @default
        * "undefined"
        * @see https://echarts.apache.org/en/option.html#series-custom.renderItem.return_polyline.name
        */
      var name: js.UndefOr[String] = js.native
      
      /**
        * `2D transform` can be applied to graphic elements, including:
        *
        * + [position](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_polygon.position)
        * : `[horizontal translate offset, vertical translate offset]`,
        * `[0, 0]` by default.
        * Positive value means translate towards right or bottom.
        * + [rotation](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_polygon.rotation)
        * : Rotation in radian, `0` by default.
        * Positive when anticlockwise.
        * + [scale](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_polygon.scale)
        * : `[horizontal scale factor, vertical scale factor]`,
        * `[1, 1]` by default.
        *
        * [origin](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_polygon.origin)
        * specifies the origin point of rotation and scaling, `[0,
        * 0]` by default.
        *
        * Notice:
        *
        * + The coordinates specified in the transform attribute
        * above are relative to the `[0, 0]` of the parent element
        * (that is,
        * [group](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_group)
        * or the root canvas). Thus we are able to
        * [group](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_group)
        * multiple elements, and
        * [groups](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_group)
        * can be nested.
        * + The order that the transform attributes are applied
        * to a single graphic element is: Firstly, `rotation`,
        * then, `scale`, finally, `position`.
        *
        *
        * @default
        * [0, 0]
        * @see https://echarts.apache.org/en/option.html#series-custom.renderItem.return_polyline.origin
        */
      var origin: js.UndefOr[Double] = js.native
      
      /**
        * `2D transform` can be applied to graphic elements, including:
        *
        * + [position](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_polygon.position)
        * : `[horizontal translate offset, vertical translate offset]`,
        * `[0, 0]` by default.
        * Positive value means translate towards right or bottom.
        * + [rotation](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_polygon.rotation)
        * : Rotation in radian, `0` by default.
        * Positive when anticlockwise.
        * + [scale](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_polygon.scale)
        * : `[horizontal scale factor, vertical scale factor]`,
        * `[1, 1]` by default.
        *
        * [origin](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_polygon.origin)
        * specifies the origin point of rotation and scaling, `[0,
        * 0]` by default.
        *
        * Notice:
        *
        * + The coordinates specified in the transform attribute
        * above are relative to the `[0, 0]` of the parent element
        * (that is,
        * [group](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_group)
        * or the root canvas). Thus we are able to
        * [group](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_group)
        * multiple elements, and
        * [groups](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_group)
        * can be nested.
        * + The order that the transform attributes are applied
        * to a single graphic element is: Firstly, `rotation`,
        * then, `scale`, finally, `position`.
        *
        *
        * @default
        * [0, 0]
        * @see https://echarts.apache.org/en/option.html#series-custom.renderItem.return_polyline.position
        */
      var position: js.UndefOr[js.Array[_]] = js.native
      
      /**
        * `2D transform` can be applied to graphic elements, including:
        *
        * + [position](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_polygon.position)
        * : `[horizontal translate offset, vertical translate offset]`,
        * `[0, 0]` by default.
        * Positive value means translate towards right or bottom.
        * + [rotation](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_polygon.rotation)
        * : Rotation in radian, `0` by default.
        * Positive when anticlockwise.
        * + [scale](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_polygon.scale)
        * : `[horizontal scale factor, vertical scale factor]`,
        * `[1, 1]` by default.
        *
        * [origin](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_polygon.origin)
        * specifies the origin point of rotation and scaling, `[0,
        * 0]` by default.
        *
        * Notice:
        *
        * + The coordinates specified in the transform attribute
        * above are relative to the `[0, 0]` of the parent element
        * (that is,
        * [group](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_group)
        * or the root canvas). Thus we are able to
        * [group](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_group)
        * multiple elements, and
        * [groups](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_group)
        * can be nested.
        * + The order that the transform attributes are applied
        * to a single graphic element is: Firstly, `rotation`,
        * then, `scale`, finally, `position`.
        *
        *
        * @see https://echarts.apache.org/en/option.html#series-custom.renderItem.return_polyline.rotation
        */
      var rotation: js.UndefOr[Double] = js.native
      
      /**
        * `2D transform` can be applied to graphic elements, including:
        *
        * + [position](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_polygon.position)
        * : `[horizontal translate offset, vertical translate offset]`,
        * `[0, 0]` by default.
        * Positive value means translate towards right or bottom.
        * + [rotation](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_polygon.rotation)
        * : Rotation in radian, `0` by default.
        * Positive when anticlockwise.
        * + [scale](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_polygon.scale)
        * : `[horizontal scale factor, vertical scale factor]`,
        * `[1, 1]` by default.
        *
        * [origin](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_polygon.origin)
        * specifies the origin point of rotation and scaling, `[0,
        * 0]` by default.
        *
        * Notice:
        *
        * + The coordinates specified in the transform attribute
        * above are relative to the `[0, 0]` of the parent element
        * (that is,
        * [group](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_group)
        * or the root canvas). Thus we are able to
        * [group](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_group)
        * multiple elements, and
        * [groups](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_group)
        * can be nested.
        * + The order that the transform attributes are applied
        * to a single graphic element is: Firstly, `rotation`,
        * then, `scale`, finally, `position`.
        *
        *
        * @default
        * [1, 1]
        * @see https://echarts.apache.org/en/option.html#series-custom.renderItem.return_polyline.scale
        */
      var scale: js.UndefOr[js.Array[_]] = js.native
      
      /**
        * @see https://echarts.apache.org/en/option.html#series-custom.renderItem.return_polyline.shape
        */
      var shape: js.UndefOr[Points] = js.native
      
      /**
        * Whether response to mouse events / touch events.
        *
        *
        * @see https://echarts.apache.org/en/option.html#series-custom.renderItem.return_polyline.silent
        */
      var silent: js.UndefOr[Boolean] = js.native
      
      /**
        * More attributes in `style` (for example,
        * [rich text](https://echarts.apache.org/en/tutorial.html#Rich%20Text)
        * ), see the `style` related attributes in
        * [zrender/graphic/Displayable](https://ecomfe.github.io/zrender-doc/public/api.html#zrenderdisplayable)
        * .
        *
        * Notice, the attribute names of the `style` of graphic
        * elements is derived from `zrender`, which may be different
        * from the attribute names in `echarts label`, `echarts
        * itemStyle`, etc.,
        * although they have the same meaning. For example:
        *
        * + [itemStyle.color](https://echarts.apache.org/en/option.html#series-scatter.label.color)
        * => `style.fill`
        * + [itemStyle.borderColor](https://echarts.apache.org/en/option.html#series-scatter.label.color)
        * => `style.stroke`
        * + [label.color](https://echarts.apache.org/en/option.html#series-scatter.label.color)
        * => `style.textFill`
        * + [label.textBorderColor](https://echarts.apache.org/en/option.html#series-scatter.label.textBorderColor)
        * => `style.textStroke`
        * + ...
        *
        *
        * @see https://echarts.apache.org/en/option.html#series-custom.renderItem.return_polyline.style
        */
      var style: js.UndefOr[Fill] = js.native
      
      /**
        * Empahsis style of the graphic element, whose structure
        * is the same as
        * [style](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_polygon.style)
        * .
        *
        *
        * @see https://echarts.apache.org/en/option.html#series-custom.renderItem.return_polyline.styleEmphasis
        */
      var styleEmphasis: js.UndefOr[js.Object] = js.native
      
      /**
        * Must be specified when define a graphic element at the
        * first time.
        *
        * Optional values:
        *
        * [image](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_image)
        * ,
        * [text](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_text)
        * ,
        * [circle](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_circle)
        * ,
        * [sector](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_sector)
        * ,
        * [ring](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_ring)
        * ,
        * [polygon](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_polygon)
        * ,
        * [polyline](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_polyline)
        * ,
        * [rect](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_rect)
        * ,
        * [line](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_line)
        * ,
        * [bezierCurve](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_bezierCurve)
        * ,
        * [arc](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_arc)
        * ,
        * [group](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_group)
        * ,
        *
        *
        * @default
        * "polyline"
        * @see https://echarts.apache.org/en/option.html#series-custom.renderItem.return_polyline.type
        */
      var `type`: js.UndefOr[String] = js.native
      
      /**
        * Define the overlap relationship between graphic elements.
        *
        *
        * @default
        * "undefined"
        * @see https://echarts.apache.org/en/option.html#series-custom.renderItem.return_polyline.z2
        */
      var z2: js.UndefOr[Double] = js.native
    }
    object RenderItemReturnPolyline {
      
      @scala.inline
      def apply(): RenderItemReturnPolyline = {
        val __obj = js.Dynamic.literal()
        __obj.asInstanceOf[RenderItemReturnPolyline]
      }
      
      @scala.inline
      implicit class RenderItemReturnPolylineMutableBuilder[Self <: RenderItemReturnPolyline] (val x: Self) extends AnyVal {
        
        @scala.inline
        def setId(value: String): Self = StObject.set(x, "id", value.asInstanceOf[js.Any])
        
        @scala.inline
        def setIdUndefined: Self = StObject.set(x, "id", js.undefined)
        
        @scala.inline
        def setIgnore(value: Boolean): Self = StObject.set(x, "ignore", value.asInstanceOf[js.Any])
        
        @scala.inline
        def setIgnoreUndefined: Self = StObject.set(x, "ignore", js.undefined)
        
        @scala.inline
        def setInfo(value: js.Any): Self = StObject.set(x, "info", value.asInstanceOf[js.Any])
        
        @scala.inline
        def setInfoUndefined: Self = StObject.set(x, "info", js.undefined)
        
        @scala.inline
        def setInvisible(value: Boolean): Self = StObject.set(x, "invisible", value.asInstanceOf[js.Any])
        
        @scala.inline
        def setInvisibleUndefined: Self = StObject.set(x, "invisible", js.undefined)
        
        @scala.inline
        def setName(value: String): Self = StObject.set(x, "name", value.asInstanceOf[js.Any])
        
        @scala.inline
        def setNameUndefined: Self = StObject.set(x, "name", js.undefined)
        
        @scala.inline
        def setOrigin(value: Double): Self = StObject.set(x, "origin", value.asInstanceOf[js.Any])
        
        @scala.inline
        def setOriginUndefined: Self = StObject.set(x, "origin", js.undefined)
        
        @scala.inline
        def setPosition(value: js.Array[_]): Self = StObject.set(x, "position", value.asInstanceOf[js.Any])
        
        @scala.inline
        def setPositionUndefined: Self = StObject.set(x, "position", js.undefined)
        
        @scala.inline
        def setPositionVarargs(value: js.Any*): Self = StObject.set(x, "position", js.Array(value :_*))
        
        @scala.inline
        def setRotation(value: Double): Self = StObject.set(x, "rotation", value.asInstanceOf[js.Any])
        
        @scala.inline
        def setRotationUndefined: Self = StObject.set(x, "rotation", js.undefined)
        
        @scala.inline
        def setScale(value: js.Array[_]): Self = StObject.set(x, "scale", value.asInstanceOf[js.Any])
        
        @scala.inline
        def setScaleUndefined: Self = StObject.set(x, "scale", js.undefined)
        
        @scala.inline
        def setScaleVarargs(value: js.Any*): Self = StObject.set(x, "scale", js.Array(value :_*))
        
        @scala.inline
        def setShape(value: Points): Self = StObject.set(x, "shape", value.asInstanceOf[js.Any])
        
        @scala.inline
        def setShapeUndefined: Self = StObject.set(x, "shape", js.undefined)
        
        @scala.inline
        def setSilent(value: Boolean): Self = StObject.set(x, "silent", value.asInstanceOf[js.Any])
        
        @scala.inline
        def setSilentUndefined: Self = StObject.set(x, "silent", js.undefined)
        
        @scala.inline
        def setStyle(value: Fill): Self = StObject.set(x, "style", value.asInstanceOf[js.Any])
        
        @scala.inline
        def setStyleEmphasis(value: js.Object): Self = StObject.set(x, "styleEmphasis", value.asInstanceOf[js.Any])
        
        @scala.inline
        def setStyleEmphasisUndefined: Self = StObject.set(x, "styleEmphasis", js.undefined)
        
        @scala.inline
        def setStyleUndefined: Self = StObject.set(x, "style", js.undefined)
        
        @scala.inline
        def setType(value: String): Self = StObject.set(x, "type", value.asInstanceOf[js.Any])
        
        @scala.inline
        def setTypeUndefined: Self = StObject.set(x, "type", js.undefined)
        
        @scala.inline
        def setZ2(value: Double): Self = StObject.set(x, "z2", value.asInstanceOf[js.Any])
        
        @scala.inline
        def setZ2Undefined: Self = StObject.set(x, "z2", js.undefined)
      }
    }
    
    /**
      * Rectangle element.
      *
      *
      * @see https://echarts.apache.org/en/option.html#series-custom.renderItem.return_rect
      */
    @js.native
    trait RenderItemReturnRect extends StObject {
      
      /**
        * id is used to specifying element when willing to update
        * it. id can be ignored if you do not need it.
        *
        *
        * @default
        * "undefined"
        * @see https://echarts.apache.org/en/option.html#series-custom.renderItem.return_rect.id
        */
      var id: js.UndefOr[String] = js.native
      
      /**
        * Whether the element is totally ignored (neither render
        * nor listen events).
        *
        *
        * @see https://echarts.apache.org/en/option.html#series-custom.renderItem.return_rect.ignore
        */
      var ignore: js.UndefOr[Boolean] = js.native
      
      /**
        * User defined data, can be visited in event listeners.
        *
        * [see doc](https://echarts.apache.org/en/option.html#series-custom.custom.renderItem.return_rect)
        *
        *
        * @see https://echarts.apache.org/en/option.html#series-custom.renderItem.return_rect.info
        */
      var info: js.UndefOr[js.Any] = js.native
      
      /**
        * Whether the element is visible.
        *
        *
        * @see https://echarts.apache.org/en/option.html#series-custom.renderItem.return_rect.invisible
        */
      var invisible: js.UndefOr[Boolean] = js.native
      
      /**
        * See
        * [diffChildrenByName](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_polygon.diffChildrenByName)
        * 。
        *
        *
        * @default
        * "undefined"
        * @see https://echarts.apache.org/en/option.html#series-custom.renderItem.return_rect.name
        */
      var name: js.UndefOr[String] = js.native
      
      /**
        * `2D transform` can be applied to graphic elements, including:
        *
        * + [position](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_polygon.position)
        * : `[horizontal translate offset, vertical translate offset]`,
        * `[0, 0]` by default.
        * Positive value means translate towards right or bottom.
        * + [rotation](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_polygon.rotation)
        * : Rotation in radian, `0` by default.
        * Positive when anticlockwise.
        * + [scale](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_polygon.scale)
        * : `[horizontal scale factor, vertical scale factor]`,
        * `[1, 1]` by default.
        *
        * [origin](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_polygon.origin)
        * specifies the origin point of rotation and scaling, `[0,
        * 0]` by default.
        *
        * Notice:
        *
        * + The coordinates specified in the transform attribute
        * above are relative to the `[0, 0]` of the parent element
        * (that is,
        * [group](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_group)
        * or the root canvas). Thus we are able to
        * [group](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_group)
        * multiple elements, and
        * [groups](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_group)
        * can be nested.
        * + The order that the transform attributes are applied
        * to a single graphic element is: Firstly, `rotation`,
        * then, `scale`, finally, `position`.
        *
        *
        * @default
        * [0, 0]
        * @see https://echarts.apache.org/en/option.html#series-custom.renderItem.return_rect.origin
        */
      var origin: js.UndefOr[Double] = js.native
      
      /**
        * `2D transform` can be applied to graphic elements, including:
        *
        * + [position](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_polygon.position)
        * : `[horizontal translate offset, vertical translate offset]`,
        * `[0, 0]` by default.
        * Positive value means translate towards right or bottom.
        * + [rotation](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_polygon.rotation)
        * : Rotation in radian, `0` by default.
        * Positive when anticlockwise.
        * + [scale](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_polygon.scale)
        * : `[horizontal scale factor, vertical scale factor]`,
        * `[1, 1]` by default.
        *
        * [origin](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_polygon.origin)
        * specifies the origin point of rotation and scaling, `[0,
        * 0]` by default.
        *
        * Notice:
        *
        * + The coordinates specified in the transform attribute
        * above are relative to the `[0, 0]` of the parent element
        * (that is,
        * [group](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_group)
        * or the root canvas). Thus we are able to
        * [group](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_group)
        * multiple elements, and
        * [groups](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_group)
        * can be nested.
        * + The order that the transform attributes are applied
        * to a single graphic element is: Firstly, `rotation`,
        * then, `scale`, finally, `position`.
        *
        *
        * @default
        * [0, 0]
        * @see https://echarts.apache.org/en/option.html#series-custom.renderItem.return_rect.position
        */
      var position: js.UndefOr[js.Array[_]] = js.native
      
      /**
        * `2D transform` can be applied to graphic elements, including:
        *
        * + [position](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_polygon.position)
        * : `[horizontal translate offset, vertical translate offset]`,
        * `[0, 0]` by default.
        * Positive value means translate towards right or bottom.
        * + [rotation](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_polygon.rotation)
        * : Rotation in radian, `0` by default.
        * Positive when anticlockwise.
        * + [scale](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_polygon.scale)
        * : `[horizontal scale factor, vertical scale factor]`,
        * `[1, 1]` by default.
        *
        * [origin](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_polygon.origin)
        * specifies the origin point of rotation and scaling, `[0,
        * 0]` by default.
        *
        * Notice:
        *
        * + The coordinates specified in the transform attribute
        * above are relative to the `[0, 0]` of the parent element
        * (that is,
        * [group](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_group)
        * or the root canvas). Thus we are able to
        * [group](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_group)
        * multiple elements, and
        * [groups](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_group)
        * can be nested.
        * + The order that the transform attributes are applied
        * to a single graphic element is: Firstly, `rotation`,
        * then, `scale`, finally, `position`.
        *
        *
        * @see https://echarts.apache.org/en/option.html#series-custom.renderItem.return_rect.rotation
        */
      var rotation: js.UndefOr[Double] = js.native
      
      /**
        * `2D transform` can be applied to graphic elements, including:
        *
        * + [position](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_polygon.position)
        * : `[horizontal translate offset, vertical translate offset]`,
        * `[0, 0]` by default.
        * Positive value means translate towards right or bottom.
        * + [rotation](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_polygon.rotation)
        * : Rotation in radian, `0` by default.
        * Positive when anticlockwise.
        * + [scale](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_polygon.scale)
        * : `[horizontal scale factor, vertical scale factor]`,
        * `[1, 1]` by default.
        *
        * [origin](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_polygon.origin)
        * specifies the origin point of rotation and scaling, `[0,
        * 0]` by default.
        *
        * Notice:
        *
        * + The coordinates specified in the transform attribute
        * above are relative to the `[0, 0]` of the parent element
        * (that is,
        * [group](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_group)
        * or the root canvas). Thus we are able to
        * [group](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_group)
        * multiple elements, and
        * [groups](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_group)
        * can be nested.
        * + The order that the transform attributes are applied
        * to a single graphic element is: Firstly, `rotation`,
        * then, `scale`, finally, `position`.
        *
        *
        * @default
        * [1, 1]
        * @see https://echarts.apache.org/en/option.html#series-custom.renderItem.return_rect.scale
        */
      var scale: js.UndefOr[js.Array[_]] = js.native
      
      /**
        * @see https://echarts.apache.org/en/option.html#series-custom.renderItem.return_rect.shape
        */
      var shape: js.UndefOr[R] = js.native
      
      /**
        * Whether response to mouse events / touch events.
        *
        *
        * @see https://echarts.apache.org/en/option.html#series-custom.renderItem.return_rect.silent
        */
      var silent: js.UndefOr[Boolean] = js.native
      
      /**
        * More attributes in `style` (for example,
        * [rich text](https://echarts.apache.org/en/tutorial.html#Rich%20Text)
        * ), see the `style` related attributes in
        * [zrender/graphic/Displayable](https://ecomfe.github.io/zrender-doc/public/api.html#zrenderdisplayable)
        * .
        *
        * Notice, the attribute names of the `style` of graphic
        * elements is derived from `zrender`, which may be different
        * from the attribute names in `echarts label`, `echarts
        * itemStyle`, etc.,
        * although they have the same meaning. For example:
        *
        * + [itemStyle.color](https://echarts.apache.org/en/option.html#series-scatter.label.color)
        * => `style.fill`
        * + [itemStyle.borderColor](https://echarts.apache.org/en/option.html#series-scatter.label.color)
        * => `style.stroke`
        * + [label.color](https://echarts.apache.org/en/option.html#series-scatter.label.color)
        * => `style.textFill`
        * + [label.textBorderColor](https://echarts.apache.org/en/option.html#series-scatter.label.textBorderColor)
        * => `style.textStroke`
        * + ...
        *
        *
        * @see https://echarts.apache.org/en/option.html#series-custom.renderItem.return_rect.style
        */
      var style: js.UndefOr[Fill] = js.native
      
      /**
        * Empahsis style of the graphic element, whose structure
        * is the same as
        * [style](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_polygon.style)
        * .
        *
        *
        * @see https://echarts.apache.org/en/option.html#series-custom.renderItem.return_rect.styleEmphasis
        */
      var styleEmphasis: js.UndefOr[js.Object] = js.native
      
      /**
        * Must be specified when define a graphic element at the
        * first time.
        *
        * Optional values:
        *
        * [image](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_image)
        * ,
        * [text](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_text)
        * ,
        * [circle](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_circle)
        * ,
        * [sector](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_sector)
        * ,
        * [ring](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_ring)
        * ,
        * [polygon](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_polygon)
        * ,
        * [polyline](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_polyline)
        * ,
        * [rect](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_rect)
        * ,
        * [line](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_line)
        * ,
        * [bezierCurve](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_bezierCurve)
        * ,
        * [arc](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_arc)
        * ,
        * [group](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_group)
        * ,
        *
        *
        * @default
        * "rect"
        * @see https://echarts.apache.org/en/option.html#series-custom.renderItem.return_rect.type
        */
      var `type`: js.UndefOr[String] = js.native
      
      /**
        * Define the overlap relationship between graphic elements.
        *
        *
        * @default
        * "undefined"
        * @see https://echarts.apache.org/en/option.html#series-custom.renderItem.return_rect.z2
        */
      var z2: js.UndefOr[Double] = js.native
    }
    object RenderItemReturnRect {
      
      @scala.inline
      def apply(): RenderItemReturnRect = {
        val __obj = js.Dynamic.literal()
        __obj.asInstanceOf[RenderItemReturnRect]
      }
      
      @scala.inline
      implicit class RenderItemReturnRectMutableBuilder[Self <: RenderItemReturnRect] (val x: Self) extends AnyVal {
        
        @scala.inline
        def setId(value: String): Self = StObject.set(x, "id", value.asInstanceOf[js.Any])
        
        @scala.inline
        def setIdUndefined: Self = StObject.set(x, "id", js.undefined)
        
        @scala.inline
        def setIgnore(value: Boolean): Self = StObject.set(x, "ignore", value.asInstanceOf[js.Any])
        
        @scala.inline
        def setIgnoreUndefined: Self = StObject.set(x, "ignore", js.undefined)
        
        @scala.inline
        def setInfo(value: js.Any): Self = StObject.set(x, "info", value.asInstanceOf[js.Any])
        
        @scala.inline
        def setInfoUndefined: Self = StObject.set(x, "info", js.undefined)
        
        @scala.inline
        def setInvisible(value: Boolean): Self = StObject.set(x, "invisible", value.asInstanceOf[js.Any])
        
        @scala.inline
        def setInvisibleUndefined: Self = StObject.set(x, "invisible", js.undefined)
        
        @scala.inline
        def setName(value: String): Self = StObject.set(x, "name", value.asInstanceOf[js.Any])
        
        @scala.inline
        def setNameUndefined: Self = StObject.set(x, "name", js.undefined)
        
        @scala.inline
        def setOrigin(value: Double): Self = StObject.set(x, "origin", value.asInstanceOf[js.Any])
        
        @scala.inline
        def setOriginUndefined: Self = StObject.set(x, "origin", js.undefined)
        
        @scala.inline
        def setPosition(value: js.Array[_]): Self = StObject.set(x, "position", value.asInstanceOf[js.Any])
        
        @scala.inline
        def setPositionUndefined: Self = StObject.set(x, "position", js.undefined)
        
        @scala.inline
        def setPositionVarargs(value: js.Any*): Self = StObject.set(x, "position", js.Array(value :_*))
        
        @scala.inline
        def setRotation(value: Double): Self = StObject.set(x, "rotation", value.asInstanceOf[js.Any])
        
        @scala.inline
        def setRotationUndefined: Self = StObject.set(x, "rotation", js.undefined)
        
        @scala.inline
        def setScale(value: js.Array[_]): Self = StObject.set(x, "scale", value.asInstanceOf[js.Any])
        
        @scala.inline
        def setScaleUndefined: Self = StObject.set(x, "scale", js.undefined)
        
        @scala.inline
        def setScaleVarargs(value: js.Any*): Self = StObject.set(x, "scale", js.Array(value :_*))
        
        @scala.inline
        def setShape(value: R): Self = StObject.set(x, "shape", value.asInstanceOf[js.Any])
        
        @scala.inline
        def setShapeUndefined: Self = StObject.set(x, "shape", js.undefined)
        
        @scala.inline
        def setSilent(value: Boolean): Self = StObject.set(x, "silent", value.asInstanceOf[js.Any])
        
        @scala.inline
        def setSilentUndefined: Self = StObject.set(x, "silent", js.undefined)
        
        @scala.inline
        def setStyle(value: Fill): Self = StObject.set(x, "style", value.asInstanceOf[js.Any])
        
        @scala.inline
        def setStyleEmphasis(value: js.Object): Self = StObject.set(x, "styleEmphasis", value.asInstanceOf[js.Any])
        
        @scala.inline
        def setStyleEmphasisUndefined: Self = StObject.set(x, "styleEmphasis", js.undefined)
        
        @scala.inline
        def setStyleUndefined: Self = StObject.set(x, "style", js.undefined)
        
        @scala.inline
        def setType(value: String): Self = StObject.set(x, "type", value.asInstanceOf[js.Any])
        
        @scala.inline
        def setTypeUndefined: Self = StObject.set(x, "type", js.undefined)
        
        @scala.inline
        def setZ2(value: Double): Self = StObject.set(x, "z2", value.asInstanceOf[js.Any])
        
        @scala.inline
        def setZ2Undefined: Self = StObject.set(x, "z2", js.undefined)
      }
    }
    
    /**
      * Ring element.
      *
      *
      * @see https://echarts.apache.org/en/option.html#series-custom.renderItem.return_ring
      */
    @js.native
    trait RenderItemReturnRing extends StObject {
      
      /**
        * id is used to specifying element when willing to update
        * it. id can be ignored if you do not need it.
        *
        *
        * @default
        * "undefined"
        * @see https://echarts.apache.org/en/option.html#series-custom.renderItem.return_ring.id
        */
      var id: js.UndefOr[String] = js.native
      
      /**
        * Whether the element is totally ignored (neither render
        * nor listen events).
        *
        *
        * @see https://echarts.apache.org/en/option.html#series-custom.renderItem.return_ring.ignore
        */
      var ignore: js.UndefOr[Boolean] = js.native
      
      /**
        * User defined data, can be visited in event listeners.
        *
        * [see doc](https://echarts.apache.org/en/option.html#series-custom.custom.renderItem.return_ring)
        *
        *
        * @see https://echarts.apache.org/en/option.html#series-custom.renderItem.return_ring.info
        */
      var info: js.UndefOr[js.Any] = js.native
      
      /**
        * Whether the element is visible.
        *
        *
        * @see https://echarts.apache.org/en/option.html#series-custom.renderItem.return_ring.invisible
        */
      var invisible: js.UndefOr[Boolean] = js.native
      
      /**
        * See
        * [diffChildrenByName](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_polygon.diffChildrenByName)
        * 。
        *
        *
        * @default
        * "undefined"
        * @see https://echarts.apache.org/en/option.html#series-custom.renderItem.return_ring.name
        */
      var name: js.UndefOr[String] = js.native
      
      /**
        * `2D transform` can be applied to graphic elements, including:
        *
        * + [position](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_polygon.position)
        * : `[horizontal translate offset, vertical translate offset]`,
        * `[0, 0]` by default.
        * Positive value means translate towards right or bottom.
        * + [rotation](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_polygon.rotation)
        * : Rotation in radian, `0` by default.
        * Positive when anticlockwise.
        * + [scale](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_polygon.scale)
        * : `[horizontal scale factor, vertical scale factor]`,
        * `[1, 1]` by default.
        *
        * [origin](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_polygon.origin)
        * specifies the origin point of rotation and scaling, `[0,
        * 0]` by default.
        *
        * Notice:
        *
        * + The coordinates specified in the transform attribute
        * above are relative to the `[0, 0]` of the parent element
        * (that is,
        * [group](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_group)
        * or the root canvas). Thus we are able to
        * [group](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_group)
        * multiple elements, and
        * [groups](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_group)
        * can be nested.
        * + The order that the transform attributes are applied
        * to a single graphic element is: Firstly, `rotation`,
        * then, `scale`, finally, `position`.
        *
        *
        * @default
        * [0, 0]
        * @see https://echarts.apache.org/en/option.html#series-custom.renderItem.return_ring.origin
        */
      var origin: js.UndefOr[Double] = js.native
      
      /**
        * `2D transform` can be applied to graphic elements, including:
        *
        * + [position](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_polygon.position)
        * : `[horizontal translate offset, vertical translate offset]`,
        * `[0, 0]` by default.
        * Positive value means translate towards right or bottom.
        * + [rotation](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_polygon.rotation)
        * : Rotation in radian, `0` by default.
        * Positive when anticlockwise.
        * + [scale](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_polygon.scale)
        * : `[horizontal scale factor, vertical scale factor]`,
        * `[1, 1]` by default.
        *
        * [origin](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_polygon.origin)
        * specifies the origin point of rotation and scaling, `[0,
        * 0]` by default.
        *
        * Notice:
        *
        * + The coordinates specified in the transform attribute
        * above are relative to the `[0, 0]` of the parent element
        * (that is,
        * [group](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_group)
        * or the root canvas). Thus we are able to
        * [group](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_group)
        * multiple elements, and
        * [groups](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_group)
        * can be nested.
        * + The order that the transform attributes are applied
        * to a single graphic element is: Firstly, `rotation`,
        * then, `scale`, finally, `position`.
        *
        *
        * @default
        * [0, 0]
        * @see https://echarts.apache.org/en/option.html#series-custom.renderItem.return_ring.position
        */
      var position: js.UndefOr[js.Array[_]] = js.native
      
      /**
        * `2D transform` can be applied to graphic elements, including:
        *
        * + [position](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_polygon.position)
        * : `[horizontal translate offset, vertical translate offset]`,
        * `[0, 0]` by default.
        * Positive value means translate towards right or bottom.
        * + [rotation](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_polygon.rotation)
        * : Rotation in radian, `0` by default.
        * Positive when anticlockwise.
        * + [scale](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_polygon.scale)
        * : `[horizontal scale factor, vertical scale factor]`,
        * `[1, 1]` by default.
        *
        * [origin](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_polygon.origin)
        * specifies the origin point of rotation and scaling, `[0,
        * 0]` by default.
        *
        * Notice:
        *
        * + The coordinates specified in the transform attribute
        * above are relative to the `[0, 0]` of the parent element
        * (that is,
        * [group](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_group)
        * or the root canvas). Thus we are able to
        * [group](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_group)
        * multiple elements, and
        * [groups](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_group)
        * can be nested.
        * + The order that the transform attributes are applied
        * to a single graphic element is: Firstly, `rotation`,
        * then, `scale`, finally, `position`.
        *
        *
        * @see https://echarts.apache.org/en/option.html#series-custom.renderItem.return_ring.rotation
        */
      var rotation: js.UndefOr[Double] = js.native
      
      /**
        * `2D transform` can be applied to graphic elements, including:
        *
        * + [position](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_polygon.position)
        * : `[horizontal translate offset, vertical translate offset]`,
        * `[0, 0]` by default.
        * Positive value means translate towards right or bottom.
        * + [rotation](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_polygon.rotation)
        * : Rotation in radian, `0` by default.
        * Positive when anticlockwise.
        * + [scale](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_polygon.scale)
        * : `[horizontal scale factor, vertical scale factor]`,
        * `[1, 1]` by default.
        *
        * [origin](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_polygon.origin)
        * specifies the origin point of rotation and scaling, `[0,
        * 0]` by default.
        *
        * Notice:
        *
        * + The coordinates specified in the transform attribute
        * above are relative to the `[0, 0]` of the parent element
        * (that is,
        * [group](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_group)
        * or the root canvas). Thus we are able to
        * [group](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_group)
        * multiple elements, and
        * [groups](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_group)
        * can be nested.
        * + The order that the transform attributes are applied
        * to a single graphic element is: Firstly, `rotation`,
        * then, `scale`, finally, `position`.
        *
        *
        * @default
        * [1, 1]
        * @see https://echarts.apache.org/en/option.html#series-custom.renderItem.return_ring.scale
        */
      var scale: js.UndefOr[js.Array[_]] = js.native
      
      /**
        * @see https://echarts.apache.org/en/option.html#series-custom.renderItem.return_ring.shape
        */
      var shape: js.UndefOr[Cy] = js.native
      
      /**
        * Whether response to mouse events / touch events.
        *
        *
        * @see https://echarts.apache.org/en/option.html#series-custom.renderItem.return_ring.silent
        */
      var silent: js.UndefOr[Boolean] = js.native
      
      /**
        * More attributes in `style` (for example,
        * [rich text](https://echarts.apache.org/en/tutorial.html#Rich%20Text)
        * ), see the `style` related attributes in
        * [zrender/graphic/Displayable](https://ecomfe.github.io/zrender-doc/public/api.html#zrenderdisplayable)
        * .
        *
        * Notice, the attribute names of the `style` of graphic
        * elements is derived from `zrender`, which may be different
        * from the attribute names in `echarts label`, `echarts
        * itemStyle`, etc.,
        * although they have the same meaning. For example:
        *
        * + [itemStyle.color](https://echarts.apache.org/en/option.html#series-scatter.label.color)
        * => `style.fill`
        * + [itemStyle.borderColor](https://echarts.apache.org/en/option.html#series-scatter.label.color)
        * => `style.stroke`
        * + [label.color](https://echarts.apache.org/en/option.html#series-scatter.label.color)
        * => `style.textFill`
        * + [label.textBorderColor](https://echarts.apache.org/en/option.html#series-scatter.label.textBorderColor)
        * => `style.textStroke`
        * + ...
        *
        *
        * @see https://echarts.apache.org/en/option.html#series-custom.renderItem.return_ring.style
        */
      var style: js.UndefOr[Fill] = js.native
      
      /**
        * Empahsis style of the graphic element, whose structure
        * is the same as
        * [style](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_polygon.style)
        * .
        *
        *
        * @see https://echarts.apache.org/en/option.html#series-custom.renderItem.return_ring.styleEmphasis
        */
      var styleEmphasis: js.UndefOr[js.Object] = js.native
      
      /**
        * Must be specified when define a graphic element at the
        * first time.
        *
        * Optional values:
        *
        * [image](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_image)
        * ,
        * [text](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_text)
        * ,
        * [circle](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_circle)
        * ,
        * [sector](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_sector)
        * ,
        * [ring](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_ring)
        * ,
        * [polygon](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_polygon)
        * ,
        * [polyline](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_polyline)
        * ,
        * [rect](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_rect)
        * ,
        * [line](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_line)
        * ,
        * [bezierCurve](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_bezierCurve)
        * ,
        * [arc](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_arc)
        * ,
        * [group](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_group)
        * ,
        *
        *
        * @default
        * "ring"
        * @see https://echarts.apache.org/en/option.html#series-custom.renderItem.return_ring.type
        */
      var `type`: js.UndefOr[String] = js.native
      
      /**
        * Define the overlap relationship between graphic elements.
        *
        *
        * @default
        * "undefined"
        * @see https://echarts.apache.org/en/option.html#series-custom.renderItem.return_ring.z2
        */
      var z2: js.UndefOr[Double] = js.native
    }
    object RenderItemReturnRing {
      
      @scala.inline
      def apply(): RenderItemReturnRing = {
        val __obj = js.Dynamic.literal()
        __obj.asInstanceOf[RenderItemReturnRing]
      }
      
      @scala.inline
      implicit class RenderItemReturnRingMutableBuilder[Self <: RenderItemReturnRing] (val x: Self) extends AnyVal {
        
        @scala.inline
        def setId(value: String): Self = StObject.set(x, "id", value.asInstanceOf[js.Any])
        
        @scala.inline
        def setIdUndefined: Self = StObject.set(x, "id", js.undefined)
        
        @scala.inline
        def setIgnore(value: Boolean): Self = StObject.set(x, "ignore", value.asInstanceOf[js.Any])
        
        @scala.inline
        def setIgnoreUndefined: Self = StObject.set(x, "ignore", js.undefined)
        
        @scala.inline
        def setInfo(value: js.Any): Self = StObject.set(x, "info", value.asInstanceOf[js.Any])
        
        @scala.inline
        def setInfoUndefined: Self = StObject.set(x, "info", js.undefined)
        
        @scala.inline
        def setInvisible(value: Boolean): Self = StObject.set(x, "invisible", value.asInstanceOf[js.Any])
        
        @scala.inline
        def setInvisibleUndefined: Self = StObject.set(x, "invisible", js.undefined)
        
        @scala.inline
        def setName(value: String): Self = StObject.set(x, "name", value.asInstanceOf[js.Any])
        
        @scala.inline
        def setNameUndefined: Self = StObject.set(x, "name", js.undefined)
        
        @scala.inline
        def setOrigin(value: Double): Self = StObject.set(x, "origin", value.asInstanceOf[js.Any])
        
        @scala.inline
        def setOriginUndefined: Self = StObject.set(x, "origin", js.undefined)
        
        @scala.inline
        def setPosition(value: js.Array[_]): Self = StObject.set(x, "position", value.asInstanceOf[js.Any])
        
        @scala.inline
        def setPositionUndefined: Self = StObject.set(x, "position", js.undefined)
        
        @scala.inline
        def setPositionVarargs(value: js.Any*): Self = StObject.set(x, "position", js.Array(value :_*))
        
        @scala.inline
        def setRotation(value: Double): Self = StObject.set(x, "rotation", value.asInstanceOf[js.Any])
        
        @scala.inline
        def setRotationUndefined: Self = StObject.set(x, "rotation", js.undefined)
        
        @scala.inline
        def setScale(value: js.Array[_]): Self = StObject.set(x, "scale", value.asInstanceOf[js.Any])
        
        @scala.inline
        def setScaleUndefined: Self = StObject.set(x, "scale", js.undefined)
        
        @scala.inline
        def setScaleVarargs(value: js.Any*): Self = StObject.set(x, "scale", js.Array(value :_*))
        
        @scala.inline
        def setShape(value: Cy): Self = StObject.set(x, "shape", value.asInstanceOf[js.Any])
        
        @scala.inline
        def setShapeUndefined: Self = StObject.set(x, "shape", js.undefined)
        
        @scala.inline
        def setSilent(value: Boolean): Self = StObject.set(x, "silent", value.asInstanceOf[js.Any])
        
        @scala.inline
        def setSilentUndefined: Self = StObject.set(x, "silent", js.undefined)
        
        @scala.inline
        def setStyle(value: Fill): Self = StObject.set(x, "style", value.asInstanceOf[js.Any])
        
        @scala.inline
        def setStyleEmphasis(value: js.Object): Self = StObject.set(x, "styleEmphasis", value.asInstanceOf[js.Any])
        
        @scala.inline
        def setStyleEmphasisUndefined: Self = StObject.set(x, "styleEmphasis", js.undefined)
        
        @scala.inline
        def setStyleUndefined: Self = StObject.set(x, "style", js.undefined)
        
        @scala.inline
        def setType(value: String): Self = StObject.set(x, "type", value.asInstanceOf[js.Any])
        
        @scala.inline
        def setTypeUndefined: Self = StObject.set(x, "type", js.undefined)
        
        @scala.inline
        def setZ2(value: Double): Self = StObject.set(x, "z2", value.asInstanceOf[js.Any])
        
        @scala.inline
        def setZ2Undefined: Self = StObject.set(x, "z2", js.undefined)
      }
    }
    
    /**
      * Sector element.
      *
      *
      * @see https://echarts.apache.org/en/option.html#series-custom.renderItem.return_sector
      */
    @js.native
    trait RenderItemReturnSector extends StObject {
      
      /**
        * id is used to specifying element when willing to update
        * it. id can be ignored if you do not need it.
        *
        *
        * @default
        * "undefined"
        * @see https://echarts.apache.org/en/option.html#series-custom.renderItem.return_sector.id
        */
      var id: js.UndefOr[String] = js.native
      
      /**
        * Whether the element is totally ignored (neither render
        * nor listen events).
        *
        *
        * @see https://echarts.apache.org/en/option.html#series-custom.renderItem.return_sector.ignore
        */
      var ignore: js.UndefOr[Boolean] = js.native
      
      /**
        * User defined data, can be visited in event listeners.
        *
        * [see doc](https://echarts.apache.org/en/option.html#series-custom.custom.renderItem.return_sector)
        *
        *
        * @see https://echarts.apache.org/en/option.html#series-custom.renderItem.return_sector.info
        */
      var info: js.UndefOr[js.Any] = js.native
      
      /**
        * Whether the element is visible.
        *
        *
        * @see https://echarts.apache.org/en/option.html#series-custom.renderItem.return_sector.invisible
        */
      var invisible: js.UndefOr[Boolean] = js.native
      
      /**
        * See
        * [diffChildrenByName](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_polygon.diffChildrenByName)
        * 。
        *
        *
        * @default
        * "undefined"
        * @see https://echarts.apache.org/en/option.html#series-custom.renderItem.return_sector.name
        */
      var name: js.UndefOr[String] = js.native
      
      /**
        * `2D transform` can be applied to graphic elements, including:
        *
        * + [position](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_polygon.position)
        * : `[horizontal translate offset, vertical translate offset]`,
        * `[0, 0]` by default.
        * Positive value means translate towards right or bottom.
        * + [rotation](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_polygon.rotation)
        * : Rotation in radian, `0` by default.
        * Positive when anticlockwise.
        * + [scale](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_polygon.scale)
        * : `[horizontal scale factor, vertical scale factor]`,
        * `[1, 1]` by default.
        *
        * [origin](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_polygon.origin)
        * specifies the origin point of rotation and scaling, `[0,
        * 0]` by default.
        *
        * Notice:
        *
        * + The coordinates specified in the transform attribute
        * above are relative to the `[0, 0]` of the parent element
        * (that is,
        * [group](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_group)
        * or the root canvas). Thus we are able to
        * [group](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_group)
        * multiple elements, and
        * [groups](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_group)
        * can be nested.
        * + The order that the transform attributes are applied
        * to a single graphic element is: Firstly, `rotation`,
        * then, `scale`, finally, `position`.
        *
        *
        * @default
        * [0, 0]
        * @see https://echarts.apache.org/en/option.html#series-custom.renderItem.return_sector.origin
        */
      var origin: js.UndefOr[Double] = js.native
      
      /**
        * `2D transform` can be applied to graphic elements, including:
        *
        * + [position](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_polygon.position)
        * : `[horizontal translate offset, vertical translate offset]`,
        * `[0, 0]` by default.
        * Positive value means translate towards right or bottom.
        * + [rotation](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_polygon.rotation)
        * : Rotation in radian, `0` by default.
        * Positive when anticlockwise.
        * + [scale](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_polygon.scale)
        * : `[horizontal scale factor, vertical scale factor]`,
        * `[1, 1]` by default.
        *
        * [origin](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_polygon.origin)
        * specifies the origin point of rotation and scaling, `[0,
        * 0]` by default.
        *
        * Notice:
        *
        * + The coordinates specified in the transform attribute
        * above are relative to the `[0, 0]` of the parent element
        * (that is,
        * [group](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_group)
        * or the root canvas). Thus we are able to
        * [group](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_group)
        * multiple elements, and
        * [groups](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_group)
        * can be nested.
        * + The order that the transform attributes are applied
        * to a single graphic element is: Firstly, `rotation`,
        * then, `scale`, finally, `position`.
        *
        *
        * @default
        * [0, 0]
        * @see https://echarts.apache.org/en/option.html#series-custom.renderItem.return_sector.position
        */
      var position: js.UndefOr[js.Array[_]] = js.native
      
      /**
        * `2D transform` can be applied to graphic elements, including:
        *
        * + [position](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_polygon.position)
        * : `[horizontal translate offset, vertical translate offset]`,
        * `[0, 0]` by default.
        * Positive value means translate towards right or bottom.
        * + [rotation](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_polygon.rotation)
        * : Rotation in radian, `0` by default.
        * Positive when anticlockwise.
        * + [scale](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_polygon.scale)
        * : `[horizontal scale factor, vertical scale factor]`,
        * `[1, 1]` by default.
        *
        * [origin](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_polygon.origin)
        * specifies the origin point of rotation and scaling, `[0,
        * 0]` by default.
        *
        * Notice:
        *
        * + The coordinates specified in the transform attribute
        * above are relative to the `[0, 0]` of the parent element
        * (that is,
        * [group](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_group)
        * or the root canvas). Thus we are able to
        * [group](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_group)
        * multiple elements, and
        * [groups](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_group)
        * can be nested.
        * + The order that the transform attributes are applied
        * to a single graphic element is: Firstly, `rotation`,
        * then, `scale`, finally, `position`.
        *
        *
        * @see https://echarts.apache.org/en/option.html#series-custom.renderItem.return_sector.rotation
        */
      var rotation: js.UndefOr[Double] = js.native
      
      /**
        * `2D transform` can be applied to graphic elements, including:
        *
        * + [position](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_polygon.position)
        * : `[horizontal translate offset, vertical translate offset]`,
        * `[0, 0]` by default.
        * Positive value means translate towards right or bottom.
        * + [rotation](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_polygon.rotation)
        * : Rotation in radian, `0` by default.
        * Positive when anticlockwise.
        * + [scale](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_polygon.scale)
        * : `[horizontal scale factor, vertical scale factor]`,
        * `[1, 1]` by default.
        *
        * [origin](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_polygon.origin)
        * specifies the origin point of rotation and scaling, `[0,
        * 0]` by default.
        *
        * Notice:
        *
        * + The coordinates specified in the transform attribute
        * above are relative to the `[0, 0]` of the parent element
        * (that is,
        * [group](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_group)
        * or the root canvas). Thus we are able to
        * [group](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_group)
        * multiple elements, and
        * [groups](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_group)
        * can be nested.
        * + The order that the transform attributes are applied
        * to a single graphic element is: Firstly, `rotation`,
        * then, `scale`, finally, `position`.
        *
        *
        * @default
        * [1, 1]
        * @see https://echarts.apache.org/en/option.html#series-custom.renderItem.return_sector.scale
        */
      var scale: js.UndefOr[js.Array[_]] = js.native
      
      /**
        * @see https://echarts.apache.org/en/option.html#series-custom.renderItem.return_sector.shape
        */
      var shape: js.UndefOr[Clockwise] = js.native
      
      /**
        * Whether response to mouse events / touch events.
        *
        *
        * @see https://echarts.apache.org/en/option.html#series-custom.renderItem.return_sector.silent
        */
      var silent: js.UndefOr[Boolean] = js.native
      
      /**
        * More attributes in `style` (for example,
        * [rich text](https://echarts.apache.org/en/tutorial.html#Rich%20Text)
        * ), see the `style` related attributes in
        * [zrender/graphic/Displayable](https://ecomfe.github.io/zrender-doc/public/api.html#zrenderdisplayable)
        * .
        *
        * Notice, the attribute names of the `style` of graphic
        * elements is derived from `zrender`, which may be different
        * from the attribute names in `echarts label`, `echarts
        * itemStyle`, etc.,
        * although they have the same meaning. For example:
        *
        * + [itemStyle.color](https://echarts.apache.org/en/option.html#series-scatter.label.color)
        * => `style.fill`
        * + [itemStyle.borderColor](https://echarts.apache.org/en/option.html#series-scatter.label.color)
        * => `style.stroke`
        * + [label.color](https://echarts.apache.org/en/option.html#series-scatter.label.color)
        * => `style.textFill`
        * + [label.textBorderColor](https://echarts.apache.org/en/option.html#series-scatter.label.textBorderColor)
        * => `style.textStroke`
        * + ...
        *
        *
        * @see https://echarts.apache.org/en/option.html#series-custom.renderItem.return_sector.style
        */
      var style: js.UndefOr[Fill] = js.native
      
      /**
        * Empahsis style of the graphic element, whose structure
        * is the same as
        * [style](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_polygon.style)
        * .
        *
        *
        * @see https://echarts.apache.org/en/option.html#series-custom.renderItem.return_sector.styleEmphasis
        */
      var styleEmphasis: js.UndefOr[js.Object] = js.native
      
      /**
        * Must be specified when define a graphic element at the
        * first time.
        *
        * Optional values:
        *
        * [image](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_image)
        * ,
        * [text](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_text)
        * ,
        * [circle](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_circle)
        * ,
        * [sector](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_sector)
        * ,
        * [ring](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_ring)
        * ,
        * [polygon](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_polygon)
        * ,
        * [polyline](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_polyline)
        * ,
        * [rect](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_rect)
        * ,
        * [line](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_line)
        * ,
        * [bezierCurve](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_bezierCurve)
        * ,
        * [arc](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_arc)
        * ,
        * [group](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_group)
        * ,
        *
        *
        * @default
        * "sector"
        * @see https://echarts.apache.org/en/option.html#series-custom.renderItem.return_sector.type
        */
      var `type`: js.UndefOr[String] = js.native
      
      /**
        * Define the overlap relationship between graphic elements.
        *
        *
        * @default
        * "undefined"
        * @see https://echarts.apache.org/en/option.html#series-custom.renderItem.return_sector.z2
        */
      var z2: js.UndefOr[Double] = js.native
    }
    object RenderItemReturnSector {
      
      @scala.inline
      def apply(): RenderItemReturnSector = {
        val __obj = js.Dynamic.literal()
        __obj.asInstanceOf[RenderItemReturnSector]
      }
      
      @scala.inline
      implicit class RenderItemReturnSectorMutableBuilder[Self <: RenderItemReturnSector] (val x: Self) extends AnyVal {
        
        @scala.inline
        def setId(value: String): Self = StObject.set(x, "id", value.asInstanceOf[js.Any])
        
        @scala.inline
        def setIdUndefined: Self = StObject.set(x, "id", js.undefined)
        
        @scala.inline
        def setIgnore(value: Boolean): Self = StObject.set(x, "ignore", value.asInstanceOf[js.Any])
        
        @scala.inline
        def setIgnoreUndefined: Self = StObject.set(x, "ignore", js.undefined)
        
        @scala.inline
        def setInfo(value: js.Any): Self = StObject.set(x, "info", value.asInstanceOf[js.Any])
        
        @scala.inline
        def setInfoUndefined: Self = StObject.set(x, "info", js.undefined)
        
        @scala.inline
        def setInvisible(value: Boolean): Self = StObject.set(x, "invisible", value.asInstanceOf[js.Any])
        
        @scala.inline
        def setInvisibleUndefined: Self = StObject.set(x, "invisible", js.undefined)
        
        @scala.inline
        def setName(value: String): Self = StObject.set(x, "name", value.asInstanceOf[js.Any])
        
        @scala.inline
        def setNameUndefined: Self = StObject.set(x, "name", js.undefined)
        
        @scala.inline
        def setOrigin(value: Double): Self = StObject.set(x, "origin", value.asInstanceOf[js.Any])
        
        @scala.inline
        def setOriginUndefined: Self = StObject.set(x, "origin", js.undefined)
        
        @scala.inline
        def setPosition(value: js.Array[_]): Self = StObject.set(x, "position", value.asInstanceOf[js.Any])
        
        @scala.inline
        def setPositionUndefined: Self = StObject.set(x, "position", js.undefined)
        
        @scala.inline
        def setPositionVarargs(value: js.Any*): Self = StObject.set(x, "position", js.Array(value :_*))
        
        @scala.inline
        def setRotation(value: Double): Self = StObject.set(x, "rotation", value.asInstanceOf[js.Any])
        
        @scala.inline
        def setRotationUndefined: Self = StObject.set(x, "rotation", js.undefined)
        
        @scala.inline
        def setScale(value: js.Array[_]): Self = StObject.set(x, "scale", value.asInstanceOf[js.Any])
        
        @scala.inline
        def setScaleUndefined: Self = StObject.set(x, "scale", js.undefined)
        
        @scala.inline
        def setScaleVarargs(value: js.Any*): Self = StObject.set(x, "scale", js.Array(value :_*))
        
        @scala.inline
        def setShape(value: Clockwise): Self = StObject.set(x, "shape", value.asInstanceOf[js.Any])
        
        @scala.inline
        def setShapeUndefined: Self = StObject.set(x, "shape", js.undefined)
        
        @scala.inline
        def setSilent(value: Boolean): Self = StObject.set(x, "silent", value.asInstanceOf[js.Any])
        
        @scala.inline
        def setSilentUndefined: Self = StObject.set(x, "silent", js.undefined)
        
        @scala.inline
        def setStyle(value: Fill): Self = StObject.set(x, "style", value.asInstanceOf[js.Any])
        
        @scala.inline
        def setStyleEmphasis(value: js.Object): Self = StObject.set(x, "styleEmphasis", value.asInstanceOf[js.Any])
        
        @scala.inline
        def setStyleEmphasisUndefined: Self = StObject.set(x, "styleEmphasis", js.undefined)
        
        @scala.inline
        def setStyleUndefined: Self = StObject.set(x, "style", js.undefined)
        
        @scala.inline
        def setType(value: String): Self = StObject.set(x, "type", value.asInstanceOf[js.Any])
        
        @scala.inline
        def setTypeUndefined: Self = StObject.set(x, "type", js.undefined)
        
        @scala.inline
        def setZ2(value: Double): Self = StObject.set(x, "z2", value.asInstanceOf[js.Any])
        
        @scala.inline
        def setZ2Undefined: Self = StObject.set(x, "z2", js.undefined)
      }
    }
    
    /**
      * Text block.
      *
      *
      * @see https://echarts.apache.org/en/option.html#series-custom.renderItem.return_text
      */
    @js.native
    trait RenderItemReturnText extends StObject {
      
      /**
        * id is used to specifying element when willing to update
        * it. id can be ignored if you do not need it.
        *
        *
        * @default
        * "undefined"
        * @see https://echarts.apache.org/en/option.html#series-custom.renderItem.return_text.id
        */
      var id: js.UndefOr[String] = js.native
      
      /**
        * Whether the element is totally ignored (neither render
        * nor listen events).
        *
        *
        * @see https://echarts.apache.org/en/option.html#series-custom.renderItem.return_text.ignore
        */
      var ignore: js.UndefOr[Boolean] = js.native
      
      /**
        * User defined data, can be visited in event listeners.
        *
        * [see doc](https://echarts.apache.org/en/option.html#series-custom.custom.renderItem.return_text)
        *
        *
        * @see https://echarts.apache.org/en/option.html#series-custom.renderItem.return_text.info
        */
      var info: js.UndefOr[js.Any] = js.native
      
      /**
        * Whether the element is visible.
        *
        *
        * @see https://echarts.apache.org/en/option.html#series-custom.renderItem.return_text.invisible
        */
      var invisible: js.UndefOr[Boolean] = js.native
      
      /**
        * See
        * [diffChildrenByName](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_polygon.diffChildrenByName)
        * 。
        *
        *
        * @default
        * "undefined"
        * @see https://echarts.apache.org/en/option.html#series-custom.renderItem.return_text.name
        */
      var name: js.UndefOr[String] = js.native
      
      /**
        * `2D transform` can be applied to graphic elements, including:
        *
        * + [position](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_polygon.position)
        * : `[horizontal translate offset, vertical translate offset]`,
        * `[0, 0]` by default.
        * Positive value means translate towards right or bottom.
        * + [rotation](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_polygon.rotation)
        * : Rotation in radian, `0` by default.
        * Positive when anticlockwise.
        * + [scale](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_polygon.scale)
        * : `[horizontal scale factor, vertical scale factor]`,
        * `[1, 1]` by default.
        *
        * [origin](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_polygon.origin)
        * specifies the origin point of rotation and scaling, `[0,
        * 0]` by default.
        *
        * Notice:
        *
        * + The coordinates specified in the transform attribute
        * above are relative to the `[0, 0]` of the parent element
        * (that is,
        * [group](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_group)
        * or the root canvas). Thus we are able to
        * [group](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_group)
        * multiple elements, and
        * [groups](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_group)
        * can be nested.
        * + The order that the transform attributes are applied
        * to a single graphic element is: Firstly, `rotation`,
        * then, `scale`, finally, `position`.
        *
        *
        * @default
        * [0, 0]
        * @see https://echarts.apache.org/en/option.html#series-custom.renderItem.return_text.origin
        */
      var origin: js.UndefOr[Double] = js.native
      
      /**
        * `2D transform` can be applied to graphic elements, including:
        *
        * + [position](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_polygon.position)
        * : `[horizontal translate offset, vertical translate offset]`,
        * `[0, 0]` by default.
        * Positive value means translate towards right or bottom.
        * + [rotation](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_polygon.rotation)
        * : Rotation in radian, `0` by default.
        * Positive when anticlockwise.
        * + [scale](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_polygon.scale)
        * : `[horizontal scale factor, vertical scale factor]`,
        * `[1, 1]` by default.
        *
        * [origin](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_polygon.origin)
        * specifies the origin point of rotation and scaling, `[0,
        * 0]` by default.
        *
        * Notice:
        *
        * + The coordinates specified in the transform attribute
        * above are relative to the `[0, 0]` of the parent element
        * (that is,
        * [group](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_group)
        * or the root canvas). Thus we are able to
        * [group](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_group)
        * multiple elements, and
        * [groups](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_group)
        * can be nested.
        * + The order that the transform attributes are applied
        * to a single graphic element is: Firstly, `rotation`,
        * then, `scale`, finally, `position`.
        *
        *
        * @default
        * [0, 0]
        * @see https://echarts.apache.org/en/option.html#series-custom.renderItem.return_text.position
        */
      var position: js.UndefOr[js.Array[_]] = js.native
      
      /**
        * `2D transform` can be applied to graphic elements, including:
        *
        * + [position](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_polygon.position)
        * : `[horizontal translate offset, vertical translate offset]`,
        * `[0, 0]` by default.
        * Positive value means translate towards right or bottom.
        * + [rotation](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_polygon.rotation)
        * : Rotation in radian, `0` by default.
        * Positive when anticlockwise.
        * + [scale](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_polygon.scale)
        * : `[horizontal scale factor, vertical scale factor]`,
        * `[1, 1]` by default.
        *
        * [origin](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_polygon.origin)
        * specifies the origin point of rotation and scaling, `[0,
        * 0]` by default.
        *
        * Notice:
        *
        * + The coordinates specified in the transform attribute
        * above are relative to the `[0, 0]` of the parent element
        * (that is,
        * [group](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_group)
        * or the root canvas). Thus we are able to
        * [group](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_group)
        * multiple elements, and
        * [groups](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_group)
        * can be nested.
        * + The order that the transform attributes are applied
        * to a single graphic element is: Firstly, `rotation`,
        * then, `scale`, finally, `position`.
        *
        *
        * @see https://echarts.apache.org/en/option.html#series-custom.renderItem.return_text.rotation
        */
      var rotation: js.UndefOr[Double] = js.native
      
      /**
        * `2D transform` can be applied to graphic elements, including:
        *
        * + [position](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_polygon.position)
        * : `[horizontal translate offset, vertical translate offset]`,
        * `[0, 0]` by default.
        * Positive value means translate towards right or bottom.
        * + [rotation](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_polygon.rotation)
        * : Rotation in radian, `0` by default.
        * Positive when anticlockwise.
        * + [scale](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_polygon.scale)
        * : `[horizontal scale factor, vertical scale factor]`,
        * `[1, 1]` by default.
        *
        * [origin](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_polygon.origin)
        * specifies the origin point of rotation and scaling, `[0,
        * 0]` by default.
        *
        * Notice:
        *
        * + The coordinates specified in the transform attribute
        * above are relative to the `[0, 0]` of the parent element
        * (that is,
        * [group](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_group)
        * or the root canvas). Thus we are able to
        * [group](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_group)
        * multiple elements, and
        * [groups](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_group)
        * can be nested.
        * + The order that the transform attributes are applied
        * to a single graphic element is: Firstly, `rotation`,
        * then, `scale`, finally, `position`.
        *
        *
        * @default
        * [1, 1]
        * @see https://echarts.apache.org/en/option.html#series-custom.renderItem.return_text.scale
        */
      var scale: js.UndefOr[js.Array[_]] = js.native
      
      /**
        * Whether response to mouse events / touch events.
        *
        *
        * @see https://echarts.apache.org/en/option.html#series-custom.renderItem.return_text.silent
        */
      var silent: js.UndefOr[Boolean] = js.native
      
      /**
        * @see https://echarts.apache.org/en/option.html#series-custom.renderItem.return_text.style
        */
      var style: js.UndefOr[Font] = js.native
      
      /**
        * Empahsis style of the graphic element, whose structure
        * is the same as
        * [style](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_polygon.style)
        * .
        *
        *
        * @see https://echarts.apache.org/en/option.html#series-custom.renderItem.return_text.styleEmphasis
        */
      var styleEmphasis: js.UndefOr[js.Object] = js.native
      
      /**
        * Must be specified when define a graphic element at the
        * first time.
        *
        * Optional values:
        *
        * [image](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_image)
        * ,
        * [text](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_text)
        * ,
        * [circle](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_circle)
        * ,
        * [sector](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_sector)
        * ,
        * [ring](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_ring)
        * ,
        * [polygon](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_polygon)
        * ,
        * [polyline](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_polyline)
        * ,
        * [rect](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_rect)
        * ,
        * [line](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_line)
        * ,
        * [bezierCurve](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_bezierCurve)
        * ,
        * [arc](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_arc)
        * ,
        * [group](https://echarts.apache.org/en/option.html#series-custom.renderItem.return_group)
        * ,
        *
        *
        * @default
        * "text"
        * @see https://echarts.apache.org/en/option.html#series-custom.renderItem.return_text.type
        */
      var `type`: js.UndefOr[String] = js.native
      
      /**
        * Define the overlap relationship between graphic elements.
        *
        *
        * @default
        * "undefined"
        * @see https://echarts.apache.org/en/option.html#series-custom.renderItem.return_text.z2
        */
      var z2: js.UndefOr[Double] = js.native
    }
    object RenderItemReturnText {
      
      @scala.inline
      def apply(): RenderItemReturnText = {
        val __obj = js.Dynamic.literal()
        __obj.asInstanceOf[RenderItemReturnText]
      }
      
      @scala.inline
      implicit class RenderItemReturnTextMutableBuilder[Self <: RenderItemReturnText] (val x: Self) extends AnyVal {
        
        @scala.inline
        def setId(value: String): Self = StObject.set(x, "id", value.asInstanceOf[js.Any])
        
        @scala.inline
        def setIdUndefined: Self = StObject.set(x, "id", js.undefined)
        
        @scala.inline
        def setIgnore(value: Boolean): Self = StObject.set(x, "ignore", value.asInstanceOf[js.Any])
        
        @scala.inline
        def setIgnoreUndefined: Self = StObject.set(x, "ignore", js.undefined)
        
        @scala.inline
        def setInfo(value: js.Any): Self = StObject.set(x, "info", value.asInstanceOf[js.Any])
        
        @scala.inline
        def setInfoUndefined: Self = StObject.set(x, "info", js.undefined)
        
        @scala.inline
        def setInvisible(value: Boolean): Self = StObject.set(x, "invisible", value.asInstanceOf[js.Any])
        
        @scala.inline
        def setInvisibleUndefined: Self = StObject.set(x, "invisible", js.undefined)
        
        @scala.inline
        def setName(value: String): Self = StObject.set(x, "name", value.asInstanceOf[js.Any])
        
        @scala.inline
        def setNameUndefined: Self = StObject.set(x, "name", js.undefined)
        
        @scala.inline
        def setOrigin(value: Double): Self = StObject.set(x, "origin", value.asInstanceOf[js.Any])
        
        @scala.inline
        def setOriginUndefined: Self = StObject.set(x, "origin", js.undefined)
        
        @scala.inline
        def setPosition(value: js.Array[_]): Self = StObject.set(x, "position", value.asInstanceOf[js.Any])
        
        @scala.inline
        def setPositionUndefined: Self = StObject.set(x, "position", js.undefined)
        
        @scala.inline
        def setPositionVarargs(value: js.Any*): Self = StObject.set(x, "position", js.Array(value :_*))
        
        @scala.inline
        def setRotation(value: Double): Self = StObject.set(x, "rotation", value.asInstanceOf[js.Any])
        
        @scala.inline
        def setRotationUndefined: Self = StObject.set(x, "rotation", js.undefined)
        
        @scala.inline
        def setScale(value: js.Array[_]): Self = StObject.set(x, "scale", value.asInstanceOf[js.Any])
        
        @scala.inline
        def setScaleUndefined: Self = StObject.set(x, "scale", js.undefined)
        
        @scala.inline
        def setScaleVarargs(value: js.Any*): Self = StObject.set(x, "scale", js.Array(value :_*))
        
        @scala.inline
        def setSilent(value: Boolean): Self = StObject.set(x, "silent", value.asInstanceOf[js.Any])
        
        @scala.inline
        def setSilentUndefined: Self = StObject.set(x, "silent", js.undefined)
        
        @scala.inline
        def setStyle(value: Font): Self = StObject.set(x, "style", value.asInstanceOf[js.Any])
        
        @scala.inline
        def setStyleEmphasis(value: js.Object): Self = StObject.set(x, "styleEmphasis", value.asInstanceOf[js.Any])
        
        @scala.inline
        def setStyleEmphasisUndefined: Self = StObject.set(x, "styleEmphasis", js.undefined)
        
        @scala.inline
        def setStyleUndefined: Self = StObject.set(x, "style", js.undefined)
        
        @scala.inline
        def setType(value: String): Self = StObject.set(x, "type", value.asInstanceOf[js.Any])
        
        @scala.inline
        def setTypeUndefined: Self = StObject.set(x, "type", js.undefined)
        
        @scala.inline
        def setZ2(value: Double): Self = StObject.set(x, "z2", value.asInstanceOf[js.Any])
        
        @scala.inline
        def setZ2Undefined: Self = StObject.set(x, "z2", js.undefined)
      }
    }
    
    @scala.inline
    implicit class SeriesCustomMutableBuilder[Self <: SeriesCustom] (val x: Self) extends AnyVal {
      
      @scala.inline
      def setAnimation(value: Boolean): Self = StObject.set(x, "animation", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setAnimationDelay(value: js.Function | Double): Self = StObject.set(x, "animationDelay", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setAnimationDelayUndefined: Self = StObject.set(x, "animationDelay", js.undefined)
      
      @scala.inline
      def setAnimationDelayUpdate(value: js.Function | Double): Self = StObject.set(x, "animationDelayUpdate", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setAnimationDelayUpdateUndefined: Self = StObject.set(x, "animationDelayUpdate", js.undefined)
      
      @scala.inline
      def setAnimationDuration(value: js.Function | Double): Self = StObject.set(x, "animationDuration", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setAnimationDurationUndefined: Self = StObject.set(x, "animationDuration", js.undefined)
      
      @scala.inline
      def setAnimationDurationUpdate(value: js.Function | Double): Self = StObject.set(x, "animationDurationUpdate", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setAnimationDurationUpdateUndefined: Self = StObject.set(x, "animationDurationUpdate", js.undefined)
      
      @scala.inline
      def setAnimationEasing(value: String): Self = StObject.set(x, "animationEasing", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setAnimationEasingUndefined: Self = StObject.set(x, "animationEasing", js.undefined)
      
      @scala.inline
      def setAnimationEasingUpdate(value: String): Self = StObject.set(x, "animationEasingUpdate", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setAnimationEasingUpdateUndefined: Self = StObject.set(x, "animationEasingUpdate", js.undefined)
      
      @scala.inline
      def setAnimationThreshold(value: Double): Self = StObject.set(x, "animationThreshold", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setAnimationThresholdUndefined: Self = StObject.set(x, "animationThreshold", js.undefined)
      
      @scala.inline
      def setAnimationUndefined: Self = StObject.set(x, "animation", js.undefined)
      
      @scala.inline
      def setCalendarIndex(value: Double): Self = StObject.set(x, "calendarIndex", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setCalendarIndexUndefined: Self = StObject.set(x, "calendarIndex", js.undefined)
      
      @scala.inline
      def setCoordinateSystem(value: String): Self = StObject.set(x, "coordinateSystem", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setCoordinateSystemUndefined: Self = StObject.set(x, "coordinateSystem", js.undefined)
      
      @scala.inline
      def setData(
        value: js.Array[
              (js.Array[
                Unit | String | Double | typingsSlinky.echarts.echarts.EChartOption.SeriesCustom.DataObject
              ]) | typingsSlinky.echarts.echarts.EChartOption.SeriesCustom.DataObject | Double | String | Unit
            ]
      ): Self = StObject.set(x, "data", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setDataUndefined: Self = StObject.set(x, "data", js.undefined)
      
      @scala.inline
      def setDataVarargs(
        value: ((js.Array[
              Unit | String | Double | typingsSlinky.echarts.echarts.EChartOption.SeriesCustom.DataObject
            ]) | typingsSlinky.echarts.echarts.EChartOption.SeriesCustom.DataObject | Double | String | Unit)*
      ): Self = StObject.set(x, "data", js.Array(value :_*))
      
      @scala.inline
      def setDatasetIndex(value: Double): Self = StObject.set(x, "datasetIndex", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setDatasetIndexUndefined: Self = StObject.set(x, "datasetIndex", js.undefined)
      
      @scala.inline
      def setDimensions(value: js.Array[_]): Self = StObject.set(x, "dimensions", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setDimensionsUndefined: Self = StObject.set(x, "dimensions", js.undefined)
      
      @scala.inline
      def setDimensionsVarargs(value: js.Any*): Self = StObject.set(x, "dimensions", js.Array(value :_*))
      
      @scala.inline
      def setEmphasis(value: `2`): Self = StObject.set(x, "emphasis", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setEmphasisUndefined: Self = StObject.set(x, "emphasis", js.undefined)
      
      @scala.inline
      def setEncode(value: js.Object): Self = StObject.set(x, "encode", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setEncodeUndefined: Self = StObject.set(x, "encode", js.undefined)
      
      @scala.inline
      def setGeoIndex(value: Double): Self = StObject.set(x, "geoIndex", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setGeoIndexUndefined: Self = StObject.set(x, "geoIndex", js.undefined)
      
      @scala.inline
      def setId(value: String): Self = StObject.set(x, "id", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setIdUndefined: Self = StObject.set(x, "id", js.undefined)
      
      @scala.inline
      def setItemStyle(value: BorderType): Self = StObject.set(x, "itemStyle", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setItemStyleUndefined: Self = StObject.set(x, "itemStyle", js.undefined)
      
      @scala.inline
      def setLegendHoverLink(value: Boolean): Self = StObject.set(x, "legendHoverLink", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setLegendHoverLinkUndefined: Self = StObject.set(x, "legendHoverLink", js.undefined)
      
      @scala.inline
      def setName(value: String): Self = StObject.set(x, "name", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setNameUndefined: Self = StObject.set(x, "name", js.undefined)
      
      @scala.inline
      def setPolarIndex(value: Double): Self = StObject.set(x, "polarIndex", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setPolarIndexUndefined: Self = StObject.set(x, "polarIndex", js.undefined)
      
      @scala.inline
      def setRenderItem(
        value: (/* params */ RenderItemParams, /* api */ RenderItemApi) => RenderItemReturnGroup | RenderItemReturnPath | RenderItemReturnImage | RenderItemReturnText | RenderItemReturnRect | RenderItemReturnCircle | RenderItemReturnRing | RenderItemReturnSector | RenderItemReturnArc | RenderItemReturnPolygon | RenderItemReturnPolyline | RenderItemReturnLine | RenderItemReturnBezierCurve
      ): Self = StObject.set(x, "renderItem", js.Any.fromFunction2(value))
      
      @scala.inline
      def setRenderItemUndefined: Self = StObject.set(x, "renderItem", js.undefined)
      
      @scala.inline
      def setSeriesLayoutBy(value: String): Self = StObject.set(x, "seriesLayoutBy", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setSeriesLayoutByUndefined: Self = StObject.set(x, "seriesLayoutBy", js.undefined)
      
      @scala.inline
      def setSilent(value: Boolean): Self = StObject.set(x, "silent", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setSilentUndefined: Self = StObject.set(x, "silent", js.undefined)
      
      @scala.inline
      def setTooltip(value: BaseTooltip): Self = StObject.set(x, "tooltip", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setTooltipUndefined: Self = StObject.set(x, "tooltip", js.undefined)
      
      @scala.inline
      def setType(value: String): Self = StObject.set(x, "type", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setTypeUndefined: Self = StObject.set(x, "type", js.undefined)
      
      @scala.inline
      def setXAxisIndex(value: Double): Self = StObject.set(x, "xAxisIndex", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setXAxisIndexUndefined: Self = StObject.set(x, "xAxisIndex", js.undefined)
      
      @scala.inline
      def setYAxisIndex(value: Double): Self = StObject.set(x, "yAxisIndex", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setYAxisIndexUndefined: Self = StObject.set(x, "yAxisIndex", js.undefined)
      
      @scala.inline
      def setZ(value: Double): Self = StObject.set(x, "z", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setZUndefined: Self = StObject.set(x, "z", js.undefined)
      
      @scala.inline
      def setZlevel(value: Double): Self = StObject.set(x, "zlevel", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setZlevelUndefined: Self = StObject.set(x, "zlevel", js.undefined)
    }
  }
  
  /**
    * The scatter (bubble) graph with ripple animation.
    * The special animation effect can visually highlights some data.
    *
    * **Tip:** The effects of map was achieved through markPoint in ECharts
    * 2.x.
    * However, in ECharts 3, effectScatter on geographic coordinate is
    * recommended for achieving that effects of map.
    *
    * **Here is the example:**
    *
    * [see doc](https://echarts.apache.org/en/option.html#series-effectScatter)
    *
    *
    * @see https://echarts.apache.org/en/option.html#series-effectScatter
    */
  @js.native
  trait SeriesEffectScatter extends Series {
    
    /**
      * Whether to enable animation.
      *
      *
      * @default
      * "true"
      * @see https://echarts.apache.org/en/option.html#series-effectScatter.animation
      */
    var animation: js.UndefOr[Boolean] = js.native
    
    /**
      * Delay before updating the first animation, which supports callback
      * function for different data to have different animation effect.
      *
      * For example:
      *
      * [see doc](https://echarts.apache.org/en/option.html#series-effectScatter.effectScatter)
      *
      * See
      * [this example](https://echarts.apache.org/examples/en/editor.html?c=bar-animation-delay)
      * for more information.
      *
      *
      * @see https://echarts.apache.org/en/option.html#series-effectScatter.animationDelay
      */
    var animationDelay: js.UndefOr[js.Function | Double] = js.native
    
    /**
      * Delay before updating animation, which supports callback function
      * for different data to have different animation effect.
      *
      * For example:
      *
      * [see doc](https://echarts.apache.org/en/option.html#series-effectScatter.effectScatter)
      *
      * See
      * [this example](https://echarts.apache.org/examples/en/editor.html?c=bar-animation-delay)
      * for more information.
      *
      *
      * @see https://echarts.apache.org/en/option.html#series-effectScatter.animationDelayUpdate
      */
    var animationDelayUpdate: js.UndefOr[js.Function | Double] = js.native
    
    /**
      * Duration of the first animation, which supports callback function
      * for different data to have different animation effect:
      *
      * [see doc](https://echarts.apache.org/en/option.html#series-effectScatter.effectScatter)
      *
      *
      * @default
      * 1000
      * @see https://echarts.apache.org/en/option.html#series-effectScatter.animationDuration
      */
    var animationDuration: js.UndefOr[js.Function | Double] = js.native
    
    /**
      * Time for animation to complete, which supports callback function
      * for different data to have different animation effect:
      *
      * [see doc](https://echarts.apache.org/en/option.html#series-effectScatter.effectScatter)
      *
      *
      * @default
      * 300
      * @see https://echarts.apache.org/en/option.html#series-effectScatter.animationDurationUpdate
      */
    var animationDurationUpdate: js.UndefOr[js.Function | Double] = js.native
    
    /**
      * Easing method used for the first animation.
      * Varied easing effects can be found at
      * [easing effect example](https://echarts.apache.org/examples/en/editor.html?c=line-easing)
      * .
      *
      *
      * @default
      * "cubicOut"
      * @see https://echarts.apache.org/en/option.html#series-effectScatter.animationEasing
      */
    var animationEasing: js.UndefOr[String] = js.native
    
    /**
      * Easing method used for animation.
      *
      *
      * @default
      * "cubicOut"
      * @see https://echarts.apache.org/en/option.html#series-effectScatter.animationEasingUpdate
      */
    var animationEasingUpdate: js.UndefOr[String] = js.native
    
    /**
      * Whether to set graphic number threshold to animation.
      * Animation will be disabled when graphic number is larger than
      * threshold.
      *
      *
      * @default
      * 2000
      * @see https://echarts.apache.org/en/option.html#series-effectScatter.animationThreshold
      */
    var animationThreshold: js.UndefOr[Double] = js.native
    
    /**
      * Index of
      * [calendar coordinates](https://echarts.apache.org/en/option.html#calendar)
      * to combine with, which is useful for multiple calendar coordinates
      * in one chart.
      *
      *
      * @see https://echarts.apache.org/en/option.html#series-effectScatter.calendarIndex
      */
    var calendarIndex: js.UndefOr[Double] = js.native
    
    /**
      * The coordinate used in the series, whose options are:
      *
      * + `'cartesian2d'`
      *
      * Use a two-dimensional rectangular coordinate (also known as Cartesian
      * coordinate), with
      * [xAxisIndex](https://echarts.apache.org/en/option.html#series-bar.xAxisIndex)
      * and
      * [yAxisIndex](https://echarts.apache.org/en/option.html#series-bar.yAxisIndex)
      * to assign the corresponding axis component.
      *
      * + `'polar'`
      *
      * Use polar coordinates, with
      * [polarIndex](https://echarts.apache.org/en/option.html#series-bar.polarIndex)
      * to assign the corresponding polar coordinate component.
      *
      * + `'geo'`
      *
      * Use geographic coordinate, with
      * [geoIndex](https://echarts.apache.org/en/option.html#series-bar.geoIndex)
      * to assign the corresponding geographic coordinate components.
      *
      *
      * @default
      * "cartesian2d"
      * @see https://echarts.apache.org/en/option.html#series-effectScatter.coordinateSystem
      */
    var coordinateSystem: js.UndefOr[String] = js.native
    
    /**
      * The mouse style when mouse hovers on an element, the same as
      * `cursor` property in `CSS`.
      *
      *
      * @default
      * "pointer"
      * @see https://echarts.apache.org/en/option.html#series-effectScatter.cursor
      */
    var cursor: js.UndefOr[String] = js.native
    
    /**
      * Data array of series, which can be in the following forms:
      *
      * Notice, if no `data` specified in series, and there is
      * [dataset](https://echarts.apache.org/en/option.html#dataset)
      * in option, series will use the first
      * [dataset](https://echarts.apache.org/en/option.html#dataset)
      * as its datasource. If `data` has been specified,
      * [dataset](https://echarts.apache.org/en/option.html#dataset)
      * will not used.
      *
      * `series.datasetIndex` can be used to specify other
      * [dataset](https://echarts.apache.org/en/option.html#dataset)
      * .
      *
      * Basically, data is represented by a two-dimension array, like
      * the example below, where each colum is named as a "dimension".
      *
      * [see doc](https://echarts.apache.org/en/option.html#series-effectScatter.effectScatter)
      *
      * + In
      * [cartesian (grid)](https://echarts.apache.org/en/option.html#grid)
      * , "dimX" and "dimY" correspond to
      * [xAxis](https://echarts.apache.org/en/option.html#xAxis)
      * and
      * [yAxis](https://echarts.apache.org/en/option.html#yAxis)
      * repectively.
      * + In
      * [polar](https://echarts.apache.org/en/option.html#polar)
      * "dimX" and "dimY" correspond to
      * [radiusAxis](https://echarts.apache.org/en/option.html#radiusAxis)
      * 和
      * [angleAxis](https://echarts.apache.org/en/option.html#anbleAxis)
      * repectively.
      * + Other dimensions are optional, which can be used in other place.
      * For example:
      * + [visualMap](https://echarts.apache.org/en/option.html#visualMap)
      * can map one or more dimensions to viusal (color, symbol size
      * ...).
      * + [series.symbolSize](https://echarts.apache.org/en/option.html#series.symbolSize)
      * can be set as a callback function, where symbol size can be calculated
      * by values of a certain dimension.
      * + Values in other dimensions can be shown by
      * [tooltip.formatter](https://echarts.apache.org/en/option.html#tooltip.formatter)
      * or
      * [series.label.formatter](https://echarts.apache.org/en/option.html#series.label.formatter)
      * .
      *
      * Especially, when there is one and only one category axis (axis.type
      * is `'category'`), data can be simply be represented by a one-dimension
      * array, like:
      *
      * [see doc](https://echarts.apache.org/en/option.html#series-effectScatter.effectScatter)
      *
      * **Relationship between "value" and
      * [axis.type](https://echarts.apache.org/en/option.html#xAxis.type)
      * **
      *
      * + When a dimension corresponds to a value axis (axis.type
      * is `'value'` or `'log'`):
      *
      * The value can be a `number` (like `12`) (can also be a number
      * in a `string` format, like `'12'`).
      *
      * + When a dimension corresponds to a category axis (axis.type
      * is `'category'`):
      *
      * The value should be the ordinal of the axis.data
      * (based on `0`), the string value of the axis.data.
      * For example:
      *
      * [see doc](https://echarts.apache.org/en/option.html#series-effectScatter.effectScatter)
      *
      * There is an example of double category axes:
      * [Github Punchcard](https://echarts.apache.org/examples/en/editor.html?c=scatter-punchCard)
      * .
      *
      * + When a dimension corresponds to a time axis (type is `'time'`),
      * the value can be:
      *
      * + a timestamp, like `1484141700832`, which represents a UTC time.
      * + a date string, in one of the formats below:
      * + a subset of
      * [ISO 8601](http://www.ecma-international.org/ecma-262/5.1/#se
      * c-15.9.1.15)
      * , only including (all of these are treated as local time unless
      * timezone is specified, which is consistent with
      * [moment](https://momentjs.com/)
      * ):
      * + only part of year/month/date/time are specified: `'2012-03'`,
      * `'2012-03-01'`, `'2012-03-01 05'`, `'2012-03-01 05:06'`.
      * + separated by `"T"` or a space: `'2012-03-01T12:22:33.123'`,
      * `'2012-03-01 12:22:33.123'`.
      * + timezone specified: `'2012-03-01T12:22:33Z'`, `'2012-03-01T12:22:33+8000'`,
      * `'2012-03-01T12:22:33-05:00'`.
      * + other date string format (all of these are treated as local
      * time): `'2012'`, `'2012-3-1'`, `'2012/3/1'`, `'2012/03/01'`,
      * `'2009/6/12 2:00'`, `'2009/6/12 2:05:08'`, `'2009/6/12 2:05:08.123'`.
      * + a JavaScript Date instance created by user:
      * + Caution, when using a data string to create a Date instance,
      * [browser differences and inconsistencies](http://dygraphs.com/date-formats.html)
      * should be considered.
      * + For example: In chrome, `new Date('2012-01-01')` is treated
      * as a Jan 1st 2012 in UTC, while `new Date('2012-1-1')` and `new
      * Date('2012/01/01')` are treated as Jan 1st 2012 in local timezone.
      * In safari `new Date('2012-1-1')` is not supported.
      * + So if you intent to perform `new Date(dateString)`, it is strongly
      * recommended to use a time parse library (e.g.,
      * [moment](https://momentjs.com/)
      * ), or use `echarts.number.parseDate`, or check
      * [this](http://dygraphs.com/date-formats.html)
      * .
      *
      * **Customize a data item:**
      *
      * When needing to customize a data item, it can be set as an object,
      * where property `value` reprensent real value. For example:
      *
      * [see doc](https://echarts.apache.org/en/option.html#series-effectScatter.effectScatter)
      *
      * **Empty value:**
      *
      * `'-'` or `null` or `undefined` or `NaN` can be used to describe
      * that a data item is not exists (ps：_not exist_ does not means
      * its value is `0`).
      *
      * For example, line chart can break when encounter an empty value,
      * and scatter chart do not display graphic elements for empty values.
      *
      *
      * @see https://echarts.apache.org/en/option.html#series-effectScatter.data
      */
    var data: js.UndefOr[
        js.Array[
          (js.Array[
            Unit | Double | String | typingsSlinky.echarts.echarts.EChartOption.SeriesEffectScatter.DataObject
          ]) | typingsSlinky.echarts.echarts.EChartOption.SeriesEffectScatter.DataObject | Double | String | Unit
        ]
      ] = js.native
    
    /**
      * If
      * [series.data](https://echarts.apache.org/en/option.html#series.data)
      * is not specified, and
      * [dataset](https://echarts.apache.org/en/option.html#dataset)
      * exists, the series will use `dataset`.
      * `datasetIndex` specifies which dataset will be used.
      *
      *
      * @see https://echarts.apache.org/en/option.html#series-effectScatter.datasetIndex
      */
    var datasetIndex: js.UndefOr[Double] = js.native
    
    /**
      * `dimensions` can be used to define dimension info for `series.data`
      * or `dataset.source`.
      *
      * Notice: if
      * [dataset](https://echarts.apache.org/en/option.html#dataset)
      * is used, we can provide dimension names in the first column/row
      * of
      * [dataset.source](https://echarts.apache.org/en/option.html#dataset.source)
      * , and not need to specify `dimensions` here.
      * But if `dimensions` is specified here, echarts will not retrieve
      * dimension names from the first row/column of `dataset.source`
      * any more.
      *
      * For example:
      *
      * [see doc](https://echarts.apache.org/en/option.html#series-effectScatter.effectScatter)
      * [see doc](https://echarts.apache.org/en/option.html#series-effectScatter.effectScatter)
      *
      * Each data item of `dimensions` can be:
      *
      * + `string`, for example, `'someName'`, which equals to `{name:
      * 'someName'}`.
      * + `Object`, where the attributes can be:
      * + name: `string`.
      * + type: `string`, supports:
      * + `number`
      * + `float`, that is,
      * [Float64Array](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Float64Array)
      *
      * + `int`, that is,
      * [Int32Array](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Int32Array)
      *
      * + `ordinal`, discrete value, which represents string generally.
      * + `time`, time value, see
      * [data](https://echarts.apache.org/en/option.html#series.data)
      * to check the format of time value.
      * + displayName: `string`, generally used in tooltip for dimension
      * display. If not specified, use `name` by default.
      *
      * When `dimensions` is specified, the default `tooltip` will be
      * displayed vertically, which is better to show diemsion names.
      * Otherwise, `tooltip` will displayed only value horizontally.
      *
      *
      * @see https://echarts.apache.org/en/option.html#series-effectScatter.dimensions
      */
    var dimensions: js.UndefOr[js.Array[_]] = js.native
    
    /**
      * Type of effect.
      * Only ripple effect of `'ripple'` is supported currently.
      *
      *
      * @default
      * "ripple"
      * @see https://echarts.apache.org/en/option.html#series-effectScatter.effectType
      */
    var effectType: js.UndefOr[String] = js.native
    
    /**
      * @see https://echarts.apache.org/en/option.html#series-effectScatter.emphasis
      */
    var emphasis: js.UndefOr[ItemStyleLabel] = js.native
    
    /**
      * Define what is encoded to for each dimension of `data`.
      * For example:
      *
      * [see doc](https://echarts.apache.org/en/option.html#series-effectScatter.effectScatter)
      *
      * Attributes of encode are different according to the type of coordinate
      * systtems. For
      * [cartesian2d](https://echarts.apache.org/en/option.html#grid)
      * , `x` and `y` can be defined. For
      * [polar](https://echarts.apache.org/en/option.html#polar)
      * , `radius` and `angle` can be defined. For
      * [geo](https://echarts.apache.org/en/option.html#geo)
      * , `lng` and `lat` can be defined.
      * Attribute `tooltip` and `itemName` (data item name in tooltip)
      * are always able to be defined.
      *
      * When
      * [dimensions](https://echarts.apache.org/en/option.html#series.dimensions)
      * is used to defined name for a certain dimension, `encode` can
      * refer the name directly. For example:
      *
      * [see doc](https://echarts.apache.org/en/option.html#series-effectScatter.effectScatter)
      *
      * Specially, in \[custom series(~series-custom), some property
      * in `encode`, corresponding to axis, can be set as null to make
      * the series not controlled by the axis, that is, the series data
      * will not be count in the extent of the axis, and the
      * [dataZoom](https://echarts.apache.org/en/option.html#dataZoom)
      * on the axis will not filter the series.
      *
      * [see doc](https://echarts.apache.org/en/option.html#series-effectScatter.effectScatter)
      *
      *
      * @see https://echarts.apache.org/en/option.html#series-effectScatter.encode
      */
    var encode: js.UndefOr[js.Object] = js.native
    
    /**
      * Index of
      * [geographic coordinate](https://echarts.apache.org/en/option.html#geo)
      * to combine with, which is useful for multiple geographic axes
      * in one chart.
      *
      *
      * @see https://echarts.apache.org/en/option.html#series-effectScatter.geoIndex
      */
    var geoIndex: js.UndefOr[Double] = js.native
    
    /**
      * Component ID, not specified by default.
      * If specified, it can be used to refer the component in option
      * or API.
      *
      *
      * @see https://echarts.apache.org/en/option.html#series-effectScatter.id
      */
    var id: js.UndefOr[String] = js.native
    
    /**
      * Graphic style of , `emphasis` is the style when it is highlighted,
      * like being hovered by mouse, or highlighted via legend connect.
      *
      *
      * @see https://echarts.apache.org/en/option.html#series-effectScatter.itemStyle
      */
    var itemStyle: js.UndefOr[ShadowOffsetY] = js.native
    
    /**
      * Text label of , to explain some data information about graphic
      * item like value, name and so on.
      * `label` is placed under `itemStyle` in ECharts 2.x.
      * In ECharts 3, to make the configuration structure flatter, `label`is
      * taken to be at the same level with `itemStyle`, and has `emphasis`
      * as `itemStyle` does.
      *
      *
      * @see https://echarts.apache.org/en/option.html#series-effectScatter.label
      */
    var label: js.UndefOr[BorderRadius] = js.native
    
    /**
      * Whether to enable highlighting chart when
      * [legend](https://echarts.apache.org/en/option.html#legend)
      * is being hovered.
      *
      *
      * @default
      * "true"
      * @see https://echarts.apache.org/en/option.html#series-effectScatter.legendHoverLink
      */
    var legendHoverLink: js.UndefOr[Boolean] = js.native
    
    /**
      * Used to mark an area in chart.
      * For example, mark a time interval.
      *
      *
      * @see https://echarts.apache.org/en/option.html#series-effectScatter.markArea
      */
    var markArea: js.UndefOr[AnimationDelayUpdate] = js.native
    
    /**
      * Use a line in the chart to illustrate.
      *
      *
      * @see https://echarts.apache.org/en/option.html#series-effectScatter.markLine
      */
    var markLine: js.UndefOr[AnimationDelay] = js.native
    
    /**
      * Mark point in a chart.
      *
      *
      * @see https://echarts.apache.org/en/option.html#series-effectScatter.markPoint
      */
    var markPoint: js.UndefOr[AnimationDuration] = js.native
    
    /**
      * Series name used for displaying in
      * [tooltip](https://echarts.apache.org/en/option.html#tooltip)
      * and filtering with
      * [legend](https://echarts.apache.org/en/option.html#legend)
      * , or updaing data and configuration with `setOption`.
      *
      *
      * @see https://echarts.apache.org/en/option.html#series-effectScatter.name
      */
    var name: js.UndefOr[String] = js.native
    
    /**
      * Index of
      * [polar coordinate](https://echarts.apache.org/en/option.html#polar)
      * to combine with, which is useful for multiple polar axes in one
      * chart.
      *
      *
      * @see https://echarts.apache.org/en/option.html#series-effectScatter.polarIndex
      */
    var polarIndex: js.UndefOr[Double] = js.native
    
    /**
      * Related configurations about ripple effect.
      *
      *
      * @see https://echarts.apache.org/en/option.html#series-effectScatter.rippleEffect
      */
    var rippleEffect: js.UndefOr[BrushType] = js.native
    
    /**
      * When
      * [dataset](https://echarts.apache.org/en/option.html#dataset)
      * is used, `seriesLayoutBy` specifies whether the column or the
      * row of `dataset` is mapped to the series, namely, the series
      * is "layout" on columns or rows. Optional values:
      *
      * + 'column': by default, the columns of `dataset` are mapped the
      * series. In this case, each column represents a dimension.
      * + 'row'：the rows of `dataset` are mapped to the series.
      * In this case, each row represents a dimension.
      *
      * Check this
      * [example](https://echarts.apache.org/examples/en/editor.html?c=dataset-series-layout-by)
      * .
      *
      *
      * @default
      * "column"
      * @see https://echarts.apache.org/en/option.html#series-effectScatter.seriesLayoutBy
      */
    var seriesLayoutBy: js.UndefOr[String] = js.native
    
    /**
      * When to show the effect.
      *
      * **Options:**
      *
      * + `'render'` Show the effect when rendering is done.
      * + `'emphasis'` Show the effect when it is highlight (hover).
      *
      *
      * @default
      * "render"
      * @see https://echarts.apache.org/en/option.html#series-effectScatter.showEffectOn
      */
    var showEffectOn: js.UndefOr[String] = js.native
    
    /**
      * Symbol of .
      *
      * Icon types provided by ECharts includes `'circle'`, `'rect'`,
      * `'roundRect'`, `'triangle'`, `'diamond'`, `'pin'`, `'arrow'`,
      * `'none'`
      *
      * It can be set to an image with `'image://url'` , in which URL
      * is the link to an image, or `dataURI` of an image.
      *
      * An image URL example:
      *
      * ```
      * 'image://http://xxx.xxx.xxx/a/b.png'
      *
      * ```
      *
      * A `dataURI` example:
      *
      * [see doc](https://echarts.apache.org/en/option.html#series-effectScatter.effectScatter)
      *
      * Icons can be set to arbitrary vector path via `'path://'` in
      * ECharts.
      * As compared with raster image, vector paths prevent from jagging
      * and blurring when scaled, and have a better control over changing
      * colors.
      * Size of vectoer icon will be adapted automatically. Refer to
      * [SVG PathData](http://www.w3.org/TR/SVG/paths.html#PathData)
      * for more information about format of path.
      * You may export vector paths from tools like Adobe Illustrator.
      *
      * For example:
      *
      * [see doc](https://echarts.apache.org/en/option.html#series-effectScatter.effectScatter)
      *
      *
      * @default
      * "circle"
      * @see https://echarts.apache.org/en/option.html#series-effectScatter.symbol
      */
    var symbol: js.UndefOr[String] = js.native
    
    /**
      * Whether to keep aspect for symbols in the form of `path://`.
      *
      *
      * @see https://echarts.apache.org/en/option.html#series-effectScatter.symbolKeepAspect
      */
    var symbolKeepAspect: js.UndefOr[Boolean] = js.native
    
    /**
      * Offset of symbol relative to original position.
      * By default, symbol will be put in the center position of data.
      * But if symbol is from user-defined vector path or image, you
      * may not expect symbol to be in center.
      * In this case, you may use this attribute to set offset to default
      * position.
      * It can be in absolute pixel value, or in relative percentage
      * value.
      *
      * For example, `[0, '50%']` means to move upside side position
      * of symbol height.
      * It can be used to make the arrow in the bottom to be at data
      * position when symbol is pin.
      *
      *
      * @default
      * [0, 0]
      * @see https://echarts.apache.org/en/option.html#series-effectScatter.symbolOffset
      */
    var symbolOffset: js.UndefOr[js.Array[_]] = js.native
    
    /**
      * Rotate degree of symbol.
      * Note that when `symbol` is set to be `'arrow'` in `markLine`,
      * `symbolRotate` value will be ignored, and compulsively use tangent
      * angle.
      *
      *
      * @see https://echarts.apache.org/en/option.html#series-effectScatter.symbolRotate
      */
    var symbolRotate: js.UndefOr[Double] = js.native
    
    /**
      * symbol size.
      * It can be set to single numbers like `10`, or use an array to
      * represent width and height.
      * For example, `[20, 10]` means symbol width is `20`, and height
      * is`10`.
      *
      *
      * @default
      * 10
      * @see https://echarts.apache.org/en/option.html#series-effectScatter.symbolSize
      */
    var symbolSize: js.UndefOr[js.Array[_] | Double] = js.native
    
    /**
      * tooltip settings in this series.
      *
      *
      * @see https://echarts.apache.org/en/option.html#series-effectScatter.tooltip
      */
    var tooltip: js.UndefOr[BaseTooltip] = js.native
    
    /**
      * @default
      * "effectScatter"
      * @see https://echarts.apache.org/en/option.html#series-effectScatter.type
      */
    var `type`: js.UndefOr[String] = js.native
    
    /**
      * Index of
      * [x axis](https://echarts.apache.org/en/option.html#xAxis)
      * to combine with, which is useful for multiple x axes in one chart.
      *
      *
      * @see https://echarts.apache.org/en/option.html#series-effectScatter.xAxisIndex
      */
    var xAxisIndex: js.UndefOr[Double] = js.native
    
    /**
      * Index of
      * [y axis](https://echarts.apache.org/en/option.html#yAxis)
      * to combine with, which is useful for multiple y axes in one chart.
      *
      *
      * @see https://echarts.apache.org/en/option.html#series-effectScatter.yAxisIndex
      */
    var yAxisIndex: js.UndefOr[Double] = js.native
    
    /**
      * `z` value of all graghical elements in , which controls order
      * of drawing graphical components.
      * Components with smaller `z` values may be overwritten by those
      * with larger `z` values.
      *
      * `z` has a lower priority to `zlevel`, and will not create new
      * Canvas.
      *
      *
      * @default
      * 2
      * @see https://echarts.apache.org/en/option.html#series-effectScatter.z
      */
    var z: js.UndefOr[Double] = js.native
    
    /**
      * `zlevel` value of all graghical elements in .
      *
      * `zlevel` is used to make layers with Canvas.
      * Graphical elements with different `zlevel` values will be placed
      * in different Canvases, which is a common optimization technique.
      * We can put those frequently changed elements (like those with
      * animations) to a seperate `zlevel`.
      * Notice that too many Canvases will increase memory cost, and
      * should be used carefully on mobile phones to avoid crash.
      *
      * Canvases with bigger `zlevel` will be placed on Canvases with
      * smaller `zlevel`.
      *
      *
      * @see https://echarts.apache.org/en/option.html#series-effectScatter.zlevel
      */
    var zlevel: js.UndefOr[Double] = js.native
  }
  object SeriesEffectScatter {
    
    @scala.inline
    def apply(): SeriesEffectScatter = {
      val __obj = js.Dynamic.literal()
      __obj.asInstanceOf[SeriesEffectScatter]
    }
    
    @js.native
    trait DataObject extends StObject {
      
      /**
        * @see https://echarts.apache.org/en/option.html#series-effectScatter.data.emphasis
        */
      var emphasis: js.UndefOr[`4`] = js.native
      
      /**
        * @see https://echarts.apache.org/en/option.html#series-effectScatter.data.itemStyle
        */
      var itemStyle: js.UndefOr[BorderType] = js.native
      
      /**
        * @see https://echarts.apache.org/en/option.html#series-effectScatter.data.label
        */
      var label: js.UndefOr[Distance] = js.native
      
      /**
        * Symbol of single data.
        *
        * Icon types provided by ECharts includes `'circle'`, `'rect'`,
        * `'roundRect'`, `'triangle'`, `'diamond'`, `'pin'`, `'arrow'`,
        * `'none'`
        *
        * It can be set to an image with `'image://url'` , in which
        * URL is the link to an image, or `dataURI` of an image.
        *
        * An image URL example:
        *
        * ```
        * 'image://http://xxx.xxx.xxx/a/b.png'
        *
        * ```
        *
        * A `dataURI` example:
        *
        * [see doc](https://echarts.apache.org/en/option.html#series-effectScatter.effectScatter.data)
        *
        * Icons can be set to arbitrary vector path via `'path://'`
        * in ECharts.
        * As compared with raster image, vector paths prevent from
        * jagging and blurring when scaled, and have a better control
        * over changing colors.
        * Size of vectoer icon will be adapted automatically.
        * Refer to
        * [SVG PathData](http://www.w3.org/TR/SVG/paths.html#PathData)
        * for more information about format of path.
        * You may export vector paths from tools like Adobe Illustrator.
        *
        * For example:
        *
        * [see doc](https://echarts.apache.org/en/option.html#series-effectScatter.effectScatter.data)
        *
        *
        * @default
        * "circle"
        * @see https://echarts.apache.org/en/option.html#series-effectScatter.data.symbol
        */
      var symbol: js.UndefOr[String] = js.native
      
      /**
        * Whether to keep aspect for symbols in the form of `path://`.
        *
        *
        * @see https://echarts.apache.org/en/option.html#series-effectScatter.data.symbolKeepAspect
        */
      var symbolKeepAspect: js.UndefOr[Boolean] = js.native
      
      /**
        * Offset of single data symbol relative to original position.
        * By default, symbol will be put in the center position of
        * data.
        * But if symbol is from user-defined vector path or image,
        * you may not expect symbol to be in center.
        * In this case, you may use this attribute to set offset to
        * default position.
        * It can be in absolute pixel value, or in relative percentage
        * value.
        *
        * For example, `[0, '50%']` means to move upside side position
        * of symbol height.
        * It can be used to make the arrow in the bottom to be at data
        * position when symbol is pin.
        *
        *
        * @default
        * [0, 0]
        * @see https://echarts.apache.org/en/option.html#series-effectScatter.data.symbolOffset
        */
      var symbolOffset: js.UndefOr[js.Array[_]] = js.native
      
      /**
        * Rotate degree of single data symbol.
        * Note that when `symbol` is set to be `'arrow'` in `markLine`,
        * `symbolRotate` value will be ignored, and compulsively use
        * tangent angle.
        *
        *
        * @see https://echarts.apache.org/en/option.html#series-effectScatter.data.symbolRotate
        */
      var symbolRotate: js.UndefOr[Double] = js.native
      
      /**
        * single data symbol size.
        * It can be set to single numbers like `10`, or use an array
        * to represent width and height.
        * For example, `[20, 10]` means symbol width is `20`, and height
        * is`10`.
        *
        *
        * @default
        * 4
        * @see https://echarts.apache.org/en/option.html#series-effectScatter.data.symbolSize
        */
      var symbolSize: js.UndefOr[js.Array[_] | Double] = js.native
      
      /**
        * tooltip settings in this series data.
        *
        *
        * @see https://echarts.apache.org/en/option.html#series-effectScatter.data.tooltip
        */
      var tooltip: js.UndefOr[BaseTooltip] = js.native
    }
    object DataObject {
      
      @scala.inline
      def apply(): typingsSlinky.echarts.echarts.EChartOption.SeriesEffectScatter.DataObject = {
        val __obj = js.Dynamic.literal()
        __obj.asInstanceOf[typingsSlinky.echarts.echarts.EChartOption.SeriesEffectScatter.DataObject]
      }
      
      @scala.inline
      implicit class DataObjectMutableBuilder[Self <: typingsSlinky.echarts.echarts.EChartOption.SeriesEffectScatter.DataObject] (val x: Self) extends AnyVal {
        
        @scala.inline
        def setEmphasis(value: `4`): Self = StObject.set(x, "emphasis", value.asInstanceOf[js.Any])
        
        @scala.inline
        def setEmphasisUndefined: Self = StObject.set(x, "emphasis", js.undefined)
        
        @scala.inline
        def setItemStyle(value: BorderType): Self = StObject.set(x, "itemStyle", value.asInstanceOf[js.Any])
        
        @scala.inline
        def setItemStyleUndefined: Self = StObject.set(x, "itemStyle", js.undefined)
        
        @scala.inline
        def setLabel(value: Distance): Self = StObject.set(x, "label", value.asInstanceOf[js.Any])
        
        @scala.inline
        def setLabelUndefined: Self = StObject.set(x, "label", js.undefined)
        
        @scala.inline
        def setSymbol(value: String): Self = StObject.set(x, "symbol", value.asInstanceOf[js.Any])
        
        @scala.inline
        def setSymbolKeepAspect(value: Boolean): Self = StObject.set(x, "symbolKeepAspect", value.asInstanceOf[js.Any])
        
        @scala.inline
        def setSymbolKeepAspectUndefined: Self = StObject.set(x, "symbolKeepAspect", js.undefined)
        
        @scala.inline
        def setSymbolOffset(value: js.Array[_]): Self = StObject.set(x, "symbolOffset", value.asInstanceOf[js.Any])
        
        @scala.inline
        def setSymbolOffsetUndefined: Self = StObject.set(x, "symbolOffset", js.undefined)
        
        @scala.inline
        def setSymbolOffsetVarargs(value: js.Any*): Self = StObject.set(x, "symbolOffset", js.Array(value :_*))
        
        @scala.inline
        def setSymbolRotate(value: Double): Self = StObject.set(x, "symbolRotate", value.asInstanceOf[js.Any])
        
        @scala.inline
        def setSymbolRotateUndefined: Self = StObject.set(x, "symbolRotate", js.undefined)
        
        @scala.inline
        def setSymbolSize(value: js.Array[_] | Double): Self = StObject.set(x, "symbolSize", value.asInstanceOf[js.Any])
        
        @scala.inline
        def setSymbolSizeUndefined: Self = StObject.set(x, "symbolSize", js.undefined)
        
        @scala.inline
        def setSymbolSizeVarargs(value: js.Any*): Self = StObject.set(x, "symbolSize", js.Array(value :_*))
        
        @scala.inline
        def setSymbolUndefined: Self = StObject.set(x, "symbol", js.undefined)
        
        @scala.inline
        def setTooltip(value: BaseTooltip): Self = StObject.set(x, "tooltip", value.asInstanceOf[js.Any])
        
        @scala.inline
        def setTooltipUndefined: Self = StObject.set(x, "tooltip", js.undefined)
      }
    }
    
    @scala.inline
    implicit class SeriesEffectScatterMutableBuilder[Self <: SeriesEffectScatter] (val x: Self) extends AnyVal {
      
      @scala.inline
      def setAnimation(value: Boolean): Self = StObject.set(x, "animation", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setAnimationDelay(value: js.Function | Double): Self = StObject.set(x, "animationDelay", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setAnimationDelayUndefined: Self = StObject.set(x, "animationDelay", js.undefined)
      
      @scala.inline
      def setAnimationDelayUpdate(value: js.Function | Double): Self = StObject.set(x, "animationDelayUpdate", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setAnimationDelayUpdateUndefined: Self = StObject.set(x, "animationDelayUpdate", js.undefined)
      
      @scala.inline
      def setAnimationDuration(value: js.Function | Double): Self = StObject.set(x, "animationDuration", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setAnimationDurationUndefined: Self = StObject.set(x, "animationDuration", js.undefined)
      
      @scala.inline
      def setAnimationDurationUpdate(value: js.Function | Double): Self = StObject.set(x, "animationDurationUpdate", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setAnimationDurationUpdateUndefined: Self = StObject.set(x, "animationDurationUpdate", js.undefined)
      
      @scala.inline
      def setAnimationEasing(value: String): Self = StObject.set(x, "animationEasing", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setAnimationEasingUndefined: Self = StObject.set(x, "animationEasing", js.undefined)
      
      @scala.inline
      def setAnimationEasingUpdate(value: String): Self = StObject.set(x, "animationEasingUpdate", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setAnimationEasingUpdateUndefined: Self = StObject.set(x, "animationEasingUpdate", js.undefined)
      
      @scala.inline
      def setAnimationThreshold(value: Double): Self = StObject.set(x, "animationThreshold", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setAnimationThresholdUndefined: Self = StObject.set(x, "animationThreshold", js.undefined)
      
      @scala.inline
      def setAnimationUndefined: Self = StObject.set(x, "animation", js.undefined)
      
      @scala.inline
      def setCalendarIndex(value: Double): Self = StObject.set(x, "calendarIndex", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setCalendarIndexUndefined: Self = StObject.set(x, "calendarIndex", js.undefined)
      
      @scala.inline
      def setCoordinateSystem(value: String): Self = StObject.set(x, "coordinateSystem", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setCoordinateSystemUndefined: Self = StObject.set(x, "coordinateSystem", js.undefined)
      
      @scala.inline
      def setCursor(value: String): Self = StObject.set(x, "cursor", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setCursorUndefined: Self = StObject.set(x, "cursor", js.undefined)
      
      @scala.inline
      def setData(
        value: js.Array[
              (js.Array[
                Unit | Double | String | typingsSlinky.echarts.echarts.EChartOption.SeriesEffectScatter.DataObject
              ]) | typingsSlinky.echarts.echarts.EChartOption.SeriesEffectScatter.DataObject | Double | String | Unit
            ]
      ): Self = StObject.set(x, "data", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setDataUndefined: Self = StObject.set(x, "data", js.undefined)
      
      @scala.inline
      def setDataVarargs(
        value: ((js.Array[
              Unit | Double | String | typingsSlinky.echarts.echarts.EChartOption.SeriesEffectScatter.DataObject
            ]) | typingsSlinky.echarts.echarts.EChartOption.SeriesEffectScatter.DataObject | Double | String | Unit)*
      ): Self = StObject.set(x, "data", js.Array(value :_*))
      
      @scala.inline
      def setDatasetIndex(value: Double): Self = StObject.set(x, "datasetIndex", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setDatasetIndexUndefined: Self = StObject.set(x, "datasetIndex", js.undefined)
      
      @scala.inline
      def setDimensions(value: js.Array[_]): Self = StObject.set(x, "dimensions", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setDimensionsUndefined: Self = StObject.set(x, "dimensions", js.undefined)
      
      @scala.inline
      def setDimensionsVarargs(value: js.Any*): Self = StObject.set(x, "dimensions", js.Array(value :_*))
      
      @scala.inline
      def setEffectType(value: String): Self = StObject.set(x, "effectType", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setEffectTypeUndefined: Self = StObject.set(x, "effectType", js.undefined)
      
      @scala.inline
      def setEmphasis(value: ItemStyleLabel): Self = StObject.set(x, "emphasis", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setEmphasisUndefined: Self = StObject.set(x, "emphasis", js.undefined)
      
      @scala.inline
      def setEncode(value: js.Object): Self = StObject.set(x, "encode", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setEncodeUndefined: Self = StObject.set(x, "encode", js.undefined)
      
      @scala.inline
      def setGeoIndex(value: Double): Self = StObject.set(x, "geoIndex", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setGeoIndexUndefined: Self = StObject.set(x, "geoIndex", js.undefined)
      
      @scala.inline
      def setId(value: String): Self = StObject.set(x, "id", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setIdUndefined: Self = StObject.set(x, "id", js.undefined)
      
      @scala.inline
      def setItemStyle(value: ShadowOffsetY): Self = StObject.set(x, "itemStyle", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setItemStyleUndefined: Self = StObject.set(x, "itemStyle", js.undefined)
      
      @scala.inline
      def setLabel(value: BorderRadius): Self = StObject.set(x, "label", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setLabelUndefined: Self = StObject.set(x, "label", js.undefined)
      
      @scala.inline
      def setLegendHoverLink(value: Boolean): Self = StObject.set(x, "legendHoverLink", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setLegendHoverLinkUndefined: Self = StObject.set(x, "legendHoverLink", js.undefined)
      
      @scala.inline
      def setMarkArea(value: AnimationDelayUpdate): Self = StObject.set(x, "markArea", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setMarkAreaUndefined: Self = StObject.set(x, "markArea", js.undefined)
      
      @scala.inline
      def setMarkLine(value: AnimationDelay): Self = StObject.set(x, "markLine", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setMarkLineUndefined: Self = StObject.set(x, "markLine", js.undefined)
      
      @scala.inline
      def setMarkPoint(value: AnimationDuration): Self = StObject.set(x, "markPoint", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setMarkPointUndefined: Self = StObject.set(x, "markPoint", js.undefined)
      
      @scala.inline
      def setName(value: String): Self = StObject.set(x, "name", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setNameUndefined: Self = StObject.set(x, "name", js.undefined)
      
      @scala.inline
      def setPolarIndex(value: Double): Self = StObject.set(x, "polarIndex", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setPolarIndexUndefined: Self = StObject.set(x, "polarIndex", js.undefined)
      
      @scala.inline
      def setRippleEffect(value: BrushType): Self = StObject.set(x, "rippleEffect", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setRippleEffectUndefined: Self = StObject.set(x, "rippleEffect", js.undefined)
      
      @scala.inline
      def setSeriesLayoutBy(value: String): Self = StObject.set(x, "seriesLayoutBy", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setSeriesLayoutByUndefined: Self = StObject.set(x, "seriesLayoutBy", js.undefined)
      
      @scala.inline
      def setShowEffectOn(value: String): Self = StObject.set(x, "showEffectOn", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setShowEffectOnUndefined: Self = StObject.set(x, "showEffectOn", js.undefined)
      
      @scala.inline
      def setSymbol(value: String): Self = StObject.set(x, "symbol", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setSymbolKeepAspect(value: Boolean): Self = StObject.set(x, "symbolKeepAspect", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setSymbolKeepAspectUndefined: Self = StObject.set(x, "symbolKeepAspect", js.undefined)
      
      @scala.inline
      def setSymbolOffset(value: js.Array[_]): Self = StObject.set(x, "symbolOffset", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setSymbolOffsetUndefined: Self = StObject.set(x, "symbolOffset", js.undefined)
      
      @scala.inline
      def setSymbolOffsetVarargs(value: js.Any*): Self = StObject.set(x, "symbolOffset", js.Array(value :_*))
      
      @scala.inline
      def setSymbolRotate(value: Double): Self = StObject.set(x, "symbolRotate", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setSymbolRotateUndefined: Self = StObject.set(x, "symbolRotate", js.undefined)
      
      @scala.inline
      def setSymbolSize(value: js.Array[_] | Double): Self = StObject.set(x, "symbolSize", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setSymbolSizeUndefined: Self = StObject.set(x, "symbolSize", js.undefined)
      
      @scala.inline
      def setSymbolSizeVarargs(value: js.Any*): Self = StObject.set(x, "symbolSize", js.Array(value :_*))
      
      @scala.inline
      def setSymbolUndefined: Self = StObject.set(x, "symbol", js.undefined)
      
      @scala.inline
      def setTooltip(value: BaseTooltip): Self = StObject.set(x, "tooltip", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setTooltipUndefined: Self = StObject.set(x, "tooltip", js.undefined)
      
      @scala.inline
      def setType(value: String): Self = StObject.set(x, "type", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setTypeUndefined: Self = StObject.set(x, "type", js.undefined)
      
      @scala.inline
      def setXAxisIndex(value: Double): Self = StObject.set(x, "xAxisIndex", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setXAxisIndexUndefined: Self = StObject.set(x, "xAxisIndex", js.undefined)
      
      @scala.inline
      def setYAxisIndex(value: Double): Self = StObject.set(x, "yAxisIndex", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setYAxisIndexUndefined: Self = StObject.set(x, "yAxisIndex", js.undefined)
      
      @scala.inline
      def setZ(value: Double): Self = StObject.set(x, "z", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setZUndefined: Self = StObject.set(x, "z", js.undefined)
      
      @scala.inline
      def setZlevel(value: Double): Self = StObject.set(x, "zlevel", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setZlevelUndefined: Self = StObject.set(x, "zlevel", js.undefined)
    }
  }
  
  /**
    * **Funnel chart**
    *
    * **sample:**
    *
    * [see doc](https://echarts.apache.org/en/option.html#series-funnel)
    *
    *
    * @see https://echarts.apache.org/en/option.html#series-funnel
    */
  @js.native
  trait SeriesFunnel extends Series {
    
    /**
      * Whether to enable animation.
      *
      *
      * @default
      * "true"
      * @see https://echarts.apache.org/en/option.html#series-funnel.animation
      */
    var animation: js.UndefOr[Boolean] = js.native
    
    /**
      * Delay before updating the first animation, which supports callback
      * function for different data to have different animation effect.
      *
      * For example:
      *
      * [see doc](https://echarts.apache.org/en/option.html#series-funnel.funnel)
      *
      * See
      * [this example](https://echarts.apache.org/examples/en/editor.html?c=bar-animation-delay)
      * for more information.
      *
      *
      * @see https://echarts.apache.org/en/option.html#series-funnel.animationDelay
      */
    var animationDelay: js.UndefOr[js.Function | Double] = js.native
    
    /**
      * Delay before updating animation, which supports callback function
      * for different data to have different animation effect.
      *
      * For example:
      *
      * [see doc](https://echarts.apache.org/en/option.html#series-funnel.funnel)
      *
      * See
      * [this example](https://echarts.apache.org/examples/en/editor.html?c=bar-animation-delay)
      * for more information.
      *
      *
      * @see https://echarts.apache.org/en/option.html#series-funnel.animationDelayUpdate
      */
    var animationDelayUpdate: js.UndefOr[js.Function | Double] = js.native
    
    /**
      * Duration of the first animation, which supports callback function
      * for different data to have different animation effect:
      *
      * [see doc](https://echarts.apache.org/en/option.html#series-funnel.funnel)
      *
      *
      * @default
      * 1000
      * @see https://echarts.apache.org/en/option.html#series-funnel.animationDuration
      */
    var animationDuration: js.UndefOr[js.Function | Double] = js.native
    
    /**
      * Time for animation to complete, which supports callback function
      * for different data to have different animation effect:
      *
      * [see doc](https://echarts.apache.org/en/option.html#series-funnel.funnel)
      *
      *
      * @default
      * 300
      * @see https://echarts.apache.org/en/option.html#series-funnel.animationDurationUpdate
      */
    var animationDurationUpdate: js.UndefOr[js.Function | Double] = js.native
    
    /**
      * Easing method used for the first animation.
      * Varied easing effects can be found at
      * [easing effect example](https://echarts.apache.org/examples/en/editor.html?c=line-easing)
      * .
      *
      *
      * @default
      * "cubicOut"
      * @see https://echarts.apache.org/en/option.html#series-funnel.animationEasing
      */
    var animationEasing: js.UndefOr[String] = js.native
    
    /**
      * Easing method used for animation.
      *
      *
      * @default
      * "cubicOut"
      * @see https://echarts.apache.org/en/option.html#series-funnel.animationEasingUpdate
      */
    var animationEasingUpdate: js.UndefOr[String] = js.native
    
    /**
      * Whether to set graphic number threshold to animation.
      * Animation will be disabled when graphic number is larger than
      * threshold.
      *
      *
      * @default
      * 2000
      * @see https://echarts.apache.org/en/option.html#series-funnel.animationThreshold
      */
    var animationThreshold: js.UndefOr[Double] = js.native
    
    /**
      * Data array of series, which can be a single data value, like:
      *
      * ```
      * [12, 34, 56, 10, 23]
      *
      * ```
      *
      * Or, if need extra dimensions for components like
      * [visualMap](https://echarts.apache.org/en/option.html#visualMap)
      * to map to graphic attributes like color, it can also be in the
      * form of array. For example:
      *
      * ```
      * [[12, 14], [34, 50], [56, 30], [10, 15], [23, 10]]
      *
      * ```
      *
      * In this case, we can assgin the second value in each arrary item
      * to
      * [visualMap](https://echarts.apache.org/en/option.html#visualMap)
      * component.
      *
      * More likely, we need to assign name to each data item, in which
      * case each item should be an object:
      *
      * [see doc](https://echarts.apache.org/en/option.html#series-funnel.funnel)
      *
      * Each data item can be further custerized:
      *
      * [see doc](https://echarts.apache.org/en/option.html#series-funnel.funnel)
      *
      *
      * @see https://echarts.apache.org/en/option.html#series-funnel.data
      */
    var data: js.UndefOr[
        js.Array[
          js.Array[Double] | typingsSlinky.echarts.echarts.EChartOption.SeriesFunnel.DataObject | Double
        ]
      ] = js.native
    
    /**
      * If
      * [series.data](https://echarts.apache.org/en/option.html#series.data)
      * is not specified, and
      * [dataset](https://echarts.apache.org/en/option.html#dataset)
      * exists, the series will use `dataset`.
      * `datasetIndex` specifies which dataset will be used.
      *
      *
      * @see https://echarts.apache.org/en/option.html#series-funnel.datasetIndex
      */
    var datasetIndex: js.UndefOr[Double] = js.native
    
    /**
      * @see https://echarts.apache.org/en/option.html#series-funnel.emphasis
      */
    var emphasis: js.UndefOr[LabelLine] = js.native
    
    /**
      * Horizontal align.
      * Defaults to align center. Can be 'left', 'right', 'center'.
      *
      *
      * @default
      * "center"
      * @see https://echarts.apache.org/en/option.html#series-funnel.funnelAlign
      */
    var funnelAlign: js.UndefOr[String] = js.native
    
    /**
      * Gap between each trapezoid.
      *
      *
      * @see https://echarts.apache.org/en/option.html#series-funnel.gap
      */
    var gap: js.UndefOr[Double] = js.native
    
    /**
      * Component ID, not specified by default.
      * If specified, it can be used to refer the component in option
      * or API.
      *
      *
      * @see https://echarts.apache.org/en/option.html#series-funnel.id
      */
    var id: js.UndefOr[String] = js.native
    
    /**
      * Graphic style of , `emphasis` is the style when it is highlighted,
      * like being hovered by mouse, or highlighted via legend connect.
      *
      *
      * @see https://echarts.apache.org/en/option.html#series-funnel.itemStyle
      */
    var itemStyle: js.UndefOr[ShadowOffsetY] = js.native
    
    /**
      * Text label of funnel chart, to explain some data information
      * about graphic item like value, name and so on.
      * `label` is placed under `itemStyle` in ECharts 2.x.
      * In ECharts 3, to make the configuration structure flatter, `label`is
      * taken to be at the same level with `itemStyle`, and has `emphasis`
      * as `itemStyle` does.
      *
      *
      * @see https://echarts.apache.org/en/option.html#series-funnel.label
      */
    var label: js.UndefOr[FontSize] = js.native
    
    /**
      * The visual guide line style of label. When
      * [label position](https://echarts.apache.org/en/option.html#series-funnel.label.position)
      * is set as `'left'`or`'right'`, the visual guide line will show.
      *
      *
      * @see https://echarts.apache.org/en/option.html#series-funnel.labelLine
      */
    var labelLine: js.UndefOr[Length] = js.native
    
    /**
      * Whether to enable highlighting chart when
      * [legend](https://echarts.apache.org/en/option.html#legend)
      * is being hovered.
      *
      *
      * @default
      * "true"
      * @see https://echarts.apache.org/en/option.html#series-funnel.legendHoverLink
      */
    var legendHoverLink: js.UndefOr[Boolean] = js.native
    
    /**
      * Used to mark an area in chart.
      * For example, mark a time interval.
      *
      *
      * @see https://echarts.apache.org/en/option.html#series-funnel.markArea
      */
    var markArea: js.UndefOr[AnimationThreshold] = js.native
    
    /**
      * Use a line in the chart to illustrate.
      *
      *
      * @see https://echarts.apache.org/en/option.html#series-funnel.markLine
      */
    var markLine: js.UndefOr[AnimationEasingUpdate] = js.native
    
    /**
      * Mark point in a chart.
      *
      *
      * @see https://echarts.apache.org/en/option.html#series-funnel.markPoint
      */
    var markPoint: js.UndefOr[AnimationEasing] = js.native
    
    /**
      * The specified maximum value.
      *
      *
      * @default
      * 100
      * @see https://echarts.apache.org/en/option.html#series-funnel.max
      */
    var max: js.UndefOr[Double] = js.native
    
    /**
      * The mapped width from maximum data value
      * [max](https://echarts.apache.org/en/option.html#series-funnel.max)
      * .
      *
      * It can be absolute pixel and also the percentage of
      * [layout width](https://echarts.apache.org/en/option.html#series-funnel.width)
      * .
      *
      *
      * @default
      * '100%'
      * @see https://echarts.apache.org/en/option.html#series-funnel.maxSize
      */
    var maxSize: js.UndefOr[String] = js.native
    
    /**
      * The specified minimum value.
      *
      *
      * @see https://echarts.apache.org/en/option.html#series-funnel.min
      */
    var min: js.UndefOr[Double] = js.native
    
    /**
      * The mapped width from minimum data value
      * [min](https://echarts.apache.org/en/option.html#series-funnel.min)
      * .
      *
      * It can be absolute pixel and also the percentage of
      * [layout width](https://echarts.apache.org/en/option.html#series-funnel.width)
      *
      * If you don't want the graph of minimum value to be a triangle,
      * you can set up this property larger than 0.
      *
      *
      * @default
      * '0%'
      * @see https://echarts.apache.org/en/option.html#series-funnel.minSize
      */
    var minSize: js.UndefOr[String] = js.native
    
    /**
      * Series name used for displaying in
      * [tooltip](https://echarts.apache.org/en/option.html#tooltip)
      * and filtering with
      * [legend](https://echarts.apache.org/en/option.html#legend)
      * , or updaing data and configuration with `setOption`.
      *
      *
      * @see https://echarts.apache.org/en/option.html#series-funnel.name
      */
    var name: js.UndefOr[String] = js.native
    
    /**
      * When
      * [dataset](https://echarts.apache.org/en/option.html#dataset)
      * is used, `seriesLayoutBy` specifies whether the column or the
      * row of `dataset` is mapped to the series, namely, the series
      * is "layout" on columns or rows. Optional values:
      *
      * + 'column': by default, the columns of `dataset` are mapped the
      * series. In this case, each column represents a dimension.
      * + 'row'：the rows of `dataset` are mapped to the series.
      * In this case, each row represents a dimension.
      *
      * Check this
      * [example](https://echarts.apache.org/examples/en/editor.html?c=dataset-series-layout-by)
      * .
      *
      *
      * @default
      * "column"
      * @see https://echarts.apache.org/en/option.html#series-funnel.seriesLayoutBy
      */
    var seriesLayoutBy: js.UndefOr[String] = js.native
    
    /**
      * Data sorting, which can be whether `'ascending'`, `'descending'`,
      * `'none'`(in data order) or a function, which is the same as `Array.prototype.sort(function
      * (a, b) { ... })`;
      *
      *
      * @default
      * "descending"
      * @see https://echarts.apache.org/en/option.html#series-funnel.sort
      */
    var sort: js.UndefOr[String] = js.native
    
    /**
      * tooltip settings in this series.
      *
      *
      * @see https://echarts.apache.org/en/option.html#series-funnel.tooltip
      */
    var tooltip: js.UndefOr[BaseTooltip] = js.native
    
    /**
      * @default
      * "funnel"
      * @see https://echarts.apache.org/en/option.html#series-funnel.type
      */
    var `type`: js.UndefOr[String] = js.native
  }
  object SeriesFunnel {
    
    @scala.inline
    def apply(): SeriesFunnel = {
      val __obj = js.Dynamic.literal()
      __obj.asInstanceOf[SeriesFunnel]
    }
    
    @js.native
    trait DataObject extends StObject {
      
      /**
        * @see https://echarts.apache.org/en/option.html#series-funnel.data.emphasis
        */
      var emphasis: js.UndefOr[LabelLabelLine] = js.native
      
      /**
        * Graphic style of , `emphasis` is the style when it is highlighted,
        * like being hovered by mouse, or highlighted via legend connect.
        *
        *
        * @see https://echarts.apache.org/en/option.html#series-funnel.data.itemStyle
        */
      var itemStyle: js.UndefOr[BorderType] = js.native
      
      /**
        * The label configuration of a single data item.
        *
        *
        * @see https://echarts.apache.org/en/option.html#series-funnel.data.label
        */
      var label: js.UndefOr[FontWeight] = js.native
      
      /**
        * @see https://echarts.apache.org/en/option.html#series-funnel.data.labelLine
        */
      var labelLine: js.UndefOr[Length] = js.native
      
      /**
        * the name of data item.
        *
        *
        * @see https://echarts.apache.org/en/option.html#series-funnel.data.name
        */
      var name: js.UndefOr[String] = js.native
      
      /**
        * tooltip settings in this series data.
        *
        *
        * @see https://echarts.apache.org/en/option.html#series-funnel.data.tooltip
        */
      var tooltip: js.UndefOr[BaseTooltip] = js.native
      
      /**
        * data value.
        *
        *
        * @see https://echarts.apache.org/en/option.html#series-funnel.data.value
        */
      var value: js.UndefOr[Double] = js.native
    }
    object DataObject {
      
      @scala.inline
      def apply(): typingsSlinky.echarts.echarts.EChartOption.SeriesFunnel.DataObject = {
        val __obj = js.Dynamic.literal()
        __obj.asInstanceOf[typingsSlinky.echarts.echarts.EChartOption.SeriesFunnel.DataObject]
      }
      
      @scala.inline
      implicit class DataObjectMutableBuilder[Self <: typingsSlinky.echarts.echarts.EChartOption.SeriesFunnel.DataObject] (val x: Self) extends AnyVal {
        
        @scala.inline
        def setEmphasis(value: LabelLabelLine): Self = StObject.set(x, "emphasis", value.asInstanceOf[js.Any])
        
        @scala.inline
        def setEmphasisUndefined: Self = StObject.set(x, "emphasis", js.undefined)
        
        @scala.inline
        def setItemStyle(value: BorderType): Self = StObject.set(x, "itemStyle", value.asInstanceOf[js.Any])
        
        @scala.inline
        def setItemStyleUndefined: Self = StObject.set(x, "itemStyle", js.undefined)
        
        @scala.inline
        def setLabel(value: FontWeight): Self = StObject.set(x, "label", value.asInstanceOf[js.Any])
        
        @scala.inline
        def setLabelLine(value: Length): Self = StObject.set(x, "labelLine", value.asInstanceOf[js.Any])
        
        @scala.inline
        def setLabelLineUndefined: Self = StObject.set(x, "labelLine", js.undefined)
        
        @scala.inline
        def setLabelUndefined: Self = StObject.set(x, "label", js.undefined)
        
        @scala.inline
        def setName(value: String): Self = StObject.set(x, "name", value.asInstanceOf[js.Any])
        
        @scala.inline
        def setNameUndefined: Self = StObject.set(x, "name", js.undefined)
        
        @scala.inline
        def setTooltip(value: BaseTooltip): Self = StObject.set(x, "tooltip", value.asInstanceOf[js.Any])
        
        @scala.inline
        def setTooltipUndefined: Self = StObject.set(x, "tooltip", js.undefined)
        
        @scala.inline
        def setValue(value: Double): Self = StObject.set(x, "value", value.asInstanceOf[js.Any])
        
        @scala.inline
        def setValueUndefined: Self = StObject.set(x, "value", js.undefined)
      }
    }
    
    @scala.inline
    implicit class SeriesFunnelMutableBuilder[Self <: SeriesFunnel] (val x: Self) extends AnyVal {
      
      @scala.inline
      def setAnimation(value: Boolean): Self = StObject.set(x, "animation", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setAnimationDelay(value: js.Function | Double): Self = StObject.set(x, "animationDelay", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setAnimationDelayUndefined: Self = StObject.set(x, "animationDelay", js.undefined)
      
      @scala.inline
      def setAnimationDelayUpdate(value: js.Function | Double): Self = StObject.set(x, "animationDelayUpdate", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setAnimationDelayUpdateUndefined: Self = StObject.set(x, "animationDelayUpdate", js.undefined)
      
      @scala.inline
      def setAnimationDuration(value: js.Function | Double): Self = StObject.set(x, "animationDuration", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setAnimationDurationUndefined: Self = StObject.set(x, "animationDuration", js.undefined)
      
      @scala.inline
      def setAnimationDurationUpdate(value: js.Function | Double): Self = StObject.set(x, "animationDurationUpdate", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setAnimationDurationUpdateUndefined: Self = StObject.set(x, "animationDurationUpdate", js.undefined)
      
      @scala.inline
      def setAnimationEasing(value: String): Self = StObject.set(x, "animationEasing", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setAnimationEasingUndefined: Self = StObject.set(x, "animationEasing", js.undefined)
      
      @scala.inline
      def setAnimationEasingUpdate(value: String): Self = StObject.set(x, "animationEasingUpdate", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setAnimationEasingUpdateUndefined: Self = StObject.set(x, "animationEasingUpdate", js.undefined)
      
      @scala.inline
      def setAnimationThreshold(value: Double): Self = StObject.set(x, "animationThreshold", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setAnimationThresholdUndefined: Self = StObject.set(x, "animationThreshold", js.undefined)
      
      @scala.inline
      def setAnimationUndefined: Self = StObject.set(x, "animation", js.undefined)
      
      @scala.inline
      def setData(
        value: js.Array[
              js.Array[Double] | typingsSlinky.echarts.echarts.EChartOption.SeriesFunnel.DataObject | Double
            ]
      ): Self = StObject.set(x, "data", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setDataUndefined: Self = StObject.set(x, "data", js.undefined)
      
      @scala.inline
      def setDataVarargs(
        value: (js.Array[Double] | typingsSlinky.echarts.echarts.EChartOption.SeriesFunnel.DataObject | Double)*
      ): Self = StObject.set(x, "data", js.Array(value :_*))
      
      @scala.inline
      def setDatasetIndex(value: Double): Self = StObject.set(x, "datasetIndex", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setDatasetIndexUndefined: Self = StObject.set(x, "datasetIndex", js.undefined)
      
      @scala.inline
      def setEmphasis(value: LabelLine): Self = StObject.set(x, "emphasis", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setEmphasisUndefined: Self = StObject.set(x, "emphasis", js.undefined)
      
      @scala.inline
      def setFunnelAlign(value: String): Self = StObject.set(x, "funnelAlign", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setFunnelAlignUndefined: Self = StObject.set(x, "funnelAlign", js.undefined)
      
      @scala.inline
      def setGap(value: Double): Self = StObject.set(x, "gap", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setGapUndefined: Self = StObject.set(x, "gap", js.undefined)
      
      @scala.inline
      def setId(value: String): Self = StObject.set(x, "id", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setIdUndefined: Self = StObject.set(x, "id", js.undefined)
      
      @scala.inline
      def setItemStyle(value: ShadowOffsetY): Self = StObject.set(x, "itemStyle", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setItemStyleUndefined: Self = StObject.set(x, "itemStyle", js.undefined)
      
      @scala.inline
      def setLabel(value: FontSize): Self = StObject.set(x, "label", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setLabelLine(value: Length): Self = StObject.set(x, "labelLine", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setLabelLineUndefined: Self = StObject.set(x, "labelLine", js.undefined)
      
      @scala.inline
      def setLabelUndefined: Self = StObject.set(x, "label", js.undefined)
      
      @scala.inline
      def setLegendHoverLink(value: Boolean): Self = StObject.set(x, "legendHoverLink", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setLegendHoverLinkUndefined: Self = StObject.set(x, "legendHoverLink", js.undefined)
      
      @scala.inline
      def setMarkArea(value: AnimationThreshold): Self = StObject.set(x, "markArea", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setMarkAreaUndefined: Self = StObject.set(x, "markArea", js.undefined)
      
      @scala.inline
      def setMarkLine(value: AnimationEasingUpdate): Self = StObject.set(x, "markLine", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setMarkLineUndefined: Self = StObject.set(x, "markLine", js.undefined)
      
      @scala.inline
      def setMarkPoint(value: AnimationEasing): Self = StObject.set(x, "markPoint", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setMarkPointUndefined: Self = StObject.set(x, "markPoint", js.undefined)
      
      @scala.inline
      def setMax(value: Double): Self = StObject.set(x, "max", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setMaxSize(value: String): Self = StObject.set(x, "maxSize", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setMaxSizeUndefined: Self = StObject.set(x, "maxSize", js.undefined)
      
      @scala.inline
      def setMaxUndefined: Self = StObject.set(x, "max", js.undefined)
      
      @scala.inline
      def setMin(value: Double): Self = StObject.set(x, "min", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setMinSize(value: String): Self = StObject.set(x, "minSize", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setMinSizeUndefined: Self = StObject.set(x, "minSize", js.undefined)
      
      @scala.inline
      def setMinUndefined: Self = StObject.set(x, "min", js.undefined)
      
      @scala.inline
      def setName(value: String): Self = StObject.set(x, "name", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setNameUndefined: Self = StObject.set(x, "name", js.undefined)
      
      @scala.inline
      def setSeriesLayoutBy(value: String): Self = StObject.set(x, "seriesLayoutBy", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setSeriesLayoutByUndefined: Self = StObject.set(x, "seriesLayoutBy", js.undefined)
      
      @scala.inline
      def setSort(value: String): Self = StObject.set(x, "sort", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setSortUndefined: Self = StObject.set(x, "sort", js.undefined)
      
      @scala.inline
      def setTooltip(value: BaseTooltip): Self = StObject.set(x, "tooltip", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setTooltipUndefined: Self = StObject.set(x, "tooltip", js.undefined)
      
      @scala.inline
      def setType(value: String): Self = StObject.set(x, "type", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setTypeUndefined: Self = StObject.set(x, "type", js.undefined)
    }
  }
  
  /**
    * **Gauge chart**
    *
    * **Example:**
    *
    * [see doc](https://echarts.apache.org/en/option.html#series-gauge)
    *
    *
    * @see https://echarts.apache.org/en/option.html#series-gauge
    */
  @js.native
  trait SeriesGauge extends Series {
    
    /**
      * Whether to enable animation.
      *
      *
      * @default
      * "true"
      * @see https://echarts.apache.org/en/option.html#series-gauge.animation
      */
    var animation: js.UndefOr[Boolean] = js.native
    
    /**
      * Delay before updating the first animation, which supports callback
      * function for different data to have different animation effect.
      *
      * For example:
      *
      * [see doc](https://echarts.apache.org/en/option.html#series-gauge.gauge)
      *
      * See
      * [this example](https://echarts.apache.org/examples/en/editor.html?c=bar-animation-delay)
      * for more information.
      *
      *
      * @see https://echarts.apache.org/en/option.html#series-gauge.animationDelay
      */
    var animationDelay: js.UndefOr[js.Function | Double] = js.native
    
    /**
      * Delay before updating animation, which supports callback function
      * for different data to have different animation effect.
      *
      * For example:
      *
      * [see doc](https://echarts.apache.org/en/option.html#series-gauge.gauge)
      *
      * See
      * [this example](https://echarts.apache.org/examples/en/editor.html?c=bar-animation-delay)
      * for more information.
      *
      *
      * @see https://echarts.apache.org/en/option.html#series-gauge.animationDelayUpdate
      */
    var animationDelayUpdate: js.UndefOr[js.Function | Double] = js.native
    
    /**
      * Duration of the first animation, which supports callback function
      * for different data to have different animation effect:
      *
      * [see doc](https://echarts.apache.org/en/option.html#series-gauge.gauge)
      *
      *
      * @default
      * 1000
      * @see https://echarts.apache.org/en/option.html#series-gauge.animationDuration
      */
    var animationDuration: js.UndefOr[js.Function | Double] = js.native
    
    /**
      * Time for animation to complete, which supports callback function
      * for different data to have different animation effect:
      *
      * [see doc](https://echarts.apache.org/en/option.html#series-gauge.gauge)
      *
      *
      * @default
      * 300
      * @see https://echarts.apache.org/en/option.html#series-gauge.animationDurationUpdate
      */
    var animationDurationUpdate: js.UndefOr[js.Function | Double] = js.native
    
    /**
      * Easing method used for the first animation.
      * Varied easing effects can be found at
      * [easing effect example](https://echarts.apache.org/examples/en/editor.html?c=line-easing)
      * .
      *
      *
      * @default
      * "cubicOut"
      * @see https://echarts.apache.org/en/option.html#series-gauge.animationEasing
      */
    var animationEasing: js.UndefOr[String] = js.native
    
    /**
      * Easing method used for animation.
      *
      *
      * @default
      * "cubicOut"
      * @see https://echarts.apache.org/en/option.html#series-gauge.animationEasingUpdate
      */
    var animationEasingUpdate: js.UndefOr[String] = js.native
    
    /**
      * Whether to set graphic number threshold to animation.
      * Animation will be disabled when graphic number is larger than
      * threshold.
      *
      *
      * @default
      * 2000
      * @see https://echarts.apache.org/en/option.html#series-gauge.animationThreshold
      */
    var animationThreshold: js.UndefOr[Double] = js.native
    
    /**
      * Axis tick label.
      *
      *
      * @see https://echarts.apache.org/en/option.html#series-gauge.axisLabel
      */
    var axisLabel: js.UndefOr[Padding] = js.native
    
    /**
      * The related configuration about the axis line of gauge chart.
      *
      *
      * @see https://echarts.apache.org/en/option.html#series-gauge.axisLine
      */
    var axisLine: js.UndefOr[LineStyleShow] = js.native
    
    /**
      * The tick line style.
      *
      *
      * @see https://echarts.apache.org/en/option.html#series-gauge.axisTick
      */
    var axisTick: js.UndefOr[SplitNumber] = js.native
    
    /**
      * Whether the scale in gauge chart increases clockwise.
      *
      *
      * @default
      * "true"
      * @see https://echarts.apache.org/en/option.html#series-gauge.clockwise
      */
    var clockwise: js.UndefOr[Boolean] = js.native
    
    /**
      * Data array of series, which can be a single data value.
      *
      * [see doc](https://echarts.apache.org/en/option.html#series-gauge.data)
      *
      * Or, if need extra dimensions for components like [visualMap](https://echarts.apache.org/en/option.html#visualMap)
      * to map to graphic attributes like color, it can also be in the form of array.
      *
      * In this case, we can assigin the second value in each arrary item to [visualMap](https://echarts.apache.org/en/option.html#visualMap) component.
      * More likely, we need to assign name to each data item, in which case each item should be an object:
      *
      *
      * @see https://echarts.apache.org/en/option.html#series-gauge.data
      */
    var data: js.UndefOr[
        js.Array[
          (js.Array[
            Unit | String | Double | typingsSlinky.echarts.echarts.EChartOption.SeriesGauge.DataObject
          ]) | typingsSlinky.echarts.echarts.EChartOption.SeriesGauge.DataObject | Double | String | Unit
        ]
      ] = js.native
    
    /**
      * The detail about gauge chart which is used to show data.
      *
      *
      * @see https://echarts.apache.org/en/option.html#series-gauge.detail
      */
    var detail: js.UndefOr[Rich] = js.native
    
    /**
      * @see https://echarts.apache.org/en/option.html#series-gauge.emphasis
      */
    var emphasis: js.UndefOr[`2`] = js.native
    
    /**
      * The end angle of gauge chart.
      *
      *
      * @default
      * -45
      * @see https://echarts.apache.org/en/option.html#series-gauge.endAngle
      */
    var endAngle: js.UndefOr[Double] = js.native
    
    /**
      * Component ID, not specified by default.
      * If specified, it can be used to refer the component in option
      * or API.
      *
      *
      * @see https://echarts.apache.org/en/option.html#series-gauge.id
      */
    var id: js.UndefOr[String] = js.native
    
    /**
      * The style of gauge chart.
      *
      *
      * @see https://echarts.apache.org/en/option.html#series-gauge.itemStyle
      */
    var itemStyle: js.UndefOr[BorderColorBorderType] = js.native
    
    /**
      * Used to mark an area in chart.
      * For example, mark a time interval.
      *
      *
      * @see https://echarts.apache.org/en/option.html#series-gauge.markArea
      */
    var markArea: js.UndefOr[AnimationThreshold] = js.native
    
    /**
      * Use a line in the chart to illustrate.
      *
      *
      * @see https://echarts.apache.org/en/option.html#series-gauge.markLine
      */
    var markLine: js.UndefOr[AnimationEasingUpdate] = js.native
    
    /**
      * Mark point in a chart.
      *
      *
      * @see https://echarts.apache.org/en/option.html#series-gauge.markPoint
      */
    var markPoint: js.UndefOr[AnimationEasing] = js.native
    
    /**
      * The maximum data value which map to
      * [maxAngle](https://echarts.apache.org/en/option.html#series-gauge.maxAngle)
      * .
      *
      *
      * @default
      * 100
      * @see https://echarts.apache.org/en/option.html#series-gauge.max
      */
    var max: js.UndefOr[Double] = js.native
    
    /**
      * The minimum data value which map to
      * [minAngle](https://echarts.apache.org/en/option.html#series-gauge.minAngle)
      * .
      *
      *
      * @see https://echarts.apache.org/en/option.html#series-gauge.min
      */
    var min: js.UndefOr[Double] = js.native
    
    /**
      * Series name used for displaying in
      * [tooltip](https://echarts.apache.org/en/option.html#tooltip)
      * and filtering with
      * [legend](https://echarts.apache.org/en/option.html#legend)
      * , or updaing data and configuration with `setOption`.
      *
      *
      * @see https://echarts.apache.org/en/option.html#series-gauge.name
      */
    var name: js.UndefOr[String] = js.native
    
    /**
      * Gauge chart pointer.
      *
      *
      * @see https://echarts.apache.org/en/option.html#series-gauge.pointer
      */
    var pointer: js.UndefOr[LengthShow] = js.native
    
    /**
      * The radius of gauge chart.
      * It can be a percentage value of the smaller of container half
      * width and half height, also can be an absolute value.
      *
      * {{ use partial-legend-hover-link }}
      *
      *
      * @default
      * '75%'
      * @see https://echarts.apache.org/en/option.html#series-gauge.radius
      */
    var radius: js.UndefOr[Double | String] = js.native
    
    /**
      * The style of split line.
      *
      *
      * @see https://echarts.apache.org/en/option.html#series-gauge.splitLine
      */
    var splitLine: js.UndefOr[LengthLineStyle] = js.native
    
    /**
      * The number of split segments of gauge chart scale.
      *
      *
      * @default
      * 10
      * @see https://echarts.apache.org/en/option.html#series-gauge.splitNumber
      */
    var splitNumber: js.UndefOr[Double] = js.native
    
    /**
      * The start angle of gauge chart. The direct right side of
      * [circle center](https://echarts.apache.org/en/option.html#series-gauge.center)
      * is `0` degree, the right above it is `90` degree, the direct
      * left side of it is `180` degree.
      *
      *
      * @default
      * 225
      * @see https://echarts.apache.org/en/option.html#series-gauge.startAngle
      */
    var startAngle: js.UndefOr[Double] = js.native
    
    /**
      * The title of gauge chart.
      *
      *
      * @see https://echarts.apache.org/en/option.html#series-gauge.title
      */
    var title: js.UndefOr[OffsetCenter] = js.native
    
    /**
      * tooltip settings in this series.
      *
      *
      * @see https://echarts.apache.org/en/option.html#series-gauge.tooltip
      */
    var tooltip: js.UndefOr[BaseTooltip] = js.native
    
    /**
      * @default
      * "gauge"
      * @see https://echarts.apache.org/en/option.html#series-gauge.type
      */
    var `type`: js.UndefOr[String] = js.native
  }
  object SeriesGauge {
    
    @scala.inline
    def apply(): SeriesGauge = {
      val __obj = js.Dynamic.literal()
      __obj.asInstanceOf[SeriesGauge]
    }
    
    @js.native
    trait DataObject extends StObject {
      
      /**
        * The name of data item.
        *
        *
        * @see https://echarts.apache.org/en/option.html#series-gauge.data.name
        */
      var name: js.UndefOr[String] = js.native
      
      /**
        * The value of a single data item.
        *
        *
        * @see https://echarts.apache.org/en/option.html#series-gauge.data.value
        */
      var value: js.UndefOr[Double] = js.native
    }
    object DataObject {
      
      @scala.inline
      def apply(): typingsSlinky.echarts.echarts.EChartOption.SeriesGauge.DataObject = {
        val __obj = js.Dynamic.literal()
        __obj.asInstanceOf[typingsSlinky.echarts.echarts.EChartOption.SeriesGauge.DataObject]
      }
      
      @scala.inline
      implicit class DataObjectMutableBuilder[Self <: typingsSlinky.echarts.echarts.EChartOption.SeriesGauge.DataObject] (val x: Self) extends AnyVal {
        
        @scala.inline
        def setName(value: String): Self = StObject.set(x, "name", value.asInstanceOf[js.Any])
        
        @scala.inline
        def setNameUndefined: Self = StObject.set(x, "name", js.undefined)
        
        @scala.inline
        def setValue(value: Double): Self = StObject.set(x, "value", value.asInstanceOf[js.Any])
        
        @scala.inline
        def setValueUndefined: Self = StObject.set(x, "value", js.undefined)
      }
    }
    
    @scala.inline
    implicit class SeriesGaugeMutableBuilder[Self <: SeriesGauge] (val x: Self) extends AnyVal {
      
      @scala.inline
      def setAnimation(value: Boolean): Self = StObject.set(x, "animation", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setAnimationDelay(value: js.Function | Double): Self = StObject.set(x, "animationDelay", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setAnimationDelayUndefined: Self = StObject.set(x, "animationDelay", js.undefined)
      
      @scala.inline
      def setAnimationDelayUpdate(value: js.Function | Double): Self = StObject.set(x, "animationDelayUpdate", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setAnimationDelayUpdateUndefined: Self = StObject.set(x, "animationDelayUpdate", js.undefined)
      
      @scala.inline
      def setAnimationDuration(value: js.Function | Double): Self = StObject.set(x, "animationDuration", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setAnimationDurationUndefined: Self = StObject.set(x, "animationDuration", js.undefined)
      
      @scala.inline
      def setAnimationDurationUpdate(value: js.Function | Double): Self = StObject.set(x, "animationDurationUpdate", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setAnimationDurationUpdateUndefined: Self = StObject.set(x, "animationDurationUpdate", js.undefined)
      
      @scala.inline
      def setAnimationEasing(value: String): Self = StObject.set(x, "animationEasing", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setAnimationEasingUndefined: Self = StObject.set(x, "animationEasing", js.undefined)
      
      @scala.inline
      def setAnimationEasingUpdate(value: String): Self = StObject.set(x, "animationEasingUpdate", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setAnimationEasingUpdateUndefined: Self = StObject.set(x, "animationEasingUpdate", js.undefined)
      
      @scala.inline
      def setAnimationThreshold(value: Double): Self = StObject.set(x, "animationThreshold", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setAnimationThresholdUndefined: Self = StObject.set(x, "animationThreshold", js.undefined)
      
      @scala.inline
      def setAnimationUndefined: Self = StObject.set(x, "animation", js.undefined)
      
      @scala.inline
      def setAxisLabel(value: Padding): Self = StObject.set(x, "axisLabel", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setAxisLabelUndefined: Self = StObject.set(x, "axisLabel", js.undefined)
      
      @scala.inline
      def setAxisLine(value: LineStyleShow): Self = StObject.set(x, "axisLine", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setAxisLineUndefined: Self = StObject.set(x, "axisLine", js.undefined)
      
      @scala.inline
      def setAxisTick(value: SplitNumber): Self = StObject.set(x, "axisTick", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setAxisTickUndefined: Self = StObject.set(x, "axisTick", js.undefined)
      
      @scala.inline
      def setClockwise(value: Boolean): Self = StObject.set(x, "clockwise", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setClockwiseUndefined: Self = StObject.set(x, "clockwise", js.undefined)
      
      @scala.inline
      def setData(
        value: js.Array[
              (js.Array[
                Unit | String | Double | typingsSlinky.echarts.echarts.EChartOption.SeriesGauge.DataObject
              ]) | typingsSlinky.echarts.echarts.EChartOption.SeriesGauge.DataObject | Double | String | Unit
            ]
      ): Self = StObject.set(x, "data", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setDataUndefined: Self = StObject.set(x, "data", js.undefined)
      
      @scala.inline
      def setDataVarargs(
        value: ((js.Array[
              Unit | String | Double | typingsSlinky.echarts.echarts.EChartOption.SeriesGauge.DataObject
            ]) | typingsSlinky.echarts.echarts.EChartOption.SeriesGauge.DataObject | Double | String | Unit)*
      ): Self = StObject.set(x, "data", js.Array(value :_*))
      
      @scala.inline
      def setDetail(value: Rich): Self = StObject.set(x, "detail", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setDetailUndefined: Self = StObject.set(x, "detail", js.undefined)
      
      @scala.inline
      def setEmphasis(value: `2`): Self = StObject.set(x, "emphasis", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setEmphasisUndefined: Self = StObject.set(x, "emphasis", js.undefined)
      
      @scala.inline
      def setEndAngle(value: Double): Self = StObject.set(x, "endAngle", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setEndAngleUndefined: Self = StObject.set(x, "endAngle", js.undefined)
      
      @scala.inline
      def setId(value: String): Self = StObject.set(x, "id", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setIdUndefined: Self = StObject.set(x, "id", js.undefined)
      
      @scala.inline
      def setItemStyle(value: BorderColorBorderType): Self = StObject.set(x, "itemStyle", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setItemStyleUndefined: Self = StObject.set(x, "itemStyle", js.undefined)
      
      @scala.inline
      def setMarkArea(value: AnimationThreshold): Self = StObject.set(x, "markArea", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setMarkAreaUndefined: Self = StObject.set(x, "markArea", js.undefined)
      
      @scala.inline
      def setMarkLine(value: AnimationEasingUpdate): Self = StObject.set(x, "markLine", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setMarkLineUndefined: Self = StObject.set(x, "markLine", js.undefined)
      
      @scala.inline
      def setMarkPoint(value: AnimationEasing): Self = StObject.set(x, "markPoint", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setMarkPointUndefined: Self = StObject.set(x, "markPoint", js.undefined)
      
      @scala.inline
      def setMax(value: Double): Self = StObject.set(x, "max", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setMaxUndefined: Self = StObject.set(x, "max", js.undefined)
      
      @scala.inline
      def setMin(value: Double): Self = StObject.set(x, "min", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setMinUndefined: Self = StObject.set(x, "min", js.undefined)
      
      @scala.inline
      def setName(value: String): Self = StObject.set(x, "name", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setNameUndefined: Self = StObject.set(x, "name", js.undefined)
      
      @scala.inline
      def setPointer(value: LengthShow): Self = StObject.set(x, "pointer", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setPointerUndefined: Self = StObject.set(x, "pointer", js.undefined)
      
      @scala.inline
      def setRadius(value: Double | String): Self = StObject.set(x, "radius", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setRadiusUndefined: Self = StObject.set(x, "radius", js.undefined)
      
      @scala.inline
      def setSplitLine(value: LengthLineStyle): Self = StObject.set(x, "splitLine", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setSplitLineUndefined: Self = StObject.set(x, "splitLine", js.undefined)
      
      @scala.inline
      def setSplitNumber(value: Double): Self = StObject.set(x, "splitNumber", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setSplitNumberUndefined: Self = StObject.set(x, "splitNumber", js.undefined)
      
      @scala.inline
      def setStartAngle(value: Double): Self = StObject.set(x, "startAngle", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setStartAngleUndefined: Self = StObject.set(x, "startAngle", js.undefined)
      
      @scala.inline
      def setTitle(value: OffsetCenter): Self = StObject.set(x, "title", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setTitleUndefined: Self = StObject.set(x, "title", js.undefined)
      
      @scala.inline
      def setTooltip(value: BaseTooltip): Self = StObject.set(x, "tooltip", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setTooltipUndefined: Self = StObject.set(x, "tooltip", js.undefined)
      
      @scala.inline
      def setType(value: String): Self = StObject.set(x, "type", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setTypeUndefined: Self = StObject.set(x, "type", js.undefined)
    }
  }
  
  /**
    * **relation graph**
    *
    * Graph is a diagram to represent
    * [nodes](https://echarts.apache.org/en/option.html#series-graph.nodes)
    * and the
    * [links](https://echarts.apache.org/en/option.html#series-graph.links)
    * connecting nodes.
    *
    * **Tips:** In ECharts 2.x
    * , the diagram of `force` type will not be available in ECharts 3
    * any more, which has been changed to use `graph` to show graph data.
    * If you want to use force to lead the layout, you can set the
    * [layout](https://echarts.apache.org/en/option.html#series-graph.layout)
    * configuration as `'force'`.
    *
    * **Example:**
    *
    * [see doc](https://echarts.apache.org/en/option.html#series-graph)
    *
    *
    * @see https://echarts.apache.org/en/option.html#series-graph
    */
  @js.native
  trait SeriesGraph extends Series {
    
    /**
      * Whether to enable animation.
      *
      *
      * @default
      * "true"
      * @see https://echarts.apache.org/en/option.html#series-graph.animation
      */
    var animation: js.UndefOr[Boolean] = js.native
    
    /**
      * Delay before updating the first animation, which supports callback
      * function for different data to have different animation effect.
      *
      * For example:
      *
      * [see doc](https://echarts.apache.org/en/option.html#series-graph.graph)
      *
      * See
      * [this example](https://echarts.apache.org/examples/en/editor.html?c=bar-animation-delay)
      * for more information.
      *
      *
      * @see https://echarts.apache.org/en/option.html#series-graph.animationDelay
      */
    var animationDelay: js.UndefOr[js.Function | Double] = js.native
    
    /**
      * Delay before updating animation, which supports callback function
      * for different data to have different animation effect.
      *
      * For example:
      *
      * [see doc](https://echarts.apache.org/en/option.html#series-graph.graph)
      *
      * See
      * [this example](https://echarts.apache.org/examples/en/editor.html?c=bar-animation-delay)
      * for more information.
      *
      *
      * @see https://echarts.apache.org/en/option.html#series-graph.animationDelayUpdate
      */
    var animationDelayUpdate: js.UndefOr[js.Function | Double] = js.native
    
    /**
      * Duration of the first animation, which supports callback function
      * for different data to have different animation effect:
      *
      * [see doc](https://echarts.apache.org/en/option.html#series-graph.graph)
      *
      *
      * @default
      * 1000
      * @see https://echarts.apache.org/en/option.html#series-graph.animationDuration
      */
    var animationDuration: js.UndefOr[js.Function | Double] = js.native
    
    /**
      * Time for animation to complete, which supports callback function
      * for different data to have different animation effect:
      *
      * [see doc](https://echarts.apache.org/en/option.html#series-graph.graph)
      *
      *
      * @default
      * 300
      * @see https://echarts.apache.org/en/option.html#series-graph.animationDurationUpdate
      */
    var animationDurationUpdate: js.UndefOr[js.Function | Double] = js.native
    
    /**
      * Easing method used for the first animation.
      * Varied easing effects can be found at
      * [easing effect example](https://echarts.apache.org/examples/en/editor.html?c=line-easing)
      * .
      *
      *
      * @default
      * "cubicOut"
      * @see https://echarts.apache.org/en/option.html#series-graph.animationEasing
      */
    var animationEasing: js.UndefOr[String] = js.native
    
    /**
      * Easing method used for animation.
      *
      *
      * @default
      * "cubicOut"
      * @see https://echarts.apache.org/en/option.html#series-graph.animationEasingUpdate
      */
    var animationEasingUpdate: js.UndefOr[String] = js.native
    
    /**
      * Whether to set graphic number threshold to animation.
      * Animation will be disabled when graphic number is larger than
      * threshold.
      *
      *
      * @default
      * 2000
      * @see https://echarts.apache.org/en/option.html#series-graph.animationThreshold
      */
    var animationThreshold: js.UndefOr[Double] = js.native
    
    /**
      * For the situation where there are multiple links between nodes, the curveness of each link is automatically calculated.
      * When set to number, it indicates the length of the edge curvenness array between two nodes, and the calculation result is given by the internal algorithm.
      * When set to Array, it means that the curveness array is directly specified, and the multilateral curveness is directly selected from the array.
      * Notice： if lineStyle.curveness has been set, this property is invalid.
      *
      * [see doc](https://echarts.apache.org/en/option.html#series-graph.autoCurveness)
      *
      *
      * @see https://echarts.apache.org/en/option.html#series-graph.autoCurveness
      */
    var autoCurveness: js.UndefOr[Double | js.Array[Double]] = js.native
    
    /**
      * Distance between component and the bottom side of the container.
      *
      * `bottom` value can be instant pixel value like `20`; it can also
      * be percentage value relative to container width like `'20%'`.
      *
      * Adaptive by default.
      *
      *
      * @default
      * "auto"
      * @see https://echarts.apache.org/en/option.html#series-graph.bottom
      */
    var bottom: js.UndefOr[Double | String] = js.native
    
    /**
      * Index of
      * [calendar coordinates](https://echarts.apache.org/en/option.html#calendar)
      * to combine with, which is useful for multiple calendar coordinates
      * in one chart.
      *
      *
      * @see https://echarts.apache.org/en/option.html#series-graph.calendarIndex
      */
    var calendarIndex: js.UndefOr[Double] = js.native
    
    /**
      * The categories of node, which is optional.
      * If there is a classification of nodes, the category of each node
      * can be assigned through
      * [data\[i\].category](https://echarts.apache.org/en/option.html#series-graph.data.category)
      *
      * And the style of category will also be applied to the style of
      * nodes. `categories` can also be used in
      * [legend](https://echarts.apache.org/en/option.html#legend)
      * .
      *
      *
      * @see https://echarts.apache.org/en/option.html#series-graph.categories
      */
    var categories: js.UndefOr[js.Array[CategoryObject]] = js.native
    
    /**
      * Configuration about circular layout.
      *
      *
      * @see https://echarts.apache.org/en/option.html#series-graph.circular
      */
    var circular: js.UndefOr[RotateLabel] = js.native
    
    /**
      * The coordinate used in the series, whose options are:
      *
      * + `null` or `'none'`
      *
      * No coordinate.
      *
      * + `'cartesian2d'`
      *
      * Use a two-dimensional rectangular coordinate (also known as Cartesian
      * coordinate), with
      * [xAxisIndex](https://echarts.apache.org/en/option.html#series-graph.xAxisIndex)
      * and
      * [yAxisIndex](https://echarts.apache.org/en/option.html#series-graph.yAxisIndex)
      * to assign the corresponding axis component.
      *
      * + `'polar'`
      *
      * Use polar coordinates, with
      * [polarIndex](https://echarts.apache.org/en/option.html#series-graph.polarIndex)
      * to assign the corresponding polar coordinate component.
      *
      * + `'geo'`
      *
      * Use geographic coordinate, with
      * [geoIndex](https://echarts.apache.org/en/option.html#series-graph.geoIndex)
      * to assign the corresponding geographic coordinate components.
      *
      * + `'none'`
      *
      * Do not use coordinate system.
      *
      *
      * @see https://echarts.apache.org/en/option.html#series-graph.coordinateSystem
      */
    var coordinateSystem: js.UndefOr[String] = js.native
    
    /**
      * The mouse style when mouse hovers on an element, the same as
      * `cursor` property in `CSS`.
      *
      *
      * @default
      * "pointer"
      * @see https://echarts.apache.org/en/option.html#series-graph.cursor
      */
    var cursor: js.UndefOr[String] = js.native
    
    /**
      * Nodes list of graph.
      *
      * [see doc](https://echarts.apache.org/en/option.html#series-graph.graph)
      *
      *
      * @see https://echarts.apache.org/en/option.html#series-graph.data
      */
    var data: js.UndefOr[js.Array[typingsSlinky.echarts.echarts.EChartOption.SeriesGraph.DataObject]] = js.native
    
    /**
      * If node is draggable.
      * Only available when using force-directed layout.
      *
      *
      * @see https://echarts.apache.org/en/option.html#series-graph.draggable
      */
    var draggable: js.UndefOr[Boolean] = js.native
    
    /**
      * @see https://echarts.apache.org/en/option.html#series-graph.edgeLabel
      */
    var edgeLabel: js.UndefOr[FontSize] = js.native
    
    /**
      * Symbol of two ends of edge line.
      *
      * For example:
      *
      * ```
      * edgeSymbol: ['circle', 'arrow']
      *
      * ```
      *
      *
      * @default
      * "[none', 'none']"
      * @see https://echarts.apache.org/en/option.html#series-graph.edgeSymbol
      */
    var edgeSymbol: js.UndefOr[js.Array[_] | String] = js.native
    
    /**
      * Size of symbol of two ends of edge line.
      * Can be an array or a single number.
      *
      * For example:
      *
      * [see doc](https://echarts.apache.org/en/option.html#series-graph.graph)
      *
      *
      * @default
      * 10
      * @see https://echarts.apache.org/en/option.html#series-graph.edgeSymbolSize
      */
    var edgeSymbolSize: js.UndefOr[js.Array[_] | Double] = js.native
    
    /**
      * Alias of
      * [links](https://echarts.apache.org/en/option.html#series-graph.links)
      *
      *
      * @see https://echarts.apache.org/en/option.html#series-graph.edges
      */
    var edges: js.UndefOr[js.Array[_]] = js.native
    
    /**
      * @see https://echarts.apache.org/en/option.html#series-graph.emphasis
      */
    var emphasis: js.UndefOr[EdgeLabel] = js.native
    
    /**
      * Whether to focus/highlight the hover node and it's adjacencies.
      *
      *
      * @see https://echarts.apache.org/en/option.html#series-graph.focusNodeAdjacency
      */
    var focusNodeAdjacency: js.UndefOr[Boolean] = js.native
    
    /**
      * Configuration items about force-directed layout.
      * Force-directed layout simulates spring/charge model, which will
      * add a repulsion between 2 nodes and add a attraction between
      * 2 nodes of each edge.
      * In each iteration nodes will move under the effect of repulsion
      * and attraction.
      * After several iterations, the nodes will be static in a balanced
      * position.
      * As a result, the energy local minimum of this whole model will
      * be realized.
      *
      * The result of force-directed layout has a good symmetries and
      * clustering, which is also aesthetically pleasing.
      *
      *
      * @see https://echarts.apache.org/en/option.html#series-graph.force
      */
    var force: js.UndefOr[EdgeLength] = js.native
    
    /**
      * Index of
      * [geographic coordinate](https://echarts.apache.org/en/option.html#geo)
      * to combine with, which is useful for multiple geographic axes
      * in one chart.
      *
      *
      * @see https://echarts.apache.org/en/option.html#series-graph.geoIndex
      */
    var geoIndex: js.UndefOr[Double] = js.native
    
    /**
      * Height of component.
      *
      *
      * @default
      * "auto"
      * @see https://echarts.apache.org/en/option.html#series-graph.height
      */
    var height: js.UndefOr[Double | String] = js.native
    
    /**
      * Whether to enable the highlight animation effect of mousr hover
      * node.
      *
      *
      * @see https://echarts.apache.org/en/option.html#series-graph.hoverAnimation
      */
    var hoverAnimation: js.UndefOr[Boolean] = js.native
    
    /**
      * Component ID, not specified by default.
      * If specified, it can be used to refer the component in option
      * or API.
      *
      *
      * @see https://echarts.apache.org/en/option.html#series-graph.id
      */
    var id: js.UndefOr[String] = js.native
    
    /**
      * Graphic style of , `emphasis` is the style when it is highlighted,
      * like being hovered by mouse, or highlighted via legend connect.
      *
      *
      * @see https://echarts.apache.org/en/option.html#series-graph.itemStyle
      */
    var itemStyle: js.UndefOr[ShadowOffsetY] = js.native
    
    /**
      * Text label of , to explain some data information about graphic
      * item like value, name and so on.
      * `label` is placed under `itemStyle` in ECharts 2.x.
      * In ECharts 3, to make the configuration structure flatter, `label`is
      * taken to be at the same level with `itemStyle`, and has `emphasis`
      * as `itemStyle` does.
      *
      *
      * @see https://echarts.apache.org/en/option.html#series-graph.label
      */
    var label: js.UndefOr[BorderRadius] = js.native
    
    /**
      * Graph layout.
      *
      * **Options:**
      *
      * + `'none'` No any layout, use
      * [x](https://echarts.apache.org/en/option.html#series-graph.data.x)
      * ,
      * [y](https://echarts.apache.org/en/option.html#series-graph.data.y)
      * provided in
      * [node](https://echarts.apache.org/en/option.html#series-graph.data)
      * as the position of node.
      *
      * + `'circular'` Adopt circular layout, see the example
      * [Les Miserables](https://echarts.apache.org/examples/en/editor.html?c=graph-circular-layout)
      * .
      *
      * + `'force'` Adopt force-directed layout, see the example
      * [Force](https://echarts.apache.org/examples/en/editor.html?c=graph-force)
      * , the detail about configrations of layout are in
      * [graph.force](https://echarts.apache.org/en/option.html#series-graph.force)
      *
      *
      * @default
      * "none"
      * @see https://echarts.apache.org/en/option.html#series-graph.layout
      */
    var layout: js.UndefOr[String] = js.native
    
    /**
      * Distance between component and the left side of the container.
      *
      * `left` value can be instant pixel value like `20`; it can also
      * be percentage value relative to container width like `'20%'`;
      * and it can also be `'left'`, `'center'`, or `'right'`.
      *
      * If the `left` value is set to be `'left'`, `'center'`, or `'right'`,
      * then the component will be aligned automatically based on position.
      *
      *
      * @default
      * "center"
      * @see https://echarts.apache.org/en/option.html#series-graph.left
      */
    var left: js.UndefOr[Double | String] = js.native
    
    /**
      * Whether to enable highlighting chart when
      * [legend](https://echarts.apache.org/en/option.html#legend)
      * is being hovered.
      *
      *
      * @default
      * "true"
      * @see https://echarts.apache.org/en/option.html#series-graph.legendHoverLink
      */
    var legendHoverLink: js.UndefOr[Boolean] = js.native
    
    /**
      * The style of edge line.
      * [lineStyle.color](https://echarts.apache.org/en/option.html#series-graph.lineStyle.color)
      * can be `'source'` or `'target'`, which will use the color of
      * source node or target node.
      *
      *
      * @see https://echarts.apache.org/en/option.html#series-graph.lineStyle
      */
    var lineStyle: js.UndefOr[ShadowColor] = js.native
    
    /**
      * Relational data between nodes. Example:
      *
      * [see doc](https://echarts.apache.org/en/option.html#series-graph.graph)
      *
      *
      * @see https://echarts.apache.org/en/option.html#series-graph.links
      */
    var links: js.UndefOr[js.Array[LinkObject]] = js.native
    
    /**
      * Used to mark an area in chart.
      * For example, mark a time interval.
      *
      *
      * @see https://echarts.apache.org/en/option.html#series-graph.markArea
      */
    var markArea: js.UndefOr[AnimationDelayUpdate] = js.native
    
    /**
      * Use a line in the chart to illustrate.
      *
      *
      * @see https://echarts.apache.org/en/option.html#series-graph.markLine
      */
    var markLine: js.UndefOr[AnimationDelay] = js.native
    
    /**
      * Mark point in a chart.
      *
      *
      * @see https://echarts.apache.org/en/option.html#series-graph.markPoint
      */
    var markPoint: js.UndefOr[AnimationDuration] = js.native
    
    /**
      * Series name used for displaying in
      * [tooltip](https://echarts.apache.org/en/option.html#tooltip)
      * and filtering with
      * [legend](https://echarts.apache.org/en/option.html#legend)
      * , or updaing data and configuration with `setOption`.
      *
      *
      * @see https://echarts.apache.org/en/option.html#series-graph.name
      */
    var name: js.UndefOr[String] = js.native
    
    /**
      * Related zooming ratio of nodes when mouse zooming in or out.
      * When it is set as 0, the node will not zoom as the mouse zooms.
      *
      *
      * @default
      * 0.6
      * @see https://echarts.apache.org/en/option.html#series-graph.nodeScaleRatio
      */
    var nodeScaleRatio: js.UndefOr[Double] = js.native
    
    /**
      * Alias of
      * [data](https://echarts.apache.org/en/option.html#series-graph.data)
      *
      *
      * @see https://echarts.apache.org/en/option.html#series-graph.nodes
      */
    var nodes: js.UndefOr[js.Array[_]] = js.native
    
    /**
      * Index of
      * [polar coordinate](https://echarts.apache.org/en/option.html#polar)
      * to combine with, which is useful for multiple polar axes in one
      * chart.
      *
      *
      * @see https://echarts.apache.org/en/option.html#series-graph.polarIndex
      */
    var polarIndex: js.UndefOr[Double] = js.native
    
    /**
      * Distance between component and the right side of the container.
      *
      * `right` value can be instant pixel value like `20`; it can also
      * be percentage value relative to container width like `'20%'`.
      *
      * Adaptive by default.
      *
      *
      * @default
      * "auto"
      * @see https://echarts.apache.org/en/option.html#series-graph.right
      */
    var right: js.UndefOr[Double | String] = js.native
    
    /**
      * Whether to enable mouse zooming and translating.
      * `false` by default.
      * If either zooming or translating is wanted, it can be set to
      * `'scale'` or `'move'`.
      * Otherwise, set it to be `true` to enable both.
      *
      *
      * @see https://echarts.apache.org/en/option.html#series-graph.roam
      */
    var roam: js.UndefOr[Boolean | String] = js.native
    
    /**
      * Whether to ignore mouse events.
      * Default value is false, for triggering and responding to mouse
      * events.
      *
      *
      * @see https://echarts.apache.org/en/option.html#series-graph.silent
      */
    var silent: js.UndefOr[Boolean] = js.native
    
    /**
      * Symbol of node of relation graph.
      *
      * Icon types provided by ECharts includes `'circle'`, `'rect'`,
      * `'roundRect'`, `'triangle'`, `'diamond'`, `'pin'`, `'arrow'`,
      * `'none'`
      *
      * It can be set to an image with `'image://url'` , in which URL
      * is the link to an image, or `dataURI` of an image.
      *
      * An image URL example:
      *
      * ```
      * 'image://http://xxx.xxx.xxx/a/b.png'
      *
      * ```
      *
      * A `dataURI` example:
      *
      * [see doc](https://echarts.apache.org/en/option.html#series-graph.graph)
      *
      * Icons can be set to arbitrary vector path via `'path://'` in
      * ECharts.
      * As compared with raster image, vector paths prevent from jagging
      * and blurring when scaled, and have a better control over changing
      * colors.
      * Size of vectoer icon will be adapted automatically. Refer to
      * [SVG PathData](http://www.w3.org/TR/SVG/paths.html#PathData)
      * for more information about format of path.
      * You may export vector paths from tools like Adobe Illustrator.
      *
      * For example:
      *
      * [see doc](https://echarts.apache.org/en/option.html#series-graph.graph)
      *
      *
      * @default
      * "circle"
      * @see https://echarts.apache.org/en/option.html#series-graph.symbol
      */
    var symbol: js.UndefOr[String] = js.native
    
    /**
      * Whether to keep aspect for symbols in the form of `path://`.
      *
      *
      * @see https://echarts.apache.org/en/option.html#series-graph.symbolKeepAspect
      */
    var symbolKeepAspect: js.UndefOr[Boolean] = js.native
    
    /**
      * Offset of node of relation graph symbol relative to original
      * position.
      * By default, symbol will be put in the center position of data.
      * But if symbol is from user-defined vector path or image, you
      * may not expect symbol to be in center.
      * In this case, you may use this attribute to set offset to default
      * position.
      * It can be in absolute pixel value, or in relative percentage
      * value.
      *
      * For example, `[0, '50%']` means to move upside side position
      * of symbol height.
      * It can be used to make the arrow in the bottom to be at data
      * position when symbol is pin.
      *
      *
      * @default
      * [0, 0]
      * @see https://echarts.apache.org/en/option.html#series-graph.symbolOffset
      */
    var symbolOffset: js.UndefOr[js.Array[_]] = js.native
    
    /**
      * Rotate degree of node of relation graph symbol.
      * Note that when `symbol` is set to be `'arrow'` in `markLine`,
      * `symbolRotate` value will be ignored, and compulsively use tangent
      * angle.
      *
      *
      * @see https://echarts.apache.org/en/option.html#series-graph.symbolRotate
      */
    var symbolRotate: js.UndefOr[Double] = js.native
    
    /**
      * node of relation graph symbol size.
      * It can be set to single numbers like `10`, or use an array to
      * represent width and height.
      * For example, `[20, 10]` means symbol width is `20`, and height
      * is`10`.
      *
      * If size of symbols needs to be different, you can set with callback
      * function in the following format:
      *
      * ```
      * (value: Array|number, params: Object) => number|Array
      *
      * ```
      *
      * The first parameter `value` is the value in
      * [data](https://echarts.apache.org/en/option.html#series-.data)
      * , and the second parameter `params` is the rest parameters of
      * data item.
      *
      *
      * @default
      * 10
      * @see https://echarts.apache.org/en/option.html#series-graph.symbolSize
      */
    var symbolSize: js.UndefOr[js.Array[_] | js.Function | Double] = js.native
    
    /**
      * tooltip settings in this series.
      *
      *
      * @see https://echarts.apache.org/en/option.html#series-graph.tooltip
      */
    var tooltip: js.UndefOr[BaseTooltip] = js.native
    
    /**
      * Distance between component and the top side of the container.
      *
      * `top` value can be instant pixel value like `20`; it can also
      * be percentage value relative to container width like `'20%'`;
      * and it can also be `'top'`, `'middle'`, or `'bottom'`.
      *
      * If the `left` value is set to be `'top'`, `'middle'`, or `'bottom'`,
      * then the component will be aligned automatically based on position.
      *
      *
      * @default
      * "middle"
      * @see https://echarts.apache.org/en/option.html#series-graph.top
      */
    var top: js.UndefOr[Double | String] = js.native
    
    /**
      * @default
      * "graph"
      * @see https://echarts.apache.org/en/option.html#series-graph.type
      */
    var `type`: js.UndefOr[String] = js.native
    
    /**
      * Width of component.
      *
      *
      * @default
      * "auto"
      * @see https://echarts.apache.org/en/option.html#series-graph.width
      */
    var width: js.UndefOr[Double | String] = js.native
    
    /**
      * Index of
      * [x axis](https://echarts.apache.org/en/option.html#xAxis)
      * to combine with, which is useful for multiple x axes in one chart.
      *
      *
      * @see https://echarts.apache.org/en/option.html#series-graph.xAxisIndex
      */
    var xAxisIndex: js.UndefOr[Double] = js.native
    
    /**
      * Index of
      * [y axis](https://echarts.apache.org/en/option.html#yAxis)
      * to combine with, which is useful for multiple y axes in one chart.
      *
      *
      * @see https://echarts.apache.org/en/option.html#series-graph.yAxisIndex
      */
    var yAxisIndex: js.UndefOr[Double] = js.native
    
    /**
      * `z` value of all graghical elements in , which controls order
      * of drawing graphical components.
      * Components with smaller `z` values may be overwritten by those
      * with larger `z` values.
      *
      * `z` has a lower priority to `zlevel`, and will not create new
      * Canvas.
      *
      *
      * @default
      * 2
      * @see https://echarts.apache.org/en/option.html#series-graph.z
      */
    var z: js.UndefOr[Double] = js.native
    
    /**
      * `zlevel` value of all graghical elements in .
      *
      * `zlevel` is used to make layers with Canvas.
      * Graphical elements with different `zlevel` values will be placed
      * in different Canvases, which is a common optimization technique.
      * We can put those frequently changed elements (like those with
      * animations) to a seperate `zlevel`.
      * Notice that too many Canvases will increase memory cost, and
      * should be used carefully on mobile phones to avoid crash.
      *
      * Canvases with bigger `zlevel` will be placed on Canvases with
      * smaller `zlevel`.
      *
      *
      * @see https://echarts.apache.org/en/option.html#series-graph.zlevel
      */
    var zlevel: js.UndefOr[Double] = js.native
  }
  object SeriesGraph {
    
    @scala.inline
    def apply(): SeriesGraph = {
      val __obj = js.Dynamic.literal()
      __obj.asInstanceOf[SeriesGraph]
    }
    
    @js.native
    trait CategoryObject extends StObject {
      
      /**
        * @see https://echarts.apache.org/en/option.html#series-graph.categories.emphasis
        */
      var emphasis: js.UndefOr[`7`] = js.native
      
      /**
        * The style of node in this category.
        *
        *
        * @see https://echarts.apache.org/en/option.html#series-graph.categories.itemStyle
        */
      var itemStyle: js.UndefOr[BorderType] = js.native
      
      /**
        * The label style of node in this category.
        *
        *
        * @see https://echarts.apache.org/en/option.html#series-graph.categories.label
        */
      var label: js.UndefOr[BorderRadius] = js.native
      
      /**
        * Name of category, which is used to correspond with
        * [legend](https://echarts.apache.org/en/option.html#legend)
        * and the content of
        * [tooltip](https://echarts.apache.org/en/option.html#tooltip)
        * .
        *
        *
        * @see https://echarts.apache.org/en/option.html#series-graph.categories.name
        */
      var name: js.UndefOr[String] = js.native
      
      /**
        * Symbol of node of this category.
        *
        * Icon types provided by ECharts includes `'circle'`, `'rect'`,
        * `'roundRect'`, `'triangle'`, `'diamond'`, `'pin'`, `'arrow'`,
        * `'none'`
        *
        * It can be set to an image with `'image://url'` , in which
        * URL is the link to an image, or `dataURI` of an image.
        *
        * An image URL example:
        *
        * ```
        * 'image://http://xxx.xxx.xxx/a/b.png'
        *
        * ```
        *
        * A `dataURI` example:
        *
        * [see doc](https://echarts.apache.org/en/option.html#series-graph.graph.categories)
        *
        * Icons can be set to arbitrary vector path via `'path://'`
        * in ECharts.
        * As compared with raster image, vector paths prevent from
        * jagging and blurring when scaled, and have a better control
        * over changing colors.
        * Size of vectoer icon will be adapted automatically.
        * Refer to
        * [SVG PathData](http://www.w3.org/TR/SVG/paths.html#PathData)
        * for more information about format of path.
        * You may export vector paths from tools like Adobe Illustrator.
        *
        * For example:
        *
        * [see doc](https://echarts.apache.org/en/option.html#series-graph.graph.categories)
        *
        *
        * @see https://echarts.apache.org/en/option.html#series-graph.categories.symbol
        */
      var symbol: js.UndefOr[String] = js.native
      
      /**
        * Whether to keep aspect for symbols in the form of `path://`.
        *
        *
        * @see https://echarts.apache.org/en/option.html#series-graph.categories.symbolKeepAspect
        */
      var symbolKeepAspect: js.UndefOr[Boolean] = js.native
      
      /**
        * Offset of node of this category symbol relative to original
        * position.
        * By default, symbol will be put in the center position of
        * data.
        * But if symbol is from user-defined vector path or image,
        * you may not expect symbol to be in center.
        * In this case, you may use this attribute to set offset to
        * default position.
        * It can be in absolute pixel value, or in relative percentage
        * value.
        *
        * For example, `[0, '50%']` means to move upside side position
        * of symbol height.
        * It can be used to make the arrow in the bottom to be at data
        * position when symbol is pin.
        *
        *
        * @default
        * [0, 0]
        * @see https://echarts.apache.org/en/option.html#series-graph.categories.symbolOffset
        */
      var symbolOffset: js.UndefOr[js.Array[_]] = js.native
      
      /**
        * Rotate degree of node of this category symbol.
        * Note that when `symbol` is set to be `'arrow'` in `markLine`,
        * `symbolRotate` value will be ignored, and compulsively use
        * tangent angle.
        *
        *
        * @see https://echarts.apache.org/en/option.html#series-graph.categories.symbolRotate
        */
      var symbolRotate: js.UndefOr[Double] = js.native
      
      /**
        * node of this category symbol size.
        * It can be set to single numbers like `10`, or use an array
        * to represent width and height.
        * For example, `[20, 10]` means symbol width is `20`, and height
        * is`10`.
        *
        *
        * @see https://echarts.apache.org/en/option.html#series-graph.categories.symbolSize
        */
      var symbolSize: js.UndefOr[js.Array[_] | Double] = js.native
    }
    object CategoryObject {
      
      @scala.inline
      def apply(): CategoryObject = {
        val __obj = js.Dynamic.literal()
        __obj.asInstanceOf[CategoryObject]
      }
      
      @scala.inline
      implicit class CategoryObjectMutableBuilder[Self <: CategoryObject] (val x: Self) extends AnyVal {
        
        @scala.inline
        def setEmphasis(value: `7`): Self = StObject.set(x, "emphasis", value.asInstanceOf[js.Any])
        
        @scala.inline
        def setEmphasisUndefined: Self = StObject.set(x, "emphasis", js.undefined)
        
        @scala.inline
        def setItemStyle(value: BorderType): Self = StObject.set(x, "itemStyle", value.asInstanceOf[js.Any])
        
        @scala.inline
        def setItemStyleUndefined: Self = StObject.set(x, "itemStyle", js.undefined)
        
        @scala.inline
        def setLabel(value: BorderRadius): Self = StObject.set(x, "label", value.asInstanceOf[js.Any])
        
        @scala.inline
        def setLabelUndefined: Self = StObject.set(x, "label", js.undefined)
        
        @scala.inline
        def setName(value: String): Self = StObject.set(x, "name", value.asInstanceOf[js.Any])
        
        @scala.inline
        def setNameUndefined: Self = StObject.set(x, "name", js.undefined)
        
        @scala.inline
        def setSymbol(value: String): Self = StObject.set(x, "symbol", value.asInstanceOf[js.Any])
        
        @scala.inline
        def setSymbolKeepAspect(value: Boolean): Self = StObject.set(x, "symbolKeepAspect", value.asInstanceOf[js.Any])
        
        @scala.inline
        def setSymbolKeepAspectUndefined: Self = StObject.set(x, "symbolKeepAspect", js.undefined)
        
        @scala.inline
        def setSymbolOffset(value: js.Array[_]): Self = StObject.set(x, "symbolOffset", value.asInstanceOf[js.Any])
        
        @scala.inline
        def setSymbolOffsetUndefined: Self = StObject.set(x, "symbolOffset", js.undefined)
        
        @scala.inline
        def setSymbolOffsetVarargs(value: js.Any*): Self = StObject.set(x, "symbolOffset", js.Array(value :_*))
        
        @scala.inline
        def setSymbolRotate(value: Double): Self = StObject.set(x, "symbolRotate", value.asInstanceOf[js.Any])
        
        @scala.inline
        def setSymbolRotateUndefined: Self = StObject.set(x, "symbolRotate", js.undefined)
        
        @scala.inline
        def setSymbolSize(value: js.Array[_] | Double): Self = StObject.set(x, "symbolSize", value.asInstanceOf[js.Any])
        
        @scala.inline
        def setSymbolSizeUndefined: Self = StObject.set(x, "symbolSize", js.undefined)
        
        @scala.inline
        def setSymbolSizeVarargs(value: js.Any*): Self = StObject.set(x, "symbolSize", js.Array(value :_*))
        
        @scala.inline
        def setSymbolUndefined: Self = StObject.set(x, "symbol", js.undefined)
      }
    }
    
    @js.native
    trait DataObject extends StObject {
      
      /**
        * Index of category which the data item belongs to.
        *
        *
        * @see https://echarts.apache.org/en/option.html#series-graph.data.category
        */
      var category: js.UndefOr[Double] = js.native
      
      /**
        * @see https://echarts.apache.org/en/option.html#series-graph.data.emphasis
        */
      var emphasis: js.UndefOr[`7`] = js.native
      
      /**
        * If node are fixed when doing force directed layout.
        *
        *
        * @see https://echarts.apache.org/en/option.html#series-graph.data.fixed
        */
      var fixed: js.UndefOr[Boolean] = js.native
      
      /**
        * The style of this node.
        *
        *
        * @see https://echarts.apache.org/en/option.html#series-graph.data.itemStyle
        */
      var itemStyle: js.UndefOr[BorderType] = js.native
      
      /**
        * The label style of this node.
        *
        *
        * @see https://echarts.apache.org/en/option.html#series-graph.data.label
        */
      var label: js.UndefOr[Distance] = js.native
      
      /**
        * Name of data item.
        *
        *
        * @see https://echarts.apache.org/en/option.html#series-graph.data.name
        */
      var name: js.UndefOr[String] = js.native
      
      /**
        * Symbol of node of this category.
        *
        * Icon types provided by ECharts includes `'circle'`, `'rect'`,
        * `'roundRect'`, `'triangle'`, `'diamond'`, `'pin'`, `'arrow'`,
        * `'none'`
        *
        * It can be set to an image with `'image://url'` , in which
        * URL is the link to an image, or `dataURI` of an image.
        *
        * An image URL example:
        *
        * ```
        * 'image://http://xxx.xxx.xxx/a/b.png'
        *
        * ```
        *
        * A `dataURI` example:
        *
        * [see doc](https://echarts.apache.org/en/option.html#series-graph.graph.data)
        *
        * Icons can be set to arbitrary vector path via `'path://'`
        * in ECharts.
        * As compared with raster image, vector paths prevent from
        * jagging and blurring when scaled, and have a better control
        * over changing colors.
        * Size of vectoer icon will be adapted automatically.
        * Refer to
        * [SVG PathData](http://www.w3.org/TR/SVG/paths.html#PathData)
        * for more information about format of path.
        * You may export vector paths from tools like Adobe Illustrator.
        *
        * For example:
        *
        * [see doc](https://echarts.apache.org/en/option.html#series-graph.graph.data)
        *
        *
        * @see https://echarts.apache.org/en/option.html#series-graph.data.symbol
        */
      var symbol: js.UndefOr[String] = js.native
      
      /**
        * Whether to keep aspect for symbols in the form of `path://`.
        *
        *
        * @see https://echarts.apache.org/en/option.html#series-graph.data.symbolKeepAspect
        */
      var symbolKeepAspect: js.UndefOr[Boolean] = js.native
      
      /**
        * Offset of node of this category symbol relative to original
        * position.
        * By default, symbol will be put in the center position of
        * data.
        * But if symbol is from user-defined vector path or image,
        * you may not expect symbol to be in center.
        * In this case, you may use this attribute to set offset to
        * default position.
        * It can be in absolute pixel value, or in relative percentage
        * value.
        *
        * For example, `[0, '50%']` means to move upside side position
        * of symbol height.
        * It can be used to make the arrow in the bottom to be at data
        * position when symbol is pin.
        *
        *
        * @default
        * [0, 0]
        * @see https://echarts.apache.org/en/option.html#series-graph.data.symbolOffset
        */
      var symbolOffset: js.UndefOr[js.Array[_]] = js.native
      
      /**
        * Rotate degree of node of this category symbol.
        * Note that when `symbol` is set to be `'arrow'` in `markLine`,
        * `symbolRotate` value will be ignored, and compulsively use
        * tangent angle.
        *
        *
        * @see https://echarts.apache.org/en/option.html#series-graph.data.symbolRotate
        */
      var symbolRotate: js.UndefOr[Double] = js.native
      
      /**
        * node of this category symbol size.
        * It can be set to single numbers like `10`, or use an array
        * to represent width and height.
        * For example, `[20, 10]` means symbol width is `20`, and height
        * is`10`.
        *
        *
        * @see https://echarts.apache.org/en/option.html#series-graph.data.symbolSize
        */
      var symbolSize: js.UndefOr[js.Array[_] | Double] = js.native
      
      /**
        * tooltip settings in this series data.
        *
        *
        * @see https://echarts.apache.org/en/option.html#series-graph.data.tooltip
        */
      var tooltip: js.UndefOr[BaseTooltip] = js.native
      
      /**
        * Value of data item.
        *
        *
        * @see https://echarts.apache.org/en/option.html#series-graph.data.value
        */
      var value: js.UndefOr[js.Array[_] | Double] = js.native
      
      /**
        * `x` value of node position.
        *
        *
        * @see https://echarts.apache.org/en/option.html#series-graph.data.x
        */
      var x: js.UndefOr[Double] = js.native
      
      /**
        * `y` value of node position.
        *
        *
        * @see https://echarts.apache.org/en/option.html#series-graph.data.y
        */
      var y: js.UndefOr[Double] = js.native
    }
    object DataObject {
      
      @scala.inline
      def apply(): typingsSlinky.echarts.echarts.EChartOption.SeriesGraph.DataObject = {
        val __obj = js.Dynamic.literal()
        __obj.asInstanceOf[typingsSlinky.echarts.echarts.EChartOption.SeriesGraph.DataObject]
      }
      
      @scala.inline
      implicit class DataObjectMutableBuilder[Self <: typingsSlinky.echarts.echarts.EChartOption.SeriesGraph.DataObject] (val x: Self) extends AnyVal {
        
        @scala.inline
        def setCategory(value: Double): Self = StObject.set(x, "category", value.asInstanceOf[js.Any])
        
        @scala.inline
        def setCategoryUndefined: Self = StObject.set(x, "category", js.undefined)
        
        @scala.inline
        def setEmphasis(value: `7`): Self = StObject.set(x, "emphasis", value.asInstanceOf[js.Any])
        
        @scala.inline
        def setEmphasisUndefined: Self = StObject.set(x, "emphasis", js.undefined)
        
        @scala.inline
        def setFixed(value: Boolean): Self = StObject.set(x, "fixed", value.asInstanceOf[js.Any])
        
        @scala.inline
        def setFixedUndefined: Self = StObject.set(x, "fixed", js.undefined)
        
        @scala.inline
        def setItemStyle(value: BorderType): Self = StObject.set(x, "itemStyle", value.asInstanceOf[js.Any])
        
        @scala.inline
        def setItemStyleUndefined: Self = StObject.set(x, "itemStyle", js.undefined)
        
        @scala.inline
        def setLabel(value: Distance): Self = StObject.set(x, "label", value.asInstanceOf[js.Any])
        
        @scala.inline
        def setLabelUndefined: Self = StObject.set(x, "label", js.undefined)
        
        @scala.inline
        def setName(value: String): Self = StObject.set(x, "name", value.asInstanceOf[js.Any])
        
        @scala.inline
        def setNameUndefined: Self = StObject.set(x, "name", js.undefined)
        
        @scala.inline
        def setSymbol(value: String): Self = StObject.set(x, "symbol", value.asInstanceOf[js.Any])
        
        @scala.inline
        def setSymbolKeepAspect(value: Boolean): Self = StObject.set(x, "symbolKeepAspect", value.asInstanceOf[js.Any])
        
        @scala.inline
        def setSymbolKeepAspectUndefined: Self = StObject.set(x, "symbolKeepAspect", js.undefined)
        
        @scala.inline
        def setSymbolOffset(value: js.Array[_]): Self = StObject.set(x, "symbolOffset", value.asInstanceOf[js.Any])
        
        @scala.inline
        def setSymbolOffsetUndefined: Self = StObject.set(x, "symbolOffset", js.undefined)
        
        @scala.inline
        def setSymbolOffsetVarargs(value: js.Any*): Self = StObject.set(x, "symbolOffset", js.Array(value :_*))
        
        @scala.inline
        def setSymbolRotate(value: Double): Self = StObject.set(x, "symbolRotate", value.asInstanceOf[js.Any])
        
        @scala.inline
        def setSymbolRotateUndefined: Self = StObject.set(x, "symbolRotate", js.undefined)
        
        @scala.inline
        def setSymbolSize(value: js.Array[_] | Double): Self = StObject.set(x, "symbolSize", value.asInstanceOf[js.Any])
        
        @scala.inline
        def setSymbolSizeUndefined: Self = StObject.set(x, "symbolSize", js.undefined)
        
        @scala.inline
        def setSymbolSizeVarargs(value: js.Any*): Self = StObject.set(x, "symbolSize", js.Array(value :_*))
        
        @scala.inline
        def setSymbolUndefined: Self = StObject.set(x, "symbol", js.undefined)
        
        @scala.inline
        def setTooltip(value: BaseTooltip): Self = StObject.set(x, "tooltip", value.asInstanceOf[js.Any])
        
        @scala.inline
        def setTooltipUndefined: Self = StObject.set(x, "tooltip", js.undefined)
        
        @scala.inline
        def setValue(value: js.Array[_] | Double): Self = StObject.set(x, "value", value.asInstanceOf[js.Any])
        
        @scala.inline
        def setValueUndefined: Self = StObject.set(x, "value", js.undefined)
        
        @scala.inline
        def setValueVarargs(value: js.Any*): Self = StObject.set(x, "value", js.Array(value :_*))
        
        @scala.inline
        def setX(value: Double): Self = StObject.set(x, "x", value.asInstanceOf[js.Any])
        
        @scala.inline
        def setXUndefined: Self = StObject.set(x, "x", js.undefined)
        
        @scala.inline
        def setY(value: Double): Self = StObject.set(x, "y", value.asInstanceOf[js.Any])
        
        @scala.inline
        def setYUndefined: Self = StObject.set(x, "y", js.undefined)
      }
    }
    
    @js.native
    trait LinkObject extends StObject {
      
      /**
        * @see https://echarts.apache.org/en/option.html#series-graph.links.emphasis
        */
      var emphasis: js.UndefOr[LabelLineStyle] = js.native
      
      /**
        * @see https://echarts.apache.org/en/option.html#series-graph.links.label
        */
      var label: js.UndefOr[FontSize] = js.native
      
      /**
        * Line style of edges.
        *
        *
        * @see https://echarts.apache.org/en/option.html#series-graph.links.lineStyle
        */
      var lineStyle: js.UndefOr[ShadowColor] = js.native
      
      /**
        * [name of source node](https://echarts.apache.org/en/option.html#series-graph.data.name)
        * on edge
        *
        *
        * @see https://echarts.apache.org/en/option.html#series-graph.links.source
        */
      var source: js.UndefOr[String] = js.native
      
      /**
        * Symbol of edge ends.
        * Can be an array with two item to specify two ends, or a string
        * specifies both ends.
        *
        *
        * @see https://echarts.apache.org/en/option.html#series-graph.links.symbol
        */
      var symbol: js.UndefOr[js.Array[_] | String] = js.native
      
      /**
        * Symbol size of edge ends.
        * Can be an array with two item to specify two ends, or a string
        * specifies both ends.
        *
        *
        * @see https://echarts.apache.org/en/option.html#series-graph.links.symbolSize
        */
      var symbolSize: js.UndefOr[js.Array[_] | String] = js.native
      
      /**
        * [name of target node](https://echarts.apache.org/en/option.html#series-graph.data.name)
        * on edge
        *
        *
        * @see https://echarts.apache.org/en/option.html#series-graph.links.target
        */
      var target: js.UndefOr[String] = js.native
      
      /**
        * value of edge, can be mapped to edge length in force graph.
        *
        *
        * @see https://echarts.apache.org/en/option.html#series-graph.links.value
        */
      var value: js.UndefOr[Double] = js.native
    }
    object LinkObject {
      
      @scala.inline
      def apply(): LinkObject = {
        val __obj = js.Dynamic.literal()
        __obj.asInstanceOf[LinkObject]
      }
      
      @scala.inline
      implicit class LinkObjectMutableBuilder[Self <: LinkObject] (val x: Self) extends AnyVal {
        
        @scala.inline
        def setEmphasis(value: LabelLineStyle): Self = StObject.set(x, "emphasis", value.asInstanceOf[js.Any])
        
        @scala.inline
        def setEmphasisUndefined: Self = StObject.set(x, "emphasis", js.undefined)
        
        @scala.inline
        def setLabel(value: FontSize): Self = StObject.set(x, "label", value.asInstanceOf[js.Any])
        
        @scala.inline
        def setLabelUndefined: Self = StObject.set(x, "label", js.undefined)
        
        @scala.inline
        def setLineStyle(value: ShadowColor): Self = StObject.set(x, "lineStyle", value.asInstanceOf[js.Any])
        
        @scala.inline
        def setLineStyleUndefined: Self = StObject.set(x, "lineStyle", js.undefined)
        
        @scala.inline
        def setSource(value: String): Self = StObject.set(x, "source", value.asInstanceOf[js.Any])
        
        @scala.inline
        def setSourceUndefined: Self = StObject.set(x, "source", js.undefined)
        
        @scala.inline
        def setSymbol(value: js.Array[_] | String): Self = StObject.set(x, "symbol", value.asInstanceOf[js.Any])
        
        @scala.inline
        def setSymbolSize(value: js.Array[_] | String): Self = StObject.set(x, "symbolSize", value.asInstanceOf[js.Any])
        
        @scala.inline
        def setSymbolSizeUndefined: Self = StObject.set(x, "symbolSize", js.undefined)
        
        @scala.inline
        def setSymbolSizeVarargs(value: js.Any*): Self = StObject.set(x, "symbolSize", js.Array(value :_*))
        
        @scala.inline
        def setSymbolUndefined: Self = StObject.set(x, "symbol", js.undefined)
        
        @scala.inline
        def setSymbolVarargs(value: js.Any*): Self = StObject.set(x, "symbol", js.Array(value :_*))
        
        @scala.inline
        def setTarget(value: String): Self = StObject.set(x, "target", value.asInstanceOf[js.Any])
        
        @scala.inline
        def setTargetUndefined: Self = StObject.set(x, "target", js.undefined)
        
        @scala.inline
        def setValue(value: Double): Self = StObject.set(x, "value", value.asInstanceOf[js.Any])
        
        @scala.inline
        def setValueUndefined: Self = StObject.set(x, "value", js.undefined)
      }
    }
    
    @scala.inline
    implicit class SeriesGraphMutableBuilder[Self <: SeriesGraph] (val x: Self) extends AnyVal {
      
      @scala.inline
      def setAnimation(value: Boolean): Self = StObject.set(x, "animation", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setAnimationDelay(value: js.Function | Double): Self = StObject.set(x, "animationDelay", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setAnimationDelayUndefined: Self = StObject.set(x, "animationDelay", js.undefined)
      
      @scala.inline
      def setAnimationDelayUpdate(value: js.Function | Double): Self = StObject.set(x, "animationDelayUpdate", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setAnimationDelayUpdateUndefined: Self = StObject.set(x, "animationDelayUpdate", js.undefined)
      
      @scala.inline
      def setAnimationDuration(value: js.Function | Double): Self = StObject.set(x, "animationDuration", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setAnimationDurationUndefined: Self = StObject.set(x, "animationDuration", js.undefined)
      
      @scala.inline
      def setAnimationDurationUpdate(value: js.Function | Double): Self = StObject.set(x, "animationDurationUpdate", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setAnimationDurationUpdateUndefined: Self = StObject.set(x, "animationDurationUpdate", js.undefined)
      
      @scala.inline
      def setAnimationEasing(value: String): Self = StObject.set(x, "animationEasing", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setAnimationEasingUndefined: Self = StObject.set(x, "animationEasing", js.undefined)
      
      @scala.inline
      def setAnimationEasingUpdate(value: String): Self = StObject.set(x, "animationEasingUpdate", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setAnimationEasingUpdateUndefined: Self = StObject.set(x, "animationEasingUpdate", js.undefined)
      
      @scala.inline
      def setAnimationThreshold(value: Double): Self = StObject.set(x, "animationThreshold", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setAnimationThresholdUndefined: Self = StObject.set(x, "animationThreshold", js.undefined)
      
      @scala.inline
      def setAnimationUndefined: Self = StObject.set(x, "animation", js.undefined)
      
      @scala.inline
      def setAutoCurveness(value: Double | js.Array[Double]): Self = StObject.set(x, "autoCurveness", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setAutoCurvenessUndefined: Self = StObject.set(x, "autoCurveness", js.undefined)
      
      @scala.inline
      def setAutoCurvenessVarargs(value: Double*): Self = StObject.set(x, "autoCurveness", js.Array(value :_*))
      
      @scala.inline
      def setBottom(value: Double | String): Self = StObject.set(x, "bottom", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setBottomUndefined: Self = StObject.set(x, "bottom", js.undefined)
      
      @scala.inline
      def setCalendarIndex(value: Double): Self = StObject.set(x, "calendarIndex", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setCalendarIndexUndefined: Self = StObject.set(x, "calendarIndex", js.undefined)
      
      @scala.inline
      def setCategories(value: js.Array[CategoryObject]): Self = StObject.set(x, "categories", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setCategoriesUndefined: Self = StObject.set(x, "categories", js.undefined)
      
      @scala.inline
      def setCategoriesVarargs(value: CategoryObject*): Self = StObject.set(x, "categories", js.Array(value :_*))
      
      @scala.inline
      def setCircular(value: RotateLabel): Self = StObject.set(x, "circular", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setCircularUndefined: Self = StObject.set(x, "circular", js.undefined)
      
      @scala.inline
      def setCoordinateSystem(value: String): Self = StObject.set(x, "coordinateSystem", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setCoordinateSystemUndefined: Self = StObject.set(x, "coordinateSystem", js.undefined)
      
      @scala.inline
      def setCursor(value: String): Self = StObject.set(x, "cursor", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setCursorUndefined: Self = StObject.set(x, "cursor", js.undefined)
      
      @scala.inline
      def setData(value: js.Array[typingsSlinky.echarts.echarts.EChartOption.SeriesGraph.DataObject]): Self = StObject.set(x, "data", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setDataUndefined: Self = StObject.set(x, "data", js.undefined)
      
      @scala.inline
      def setDataVarargs(value: typingsSlinky.echarts.echarts.EChartOption.SeriesGraph.DataObject*): Self = StObject.set(x, "data", js.Array(value :_*))
      
      @scala.inline
      def setDraggable(value: Boolean): Self = StObject.set(x, "draggable", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setDraggableUndefined: Self = StObject.set(x, "draggable", js.undefined)
      
      @scala.inline
      def setEdgeLabel(value: FontSize): Self = StObject.set(x, "edgeLabel", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setEdgeLabelUndefined: Self = StObject.set(x, "edgeLabel", js.undefined)
      
      @scala.inline
      def setEdgeSymbol(value: js.Array[_] | String): Self = StObject.set(x, "edgeSymbol", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setEdgeSymbolSize(value: js.Array[_] | Double): Self = StObject.set(x, "edgeSymbolSize", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setEdgeSymbolSizeUndefined: Self = StObject.set(x, "edgeSymbolSize", js.undefined)
      
      @scala.inline
      def setEdgeSymbolSizeVarargs(value: js.Any*): Self = StObject.set(x, "edgeSymbolSize", js.Array(value :_*))
      
      @scala.inline
      def setEdgeSymbolUndefined: Self = StObject.set(x, "edgeSymbol", js.undefined)
      
      @scala.inline
      def setEdgeSymbolVarargs(value: js.Any*): Self = StObject.set(x, "edgeSymbol", js.Array(value :_*))
      
      @scala.inline
      def setEdges(value: js.Array[_]): Self = StObject.set(x, "edges", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setEdgesUndefined: Self = StObject.set(x, "edges", js.undefined)
      
      @scala.inline
      def setEdgesVarargs(value: js.Any*): Self = StObject.set(x, "edges", js.Array(value :_*))
      
      @scala.inline
      def setEmphasis(value: EdgeLabel): Self = StObject.set(x, "emphasis", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setEmphasisUndefined: Self = StObject.set(x, "emphasis", js.undefined)
      
      @scala.inline
      def setFocusNodeAdjacency(value: Boolean): Self = StObject.set(x, "focusNodeAdjacency", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setFocusNodeAdjacencyUndefined: Self = StObject.set(x, "focusNodeAdjacency", js.undefined)
      
      @scala.inline
      def setForce(value: EdgeLength): Self = StObject.set(x, "force", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setForceUndefined: Self = StObject.set(x, "force", js.undefined)
      
      @scala.inline
      def setGeoIndex(value: Double): Self = StObject.set(x, "geoIndex", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setGeoIndexUndefined: Self = StObject.set(x, "geoIndex", js.undefined)
      
      @scala.inline
      def setHeight(value: Double | String): Self = StObject.set(x, "height", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setHeightUndefined: Self = StObject.set(x, "height", js.undefined)
      
      @scala.inline
      def setHoverAnimation(value: Boolean): Self = StObject.set(x, "hoverAnimation", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setHoverAnimationUndefined: Self = StObject.set(x, "hoverAnimation", js.undefined)
      
      @scala.inline
      def setId(value: String): Self = StObject.set(x, "id", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setIdUndefined: Self = StObject.set(x, "id", js.undefined)
      
      @scala.inline
      def setItemStyle(value: ShadowOffsetY): Self = StObject.set(x, "itemStyle", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setItemStyleUndefined: Self = StObject.set(x, "itemStyle", js.undefined)
      
      @scala.inline
      def setLabel(value: BorderRadius): Self = StObject.set(x, "label", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setLabelUndefined: Self = StObject.set(x, "label", js.undefined)
      
      @scala.inline
      def setLayout(value: String): Self = StObject.set(x, "layout", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setLayoutUndefined: Self = StObject.set(x, "layout", js.undefined)
      
      @scala.inline
      def setLeft(value: Double | String): Self = StObject.set(x, "left", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setLeftUndefined: Self = StObject.set(x, "left", js.undefined)
      
      @scala.inline
      def setLegendHoverLink(value: Boolean): Self = StObject.set(x, "legendHoverLink", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setLegendHoverLinkUndefined: Self = StObject.set(x, "legendHoverLink", js.undefined)
      
      @scala.inline
      def setLineStyle(value: ShadowColor): Self = StObject.set(x, "lineStyle", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setLineStyleUndefined: Self = StObject.set(x, "lineStyle", js.undefined)
      
      @scala.inline
      def setLinks(value: js.Array[LinkObject]): Self = StObject.set(x, "links", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setLinksUndefined: Self = StObject.set(x, "links", js.undefined)
      
      @scala.inline
      def setLinksVarargs(value: LinkObject*): Self = StObject.set(x, "links", js.Array(value :_*))
      
      @scala.inline
      def setMarkArea(value: AnimationDelayUpdate): Self = StObject.set(x, "markArea", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setMarkAreaUndefined: Self = StObject.set(x, "markArea", js.undefined)
      
      @scala.inline
      def setMarkLine(value: AnimationDelay): Self = StObject.set(x, "markLine", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setMarkLineUndefined: Self = StObject.set(x, "markLine", js.undefined)
      
      @scala.inline
      def setMarkPoint(value: AnimationDuration): Self = StObject.set(x, "markPoint", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setMarkPointUndefined: Self = StObject.set(x, "markPoint", js.undefined)
      
      @scala.inline
      def setName(value: String): Self = StObject.set(x, "name", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setNameUndefined: Self = StObject.set(x, "name", js.undefined)
      
      @scala.inline
      def setNodeScaleRatio(value: Double): Self = StObject.set(x, "nodeScaleRatio", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setNodeScaleRatioUndefined: Self = StObject.set(x, "nodeScaleRatio", js.undefined)
      
      @scala.inline
      def setNodes(value: js.Array[_]): Self = StObject.set(x, "nodes", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setNodesUndefined: Self = StObject.set(x, "nodes", js.undefined)
      
      @scala.inline
      def setNodesVarargs(value: js.Any*): Self = StObject.set(x, "nodes", js.Array(value :_*))
      
      @scala.inline
      def setPolarIndex(value: Double): Self = StObject.set(x, "polarIndex", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setPolarIndexUndefined: Self = StObject.set(x, "polarIndex", js.undefined)
      
      @scala.inline
      def setRight(value: Double | String): Self = StObject.set(x, "right", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setRightUndefined: Self = StObject.set(x, "right", js.undefined)
      
      @scala.inline
      def setRoam(value: Boolean | String): Self = StObject.set(x, "roam", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setRoamUndefined: Self = StObject.set(x, "roam", js.undefined)
      
      @scala.inline
      def setSilent(value: Boolean): Self = StObject.set(x, "silent", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setSilentUndefined: Self = StObject.set(x, "silent", js.undefined)
      
      @scala.inline
      def setSymbol(value: String): Self = StObject.set(x, "symbol", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setSymbolKeepAspect(value: Boolean): Self = StObject.set(x, "symbolKeepAspect", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setSymbolKeepAspectUndefined: Self = StObject.set(x, "symbolKeepAspect", js.undefined)
      
      @scala.inline
      def setSymbolOffset(value: js.Array[_]): Self = StObject.set(x, "symbolOffset", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setSymbolOffsetUndefined: Self = StObject.set(x, "symbolOffset", js.undefined)
      
      @scala.inline
      def setSymbolOffsetVarargs(value: js.Any*): Self = StObject.set(x, "symbolOffset", js.Array(value :_*))
      
      @scala.inline
      def setSymbolRotate(value: Double): Self = StObject.set(x, "symbolRotate", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setSymbolRotateUndefined: Self = StObject.set(x, "symbolRotate", js.undefined)
      
      @scala.inline
      def setSymbolSize(value: js.Array[_] | js.Function | Double): Self = StObject.set(x, "symbolSize", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setSymbolSizeUndefined: Self = StObject.set(x, "symbolSize", js.undefined)
      
      @scala.inline
      def setSymbolSizeVarargs(value: js.Any*): Self = StObject.set(x, "symbolSize", js.Array(value :_*))
      
      @scala.inline
      def setSymbolUndefined: Self = StObject.set(x, "symbol", js.undefined)
      
      @scala.inline
      def setTooltip(value: BaseTooltip): Self = StObject.set(x, "tooltip", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setTooltipUndefined: Self = StObject.set(x, "tooltip", js.undefined)
      
      @scala.inline
      def setTop(value: Double | String): Self = StObject.set(x, "top", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setTopUndefined: Self = StObject.set(x, "top", js.undefined)
      
      @scala.inline
      def setType(value: String): Self = StObject.set(x, "type", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setTypeUndefined: Self = StObject.set(x, "type", js.undefined)
      
      @scala.inline
      def setWidth(value: Double | String): Self = StObject.set(x, "width", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setWidthUndefined: Self = StObject.set(x, "width", js.undefined)
      
      @scala.inline
      def setXAxisIndex(value: Double): Self = StObject.set(x, "xAxisIndex", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setXAxisIndexUndefined: Self = StObject.set(x, "xAxisIndex", js.undefined)
      
      @scala.inline
      def setYAxisIndex(value: Double): Self = StObject.set(x, "yAxisIndex", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setYAxisIndexUndefined: Self = StObject.set(x, "yAxisIndex", js.undefined)
      
      @scala.inline
      def setZ(value: Double): Self = StObject.set(x, "z", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setZUndefined: Self = StObject.set(x, "z", js.undefined)
      
      @scala.inline
      def setZlevel(value: Double): Self = StObject.set(x, "zlevel", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setZlevelUndefined: Self = StObject.set(x, "zlevel", js.undefined)
    }
  }
  
  /**
    * **heat map**
    *
    * Heat map mainly use colors to represent values, which must be used
    * along with
    * [visualMap](https://echarts.apache.org/en/option.html#visualMap)
    * component.
    *
    * It can be used in either
    * [rectangular coordinate](https://echarts.apache.org/en/option.html#grid)
    * or
    * [geographic coordinate](https://echarts.apache.org/en/option.html#geo)
    *
    * But the behaviour on them are quite different.
    * Rectangular coordinate must have two catagories to use it.
    *
    * Here are the examples using it in rectangular coordinate and geographic
    * coordinate:
    *
    * **rectangular coordinate:**
    *
    * [see doc](https://echarts.apache.org/en/option.html#series-heatmap)
    *
    * **geographic coordinate:**
    *
    * [see doc](https://echarts.apache.org/en/option.html#series-heatmap)
    *
    *
    * @see https://echarts.apache.org/en/option.html#series-heatmap
    */
  @js.native
  trait SeriesHeatmap extends Series {
    
    /**
      * Blur size of each data point. It is valid with
      * [coordinateSystem](https://echarts.apache.org/en/option.html#series-heatmap.coordinateSystem)
      * of 'geo' value.
      *
      *
      * @default
      * 20
      * @see https://echarts.apache.org/en/option.html#series-heatmap.blurSize
      */
    var blurSize: js.UndefOr[Double] = js.native
    
    /**
      * Index of
      * [calendar coordinates](https://echarts.apache.org/en/option.html#calendar)
      * to combine with, which is useful for multiple calendar coordinates
      * in one chart.
      *
      *
      * @see https://echarts.apache.org/en/option.html#series-heatmap.calendarIndex
      */
    var calendarIndex: js.UndefOr[Double] = js.native
    
    /**
      * The coordinate used in the series, whose options are:
      *
      * + `'cartesian2d'`
      *
      * Use a two-dimensional rectangular coordinate (also known as Cartesian
      * coordinate), with
      * [xAxisIndex](https://echarts.apache.org/en/option.html#series-heatmap.xAxisIndex)
      * and
      * [yAxisIndex](https://echarts.apache.org/en/option.html#series-heatmap.yAxisIndex)
      * to assign the corresponding axis component.
      *
      * + `'geo'`
      *
      * Use geographic coordinate, with
      * [geoIndex](https://echarts.apache.org/en/option.html#series-heatmap.geoIndex)
      * to assign the corresponding geographic coordinate components.
      *
      *
      * @default
      * "cartesian2d"
      * @see https://echarts.apache.org/en/option.html#series-heatmap.coordinateSystem
      */
    var coordinateSystem: js.UndefOr[String] = js.native
    
    /**
      * Data array of series, which can be in the following forms:
      *
      * Notice, if no `data` specified in series, and there is
      * [dataset](https://echarts.apache.org/en/option.html#dataset)
      * in option, series will use the first
      * [dataset](https://echarts.apache.org/en/option.html#dataset)
      * as its datasource. If `data` has been specified,
      * [dataset](https://echarts.apache.org/en/option.html#dataset)
      * will not used.
      *
      * `series.datasetIndex` can be used to specify other
      * [dataset](https://echarts.apache.org/en/option.html#dataset)
      * .
      *
      * Basically, data is represented by a two-dimension array, like
      * the example below, where each colum is named as a "dimension".
      *
      * [see doc](https://echarts.apache.org/en/option.html#series-heatmap.heatmap)
      *
      * + In
      * [cartesian (grid)](https://echarts.apache.org/en/option.html#grid)
      * , "dimX" and "dimY" correspond to
      * [xAxis](https://echarts.apache.org/en/option.html#xAxis)
      * and
      * [yAxis](https://echarts.apache.org/en/option.html#yAxis)
      * repectively.
      * + In
      * [polar](https://echarts.apache.org/en/option.html#polar)
      * "dimX" and "dimY" correspond to
      * [radiusAxis](https://echarts.apache.org/en/option.html#radiusAxis)
      * 和
      * [angleAxis](https://echarts.apache.org/en/option.html#anbleAxis)
      * repectively.
      * + Other dimensions are optional, which can be used in other place.
      * For example:
      * + [visualMap](https://echarts.apache.org/en/option.html#visualMap)
      * can map one or more dimensions to viusal (color, symbol size
      * ...).
      * + [series.symbolSize](https://echarts.apache.org/en/option.html#series.symbolSize)
      * can be set as a callback function, where symbol size can be calculated
      * by values of a certain dimension.
      * + Values in other dimensions can be shown by
      * [tooltip.formatter](https://echarts.apache.org/en/option.html#tooltip.formatter)
      * or
      * [series.label.formatter](https://echarts.apache.org/en/option.html#series.label.formatter)
      * .
      *
      * Especially, when there is one and only one category axis (axis.type
      * is `'category'`), data can be simply be represented by a one-dimension
      * array, like:
      *
      * [see doc](https://echarts.apache.org/en/option.html#series-heatmap.heatmap)
      *
      * **Relationship between "value" and
      * [axis.type](https://echarts.apache.org/en/option.html#xAxis.type)
      * **
      *
      * + When a dimension corresponds to a value axis (axis.type
      * is `'value'` or `'log'`):
      *
      * The value can be a `number` (like `12`) (can also be a number
      * in a `string` format, like `'12'`).
      *
      * + When a dimension corresponds to a category axis (axis.type
      * is `'category'`):
      *
      * The value should be the ordinal of the axis.data
      * (based on `0`), the string value of the axis.data.
      * For example:
      *
      * [see doc](https://echarts.apache.org/en/option.html#series-heatmap.heatmap)
      *
      * There is an example of double category axes:
      * [Github Punchcard](https://echarts.apache.org/examples/en/editor.html?c=scatter-punchCard)
      * .
      *
      * + When a dimension corresponds to a time axis (type is `'time'`),
      * the value can be:
      *
      * + a timestamp, like `1484141700832`, which represents a UTC time.
      * + a date string, in one of the formats below:
      * + a subset of
      * [ISO 8601](http://www.ecma-international.org/ecma-262/5.1/#se
      * c-15.9.1.15)
      * , only including (all of these are treated as local time unless
      * timezone is specified, which is consistent with
      * [moment](https://momentjs.com/)
      * ):
      * + only part of year/month/date/time are specified: `'2012-03'`,
      * `'2012-03-01'`, `'2012-03-01 05'`, `'2012-03-01 05:06'`.
      * + separated by `"T"` or a space: `'2012-03-01T12:22:33.123'`,
      * `'2012-03-01 12:22:33.123'`.
      * + timezone specified: `'2012-03-01T12:22:33Z'`, `'2012-03-01T12:22:33+8000'`,
      * `'2012-03-01T12:22:33-05:00'`.
      * + other date string format (all of these are treated as local
      * time): `'2012'`, `'2012-3-1'`, `'2012/3/1'`, `'2012/03/01'`,
      * `'2009/6/12 2:00'`, `'2009/6/12 2:05:08'`, `'2009/6/12 2:05:08.123'`.
      * + a JavaScript Date instance created by user:
      * + Caution, when using a data string to create a Date instance,
      * [browser differences and inconsistencies](http://dygraphs.com/date-formats.html)
      * should be considered.
      * + For example: In chrome, `new Date('2012-01-01')` is treated
      * as a Jan 1st 2012 in UTC, while `new Date('2012-1-1')` and `new
      * Date('2012/01/01')` are treated as Jan 1st 2012 in local timezone.
      * In safari `new Date('2012-1-1')` is not supported.
      * + So if you intent to perform `new Date(dateString)`, it is strongly
      * recommended to use a time parse library (e.g.,
      * [moment](https://momentjs.com/)
      * ), or use `echarts.number.parseDate`, or check
      * [this](http://dygraphs.com/date-formats.html)
      * .
      *
      * **Customize a data item:**
      *
      * When needing to customize a data item, it can be set as an object,
      * where property `value` reprensent real value. For example:
      *
      * [see doc](https://echarts.apache.org/en/option.html#series-heatmap.heatmap)
      *
      * **Empty value:**
      *
      * `'-'` or `null` or `undefined` or `NaN` can be used to describe
      * that a data item is not exists (ps：_not exist_ does not means
      * its value is `0`).
      *
      * For example, line chart can break when encounter an empty value,
      * and scatter chart do not display graphic elements for empty values.
      *
      *
      * @see https://echarts.apache.org/en/option.html#series-heatmap.data
      */
    var data: js.UndefOr[
        js.Array[
          (js.Array[
            Unit | Double | String | typingsSlinky.echarts.echarts.EChartOption.SeriesHeatmap.DataObject
          ]) | typingsSlinky.echarts.echarts.EChartOption.SeriesHeatmap.DataObject | Double | String | Unit
        ]
      ] = js.native
    
    /**
      * @see https://echarts.apache.org/en/option.html#series-heatmap.emphasis
      */
    var emphasis: js.UndefOr[`7`] = js.native
    
    /**
      * Index of
      * [geographic coordinate](https://echarts.apache.org/en/option.html#geo)
      * to combine with, which is useful for multiple geographic axes
      * in one chart.
      *
      *
      * @see https://echarts.apache.org/en/option.html#series-heatmap.geoIndex
      */
    var geoIndex: js.UndefOr[Double] = js.native
    
    /**
      * Component ID, not specified by default.
      * If specified, it can be used to refer the component in option
      * or API.
      *
      *
      * @see https://echarts.apache.org/en/option.html#series-heatmap.id
      */
    var id: js.UndefOr[String] = js.native
    
    /**
      * Work for
      * [coordinateSystem](https://echarts.apache.org/en/option.html#series-heatmap.coordinateSystem)
      * : 'cartesian2d'.
      *
      *
      * @see https://echarts.apache.org/en/option.html#series-heatmap.itemStyle
      */
    var itemStyle: js.UndefOr[BorderType] = js.native
    
    /**
      * Work for
      * [coordinateSystem](https://echarts.apache.org/en/option.html#series-heatmap.coordinateSystem)
      * : 'cartesian2d'.
      *
      *
      * @see https://echarts.apache.org/en/option.html#series-heatmap.label
      */
    var label: js.UndefOr[Distance] = js.native
    
    /**
      * Used to mark an area in chart.
      * For example, mark a time interval.
      *
      *
      * @see https://echarts.apache.org/en/option.html#series-heatmap.markArea
      */
    var markArea: js.UndefOr[AnimationThreshold] = js.native
    
    /**
      * Use a line in the chart to illustrate.
      *
      *
      * @see https://echarts.apache.org/en/option.html#series-heatmap.markLine
      */
    var markLine: js.UndefOr[AnimationEasingUpdate] = js.native
    
    /**
      * Mark point in a chart.
      *
      *
      * @see https://echarts.apache.org/en/option.html#series-heatmap.markPoint
      */
    var markPoint: js.UndefOr[AnimationEasing] = js.native
    
    /**
      * Maximum opacity. It is valid with
      * [coordinateSystem](https://echarts.apache.org/en/option.html#series-heatmap.coordinateSystem)
      * of 'geo' value.
      *
      *
      * @default
      * 1
      * @see https://echarts.apache.org/en/option.html#series-heatmap.maxOpacity
      */
    var maxOpacity: js.UndefOr[Double] = js.native
    
    /**
      * Minimum opacity. It is valid with
      * [coordinateSystem](https://echarts.apache.org/en/option.html#series-heatmap.coordinateSystem)
      * of 'geo' value.
      *
      *
      * @see https://echarts.apache.org/en/option.html#series-heatmap.minOpacity
      */
    var minOpacity: js.UndefOr[Double] = js.native
    
    /**
      * Series name used for displaying in
      * [tooltip](https://echarts.apache.org/en/option.html#tooltip)
      * and filtering with
      * [legend](https://echarts.apache.org/en/option.html#legend)
      * , or updaing data and configuration with `setOption`.
      *
      *
      * @see https://echarts.apache.org/en/option.html#series-heatmap.name
      */
    var name: js.UndefOr[String] = js.native
    
    /**
      * Whether to ignore mouse events.
      * Default value is false, for triggering and responding to mouse
      * events.
      *
      *
      * @see https://echarts.apache.org/en/option.html#series-heatmap.silent
      */
    var silent: js.UndefOr[Boolean] = js.native
    
    /**
      * tooltip settings in this series.
      *
      *
      * @see https://echarts.apache.org/en/option.html#series-heatmap.tooltip
      */
    var tooltip: js.UndefOr[BaseTooltip] = js.native
    
    /**
      * @default
      * "heatmap"
      * @see https://echarts.apache.org/en/option.html#series-heatmap.type
      */
    var `type`: js.UndefOr[String] = js.native
    
    /**
      * Index of
      * [x axis](https://echarts.apache.org/en/option.html#xAxis)
      * to combine with, which is useful for multiple x axes in one chart.
      *
      *
      * @see https://echarts.apache.org/en/option.html#series-heatmap.xAxisIndex
      */
    var xAxisIndex: js.UndefOr[Double] = js.native
    
    /**
      * Index of
      * [y axis](https://echarts.apache.org/en/option.html#yAxis)
      * to combine with, which is useful for multiple y axes in one chart.
      *
      *
      * @see https://echarts.apache.org/en/option.html#series-heatmap.yAxisIndex
      */
    var yAxisIndex: js.UndefOr[Double] = js.native
    
    /**
      * `z` value of all graghical elements in heatmap, which controls
      * order of drawing graphical components.
      * Components with smaller `z` values may be overwritten by those
      * with larger `z` values.
      *
      * `z` has a lower priority to `zlevel`, and will not create new
      * Canvas.
      *
      *
      * @default
      * 2
      * @see https://echarts.apache.org/en/option.html#series-heatmap.z
      */
    var z: js.UndefOr[Double] = js.native
    
    /**
      * `zlevel` value of all graghical elements in heatmap.
      *
      * `zlevel` is used to make layers with Canvas.
      * Graphical elements with different `zlevel` values will be placed
      * in different Canvases, which is a common optimization technique.
      * We can put those frequently changed elements (like those with
      * animations) to a seperate `zlevel`.
      * Notice that too many Canvases will increase memory cost, and
      * should be used carefully on mobile phones to avoid crash.
      *
      * Canvases with bigger `zlevel` will be placed on Canvases with
      * smaller `zlevel`.
      *
      *
      * @see https://echarts.apache.org/en/option.html#series-heatmap.zlevel
      */
    var zlevel: js.UndefOr[Double] = js.native
  }
  object SeriesHeatmap {
    
    @scala.inline
    def apply(): SeriesHeatmap = {
      val __obj = js.Dynamic.literal()
      __obj.asInstanceOf[SeriesHeatmap]
    }
    
    @js.native
    trait DataObject extends StObject {
      
      /**
        * @see https://echarts.apache.org/en/option.html#series-heatmap.data.emphasis
        */
      var emphasis: js.UndefOr[`7`] = js.native
      
      /**
        * Style of a single data point. It is valid with
        * [coordinateSystem](https://echarts.apache.org/en/option.html#series-heatmap.coordinateSystem)
        * of 'cartesian2d' value.
        *
        *
        * @see https://echarts.apache.org/en/option.html#series-heatmap.data.itemStyle
        */
      var itemStyle: js.UndefOr[BorderType] = js.native
      
      /**
        * It is valid with
        * [coordinateSystem](https://echarts.apache.org/en/option.html#series-heatmap.coordinateSystem)
        * of 'cartesian2d' value.
        *
        *
        * @see https://echarts.apache.org/en/option.html#series-heatmap.data.label
        */
      var label: js.UndefOr[Distance] = js.native
      
      /**
        * Name of data item.
        *
        *
        * @see https://echarts.apache.org/en/option.html#series-heatmap.data.name
        */
      var name: js.UndefOr[String] = js.native
      
      /**
        * Value of data item.
        *
        *
        * @see https://echarts.apache.org/en/option.html#series-heatmap.data.value
        */
      var value: js.UndefOr[js.Array[_]] = js.native
    }
    object DataObject {
      
      @scala.inline
      def apply(): typingsSlinky.echarts.echarts.EChartOption.SeriesHeatmap.DataObject = {
        val __obj = js.Dynamic.literal()
        __obj.asInstanceOf[typingsSlinky.echarts.echarts.EChartOption.SeriesHeatmap.DataObject]
      }
      
      @scala.inline
      implicit class DataObjectMutableBuilder[Self <: typingsSlinky.echarts.echarts.EChartOption.SeriesHeatmap.DataObject] (val x: Self) extends AnyVal {
        
        @scala.inline
        def setEmphasis(value: `7`): Self = StObject.set(x, "emphasis", value.asInstanceOf[js.Any])
        
        @scala.inline
        def setEmphasisUndefined: Self = StObject.set(x, "emphasis", js.undefined)
        
        @scala.inline
        def setItemStyle(value: BorderType): Self = StObject.set(x, "itemStyle", value.asInstanceOf[js.Any])
        
        @scala.inline
        def setItemStyleUndefined: Self = StObject.set(x, "itemStyle", js.undefined)
        
        @scala.inline
        def setLabel(value: Distance): Self = StObject.set(x, "label", value.asInstanceOf[js.Any])
        
        @scala.inline
        def setLabelUndefined: Self = StObject.set(x, "label", js.undefined)
        
        @scala.inline
        def setName(value: String): Self = StObject.set(x, "name", value.asInstanceOf[js.Any])
        
        @scala.inline
        def setNameUndefined: Self = StObject.set(x, "name", js.undefined)
        
        @scala.inline
        def setValue(value: js.Array[_]): Self = StObject.set(x, "value", value.asInstanceOf[js.Any])
        
        @scala.inline
        def setValueUndefined: Self = StObject.set(x, "value", js.undefined)
        
        @scala.inline
        def setValueVarargs(value: js.Any*): Self = StObject.set(x, "value", js.Array(value :_*))
      }
    }
    
    @scala.inline
    implicit class SeriesHeatmapMutableBuilder[Self <: SeriesHeatmap] (val x: Self) extends AnyVal {
      
      @scala.inline
      def setBlurSize(value: Double): Self = StObject.set(x, "blurSize", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setBlurSizeUndefined: Self = StObject.set(x, "blurSize", js.undefined)
      
      @scala.inline
      def setCalendarIndex(value: Double): Self = StObject.set(x, "calendarIndex", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setCalendarIndexUndefined: Self = StObject.set(x, "calendarIndex", js.undefined)
      
      @scala.inline
      def setCoordinateSystem(value: String): Self = StObject.set(x, "coordinateSystem", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setCoordinateSystemUndefined: Self = StObject.set(x, "coordinateSystem", js.undefined)
      
      @scala.inline
      def setData(
        value: js.Array[
              (js.Array[
                Unit | Double | String | typingsSlinky.echarts.echarts.EChartOption.SeriesHeatmap.DataObject
              ]) | typingsSlinky.echarts.echarts.EChartOption.SeriesHeatmap.DataObject | Double | String | Unit
            ]
      ): Self = StObject.set(x, "data", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setDataUndefined: Self = StObject.set(x, "data", js.undefined)
      
      @scala.inline
      def setDataVarargs(
        value: ((js.Array[
              Unit | Double | String | typingsSlinky.echarts.echarts.EChartOption.SeriesHeatmap.DataObject
            ]) | typingsSlinky.echarts.echarts.EChartOption.SeriesHeatmap.DataObject | Double | String | Unit)*
      ): Self = StObject.set(x, "data", js.Array(value :_*))
      
      @scala.inline
      def setEmphasis(value: `7`): Self = StObject.set(x, "emphasis", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setEmphasisUndefined: Self = StObject.set(x, "emphasis", js.undefined)
      
      @scala.inline
      def setGeoIndex(value: Double): Self = StObject.set(x, "geoIndex", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setGeoIndexUndefined: Self = StObject.set(x, "geoIndex", js.undefined)
      
      @scala.inline
      def setId(value: String): Self = StObject.set(x, "id", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setIdUndefined: Self = StObject.set(x, "id", js.undefined)
      
      @scala.inline
      def setItemStyle(value: BorderType): Self = StObject.set(x, "itemStyle", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setItemStyleUndefined: Self = StObject.set(x, "itemStyle", js.undefined)
      
      @scala.inline
      def setLabel(value: Distance): Self = StObject.set(x, "label", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setLabelUndefined: Self = StObject.set(x, "label", js.undefined)
      
      @scala.inline
      def setMarkArea(value: AnimationThreshold): Self = StObject.set(x, "markArea", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setMarkAreaUndefined: Self = StObject.set(x, "markArea", js.undefined)
      
      @scala.inline
      def setMarkLine(value: AnimationEasingUpdate): Self = StObject.set(x, "markLine", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setMarkLineUndefined: Self = StObject.set(x, "markLine", js.undefined)
      
      @scala.inline
      def setMarkPoint(value: AnimationEasing): Self = StObject.set(x, "markPoint", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setMarkPointUndefined: Self = StObject.set(x, "markPoint", js.undefined)
      
      @scala.inline
      def setMaxOpacity(value: Double): Self = StObject.set(x, "maxOpacity", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setMaxOpacityUndefined: Self = StObject.set(x, "maxOpacity", js.undefined)
      
      @scala.inline
      def setMinOpacity(value: Double): Self = StObject.set(x, "minOpacity", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setMinOpacityUndefined: Self = StObject.set(x, "minOpacity", js.undefined)
      
      @scala.inline
      def setName(value: String): Self = StObject.set(x, "name", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setNameUndefined: Self = StObject.set(x, "name", js.undefined)
      
      @scala.inline
      def setSilent(value: Boolean): Self = StObject.set(x, "silent", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setSilentUndefined: Self = StObject.set(x, "silent", js.undefined)
      
      @scala.inline
      def setTooltip(value: BaseTooltip): Self = StObject.set(x, "tooltip", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setTooltipUndefined: Self = StObject.set(x, "tooltip", js.undefined)
      
      @scala.inline
      def setType(value: String): Self = StObject.set(x, "type", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setTypeUndefined: Self = StObject.set(x, "type", js.undefined)
      
      @scala.inline
      def setXAxisIndex(value: Double): Self = StObject.set(x, "xAxisIndex", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setXAxisIndexUndefined: Self = StObject.set(x, "xAxisIndex", js.undefined)
      
      @scala.inline
      def setYAxisIndex(value: Double): Self = StObject.set(x, "yAxisIndex", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setYAxisIndexUndefined: Self = StObject.set(x, "yAxisIndex", js.undefined)
      
      @scala.inline
      def setZ(value: Double): Self = StObject.set(x, "z", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setZUndefined: Self = StObject.set(x, "z", js.undefined)
      
      @scala.inline
      def setZlevel(value: Double): Self = StObject.set(x, "zlevel", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setZlevelUndefined: Self = StObject.set(x, "zlevel", js.undefined)
    }
  }
  
  /**
    * **broken line chart**
    *
    * Broken line chart relates all the data points
    * [symbol](https://echarts.apache.org/en/option.html#series-line.symbol)
    * by broken lines, which is used to show the trend of data changing.
    * It could be used in both
    * [rectangular coordinate](https://echarts.apache.org/en/option.html#grid)
    * and
    * [polar coordinate](https://echarts.apache.org/en/option.html#polar)
    * .
    *
    * **Tip:** When
    * [areaStyle](https://echarts.apache.org/en/option.html#series-line.areaStyle)
    * is set, area chart will be drew.
    *
    * **Tip:** With
    * [visualMap](https://echarts.apache.org/en/option.html#visualMap-piecewise)
    * component, Broken line / area chart can have different colors on
    * different sections, as below:
    *
    * [see doc](https://echarts.apache.org/en/option.html#series-line)
    *
    *
    * @see https://echarts.apache.org/en/option.html#series-line
    */
  @js.native
  trait SeriesLine extends Series {
    
    /**
      * Whether to enable animation.
      *
      *
      * @default
      * "true"
      * @see https://echarts.apache.org/en/option.html#series-line.animation
      */
    var animation: js.UndefOr[Boolean] = js.native
    
    /**
      * Delay before updating the first animation, which supports callback
      * function for different data to have different animation effect.
      *
      * For example:
      *
      * [see doc](https://echarts.apache.org/en/option.html#series-line.line)
      *
      * See
      * [this example](https://echarts.apache.org/examples/en/editor.html?c=bar-animation-delay)
      * for more information.
      *
      *
      * @see https://echarts.apache.org/en/option.html#series-line.animationDelay
      */
    var animationDelay: js.UndefOr[js.Function | Double] = js.native
    
    /**
      * Delay before updating animation, which supports callback function
      * for different data to have different animation effect.
      *
      * For example:
      *
      * [see doc](https://echarts.apache.org/en/option.html#series-line.line)
      *
      * See
      * [this example](https://echarts.apache.org/examples/en/editor.html?c=bar-animation-delay)
      * for more information.
      *
      *
      * @see https://echarts.apache.org/en/option.html#series-line.animationDelayUpdate
      */
    var animationDelayUpdate: js.UndefOr[js.Function | Double] = js.native
    
    /**
      * Duration of the first animation, which supports callback function
      * for different data to have different animation effect:
      *
      * [see doc](https://echarts.apache.org/en/option.html#series-line.line)
      *
      *
      * @default
      * 1000
      * @see https://echarts.apache.org/en/option.html#series-line.animationDuration
      */
    var animationDuration: js.UndefOr[js.Function | Double] = js.native
    
    /**
      * Time for animation to complete, which supports callback function
      * for different data to have different animation effect:
      *
      * [see doc](https://echarts.apache.org/en/option.html#series-line.line)
      *
      *
      * @default
      * 300
      * @see https://echarts.apache.org/en/option.html#series-line.animationDurationUpdate
      */
    var animationDurationUpdate: js.UndefOr[js.Function | Double] = js.native
    
    /**
      * Easing method used for the first animation.
      * Varied easing effects can be found at
      * [easing effect example](https://echarts.apache.org/examples/en/editor.html?c=line-easing)
      * .
      *
      *
      * @default
      * "linear"
      * @see https://echarts.apache.org/en/option.html#series-line.animationEasing
      */
    var animationEasing: js.UndefOr[String] = js.native
    
    /**
      * Easing method used for animation.
      *
      *
      * @default
      * "cubicOut"
      * @see https://echarts.apache.org/en/option.html#series-line.animationEasingUpdate
      */
    var animationEasingUpdate: js.UndefOr[String] = js.native
    
    /**
      * Whether to set graphic number threshold to animation.
      * Animation will be disabled when graphic number is larger than
      * threshold.
      *
      *
      * @default
      * 2000
      * @see https://echarts.apache.org/en/option.html#series-line.animationThreshold
      */
    var animationThreshold: js.UndefOr[Double] = js.native
    
    /**
      * The style of area.
      *
      *
      * @see https://echarts.apache.org/en/option.html#series-line.areaStyle
      */
    var areaStyle: js.UndefOr[Origin] = js.native
    
    /**
      * Whether to clip the overflowing part, which defaults to clip.
      *
      *
      * @default
      * "true"
      * @see https://echarts.apache.org/en/option.html#series-line.clipOverflow
      */
    var clipOverflow: js.UndefOr[Boolean] = js.native
    
    /**
      * Whether to connect the line across null points.
      *
      *
      * @see https://echarts.apache.org/en/option.html#series-line.connectNulls
      */
    var connectNulls: js.UndefOr[Boolean] = js.native
    
    /**
      * The coordinate used in the series, whose options are:
      *
      * + `'cartesian2d'`
      *
      * Use a two-dimensional rectangular coordinate (also known as Cartesian
      * coordinate), with
      * [xAxisIndex](https://echarts.apache.org/en/option.html#series-bar.xAxisIndex)
      * and
      * [yAxisIndex](https://echarts.apache.org/en/option.html#series-bar.yAxisIndex)
      * to assign the corresponding axis component.
      *
      * + `'polar'`
      *
      * Use polar coordinates, with
      * [polarIndex](https://echarts.apache.org/en/option.html#series-bar.polarIndex)
      * to assign the corresponding polar coordinate component.
      *
      *
      * @default
      * "cartesian2d"
      * @see https://echarts.apache.org/en/option.html#series-line.coordinateSystem
      */
    var coordinateSystem: js.UndefOr[String] = js.native
    
    /**
      * The mouse style when mouse hovers on an element, the same as
      * `cursor` property in `CSS`.
      *
      *
      * @default
      * "pointer"
      * @see https://echarts.apache.org/en/option.html#series-line.cursor
      */
    var cursor: js.UndefOr[String] = js.native
    
    /**
      * Data array of series, which can be in the following forms:
      *
      * Notice, if no `data` specified in series, and there is
      * [dataset](https://echarts.apache.org/en/option.html#dataset)
      * in option, series will use the first
      * [dataset](https://echarts.apache.org/en/option.html#dataset)
      * as its datasource. If `data` has been specified,
      * [dataset](https://echarts.apache.org/en/option.html#dataset)
      * will not used.
      *
      * `series.datasetIndex` can be used to specify other
      * [dataset](https://echarts.apache.org/en/option.html#dataset)
      * .
      *
      * Basically, data is represented by a two-dimension array, like
      * the example below, where each colum is named as a "dimension".
      *
      * [see doc](https://echarts.apache.org/en/option.html#series-line.line)
      *
      * + In
      * [cartesian (grid)](https://echarts.apache.org/en/option.html#grid)
      * , "dimX" and "dimY" correspond to
      * [xAxis](https://echarts.apache.org/en/option.html#xAxis)
      * and
      * [yAxis](https://echarts.apache.org/en/option.html#yAxis)
      * repectively.
      * + In
      * [polar](https://echarts.apache.org/en/option.html#polar)
      * "dimX" and "dimY" correspond to
      * [radiusAxis](https://echarts.apache.org/en/option.html#radiusAxis)
      * 和
      * [angleAxis](https://echarts.apache.org/en/option.html#anbleAxis)
      * repectively.
      * + Other dimensions are optional, which can be used in other place.
      * For example:
      * + [visualMap](https://echarts.apache.org/en/option.html#visualMap)
      * can map one or more dimensions to viusal (color, symbol size
      * ...).
      * + [series.symbolSize](https://echarts.apache.org/en/option.html#series.symbolSize)
      * can be set as a callback function, where symbol size can be calculated
      * by values of a certain dimension.
      * + Values in other dimensions can be shown by
      * [tooltip.formatter](https://echarts.apache.org/en/option.html#tooltip.formatter)
      * or
      * [series.label.formatter](https://echarts.apache.org/en/option.html#series.label.formatter)
      * .
      *
      * Especially, when there is one and only one category axis (axis.type
      * is `'category'`), data can be simply be represented by a one-dimension
      * array, like:
      *
      * [see doc](https://echarts.apache.org/en/option.html#series-line.line)
      *
      * **Relationship between "value" and
      * [axis.type](https://echarts.apache.org/en/option.html#xAxis.type)
      * **
      *
      * + When a dimension corresponds to a value axis (axis.type
      * is `'value'` or `'log'`):
      *
      * The value can be a `number` (like `12`) (can also be a number
      * in a `string` format, like `'12'`).
      *
      * + When a dimension corresponds to a category axis (axis.type
      * is `'category'`):
      *
      * The value should be the ordinal of the axis.data
      * (based on `0`), the string value of the axis.data.
      * For example:
      *
      * [see doc](https://echarts.apache.org/en/option.html#series-line.line)
      *
      * There is an example of double category axes:
      * [Github Punchcard](https://echarts.apache.org/examples/en/editor.html?c=scatter-punchCard)
      * .
      *
      * + When a dimension corresponds to a time axis (type is `'time'`),
      * the value can be:
      *
      * + a timestamp, like `1484141700832`, which represents a UTC time.
      * + a date string, in one of the formats below:
      * + a subset of
      * [ISO 8601](http://www.ecma-international.org/ecma-262/5.1/#se
      * c-15.9.1.15)
      * , only including (all of these are treated as local time unless
      * timezone is specified, which is consistent with
      * [moment](https://momentjs.com/)
      * ):
      * + only part of year/month/date/time are specified: `'2012-03'`,
      * `'2012-03-01'`, `'2012-03-01 05'`, `'2012-03-01 05:06'`.
      * + separated by `"T"` or a space: `'2012-03-01T12:22:33.123'`,
      * `'2012-03-01 12:22:33.123'`.
      * + timezone specified: `'2012-03-01T12:22:33Z'`, `'2012-03-01T12:22:33+8000'`,
      * `'2012-03-01T12:22:33-05:00'`.
      * + other date string format (all of these are treated as local
      * time): `'2012'`, `'2012-3-1'`, `'2012/3/1'`, `'2012/03/01'`,
      * `'2009/6/12 2:00'`, `'2009/6/12 2:05:08'`, `'2009/6/12 2:05:08.123'`.
      * + a JavaScript Date instance created by user:
      * + Caution, when using a data string to create a Date instance,
      * [browser differences and inconsistencies](http://dygraphs.com/date-formats.html)
      * should be considered.
      * + For example: In chrome, `new Date('2012-01-01')` is treated
      * as a Jan 1st 2012 in UTC, while `new Date('2012-1-1')` and `new
      * Date('2012/01/01')` are treated as Jan 1st 2012 in local timezone.
      * In safari `new Date('2012-1-1')` is not supported.
      * + So if you intent to perform `new Date(dateString)`, it is strongly
      * recommended to use a time parse library (e.g.,
      * [moment](https://momentjs.com/)
      * ), or use `echarts.number.parseDate`, or check
      * [this](http://dygraphs.com/date-formats.html)
      * .
      *
      * **Customize a data item:**
      *
      * When needing to customize a data item, it can be set as an object,
      * where property `value` reprensent real value. For example:
      *
      * [see doc](https://echarts.apache.org/en/option.html#series-line.line)
      *
      * **Empty value:**
      *
      * `'-'` or `null` or `undefined` or `NaN` can be used to describe
      * that a data item is not exists (ps：_not exist_ does not means
      * its value is `0`).
      *
      * For example, line chart can break when encounter an empty value,
      * and scatter chart do not display graphic elements for empty values.
      *
      *
      * @see https://echarts.apache.org/en/option.html#series-line.data
      */
    var data: js.UndefOr[
        js.Array[
          (js.Array[
            Unit | String | Double | typingsSlinky.echarts.echarts.EChartOption.SeriesLine.DataObject
          ]) | typingsSlinky.echarts.echarts.EChartOption.SeriesLine.DataObject | Double | String | Unit
        ]
      ] = js.native
    
    /**
      * If
      * [series.data](https://echarts.apache.org/en/option.html#series.data)
      * is not specified, and
      * [dataset](https://echarts.apache.org/en/option.html#dataset)
      * exists, the series will use `dataset`.
      * `datasetIndex` specifies which dataset will be used.
      *
      *
      * @see https://echarts.apache.org/en/option.html#series-line.datasetIndex
      */
    var datasetIndex: js.UndefOr[Double] = js.native
    
    /**
      * `dimensions` can be used to define dimension info for `series.data`
      * or `dataset.source`.
      *
      * Notice: if
      * [dataset](https://echarts.apache.org/en/option.html#dataset)
      * is used, we can provide dimension names in the first column/row
      * of
      * [dataset.source](https://echarts.apache.org/en/option.html#dataset.source)
      * , and not need to specify `dimensions` here.
      * But if `dimensions` is specified here, echarts will not retrieve
      * dimension names from the first row/column of `dataset.source`
      * any more.
      *
      * For example:
      *
      * [see doc](https://echarts.apache.org/en/option.html#series-line.line)
      * [see doc](https://echarts.apache.org/en/option.html#series-line.line)
      *
      * Each data item of `dimensions` can be:
      *
      * + `string`, for example, `'someName'`, which equals to `{name:
      * 'someName'}`.
      * + `Object`, where the attributes can be:
      * + name: `string`.
      * + type: `string`, supports:
      * + `number`
      * + `float`, that is,
      * [Float64Array](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Float64Array)
      *
      * + `int`, that is,
      * [Int32Array](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Int32Array)
      *
      * + `ordinal`, discrete value, which represents string generally.
      * + `time`, time value, see
      * [data](https://echarts.apache.org/en/option.html#series.data)
      * to check the format of time value.
      * + displayName: `string`, generally used in tooltip for dimension
      * display. If not specified, use `name` by default.
      *
      * When `dimensions` is specified, the default `tooltip` will be
      * displayed vertically, which is better to show diemsion names.
      * Otherwise, `tooltip` will displayed only value horizontally.
      *
      *
      * @see https://echarts.apache.org/en/option.html#series-line.dimensions
      */
    var dimensions: js.UndefOr[js.Array[_]] = js.native
    
    /**
      * 图形的高亮样式。
      *
      *
      * @see https://echarts.apache.org/en/option.html#series-line.emphasis
      */
    var emphasis: js.UndefOr[`8`] = js.native
    
    /**
      * Define what is encoded to for each dimension of `data`.
      * For example:
      *
      * [see doc](https://echarts.apache.org/en/option.html#series-line.line)
      *
      * Attributes of encode are different according to the type of coordinate
      * systtems. For
      * [cartesian2d](https://echarts.apache.org/en/option.html#grid)
      * , `x` and `y` can be defined. For
      * [polar](https://echarts.apache.org/en/option.html#polar)
      * , `radius` and `angle` can be defined. For
      * [geo](https://echarts.apache.org/en/option.html#geo)
      * , `lng` and `lat` can be defined.
      * Attribute `tooltip` and `itemName` (data item name in tooltip)
      * are always able to be defined.
      *
      * When
      * [dimensions](https://echarts.apache.org/en/option.html#series.dimensions)
      * is used to defined name for a certain dimension, `encode` can
      * refer the name directly. For example:
      *
      * [see doc](https://echarts.apache.org/en/option.html#series-line.line)
      *
      * Specially, in \[custom series(~series-custom), some property
      * in `encode`, corresponding to axis, can be set as null to make
      * the series not controlled by the axis, that is, the series data
      * will not be count in the extent of the axis, and the
      * [dataZoom](https://echarts.apache.org/en/option.html#dataZoom)
      * on the axis will not filter the series.
      *
      * [see doc](https://echarts.apache.org/en/option.html#series-line.line)
      *
      *
      * @see https://echarts.apache.org/en/option.html#series-line.encode
      */
    var encode: js.UndefOr[js.Object] = js.native
    
    /**
      * Whether to enable the animation effect when mouse is on the symbol.
      *
      *
      * @default
      * "true"
      * @see https://echarts.apache.org/en/option.html#series-line.hoverAnimation
      */
    var hoverAnimation: js.UndefOr[Boolean] = js.native
    
    /**
      * Component ID, not specified by default.
      * If specified, it can be used to refer the component in option
      * or API.
      *
      *
      * @see https://echarts.apache.org/en/option.html#series-line.id
      */
    var id: js.UndefOr[String] = js.native
    
    /**
      * The style of the symbol point of broken line.
      *
      *
      * @see https://echarts.apache.org/en/option.html#series-line.itemStyle
      */
    var itemStyle: js.UndefOr[DictunknownPropertyBorderColor] = js.native
    
    /**
      * Text label of , to explain some data information about graphic
      * item like value, name and so on.
      * `label` is placed under `itemStyle` in ECharts 2.x.
      * In ECharts 3, to make the configuration structure flatter, `label`is
      * taken to be at the same level with `itemStyle`, and has `emphasis`
      * as `itemStyle` does.
      *
      *
      * @see https://echarts.apache.org/en/option.html#series-line.label
      */
    var label: js.UndefOr[BorderRadius] = js.native
    
    /**
      * Whether to enable highlighting chart when
      * [legend](https://echarts.apache.org/en/option.html#legend)
      * is being hovered.
      *
      *
      * @default
      * "true"
      * @see https://echarts.apache.org/en/option.html#series-line.legendHoverLink
      */
    var legendHoverLink: js.UndefOr[Boolean] = js.native
    
    /**
      * Line style.
      *
      *
      * @see https://echarts.apache.org/en/option.html#series-line.lineStyle
      */
    var lineStyle: js.UndefOr[ShadowBlur] = js.native
    
    /**
      * Used to mark an area in chart.
      * For example, mark a time interval.
      *
      *
      * @see https://echarts.apache.org/en/option.html#series-line.markArea
      */
    var markArea: js.UndefOr[AnimationDelayUpdate] = js.native
    
    /**
      * Use a line in the chart to illustrate.
      *
      *
      * @see https://echarts.apache.org/en/option.html#series-line.markLine
      */
    var markLine: js.UndefOr[AnimationDelay] = js.native
    
    /**
      * Mark point in a chart.
      *
      *
      * @see https://echarts.apache.org/en/option.html#series-line.markPoint
      */
    var markPoint: js.UndefOr[AnimationDuration] = js.native
    
    /**
      * Series name used for displaying in
      * [tooltip](https://echarts.apache.org/en/option.html#tooltip)
      * and filtering with
      * [legend](https://echarts.apache.org/en/option.html#legend)
      * , or updaing data and configuration with `setOption`.
      *
      *
      * @see https://echarts.apache.org/en/option.html#series-line.name
      */
    var name: js.UndefOr[String] = js.native
    
    /**
      * Index of
      * [polar coordinate](https://echarts.apache.org/en/option.html#polar)
      * to combine with, which is useful for multiple polar axes in one
      * chart.
      *
      *
      * @see https://echarts.apache.org/en/option.html#series-line.polarIndex
      */
    var polarIndex: js.UndefOr[Double] = js.native
    
    /**
      * The dowmsampling strategy used when the data size is much larger
      * than pixel size.
      * It will improve the performance when turned on.
      * Defaults to be turned off, indicating that all the data points
      * will be drawn.
      *
      * Options:
      *
      * + `'average'` Use average value of filter points
      * + `'max'` Use maximum value of filter points
      * + `'min'` Use minimum value of filter points
      * + `'sum'` Use sum of filter points
      *
      *
      * @see https://echarts.apache.org/en/option.html#series-line.sampling
      */
    var sampling: js.UndefOr[String] = js.native
    
    /**
      * When
      * [dataset](https://echarts.apache.org/en/option.html#dataset)
      * is used, `seriesLayoutBy` specifies whether the column or the
      * row of `dataset` is mapped to the series, namely, the series
      * is "layout" on columns or rows. Optional values:
      *
      * + 'column': by default, the columns of `dataset` are mapped the
      * series. In this case, each column represents a dimension.
      * + 'row'：the rows of `dataset` are mapped to the series.
      * In this case, each row represents a dimension.
      *
      * Check this
      * [example](https://echarts.apache.org/examples/en/editor.html?c=dataset-series-layout-by)
      * .
      *
      *
      * @default
      * "column"
      * @see https://echarts.apache.org/en/option.html#series-line.seriesLayoutBy
      */
    var seriesLayoutBy: js.UndefOr[String] = js.native
    
    /**
      * Only work when main axis is `'category'` axis (`axis.type`
      * is `'category'`). Optional values:
      *
      * + `'auto'`: Default value.
      * Show all symbols if there is enough space.
      * Otherwise follow the interval strategy with with
      * [axisLabel.interval](https://echarts.apache.org/en/option.html#xAxis.axisLabel.interval)
      * .
      * + `true`: Show all symbols.
      * + `false`: Follow the interval strategy with
      * [axisLabel.interval](https://echarts.apache.org/en/option.html#xAxis.axisLabel.interval)
      * .
      *
      *
      * @default
      * "auto"
      * @see https://echarts.apache.org/en/option.html#series-line.showAllSymbol
      */
    var showAllSymbol: js.UndefOr[Boolean] = js.native
    
    /**
      * Whether to show symbol.
      * It would be shown during tooltip hover.
      *
      *
      * @default
      * "true"
      * @see https://echarts.apache.org/en/option.html#series-line.showSymbol
      */
    var showSymbol: js.UndefOr[Boolean] = js.native
    
    /**
      * Whether to ignore mouse events.
      * Default value is false, for triggering and responding to mouse
      * events.
      *
      *
      * @see https://echarts.apache.org/en/option.html#series-line.silent
      */
    var silent: js.UndefOr[Boolean] = js.native
    
    /**
      * Whether to show as smooth curve.
      *
      * If is typed in `boolean`, then it means whether to enable smoothing.
      * If is typed in `number`, valued from 0 to 1, then it means smoothness.
      * A smaller value makes it less smooth.
      *
      * Please refer to
      * [smoothMonotone](https://echarts.apache.org/en/option.html#series-line.smoothMonotone)
      * to change smoothing algorithm.
      *
      *
      * @see https://echarts.apache.org/en/option.html#series-line.smooth
      */
    var smooth: js.UndefOr[Boolean | Double] = js.native
    
    /**
      * Whether the broken line keep the monotonicity when it is smoothed.
      * It can be set as `'x'`, `'y'` to keep the monotonicity on x axis
      * or y axis.
      * Or it can be set to be `'none'` to use non-monotone smoothing
      * algorithm.
      *
      * From ECharts 4.0.3,
      * we improved our default smoothing algorithm.
      * The old algorithm can be used by setting `smoothMonotone` to
      * be `'none'`.
      * Here's the difference between old and new algorithm.
      * In the following chart, old algorithm is in green color, and
      * new algorithm is in red color.
      *
      * [see doc](https://echarts.apache.org/en/option.html#series-line.line)
      *
      * The old algorithm has many problems:
      *
      * [see doc](https://echarts.apache.org/en/option.html#series-line.line)
      *
      * Old algorithm uses the previous and next point to form control
      * points' direction, while they are always horizontal (when the
      * first dimension of data is monotone) or vertical (when the second
      * dimension of data is monotone) in new algorithm.
      *
      * [see doc](https://echarts.apache.org/en/option.html#series-line.line)
      *
      * But new algorithm doesn't work with non-monotone data.
      *
      * [see doc](https://echarts.apache.org/en/option.html#series-line.line)
      *
      * So we suggest that default value of `smoothMonotone` be used
      * in most situations.
      * If data on Y axis is monotone, it should be set to be `'y'`.
      * If data is non-monotone, it should be set to be `'none'` to use
      * the old algorithm.
      *
      *
      * @see https://echarts.apache.org/en/option.html#series-line.smoothMonotone
      */
    var smoothMonotone: js.UndefOr[String] = js.native
    
    /**
      * If stack the value.
      * On the same category axis, the series with the same `stack` name
      * would be put on top of each other.
      *
      * The effect of the below example could be seen through stack switching
      * of
      * [toolbox](https://echarts.apache.org/en/option.html#toolbox)
      * on the top right corner:
      *
      * [see doc](https://echarts.apache.org/en/option.html#series-line.line)
      *
      *
      * @see https://echarts.apache.org/en/option.html#series-line.stack
      */
    var stack: js.UndefOr[String] = js.native
    
    /**
      * Whether to show as a step line.
      * It can be `true`, `false`.
      * Or `'start'`, `'middle'`, `'end'`.
      * Which will configure the turn point of step line.
      *
      * See the example using different `step` options:
      *
      * [see doc](https://echarts.apache.org/en/option.html#series-line.line)
      *
      *
      * @see https://echarts.apache.org/en/option.html#series-line.step
      */
    var step: js.UndefOr[Boolean | String] = js.native
    
    /**
      * Symbol of .
      *
      * Icon types provided by ECharts includes `'circle'`, `'rect'`,
      * `'roundRect'`, `'triangle'`, `'diamond'`, `'pin'`, `'arrow'`,
      * `'none'`
      *
      * It can be set to an image with `'image://url'` , in which URL
      * is the link to an image, or `dataURI` of an image.
      *
      * An image URL example:
      *
      * ```
      * 'image://http://xxx.xxx.xxx/a/b.png'
      *
      * ```
      *
      * A `dataURI` example:
      *
      * [see doc](https://echarts.apache.org/en/option.html#series-line.line)
      *
      * Icons can be set to arbitrary vector path via `'path://'` in
      * ECharts.
      * As compared with raster image, vector paths prevent from jagging
      * and blurring when scaled, and have a better control over changing
      * colors.
      * Size of vectoer icon will be adapted automatically. Refer to
      * [SVG PathData](http://www.w3.org/TR/SVG/paths.html#PathData)
      * for more information about format of path.
      * You may export vector paths from tools like Adobe Illustrator.
      *
      * For example:
      *
      * [see doc](https://echarts.apache.org/en/option.html#series-line.line)
      *
      *
      * @default
      * "circle"
      * @see https://echarts.apache.org/en/option.html#series-line.symbol
      */
    var symbol: js.UndefOr[String] = js.native
    
    /**
      * Whether to keep aspect for symbols in the form of `path://`.
      *
      *
      * @see https://echarts.apache.org/en/option.html#series-line.symbolKeepAspect
      */
    var symbolKeepAspect: js.UndefOr[Boolean] = js.native
    
    /**
      * Offset of symbol relative to original position.
      * By default, symbol will be put in the center position of data.
      * But if symbol is from user-defined vector path or image, you
      * may not expect symbol to be in center.
      * In this case, you may use this attribute to set offset to default
      * position.
      * It can be in absolute pixel value, or in relative percentage
      * value.
      *
      * For example, `[0, '50%']` means to move upside side position
      * of symbol height.
      * It can be used to make the arrow in the bottom to be at data
      * position when symbol is pin.
      *
      *
      * @default
      * [0, 0]
      * @see https://echarts.apache.org/en/option.html#series-line.symbolOffset
      */
    var symbolOffset: js.UndefOr[js.Array[_]] = js.native
    
    /**
      * Rotate degree of symbol.
      * Note that when `symbol` is set to be `'arrow'` in `markLine`,
      * `symbolRotate` value will be ignored, and compulsively use tangent
      * angle.
      *
      *
      * @see https://echarts.apache.org/en/option.html#series-line.symbolRotate
      */
    var symbolRotate: js.UndefOr[Double] = js.native
    
    /**
      * symbol size.
      * It can be set to single numbers like `10`, or use an array to
      * represent width and height.
      * For example, `[20, 10]` means symbol width is `20`, and height
      * is`10`.
      *
      * If size of symbols needs to be different, you can set with callback
      * function in the following format:
      *
      * ```
      * (value: Array|number, params: Object) => number|Array
      *
      * ```
      *
      * The first parameter `value` is the value in
      * [data](https://echarts.apache.org/en/option.html#series-line.data)
      * , and the second parameter `params` is the rest parameters of
      * data item.
      *
      *
      * @default
      * 4
      * @see https://echarts.apache.org/en/option.html#series-line.symbolSize
      */
    var symbolSize: js.UndefOr[js.Array[_] | js.Function | Double] = js.native
    
    /**
      * tooltip settings in this series.
      *
      *
      * @see https://echarts.apache.org/en/option.html#series-line.tooltip
      */
    var tooltip: js.UndefOr[BaseTooltip] = js.native
    
    /**
      * @default
      * "line"
      * @see https://echarts.apache.org/en/option.html#series-line.type
      */
    var `type`: js.UndefOr[String] = js.native
    
    /**
      * Index of
      * [x axis](https://echarts.apache.org/en/option.html#xAxis)
      * to combine with, which is useful for multiple x axes in one chart.
      *
      *
      * @see https://echarts.apache.org/en/option.html#series-line.xAxisIndex
      */
    var xAxisIndex: js.UndefOr[Double] = js.native
    
    /**
      * Index of
      * [y axis](https://echarts.apache.org/en/option.html#yAxis)
      * to combine with, which is useful for multiple y axes in one chart.
      *
      *
      * @see https://echarts.apache.org/en/option.html#series-line.yAxisIndex
      */
    var yAxisIndex: js.UndefOr[Double] = js.native
    
    /**
      * `z` value of all graghical elements in broken line graph, which
      * controls order of drawing graphical components.
      * Components with smaller `z` values may be overwritten by those
      * with larger `z` values.
      *
      * `z` has a lower priority to `zlevel`, and will not create new
      * Canvas.
      *
      *
      * @default
      * 2
      * @see https://echarts.apache.org/en/option.html#series-line.z
      */
    var z: js.UndefOr[Double] = js.native
    
    /**
      * `zlevel` value of all graghical elements in broken line graph.
      *
      * `zlevel` is used to make layers with Canvas.
      * Graphical elements with different `zlevel` values will be placed
      * in different Canvases, which is a common optimization technique.
      * We can put those frequently changed elements (like those with
      * animations) to a seperate `zlevel`.
      * Notice that too many Canvases will increase memory cost, and
      * should be used carefully on mobile phones to avoid crash.
      *
      * Canvases with bigger `zlevel` will be placed on Canvases with
      * smaller `zlevel`.
      *
      *
      * @see https://echarts.apache.org/en/option.html#series-line.zlevel
      */
    var zlevel: js.UndefOr[Double] = js.native
  }
  object SeriesLine {
    
    @scala.inline
    def apply(): SeriesLine = {
      val __obj = js.Dynamic.literal()
      __obj.asInstanceOf[SeriesLine]
    }
    
    @js.native
    trait DataObject extends StObject {
      
      /**
        * @see https://echarts.apache.org/en/option.html#series-line.data.emphasis
        */
      var emphasis: js.UndefOr[`9`] = js.native
      
      /**
        * The style of the symbol of single data point.
        *
        *
        * @see https://echarts.apache.org/en/option.html#series-line.data.itemStyle
        */
      var itemStyle: js.UndefOr[BarBorderWidth] = js.native
      
      /**
        * The style of the text of single data point.
        *
        *
        * @see https://echarts.apache.org/en/option.html#series-line.data.label
        */
      var label: js.UndefOr[Distance] = js.native
      
      /**
        * The name of data item.
        *
        *
        * @see https://echarts.apache.org/en/option.html#series-line.data.name
        */
      var name: js.UndefOr[String] = js.native
      
      /**
        * Symbol of single data.
        *
        * Icon types provided by ECharts includes `'circle'`, `'rect'`,
        * `'roundRect'`, `'triangle'`, `'diamond'`, `'pin'`, `'arrow'`,
        * `'none'`
        *
        * It can be set to an image with `'image://url'` , in which
        * URL is the link to an image, or `dataURI` of an image.
        *
        * An image URL example:
        *
        * ```
        * 'image://http://xxx.xxx.xxx/a/b.png'
        *
        * ```
        *
        * A `dataURI` example:
        *
        * [see doc](https://echarts.apache.org/en/option.html#series-line.line.data)
        *
        * Icons can be set to arbitrary vector path via `'path://'`
        * in ECharts.
        * As compared with raster image, vector paths prevent from
        * jagging and blurring when scaled, and have a better control
        * over changing colors.
        * Size of vectoer icon will be adapted automatically.
        * Refer to
        * [SVG PathData](http://www.w3.org/TR/SVG/paths.html#PathData)
        * for more information about format of path.
        * You may export vector paths from tools like Adobe Illustrator.
        *
        * For example:
        *
        * [see doc](https://echarts.apache.org/en/option.html#series-line.line.data)
        *
        *
        * @default
        * "circle"
        * @see https://echarts.apache.org/en/option.html#series-line.data.symbol
        */
      var symbol: js.UndefOr[String] = js.native
      
      /**
        * Whether to keep aspect for symbols in the form of `path://`.
        *
        *
        * @see https://echarts.apache.org/en/option.html#series-line.data.symbolKeepAspect
        */
      var symbolKeepAspect: js.UndefOr[Boolean] = js.native
      
      /**
        * Offset of single data symbol relative to original position.
        * By default, symbol will be put in the center position of
        * data.
        * But if symbol is from user-defined vector path or image,
        * you may not expect symbol to be in center.
        * In this case, you may use this attribute to set offset to
        * default position.
        * It can be in absolute pixel value, or in relative percentage
        * value.
        *
        * For example, `[0, '50%']` means to move upside side position
        * of symbol height.
        * It can be used to make the arrow in the bottom to be at data
        * position when symbol is pin.
        *
        *
        * @default
        * [0, 0]
        * @see https://echarts.apache.org/en/option.html#series-line.data.symbolOffset
        */
      var symbolOffset: js.UndefOr[js.Array[_]] = js.native
      
      /**
        * Rotate degree of single data symbol.
        * Note that when `symbol` is set to be `'arrow'` in `markLine`,
        * `symbolRotate` value will be ignored, and compulsively use
        * tangent angle.
        *
        *
        * @see https://echarts.apache.org/en/option.html#series-line.data.symbolRotate
        */
      var symbolRotate: js.UndefOr[Double] = js.native
      
      /**
        * single data symbol size.
        * It can be set to single numbers like `10`, or use an array
        * to represent width and height.
        * For example, `[20, 10]` means symbol width is `20`, and height
        * is`10`.
        *
        *
        * @default
        * 4
        * @see https://echarts.apache.org/en/option.html#series-line.data.symbolSize
        */
      var symbolSize: js.UndefOr[js.Array[_] | Double] = js.native
      
      /**
        * tooltip settings in this series data.
        *
        *
        * @see https://echarts.apache.org/en/option.html#series-line.data.tooltip
        */
      var tooltip: js.UndefOr[BaseTooltip] = js.native
      
      /**
        * The value of a single data item.
        *
        *
        * @see https://echarts.apache.org/en/option.html#series-line.data.value
        */
      var value: js.UndefOr[Double] = js.native
    }
    object DataObject {
      
      @scala.inline
      def apply(): typingsSlinky.echarts.echarts.EChartOption.SeriesLine.DataObject = {
        val __obj = js.Dynamic.literal()
        __obj.asInstanceOf[typingsSlinky.echarts.echarts.EChartOption.SeriesLine.DataObject]
      }
      
      @scala.inline
      implicit class DataObjectMutableBuilder[Self <: typingsSlinky.echarts.echarts.EChartOption.SeriesLine.DataObject] (val x: Self) extends AnyVal {
        
        @scala.inline
        def setEmphasis(value: `9`): Self = StObject.set(x, "emphasis", value.asInstanceOf[js.Any])
        
        @scala.inline
        def setEmphasisUndefined: Self = StObject.set(x, "emphasis", js.undefined)
        
        @scala.inline
        def setItemStyle(value: BarBorderWidth): Self = StObject.set(x, "itemStyle", value.asInstanceOf[js.Any])
        
        @scala.inline
        def setItemStyleUndefined: Self = StObject.set(x, "itemStyle", js.undefined)
        
        @scala.inline
        def setLabel(value: Distance): Self = StObject.set(x, "label", value.asInstanceOf[js.Any])
        
        @scala.inline
        def setLabelUndefined: Self = StObject.set(x, "label", js.undefined)
        
        @scala.inline
        def setName(value: String): Self = StObject.set(x, "name", value.asInstanceOf[js.Any])
        
        @scala.inline
        def setNameUndefined: Self = StObject.set(x, "name", js.undefined)
        
        @scala.inline
        def setSymbol(value: String): Self = StObject.set(x, "symbol", value.asInstanceOf[js.Any])
        
        @scala.inline
        def setSymbolKeepAspect(value: Boolean): Self = StObject.set(x, "symbolKeepAspect", value.asInstanceOf[js.Any])
        
        @scala.inline
        def setSymbolKeepAspectUndefined: Self = StObject.set(x, "symbolKeepAspect", js.undefined)
        
        @scala.inline
        def setSymbolOffset(value: js.Array[_]): Self = StObject.set(x, "symbolOffset", value.asInstanceOf[js.Any])
        
        @scala.inline
        def setSymbolOffsetUndefined: Self = StObject.set(x, "symbolOffset", js.undefined)
        
        @scala.inline
        def setSymbolOffsetVarargs(value: js.Any*): Self = StObject.set(x, "symbolOffset", js.Array(value :_*))
        
        @scala.inline
        def setSymbolRotate(value: Double): Self = StObject.set(x, "symbolRotate", value.asInstanceOf[js.Any])
        
        @scala.inline
        def setSymbolRotateUndefined: Self = StObject.set(x, "symbolRotate", js.undefined)
        
        @scala.inline
        def setSymbolSize(value: js.Array[_] | Double): Self = StObject.set(x, "symbolSize", value.asInstanceOf[js.Any])
        
        @scala.inline
        def setSymbolSizeUndefined: Self = StObject.set(x, "symbolSize", js.undefined)
        
        @scala.inline
        def setSymbolSizeVarargs(value: js.Any*): Self = StObject.set(x, "symbolSize", js.Array(value :_*))
        
        @scala.inline
        def setSymbolUndefined: Self = StObject.set(x, "symbol", js.undefined)
        
        @scala.inline
        def setTooltip(value: BaseTooltip): Self = StObject.set(x, "tooltip", value.asInstanceOf[js.Any])
        
        @scala.inline
        def setTooltipUndefined: Self = StObject.set(x, "tooltip", js.undefined)
        
        @scala.inline
        def setValue(value: Double): Self = StObject.set(x, "value", value.asInstanceOf[js.Any])
        
        @scala.inline
        def setValueUndefined: Self = StObject.set(x, "value", js.undefined)
      }
    }
    
    @scala.inline
    implicit class SeriesLineMutableBuilder[Self <: SeriesLine] (val x: Self) extends AnyVal {
      
      @scala.inline
      def setAnimation(value: Boolean): Self = StObject.set(x, "animation", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setAnimationDelay(value: js.Function | Double): Self = StObject.set(x, "animationDelay", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setAnimationDelayUndefined: Self = StObject.set(x, "animationDelay", js.undefined)
      
      @scala.inline
      def setAnimationDelayUpdate(value: js.Function | Double): Self = StObject.set(x, "animationDelayUpdate", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setAnimationDelayUpdateUndefined: Self = StObject.set(x, "animationDelayUpdate", js.undefined)
      
      @scala.inline
      def setAnimationDuration(value: js.Function | Double): Self = StObject.set(x, "animationDuration", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setAnimationDurationUndefined: Self = StObject.set(x, "animationDuration", js.undefined)
      
      @scala.inline
      def setAnimationDurationUpdate(value: js.Function | Double): Self = StObject.set(x, "animationDurationUpdate", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setAnimationDurationUpdateUndefined: Self = StObject.set(x, "animationDurationUpdate", js.undefined)
      
      @scala.inline
      def setAnimationEasing(value: String): Self = StObject.set(x, "animationEasing", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setAnimationEasingUndefined: Self = StObject.set(x, "animationEasing", js.undefined)
      
      @scala.inline
      def setAnimationEasingUpdate(value: String): Self = StObject.set(x, "animationEasingUpdate", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setAnimationEasingUpdateUndefined: Self = StObject.set(x, "animationEasingUpdate", js.undefined)
      
      @scala.inline
      def setAnimationThreshold(value: Double): Self = StObject.set(x, "animationThreshold", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setAnimationThresholdUndefined: Self = StObject.set(x, "animationThreshold", js.undefined)
      
      @scala.inline
      def setAnimationUndefined: Self = StObject.set(x, "animation", js.undefined)
      
      @scala.inline
      def setAreaStyle(value: Origin): Self = StObject.set(x, "areaStyle", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setAreaStyleUndefined: Self = StObject.set(x, "areaStyle", js.undefined)
      
      @scala.inline
      def setClipOverflow(value: Boolean): Self = StObject.set(x, "clipOverflow", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setClipOverflowUndefined: Self = StObject.set(x, "clipOverflow", js.undefined)
      
      @scala.inline
      def setConnectNulls(value: Boolean): Self = StObject.set(x, "connectNulls", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setConnectNullsUndefined: Self = StObject.set(x, "connectNulls", js.undefined)
      
      @scala.inline
      def setCoordinateSystem(value: String): Self = StObject.set(x, "coordinateSystem", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setCoordinateSystemUndefined: Self = StObject.set(x, "coordinateSystem", js.undefined)
      
      @scala.inline
      def setCursor(value: String): Self = StObject.set(x, "cursor", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setCursorUndefined: Self = StObject.set(x, "cursor", js.undefined)
      
      @scala.inline
      def setData(
        value: js.Array[
              (js.Array[
                Unit | String | Double | typingsSlinky.echarts.echarts.EChartOption.SeriesLine.DataObject
              ]) | typingsSlinky.echarts.echarts.EChartOption.SeriesLine.DataObject | Double | String | Unit
            ]
      ): Self = StObject.set(x, "data", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setDataUndefined: Self = StObject.set(x, "data", js.undefined)
      
      @scala.inline
      def setDataVarargs(
        value: ((js.Array[
              Unit | String | Double | typingsSlinky.echarts.echarts.EChartOption.SeriesLine.DataObject
            ]) | typingsSlinky.echarts.echarts.EChartOption.SeriesLine.DataObject | Double | String | Unit)*
      ): Self = StObject.set(x, "data", js.Array(value :_*))
      
      @scala.inline
      def setDatasetIndex(value: Double): Self = StObject.set(x, "datasetIndex", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setDatasetIndexUndefined: Self = StObject.set(x, "datasetIndex", js.undefined)
      
      @scala.inline
      def setDimensions(value: js.Array[_]): Self = StObject.set(x, "dimensions", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setDimensionsUndefined: Self = StObject.set(x, "dimensions", js.undefined)
      
      @scala.inline
      def setDimensionsVarargs(value: js.Any*): Self = StObject.set(x, "dimensions", js.Array(value :_*))
      
      @scala.inline
      def setEmphasis(value: `8`): Self = StObject.set(x, "emphasis", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setEmphasisUndefined: Self = StObject.set(x, "emphasis", js.undefined)
      
      @scala.inline
      def setEncode(value: js.Object): Self = StObject.set(x, "encode", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setEncodeUndefined: Self = StObject.set(x, "encode", js.undefined)
      
      @scala.inline
      def setHoverAnimation(value: Boolean): Self = StObject.set(x, "hoverAnimation", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setHoverAnimationUndefined: Self = StObject.set(x, "hoverAnimation", js.undefined)
      
      @scala.inline
      def setId(value: String): Self = StObject.set(x, "id", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setIdUndefined: Self = StObject.set(x, "id", js.undefined)
      
      @scala.inline
      def setItemStyle(value: DictunknownPropertyBorderColor): Self = StObject.set(x, "itemStyle", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setItemStyleUndefined: Self = StObject.set(x, "itemStyle", js.undefined)
      
      @scala.inline
      def setLabel(value: BorderRadius): Self = StObject.set(x, "label", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setLabelUndefined: Self = StObject.set(x, "label", js.undefined)
      
      @scala.inline
      def setLegendHoverLink(value: Boolean): Self = StObject.set(x, "legendHoverLink", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setLegendHoverLinkUndefined: Self = StObject.set(x, "legendHoverLink", js.undefined)
      
      @scala.inline
      def setLineStyle(value: ShadowBlur): Self = StObject.set(x, "lineStyle", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setLineStyleUndefined: Self = StObject.set(x, "lineStyle", js.undefined)
      
      @scala.inline
      def setMarkArea(value: AnimationDelayUpdate): Self = StObject.set(x, "markArea", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setMarkAreaUndefined: Self = StObject.set(x, "markArea", js.undefined)
      
      @scala.inline
      def setMarkLine(value: AnimationDelay): Self = StObject.set(x, "markLine", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setMarkLineUndefined: Self = StObject.set(x, "markLine", js.undefined)
      
      @scala.inline
      def setMarkPoint(value: AnimationDuration): Self = StObject.set(x, "markPoint", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setMarkPointUndefined: Self = StObject.set(x, "markPoint", js.undefined)
      
      @scala.inline
      def setName(value: String): Self = StObject.set(x, "name", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setNameUndefined: Self = StObject.set(x, "name", js.undefined)
      
      @scala.inline
      def setPolarIndex(value: Double): Self = StObject.set(x, "polarIndex", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setPolarIndexUndefined: Self = StObject.set(x, "polarIndex", js.undefined)
      
      @scala.inline
      def setSampling(value: String): Self = StObject.set(x, "sampling", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setSamplingUndefined: Self = StObject.set(x, "sampling", js.undefined)
      
      @scala.inline
      def setSeriesLayoutBy(value: String): Self = StObject.set(x, "seriesLayoutBy", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setSeriesLayoutByUndefined: Self = StObject.set(x, "seriesLayoutBy", js.undefined)
      
      @scala.inline
      def setShowAllSymbol(value: Boolean): Self = StObject.set(x, "showAllSymbol", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setShowAllSymbolUndefined: Self = StObject.set(x, "showAllSymbol", js.undefined)
      
      @scala.inline
      def setShowSymbol(value: Boolean): Self = StObject.set(x, "showSymbol", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setShowSymbolUndefined: Self = StObject.set(x, "showSymbol", js.undefined)
      
      @scala.inline
      def setSilent(value: Boolean): Self = StObject.set(x, "silent", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setSilentUndefined: Self = StObject.set(x, "silent", js.undefined)
      
      @scala.inline
      def setSmooth(value: Boolean | Double): Self = StObject.set(x, "smooth", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setSmoothMonotone(value: String): Self = StObject.set(x, "smoothMonotone", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setSmoothMonotoneUndefined: Self = StObject.set(x, "smoothMonotone", js.undefined)
      
      @scala.inline
      def setSmoothUndefined: Self = StObject.set(x, "smooth", js.undefined)
      
      @scala.inline
      def setStack(value: String): Self = StObject.set(x, "stack", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setStackUndefined: Self = StObject.set(x, "stack", js.undefined)
      
      @scala.inline
      def setStep(value: Boolean | String): Self = StObject.set(x, "step", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setStepUndefined: Self = StObject.set(x, "step", js.undefined)
      
      @scala.inline
      def setSymbol(value: String): Self = StObject.set(x, "symbol", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setSymbolKeepAspect(value: Boolean): Self = StObject.set(x, "symbolKeepAspect", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setSymbolKeepAspectUndefined: Self = StObject.set(x, "symbolKeepAspect", js.undefined)
      
      @scala.inline
      def setSymbolOffset(value: js.Array[_]): Self = StObject.set(x, "symbolOffset", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setSymbolOffsetUndefined: Self = StObject.set(x, "symbolOffset", js.undefined)
      
      @scala.inline
      def setSymbolOffsetVarargs(value: js.Any*): Self = StObject.set(x, "symbolOffset", js.Array(value :_*))
      
      @scala.inline
      def setSymbolRotate(value: Double): Self = StObject.set(x, "symbolRotate", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setSymbolRotateUndefined: Self = StObject.set(x, "symbolRotate", js.undefined)
      
      @scala.inline
      def setSymbolSize(value: js.Array[_] | js.Function | Double): Self = StObject.set(x, "symbolSize", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setSymbolSizeUndefined: Self = StObject.set(x, "symbolSize", js.undefined)
      
      @scala.inline
      def setSymbolSizeVarargs(value: js.Any*): Self = StObject.set(x, "symbolSize", js.Array(value :_*))
      
      @scala.inline
      def setSymbolUndefined: Self = StObject.set(x, "symbol", js.undefined)
      
      @scala.inline
      def setTooltip(value: BaseTooltip): Self = StObject.set(x, "tooltip", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setTooltipUndefined: Self = StObject.set(x, "tooltip", js.undefined)
      
      @scala.inline
      def setType(value: String): Self = StObject.set(x, "type", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setTypeUndefined: Self = StObject.set(x, "type", js.undefined)
      
      @scala.inline
      def setXAxisIndex(value: Double): Self = StObject.set(x, "xAxisIndex", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setXAxisIndexUndefined: Self = StObject.set(x, "xAxisIndex", js.undefined)
      
      @scala.inline
      def setYAxisIndex(value: Double): Self = StObject.set(x, "yAxisIndex", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setYAxisIndexUndefined: Self = StObject.set(x, "yAxisIndex", js.undefined)
      
      @scala.inline
      def setZ(value: Double): Self = StObject.set(x, "z", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setZUndefined: Self = StObject.set(x, "z", js.undefined)
      
      @scala.inline
      def setZlevel(value: Double): Self = StObject.set(x, "zlevel", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setZlevelUndefined: Self = StObject.set(x, "zlevel", js.undefined)
    }
  }
  
  /**
    * **Lines graph**
    *
    * It is used to draw the line data with the information about "from"
    * and "to"; and it is applied fot drawing the air routes on map, which
    * visualizes these routes.
    *
    * ECharts 2.x
    * uses the `markLine` to draw the migrating effect, while in ECharts
    * 3, the `lines` graph is recommended to be used.
    *
    * **Migrating example:**
    *
    * [see doc](https://echarts.apache.org/en/option.html#series-lines)
    *
    *
    * @see https://echarts.apache.org/en/option.html#series-lines
    */
  @js.native
  trait SeriesLines extends Series {
    
    /**
      * Whether to enable animation.
      *
      *
      * @default
      * "true"
      * @see https://echarts.apache.org/en/option.html#series-lines.animation
      */
    var animation: js.UndefOr[Boolean] = js.native
    
    /**
      * Delay before updating the first animation, which supports callback
      * function for different data to have different animation effect.
      *
      * For example:
      *
      * [see doc](https://echarts.apache.org/en/option.html#series-lines.lines)
      *
      * See
      * [this example](https://echarts.apache.org/examples/en/editor.html?c=bar-animation-delay)
      * for more information.
      *
      *
      * @see https://echarts.apache.org/en/option.html#series-lines.animationDelay
      */
    var animationDelay: js.UndefOr[js.Function | Double] = js.native
    
    /**
      * Delay before updating animation, which supports callback function
      * for different data to have different animation effect.
      *
      * For example:
      *
      * [see doc](https://echarts.apache.org/en/option.html#series-lines.lines)
      *
      * See
      * [this example](https://echarts.apache.org/examples/en/editor.html?c=bar-animation-delay)
      * for more information.
      *
      *
      * @see https://echarts.apache.org/en/option.html#series-lines.animationDelayUpdate
      */
    var animationDelayUpdate: js.UndefOr[js.Function | Double] = js.native
    
    /**
      * Duration of the first animation, which supports callback function
      * for different data to have different animation effect:
      *
      * [see doc](https://echarts.apache.org/en/option.html#series-lines.lines)
      *
      *
      * @default
      * 1000
      * @see https://echarts.apache.org/en/option.html#series-lines.animationDuration
      */
    var animationDuration: js.UndefOr[js.Function | Double] = js.native
    
    /**
      * Time for animation to complete, which supports callback function
      * for different data to have different animation effect:
      *
      * [see doc](https://echarts.apache.org/en/option.html#series-lines.lines)
      *
      *
      * @default
      * 300
      * @see https://echarts.apache.org/en/option.html#series-lines.animationDurationUpdate
      */
    var animationDurationUpdate: js.UndefOr[js.Function | Double] = js.native
    
    /**
      * Easing method used for the first animation.
      * Varied easing effects can be found at
      * [easing effect example](https://echarts.apache.org/examples/en/editor.html?c=line-easing)
      * .
      *
      *
      * @default
      * "cubicOut"
      * @see https://echarts.apache.org/en/option.html#series-lines.animationEasing
      */
    var animationEasing: js.UndefOr[String] = js.native
    
    /**
      * Easing method used for animation.
      *
      *
      * @default
      * "cubicOut"
      * @see https://echarts.apache.org/en/option.html#series-lines.animationEasingUpdate
      */
    var animationEasingUpdate: js.UndefOr[String] = js.native
    
    /**
      * Whether to set graphic number threshold to animation.
      * Animation will be disabled when graphic number is larger than
      * threshold.
      *
      *
      * @default
      * 2000
      * @see https://echarts.apache.org/en/option.html#series-lines.animationThreshold
      */
    var animationThreshold: js.UndefOr[Double] = js.native
    
    /**
      * The coordinate used in the series, whose options are:
      *
      * + `'cartesian2d'`
      *
      * Use a two-dimensional rectangular coordinate (also known as Cartesian
      * coordinate), with
      * [xAxisIndex](https://echarts.apache.org/en/option.html#series-lines.xAxisIndex)
      * and
      * [yAxisIndex](https://echarts.apache.org/en/option.html#series-lines.yAxisIndex)
      * to assign the corresponding axis component.
      *
      * + `'geo'`
      *
      * Use geographic coordinate, with
      * [geoIndex](https://echarts.apache.org/en/option.html#series-lines.geoIndex)
      * to assign the corresponding geographic coordinate components.
      *
      *
      * @default
      * "geo"
      * @see https://echarts.apache.org/en/option.html#series-lines.coordinateSystem
      */
    var coordinateSystem: js.UndefOr[String] = js.native
    
    /**
      * The data set of lines.
      *
      *
      * @see https://echarts.apache.org/en/option.html#series-lines.data
      */
    var data: js.UndefOr[js.Array[typingsSlinky.echarts.echarts.EChartOption.SeriesLines.DataObject]] = js.native
    
    /**
      * The setting about special effect of lines.
      *
      * **Tips:** All the graphs with trail effect should be put on a
      * individual layer, which means that
      * [zlevel](https://echarts.apache.org/en/option.html#series-lines.zlevel)
      * need to be different with others. And the animation (
      * [animation](https://echarts.apache.org/en/option.html#series-lines.animation)
      * : false) of this layer is suggested to be turned off at the meanwhile.
      * Otherwise, other graphic elements in other series and the
      * [label](https://echarts.apache.org/en/option.html#series-lines.label)
      * of animation would produce unnecessary ghosts.
      *
      *
      * @see https://echarts.apache.org/en/option.html#series-lines.effect
      */
    var effect: js.UndefOr[ConstantSpeed] = js.native
    
    /**
      * Emphasis style.
      *
      *
      * @see https://echarts.apache.org/en/option.html#series-lines.emphasis
      */
    var emphasis: js.UndefOr[`10`] = js.native
    
    /**
      * Index of
      * [geographic coordinate](https://echarts.apache.org/en/option.html#geo)
      * to combine with, which is useful for multiple geographic axes
      * in one chart.
      *
      *
      * @see https://echarts.apache.org/en/option.html#series-lines.geoIndex
      */
    var geoIndex: js.UndefOr[Double] = js.native
    
    /**
      * Component ID, not specified by default.
      * If specified, it can be used to refer the component in option
      * or API.
      *
      *
      * @see https://echarts.apache.org/en/option.html#series-lines.id
      */
    var id: js.UndefOr[String] = js.native
    
    /**
      * Label settings. Does not work when
      * [polyline](https://echarts.apache.org/en/option.html#series-lines.polyline)
      * is `true`.
      *
      *
      * @see https://echarts.apache.org/en/option.html#series-lines.label
      */
    var label: js.UndefOr[FontSize] = js.native
    
    /**
      * Whether to enable the optimization of large-scale lines graph.
      * It could be enabled when there is a particularly large number
      * of data(>=5k) .
      *
      * After being enabled,
      * [largeThreshold](https://echarts.apache.org/en/option.html#series-lines.largeThreshold)
      * can be used to indicate the minimum number for turning on the
      * optimization.
      *
      * The style of a single data item can't be customized
      *
      *
      * @default
      * "true"
      * @see https://echarts.apache.org/en/option.html#series-lines.large
      */
    var large: js.UndefOr[Boolean] = js.native
    
    /**
      * The threshold enabling the drawing optimization.
      *
      *
      * @default
      * 2000
      * @see https://echarts.apache.org/en/option.html#series-lines.largeThreshold
      */
    var largeThreshold: js.UndefOr[Double] = js.native
    
    /**
      * @see https://echarts.apache.org/en/option.html#series-lines.lineStyle
      */
    var lineStyle: js.UndefOr[ShadowColor] = js.native
    
    /**
      * Used to mark an area in chart.
      * For example, mark a time interval.
      *
      *
      * @see https://echarts.apache.org/en/option.html#series-lines.markArea
      */
    var markArea: js.UndefOr[AnimationThreshold] = js.native
    
    /**
      * Use a line in the chart to illustrate.
      *
      *
      * @see https://echarts.apache.org/en/option.html#series-lines.markLine
      */
    var markLine: js.UndefOr[AnimationEasingUpdate] = js.native
    
    /**
      * Mark point in a chart.
      *
      *
      * @see https://echarts.apache.org/en/option.html#series-lines.markPoint
      */
    var markPoint: js.UndefOr[AnimationEasing] = js.native
    
    /**
      * Series name used for displaying in
      * [tooltip](https://echarts.apache.org/en/option.html#tooltip)
      * and filtering with
      * [legend](https://echarts.apache.org/en/option.html#legend)
      * , or updaing data and configuration with `setOption`.
      *
      *
      * @see https://echarts.apache.org/en/option.html#series-lines.name
      */
    var name: js.UndefOr[String] = js.native
    
    /**
      * If draw as polyline.
      *
      * Default to be `false`. Can only draw a two end straight line.
      *
      * If it is set true,
      * [data.coords](https://echarts.apache.org/en/option.html#series-lines.data.coords)
      * can have more than two coord to draw a polyline.
      * It is useful when visualizing GPS track data. See example
      * [lines-bus](https://echarts.apache.org/examples/en/editor.html?c=lines-bmap-bus)
      * .
      *
      *
      * @see https://echarts.apache.org/en/option.html#series-lines.polyline
      */
    var polyline: js.UndefOr[Boolean] = js.native
    
    /**
      * `progressive` specifies the amount of graphic elements that can
      * be rendered within a frame (about 16ms) if "progressive rendering"
      * enabled.
      *
      * When data amount is from thousand to more than 10 million, it
      * will take too long time to render all of the graphic elements.
      * Since ECharts 4, "progressive rendering" is supported in its
      * workflow, which processes and renders data chunk by chunk alone
      * with each frame, avoiding to block the UI thread of the browser.
      *
      *
      * @default
      * 400
      * @see https://echarts.apache.org/en/option.html#series-lines.progressive
      */
    var progressive: js.UndefOr[Double] = js.native
    
    /**
      * If current data amount is over the threshold, "progressive rendering"
      * is enabled.
      *
      *
      * @default
      * 3000
      * @see https://echarts.apache.org/en/option.html#series-lines.progressiveThreshold
      */
    var progressiveThreshold: js.UndefOr[Double] = js.native
    
    /**
      * Whether to ignore mouse events.
      * Default value is false, for triggering and responding to mouse
      * events.
      *
      *
      * @see https://echarts.apache.org/en/option.html#series-lines.silent
      */
    var silent: js.UndefOr[Boolean] = js.native
    
    /**
      * Symbol type at the two ends of the line.
      * It can be an array for two ends, or assigned seperately. See
      * [data.symbol](https://echarts.apache.org/en/option.html#series-line.markLine.data.0.symbol)
      * for more format information.
      *
      *
      * @default
      * "none"
      * @see https://echarts.apache.org/en/option.html#series-lines.symbol
      */
    var symbol: js.UndefOr[js.Array[_] | String] = js.native
    
    /**
      * Symbol size at the two ends of the line.
      * It can be an array for two ends, or assigned seperately.
      *
      * **Attention:** You cannot assgin width and height seperately
      * as normal `symbolSize`.
      *
      *
      * @default
      * 10
      * @see https://echarts.apache.org/en/option.html#series-lines.symbolSize
      */
    var symbolSize: js.UndefOr[js.Array[_] | Double] = js.native
    
    /**
      * @default
      * "lines"
      * @see https://echarts.apache.org/en/option.html#series-lines.type
      */
    var `type`: js.UndefOr[String] = js.native
    
    /**
      * Index of
      * [x axis](https://echarts.apache.org/en/option.html#xAxis)
      * to combine with, which is useful for multiple x axes in one chart.
      *
      *
      * @see https://echarts.apache.org/en/option.html#series-lines.xAxisIndex
      */
    var xAxisIndex: js.UndefOr[Double] = js.native
    
    /**
      * Index of
      * [y axis](https://echarts.apache.org/en/option.html#yAxis)
      * to combine with, which is useful for multiple y axes in one chart.
      *
      *
      * @see https://echarts.apache.org/en/option.html#series-lines.yAxisIndex
      */
    var yAxisIndex: js.UndefOr[Double] = js.native
    
    /**
      * `z` value of all graghical elements in lines graph, which controls
      * order of drawing graphical components.
      * Components with smaller `z` values may be overwritten by those
      * with larger `z` values.
      *
      * `z` has a lower priority to `zlevel`, and will not create new
      * Canvas.
      *
      *
      * @default
      * 2
      * @see https://echarts.apache.org/en/option.html#series-lines.z
      */
    var z: js.UndefOr[Double] = js.native
    
    /**
      * `zlevel` value of all graghical elements in lines graph.
      *
      * `zlevel` is used to make layers with Canvas.
      * Graphical elements with different `zlevel` values will be placed
      * in different Canvases, which is a common optimization technique.
      * We can put those frequently changed elements (like those with
      * animations) to a seperate `zlevel`.
      * Notice that too many Canvases will increase memory cost, and
      * should be used carefully on mobile phones to avoid crash.
      *
      * Canvases with bigger `zlevel` will be placed on Canvases with
      * smaller `zlevel`.
      *
      *
      * @see https://echarts.apache.org/en/option.html#series-lines.zlevel
      */
    var zlevel: js.UndefOr[Double] = js.native
  }
  object SeriesLines {
    
    @scala.inline
    def apply(): SeriesLines = {
      val __obj = js.Dynamic.literal()
      __obj.asInstanceOf[SeriesLines]
    }
    
    @js.native
    trait DataObject extends StObject {
      
      /**
        * An array includes two ore more than two coordinates.
        * Each coordinate could be `[x, y]` in
        * [rectangular coordinate](https://echarts.apache.org/en/option.html#grid)
        * and `[lng, lat]` in
        * [geographic coordinate](https://echarts.apache.org/en/option.html#geo)
        * .
        *
        *
        * @see https://echarts.apache.org/en/option.html#series-lines.data.coords
        */
      var coords: js.UndefOr[js.Array[_]] = js.native
      
      /**
        * @see https://echarts.apache.org/en/option.html#series-lines.data.emphasis
        */
      var emphasis: js.UndefOr[`11`] = js.native
      
      /**
        * @see https://echarts.apache.org/en/option.html#series-lines.data.label
        */
      var label: js.UndefOr[FontSize] = js.native
      
      /**
        * The line style of this data item.
        *
        *
        * @see https://echarts.apache.org/en/option.html#series-lines.data.lineStyle
        */
      var lineStyle: js.UndefOr[ShadowColor] = js.native
      
      /**
        * the name of data.
        *
        *
        * @see https://echarts.apache.org/en/option.html#series-lines.data.name
        */
      var name: js.UndefOr[String] = js.native
    }
    object DataObject {
      
      @scala.inline
      def apply(): typingsSlinky.echarts.echarts.EChartOption.SeriesLines.DataObject = {
        val __obj = js.Dynamic.literal()
        __obj.asInstanceOf[typingsSlinky.echarts.echarts.EChartOption.SeriesLines.DataObject]
      }
      
      @scala.inline
      implicit class DataObjectMutableBuilder[Self <: typingsSlinky.echarts.echarts.EChartOption.SeriesLines.DataObject] (val x: Self) extends AnyVal {
        
        @scala.inline
        def setCoords(value: js.Array[_]): Self = StObject.set(x, "coords", value.asInstanceOf[js.Any])
        
        @scala.inline
        def setCoordsUndefined: Self = StObject.set(x, "coords", js.undefined)
        
        @scala.inline
        def setCoordsVarargs(value: js.Any*): Self = StObject.set(x, "coords", js.Array(value :_*))
        
        @scala.inline
        def setEmphasis(value: `11`): Self = StObject.set(x, "emphasis", value.asInstanceOf[js.Any])
        
        @scala.inline
        def setEmphasisUndefined: Self = StObject.set(x, "emphasis", js.undefined)
        
        @scala.inline
        def setLabel(value: FontSize): Self = StObject.set(x, "label", value.asInstanceOf[js.Any])
        
        @scala.inline
        def setLabelUndefined: Self = StObject.set(x, "label", js.undefined)
        
        @scala.inline
        def setLineStyle(value: ShadowColor): Self = StObject.set(x, "lineStyle", value.asInstanceOf[js.Any])
        
        @scala.inline
        def setLineStyleUndefined: Self = StObject.set(x, "lineStyle", js.undefined)
        
        @scala.inline
        def setName(value: String): Self = StObject.set(x, "name", value.asInstanceOf[js.Any])
        
        @scala.inline
        def setNameUndefined: Self = StObject.set(x, "name", js.undefined)
      }
    }
    
    @scala.inline
    implicit class SeriesLinesMutableBuilder[Self <: SeriesLines] (val x: Self) extends AnyVal {
      
      @scala.inline
      def setAnimation(value: Boolean): Self = StObject.set(x, "animation", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setAnimationDelay(value: js.Function | Double): Self = StObject.set(x, "animationDelay", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setAnimationDelayUndefined: Self = StObject.set(x, "animationDelay", js.undefined)
      
      @scala.inline
      def setAnimationDelayUpdate(value: js.Function | Double): Self = StObject.set(x, "animationDelayUpdate", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setAnimationDelayUpdateUndefined: Self = StObject.set(x, "animationDelayUpdate", js.undefined)
      
      @scala.inline
      def setAnimationDuration(value: js.Function | Double): Self = StObject.set(x, "animationDuration", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setAnimationDurationUndefined: Self = StObject.set(x, "animationDuration", js.undefined)
      
      @scala.inline
      def setAnimationDurationUpdate(value: js.Function | Double): Self = StObject.set(x, "animationDurationUpdate", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setAnimationDurationUpdateUndefined: Self = StObject.set(x, "animationDurationUpdate", js.undefined)
      
      @scala.inline
      def setAnimationEasing(value: String): Self = StObject.set(x, "animationEasing", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setAnimationEasingUndefined: Self = StObject.set(x, "animationEasing", js.undefined)
      
      @scala.inline
      def setAnimationEasingUpdate(value: String): Self = StObject.set(x, "animationEasingUpdate", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setAnimationEasingUpdateUndefined: Self = StObject.set(x, "animationEasingUpdate", js.undefined)
      
      @scala.inline
      def setAnimationThreshold(value: Double): Self = StObject.set(x, "animationThreshold", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setAnimationThresholdUndefined: Self = StObject.set(x, "animationThreshold", js.undefined)
      
      @scala.inline
      def setAnimationUndefined: Self = StObject.set(x, "animation", js.undefined)
      
      @scala.inline
      def setCoordinateSystem(value: String): Self = StObject.set(x, "coordinateSystem", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setCoordinateSystemUndefined: Self = StObject.set(x, "coordinateSystem", js.undefined)
      
      @scala.inline
      def setData(value: js.Array[typingsSlinky.echarts.echarts.EChartOption.SeriesLines.DataObject]): Self = StObject.set(x, "data", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setDataUndefined: Self = StObject.set(x, "data", js.undefined)
      
      @scala.inline
      def setDataVarargs(value: typingsSlinky.echarts.echarts.EChartOption.SeriesLines.DataObject*): Self = StObject.set(x, "data", js.Array(value :_*))
      
      @scala.inline
      def setEffect(value: ConstantSpeed): Self = StObject.set(x, "effect", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setEffectUndefined: Self = StObject.set(x, "effect", js.undefined)
      
      @scala.inline
      def setEmphasis(value: `10`): Self = StObject.set(x, "emphasis", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setEmphasisUndefined: Self = StObject.set(x, "emphasis", js.undefined)
      
      @scala.inline
      def setGeoIndex(value: Double): Self = StObject.set(x, "geoIndex", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setGeoIndexUndefined: Self = StObject.set(x, "geoIndex", js.undefined)
      
      @scala.inline
      def setId(value: String): Self = StObject.set(x, "id", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setIdUndefined: Self = StObject.set(x, "id", js.undefined)
      
      @scala.inline
      def setLabel(value: FontSize): Self = StObject.set(x, "label", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setLabelUndefined: Self = StObject.set(x, "label", js.undefined)
      
      @scala.inline
      def setLarge(value: Boolean): Self = StObject.set(x, "large", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setLargeThreshold(value: Double): Self = StObject.set(x, "largeThreshold", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setLargeThresholdUndefined: Self = StObject.set(x, "largeThreshold", js.undefined)
      
      @scala.inline
      def setLargeUndefined: Self = StObject.set(x, "large", js.undefined)
      
      @scala.inline
      def setLineStyle(value: ShadowColor): Self = StObject.set(x, "lineStyle", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setLineStyleUndefined: Self = StObject.set(x, "lineStyle", js.undefined)
      
      @scala.inline
      def setMarkArea(value: AnimationThreshold): Self = StObject.set(x, "markArea", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setMarkAreaUndefined: Self = StObject.set(x, "markArea", js.undefined)
      
      @scala.inline
      def setMarkLine(value: AnimationEasingUpdate): Self = StObject.set(x, "markLine", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setMarkLineUndefined: Self = StObject.set(x, "markLine", js.undefined)
      
      @scala.inline
      def setMarkPoint(value: AnimationEasing): Self = StObject.set(x, "markPoint", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setMarkPointUndefined: Self = StObject.set(x, "markPoint", js.undefined)
      
      @scala.inline
      def setName(value: String): Self = StObject.set(x, "name", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setNameUndefined: Self = StObject.set(x, "name", js.undefined)
      
      @scala.inline
      def setPolyline(value: Boolean): Self = StObject.set(x, "polyline", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setPolylineUndefined: Self = StObject.set(x, "polyline", js.undefined)
      
      @scala.inline
      def setProgressive(value: Double): Self = StObject.set(x, "progressive", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setProgressiveThreshold(value: Double): Self = StObject.set(x, "progressiveThreshold", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setProgressiveThresholdUndefined: Self = StObject.set(x, "progressiveThreshold", js.undefined)
      
      @scala.inline
      def setProgressiveUndefined: Self = StObject.set(x, "progressive", js.undefined)
      
      @scala.inline
      def setSilent(value: Boolean): Self = StObject.set(x, "silent", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setSilentUndefined: Self = StObject.set(x, "silent", js.undefined)
      
      @scala.inline
      def setSymbol(value: js.Array[_] | String): Self = StObject.set(x, "symbol", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setSymbolSize(value: js.Array[_] | Double): Self = StObject.set(x, "symbolSize", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setSymbolSizeUndefined: Self = StObject.set(x, "symbolSize", js.undefined)
      
      @scala.inline
      def setSymbolSizeVarargs(value: js.Any*): Self = StObject.set(x, "symbolSize", js.Array(value :_*))
      
      @scala.inline
      def setSymbolUndefined: Self = StObject.set(x, "symbol", js.undefined)
      
      @scala.inline
      def setSymbolVarargs(value: js.Any*): Self = StObject.set(x, "symbol", js.Array(value :_*))
      
      @scala.inline
      def setType(value: String): Self = StObject.set(x, "type", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setTypeUndefined: Self = StObject.set(x, "type", js.undefined)
      
      @scala.inline
      def setXAxisIndex(value: Double): Self = StObject.set(x, "xAxisIndex", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setXAxisIndexUndefined: Self = StObject.set(x, "xAxisIndex", js.undefined)
      
      @scala.inline
      def setYAxisIndex(value: Double): Self = StObject.set(x, "yAxisIndex", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setYAxisIndexUndefined: Self = StObject.set(x, "yAxisIndex", js.undefined)
      
      @scala.inline
      def setZ(value: Double): Self = StObject.set(x, "z", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setZUndefined: Self = StObject.set(x, "z", js.undefined)
      
      @scala.inline
      def setZlevel(value: Double): Self = StObject.set(x, "zlevel", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setZlevelUndefined: Self = StObject.set(x, "zlevel", js.undefined)
    }
  }
  
  /**
    * **Map.**
    *
    * Map is maily used in the visulization of geographic area data, which
    * can be used with
    * [visualMap](https://echarts.apache.org/en/option.html#visualMap)
    * component to visualize the datas such as population distribution
    * density in diffrent areas.
    *
    * Series of same
    * [map type](https://echarts.apache.org/en/option.html#series-map.map)
    * will show in one map.
    * At this point, the configuration of the first series will be used
    * for the map configuration.
    *
    * **Example:**
    *
    * [see doc](https://echarts.apache.org/en/option.html#series-map)
    *
    *
    * @see https://echarts.apache.org/en/option.html#series-map
    */
  @js.native
  trait SeriesMap extends Series {
    
    /**
      * Used to scale aspect of geo.
      *
      * The final aspect is calculated by: `geoBoundingRect.width
      * / geoBoundingRect.height * aspectScale`.
      *
      *
      * @default
      * 0.75
      * @see https://echarts.apache.org/en/option.html#series-map.aspectScale
      */
    var aspectScale: js.UndefOr[Double] = js.native
    
    /**
      * Distance between component and the bottom side of the container.
      *
      * `bottom` value can be instant pixel value like `20`; it can also
      * be percentage value relative to container width like `'20%'`.
      *
      * Adaptive by default.
      *
      *
      * @default
      * "auto"
      * @see https://echarts.apache.org/en/option.html#series-map.bottom
      */
    var bottom: js.UndefOr[Double | String] = js.native
    
    /**
      * Two dimension array.
      * Define coord of left-top, right-bottom in layout box.
      *
      * [see doc](https://echarts.apache.org/en/option.html#series-map.map)
      *
      *
      * @see https://echarts.apache.org/en/option.html#series-map.boundingCoords
      */
    var boundingCoords: js.UndefOr[js.Array[_]] = js.native
    
    /**
      * Center of current view-port, in longitude and latitude.
      *
      * Example:
      *
      * ```
      * center: [115.97, 29.71]
      *
      * ```
      *
      *
      * @see https://echarts.apache.org/en/option.html#series-map.center
      */
    var center: js.UndefOr[js.Array[_]] = js.native
    
    /**
      * Data array of map series, which can be a single data value, like:
      *
      * ```
      * [12, 34, 56, 10, 23]
      *
      * ```
      *
      * Or, if need extra dimensions for components like
      * [visualMap](https://echarts.apache.org/en/option.html#visualMap)
      * to map to graphic attributes like color, it can also be in the
      * form of array. For example:
      *
      * ```
      * [[12, 14], [34, 50], [56, 30], [10, 15], [23, 10]]
      *
      * ```
      *
      * In this case, we can assgin the second value in each arrary item
      * to
      * [visualMap](https://echarts.apache.org/en/option.html#visualMap)
      * component.
      *
      * More likely, we need to assign name to each data item, in which
      * case each item should be an object:
      *
      * [see doc](https://echarts.apache.org/en/option.html#series-map.map)
      *
      * Each data item can be further custerized:
      *
      * [see doc](https://echarts.apache.org/en/option.html#series-map.map)
      *
      *
      * @see https://echarts.apache.org/en/option.html#series-map.data
      */
    var data: js.UndefOr[
        js.Array[Double | typingsSlinky.echarts.echarts.EChartOption.SeriesMap.DataObject]
      ] = js.native
    
    /**
      * If
      * [series.data](https://echarts.apache.org/en/option.html#series.data)
      * is not specified, and
      * [dataset](https://echarts.apache.org/en/option.html#dataset)
      * exists, the series will use `dataset`.
      * `datasetIndex` specifies which dataset will be used.
      *
      *
      * @see https://echarts.apache.org/en/option.html#series-map.datasetIndex
      */
    var datasetIndex: js.UndefOr[Double] = js.native
    
    /**
      * In default case, map series create exclusive `geo` component
      * for themselves.
      * But `geoIndex` can be used to specify an outer
      * [geo component](https://echarts.apache.org/en/option.html#geo)
      * , which can be shared with other series like
      * [pie](https://echarts.apache.org/en/option.html#series-pie)
      * . Moreover, the region color of the outer
      * [geo component](https://echarts.apache.org/en/option.html#geo)
      * can be controlled by the map series (via
      * [visualMap](https://echarts.apache.org/en/option.html#visualMap)
      * ).
      *
      * When `geoIndex` specified,
      * [series-map.map](https://echarts.apache.org/en/option.html#series-map.map)
      * other style configurations like
      * [series-map.itemStyle](https://echarts.apache.org/en/option.html#series-map.itemStyle)
      * will not work, but cooresponding configurations in
      * [geo component](https://echarts.apache.org/en/option.html#geo)
      * will be used.
      *
      * For example:
      *
      * [see doc](https://echarts.apache.org/en/option.html#series-map.map)
      *
      *
      * @see https://echarts.apache.org/en/option.html#series-map.geoIndex
      */
    var geoIndex: js.UndefOr[Double] = js.native
    
    /**
      * Component ID, not specified by default.
      * If specified, it can be used to refer the component in option
      * or API.
      *
      *
      * @see https://echarts.apache.org/en/option.html#series-map.id
      */
    var id: js.UndefOr[String] = js.native
    
    /**
      * Graphic style of Map Area Border, `emphasis` is the style when
      * it is highlighted, like being hovered by mouse, or highlighted
      * via legend connect.
      *
      *
      * @see https://echarts.apache.org/en/option.html#series-map.itemStyle
      */
    var itemStyle: js.UndefOr[AreaColorEmphasis] = js.native
    
    /**
      * Text label of , to explain some data information about graphic
      * item like value, name and so on.
      * `label` is placed under `itemStyle` in ECharts 2.x.
      * In ECharts 3, to make the configuration structure flatter, `label`is
      * taken to be at the same level with `itemStyle`, and has `emphasis`
      * as `itemStyle` does.
      *
      *
      * @see https://echarts.apache.org/en/option.html#series-map.label
      */
    var label: js.UndefOr[BorderWidth] = js.native
    
    /**
      * `layoutCenter` and `layoutSize` provides layout strategy other
      * than `left/right/top/bottom/width/height`.
      *
      * When using `left/right/top/bottom/width/height`, it is hard to
      * put the map inside a box area with a fixed width-height ratio.
      * In this case, `layoutCenter` attribute can be used to define
      * the center position of map, and `layoutSize` can be used to define
      * the size of map. For example:
      *
      * [see doc](https://echarts.apache.org/en/option.html#series-map.map)
      *
      * After setting these two values, `left/right/top/bottom/width/height`
      * becomes invalid.
      *
      *
      * @see https://echarts.apache.org/en/option.html#series-map.layoutCenter
      */
    var layoutCenter: js.UndefOr[js.Array[_]] = js.native
    
    /**
      * Size of map, see `layoutCenter` for more information.
      * Percentage relative to screen width, and absolute pixel values
      * are supported.
      *
      *
      * @see https://echarts.apache.org/en/option.html#series-map.layoutSize
      */
    var layoutSize: js.UndefOr[Double | String] = js.native
    
    /**
      * Distance between component and the left side of the container.
      *
      * `left` value can be instant pixel value like `20`; it can also
      * be percentage value relative to container width like `'20%'`;
      * and it can also be `'left'`, `'center'`, or `'right'`.
      *
      * If the `left` value is set to be `'left'`, `'center'`, or `'right'`,
      * then the component will be aligned automatically based on position.
      *
      *
      * @default
      * "auto"
      * @see https://echarts.apache.org/en/option.html#series-map.left
      */
    var left: js.UndefOr[Double | String] = js.native
    
    /**
      * Map charts.
      *
      * Due to the increase of fineness of map, ECharts 3 doesn't include
      * map data by default for package size consideration.
      * You may find map files you need on
      * [map download page](http://ecomfe.github.io/echarts-builder-web/map3.html
      * )
      * and then include and register them in ECharts.
      *
      * Two formats of map data are provided in ECharts, one of which
      * can be included in `<script>` tag as JavaScript file, and the
      * other of is in JSON format and should be loaded using AJAX.
      * Map name and data will be loaded automatically once the JavaScript
      * file is loaded, while in the JSON form, you have to assign name
      * explicitly.
      *
      * Here are examples of these two types:
      *
      * **JavaScript importing example**
      *
      * [see doc](https://echarts.apache.org/en/option.html#series-map.map)
      *
      * **JSON importing example**
      *
      * [see doc](https://echarts.apache.org/en/option.html#series-map.map)
      *
      * ECharts uses
      * [geoJSON](http://geojson.org/)
      * format as map outline.
      * Besides the methods introduced above, you can also get
      * [geoJSON](http://geojson.org/)
      * data through in other methods if you like and register it in
      * ECharts. Reference to
      * [USA Population Estimates](https://echarts.apache.org/examples/en/editor.html?c=map-usa)
      * for more information.
      *
      *
      * @default
      * ''
      * @see https://echarts.apache.org/en/option.html#series-map.map
      */
    var map: js.UndefOr[String] = js.native
    
    /**
      * Value of multiple series with the same
      * [map type](https://echarts.apache.org/en/option.html#series-map.map)
      * can use this option to get a statistical value.
      *
      * Supported statistical methods:
      *
      * + `'sum'`
      * + `'average'`
      * + `'max'`
      * + `'min'`
      *
      *
      * @default
      * "sum"
      * @see https://echarts.apache.org/en/option.html#series-map.mapValueCalculation
      */
    var mapValueCalculation: js.UndefOr[String] = js.native
    
    /**
      * Used to mark an area in chart.
      * For example, mark a time interval.
      *
      *
      * @see https://echarts.apache.org/en/option.html#series-map.markArea
      */
    var markArea: js.UndefOr[AnimationAnimationDelay] = js.native
    
    /**
      * Use a line in the chart to illustrate.
      *
      *
      * @see https://echarts.apache.org/en/option.html#series-map.markLine
      */
    var markLine: js.UndefOr[Precision] = js.native
    
    /**
      * Mark point in a chart.
      *
      *
      * @see https://echarts.apache.org/en/option.html#series-map.markPoint
      */
    var markPoint: js.UndefOr[Silent] = js.native
    
    /**
      * Series name used for displaying in
      * [tooltip](https://echarts.apache.org/en/option.html#tooltip)
      * and filtering with
      * [legend](https://echarts.apache.org/en/option.html#legend)
      * , or updaing data and configuration with `setOption`.
      *
      *
      * @see https://echarts.apache.org/en/option.html#series-map.name
      */
    var name: js.UndefOr[String] = js.native
    
    /**
      * Name mapping for customized areas. For example:
      *
      * ```
      * {
      * 'China' : '中国'
      * }
      *
      * ```
      *
      *
      * @see https://echarts.apache.org/en/option.html#series-map.nameMap
      */
    var nameMap: js.UndefOr[js.Object] = js.native
    
    /**
      * Distance between component and the right side of the container.
      *
      * `right` value can be instant pixel value like `20`; it can also
      * be percentage value relative to container width like `'20%'`.
      *
      * Adaptive by default.
      *
      *
      * @default
      * "auto"
      * @see https://echarts.apache.org/en/option.html#series-map.right
      */
    var right: js.UndefOr[Double | String] = js.native
    
    /**
      * Whether to enable mouse zooming and translating.
      * `false` by default.
      * If either zooming or translating is wanted, it can be set to
      * `'scale'` or `'move'`.
      * Otherwise, set it to be `true` to enable both.
      *
      *
      * @see https://echarts.apache.org/en/option.html#series-map.roam
      */
    var roam: js.UndefOr[Boolean | String] = js.native
    
    /**
      * Limit of scaling, with `min` and `max`. `1` by default.
      *
      *
      * @see https://echarts.apache.org/en/option.html#series-map.scaleLimit
      */
    var scaleLimit: js.UndefOr[Min] = js.native
    
    /**
      * Selected mode decides whether multiple selecting is supported.
      * By default, `false` is used for disabling selection.
      * Its value can also be `'single'` for selecting single area, or
      * `'multiple'` for selecting multiple areas.
      *
      *
      * @see https://echarts.apache.org/en/option.html#series-map.selectedMode
      */
    var selectedMode: js.UndefOr[Boolean | String] = js.native
    
    /**
      * When
      * [dataset](https://echarts.apache.org/en/option.html#dataset)
      * is used, `seriesLayoutBy` specifies whether the column or the
      * row of `dataset` is mapped to the series, namely, the series
      * is "layout" on columns or rows. Optional values:
      *
      * + 'column': by default, the columns of `dataset` are mapped the
      * series. In this case, each column represents a dimension.
      * + 'row'：the rows of `dataset` are mapped to the series.
      * In this case, each row represents a dimension.
      *
      * Check this
      * [example](https://echarts.apache.org/examples/en/editor.html?c=dataset-series-layout-by)
      * .
      *
      *
      * @default
      * "column"
      * @see https://echarts.apache.org/en/option.html#series-map.seriesLayoutBy
      */
    var seriesLayoutBy: js.UndefOr[String] = js.native
    
    /**
      * Show the symbol in related area (dot of series symbol).
      * Available when
      * [legend](https://echarts.apache.org/en/option.html#legend)
      * component exists.
      *
      *
      * @see https://echarts.apache.org/en/option.html#series-map.showLegendSymbol
      */
    var showLegendSymbol: js.UndefOr[Boolean] = js.native
    
    /**
      * Whether to ignore mouse events.
      * Default value is false, for triggering and responding to mouse
      * events.
      *
      *
      * @see https://echarts.apache.org/en/option.html#series-map.silent
      */
    var silent: js.UndefOr[Boolean] = js.native
    
    /**
      * tooltip settings in this series.
      *
      *
      * @see https://echarts.apache.org/en/option.html#series-map.tooltip
      */
    var tooltip: js.UndefOr[BaseTooltip] = js.native
    
    /**
      * Distance between component and the top side of the container.
      *
      * `top` value can be instant pixel value like `20`; it can also
      * be percentage value relative to container width like `'20%'`;
      * and it can also be `'top'`, `'middle'`, or `'bottom'`.
      *
      * If the `left` value is set to be `'top'`, `'middle'`, or `'bottom'`,
      * then the component will be aligned automatically based on position.
      *
      *
      * @default
      * "auto"
      * @see https://echarts.apache.org/en/option.html#series-map.top
      */
    var top: js.UndefOr[Double | String] = js.native
    
    /**
      * @default
      * "map"
      * @see https://echarts.apache.org/en/option.html#series-map.type
      */
    var `type`: js.UndefOr[String] = js.native
    
    /**
      * `z` value of all graghical elements in , which controls order
      * of drawing graphical components.
      * Components with smaller `z` values may be overwritten by those
      * with larger `z` values.
      *
      * `z` has a lower priority to `zlevel`, and will not create new
      * Canvas.
      *
      *
      * @default
      * 2
      * @see https://echarts.apache.org/en/option.html#series-map.z
      */
    var z: js.UndefOr[Double] = js.native
    
    /**
      * `zlevel` value of all graghical elements in .
      *
      * `zlevel` is used to make layers with Canvas.
      * Graphical elements with different `zlevel` values will be placed
      * in different Canvases, which is a common optimization technique.
      * We can put those frequently changed elements (like those with
      * animations) to a seperate `zlevel`.
      * Notice that too many Canvases will increase memory cost, and
      * should be used carefully on mobile phones to avoid crash.
      *
      * Canvases with bigger `zlevel` will be placed on Canvases with
      * smaller `zlevel`.
      *
      *
      * @see https://echarts.apache.org/en/option.html#series-map.zlevel
      */
    var zlevel: js.UndefOr[Double] = js.native
    
    /**
      * Zoom rate of current view-port.
      *
      *
      * @default
      * 1
      * @see https://echarts.apache.org/en/option.html#series-map.zoom
      */
    var zoom: js.UndefOr[Double] = js.native
  }
  object SeriesMap {
    
    @scala.inline
    def apply(): SeriesMap = {
      val __obj = js.Dynamic.literal()
      __obj.asInstanceOf[SeriesMap]
    }
    
    @js.native
    trait DataObject extends StObject {
      
      /**
        * @see https://echarts.apache.org/en/option.html#series-map.data.emphasis
        */
      var emphasis: js.UndefOr[`15`] = js.native
      
      /**
        * Style of item polygon
        *
        *
        * @see https://echarts.apache.org/en/option.html#series-map.data.itemStyle
        */
      var itemStyle: js.UndefOr[`14`] = js.native
      
      /**
        * Text label of , to explain some data information about graphic
        * item like value, name and so on.
        * `label` is placed under `itemStyle` in ECharts 2.x.
        * In ECharts 3, to make the configuration structure flatter,
        * `label`is taken to be at the same level with `itemStyle`,
        * and has `emphasis` as `itemStyle` does.
        *
        *
        * @see https://echarts.apache.org/en/option.html#series-map.data.label
        */
      var label: js.UndefOr[Rotate] = js.native
      
      /**
        * The name of the map area where the data belongs to, such
        * as `'China'` or `'United Kingdom'` .
        *
        *
        * @see https://echarts.apache.org/en/option.html#series-map.data.name
        */
      var name: js.UndefOr[String] = js.native
      
      /**
        * Whether the are selected.
        *
        *
        * @see https://echarts.apache.org/en/option.html#series-map.data.selected
        */
      var selected: js.UndefOr[Boolean] = js.native
      
      /**
        * tooltip settings in this series data.
        *
        *
        * @see https://echarts.apache.org/en/option.html#series-map.data.tooltip
        */
      var tooltip: js.UndefOr[BaseTooltip] = js.native
      
      /**
        * The numerical value of this area.
        *
        *
        * @see https://echarts.apache.org/en/option.html#series-map.data.value
        */
      var value: js.UndefOr[Double] = js.native
    }
    object DataObject {
      
      @scala.inline
      def apply(): typingsSlinky.echarts.echarts.EChartOption.SeriesMap.DataObject = {
        val __obj = js.Dynamic.literal()
        __obj.asInstanceOf[typingsSlinky.echarts.echarts.EChartOption.SeriesMap.DataObject]
      }
      
      @scala.inline
      implicit class DataObjectMutableBuilder[Self <: typingsSlinky.echarts.echarts.EChartOption.SeriesMap.DataObject] (val x: Self) extends AnyVal {
        
        @scala.inline
        def setEmphasis(value: `15`): Self = StObject.set(x, "emphasis", value.asInstanceOf[js.Any])
        
        @scala.inline
        def setEmphasisUndefined: Self = StObject.set(x, "emphasis", js.undefined)
        
        @scala.inline
        def setItemStyle(value: `14`): Self = StObject.set(x, "itemStyle", value.asInstanceOf[js.Any])
        
        @scala.inline
        def setItemStyleUndefined: Self = StObject.set(x, "itemStyle", js.undefined)
        
        @scala.inline
        def setLabel(value: Rotate): Self = StObject.set(x, "label", value.asInstanceOf[js.Any])
        
        @scala.inline
        def setLabelUndefined: Self = StObject.set(x, "label", js.undefined)
        
        @scala.inline
        def setName(value: String): Self = StObject.set(x, "name", value.asInstanceOf[js.Any])
        
        @scala.inline
        def setNameUndefined: Self = StObject.set(x, "name", js.undefined)
        
        @scala.inline
        def setSelected(value: Boolean): Self = StObject.set(x, "selected", value.asInstanceOf[js.Any])
        
        @scala.inline
        def setSelectedUndefined: Self = StObject.set(x, "selected", js.undefined)
        
        @scala.inline
        def setTooltip(value: BaseTooltip): Self = StObject.set(x, "tooltip", value.asInstanceOf[js.Any])
        
        @scala.inline
        def setTooltipUndefined: Self = StObject.set(x, "tooltip", js.undefined)
        
        @scala.inline
        def setValue(value: Double): Self = StObject.set(x, "value", value.asInstanceOf[js.Any])
        
        @scala.inline
        def setValueUndefined: Self = StObject.set(x, "value", js.undefined)
      }
    }
    
    @scala.inline
    implicit class SeriesMapMutableBuilder[Self <: SeriesMap] (val x: Self) extends AnyVal {
      
      @scala.inline
      def setAspectScale(value: Double): Self = StObject.set(x, "aspectScale", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setAspectScaleUndefined: Self = StObject.set(x, "aspectScale", js.undefined)
      
      @scala.inline
      def setBottom(value: Double | String): Self = StObject.set(x, "bottom", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setBottomUndefined: Self = StObject.set(x, "bottom", js.undefined)
      
      @scala.inline
      def setBoundingCoords(value: js.Array[_]): Self = StObject.set(x, "boundingCoords", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setBoundingCoordsUndefined: Self = StObject.set(x, "boundingCoords", js.undefined)
      
      @scala.inline
      def setBoundingCoordsVarargs(value: js.Any*): Self = StObject.set(x, "boundingCoords", js.Array(value :_*))
      
      @scala.inline
      def setCenter(value: js.Array[_]): Self = StObject.set(x, "center", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setCenterUndefined: Self = StObject.set(x, "center", js.undefined)
      
      @scala.inline
      def setCenterVarargs(value: js.Any*): Self = StObject.set(x, "center", js.Array(value :_*))
      
      @scala.inline
      def setData(value: js.Array[Double | typingsSlinky.echarts.echarts.EChartOption.SeriesMap.DataObject]): Self = StObject.set(x, "data", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setDataUndefined: Self = StObject.set(x, "data", js.undefined)
      
      @scala.inline
      def setDataVarargs(value: (Double | typingsSlinky.echarts.echarts.EChartOption.SeriesMap.DataObject)*): Self = StObject.set(x, "data", js.Array(value :_*))
      
      @scala.inline
      def setDatasetIndex(value: Double): Self = StObject.set(x, "datasetIndex", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setDatasetIndexUndefined: Self = StObject.set(x, "datasetIndex", js.undefined)
      
      @scala.inline
      def setGeoIndex(value: Double): Self = StObject.set(x, "geoIndex", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setGeoIndexUndefined: Self = StObject.set(x, "geoIndex", js.undefined)
      
      @scala.inline
      def setId(value: String): Self = StObject.set(x, "id", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setIdUndefined: Self = StObject.set(x, "id", js.undefined)
      
      @scala.inline
      def setItemStyle(value: AreaColorEmphasis): Self = StObject.set(x, "itemStyle", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setItemStyleUndefined: Self = StObject.set(x, "itemStyle", js.undefined)
      
      @scala.inline
      def setLabel(value: BorderWidth): Self = StObject.set(x, "label", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setLabelUndefined: Self = StObject.set(x, "label", js.undefined)
      
      @scala.inline
      def setLayoutCenter(value: js.Array[_]): Self = StObject.set(x, "layoutCenter", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setLayoutCenterUndefined: Self = StObject.set(x, "layoutCenter", js.undefined)
      
      @scala.inline
      def setLayoutCenterVarargs(value: js.Any*): Self = StObject.set(x, "layoutCenter", js.Array(value :_*))
      
      @scala.inline
      def setLayoutSize(value: Double | String): Self = StObject.set(x, "layoutSize", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setLayoutSizeUndefined: Self = StObject.set(x, "layoutSize", js.undefined)
      
      @scala.inline
      def setLeft(value: Double | String): Self = StObject.set(x, "left", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setLeftUndefined: Self = StObject.set(x, "left", js.undefined)
      
      @scala.inline
      def setMap(value: String): Self = StObject.set(x, "map", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setMapUndefined: Self = StObject.set(x, "map", js.undefined)
      
      @scala.inline
      def setMapValueCalculation(value: String): Self = StObject.set(x, "mapValueCalculation", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setMapValueCalculationUndefined: Self = StObject.set(x, "mapValueCalculation", js.undefined)
      
      @scala.inline
      def setMarkArea(value: AnimationAnimationDelay): Self = StObject.set(x, "markArea", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setMarkAreaUndefined: Self = StObject.set(x, "markArea", js.undefined)
      
      @scala.inline
      def setMarkLine(value: Precision): Self = StObject.set(x, "markLine", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setMarkLineUndefined: Self = StObject.set(x, "markLine", js.undefined)
      
      @scala.inline
      def setMarkPoint(value: Silent): Self = StObject.set(x, "markPoint", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setMarkPointUndefined: Self = StObject.set(x, "markPoint", js.undefined)
      
      @scala.inline
      def setName(value: String): Self = StObject.set(x, "name", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setNameMap(value: js.Object): Self = StObject.set(x, "nameMap", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setNameMapUndefined: Self = StObject.set(x, "nameMap", js.undefined)
      
      @scala.inline
      def setNameUndefined: Self = StObject.set(x, "name", js.undefined)
      
      @scala.inline
      def setRight(value: Double | String): Self = StObject.set(x, "right", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setRightUndefined: Self = StObject.set(x, "right", js.undefined)
      
      @scala.inline
      def setRoam(value: Boolean | String): Self = StObject.set(x, "roam", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setRoamUndefined: Self = StObject.set(x, "roam", js.undefined)
      
      @scala.inline
      def setScaleLimit(value: Min): Self = StObject.set(x, "scaleLimit", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setScaleLimitUndefined: Self = StObject.set(x, "scaleLimit", js.undefined)
      
      @scala.inline
      def setSelectedMode(value: Boolean | String): Self = StObject.set(x, "selectedMode", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setSelectedModeUndefined: Self = StObject.set(x, "selectedMode", js.undefined)
      
      @scala.inline
      def setSeriesLayoutBy(value: String): Self = StObject.set(x, "seriesLayoutBy", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setSeriesLayoutByUndefined: Self = StObject.set(x, "seriesLayoutBy", js.undefined)
      
      @scala.inline
      def setShowLegendSymbol(value: Boolean): Self = StObject.set(x, "showLegendSymbol", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setShowLegendSymbolUndefined: Self = StObject.set(x, "showLegendSymbol", js.undefined)
      
      @scala.inline
      def setSilent(value: Boolean): Self = StObject.set(x, "silent", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setSilentUndefined: Self = StObject.set(x, "silent", js.undefined)
      
      @scala.inline
      def setTooltip(value: BaseTooltip): Self = StObject.set(x, "tooltip", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setTooltipUndefined: Self = StObject.set(x, "tooltip", js.undefined)
      
      @scala.inline
      def setTop(value: Double | String): Self = StObject.set(x, "top", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setTopUndefined: Self = StObject.set(x, "top", js.undefined)
      
      @scala.inline
      def setType(value: String): Self = StObject.set(x, "type", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setTypeUndefined: Self = StObject.set(x, "type", js.undefined)
      
      @scala.inline
      def setZ(value: Double): Self = StObject.set(x, "z", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setZUndefined: Self = StObject.set(x, "z", js.undefined)
      
      @scala.inline
      def setZlevel(value: Double): Self = StObject.set(x, "zlevel", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setZlevelUndefined: Self = StObject.set(x, "zlevel", js.undefined)
      
      @scala.inline
      def setZoom(value: Double): Self = StObject.set(x, "zoom", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setZoomUndefined: Self = StObject.set(x, "zoom", js.undefined)
    }
  }
  
  /**
    * The series in parallel coordinate system.
    *
    * * * *
    *
    * **Introduction about Parallel coordinates**
    *
    * [Parallel Coordinates](https://en.wikipedia.org/wiki/Parallel_coordinates)
    * is a common way of visualizing high-dimensional geometry and analyzing
    * multivariate data.
    *
    * For example,
    * [series-parallel.data](https://echarts.apache.org/en/option.html#series-parallel.data)
    * is the following data:
    *
    * [see doc](https://echarts.apache.org/en/option.html#series-parallel)
    *
    * In data above, each row is a "data item", and each column represents
    * a "dimension".
    * For example, the meanings of columns above are: "data", "AQI", "PM2.5",
    * "PM10", "carbon monoxide level", "nitrogen dioxide level", and "sulfur
    * dioxide level".
    *
    * Parallel coordinates are much used to visualize multi-dimension data
    * shown above.
    * Each axis represents a dimension (namely, a column), and each line
    * represents a data item.
    * Data can be brush-selected on axes. For example:
    *
    * [see doc](https://echarts.apache.org/en/option.html#series-parallel)
    *
    * * * *
    *
    * **Brief about Configuration**
    *
    * Basic configuration parallel coordinates is shown as follow:
    *
    * [see doc](https://echarts.apache.org/en/option.html#series-parallel)
    *
    * Three components are involved here:
    * [parallel](https://echarts.apache.org/en/option.html#parallel)
    * ,
    * [parallelAxis](https://echarts.apache.org/en/option.html#parallelAxis)
    * ,
    * [series-parallel](https://echarts.apache.org/en/option.html#series-parallel)
    *
    * + [parallel](https://echarts.apache.org/en/option.html#parallel)
    *
    * This component is the coordinate system.
    * One or more series (like "Beijing", "Shanghai", and "Guangzhou" in
    * the above example) can share one coordinate system.
    *
    * Like other coordinate systems, multiple parallel coordinate systems
    * can be created in one echarts instance.
    *
    * Position setting is also carried out here.
    *
    * + [parallelAxis](https://echarts.apache.org/en/option.html#parallelAxis)
    *
    * This is axis configuration.
    * Multiple axes are needed in parallel coordinates.
    *
    * [parallelAxis.parallelIndex](https://echarts.apache.org/en/option.html#parallelAxis.parallelIndex)
    * is used to specify which coordinate system this axis belongs to.
    * The first coordinate system is used by default.
    *
    * + [series-parallel](https://echarts.apache.org/en/option.html#series-parallel)
    *
    * This is the definition of parallel series, which will be drawn on
    * parallel coordinate system.
    *
    * [parallelAxis.parallelIndex](https://echarts.apache.org/en/option.html#parallelAxis.parallelIndex)
    * is used to specify which coordinate system this axis belongs to.
    * The first coordinate system is used by default.
    *
    * * * *
    *
    * **Notes and Best Practices**
    *
    * When configuring multiple
    * [parallelAxis](https://echarts.apache.org/en/option.html#parallelAxis)
    * , there might be some common attributes in each axis configuration.
    * To avoid writing them repeatly, they can be put under
    * [parallel.parallelAxisDefault](https://echarts.apache.org/en/option.html#parallel.parallelAxisDefault)
    * . Before initializing axis, configurations in
    * [parallel.parallelAxisDefault](https://echarts.apache.org/en/option.html#parallel.parallelAxisDefault)
    * will be merged into
    * [parallelAxis](https://echarts.apache.org/en/option.html#parallelAxis)
    * to generate the final axis configuration.
    *
    * **If data is too large and cause bad performance**
    *
    * It is suggested to set
    * [series-parallel.lineStyle.width](https://echarts.apache.org/en/option.html#series-parallel.lineStyle.width)
    * to be `0.5`
    * (or less), which may improve performance significantly.
    *
    * * * *
    *
    * **Display High-Dimension Data**
    *
    * When dimension number is extremely large, say, more than 50 dimensions,
    * there will be more than 50 axes, which may hardly display in a page.
    *
    * In this case, you may use
    * [parallel.axisExpandable](https://echarts.apache.org/en/option.html#parallel.axisExpandable)
    * to improve the display. See this example:
    *
    * [see doc](https://echarts.apache.org/en/option.html#series-parallel)
    *
    *
    * @see https://echarts.apache.org/en/option.html#series-parallel
    */
  @js.native
  trait SeriesParallel extends Series {
    
    /**
      * When perform brush selection, the selected lines will be set
      * as this transparency rate (which could highlight those lines).
      *
      *
      * @default
      * 1
      * @see https://echarts.apache.org/en/option.html#series-parallel.activeOpacity
      */
    var activeOpacity: js.UndefOr[Double] = js.native
    
    /**
      * Whether to enable animation.
      *
      *
      * @default
      * "true"
      * @see https://echarts.apache.org/en/option.html#series-parallel.animation
      */
    var animation: js.UndefOr[Boolean] = js.native
    
    /**
      * Delay before updating the first animation, which supports callback
      * function for different data to have different animation effect.
      *
      * For example:
      *
      * [see doc](https://echarts.apache.org/en/option.html#series-parallel.parallel)
      *
      * See
      * [this example](https://echarts.apache.org/examples/en/editor.html?c=bar-animation-delay)
      * for more information.
      *
      *
      * @see https://echarts.apache.org/en/option.html#series-parallel.animationDelay
      */
    var animationDelay: js.UndefOr[js.Function | Double] = js.native
    
    /**
      * Delay before updating animation, which supports callback function
      * for different data to have different animation effect.
      *
      * For example:
      *
      * [see doc](https://echarts.apache.org/en/option.html#series-parallel.parallel)
      *
      * See
      * [this example](https://echarts.apache.org/examples/en/editor.html?c=bar-animation-delay)
      * for more information.
      *
      *
      * @see https://echarts.apache.org/en/option.html#series-parallel.animationDelayUpdate
      */
    var animationDelayUpdate: js.UndefOr[js.Function | Double] = js.native
    
    /**
      * Duration of the first animation, which supports callback function
      * for different data to have different animation effect:
      *
      * [see doc](https://echarts.apache.org/en/option.html#series-parallel.parallel)
      *
      *
      * @default
      * 1000
      * @see https://echarts.apache.org/en/option.html#series-parallel.animationDuration
      */
    var animationDuration: js.UndefOr[js.Function | Double] = js.native
    
    /**
      * Time for animation to complete, which supports callback function
      * for different data to have different animation effect:
      *
      * [see doc](https://echarts.apache.org/en/option.html#series-parallel.parallel)
      *
      *
      * @default
      * 300
      * @see https://echarts.apache.org/en/option.html#series-parallel.animationDurationUpdate
      */
    var animationDurationUpdate: js.UndefOr[js.Function | Double] = js.native
    
    /**
      * Easing method used for the first animation.
      * Varied easing effects can be found at
      * [easing effect example](https://echarts.apache.org/examples/en/editor.html?c=line-easing)
      * .
      *
      *
      * @default
      * "linear"
      * @see https://echarts.apache.org/en/option.html#series-parallel.animationEasing
      */
    var animationEasing: js.UndefOr[String] = js.native
    
    /**
      * Easing method used for animation.
      *
      *
      * @default
      * "cubicOut"
      * @see https://echarts.apache.org/en/option.html#series-parallel.animationEasingUpdate
      */
    var animationEasingUpdate: js.UndefOr[String] = js.native
    
    /**
      * Whether to set graphic number threshold to animation.
      * Animation will be disabled when graphic number is larger than
      * threshold.
      *
      *
      * @default
      * 2000
      * @see https://echarts.apache.org/en/option.html#series-parallel.animationThreshold
      */
    var animationThreshold: js.UndefOr[Double] = js.native
    
    /**
      * The coordinate used in the series, whose options are:
      *
      * + `'parallel'`
      *
      * Use parallel coordinates, with
      * [parallelIndex](https://echarts.apache.org/en/option.html#series-parallel.parallelIndex)
      * to assign the corresponding parallel coordinate components.
      *
      *
      * @default
      * "parallel"
      * @see https://echarts.apache.org/en/option.html#series-parallel.coordinateSystem
      */
    var coordinateSystem: js.UndefOr[String] = js.native
    
    /**
      * For example,
      * [series-parallel.data](https://echarts.apache.org/en/option.html#series-parallel.data)
      * is the following data:
      *
      * [see doc](https://echarts.apache.org/en/option.html#series-parallel.parallel)
      *
      * In data above, each row is a "data item", and each column represents
      * a "dimension".
      * For example, the meanings of columns above are: "data", "AQI",
      * "PM2.5",
      * "PM10", "carbon monoxide level", "nitrogen dioxide level", and
      * "sulfur dioxide level".
      *
      *
      * @see https://echarts.apache.org/en/option.html#series-parallel.data
      */
    var data: js.UndefOr[
        js.Array[
          (js.Array[
            Double | String | typingsSlinky.echarts.echarts.EChartOption.SeriesParallel.DataObject
          ]) | typingsSlinky.echarts.echarts.EChartOption.SeriesParallel.DataObject | Double | String
        ]
      ] = js.native
    
    /**
      * @see https://echarts.apache.org/en/option.html#series-parallel.emphasis
      */
    var emphasis: js.UndefOr[`16`] = js.native
    
    /**
      * Component ID, not specified by default.
      * If specified, it can be used to refer the component in option
      * or API.
      *
      *
      * @see https://echarts.apache.org/en/option.html#series-parallel.id
      */
    var id: js.UndefOr[String] = js.native
    
    /**
      * When perform brush selection, the unselected lines will be set
      * as this transparency rate (which could darken those lines).
      *
      *
      * @default
      * 0.05
      * @see https://echarts.apache.org/en/option.html#series-parallel.inactiveOpacity
      */
    var inactiveOpacity: js.UndefOr[Double] = js.native
    
    /**
      * Line style.
      *
      *
      * @see https://echarts.apache.org/en/option.html#series-parallel.lineStyle
      */
    var lineStyle: js.UndefOr[ShadowBlur] = js.native
    
    /**
      * Series name used for displaying in
      * [tooltip](https://echarts.apache.org/en/option.html#tooltip)
      * and filtering with
      * [legend](https://echarts.apache.org/en/option.html#legend)
      * , or updaing data and configuration with `setOption`.
      *
      *
      * @see https://echarts.apache.org/en/option.html#series-parallel.name
      */
    var name: js.UndefOr[String] = js.native
    
    /**
      * Index of
      * [parallel coordinates](https://echarts.apache.org/en/option.html#parallel)
      * to combine with, which is useful for multiple parallel axes in
      * one chart.
      *
      *
      * @see https://echarts.apache.org/en/option.html#series-parallel.parallelIndex
      */
    var parallelIndex: js.UndefOr[Double] = js.native
    
    /**
      * `progressive` specifies the amount of graphic elements that can
      * be rendered within a frame (about 16ms) if "progressive rendering"
      * enabled.
      *
      * When data amount is from thousand to more than 10 million, it
      * will take too long time to render all of the graphic elements.
      * Since ECharts 4, "progressive rendering" is supported in its
      * workflow, which processes and renders data chunk by chunk alone
      * with each frame, avoiding to block the UI thread of the browser.
      *
      *
      * @default
      * 500
      * @see https://echarts.apache.org/en/option.html#series-parallel.progressive
      */
    var progressive: js.UndefOr[Double] = js.native
    
    /**
      * Chunk approach, optional values:
      *
      * + `'sequential'`: slice data by data index.
      * + `'mod'`: slice data by mod, which make the data items of each
      * chunk coming from all over the data, bringing better visual effect
      * while progressive rendering.
      *
      *
      * @default
      * "sequential"
      * @see https://echarts.apache.org/en/option.html#series-parallel.progressiveChunkMode
      */
    var progressiveChunkMode: js.UndefOr[String] = js.native
    
    /**
      * If current data amount is over the threshold, "progressive rendering"
      * is enabled.
      *
      *
      * @default
      * 3000
      * @see https://echarts.apache.org/en/option.html#series-parallel.progressiveThreshold
      */
    var progressiveThreshold: js.UndefOr[Double] = js.native
    
    /**
      * Whether to update view in realtime.
      *
      *
      * @default
      * "true"
      * @see https://echarts.apache.org/en/option.html#series-parallel.realtime
      */
    var realtime: js.UndefOr[Boolean] = js.native
    
    /**
      * Whether to ignore mouse events.
      * Default value is false, for triggering and responding to mouse
      * events.
      *
      *
      * @see https://echarts.apache.org/en/option.html#series-parallel.silent
      */
    var silent: js.UndefOr[Boolean] = js.native
    
    /**
      * Whether to smooth the line.
      * It defaults to be `false` and can be set as `true` or the values
      * from 0 to 1 which indicating the smoothness.
      *
      *
      * @see https://echarts.apache.org/en/option.html#series-parallel.smooth
      */
    var smooth: js.UndefOr[Boolean | Double] = js.native
    
    /**
      * tooltip settings in this series.
      *
      *
      * @see https://echarts.apache.org/en/option.html#series-parallel.tooltip
      */
    var tooltip: js.UndefOr[BaseTooltip] = js.native
    
    /**
      * @default
      * "parallel"
      * @see https://echarts.apache.org/en/option.html#series-parallel.type
      */
    var `type`: js.UndefOr[String] = js.native
    
    /**
      * `z` value of all graghical elements in parallel, which controls
      * order of drawing graphical components.
      * Components with smaller `z` values may be overwritten by those
      * with larger `z` values.
      *
      * `z` has a lower priority to `zlevel`, and will not create new
      * Canvas.
      *
      *
      * @default
      * 2
      * @see https://echarts.apache.org/en/option.html#series-parallel.z
      */
    var z: js.UndefOr[Double] = js.native
    
    /**
      * `zlevel` value of all graghical elements in parallel.
      *
      * `zlevel` is used to make layers with Canvas.
      * Graphical elements with different `zlevel` values will be placed
      * in different Canvases, which is a common optimization technique.
      * We can put those frequently changed elements (like those with
      * animations) to a seperate `zlevel`.
      * Notice that too many Canvases will increase memory cost, and
      * should be used carefully on mobile phones to avoid crash.
      *
      * Canvases with bigger `zlevel` will be placed on Canvases with
      * smaller `zlevel`.
      *
      *
      * @see https://echarts.apache.org/en/option.html#series-parallel.zlevel
      */
    var zlevel: js.UndefOr[Double] = js.native
  }
  object SeriesParallel {
    
    @scala.inline
    def apply(): SeriesParallel = {
      val __obj = js.Dynamic.literal()
      __obj.asInstanceOf[SeriesParallel]
    }
    
    @js.native
    trait DataObject extends StObject {
      
      /**
        * Line color.
        *
        * > Color can be represented in RGB, for example `'rgb(128,
        * 128, 128)'`.
        * RGBA can be used when you need alpha channel, for example
        * `'rgba(128, 128, 128, 0.5)'`.
        * You may also use hexadecimal format, for example `'#ccc'`.
        * Gradient color and texture are also supported besides single
        * colors.
        * >
        * > [see doc](https://echarts.apache.org/en/option.html#series-parallel.parallel.data)
        *
        *
        * @default
        * "#000"
        * @see https://echarts.apache.org/en/option.html#series-parallel.data.color
        */
      var color: js.UndefOr[Color] = js.native
      
      /**
        * @see https://echarts.apache.org/en/option.html#series-parallel.data.emphasis
        */
      var emphasis: js.UndefOr[`16`] = js.native
      
      /**
        * Line style.
        *
        *
        * @see https://echarts.apache.org/en/option.html#series-parallel.data.lineStyle
        */
      var lineStyle: js.UndefOr[js.Object] = js.native
      
      /**
        * The name of a data item.
        *
        *
        * @see https://echarts.apache.org/en/option.html#series-parallel.data.name
        */
      var name: js.UndefOr[String] = js.native
      
      /**
        * Opacity of the component.
        * Supports value from 0 to 1, and the component will not be
        * drawn when set to 0.
        *
        *
        * @default
        * 0.45
        * @see https://echarts.apache.org/en/option.html#series-parallel.data.opacity
        */
      var opacity: js.UndefOr[Double] = js.native
      
      /**
        * Size of shadow blur.
        * This attribute should be used along with `shadowColor`,`shadowOffsetX`,
        * `shadowOffsetY` to set shadow to component.
        *
        * For example:
        *
        * [see doc](https://echarts.apache.org/en/option.html#series-parallel.parallel.data)
        *
        *
        * @see https://echarts.apache.org/en/option.html#series-parallel.data.shadowBlur
        */
      var shadowBlur: js.UndefOr[Double] = js.native
      
      /**
        * Shadow color. Support same format as `color`.
        *
        *
        * @see https://echarts.apache.org/en/option.html#series-parallel.data.shadowColor
        */
      var shadowColor: js.UndefOr[Color] = js.native
      
      /**
        * Offset distance on the horizontal direction of shadow.
        *
        *
        * @see https://echarts.apache.org/en/option.html#series-parallel.data.shadowOffsetX
        */
      var shadowOffsetX: js.UndefOr[Double] = js.native
      
      /**
        * Offset distance on the vertical direction of shadow.
        *
        *
        * @see https://echarts.apache.org/en/option.html#series-parallel.data.shadowOffsetY
        */
      var shadowOffsetY: js.UndefOr[Double] = js.native
      
      /**
        * line type.
        *
        * Options are:
        *
        * + `'solid'`
        * + `'dashed'`
        * + `'dotted'`
        *
        *
        * @default
        * "solid"
        * @see https://echarts.apache.org/en/option.html#series-parallel.data.type
        */
      var `type`: js.UndefOr[String] = js.native
      
      /**
        * The value of a data item.
        *
        *
        * @see https://echarts.apache.org/en/option.html#series-parallel.data.value
        */
      var value: js.UndefOr[js.Array[_]] = js.native
      
      /**
        * line width.
        *
        *
        * @default
        * 2
        * @see https://echarts.apache.org/en/option.html#series-parallel.data.width
        */
      var width: js.UndefOr[Double] = js.native
    }
    object DataObject {
      
      @scala.inline
      def apply(): typingsSlinky.echarts.echarts.EChartOption.SeriesParallel.DataObject = {
        val __obj = js.Dynamic.literal()
        __obj.asInstanceOf[typingsSlinky.echarts.echarts.EChartOption.SeriesParallel.DataObject]
      }
      
      @scala.inline
      implicit class DataObjectMutableBuilder[Self <: typingsSlinky.echarts.echarts.EChartOption.SeriesParallel.DataObject] (val x: Self) extends AnyVal {
        
        @scala.inline
        def setColor(value: Color): Self = StObject.set(x, "color", value.asInstanceOf[js.Any])
        
        @scala.inline
        def setColorUndefined: Self = StObject.set(x, "color", js.undefined)
        
        @scala.inline
        def setEmphasis(value: `16`): Self = StObject.set(x, "emphasis", value.asInstanceOf[js.Any])
        
        @scala.inline
        def setEmphasisUndefined: Self = StObject.set(x, "emphasis", js.undefined)
        
        @scala.inline
        def setLineStyle(value: js.Object): Self = StObject.set(x, "lineStyle", value.asInstanceOf[js.Any])
        
        @scala.inline
        def setLineStyleUndefined: Self = StObject.set(x, "lineStyle", js.undefined)
        
        @scala.inline
        def setName(value: String): Self = StObject.set(x, "name", value.asInstanceOf[js.Any])
        
        @scala.inline
        def setNameUndefined: Self = StObject.set(x, "name", js.undefined)
        
        @scala.inline
        def setOpacity(value: Double): Self = StObject.set(x, "opacity", value.asInstanceOf[js.Any])
        
        @scala.inline
        def setOpacityUndefined: Self = StObject.set(x, "opacity", js.undefined)
        
        @scala.inline
        def setShadowBlur(value: Double): Self = StObject.set(x, "shadowBlur", value.asInstanceOf[js.Any])
        
        @scala.inline
        def setShadowBlurUndefined: Self = StObject.set(x, "shadowBlur", js.undefined)
        
        @scala.inline
        def setShadowColor(value: Color): Self = StObject.set(x, "shadowColor", value.asInstanceOf[js.Any])
        
        @scala.inline
        def setShadowColorUndefined: Self = StObject.set(x, "shadowColor", js.undefined)
        
        @scala.inline
        def setShadowOffsetX(value: Double): Self = StObject.set(x, "shadowOffsetX", value.asInstanceOf[js.Any])
        
        @scala.inline
        def setShadowOffsetXUndefined: Self = StObject.set(x, "shadowOffsetX", js.undefined)
        
        @scala.inline
        def setShadowOffsetY(value: Double): Self = StObject.set(x, "shadowOffsetY", value.asInstanceOf[js.Any])
        
        @scala.inline
        def setShadowOffsetYUndefined: Self = StObject.set(x, "shadowOffsetY", js.undefined)
        
        @scala.inline
        def setType(value: String): Self = StObject.set(x, "type", value.asInstanceOf[js.Any])
        
        @scala.inline
        def setTypeUndefined: Self = StObject.set(x, "type", js.undefined)
        
        @scala.inline
        def setValue(value: js.Array[_]): Self = StObject.set(x, "value", value.asInstanceOf[js.Any])
        
        @scala.inline
        def setValueUndefined: Self = StObject.set(x, "value", js.undefined)
        
        @scala.inline
        def setValueVarargs(value: js.Any*): Self = StObject.set(x, "value", js.Array(value :_*))
        
        @scala.inline
        def setWidth(value: Double): Self = StObject.set(x, "width", value.asInstanceOf[js.Any])
        
        @scala.inline
        def setWidthUndefined: Self = StObject.set(x, "width", js.undefined)
      }
    }
    
    @scala.inline
    implicit class SeriesParallelMutableBuilder[Self <: SeriesParallel] (val x: Self) extends AnyVal {
      
      @scala.inline
      def setActiveOpacity(value: Double): Self = StObject.set(x, "activeOpacity", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setActiveOpacityUndefined: Self = StObject.set(x, "activeOpacity", js.undefined)
      
      @scala.inline
      def setAnimation(value: Boolean): Self = StObject.set(x, "animation", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setAnimationDelay(value: js.Function | Double): Self = StObject.set(x, "animationDelay", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setAnimationDelayUndefined: Self = StObject.set(x, "animationDelay", js.undefined)
      
      @scala.inline
      def setAnimationDelayUpdate(value: js.Function | Double): Self = StObject.set(x, "animationDelayUpdate", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setAnimationDelayUpdateUndefined: Self = StObject.set(x, "animationDelayUpdate", js.undefined)
      
      @scala.inline
      def setAnimationDuration(value: js.Function | Double): Self = StObject.set(x, "animationDuration", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setAnimationDurationUndefined: Self = StObject.set(x, "animationDuration", js.undefined)
      
      @scala.inline
      def setAnimationDurationUpdate(value: js.Function | Double): Self = StObject.set(x, "animationDurationUpdate", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setAnimationDurationUpdateUndefined: Self = StObject.set(x, "animationDurationUpdate", js.undefined)
      
      @scala.inline
      def setAnimationEasing(value: String): Self = StObject.set(x, "animationEasing", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setAnimationEasingUndefined: Self = StObject.set(x, "animationEasing", js.undefined)
      
      @scala.inline
      def setAnimationEasingUpdate(value: String): Self = StObject.set(x, "animationEasingUpdate", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setAnimationEasingUpdateUndefined: Self = StObject.set(x, "animationEasingUpdate", js.undefined)
      
      @scala.inline
      def setAnimationThreshold(value: Double): Self = StObject.set(x, "animationThreshold", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setAnimationThresholdUndefined: Self = StObject.set(x, "animationThreshold", js.undefined)
      
      @scala.inline
      def setAnimationUndefined: Self = StObject.set(x, "animation", js.undefined)
      
      @scala.inline
      def setCoordinateSystem(value: String): Self = StObject.set(x, "coordinateSystem", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setCoordinateSystemUndefined: Self = StObject.set(x, "coordinateSystem", js.undefined)
      
      @scala.inline
      def setData(
        value: js.Array[
              (js.Array[
                Double | String | typingsSlinky.echarts.echarts.EChartOption.SeriesParallel.DataObject
              ]) | typingsSlinky.echarts.echarts.EChartOption.SeriesParallel.DataObject | Double | String
            ]
      ): Self = StObject.set(x, "data", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setDataUndefined: Self = StObject.set(x, "data", js.undefined)
      
      @scala.inline
      def setDataVarargs(
        value: ((js.Array[
              Double | String | typingsSlinky.echarts.echarts.EChartOption.SeriesParallel.DataObject
            ]) | typingsSlinky.echarts.echarts.EChartOption.SeriesParallel.DataObject | Double | String)*
      ): Self = StObject.set(x, "data", js.Array(value :_*))
      
      @scala.inline
      def setEmphasis(value: `16`): Self = StObject.set(x, "emphasis", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setEmphasisUndefined: Self = StObject.set(x, "emphasis", js.undefined)
      
      @scala.inline
      def setId(value: String): Self = StObject.set(x, "id", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setIdUndefined: Self = StObject.set(x, "id", js.undefined)
      
      @scala.inline
      def setInactiveOpacity(value: Double): Self = StObject.set(x, "inactiveOpacity", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setInactiveOpacityUndefined: Self = StObject.set(x, "inactiveOpacity", js.undefined)
      
      @scala.inline
      def setLineStyle(value: ShadowBlur): Self = StObject.set(x, "lineStyle", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setLineStyleUndefined: Self = StObject.set(x, "lineStyle", js.undefined)
      
      @scala.inline
      def setName(value: String): Self = StObject.set(x, "name", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setNameUndefined: Self = StObject.set(x, "name", js.undefined)
      
      @scala.inline
      def setParallelIndex(value: Double): Self = StObject.set(x, "parallelIndex", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setParallelIndexUndefined: Self = StObject.set(x, "parallelIndex", js.undefined)
      
      @scala.inline
      def setProgressive(value: Double): Self = StObject.set(x, "progressive", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setProgressiveChunkMode(value: String): Self = StObject.set(x, "progressiveChunkMode", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setProgressiveChunkModeUndefined: Self = StObject.set(x, "progressiveChunkMode", js.undefined)
      
      @scala.inline
      def setProgressiveThreshold(value: Double): Self = StObject.set(x, "progressiveThreshold", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setProgressiveThresholdUndefined: Self = StObject.set(x, "progressiveThreshold", js.undefined)
      
      @scala.inline
      def setProgressiveUndefined: Self = StObject.set(x, "progressive", js.undefined)
      
      @scala.inline
      def setRealtime(value: Boolean): Self = StObject.set(x, "realtime", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setRealtimeUndefined: Self = StObject.set(x, "realtime", js.undefined)
      
      @scala.inline
      def setSilent(value: Boolean): Self = StObject.set(x, "silent", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setSilentUndefined: Self = StObject.set(x, "silent", js.undefined)
      
      @scala.inline
      def setSmooth(value: Boolean | Double): Self = StObject.set(x, "smooth", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setSmoothUndefined: Self = StObject.set(x, "smooth", js.undefined)
      
      @scala.inline
      def setTooltip(value: BaseTooltip): Self = StObject.set(x, "tooltip", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setTooltipUndefined: Self = StObject.set(x, "tooltip", js.undefined)
      
      @scala.inline
      def setType(value: String): Self = StObject.set(x, "type", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setTypeUndefined: Self = StObject.set(x, "type", js.undefined)
      
      @scala.inline
      def setZ(value: Double): Self = StObject.set(x, "z", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setZUndefined: Self = StObject.set(x, "z", js.undefined)
      
      @scala.inline
      def setZlevel(value: Double): Self = StObject.set(x, "zlevel", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setZlevelUndefined: Self = StObject.set(x, "zlevel", js.undefined)
    }
  }
  
  /**
    * **pictorial bar chart**
    *
    * Pictorial bar chart is a type of bar chart that custimzed glyph (like
    * images,
    * [SVG PathData](http://www.w3.org/TR/SVG/paths.html#PathData)
    * ) can be used instead of rectangular bar.
    * This kind of chart is usually used in infographic.
    *
    * Pictorial bar chart can only be used in
    * [rectangular coordinate](https://echarts.apache.org/en/option.html#grid)
    * with at least 1 category axis.
    *
    * **Example:**
    *
    * [see doc](https://echarts.apache.org/en/option.html#series-pictorialBar)
    *
    * **Layout**
    *
    * Basically `pictoialBar` is a type of bar chart, which follows the
    * bar chart layout.
    * In `pictorialBar`, each bar is named as `reference bar`, which does
    * not be shown, but only be used as a reference for layout of pictorial
    * graphic elements.
    * Each pictorial graphic element is positioned with respect to its
    * `reference bar` according to the setting of
    * [symbolPosition](https://echarts.apache.org/en/option.html#series-pictorialBar.symbolPosition)
    * 、
    * [symbolOffset](https://echarts.apache.org/en/option.html#series-pictorialBar.symbolOffset)
    * .
    *
    * See the example below:
    *
    * [see doc](https://echarts.apache.org/en/option.html#series-pictorialBar)
    *
    * [symbolSize](https://echarts.apache.org/en/option.html#series-pictorialBar.symbolSize)
    * is used to specify the size of graphic elements.
    *
    * See the example below:
    *
    * [see doc](https://echarts.apache.org/en/option.html#series-pictorialBar)
    *
    * **Graphic types**
    *
    * [symbolRepeat](https://echarts.apache.org/en/option.html#series-pictorialBar.symbolRepeat)
    * can be
    *
    * Graphic elements can be set as 'repeat' or not by
    * [symbolRepeat](https://echarts.apache.org/en/option.html#series-pictorialBar.symbolRepeat)
    * .
    *
    * + If set as `false` (default), a single graphic element is used to
    * represent a data item.
    * + If set as `true`, a group of repeat graphic elements are used to
    * represent a data item.
    *
    * See the example below:
    *
    * [see doc](https://echarts.apache.org/en/option.html#series-pictorialBar)
    *
    * Each graphic element can be basic shape (like `'circle'`, `'rect'`,
    * ...), or
    * [SVG PathData](http://www.w3.org/TR/SVG/paths.html#PathData)
    * , or image. See
    * [symbolType](https://echarts.apache.org/en/option.html#series-pictorialBar.symbolType)
    * .
    *
    * See the example below:
    *
    * [see doc](https://echarts.apache.org/en/option.html#series-pictorialBar)
    *
    * [symbolClip](https://echarts.apache.org/en/option.html#series-pictorialBar.symbolClip)
    * can be used to clip graphic elements。
    *
    * See the example below:
    *
    * [see doc](https://echarts.apache.org/en/option.html#series-pictorialBar)
    *
    *
    * @see https://echarts.apache.org/en/option.html#series-pictorialBar
    */
  @js.native
  trait SeriesPictorialBar extends Series {
    
    /**
      * Whether to enable animation.
      *
      *
      * @default
      * "true"
      * @see https://echarts.apache.org/en/option.html#series-pictorialBar.animation
      */
    var animation: js.UndefOr[Boolean] = js.native
    
    /**
      * Duration of the first animation, which supports callback function
      * for different data to have different animation effect:
      *
      * [see doc](https://echarts.apache.org/en/option.html#series-pictorialBar.pictorialBar)
      *
      *
      * @default
      * 1000
      * @see https://echarts.apache.org/en/option.html#series-pictorialBar.animationDuration
      */
    var animationDuration: js.UndefOr[js.Function | Double] = js.native
    
    /**
      * Time for animation to complete, which supports callback function
      * for different data to have different animation effect:
      *
      * [see doc](https://echarts.apache.org/en/option.html#series-pictorialBar.pictorialBar)
      *
      *
      * @default
      * 300
      * @see https://echarts.apache.org/en/option.html#series-pictorialBar.animationDurationUpdate
      */
    var animationDurationUpdate: js.UndefOr[js.Function | Double] = js.native
    
    /**
      * Easing method used for the first animation.
      * Varied easing effects can be found at
      * [easing effect example](https://echarts.apache.org/examples/en/editor.html?c=line-easing)
      * .
      *
      *
      * @default
      * "cubicOut"
      * @see https://echarts.apache.org/en/option.html#series-pictorialBar.animationEasing
      */
    var animationEasing: js.UndefOr[String] = js.native
    
    /**
      * Easing method used for animation.
      *
      *
      * @default
      * "cubicOut"
      * @see https://echarts.apache.org/en/option.html#series-pictorialBar.animationEasingUpdate
      */
    var animationEasingUpdate: js.UndefOr[`17`] = js.native
    
    /**
      * Whether to set graphic number threshold to animation.
      * Animation will be disabled when graphic number is larger than
      * threshold.
      *
      *
      * @default
      * 2000
      * @see https://echarts.apache.org/en/option.html#series-pictorialBar.animationThreshold
      */
    var animationThreshold: js.UndefOr[Double] = js.native
    
    /**
      * The bar gap of a single series, defaults to be `20%` of the category
      * gap, can be set as a fixed value.
      *
      * In a single coodinate system, this attribute is shared by multiple
      * `'bar'` series.
      * This attribute should be set on the last `'bar'` series in the
      * coodinate system, then it will be adopted by all `'bar'` series
      * in the coordinate system.
      *
      *
      * @default
      * '20%'
      * @see https://echarts.apache.org/en/option.html#series-pictorialBar.barCategoryGap
      */
    var barCategoryGap: js.UndefOr[String] = js.native
    
    /**
      * The gap between bars between different series, is a percent value
      * like `'30%'`, which means `30%` of the bar width.
      *
      * Set barGap as `'-100%'` can overlap bars that belong to different
      * series, which is useful when making a series of bar be background.
      *
      * In a single coodinate system, this attribute is shared by multiple
      * `'bar'` series.
      * This attribute should be set on the last `'bar'` series in the
      * coodinate system, then it will be adopted by all `'bar'` series
      * in the coordinate system.
      *
      * For example:
      *
      * [see doc](https://echarts.apache.org/en/option.html#series-pictorialBar.pictorialBar)
      *
      *
      * @default
      * -100%
      * @see https://echarts.apache.org/en/option.html#series-pictorialBar.barGap
      */
    var barGap: js.UndefOr[String] = js.native
    
    /**
      * The maximum width of the bar. Adaptive when not specified.
      *
      * In a single coodinate system, this attribute is shared by multiple
      * `'bar'` series.
      * This attribute should be set on the last `'bar'` series in the
      * coodinate system, then it will be adopted by all `'bar'` series
      * in the coordinate system.
      *
      *
      * @see https://echarts.apache.org/en/option.html#series-pictorialBar.barMaxWidth
      */
    var barMaxWidth: js.UndefOr[Double] = js.native
    
    /**
      * The minimum width of bar.
      * It could be used to avoid the following situation: the interaction
      * would be affected when the value of some data item is too small.
      *
      *
      * @see https://echarts.apache.org/en/option.html#series-pictorialBar.barMinHeight
      */
    var barMinHeight: js.UndefOr[Double] = js.native
    
    /**
      * The width of the bar. Adaptive when not specified.
      *
      * In a single coodinate system, this attribute is shared by multiple
      * `'bar'` series.
      * This attribute should be set on the last `'bar'` series in the
      * coodinate system, then it will be adopted by all `'bar'` series
      * in the coordinate system.
      *
      *
      * @see https://echarts.apache.org/en/option.html#series-pictorialBar.barWidth
      */
    var barWidth: js.UndefOr[Double] = js.native
    
    /**
      * The coordinate used in the series, whose options are:
      *
      * + `'cartesian2d'`
      *
      * Use a two-dimensional rectangular coordinate (also known as Cartesian
      * coordinate), with
      * [xAxisIndex](https://echarts.apache.org/en/option.html#series-pictorialBar.xAxisIndex)
      * and
      * [yAxisIndex](https://echarts.apache.org/en/option.html#series-pictorialBar.yAxisIndex)
      * to assign the corresponding axis component.
      *
      *
      * @default
      * "cartesian2d"
      * @see https://echarts.apache.org/en/option.html#series-pictorialBar.coordinateSystem
      */
    var coordinateSystem: js.UndefOr[String] = js.native
    
    /**
      * The mouse style when mouse hovers on an element, the same as
      * `cursor` property in `CSS`.
      *
      *
      * @default
      * "pointer"
      * @see https://echarts.apache.org/en/option.html#series-pictorialBar.cursor
      */
    var cursor: js.UndefOr[String] = js.native
    
    /**
      * Data array of series, which can be in the following forms:
      *
      * Notice, if no `data` specified in series, and there is
      * [dataset](https://echarts.apache.org/en/option.html#dataset)
      * in option, series will use the first
      * [dataset](https://echarts.apache.org/en/option.html#dataset)
      * as its datasource. If `data` has been specified,
      * [dataset](https://echarts.apache.org/en/option.html#dataset)
      * will not used.
      *
      * `series.datasetIndex` can be used to specify other
      * [dataset](https://echarts.apache.org/en/option.html#dataset)
      * .
      *
      * Basically, data is represented by a two-dimension array, like
      * the example below, where each colum is named as a "dimension".
      *
      * [see doc](https://echarts.apache.org/en/option.html#series-pictorialBar.pictorialBar)
      *
      * + In
      * [cartesian (grid)](https://echarts.apache.org/en/option.html#grid)
      * , "dimX" and "dimY" correspond to
      * [xAxis](https://echarts.apache.org/en/option.html#xAxis)
      * and
      * [yAxis](https://echarts.apache.org/en/option.html#yAxis)
      * repectively.
      * + In
      * [polar](https://echarts.apache.org/en/option.html#polar)
      * "dimX" and "dimY" correspond to
      * [radiusAxis](https://echarts.apache.org/en/option.html#radiusAxis)
      * 和
      * [angleAxis](https://echarts.apache.org/en/option.html#anbleAxis)
      * repectively.
      * + Other dimensions are optional, which can be used in other place.
      * For example:
      * + [visualMap](https://echarts.apache.org/en/option.html#visualMap)
      * can map one or more dimensions to viusal (color, symbol size
      * ...).
      * + [series.symbolSize](https://echarts.apache.org/en/option.html#series.symbolSize)
      * can be set as a callback function, where symbol size can be calculated
      * by values of a certain dimension.
      * + Values in other dimensions can be shown by
      * [tooltip.formatter](https://echarts.apache.org/en/option.html#tooltip.formatter)
      * or
      * [series.label.formatter](https://echarts.apache.org/en/option.html#series.label.formatter)
      * .
      *
      * Especially, when there is one and only one category axis (axis.type
      * is `'category'`), data can be simply be represented by a one-dimension
      * array, like:
      *
      * [see doc](https://echarts.apache.org/en/option.html#series-pictorialBar.pictorialBar)
      *
      * **Relationship between "value" and
      * [axis.type](https://echarts.apache.org/en/option.html#xAxis.type)
      * **
      *
      * + When a dimension corresponds to a value axis (axis.type
      * is `'value'` or `'log'`):
      *
      * The value can be a `number` (like `12`) (can also be a number
      * in a `string` format, like `'12'`).
      *
      * + When a dimension corresponds to a category axis (axis.type
      * is `'category'`):
      *
      * The value should be the ordinal of the axis.data
      * (based on `0`), the string value of the axis.data.
      * For example:
      *
      * [see doc](https://echarts.apache.org/en/option.html#series-pictorialBar.pictorialBar)
      *
      * There is an example of double category axes:
      * [Github Punchcard](https://echarts.apache.org/examples/en/editor.html?c=scatter-punchCard)
      * .
      *
      * + When a dimension corresponds to a time axis (type is `'time'`),
      * the value can be:
      *
      * + a timestamp, like `1484141700832`, which represents a UTC time.
      * + a date string, in one of the formats below:
      * + a subset of
      * [ISO 8601](http://www.ecma-international.org/ecma-262/5.1/#se
      * c-15.9.1.15)
      * , only including (all of these are treated as local time unless
      * timezone is specified, which is consistent with
      * [moment](https://momentjs.com/)
      * ):
      * + only part of year/month/date/time are specified: `'2012-03'`,
      * `'2012-03-01'`, `'2012-03-01 05'`, `'2012-03-01 05:06'`.
      * + separated by `"T"` or a space: `'2012-03-01T12:22:33.123'`,
      * `'2012-03-01 12:22:33.123'`.
      * + timezone specified: `'2012-03-01T12:22:33Z'`, `'2012-03-01T12:22:33+8000'`,
      * `'2012-03-01T12:22:33-05:00'`.
      * + other date string format (all of these are treated as local
      * time): `'2012'`, `'2012-3-1'`, `'2012/3/1'`, `'2012/03/01'`,
      * `'2009/6/12 2:00'`, `'2009/6/12 2:05:08'`, `'2009/6/12 2:05:08.123'`.
      * + a JavaScript Date instance created by user:
      * + Caution, when using a data string to create a Date instance,
      * [browser differences and inconsistencies](http://dygraphs.com/date-formats.html)
      * should be considered.
      * + For example: In chrome, `new Date('2012-01-01')` is treated
      * as a Jan 1st 2012 in UTC, while `new Date('2012-1-1')` and `new
      * Date('2012/01/01')` are treated as Jan 1st 2012 in local timezone.
      * In safari `new Date('2012-1-1')` is not supported.
      * + So if you intent to perform `new Date(dateString)`, it is strongly
      * recommended to use a time parse library (e.g.,
      * [moment](https://momentjs.com/)
      * ), or use `echarts.number.parseDate`, or check
      * [this](http://dygraphs.com/date-formats.html)
      * .
      *
      * **Customize a data item:**
      *
      * When needing to customize a data item, it can be set as an object,
      * where property `value` reprensent real value. For example:
      *
      * [see doc](https://echarts.apache.org/en/option.html#series-pictorialBar.pictorialBar)
      *
      * **Empty value:**
      *
      * `'-'` or `null` or `undefined` or `NaN` can be used to describe
      * that a data item is not exists (ps：_not exist_ does not means
      * its value is `0`).
      *
      * For example, line chart can break when encounter an empty value,
      * and scatter chart do not display graphic elements for empty values.
      *
      *
      * @see https://echarts.apache.org/en/option.html#series-pictorialBar.data
      */
    var data: js.UndefOr[
        js.Array[
          (js.Array[
            Unit | Double | String | typingsSlinky.echarts.echarts.EChartOption.SeriesPictorialBar.DataObject
          ]) | typingsSlinky.echarts.echarts.EChartOption.SeriesPictorialBar.DataObject | Double | String | Unit
        ]
      ] = js.native
    
    /**
      * `dimensions` can be used to define dimension info for `series.data`
      * or `dataset.source`.
      *
      * Notice: if
      * [dataset](https://echarts.apache.org/en/option.html#dataset)
      * is used, we can provide dimension names in the first column/row
      * of
      * [dataset.source](https://echarts.apache.org/en/option.html#dataset.source)
      * , and not need to specify `dimensions` here.
      * But if `dimensions` is specified here, echarts will not retrieve
      * dimension names from the first row/column of `dataset.source`
      * any more.
      *
      * For example:
      *
      * [see doc](https://echarts.apache.org/en/option.html#series-pictorialBar.pictorialBar)
      * [see doc](https://echarts.apache.org/en/option.html#series-pictorialBar.pictorialBar)
      *
      * Each data item of `dimensions` can be:
      *
      * + `string`, for example, `'someName'`, which equals to `{name:
      * 'someName'}`.
      * + `Object`, where the attributes can be:
      * + name: `string`.
      * + type: `string`, supports:
      * + `number`
      * + `float`, that is,
      * [Float64Array](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Float64Array)
      *
      * + `int`, that is,
      * [Int32Array](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Int32Array)
      *
      * + `ordinal`, discrete value, which represents string generally.
      * + `time`, time value, see
      * [data](https://echarts.apache.org/en/option.html#series.data)
      * to check the format of time value.
      * + displayName: `string`, generally used in tooltip for dimension
      * display. If not specified, use `name` by default.
      *
      * When `dimensions` is specified, the default `tooltip` will be
      * displayed vertically, which is better to show diemsion names.
      * Otherwise, `tooltip` will displayed only value horizontally.
      *
      *
      * @see https://echarts.apache.org/en/option.html#series-pictorialBar.dimensions
      */
    var dimensions: js.UndefOr[js.Array[_]] = js.native
    
    /**
      * @see https://echarts.apache.org/en/option.html#series-pictorialBar.emphasis
      */
    var emphasis: js.UndefOr[`8`] = js.native
    
    /**
      * Define what is encoded to for each dimension of `data`.
      * For example:
      *
      * [see doc](https://echarts.apache.org/en/option.html#series-pictorialBar.pictorialBar)
      *
      * Attributes of encode are different according to the type of coordinate
      * systtems. For
      * [cartesian2d](https://echarts.apache.org/en/option.html#grid)
      * , `x` and `y` can be defined. For
      * [polar](https://echarts.apache.org/en/option.html#polar)
      * , `radius` and `angle` can be defined. For
      * [geo](https://echarts.apache.org/en/option.html#geo)
      * , `lng` and `lat` can be defined.
      * Attribute `tooltip` and `itemName` (data item name in tooltip)
      * are always able to be defined.
      *
      * When
      * [dimensions](https://echarts.apache.org/en/option.html#series.dimensions)
      * is used to defined name for a certain dimension, `encode` can
      * refer the name directly. For example:
      *
      * [see doc](https://echarts.apache.org/en/option.html#series-pictorialBar.pictorialBar)
      *
      * Specially, in \[custom series(~series-custom), some property
      * in `encode`, corresponding to axis, can be set as null to make
      * the series not controlled by the axis, that is, the series data
      * will not be count in the extent of the axis, and the
      * [dataZoom](https://echarts.apache.org/en/option.html#dataZoom)
      * on the axis will not filter the series.
      *
      * [see doc](https://echarts.apache.org/en/option.html#series-pictorialBar.pictorialBar)
      *
      *
      * @see https://echarts.apache.org/en/option.html#series-pictorialBar.encode
      */
    var encode: js.UndefOr[js.Object] = js.native
    
    /**
      * Whether to enable hover animation.
      *
      * This attribute can be set at the
      * [root level of a series](https://echarts.apache.org/en/option.html#series-pictorialBar.hoverAnimation)
      * , where all data items in the series will be affected by this
      * attribute. And this attribute can also be set at
      * [each data item](https://echarts.apache.org/en/option.html#series-pictorialBar.data.hoverAnimation)
      * in
      * [series-pictorialBar.data](https://echarts.apache.org/en/option.htmlseries-pictorialBar.data)
      * , where only the data item is affected by this attribute.
      *
      * For example:
      *
      * [see doc](https://echarts.apache.org/en/option.html#series-pictorialBar.pictorialBar)
      *
      *
      * @see https://echarts.apache.org/en/option.html#series-pictorialBar.hoverAnimation
      */
    var hoverAnimation: js.UndefOr[AnimationDelayAnimationDelayUpdate] = js.native
    
    /**
      * Component ID, not specified by default.
      * If specified, it can be used to refer the component in option
      * or API.
      *
      *
      * @see https://echarts.apache.org/en/option.html#series-pictorialBar.id
      */
    var id: js.UndefOr[String] = js.native
    
    /**
      * Graphic style of , `emphasis` is the style when it is highlighted,
      * like being hovered by mouse, or highlighted via legend connect.
      *
      *
      * @see https://echarts.apache.org/en/option.html#series-pictorialBar.itemStyle
      */
    var itemStyle: js.UndefOr[BorderType] = js.native
    
    /**
      * Text label of , to explain some data information about graphic
      * item like value, name and so on.
      * `label` is placed under `itemStyle` in ECharts 2.x.
      * In ECharts 3, to make the configuration structure flatter, `label`is
      * taken to be at the same level with `itemStyle`, and has `emphasis`
      * as `itemStyle` does.
      *
      *
      * @see https://echarts.apache.org/en/option.html#series-pictorialBar.label
      */
    var label: js.UndefOr[BorderRadius] = js.native
    
    /**
      * Whether to enable highlighting chart when
      * [legend](https://echarts.apache.org/en/option.html#legend)
      * is being hovered.
      *
      *
      * @default
      * "true"
      * @see https://echarts.apache.org/en/option.html#series-pictorialBar.legendHoverLink
      */
    var legendHoverLink: js.UndefOr[Boolean] = js.native
    
    /**
      * Used to mark an area in chart.
      * For example, mark a time interval.
      *
      *
      * @see https://echarts.apache.org/en/option.html#series-pictorialBar.markArea
      */
    var markArea: js.UndefOr[AnimationDelayUpdate] = js.native
    
    /**
      * Use a line in the chart to illustrate.
      *
      *
      * @see https://echarts.apache.org/en/option.html#series-pictorialBar.markLine
      */
    var markLine: js.UndefOr[AnimationDelay] = js.native
    
    /**
      * Mark point in a chart.
      *
      *
      * @see https://echarts.apache.org/en/option.html#series-pictorialBar.markPoint
      */
    var markPoint: js.UndefOr[AnimationDuration] = js.native
    
    /**
      * Series name used for displaying in
      * [tooltip](https://echarts.apache.org/en/option.html#tooltip)
      * and filtering with
      * [legend](https://echarts.apache.org/en/option.html#legend)
      * , or updaing data and configuration with `setOption`.
      *
      *
      * @see https://echarts.apache.org/en/option.html#series-pictorialBar.name
      */
    var name: js.UndefOr[String] = js.native
    
    /**
      * Whether to ignore mouse events.
      * Default value is false, for triggering and responding to mouse
      * events.
      *
      *
      * @see https://echarts.apache.org/en/option.html#series-pictorialBar.silent
      */
    var silent: js.UndefOr[Boolean] = js.native
    
    /**
      * Specify the type of graphic elements.
      *
      * Icon types provided by ECharts includes `'circle'`, `'rect'`,
      * `'roundRect'`, `'triangle'`, `'diamond'`, `'pin'`, `'arrow'`,
      * `'none'`
      *
      * It can be set to an image with `'image://url'` , in which URL
      * is the link to an image, or `dataURI` of an image.
      *
      * An image URL example:
      *
      * ```
      * 'image://http://xxx.xxx.xxx/a/b.png'
      *
      * ```
      *
      * A `dataURI` example:
      *
      * [see doc](https://echarts.apache.org/en/option.html#series-pictorialBar.pictorialBar)
      *
      * Icons can be set to arbitrary vector path via `'path://'` in
      * ECharts.
      * As compared with raster image, vector paths prevent from jagging
      * and blurring when scaled, and have a better control over changing
      * colors.
      * Size of vectoer icon will be adapted automatically. Refer to
      * [SVG PathData](http://www.w3.org/TR/SVG/paths.html#PathData)
      * for more information about format of path.
      * You may export vector paths from tools like Adobe Illustrator.
      *
      * For example:
      *
      * [see doc](https://echarts.apache.org/en/option.html#series-pictorialBar.pictorialBar)
      *
      * Example:
      *
      * [see doc](https://echarts.apache.org/en/option.html#series-pictorialBar.pictorialBar)
      *
      * This attribute can be set at the
      * [root level of a series](https://echarts.apache.org/en/option.html#series-pictorialBar.symbol)
      * , where all data items in the series will be affected by this
      * attribute. And this attribute can also be set at
      * [each data item](https://echarts.apache.org/en/option.html#series-pictorialBar.data.symbol)
      * in
      * [series-pictorialBar.data](https://echarts.apache.org/en/option.htmlseries-pictorialBar.data)
      * , where only the data item is affected by this attribute.
      *
      * For example:
      *
      * [see doc](https://echarts.apache.org/en/option.html#series-pictorialBar.pictorialBar)
      *
      *
      * @default
      * "circle"
      * @see https://echarts.apache.org/en/option.html#series-pictorialBar.symbol
      */
    var symbol: js.UndefOr[String] = js.native
    
    /**
      * Defines a bounding area availble for the graphic elements.
      * This setting gives a data, which will then be translated to a
      * coordinate on the coordinate system.
      * The coordinate specifies the bounding.
      * Namely, if `symbolBoundingData` is set, the final size (or layout)
      * of the graphic elements depend on the `symbolBoundingData`.
      *
      * When reference bar is horizontal, `symbolBoundingData` is coresponding
      * to x axis, while reference bar is vertical, `symbolBoundingData`
      * is coresponding to y axis.
      *
      * Rule:
      *
      * + If
      * [symbolRepeat](https://echarts.apache.org/en/option.html#series-pictorialBar.symbolRepeat)
      * is not used:
      *
      * `symbolBoundingData` is the same as the size of reference bar
      * by default.
      * The size of the graphic element is detemined by `symbolBoundingData`.
      * For example, if reference bar is vertical, its data is `24`,
      * `symbolSize` is set as `[30, '50%']`, `symbolBoundingData` is
      * set as `124`, the final size of the graphic element will be `124
      * * 50% = 62`.
      * If `symbolBoundingData` is not set, the final size will be `24
      * * 50% = 12`.
      *
      * + If
      * [symbolRepeat](https://echarts.apache.org/en/option.html#series-pictorialBar.symbolRepeat)
      * is used:
      *
      * `symbolBoundingData` is the extreme value of the coordinate system.
      * `symbolBoundingData` defines a bounding area, where repeated
      * graphic elements layout according to
      * [symbolMargin](https://echarts.apache.org/en/option.html#series-pictorialBar.symbolMargin)
      * and
      * [symbolRepeat](https://echarts.apache.org/en/option.html#series-pictorialBar.symbolRepeat)
      * and
      * [symbolSize](https://echarts.apache.org/en/option.html#series-pictorialBar.symbolSize)
      *
      *
      * Both these settings determine the gap size of the repeated graphic
      * elements.
      *
      * `symbolBoundingData` is usually used in these cases:
      *
      * + When
      * [symbolCilp](https://echarts.apache.org/en/option.html#series-pictorialBar.symbolClip)
      * is used:
      *
      * And a series is used to display "amont value", while another
      * series is used to display "current value".
      * `symbolBoundingData` can be used to ensure that the graphic elements
      * of these two series are at the same size.
      *
      * For example:
      *
      * [see doc](https://echarts.apache.org/en/option.html#series-pictorialBar.pictorialBar)
      *
      * + When
      * [symbolRepeat](https://echarts.apache.org/en/option.html#series-pictorialBar.symbolRepeat)
      * is used:
      *
      * `symbolBoundingData` can be use to ensure the gaps of the elements
      * in different bars are the same.
      * Of cource, you can do not set `symbolBoundingData`, whose default
      * value is a stable value (extreme value of the coordinate system).
      *
      * For example:
      *
      * [see doc](https://echarts.apache.org/en/option.html#series-pictorialBar.pictorialBar)
      *
      * `symbolBoundingData` can also be an array, such as `[-40, 60]`,
      * which specifies both negative and positive symbolBoundingData.
      *
      * Check this example:
      *
      * [see doc](https://echarts.apache.org/en/option.html#series-pictorialBar.pictorialBar)
      *
      * This attribute can be set at the
      * [root level of a series](https://echarts.apache.org/en/option.html#series-pictorialBar.symbolBoundingData)
      * , where all data items in the series will be affected by this
      * attribute. And this attribute can also be set at
      * [each data item](https://echarts.apache.org/en/option.html#series-pictorialBar.data.symbolBoundingData)
      * in
      * [series-pictorialBar.data](https://echarts.apache.org/en/option.htmlseries-pictorialBar.data)
      * , where only the data item is affected by this attribute.
      *
      * For example:
      *
      * [see doc](https://echarts.apache.org/en/option.html#series-pictorialBar.pictorialBar)
      *
      *
      * @see https://echarts.apache.org/en/option.html#series-pictorialBar.symbolBoundingData
      */
    var symbolBoundingData: js.UndefOr[Double] = js.native
    
    /**
      * Whether to clip graphic elements.
      *
      * + `false`/null/undefined: The whole graphic elements represent
      * the size of value.
      * + `true`: The clipped graphic elements reperent the size of value.
      *
      * `symbolClip` is usually used in this case: both "amont value"
      * and "current value" should be displayed.
      * In this case, tow series can be used.
      * One for background, using complete graphic elements, while another
      * for current value, using clipped graphic elements.
      *
      * For example:
      *
      * [see doc](https://echarts.apache.org/en/option.html#series-pictorialBar.pictorialBar)
      *
      * Notice, in the example above,
      *
      * + The same
      * [symbolBoundingData](https://echarts.apache.org/en/option.html#series.pictorialBar.symbolBoundingData)
      * is used in "background series" and "current value seires", which
      * makes their graphic elements are the same size.
      * + A bigger
      * [z](https://echarts.apache.org/en/option.html#series.pictorialBar.z)
      * is set on "current value series", which makes it is over "background
      * series".
      *
      * This attribute can be set at the
      * [root level of a series](https://echarts.apache.org/en/option.html#series-pictorialBar.symbolClip)
      * , where all data items in the series will be affected by this
      * attribute. And this attribute can also be set at
      * [each data item](https://echarts.apache.org/en/option.html#series-pictorialBar.data.symbolClip)
      * in
      * [series-pictorialBar.data](https://echarts.apache.org/en/option.htmlseries-pictorialBar.data)
      * , where only the data item is affected by this attribute.
      *
      * For example:
      *
      * [see doc](https://echarts.apache.org/en/option.html#series-pictorialBar.pictorialBar)
      *
      *
      * @see https://echarts.apache.org/en/option.html#series-pictorialBar.symbolClip
      */
    var symbolClip: js.UndefOr[Boolean] = js.native
    
    /**
      * Specify margin of both sides of a graphic element.
      * ("both sides" means the two sides in the direction of its value
      * axis). It works only when
      * [symbolRepeat](https://echarts.apache.org/en/option.html#series-pictorialBar.symbolRepeat)
      * is used.
      *
      * Absolute value can be used (like `20`), or percent value can
      * be used (like `'-30%'`), which is based on its
      * [symbolSize](https://echarts.apache.org/en/option.html#series-pictorialBar.symbolSize)
      * .
      *
      * `symbolMargin` can be positive value or negative value, which
      * enables overlap of graphic elements when
      * [symbolRepeat](https://echarts.apache.org/en/option.html#series-pictorialBar.symbolRepeat)
      * is used.
      *
      * A `"!"` can be appended on the end of the value, like `"30%!"`
      * or `25!`, which means a extra blank will be added on the both
      * ends, otherwise the graphic elements on both ends will reach
      * the boundary by default.
      *
      * Notice:
      *
      * + When
      * [symbolRepeat](https://echarts.apache.org/en/option.html#series-pictorialBar.symbolRepeat)
      * is `true`/`'fixed'`: The given `symbolMargin` is just a reference
      * value.
      * The final gap of graphic elements will be calculated according
      * to
      * [symbolRepeat](https://echarts.apache.org/en/option.html#series-pictorialBar.symbolRepeat)
      * , `symbolMargin` and
      * [symbolBoundingData](https://echarts.apache.org/en/option.html#series-pictorialBar.symbolBoundingData)
      * .
      * + When
      * [symbolRepeat](https://echarts.apache.org/en/option.html#series-pictorialBar.symbolRepeat)
      * is set as a number: `symbolMargin` does not work any more.
      *
      * For example:
      *
      * [see doc](https://echarts.apache.org/en/option.html#series-pictorialBar.pictorialBar)
      *
      * This attribute can be set at the
      * [root level of a series](https://echarts.apache.org/en/option.html#series-pictorialBar.symbolMargin)
      * , where all data items in the series will be affected by this
      * attribute. And this attribute can also be set at
      * [each data item](https://echarts.apache.org/en/option.html#series-pictorialBar.data.symbolMargin)
      * in
      * [series-pictorialBar.data](https://echarts.apache.org/en/option.htmlseries-pictorialBar.data)
      * , where only the data item is affected by this attribute.
      *
      * For example:
      *
      * [see doc](https://echarts.apache.org/en/option.html#series-pictorialBar.pictorialBar)
      *
      *
      * @see https://echarts.apache.org/en/option.html#series-pictorialBar.symbolMargin
      */
    var symbolMargin: js.UndefOr[Double | String] = js.native
    
    /**
      * Specify the offset of graphic element according to its original
      * position.
      * Adopting `symbolOffset` is the final step in layout, which enables
      * adjustment of graphic element position.
      *
      * A absolute value can be set (like `10`), or a percent value can
      * be set (like `'120%'`、`['55%', 23]`), which is based on its
      * [symbolSize](https://echarts.apache.org/en/option.html#series-pictorialBar.symbolSize)
      * .
      *
      * For example, `[0, '-50%']` means the graphic element will be
      * adjusted upward half of the size of itself.
      *
      * For example:
      *
      * [see doc](https://echarts.apache.org/en/option.html#series-pictorialBar.pictorialBar)
      *
      * This attribute can be set at the
      * [root level of a series](https://echarts.apache.org/en/option.html#series-pictorialBar.symbolOffset)
      * , where all data items in the series will be affected by this
      * attribute. And this attribute can also be set at
      * [each data item](https://echarts.apache.org/en/option.html#series-pictorialBar.data.symbolOffset)
      * in
      * [series-pictorialBar.data](https://echarts.apache.org/en/option.htmlseries-pictorialBar.data)
      * , where only the data item is affected by this attribute.
      *
      * For example:
      *
      * [see doc](https://echarts.apache.org/en/option.html#series-pictorialBar.pictorialBar)
      *
      *
      * @default
      * [0, 0]
      * @see https://echarts.apache.org/en/option.html#series-pictorialBar.symbolOffset
      */
    var symbolOffset: js.UndefOr[js.Array[_]] = js.native
    
    /**
      * Image can be used as the pattern of graphic elements.
      *
      * [see doc](https://echarts.apache.org/en/option.html#series-pictorialBar.pictorialBar)
      *
      * `symbolPatternSize` specifies the size of pattern image.
      * For example, if `symbolPatternSize` is `400`, the pattern image
      * will be displayed at the size of `400px * 400px`.
      *
      * For example:
      *
      * [see doc](https://echarts.apache.org/en/option.html#series-pictorialBar.pictorialBar)
      *
      * This attribute can be set at the
      * [root level of a series](https://echarts.apache.org/en/option.html#series-pictorialBar.symbolPatternSize)
      * , where all data items in the series will be affected by this
      * attribute. And this attribute can also be set at
      * [each data item](https://echarts.apache.org/en/option.html#series-pictorialBar.data.symbolPatternSize)
      * in
      * [series-pictorialBar.data](https://echarts.apache.org/en/option.htmlseries-pictorialBar.data)
      * , where only the data item is affected by this attribute.
      *
      * For example:
      *
      * [see doc](https://echarts.apache.org/en/option.html#series-pictorialBar.pictorialBar)
      *
      *
      * @default
      * 400
      * @see https://echarts.apache.org/en/option.html#series-pictorialBar.symbolPatternSize
      */
    var symbolPatternSize: js.UndefOr[Double] = js.native
    
    /**
      * Specify the location of the graphic elements.
      * Optional values:
      *
      * + `'start'`: The edge of graphic element inscribes with the start
      * of the reference bar.
      * + `'end'`: The edge of graphic element inscribes with the end
      * of the reference bar.
      * + `'center'`: The graphic element is at the center of the reference
      * bar.
      *
      * For example:
      *
      * [see doc](https://echarts.apache.org/en/option.html#series-pictorialBar.pictorialBar)
      *
      * This attribute can be set at the
      * [root level of a series](https://echarts.apache.org/en/option.html#series-pictorialBar.symbolPosition)
      * , where all data items in the series will be affected by this
      * attribute. And this attribute can also be set at
      * [each data item](https://echarts.apache.org/en/option.html#series-pictorialBar.data.symbolPosition)
      * in
      * [series-pictorialBar.data](https://echarts.apache.org/en/option.htmlseries-pictorialBar.data)
      * , where only the data item is affected by this attribute.
      *
      * For example:
      *
      * [see doc](https://echarts.apache.org/en/option.html#series-pictorialBar.pictorialBar)
      *
      *
      * @default
      * "start"
      * @see https://echarts.apache.org/en/option.html#series-pictorialBar.symbolPosition
      */
    var symbolPosition: js.UndefOr[String] = js.native
    
    /**
      * Whether to repeat a graphic element. Optional values:
      *
      * + `false`/`null`/`undefined`: Do not repeat, that is, each graphic
      * element represents a data item.
      * + `true`: Repeat, that is, a group of repeated graphic elements
      * represent a data item.
      * The repeat times is calculated according to
      * [data](https://echarts.apache.org/en/option.html#series-pictorialBar.data)
      * .
      * + a number: Repeat, that is a group of repeated graphic elements
      * represent a data item.
      * The repeat times is always the given number.
      * + `'fixed'`: Repeat, that is a group of repeated graphic elements
      * represent a data item.
      * The repeat times is calcuated according to
      * [symbolBoundingData](https://echarts.apache.org/en/option.html#series-pictorialBar.symbolBoundingData)
      * , that is, the repeat times has nothing to do with
      * [data](https://echarts.apache.org/en/option.html#series-pictorialBar.data)
      *
      *
      * The setting is useful when graphic elements are used as background.
      *
      * For example:
      *
      * [see doc](https://echarts.apache.org/en/option.html#series-pictorialBar.pictorialBar)
      *
      * This attribute can be set at the
      * [root level of a series](https://echarts.apache.org/en/option.html#series-pictorialBar.symbolRepeat)
      * , where all data items in the series will be affected by this
      * attribute. And this attribute can also be set at
      * [each data item](https://echarts.apache.org/en/option.html#series-pictorialBar.data.symbolRepeat)
      * in
      * [series-pictorialBar.data](https://echarts.apache.org/en/option.htmlseries-pictorialBar.data)
      * , where only the data item is affected by this attribute.
      *
      * For example:
      *
      * [see doc](https://echarts.apache.org/en/option.html#series-pictorialBar.pictorialBar)
      *
      *
      * @see https://echarts.apache.org/en/option.html#series-pictorialBar.symbolRepeat
      */
    var symbolRepeat: js.UndefOr[Boolean | Double | String] = js.native
    
    /**
      * When
      * [symbolRepeat](https://echarts.apache.org/en/option.html#series-pictorialBar.symbolRepeat)
      * is used, `symbolRepeatDirection` specifies the render order of
      * the repeatd graphic elements.
      * The setting is useful in these cases below:
      *
      * + If
      * [symbolMargin](https://echarts.apache.org/en/option.html#series-pictorialBar.symbolMargin)
      * is set as a negative value, repeated elements will overlap with
      * each other.
      * `symbolRepeatDirection` can be used to specify the order of overlap.
      *
      * + If
      * [animationDelay](https://echarts.apache.org/en/option.html#series-pictorialBar.animationDelay)
      * or
      * [animationDelayUpdate](https://echarts.apache.org/en/option.html#series-pictorialBar.animationDelayUpdate)
      * is used, `symbolRepeatDirection` specifies the order of index.
      *
      * Optional values can be `'start'` and `'end'`.
      *
      * For example:
      *
      * [see doc](https://echarts.apache.org/en/option.html#series-pictorialBar.pictorialBar)
      *
      * This attribute can be set at the
      * [root level of a series](https://echarts.apache.org/en/option.html#series-pictorialBar.symbolRepeatDirection)
      * , where all data items in the series will be affected by this
      * attribute. And this attribute can also be set at
      * [each data item](https://echarts.apache.org/en/option.html#series-pictorialBar.data.symbolRepeatDirection)
      * in
      * [series-pictorialBar.data](https://echarts.apache.org/en/option.htmlseries-pictorialBar.data)
      * , where only the data item is affected by this attribute.
      *
      * For example:
      *
      * [see doc](https://echarts.apache.org/en/option.html#series-pictorialBar.pictorialBar)
      *
      *
      * @default
      * "start"
      * @see https://echarts.apache.org/en/option.html#series-pictorialBar.symbolRepeatDirection
      */
    var symbolRepeatDirection: js.UndefOr[String] = js.native
    
    /**
      * The degree of the rotation of a graphic element.
      *
      * Notice, `symbolRotate` will not affect the position of the graphic
      * element, but just rotating by its center.
      *
      * This attribute can be set at the
      * [root level of a series](https://echarts.apache.org/en/option.html#series-pictorialBar.symbolRotate)
      * , where all data items in the series will be affected by this
      * attribute. And this attribute can also be set at
      * [each data item](https://echarts.apache.org/en/option.html#series-pictorialBar.data.symbolRotate)
      * in
      * [series-pictorialBar.data](https://echarts.apache.org/en/option.htmlseries-pictorialBar.data)
      * , where only the data item is affected by this attribute.
      *
      * For example:
      *
      * [see doc](https://echarts.apache.org/en/option.html#series-pictorialBar.pictorialBar)
      *
      *
      * @see https://echarts.apache.org/en/option.html#series-pictorialBar.symbolRotate
      */
    var symbolRotate: js.UndefOr[Double] = js.native
    
    /**
      * Symbol size.
      *
      * It can be set as a array, which means \[width, height\].
      * For example, `[20, 10]` means width `20` and height `10`.
      * It can also be set as a single number, like `10`, which is equivalent
      * to `[10, 10]`.
      *
      * Absolute value can be used (like `10`), or percent value can
      * be used (like `'120%'`, `['55%', 23]`).
      *
      * When percent value is used, final size of the graphic element
      * is calculated based on its
      * [reference bar](https://echarts.apache.org/en/option.html#series-pictorialBar)
      * .
      *
      * For example, there is a reference bar based on x axis (that is,
      * it is a vertical bar), and
      * [symbolSize](https://echarts.apache.org/en/option.html#series-pictorialBar.symbolSize)
      * is set as `['30%', '50%']`, the final size of its graphic elements
      * is:
      *
      * + width: `<width of reference bar> * 30%`。
      * + height:
      * + If
      * [symbolRepeat](https://echarts.apache.org/en/option.html#series-pictorialBar.symbolRepeat)
      * is used: `<height of reference bar> * 50%`.
      * + If
      * [symbolRepeat](https://echarts.apache.org/en/option.html#series-pictorialBar.symbolRepeat)
      * is not used: `<height of reference bar> * 50%`.
      *
      * Analogously, the case that based on y axis can be obtained by
      * exchanging them.
      *
      * For example:
      *
      * [see doc](https://echarts.apache.org/en/option.html#series-pictorialBar.pictorialBar)
      *
      * This attribute can be set at the
      * [root level of a series](https://echarts.apache.org/en/option.html#series-pictorialBar.symbolSize)
      * , where all data items in the series will be affected by this
      * attribute. And this attribute can also be set at
      * [each data item](https://echarts.apache.org/en/option.html#series-pictorialBar.data.symbolSize)
      * in
      * [series-pictorialBar.data](https://echarts.apache.org/en/option.htmlseries-pictorialBar.data)
      * , where only the data item is affected by this attribute.
      *
      * For example:
      *
      * [see doc](https://echarts.apache.org/en/option.html#series-pictorialBar.pictorialBar)
      *
      *
      * @default
      * ['100%', '100%']
      * @see https://echarts.apache.org/en/option.html#series-pictorialBar.symbolSize
      */
    var symbolSize: js.UndefOr[js.Array[_] | Double] = js.native
    
    /**
      * tooltip settings in this series.
      *
      *
      * @see https://echarts.apache.org/en/option.html#series-pictorialBar.tooltip
      */
    var tooltip: js.UndefOr[BaseTooltip] = js.native
    
    /**
      * @default
      * "pictorialBar"
      * @see https://echarts.apache.org/en/option.html#series-pictorialBar.type
      */
    var `type`: js.UndefOr[String] = js.native
    
    /**
      * Index of
      * [x axis](https://echarts.apache.org/en/option.html#xAxis)
      * to combine with, which is useful for multiple x axes in one chart.
      *
      *
      * @see https://echarts.apache.org/en/option.html#series-pictorialBar.xAxisIndex
      */
    var xAxisIndex: js.UndefOr[Double] = js.native
    
    /**
      * Index of
      * [y axis](https://echarts.apache.org/en/option.html#yAxis)
      * to combine with, which is useful for multiple y axes in one chart.
      *
      *
      * @see https://echarts.apache.org/en/option.html#series-pictorialBar.yAxisIndex
      */
    var yAxisIndex: js.UndefOr[Double] = js.native
    
    /**
      * `z` value of all graghical elements in pictorial bar chart, which
      * controls order of drawing graphical components.
      * Components with smaller `z` values may be overwritten by those
      * with larger `z` values.
      *
      * `z` has a lower priority to `zlevel`, and will not create new
      * Canvas.
      *
      *
      * @default
      * 2
      * @see https://echarts.apache.org/en/option.html#series-pictorialBar.z
      */
    var z: js.UndefOr[Double] = js.native
    
    /**
      * `zlevel` value of all graghical elements in pictorial bar chart.
      *
      * `zlevel` is used to make layers with Canvas.
      * Graphical elements with different `zlevel` values will be placed
      * in different Canvases, which is a common optimization technique.
      * We can put those frequently changed elements (like those with
      * animations) to a seperate `zlevel`.
      * Notice that too many Canvases will increase memory cost, and
      * should be used carefully on mobile phones to avoid crash.
      *
      * Canvases with bigger `zlevel` will be placed on Canvases with
      * smaller `zlevel`.
      *
      *
      * @see https://echarts.apache.org/en/option.html#series-pictorialBar.zlevel
      */
    var zlevel: js.UndefOr[Double] = js.native
  }
  object SeriesPictorialBar {
    
    @scala.inline
    def apply(): SeriesPictorialBar = {
      val __obj = js.Dynamic.literal()
      __obj.asInstanceOf[SeriesPictorialBar]
    }
    
    @js.native
    trait DataObject extends StObject {
      
      /**
        * Whether to enable animation.
        *
        *
        * @default
        * "true"
        * @see https://echarts.apache.org/en/option.html#series-pictorialBar.data.animation
        */
      var animation: js.UndefOr[Boolean] = js.native
      
      /**
        * Specify the delay time before animation start.
        * Callback function can be used, where different delay time
        * can be used on different element.
        *
        * For example:
        *
        * [see doc](https://echarts.apache.org/en/option.html#series-pictorialBar.pictorialBar.data)
        *
        * For example:
        *
        * [see doc](https://echarts.apache.org/en/option.html#series-pictorialBar.pictorialBar.data)
        *
        *
        * @see https://echarts.apache.org/en/option.html#series-pictorialBar.data.animationDelay
        */
      var animationDelay: js.UndefOr[js.Function | Double] = js.native
      
      /**
        * Specify the delay time before update animation.
        * Callback function can be used, where different delay time
        * can be used on different element.
        *
        * For example:
        *
        * [see doc](https://echarts.apache.org/en/option.html#series-pictorialBar.pictorialBar.data)
        *
        * For example:
        *
        * [see doc](https://echarts.apache.org/en/option.html#series-pictorialBar.pictorialBar.data)
        *
        *
        * @see https://echarts.apache.org/en/option.html#series-pictorialBar.data.animationDelayUpdate
        */
      var animationDelayUpdate: js.UndefOr[js.Function | Double] = js.native
      
      /**
        * Duration of the first animation, which supports callback
        * function for different data to have different animation effect:
        *
        * [see doc](https://echarts.apache.org/en/option.html#series-pictorialBar.pictorialBar.data)
        *
        *
        * @default
        * 1000
        * @see https://echarts.apache.org/en/option.html#series-pictorialBar.data.animationDuration
        */
      var animationDuration: js.UndefOr[js.Function | Double] = js.native
      
      /**
        * Time for animation to complete, which supports callback function
        * for different data to have different animation effect:
        *
        * [see doc](https://echarts.apache.org/en/option.html#series-pictorialBar.pictorialBar.data)
        *
        *
        * @default
        * 300
        * @see https://echarts.apache.org/en/option.html#series-pictorialBar.data.animationDurationUpdate
        */
      var animationDurationUpdate: js.UndefOr[js.Function | Double] = js.native
      
      /**
        * Easing method used for the first animation.
        * Varied easing effects can be found at
        * [easing effect example](https://echarts.apache.org/examples/en/editor.html?c=line-easing)
        * .
        *
        *
        * @default
        * "cubicOut"
        * @see https://echarts.apache.org/en/option.html#series-pictorialBar.data.animationEasing
        */
      var animationEasing: js.UndefOr[String] = js.native
      
      /**
        * Easing method used for animation.
        *
        *
        * @default
        * "cubicOut"
        * @see https://echarts.apache.org/en/option.html#series-pictorialBar.data.animationEasingUpdate
        */
      var animationEasingUpdate: js.UndefOr[String] = js.native
      
      /**
        * Whether to set graphic number threshold to animation.
        * Animation will be disabled when graphic number is larger
        * than threshold.
        *
        *
        * @default
        * 2000
        * @see https://echarts.apache.org/en/option.html#series-pictorialBar.data.animationThreshold
        */
      var animationThreshold: js.UndefOr[Double] = js.native
      
      /**
        * @see https://echarts.apache.org/en/option.html#series-pictorialBar.data.emphasis
        */
      var emphasis: js.UndefOr[`18`] = js.native
      
      /**
        * Whether to enable hover animation.
        *
        * This attribute can be set at the
        * [root level of a series](https://echarts.apache.org/en/option.html#series-pictorialBar.hoverAnimation)
        * , where all data items in the series will be affected by
        * this attribute. And this attribute can also be set at
        * [each data item](https://echarts.apache.org/en/option.html#series-pictorialBar.data.hoverAnimation)
        * in
        * [series-pictorialBar.data](https://echarts.apache.org/en/option.htmlseries-pictorialBar.data)
        * , where only the data item is affected by this attribute.
        *
        * For example:
        *
        * [see doc](https://echarts.apache.org/en/option.html#series-pictorialBar.pictorialBar.data)
        *
        *
        * @see https://echarts.apache.org/en/option.html#series-pictorialBar.data.hoverAnimation
        */
      var hoverAnimation: js.UndefOr[Boolean] = js.native
      
      /**
        * @see https://echarts.apache.org/en/option.html#series-pictorialBar.data.itemStyle
        */
      var itemStyle: js.UndefOr[BorderType] = js.native
      
      /**
        * The style setting of the text label in a single bar.
        *
        *
        * @see https://echarts.apache.org/en/option.html#series-pictorialBar.data.label
        */
      var label: js.UndefOr[Distance] = js.native
      
      /**
        * The name of data item.
        *
        *
        * @see https://echarts.apache.org/en/option.html#series-pictorialBar.data.name
        */
      var name: js.UndefOr[String] = js.native
      
      /**
        * Specify the type of graphic elements.
        *
        * Icon types provided by ECharts includes `'circle'`, `'rect'`,
        * `'roundRect'`, `'triangle'`, `'diamond'`, `'pin'`, `'arrow'`,
        * `'none'`
        *
        * It can be set to an image with `'image://url'` , in which
        * URL is the link to an image, or `dataURI` of an image.
        *
        * An image URL example:
        *
        * ```
        * 'image://http://xxx.xxx.xxx/a/b.png'
        *
        * ```
        *
        * A `dataURI` example:
        *
        * [see doc](https://echarts.apache.org/en/option.html#series-pictorialBar.pictorialBar.data)
        *
        * Icons can be set to arbitrary vector path via `'path://'`
        * in ECharts.
        * As compared with raster image, vector paths prevent from
        * jagging and blurring when scaled, and have a better control
        * over changing colors.
        * Size of vectoer icon will be adapted automatically.
        * Refer to
        * [SVG PathData](http://www.w3.org/TR/SVG/paths.html#PathData)
        * for more information about format of path.
        * You may export vector paths from tools like Adobe Illustrator.
        *
        * For example:
        *
        * [see doc](https://echarts.apache.org/en/option.html#series-pictorialBar.pictorialBar.data)
        *
        * Example:
        *
        * [see doc](https://echarts.apache.org/en/option.html#series-pictorialBar.pictorialBar.data)
        *
        * This attribute can be set at the
        * [root level of a series](https://echarts.apache.org/en/option.html#series-pictorialBar.symbol)
        * , where all data items in the series will be affected by
        * this attribute. And this attribute can also be set at
        * [each data item](https://echarts.apache.org/en/option.html#series-pictorialBar.data.symbol)
        * in
        * [series-pictorialBar.data](https://echarts.apache.org/en/option.htmlseries-pictorialBar.data)
        * , where only the data item is affected by this attribute.
        *
        * For example:
        *
        * [see doc](https://echarts.apache.org/en/option.html#series-pictorialBar.pictorialBar.data)
        *
        *
        * @default
        * "circle"
        * @see https://echarts.apache.org/en/option.html#series-pictorialBar.data.symbol
        */
      var symbol: js.UndefOr[String] = js.native
      
      /**
        * Defines a bounding area availble for the graphic elements.
        * This setting gives a data, which will then be translated
        * to a coordinate on the coordinate system.
        * The coordinate specifies the bounding.
        * Namely, if `symbolBoundingData` is set, the final size (or
        * layout) of the graphic elements depend on the `symbolBoundingData`.
        *
        * When reference bar is horizontal, `symbolBoundingData` is
        * coresponding to x axis, while reference bar is vertical,
        * `symbolBoundingData` is coresponding to y axis.
        *
        * Rule:
        *
        * + If
        * [symbolRepeat](https://echarts.apache.org/en/option.html#series-pictorialBar.symbolRepeat)
        * is not used:
        *
        * `symbolBoundingData` is the same as the size of reference
        * bar by default.
        * The size of the graphic element is detemined by `symbolBoundingData`.
        * For example, if reference bar is vertical, its data is `24`,
        * `symbolSize` is set as `[30, '50%']`, `symbolBoundingData`
        * is set as `124`, the final size of the graphic element will
        * be `124 * 50% = 62`.
        * If `symbolBoundingData` is not set, the final size will be
        * `24 * 50% = 12`.
        *
        * + If
        * [symbolRepeat](https://echarts.apache.org/en/option.html#series-pictorialBar.symbolRepeat)
        * is used:
        *
        * `symbolBoundingData` is the extreme value of the coordinate
        * system.
        * `symbolBoundingData` defines a bounding area, where repeated
        * graphic elements layout according to
        * [symbolMargin](https://echarts.apache.org/en/option.html#series-pictorialBar.symbolMargin)
        * and
        * [symbolRepeat](https://echarts.apache.org/en/option.html#series-pictorialBar.symbolRepeat)
        * and
        * [symbolSize](https://echarts.apache.org/en/option.html#series-pictorialBar.symbolSize)
        *
        *
        * Both these settings determine the gap size of the repeated
        * graphic elements.
        *
        * `symbolBoundingData` is usually used in these cases:
        *
        * + When
        * [symbolCilp](https://echarts.apache.org/en/option.html#series-pictorialBar.symbolClip)
        * is used:
        *
        * And a series is used to display "amont value", while another
        * series is used to display "current value".
        * `symbolBoundingData` can be used to ensure that the graphic
        * elements of these two series are at the same size.
        *
        * For example:
        *
        * [see doc](https://echarts.apache.org/en/option.html#series-pictorialBar.pictorialBar.data)
        *
        * + When
        * [symbolRepeat](https://echarts.apache.org/en/option.html#series-pictorialBar.symbolRepeat)
        * is used:
        *
        * `symbolBoundingData` can be use to ensure the gaps of the
        * elements in different bars are the same.
        * Of cource, you can do not set `symbolBoundingData`, whose
        * default value is a stable value (extreme value of the coordinate
        * system).
        *
        * For example:
        *
        * [see doc](https://echarts.apache.org/en/option.html#series-pictorialBar.pictorialBar.data)
        *
        * `symbolBoundingData` can also be an array, such as `[-40,
        * 60]`, which specifies both negative and positive symbolBoundingData.
        *
        * Check this example:
        *
        * [see doc](https://echarts.apache.org/en/option.html#series-pictorialBar.pictorialBar.data)
        *
        * This attribute can be set at the
        * [root level of a series](https://echarts.apache.org/en/option.html#series-pictorialBar.symbolBoundingData)
        * , where all data items in the series will be affected by
        * this attribute. And this attribute can also be set at
        * [each data item](https://echarts.apache.org/en/option.html#series-pictorialBar.data.symbolBoundingData)
        * in
        * [series-pictorialBar.data](https://echarts.apache.org/en/option.htmlseries-pictorialBar.data)
        * , where only the data item is affected by this attribute.
        *
        * For example:
        *
        * [see doc](https://echarts.apache.org/en/option.html#series-pictorialBar.pictorialBar.data)
        *
        *
        * @see https://echarts.apache.org/en/option.html#series-pictorialBar.data.symbolBoundingData
        */
      var symbolBoundingData: js.UndefOr[Double] = js.native
      
      /**
        * Whether to clip graphic elements.
        *
        * + `false`/null/undefined: The whole graphic elements represent
        * the size of value.
        * + `true`: The clipped graphic elements reperent the size
        * of value.
        *
        * `symbolClip` is usually used in this case: both "amont value"
        * and "current value" should be displayed.
        * In this case, tow series can be used.
        * One for background, using complete graphic elements, while
        * another for current value, using clipped graphic elements.
        *
        * For example:
        *
        * [see doc](https://echarts.apache.org/en/option.html#series-pictorialBar.pictorialBar.data)
        *
        * Notice, in the example above,
        *
        * + The same
        * [symbolBoundingData](https://echarts.apache.org/en/option.html#series.pictorialBar.symbolBoundingData)
        * is used in "background series" and "current value seires",
        * which makes their graphic elements are the same size.
        * + A bigger
        * [z](https://echarts.apache.org/en/option.html#series.pictorialBar.z)
        * is set on "current value series", which makes it is over
        * "background series".
        *
        * This attribute can be set at the
        * [root level of a series](https://echarts.apache.org/en/option.html#series-pictorialBar.symbolClip)
        * , where all data items in the series will be affected by
        * this attribute. And this attribute can also be set at
        * [each data item](https://echarts.apache.org/en/option.html#series-pictorialBar.data.symbolClip)
        * in
        * [series-pictorialBar.data](https://echarts.apache.org/en/option.htmlseries-pictorialBar.data)
        * , where only the data item is affected by this attribute.
        *
        * For example:
        *
        * [see doc](https://echarts.apache.org/en/option.html#series-pictorialBar.pictorialBar.data)
        *
        *
        * @see https://echarts.apache.org/en/option.html#series-pictorialBar.data.symbolClip
        */
      var symbolClip: js.UndefOr[Boolean] = js.native
      
      /**
        * Specify margin of both sides of a graphic element.
        * ("both sides" means the two sides in the direction of its
        * value axis). It works only when
        * [symbolRepeat](https://echarts.apache.org/en/option.html#series-pictorialBar.symbolRepeat)
        * is used.
        *
        * Absolute value can be used (like `20`), or percent value
        * can be used (like `'-30%'`), which is based on its
        * [symbolSize](https://echarts.apache.org/en/option.html#series-pictorialBar.symbolSize)
        * .
        *
        * `symbolMargin` can be positive value or negative value, which
        * enables overlap of graphic elements when
        * [symbolRepeat](https://echarts.apache.org/en/option.html#series-pictorialBar.symbolRepeat)
        * is used.
        *
        * A `"!"` can be appended on the end of the value, like `"30%!"`
        * or `25!`, which means a extra blank will be added on the
        * both ends, otherwise the graphic elements on both ends will
        * reach the boundary by default.
        *
        * Notice:
        *
        * + When
        * [symbolRepeat](https://echarts.apache.org/en/option.html#series-pictorialBar.symbolRepeat)
        * is `true`/`'fixed'`: The given `symbolMargin` is just a reference
        * value.
        * The final gap of graphic elements will be calculated according
        * to
        * [symbolRepeat](https://echarts.apache.org/en/option.html#series-pictorialBar.symbolRepeat)
        * , `symbolMargin` and
        * [symbolBoundingData](https://echarts.apache.org/en/option.html#series-pictorialBar.symbolBoundingData)
        * .
        * + When
        * [symbolRepeat](https://echarts.apache.org/en/option.html#series-pictorialBar.symbolRepeat)
        * is set as a number: `symbolMargin` does not work any more.
        *
        * For example:
        *
        * [see doc](https://echarts.apache.org/en/option.html#series-pictorialBar.pictorialBar.data)
        *
        * This attribute can be set at the
        * [root level of a series](https://echarts.apache.org/en/option.html#series-pictorialBar.symbolMargin)
        * , where all data items in the series will be affected by
        * this attribute. And this attribute can also be set at
        * [each data item](https://echarts.apache.org/en/option.html#series-pictorialBar.data.symbolMargin)
        * in
        * [series-pictorialBar.data](https://echarts.apache.org/en/option.htmlseries-pictorialBar.data)
        * , where only the data item is affected by this attribute.
        *
        * For example:
        *
        * [see doc](https://echarts.apache.org/en/option.html#series-pictorialBar.pictorialBar.data)
        *
        *
        * @see https://echarts.apache.org/en/option.html#series-pictorialBar.data.symbolMargin
        */
      var symbolMargin: js.UndefOr[Double | String] = js.native
      
      /**
        * Specify the offset of graphic element according to its original
        * position.
        * Adopting `symbolOffset` is the final step in layout, which
        * enables adjustment of graphic element position.
        *
        * A absolute value can be set (like `10`), or a percent value
        * can be set (like `'120%'`、`['55%', 23]`), which is based
        * on its
        * [symbolSize](https://echarts.apache.org/en/option.html#series-pictorialBar.symbolSize)
        * .
        *
        * For example, `[0, '-50%']` means the graphic element will
        * be adjusted upward half of the size of itself.
        *
        * For example:
        *
        * [see doc](https://echarts.apache.org/en/option.html#series-pictorialBar.pictorialBar.data)
        *
        * This attribute can be set at the
        * [root level of a series](https://echarts.apache.org/en/option.html#series-pictorialBar.symbolOffset)
        * , where all data items in the series will be affected by
        * this attribute. And this attribute can also be set at
        * [each data item](https://echarts.apache.org/en/option.html#series-pictorialBar.data.symbolOffset)
        * in
        * [series-pictorialBar.data](https://echarts.apache.org/en/option.htmlseries-pictorialBar.data)
        * , where only the data item is affected by this attribute.
        *
        * For example:
        *
        * [see doc](https://echarts.apache.org/en/option.html#series-pictorialBar.pictorialBar.data)
        *
        *
        * @default
        * [0, 0]
        * @see https://echarts.apache.org/en/option.html#series-pictorialBar.data.symbolOffset
        */
      var symbolOffset: js.UndefOr[js.Array[_]] = js.native
      
      /**
        * Image can be used as the pattern of graphic elements.
        *
        * [see doc](https://echarts.apache.org/en/option.html#series-pictorialBar.pictorialBar.data)
        *
        * `symbolPatternSize` specifies the size of pattern image.
        * For example, if `symbolPatternSize` is `400`, the pattern
        * image will be displayed at the size of `400px * 400px`.
        *
        * For example:
        *
        * [see doc](https://echarts.apache.org/en/option.html#series-pictorialBar.pictorialBar.data)
        *
        * This attribute can be set at the
        * [root level of a series](https://echarts.apache.org/en/option.html#series-pictorialBar.symbolPatternSize)
        * , where all data items in the series will be affected by
        * this attribute. And this attribute can also be set at
        * [each data item](https://echarts.apache.org/en/option.html#series-pictorialBar.data.symbolPatternSize)
        * in
        * [series-pictorialBar.data](https://echarts.apache.org/en/option.htmlseries-pictorialBar.data)
        * , where only the data item is affected by this attribute.
        *
        * For example:
        *
        * [see doc](https://echarts.apache.org/en/option.html#series-pictorialBar.pictorialBar.data)
        *
        *
        * @default
        * 400
        * @see https://echarts.apache.org/en/option.html#series-pictorialBar.data.symbolPatternSize
        */
      var symbolPatternSize: js.UndefOr[Double] = js.native
      
      /**
        * Specify the location of the graphic elements.
        * Optional values:
        *
        * + `'start'`: The edge of graphic element inscribes with the
        * start of the reference bar.
        * + `'end'`: The edge of graphic element inscribes with the
        * end of the reference bar.
        * + `'center'`: The graphic element is at the center of the
        * reference bar.
        *
        * For example:
        *
        * [see doc](https://echarts.apache.org/en/option.html#series-pictorialBar.pictorialBar.data)
        *
        * This attribute can be set at the
        * [root level of a series](https://echarts.apache.org/en/option.html#series-pictorialBar.symbolPosition)
        * , where all data items in the series will be affected by
        * this attribute. And this attribute can also be set at
        * [each data item](https://echarts.apache.org/en/option.html#series-pictorialBar.data.symbolPosition)
        * in
        * [series-pictorialBar.data](https://echarts.apache.org/en/option.htmlseries-pictorialBar.data)
        * , where only the data item is affected by this attribute.
        *
        * For example:
        *
        * [see doc](https://echarts.apache.org/en/option.html#series-pictorialBar.pictorialBar.data)
        *
        *
        * @default
        * "start"
        * @see https://echarts.apache.org/en/option.html#series-pictorialBar.data.symbolPosition
        */
      var symbolPosition: js.UndefOr[String] = js.native
      
      /**
        * Whether to repeat a graphic element. Optional values:
        *
        * + `false`/`null`/`undefined`: Do not repeat, that is, each
        * graphic element represents a data item.
        * + `true`: Repeat, that is, a group of repeated graphic elements
        * represent a data item.
        * The repeat times is calculated according to
        * [data](https://echarts.apache.org/en/option.html#series-pictorialBar.data)
        * .
        * + a number: Repeat, that is a group of repeated graphic elements
        * represent a data item.
        * The repeat times is always the given number.
        * + `'fixed'`: Repeat, that is a group of repeated graphic
        * elements represent a data item.
        * The repeat times is calcuated according to
        * [symbolBoundingData](https://echarts.apache.org/en/option.html#series-pictorialBar.symbolBoundingData)
        * , that is, the repeat times has nothing to do with
        * [data](https://echarts.apache.org/en/option.html#series-pictorialBar.data)
        *
        *
        * The setting is useful when graphic elements are used as background.
        *
        * For example:
        *
        * [see doc](https://echarts.apache.org/en/option.html#series-pictorialBar.pictorialBar.data)
        *
        * This attribute can be set at the
        * [root level of a series](https://echarts.apache.org/en/option.html#series-pictorialBar.symbolRepeat)
        * , where all data items in the series will be affected by
        * this attribute. And this attribute can also be set at
        * [each data item](https://echarts.apache.org/en/option.html#series-pictorialBar.data.symbolRepeat)
        * in
        * [series-pictorialBar.data](https://echarts.apache.org/en/option.htmlseries-pictorialBar.data)
        * , where only the data item is affected by this attribute.
        *
        * For example:
        *
        * [see doc](https://echarts.apache.org/en/option.html#series-pictorialBar.pictorialBar.data)
        *
        *
        * @see https://echarts.apache.org/en/option.html#series-pictorialBar.data.symbolRepeat
        */
      var symbolRepeat: js.UndefOr[Boolean | Double | String] = js.native
      
      /**
        * When
        * [symbolRepeat](https://echarts.apache.org/en/option.html#series-pictorialBar.symbolRepeat)
        * is used, `symbolRepeatDirection` specifies the render order
        * of the repeatd graphic elements.
        * The setting is useful in these cases below:
        *
        * + If
        * [symbolMargin](https://echarts.apache.org/en/option.html#series-pictorialBar.symbolMargin)
        * is set as a negative value, repeated elements will overlap
        * with each other.
        * `symbolRepeatDirection` can be used to specify the order
        * of overlap.
        *
        * + If
        * [animationDelay](https://echarts.apache.org/en/option.html#series-pictorialBar.animationDelay)
        * or
        * [animationDelayUpdate](https://echarts.apache.org/en/option.html#series-pictorialBar.animationDelayUpdate)
        * is used, `symbolRepeatDirection` specifies the order of index.
        *
        * Optional values can be `'start'` and `'end'`.
        *
        * For example:
        *
        * [see doc](https://echarts.apache.org/en/option.html#series-pictorialBar.pictorialBar.data)
        *
        * This attribute can be set at the
        * [root level of a series](https://echarts.apache.org/en/option.html#series-pictorialBar.symbolRepeatDirection)
        * , where all data items in the series will be affected by
        * this attribute. And this attribute can also be set at
        * [each data item](https://echarts.apache.org/en/option.html#series-pictorialBar.data.symbolRepeatDirection)
        * in
        * [series-pictorialBar.data](https://echarts.apache.org/en/option.htmlseries-pictorialBar.data)
        * , where only the data item is affected by this attribute.
        *
        * For example:
        *
        * [see doc](https://echarts.apache.org/en/option.html#series-pictorialBar.pictorialBar.data)
        *
        *
        * @default
        * "start"
        * @see https://echarts.apache.org/en/option.html#series-pictorialBar.data.symbolRepeatDirection
        */
      var symbolRepeatDirection: js.UndefOr[String] = js.native
      
      /**
        * The degree of the rotation of a graphic element.
        *
        * Notice, `symbolRotate` will not affect the position of the
        * graphic element, but just rotating by its center.
        *
        * This attribute can be set at the
        * [root level of a series](https://echarts.apache.org/en/option.html#series-pictorialBar.symbolRotate)
        * , where all data items in the series will be affected by
        * this attribute. And this attribute can also be set at
        * [each data item](https://echarts.apache.org/en/option.html#series-pictorialBar.data.symbolRotate)
        * in
        * [series-pictorialBar.data](https://echarts.apache.org/en/option.htmlseries-pictorialBar.data)
        * , where only the data item is affected by this attribute.
        *
        * For example:
        *
        * [see doc](https://echarts.apache.org/en/option.html#series-pictorialBar.pictorialBar.data)
        *
        *
        * @see https://echarts.apache.org/en/option.html#series-pictorialBar.data.symbolRotate
        */
      var symbolRotate: js.UndefOr[Double] = js.native
      
      /**
        * Symbol size.
        *
        * It can be set as a array, which means \[width, height\].
        * For example, `[20, 10]` means width `20` and height `10`.
        * It can also be set as a single number, like `10`, which is
        * equivalent to `[10, 10]`.
        *
        * Absolute value can be used (like `10`), or percent value
        * can be used (like `'120%'`, `['55%', 23]`).
        *
        * When percent value is used, final size of the graphic element
        * is calculated based on its
        * [reference bar](https://echarts.apache.org/en/option.html#series-pictorialBar)
        * .
        *
        * For example, there is a reference bar based on x axis (that
        * is, it is a vertical bar), and
        * [symbolSize](https://echarts.apache.org/en/option.html#series-pictorialBar.symbolSize)
        * is set as `['30%', '50%']`, the final size of its graphic
        * elements is:
        *
        * + width: `<width of reference bar> * 30%`。
        * + height:
        * + If
        * [symbolRepeat](https://echarts.apache.org/en/option.html#series-pictorialBar.symbolRepeat)
        * is used: `<height of reference bar> * 50%`.
        * + If
        * [symbolRepeat](https://echarts.apache.org/en/option.html#series-pictorialBar.symbolRepeat)
        * is not used: `<height of reference bar> * 50%`.
        *
        * Analogously, the case that based on y axis can be obtained
        * by exchanging them.
        *
        * For example:
        *
        * [see doc](https://echarts.apache.org/en/option.html#series-pictorialBar.pictorialBar.data)
        *
        * This attribute can be set at the
        * [root level of a series](https://echarts.apache.org/en/option.html#series-pictorialBar.symbolSize)
        * , where all data items in the series will be affected by
        * this attribute. And this attribute can also be set at
        * [each data item](https://echarts.apache.org/en/option.html#series-pictorialBar.data.symbolSize)
        * in
        * [series-pictorialBar.data](https://echarts.apache.org/en/option.htmlseries-pictorialBar.data)
        * , where only the data item is affected by this attribute.
        *
        * For example:
        *
        * [see doc](https://echarts.apache.org/en/option.html#series-pictorialBar.pictorialBar.data)
        *
        *
        * @default
        * ['100%', '100%']
        * @see https://echarts.apache.org/en/option.html#series-pictorialBar.data.symbolSize
        */
      var symbolSize: js.UndefOr[js.Array[_] | Double] = js.native
      
      /**
        * tooltip settings in this series data.
        *
        *
        * @see https://echarts.apache.org/en/option.html#series-pictorialBar.data.tooltip
        */
      var tooltip: js.UndefOr[BaseTooltip] = js.native
      
      /**
        * The value of a single data item.
        *
        *
        * @see https://echarts.apache.org/en/option.html#series-pictorialBar.data.value
        */
      var value: js.UndefOr[Double] = js.native
      
      /**
        * Specify the relationship of overlap between gaphic elements.
        * A bigger value means higher.
        *
        *
        * @see https://echarts.apache.org/en/option.html#series-pictorialBar.data.z
        */
      var z: js.UndefOr[Double] = js.native
    }
    object DataObject {
      
      @scala.inline
      def apply(): typingsSlinky.echarts.echarts.EChartOption.SeriesPictorialBar.DataObject = {
        val __obj = js.Dynamic.literal()
        __obj.asInstanceOf[typingsSlinky.echarts.echarts.EChartOption.SeriesPictorialBar.DataObject]
      }
      
      @scala.inline
      implicit class DataObjectMutableBuilder[Self <: typingsSlinky.echarts.echarts.EChartOption.SeriesPictorialBar.DataObject] (val x: Self) extends AnyVal {
        
        @scala.inline
        def setAnimation(value: Boolean): Self = StObject.set(x, "animation", value.asInstanceOf[js.Any])
        
        @scala.inline
        def setAnimationDelay(value: js.Function | Double): Self = StObject.set(x, "animationDelay", value.asInstanceOf[js.Any])
        
        @scala.inline
        def setAnimationDelayUndefined: Self = StObject.set(x, "animationDelay", js.undefined)
        
        @scala.inline
        def setAnimationDelayUpdate(value: js.Function | Double): Self = StObject.set(x, "animationDelayUpdate", value.asInstanceOf[js.Any])
        
        @scala.inline
        def setAnimationDelayUpdateUndefined: Self = StObject.set(x, "animationDelayUpdate", js.undefined)
        
        @scala.inline
        def setAnimationDuration(value: js.Function | Double): Self = StObject.set(x, "animationDuration", value.asInstanceOf[js.Any])
        
        @scala.inline
        def setAnimationDurationUndefined: Self = StObject.set(x, "animationDuration", js.undefined)
        
        @scala.inline
        def setAnimationDurationUpdate(value: js.Function | Double): Self = StObject.set(x, "animationDurationUpdate", value.asInstanceOf[js.Any])
        
        @scala.inline
        def setAnimationDurationUpdateUndefined: Self = StObject.set(x, "animationDurationUpdate", js.undefined)
        
        @scala.inline
        def setAnimationEasing(value: String): Self = StObject.set(x, "animationEasing", value.asInstanceOf[js.Any])
        
        @scala.inline
        def setAnimationEasingUndefined: Self = StObject.set(x, "animationEasing", js.undefined)
        
        @scala.inline
        def setAnimationEasingUpdate(value: String): Self = StObject.set(x, "animationEasingUpdate", value.asInstanceOf[js.Any])
        
        @scala.inline
        def setAnimationEasingUpdateUndefined: Self = StObject.set(x, "animationEasingUpdate", js.undefined)
        
        @scala.inline
        def setAnimationThreshold(value: Double): Self = StObject.set(x, "animationThreshold", value.asInstanceOf[js.Any])
        
        @scala.inline
        def setAnimationThresholdUndefined: Self = StObject.set(x, "animationThreshold", js.undefined)
        
        @scala.inline
        def setAnimationUndefined: Self = StObject.set(x, "animation", js.undefined)
        
        @scala.inline
        def setEmphasis(value: `18`): Self = StObject.set(x, "emphasis", value.asInstanceOf[js.Any])
        
        @scala.inline
        def setEmphasisUndefined: Self = StObject.set(x, "emphasis", js.undefined)
        
        @scala.inline
        def setHoverAnimation(value: Boolean): Self = StObject.set(x, "hoverAnimation", value.asInstanceOf[js.Any])
        
        @scala.inline
        def setHoverAnimationUndefined: Self = StObject.set(x, "hoverAnimation", js.undefined)
        
        @scala.inline
        def setItemStyle(value: BorderType): Self = StObject.set(x, "itemStyle", value.asInstanceOf[js.Any])
        
        @scala.inline
        def setItemStyleUndefined: Self = StObject.set(x, "itemStyle", js.undefined)
        
        @scala.inline
        def setLabel(value: Distance): Self = StObject.set(x, "label", value.asInstanceOf[js.Any])
        
        @scala.inline
        def setLabelUndefined: Self = StObject.set(x, "label", js.undefined)
        
        @scala.inline
        def setName(value: String): Self = StObject.set(x, "name", value.asInstanceOf[js.Any])
        
        @scala.inline
        def setNameUndefined: Self = StObject.set(x, "name", js.undefined)
        
        @scala.inline
        def setSymbol(value: String): Self = StObject.set(x, "symbol", value.asInstanceOf[js.Any])
        
        @scala.inline
        def setSymbolBoundingData(value: Double): Self = StObject.set(x, "symbolBoundingData", value.asInstanceOf[js.Any])
        
        @scala.inline
        def setSymbolBoundingDataUndefined: Self = StObject.set(x, "symbolBoundingData", js.undefined)
        
        @scala.inline
        def setSymbolClip(value: Boolean): Self = StObject.set(x, "symbolClip", value.asInstanceOf[js.Any])
        
        @scala.inline
        def setSymbolClipUndefined: Self = StObject.set(x, "symbolClip", js.undefined)
        
        @scala.inline
        def setSymbolMargin(value: Double | String): Self = StObject.set(x, "symbolMargin", value.asInstanceOf[js.Any])
        
        @scala.inline
        def setSymbolMarginUndefined: Self = StObject.set(x, "symbolMargin", js.undefined)
        
        @scala.inline
        def setSymbolOffset(value: js.Array[_]): Self = StObject.set(x, "symbolOffset", value.asInstanceOf[js.Any])
        
        @scala.inline
        def setSymbolOffsetUndefined: Self = StObject.set(x, "symbolOffset", js.undefined)
        
        @scala.inline
        def setSymbolOffsetVarargs(value: js.Any*): Self = StObject.set(x, "symbolOffset", js.Array(value :_*))
        
        @scala.inline
        def setSymbolPatternSize(value: Double): Self = StObject.set(x, "symbolPatternSize", value.asInstanceOf[js.Any])
        
        @scala.inline
        def setSymbolPatternSizeUndefined: Self = StObject.set(x, "symbolPatternSize", js.undefined)
        
        @scala.inline
        def setSymbolPosition(value: String): Self = StObject.set(x, "symbolPosition", value.asInstanceOf[js.Any])
        
        @scala.inline
        def setSymbolPositionUndefined: Self = StObject.set(x, "symbolPosition", js.undefined)
        
        @scala.inline
        def setSymbolRepeat(value: Boolean | Double | String): Self = StObject.set(x, "symbolRepeat", value.asInstanceOf[js.Any])
        
        @scala.inline
        def setSymbolRepeatDirection(value: String): Self = StObject.set(x, "symbolRepeatDirection", value.asInstanceOf[js.Any])
        
        @scala.inline
        def setSymbolRepeatDirectionUndefined: Self = StObject.set(x, "symbolRepeatDirection", js.undefined)
        
        @scala.inline
        def setSymbolRepeatUndefined: Self = StObject.set(x, "symbolRepeat", js.undefined)
        
        @scala.inline
        def setSymbolRotate(value: Double): Self = StObject.set(x, "symbolRotate", value.asInstanceOf[js.Any])
        
        @scala.inline
        def setSymbolRotateUndefined: Self = StObject.set(x, "symbolRotate", js.undefined)
        
        @scala.inline
        def setSymbolSize(value: js.Array[_] | Double): Self = StObject.set(x, "symbolSize", value.asInstanceOf[js.Any])
        
        @scala.inline
        def setSymbolSizeUndefined: Self = StObject.set(x, "symbolSize", js.undefined)
        
        @scala.inline
        def setSymbolSizeVarargs(value: js.Any*): Self = StObject.set(x, "symbolSize", js.Array(value :_*))
        
        @scala.inline
        def setSymbolUndefined: Self = StObject.set(x, "symbol", js.undefined)
        
        @scala.inline
        def setTooltip(value: BaseTooltip): Self = StObject.set(x, "tooltip", value.asInstanceOf[js.Any])
        
        @scala.inline
        def setTooltipUndefined: Self = StObject.set(x, "tooltip", js.undefined)
        
        @scala.inline
        def setValue(value: Double): Self = StObject.set(x, "value", value.asInstanceOf[js.Any])
        
        @scala.inline
        def setValueUndefined: Self = StObject.set(x, "value", js.undefined)
        
        @scala.inline
        def setZ(value: Double): Self = StObject.set(x, "z", value.asInstanceOf[js.Any])
        
        @scala.inline
        def setZUndefined: Self = StObject.set(x, "z", js.undefined)
      }
    }
    
    @scala.inline
    implicit class SeriesPictorialBarMutableBuilder[Self <: SeriesPictorialBar] (val x: Self) extends AnyVal {
      
      @scala.inline
      def setAnimation(value: Boolean): Self = StObject.set(x, "animation", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setAnimationDuration(value: js.Function | Double): Self = StObject.set(x, "animationDuration", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setAnimationDurationUndefined: Self = StObject.set(x, "animationDuration", js.undefined)
      
      @scala.inline
      def setAnimationDurationUpdate(value: js.Function | Double): Self = StObject.set(x, "animationDurationUpdate", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setAnimationDurationUpdateUndefined: Self = StObject.set(x, "animationDurationUpdate", js.undefined)
      
      @scala.inline
      def setAnimationEasing(value: String): Self = StObject.set(x, "animationEasing", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setAnimationEasingUndefined: Self = StObject.set(x, "animationEasing", js.undefined)
      
      @scala.inline
      def setAnimationEasingUpdate(value: `17`): Self = StObject.set(x, "animationEasingUpdate", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setAnimationEasingUpdateUndefined: Self = StObject.set(x, "animationEasingUpdate", js.undefined)
      
      @scala.inline
      def setAnimationThreshold(value: Double): Self = StObject.set(x, "animationThreshold", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setAnimationThresholdUndefined: Self = StObject.set(x, "animationThreshold", js.undefined)
      
      @scala.inline
      def setAnimationUndefined: Self = StObject.set(x, "animation", js.undefined)
      
      @scala.inline
      def setBarCategoryGap(value: String): Self = StObject.set(x, "barCategoryGap", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setBarCategoryGapUndefined: Self = StObject.set(x, "barCategoryGap", js.undefined)
      
      @scala.inline
      def setBarGap(value: String): Self = StObject.set(x, "barGap", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setBarGapUndefined: Self = StObject.set(x, "barGap", js.undefined)
      
      @scala.inline
      def setBarMaxWidth(value: Double): Self = StObject.set(x, "barMaxWidth", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setBarMaxWidthUndefined: Self = StObject.set(x, "barMaxWidth", js.undefined)
      
      @scala.inline
      def setBarMinHeight(value: Double): Self = StObject.set(x, "barMinHeight", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setBarMinHeightUndefined: Self = StObject.set(x, "barMinHeight", js.undefined)
      
      @scala.inline
      def setBarWidth(value: Double): Self = StObject.set(x, "barWidth", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setBarWidthUndefined: Self = StObject.set(x, "barWidth", js.undefined)
      
      @scala.inline
      def setCoordinateSystem(value: String): Self = StObject.set(x, "coordinateSystem", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setCoordinateSystemUndefined: Self = StObject.set(x, "coordinateSystem", js.undefined)
      
      @scala.inline
      def setCursor(value: String): Self = StObject.set(x, "cursor", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setCursorUndefined: Self = StObject.set(x, "cursor", js.undefined)
      
      @scala.inline
      def setData(
        value: js.Array[
              (js.Array[
                Unit | Double | String | typingsSlinky.echarts.echarts.EChartOption.SeriesPictorialBar.DataObject
              ]) | typingsSlinky.echarts.echarts.EChartOption.SeriesPictorialBar.DataObject | Double | String | Unit
            ]
      ): Self = StObject.set(x, "data", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setDataUndefined: Self = StObject.set(x, "data", js.undefined)
      
      @scala.inline
      def setDataVarargs(
        value: ((js.Array[
              Unit | Double | String | typingsSlinky.echarts.echarts.EChartOption.SeriesPictorialBar.DataObject
            ]) | typingsSlinky.echarts.echarts.EChartOption.SeriesPictorialBar.DataObject | Double | String | Unit)*
      ): Self = StObject.set(x, "data", js.Array(value :_*))
      
      @scala.inline
      def setDimensions(value: js.Array[_]): Self = StObject.set(x, "dimensions", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setDimensionsUndefined: Self = StObject.set(x, "dimensions", js.undefined)
      
      @scala.inline
      def setDimensionsVarargs(value: js.Any*): Self = StObject.set(x, "dimensions", js.Array(value :_*))
      
      @scala.inline
      def setEmphasis(value: `8`): Self = StObject.set(x, "emphasis", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setEmphasisUndefined: Self = StObject.set(x, "emphasis", js.undefined)
      
      @scala.inline
      def setEncode(value: js.Object): Self = StObject.set(x, "encode", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setEncodeUndefined: Self = StObject.set(x, "encode", js.undefined)
      
      @scala.inline
      def setHoverAnimation(value: AnimationDelayAnimationDelayUpdate): Self = StObject.set(x, "hoverAnimation", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setHoverAnimationUndefined: Self = StObject.set(x, "hoverAnimation", js.undefined)
      
      @scala.inline
      def setId(value: String): Self = StObject.set(x, "id", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setIdUndefined: Self = StObject.set(x, "id", js.undefined)
      
      @scala.inline
      def setItemStyle(value: BorderType): Self = StObject.set(x, "itemStyle", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setItemStyleUndefined: Self = StObject.set(x, "itemStyle", js.undefined)
      
      @scala.inline
      def setLabel(value: BorderRadius): Self = StObject.set(x, "label", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setLabelUndefined: Self = StObject.set(x, "label", js.undefined)
      
      @scala.inline
      def setLegendHoverLink(value: Boolean): Self = StObject.set(x, "legendHoverLink", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setLegendHoverLinkUndefined: Self = StObject.set(x, "legendHoverLink", js.undefined)
      
      @scala.inline
      def setMarkArea(value: AnimationDelayUpdate): Self = StObject.set(x, "markArea", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setMarkAreaUndefined: Self = StObject.set(x, "markArea", js.undefined)
      
      @scala.inline
      def setMarkLine(value: AnimationDelay): Self = StObject.set(x, "markLine", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setMarkLineUndefined: Self = StObject.set(x, "markLine", js.undefined)
      
      @scala.inline
      def setMarkPoint(value: AnimationDuration): Self = StObject.set(x, "markPoint", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setMarkPointUndefined: Self = StObject.set(x, "markPoint", js.undefined)
      
      @scala.inline
      def setName(value: String): Self = StObject.set(x, "name", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setNameUndefined: Self = StObject.set(x, "name", js.undefined)
      
      @scala.inline
      def setSilent(value: Boolean): Self = StObject.set(x, "silent", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setSilentUndefined: Self = StObject.set(x, "silent", js.undefined)
      
      @scala.inline
      def setSymbol(value: String): Self = StObject.set(x, "symbol", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setSymbolBoundingData(value: Double): Self = StObject.set(x, "symbolBoundingData", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setSymbolBoundingDataUndefined: Self = StObject.set(x, "symbolBoundingData", js.undefined)
      
      @scala.inline
      def setSymbolClip(value: Boolean): Self = StObject.set(x, "symbolClip", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setSymbolClipUndefined: Self = StObject.set(x, "symbolClip", js.undefined)
      
      @scala.inline
      def setSymbolMargin(value: Double | String): Self = StObject.set(x, "symbolMargin", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setSymbolMarginUndefined: Self = StObject.set(x, "symbolMargin", js.undefined)
      
      @scala.inline
      def setSymbolOffset(value: js.Array[_]): Self = StObject.set(x, "symbolOffset", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setSymbolOffsetUndefined: Self = StObject.set(x, "symbolOffset", js.undefined)
      
      @scala.inline
      def setSymbolOffsetVarargs(value: js.Any*): Self = StObject.set(x, "symbolOffset", js.Array(value :_*))
      
      @scala.inline
      def setSymbolPatternSize(value: Double): Self = StObject.set(x, "symbolPatternSize", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setSymbolPatternSizeUndefined: Self = StObject.set(x, "symbolPatternSize", js.undefined)
      
      @scala.inline
      def setSymbolPosition(value: String): Self = StObject.set(x, "symbolPosition", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setSymbolPositionUndefined: Self = StObject.set(x, "symbolPosition", js.undefined)
      
      @scala.inline
      def setSymbolRepeat(value: Boolean | Double | String): Self = StObject.set(x, "symbolRepeat", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setSymbolRepeatDirection(value: String): Self = StObject.set(x, "symbolRepeatDirection", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setSymbolRepeatDirectionUndefined: Self = StObject.set(x, "symbolRepeatDirection", js.undefined)
      
      @scala.inline
      def setSymbolRepeatUndefined: Self = StObject.set(x, "symbolRepeat", js.undefined)
      
      @scala.inline
      def setSymbolRotate(value: Double): Self = StObject.set(x, "symbolRotate", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setSymbolRotateUndefined: Self = StObject.set(x, "symbolRotate", js.undefined)
      
      @scala.inline
      def setSymbolSize(value: js.Array[_] | Double): Self = StObject.set(x, "symbolSize", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setSymbolSizeUndefined: Self = StObject.set(x, "symbolSize", js.undefined)
      
      @scala.inline
      def setSymbolSizeVarargs(value: js.Any*): Self = StObject.set(x, "symbolSize", js.Array(value :_*))
      
      @scala.inline
      def setSymbolUndefined: Self = StObject.set(x, "symbol", js.undefined)
      
      @scala.inline
      def setTooltip(value: BaseTooltip): Self = StObject.set(x, "tooltip", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setTooltipUndefined: Self = StObject.set(x, "tooltip", js.undefined)
      
      @scala.inline
      def setType(value: String): Self = StObject.set(x, "type", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setTypeUndefined: Self = StObject.set(x, "type", js.undefined)
      
      @scala.inline
      def setXAxisIndex(value: Double): Self = StObject.set(x, "xAxisIndex", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setXAxisIndexUndefined: Self = StObject.set(x, "xAxisIndex", js.undefined)
      
      @scala.inline
      def setYAxisIndex(value: Double): Self = StObject.set(x, "yAxisIndex", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setYAxisIndexUndefined: Self = StObject.set(x, "yAxisIndex", js.undefined)
      
      @scala.inline
      def setZ(value: Double): Self = StObject.set(x, "z", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setZUndefined: Self = StObject.set(x, "z", js.undefined)
      
      @scala.inline
      def setZlevel(value: Double): Self = StObject.set(x, "zlevel", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setZlevelUndefined: Self = StObject.set(x, "zlevel", js.undefined)
    }
  }
  
  /**
    * **pie chart**
    *
    * The pie chart is mainly used for showing proportion of different
    * categories.
    * Each arc length represents the proportion of data quantity.
    *
    * **Tip:** The pie chart is more suitable for illustrating the numerical
    * proportion.
    * If you just to present the numerical differences of various categories,
    * the
    * [bar graph](https://echarts.apache.org/en/option.htmlbar)
    * chart is more suggested.
    * Because compared to tiny length difference, people is less sensitive
    * to the minor radian difference.
    * Otherwise, it can also be shown as Nightingale chart by using the
    * [roseType](https://echarts.apache.org/en/option.html#series-pie.roseType)
    * to distinguish different data through radius.
    *
    * **The below example shows a customized Nightingale chart:**
    *
    * [see doc](https://echarts.apache.org/en/option.html#series-pie)
    *
    *
    * @see https://echarts.apache.org/en/option.html#series-pie
    */
  @js.native
  trait SeriesPie extends Series {
    
    /**
      * Whether to enable animation.
      *
      *
      * @default
      * "true"
      * @see https://echarts.apache.org/en/option.html#series-pie.animation
      */
    var animation: js.UndefOr[Boolean] = js.native
    
    /**
      * Delay before updating the first animation, which supports callback
      * function for different data to have different animation effect.
      *
      * For example:
      *
      * [see doc](https://echarts.apache.org/en/option.html#series-pie.pie)
      *
      * See
      * [this example](https://echarts.apache.org/examples/en/editor.html?c=bar-animation-delay)
      * for more information.
      *
      *
      * @see https://echarts.apache.org/en/option.html#series-pie.animationDelay
      */
    var animationDelay: js.UndefOr[js.Function | Double] = js.native
    
    /**
      * Delay before updating animation, which supports callback function
      * for different data to have different animation effect.
      *
      * For example:
      *
      * [see doc](https://echarts.apache.org/en/option.html#series-pie.pie)
      *
      * See
      * [this example](https://echarts.apache.org/examples/en/editor.html?c=bar-animation-delay)
      * for more information.
      *
      *
      * @see https://echarts.apache.org/en/option.html#series-pie.animationDelayUpdate
      */
    var animationDelayUpdate: js.UndefOr[js.Function | Double] = js.native
    
    /**
      * Duration of the first animation, which supports callback function
      * for different data to have different animation effect:
      *
      * [see doc](https://echarts.apache.org/en/option.html#series-pie.pie)
      *
      *
      * @default
      * 1000
      * @see https://echarts.apache.org/en/option.html#series-pie.animationDuration
      */
    var animationDuration: js.UndefOr[js.Function | Double] = js.native
    
    /**
      * Time for animation to complete, which supports callback function
      * for different data to have different animation effect:
      *
      * [see doc](https://echarts.apache.org/en/option.html#series-pie.pie)
      *
      *
      * @default
      * 300
      * @see https://echarts.apache.org/en/option.html#series-pie.animationDurationUpdate
      */
    var animationDurationUpdate: js.UndefOr[js.Function | Double] = js.native
    
    /**
      * Easing method used for the first animation.
      * Varied easing effects can be found at
      * [easing effect example](https://echarts.apache.org/examples/en/editor.html?c=line-easing)
      * .
      *
      *
      * @default
      * "cubicOut"
      * @see https://echarts.apache.org/en/option.html#series-pie.animationEasing
      */
    var animationEasing: js.UndefOr[String] = js.native
    
    /**
      * Easing method used for animation.
      *
      *
      * @default
      * "cubicOut"
      * @see https://echarts.apache.org/en/option.html#series-pie.animationEasingUpdate
      */
    var animationEasingUpdate: js.UndefOr[String] = js.native
    
    /**
      * Whether to set graphic number threshold to animation.
      * Animation will be disabled when graphic number is larger than
      * threshold.
      *
      *
      * @default
      * 2000
      * @see https://echarts.apache.org/en/option.html#series-pie.animationThreshold
      */
    var animationThreshold: js.UndefOr[Double] = js.native
    
    /**
      * Initial animation type.
      *
      * + `'expansion'` Default expansion animation.
      * + `'scale'` Scale animation.
      * You can use it with `animationEasing='elasticOut'` to have popup
      * effect.
      *
      *
      * @default
      * "expansion"
      * @see https://echarts.apache.org/en/option.html#series-pie.animationType
      */
    var animationType: js.UndefOr[String] = js.native
    
    /**
      * Whether to enable the strategy to avoid labels overlap.
      * Defaults to be enabled, which will move the label positions in
      * the case of labels overlapping
      *
      *
      * @default
      * "true"
      * @see https://echarts.apache.org/en/option.html#series-pie.avoidLabelOverlap
      */
    var avoidLabelOverlap: js.UndefOr[Boolean] = js.native
    
    /**
      * Center position of Pie chart, the first of which is the horizontal
      * position, and the second is the vertical position.
      *
      * Percentage is supported.
      * When set in percentage, the item is relative to the container
      * width, and the second item to the height.
      *
      * **Example:**
      *
      * [see doc](https://echarts.apache.org/en/option.html#series-pie.pie)
      *
      *
      * @default
      * ['50%', '50%']
      * @see https://echarts.apache.org/en/option.html#series-pie.center
      */
    var center: js.UndefOr[js.Array[_]] = js.native
    
    /**
      * Whether the layout of sectors of pie chart is clockwise.
      *
      *
      * @default
      * "true"
      * @see https://echarts.apache.org/en/option.html#series-pie.clockwise
      */
    var clockwise: js.UndefOr[Boolean] = js.native
    
    /**
      * The mouse style when mouse hovers on an element, the same as
      * `cursor` property in `CSS`.
      *
      *
      * @default
      * "pointer"
      * @see https://echarts.apache.org/en/option.html#series-pie.cursor
      */
    var cursor: js.UndefOr[String] = js.native
    
    /**
      * Data array of series, which can be a single data value, like:
      *
      * ```
      * [12, 34, 56, 10, 23]
      *
      * ```
      *
      * Or, if need extra dimensions for components like
      * [visualMap](https://echarts.apache.org/en/option.html#visualMap)
      * to map to graphic attributes like color, it can also be in the
      * form of array. For example:
      *
      * ```
      * [[12, 14], [34, 50], [56, 30], [10, 15], [23, 10]]
      *
      * ```
      *
      * In this case, we can assgin the second value in each arrary item
      * to
      * [visualMap](https://echarts.apache.org/en/option.html#visualMap)
      * component.
      *
      * More likely, we need to assign name to each data item, in which
      * case each item should be an object:
      *
      * [see doc](https://echarts.apache.org/en/option.html#series-pie.pie)
      *
      * Each data item can be further custerized:
      *
      * [see doc](https://echarts.apache.org/en/option.html#series-pie.pie)
      *
      *
      * @see https://echarts.apache.org/en/option.html#series-pie.data
      */
    var data: js.UndefOr[
        js.Array[
          js.Array[Double] | typingsSlinky.echarts.echarts.EChartOption.SeriesPie.DataObject | Double
        ]
      ] = js.native
    
    /**
      * If
      * [series.data](https://echarts.apache.org/en/option.html#series.data)
      * is not specified, and
      * [dataset](https://echarts.apache.org/en/option.html#dataset)
      * exists, the series will use `dataset`.
      * `datasetIndex` specifies which dataset will be used.
      *
      *
      * @see https://echarts.apache.org/en/option.html#series-pie.datasetIndex
      */
    var datasetIndex: js.UndefOr[Double] = js.native
    
    /**
      * @see https://echarts.apache.org/en/option.html#series-pie.emphasis
      */
    var emphasis: js.UndefOr[`19`] = js.native
    
    /**
      * Whether to enable the zoom animation effects when hovering sectors.
      *
      *
      * @default
      * "true"
      * @see https://echarts.apache.org/en/option.html#series-pie.hoverAnimation
      */
    var hoverAnimation: js.UndefOr[Boolean] = js.native
    
    /**
      * The offset distance of hovered sector.
      *
      *
      * @default
      * 10
      * @see https://echarts.apache.org/en/option.html#series-pie.hoverOffset
      */
    var hoverOffset: js.UndefOr[Double] = js.native
    
    /**
      * Component ID, not specified by default.
      * If specified, it can be used to refer the component in option
      * or API.
      *
      *
      * @see https://echarts.apache.org/en/option.html#series-pie.id
      */
    var id: js.UndefOr[String] = js.native
    
    /**
      * Graphic style of , `emphasis` is the style when it is highlighted,
      * like being hovered by mouse, or highlighted via legend connect.
      *
      *
      * @see https://echarts.apache.org/en/option.html#series-pie.itemStyle
      */
    var itemStyle: js.UndefOr[DictunknownPropertyBorderColor] = js.native
    
    /**
      * Text label of pie chart, to explain some data information about
      * graphic item like value, name and so on.
      * `label` is placed under `itemStyle` in ECharts 2.x.
      * In ECharts 3, to make the configuration structure flatter, `label`is
      * taken to be at the same level with `itemStyle`, and has `emphasis`
      * as `itemStyle` does.
      *
      *
      * @see https://echarts.apache.org/en/option.html#series-pie.label
      */
    var label: js.UndefOr[TextBorderColor] = js.native
    
    /**
      * The style of visual guide line. Will show when
      * [label position](https://echarts.apache.org/en/option.html#series-pie.label.position)
      * is set as `'outside'`.
      *
      * The style of visual guide line.
      *
      *
      * @see https://echarts.apache.org/en/option.html#series-pie.labelLine
      */
    var labelLine: js.UndefOr[Length2] = js.native
    
    /**
      * Whether to enable highlighting chart when
      * [legend](https://echarts.apache.org/en/option.html#legend)
      * is being hovered.
      *
      *
      * @default
      * "true"
      * @see https://echarts.apache.org/en/option.html#series-pie.legendHoverLink
      */
    var legendHoverLink: js.UndefOr[Boolean] = js.native
    
    /**
      * Used to mark an area in chart.
      * For example, mark a time interval.
      *
      *
      * @see https://echarts.apache.org/en/option.html#series-pie.markArea
      */
    var markArea: js.UndefOr[AnimationThreshold] = js.native
    
    /**
      * Use a line in the chart to illustrate.
      *
      *
      * @see https://echarts.apache.org/en/option.html#series-pie.markLine
      */
    var markLine: js.UndefOr[AnimationEasingUpdate] = js.native
    
    /**
      * Mark point in a chart.
      *
      *
      * @see https://echarts.apache.org/en/option.html#series-pie.markPoint
      */
    var markPoint: js.UndefOr[AnimationEasing] = js.native
    
    /**
      * The minimum angle of sector (0 ~ 360).
      * It prevents some sector from being too small when value is small,
      * which will affect user interaction.
      *
      *
      * @see https://echarts.apache.org/en/option.html#series-pie.minAngle
      */
    var minAngle: js.UndefOr[Double] = js.native
    
    /**
      * If a sector is less than this angle (0 ~ 360), label and labelLine will not be displayed.
      *
      * @see https://echarts.apache.org/en/option.html#series-pie.minShowLabelAngle
      */
    var minShowLabelAngle: js.UndefOr[Double] = js.native
    
    /**
      * Series name used for displaying in
      * [tooltip](https://echarts.apache.org/en/option.html#tooltip)
      * and filtering with
      * [legend](https://echarts.apache.org/en/option.html#legend)
      * , or updaing data and configuration with `setOption`.
      *
      *
      * @see https://echarts.apache.org/en/option.html#series-pie.name
      */
    var name: js.UndefOr[String] = js.native
    
    /**
      * Radius of Pie chart. Value can be:
      *
      * + `number`: Specify outside radius directly.
      * + `string`: For example, `'20%'`, means that the outside radius
      * is 20% of the viewport size (the little one between width and
      * height of the chart container).
      * + `Array.<number|string>`:
      * The first item specifies the inside radius, and the second item
      * specifies the outside radius.
      * Each item follows the definitions above.
      *
      * You can set a large inner radius for a Donut chart.
      *
      *
      * @default
      * [0, '75%']
      * @see https://echarts.apache.org/en/option.html#series-pie.radius
      */
    var radius: js.UndefOr[js.Array[_] | Double | String] = js.native
    
    /**
      * Whether to show as Nightingale chart, which distinguishs data
      * through radius. There are 2 optional modes:
      *
      * + `'radius'` Use central angle to show the percentage of data,
      * radius to show data size.
      * + `'area'` All the sectors will share the same central angle,
      * the data size is shown only through radiuses.
      *
      *
      * @see https://echarts.apache.org/en/option.html#series-pie.roseType
      */
    var roseType: js.UndefOr[Boolean | String] = js.native
    
    /**
      * Selected mode of pie.
      * It is enabled by default, and you may set it to be `false` to
      * disabled it.
      *
      * Besides, it can be set to `'single'` or `'multiple'`, for single
      * selection and multiple selection.
      *
      *
      * @see https://echarts.apache.org/en/option.html#series-pie.selectedMode
      */
    var selectedMode: js.UndefOr[Boolean | String] = js.native
    
    /**
      * The offset distance of selected sector.
      *
      *
      * @default
      * 10
      * @see https://echarts.apache.org/en/option.html#series-pie.selectedOffset
      */
    var selectedOffset: js.UndefOr[Double] = js.native
    
    /**
      * When
      * [dataset](https://echarts.apache.org/en/option.html#dataset)
      * is used, `seriesLayoutBy` specifies whether the column or the
      * row of `dataset` is mapped to the series, namely, the series
      * is "layout" on columns or rows. Optional values:
      *
      * + 'column': by default, the columns of `dataset` are mapped the
      * series. In this case, each column represents a dimension.
      * + 'row'：the rows of `dataset` are mapped to the series.
      * In this case, each row represents a dimension.
      *
      * Check this
      * [example](https://echarts.apache.org/examples/en/editor.html?c=dataset-series-layout-by)
      * .
      *
      *
      * @default
      * "column"
      * @see https://echarts.apache.org/en/option.html#series-pie.seriesLayoutBy
      */
    var seriesLayoutBy: js.UndefOr[String] = js.native
    
    /**
      * Whether to ignore mouse events.
      * Default value is false, for triggering and responding to mouse
      * events.
      *
      *
      * @see https://echarts.apache.org/en/option.html#series-pie.silent
      */
    var silent: js.UndefOr[Boolean] = js.native
    
    /**
      * The start angle, which range is \[0, 360\].
      *
      *
      * @default
      * 90
      * @see https://echarts.apache.org/en/option.html#series-pie.startAngle
      */
    var startAngle: js.UndefOr[Double] = js.native
    
    /**
      * Whether to show sector when all data are zero.
      *
      *
      * @default
      * "true"
      * @see https://echarts.apache.org/en/option.html#series-pie.stillShowZeroSum
      */
    var stillShowZeroSum: js.UndefOr[Boolean] = js.native
    
    /**
      * tooltip settings in this series.
      *
      *
      * @see https://echarts.apache.org/en/option.html#series-pie.tooltip
      */
    var tooltip: js.UndefOr[BaseTooltip] = js.native
    
    /**
      * @default
      * "pie"
      * @see https://echarts.apache.org/en/option.html#series-pie.type
      */
    var `type`: js.UndefOr[String] = js.native
    
    /**
      * `z` value of all graghical elements in , which controls order
      * of drawing graphical components.
      * Components with smaller `z` values may be overwritten by those
      * with larger `z` values.
      *
      * `z` has a lower priority to `zlevel`, and will not create new
      * Canvas.
      *
      *
      * @default
      * 2
      * @see https://echarts.apache.org/en/option.html#series-pie.z
      */
    var z: js.UndefOr[Double] = js.native
    
    /**
      * `zlevel` value of all graghical elements in .
      *
      * `zlevel` is used to make layers with Canvas.
      * Graphical elements with different `zlevel` values will be placed
      * in different Canvases, which is a common optimization technique.
      * We can put those frequently changed elements (like those with
      * animations) to a seperate `zlevel`.
      * Notice that too many Canvases will increase memory cost, and
      * should be used carefully on mobile phones to avoid crash.
      *
      * Canvases with bigger `zlevel` will be placed on Canvases with
      * smaller `zlevel`.
      *
      *
      * @see https://echarts.apache.org/en/option.html#series-pie.zlevel
      */
    var zlevel: js.UndefOr[Double] = js.native
  }
  object SeriesPie {
    
    @scala.inline
    def apply(): SeriesPie = {
      val __obj = js.Dynamic.literal()
      __obj.asInstanceOf[SeriesPie]
    }
    
    @js.native
    trait DataObject extends StObject {
      
      /**
        * @see https://echarts.apache.org/en/option.html#series-pie.data.emphasis
        */
      var emphasis: js.UndefOr[`20`] = js.native
      
      /**
        * Graphic style of , `emphasis` is the style when it is highlighted,
        * like being hovered by mouse, or highlighted via legend connect.
        *
        *
        * @see https://echarts.apache.org/en/option.html#series-pie.data.itemStyle
        */
      var itemStyle: js.UndefOr[BorderType] = js.native
      
      /**
        * The label configuration of a single sector.
        *
        *
        * @see https://echarts.apache.org/en/option.html#series-pie.data.label
        */
      var label: js.UndefOr[FontWeight] = js.native
      
      /**
        * The style of visual guide line.
        *
        *
        * @see https://echarts.apache.org/en/option.html#series-pie.data.labelLine
        */
      var labelLine: js.UndefOr[Smooth] = js.native
      
      /**
        * The name of data item.
        *
        *
        * @see https://echarts.apache.org/en/option.html#series-pie.data.name
        */
      var name: js.UndefOr[String] = js.native
      
      /**
        * Whether the data item is selected.
        *
        *
        * @see https://echarts.apache.org/en/option.html#series-pie.data.selected
        */
      var selected: js.UndefOr[Boolean] = js.native
      
      /**
        * tooltip settings in this series data.
        *
        *
        * @see https://echarts.apache.org/en/option.html#series-pie.data.tooltip
        */
      var tooltip: js.UndefOr[BaseTooltip] = js.native
      
      /**
        * Data value.
        *
        *
        * @see https://echarts.apache.org/en/option.html#series-pie.data.value
        */
      var value: js.UndefOr[Double] = js.native
    }
    object DataObject {
      
      @scala.inline
      def apply(): typingsSlinky.echarts.echarts.EChartOption.SeriesPie.DataObject = {
        val __obj = js.Dynamic.literal()
        __obj.asInstanceOf[typingsSlinky.echarts.echarts.EChartOption.SeriesPie.DataObject]
      }
      
      @scala.inline
      implicit class DataObjectMutableBuilder[Self <: typingsSlinky.echarts.echarts.EChartOption.SeriesPie.DataObject] (val x: Self) extends AnyVal {
        
        @scala.inline
        def setEmphasis(value: `20`): Self = StObject.set(x, "emphasis", value.asInstanceOf[js.Any])
        
        @scala.inline
        def setEmphasisUndefined: Self = StObject.set(x, "emphasis", js.undefined)
        
        @scala.inline
        def setItemStyle(value: BorderType): Self = StObject.set(x, "itemStyle", value.asInstanceOf[js.Any])
        
        @scala.inline
        def setItemStyleUndefined: Self = StObject.set(x, "itemStyle", js.undefined)
        
        @scala.inline
        def setLabel(value: FontWeight): Self = StObject.set(x, "label", value.asInstanceOf[js.Any])
        
        @scala.inline
        def setLabelLine(value: Smooth): Self = StObject.set(x, "labelLine", value.asInstanceOf[js.Any])
        
        @scala.inline
        def setLabelLineUndefined: Self = StObject.set(x, "labelLine", js.undefined)
        
        @scala.inline
        def setLabelUndefined: Self = StObject.set(x, "label", js.undefined)
        
        @scala.inline
        def setName(value: String): Self = StObject.set(x, "name", value.asInstanceOf[js.Any])
        
        @scala.inline
        def setNameUndefined: Self = StObject.set(x, "name", js.undefined)
        
        @scala.inline
        def setSelected(value: Boolean): Self = StObject.set(x, "selected", value.asInstanceOf[js.Any])
        
        @scala.inline
        def setSelectedUndefined: Self = StObject.set(x, "selected", js.undefined)
        
        @scala.inline
        def setTooltip(value: BaseTooltip): Self = StObject.set(x, "tooltip", value.asInstanceOf[js.Any])
        
        @scala.inline
        def setTooltipUndefined: Self = StObject.set(x, "tooltip", js.undefined)
        
        @scala.inline
        def setValue(value: Double): Self = StObject.set(x, "value", value.asInstanceOf[js.Any])
        
        @scala.inline
        def setValueUndefined: Self = StObject.set(x, "value", js.undefined)
      }
    }
    
    @scala.inline
    implicit class SeriesPieMutableBuilder[Self <: SeriesPie] (val x: Self) extends AnyVal {
      
      @scala.inline
      def setAnimation(value: Boolean): Self = StObject.set(x, "animation", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setAnimationDelay(value: js.Function | Double): Self = StObject.set(x, "animationDelay", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setAnimationDelayUndefined: Self = StObject.set(x, "animationDelay", js.undefined)
      
      @scala.inline
      def setAnimationDelayUpdate(value: js.Function | Double): Self = StObject.set(x, "animationDelayUpdate", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setAnimationDelayUpdateUndefined: Self = StObject.set(x, "animationDelayUpdate", js.undefined)
      
      @scala.inline
      def setAnimationDuration(value: js.Function | Double): Self = StObject.set(x, "animationDuration", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setAnimationDurationUndefined: Self = StObject.set(x, "animationDuration", js.undefined)
      
      @scala.inline
      def setAnimationDurationUpdate(value: js.Function | Double): Self = StObject.set(x, "animationDurationUpdate", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setAnimationDurationUpdateUndefined: Self = StObject.set(x, "animationDurationUpdate", js.undefined)
      
      @scala.inline
      def setAnimationEasing(value: String): Self = StObject.set(x, "animationEasing", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setAnimationEasingUndefined: Self = StObject.set(x, "animationEasing", js.undefined)
      
      @scala.inline
      def setAnimationEasingUpdate(value: String): Self = StObject.set(x, "animationEasingUpdate", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setAnimationEasingUpdateUndefined: Self = StObject.set(x, "animationEasingUpdate", js.undefined)
      
      @scala.inline
      def setAnimationThreshold(value: Double): Self = StObject.set(x, "animationThreshold", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setAnimationThresholdUndefined: Self = StObject.set(x, "animationThreshold", js.undefined)
      
      @scala.inline
      def setAnimationType(value: String): Self = StObject.set(x, "animationType", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setAnimationTypeUndefined: Self = StObject.set(x, "animationType", js.undefined)
      
      @scala.inline
      def setAnimationUndefined: Self = StObject.set(x, "animation", js.undefined)
      
      @scala.inline
      def setAvoidLabelOverlap(value: Boolean): Self = StObject.set(x, "avoidLabelOverlap", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setAvoidLabelOverlapUndefined: Self = StObject.set(x, "avoidLabelOverlap", js.undefined)
      
      @scala.inline
      def setCenter(value: js.Array[_]): Self = StObject.set(x, "center", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setCenterUndefined: Self = StObject.set(x, "center", js.undefined)
      
      @scala.inline
      def setCenterVarargs(value: js.Any*): Self = StObject.set(x, "center", js.Array(value :_*))
      
      @scala.inline
      def setClockwise(value: Boolean): Self = StObject.set(x, "clockwise", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setClockwiseUndefined: Self = StObject.set(x, "clockwise", js.undefined)
      
      @scala.inline
      def setCursor(value: String): Self = StObject.set(x, "cursor", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setCursorUndefined: Self = StObject.set(x, "cursor", js.undefined)
      
      @scala.inline
      def setData(
        value: js.Array[
              js.Array[Double] | typingsSlinky.echarts.echarts.EChartOption.SeriesPie.DataObject | Double
            ]
      ): Self = StObject.set(x, "data", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setDataUndefined: Self = StObject.set(x, "data", js.undefined)
      
      @scala.inline
      def setDataVarargs(
        value: (js.Array[Double] | typingsSlinky.echarts.echarts.EChartOption.SeriesPie.DataObject | Double)*
      ): Self = StObject.set(x, "data", js.Array(value :_*))
      
      @scala.inline
      def setDatasetIndex(value: Double): Self = StObject.set(x, "datasetIndex", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setDatasetIndexUndefined: Self = StObject.set(x, "datasetIndex", js.undefined)
      
      @scala.inline
      def setEmphasis(value: `19`): Self = StObject.set(x, "emphasis", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setEmphasisUndefined: Self = StObject.set(x, "emphasis", js.undefined)
      
      @scala.inline
      def setHoverAnimation(value: Boolean): Self = StObject.set(x, "hoverAnimation", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setHoverAnimationUndefined: Self = StObject.set(x, "hoverAnimation", js.undefined)
      
      @scala.inline
      def setHoverOffset(value: Double): Self = StObject.set(x, "hoverOffset", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setHoverOffsetUndefined: Self = StObject.set(x, "hoverOffset", js.undefined)
      
      @scala.inline
      def setId(value: String): Self = StObject.set(x, "id", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setIdUndefined: Self = StObject.set(x, "id", js.undefined)
      
      @scala.inline
      def setItemStyle(value: DictunknownPropertyBorderColor): Self = StObject.set(x, "itemStyle", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setItemStyleUndefined: Self = StObject.set(x, "itemStyle", js.undefined)
      
      @scala.inline
      def setLabel(value: TextBorderColor): Self = StObject.set(x, "label", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setLabelLine(value: Length2): Self = StObject.set(x, "labelLine", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setLabelLineUndefined: Self = StObject.set(x, "labelLine", js.undefined)
      
      @scala.inline
      def setLabelUndefined: Self = StObject.set(x, "label", js.undefined)
      
      @scala.inline
      def setLegendHoverLink(value: Boolean): Self = StObject.set(x, "legendHoverLink", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setLegendHoverLinkUndefined: Self = StObject.set(x, "legendHoverLink", js.undefined)
      
      @scala.inline
      def setMarkArea(value: AnimationThreshold): Self = StObject.set(x, "markArea", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setMarkAreaUndefined: Self = StObject.set(x, "markArea", js.undefined)
      
      @scala.inline
      def setMarkLine(value: AnimationEasingUpdate): Self = StObject.set(x, "markLine", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setMarkLineUndefined: Self = StObject.set(x, "markLine", js.undefined)
      
      @scala.inline
      def setMarkPoint(value: AnimationEasing): Self = StObject.set(x, "markPoint", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setMarkPointUndefined: Self = StObject.set(x, "markPoint", js.undefined)
      
      @scala.inline
      def setMinAngle(value: Double): Self = StObject.set(x, "minAngle", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setMinAngleUndefined: Self = StObject.set(x, "minAngle", js.undefined)
      
      @scala.inline
      def setMinShowLabelAngle(value: Double): Self = StObject.set(x, "minShowLabelAngle", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setMinShowLabelAngleUndefined: Self = StObject.set(x, "minShowLabelAngle", js.undefined)
      
      @scala.inline
      def setName(value: String): Self = StObject.set(x, "name", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setNameUndefined: Self = StObject.set(x, "name", js.undefined)
      
      @scala.inline
      def setRadius(value: js.Array[_] | Double | String): Self = StObject.set(x, "radius", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setRadiusUndefined: Self = StObject.set(x, "radius", js.undefined)
      
      @scala.inline
      def setRadiusVarargs(value: js.Any*): Self = StObject.set(x, "radius", js.Array(value :_*))
      
      @scala.inline
      def setRoseType(value: Boolean | String): Self = StObject.set(x, "roseType", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setRoseTypeUndefined: Self = StObject.set(x, "roseType", js.undefined)
      
      @scala.inline
      def setSelectedMode(value: Boolean | String): Self = StObject.set(x, "selectedMode", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setSelectedModeUndefined: Self = StObject.set(x, "selectedMode", js.undefined)
      
      @scala.inline
      def setSelectedOffset(value: Double): Self = StObject.set(x, "selectedOffset", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setSelectedOffsetUndefined: Self = StObject.set(x, "selectedOffset", js.undefined)
      
      @scala.inline
      def setSeriesLayoutBy(value: String): Self = StObject.set(x, "seriesLayoutBy", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setSeriesLayoutByUndefined: Self = StObject.set(x, "seriesLayoutBy", js.undefined)
      
      @scala.inline
      def setSilent(value: Boolean): Self = StObject.set(x, "silent", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setSilentUndefined: Self = StObject.set(x, "silent", js.undefined)
      
      @scala.inline
      def setStartAngle(value: Double): Self = StObject.set(x, "startAngle", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setStartAngleUndefined: Self = StObject.set(x, "startAngle", js.undefined)
      
      @scala.inline
      def setStillShowZeroSum(value: Boolean): Self = StObject.set(x, "stillShowZeroSum", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setStillShowZeroSumUndefined: Self = StObject.set(x, "stillShowZeroSum", js.undefined)
      
      @scala.inline
      def setTooltip(value: BaseTooltip): Self = StObject.set(x, "tooltip", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setTooltipUndefined: Self = StObject.set(x, "tooltip", js.undefined)
      
      @scala.inline
      def setType(value: String): Self = StObject.set(x, "type", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setTypeUndefined: Self = StObject.set(x, "type", js.undefined)
      
      @scala.inline
      def setZ(value: Double): Self = StObject.set(x, "z", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setZUndefined: Self = StObject.set(x, "z", js.undefined)
      
      @scala.inline
      def setZlevel(value: Double): Self = StObject.set(x, "zlevel", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setZlevelUndefined: Self = StObject.set(x, "zlevel", js.undefined)
    }
  }
  
  /**
    * **radar chart**
    *
    * Radar chart is mainly used to show multi-variable data, such as the
    * analysis of a football player's varied attributes. It relies
    * [radar](https://echarts.apache.org/en/option.html#radar)
    * component.
    *
    * Here is the example of AQI data which is presented in radar chart.
    *
    * [see doc](https://echarts.apache.org/en/option.html#series-radar)
    *
    *
    * @see https://echarts.apache.org/en/option.html#series-radar
    */
  @js.native
  trait SeriesRadar extends Series {
    
    /**
      * Whether to enable animation.
      *
      *
      * @default
      * "true"
      * @see https://echarts.apache.org/en/option.html#series-radar.animation
      */
    var animation: js.UndefOr[Boolean] = js.native
    
    /**
      * Delay before updating the first animation, which supports callback
      * function for different data to have different animation effect.
      *
      * For example:
      *
      * [see doc](https://echarts.apache.org/en/option.html#series-radar.radar)
      *
      * See
      * [this example](https://echarts.apache.org/examples/en/editor.html?c=bar-animation-delay)
      * for more information.
      *
      *
      * @see https://echarts.apache.org/en/option.html#series-radar.animationDelay
      */
    var animationDelay: js.UndefOr[js.Function | Double] = js.native
    
    /**
      * Delay before updating animation, which supports callback function
      * for different data to have different animation effect.
      *
      * For example:
      *
      * [see doc](https://echarts.apache.org/en/option.html#series-radar.radar)
      *
      * See
      * [this example](https://echarts.apache.org/examples/en/editor.html?c=bar-animation-delay)
      * for more information.
      *
      *
      * @see https://echarts.apache.org/en/option.html#series-radar.animationDelayUpdate
      */
    var animationDelayUpdate: js.UndefOr[js.Function | Double] = js.native
    
    /**
      * Duration of the first animation, which supports callback function
      * for different data to have different animation effect:
      *
      * [see doc](https://echarts.apache.org/en/option.html#series-radar.radar)
      *
      *
      * @default
      * 1000
      * @see https://echarts.apache.org/en/option.html#series-radar.animationDuration
      */
    var animationDuration: js.UndefOr[js.Function | Double] = js.native
    
    /**
      * Time for animation to complete, which supports callback function
      * for different data to have different animation effect:
      *
      * [see doc](https://echarts.apache.org/en/option.html#series-radar.radar)
      *
      *
      * @default
      * 300
      * @see https://echarts.apache.org/en/option.html#series-radar.animationDurationUpdate
      */
    var animationDurationUpdate: js.UndefOr[js.Function | Double] = js.native
    
    /**
      * Easing method used for the first animation.
      * Varied easing effects can be found at
      * [easing effect example](https://echarts.apache.org/examples/en/editor.html?c=line-easing)
      * .
      *
      *
      * @default
      * "cubicOut"
      * @see https://echarts.apache.org/en/option.html#series-radar.animationEasing
      */
    var animationEasing: js.UndefOr[String] = js.native
    
    /**
      * Easing method used for animation.
      *
      *
      * @default
      * "cubicOut"
      * @see https://echarts.apache.org/en/option.html#series-radar.animationEasingUpdate
      */
    var animationEasingUpdate: js.UndefOr[String] = js.native
    
    /**
      * Whether to set graphic number threshold to animation.
      * Animation will be disabled when graphic number is larger than
      * threshold.
      *
      *
      * @default
      * 2000
      * @see https://echarts.apache.org/en/option.html#series-radar.animationThreshold
      */
    var animationThreshold: js.UndefOr[Double] = js.native
    
    /**
      * Area filling style.
      *
      *
      * @see https://echarts.apache.org/en/option.html#series-radar.areaStyle
      */
    var areaStyle: js.UndefOr[Opacity] = js.native
    
    /**
      * The data in radar chart is multi-variable (dimension).
      * Here is an example:
      *
      * [see doc](https://echarts.apache.org/en/option.html#series-radar.radar)
      *
      * Among them, `value` item array contains data that is corresponding
      * to
      * [radar.indicator](https://echarts.apache.org/en/option.html#radar.indicator)
      * .
      *
      *
      * @see https://echarts.apache.org/en/option.html#series-radar.data
      */
    var data: js.UndefOr[js.Array[typingsSlinky.echarts.echarts.EChartOption.SeriesRadar.DataObject]] = js.native
    
    /**
      * @see https://echarts.apache.org/en/option.html#series-radar.emphasis
      */
    var emphasis: js.UndefOr[AreaStyle] = js.native
    
    /**
      * Component ID, not specified by default.
      * If specified, it can be used to refer the component in option
      * or API.
      *
      *
      * @see https://echarts.apache.org/en/option.html#series-radar.id
      */
    var id: js.UndefOr[String] = js.native
    
    /**
      * Item style of the inflection point of the lines.
      *
      *
      * @see https://echarts.apache.org/en/option.html#series-radar.itemStyle
      */
    var itemStyle: js.UndefOr[ShadowOffsetY] = js.native
    
    /**
      * Text label of , to explain some data information about graphic
      * item like value, name and so on.
      * `label` is placed under `itemStyle` in ECharts 2.x.
      * In ECharts 3, to make the configuration structure flatter, `label`is
      * taken to be at the same level with `itemStyle`, and has `emphasis`
      * as `itemStyle` does.
      *
      *
      * @see https://echarts.apache.org/en/option.html#series-radar.label
      */
    var label: js.UndefOr[BorderRadius] = js.native
    
    /**
      * Line style.
      *
      *
      * @see https://echarts.apache.org/en/option.html#series-radar.lineStyle
      */
    var lineStyle: js.UndefOr[ShadowBlur] = js.native
    
    /**
      * Series name used for displaying in
      * [tooltip](https://echarts.apache.org/en/option.html#tooltip)
      * and filtering with
      * [legend](https://echarts.apache.org/en/option.html#legend)
      * , or updaing data and configuration with `setOption`.
      *
      *
      * @see https://echarts.apache.org/en/option.html#series-radar.name
      */
    var name: js.UndefOr[String] = js.native
    
    /**
      * Index of
      * [radar](https://echarts.apache.org/en/option.html#radar)
      * component that radar chart uses.
      *
      *
      * @see https://echarts.apache.org/en/option.html#series-radar.radarIndex
      */
    var radarIndex: js.UndefOr[Double] = js.native
    
    /**
      * Whether to ignore mouse events.
      * Default value is false, for triggering and responding to mouse
      * events.
      *
      *
      * @see https://echarts.apache.org/en/option.html#series-radar.silent
      */
    var silent: js.UndefOr[Boolean] = js.native
    
    /**
      * Symbol of .
      *
      * Icon types provided by ECharts includes `'circle'`, `'rect'`,
      * `'roundRect'`, `'triangle'`, `'diamond'`, `'pin'`, `'arrow'`,
      * `'none'`
      *
      * It can be set to an image with `'image://url'` , in which URL
      * is the link to an image, or `dataURI` of an image.
      *
      * An image URL example:
      *
      * ```
      * 'image://http://xxx.xxx.xxx/a/b.png'
      *
      * ```
      *
      * A `dataURI` example:
      *
      * [see doc](https://echarts.apache.org/en/option.html#series-radar.radar)
      *
      * Icons can be set to arbitrary vector path via `'path://'` in
      * ECharts.
      * As compared with raster image, vector paths prevent from jagging
      * and blurring when scaled, and have a better control over changing
      * colors.
      * Size of vectoer icon will be adapted automatically. Refer to
      * [SVG PathData](http://www.w3.org/TR/SVG/paths.html#PathData)
      * for more information about format of path.
      * You may export vector paths from tools like Adobe Illustrator.
      *
      * For example:
      *
      * [see doc](https://echarts.apache.org/en/option.html#series-radar.radar)
      *
      *
      * @default
      * "circle"
      * @see https://echarts.apache.org/en/option.html#series-radar.symbol
      */
    var symbol: js.UndefOr[String] = js.native
    
    /**
      * Whether to keep aspect for symbols in the form of `path://`.
      *
      *
      * @see https://echarts.apache.org/en/option.html#series-radar.symbolKeepAspect
      */
    var symbolKeepAspect: js.UndefOr[Boolean] = js.native
    
    /**
      * Offset of symbol relative to original position.
      * By default, symbol will be put in the center position of data.
      * But if symbol is from user-defined vector path or image, you
      * may not expect symbol to be in center.
      * In this case, you may use this attribute to set offset to default
      * position.
      * It can be in absolute pixel value, or in relative percentage
      * value.
      *
      * For example, `[0, '50%']` means to move upside side position
      * of symbol height.
      * It can be used to make the arrow in the bottom to be at data
      * position when symbol is pin.
      *
      *
      * @default
      * [0, 0]
      * @see https://echarts.apache.org/en/option.html#series-radar.symbolOffset
      */
    var symbolOffset: js.UndefOr[js.Array[_]] = js.native
    
    /**
      * Rotate degree of symbol.
      * Note that when `symbol` is set to be `'arrow'` in `markLine`,
      * `symbolRotate` value will be ignored, and compulsively use tangent
      * angle.
      *
      *
      * @see https://echarts.apache.org/en/option.html#series-radar.symbolRotate
      */
    var symbolRotate: js.UndefOr[Double] = js.native
    
    /**
      * symbol size.
      * It can be set to single numbers like `10`, or use an array to
      * represent width and height.
      * For example, `[20, 10]` means symbol width is `20`, and height
      * is`10`.
      *
      * If size of symbols needs to be different, you can set with callback
      * function in the following format:
      *
      * ```
      * (value: Array|number, params: Object) => number|Array
      *
      * ```
      *
      * The first parameter `value` is the value in
      * [data](https://echarts.apache.org/en/option.html#series-radar.data)
      * , and the second parameter `params` is the rest parameters of
      * data item.
      *
      *
      * @default
      * 4
      * @see https://echarts.apache.org/en/option.html#series-radar.symbolSize
      */
    var symbolSize: js.UndefOr[js.Array[_] | js.Function | Double] = js.native
    
    /**
      * tooltip settings in this series.
      *
      *
      * @see https://echarts.apache.org/en/option.html#series-radar.tooltip
      */
    var tooltip: js.UndefOr[BaseTooltip] = js.native
    
    /**
      * @default
      * "radar"
      * @see https://echarts.apache.org/en/option.html#series-radar.type
      */
    var `type`: js.UndefOr[String] = js.native
    
    /**
      * `z` value of all graghical elements in radar chart, which controls
      * order of drawing graphical components.
      * Components with smaller `z` values may be overwritten by those
      * with larger `z` values.
      *
      * `z` has a lower priority to `zlevel`, and will not create new
      * Canvas.
      *
      *
      * @default
      * 2
      * @see https://echarts.apache.org/en/option.html#series-radar.z
      */
    var z: js.UndefOr[Double] = js.native
    
    /**
      * `zlevel` value of all graghical elements in radar chart.
      *
      * `zlevel` is used to make layers with Canvas.
      * Graphical elements with different `zlevel` values will be placed
      * in different Canvases, which is a common optimization technique.
      * We can put those frequently changed elements (like those with
      * animations) to a seperate `zlevel`.
      * Notice that too many Canvases will increase memory cost, and
      * should be used carefully on mobile phones to avoid crash.
      *
      * Canvases with bigger `zlevel` will be placed on Canvases with
      * smaller `zlevel`.
      *
      *
      * @see https://echarts.apache.org/en/option.html#series-radar.zlevel
      */
    var zlevel: js.UndefOr[Double] = js.native
  }
  object SeriesRadar {
    
    @scala.inline
    def apply(): SeriesRadar = {
      val __obj = js.Dynamic.literal()
      __obj.asInstanceOf[SeriesRadar]
    }
    
    @js.native
    trait DataObject extends StObject {
      
      /**
        * Area filling style of a single item.
        *
        *
        * @see https://echarts.apache.org/en/option.html#series-radar.data.areaStyle
        */
      var areaStyle: js.UndefOr[Opacity] = js.native
      
      /**
        * @see https://echarts.apache.org/en/option.html#series-radar.data.emphasis
        */
      var emphasis: js.UndefOr[AreaStyleItemStyle] = js.native
      
      /**
        * Style setting of the symbol on single inflection point.
        *
        *
        * @see https://echarts.apache.org/en/option.html#series-radar.data.itemStyle
        */
      var itemStyle: js.UndefOr[BarBorderWidth] = js.native
      
      /**
        * Style setting of the text on single inflection point.
        *
        *
        * @see https://echarts.apache.org/en/option.html#series-radar.data.label
        */
      var label: js.UndefOr[Distance] = js.native
      
      /**
        * Line style of a single item.
        *
        *
        * @see https://echarts.apache.org/en/option.html#series-radar.data.lineStyle
        */
      var lineStyle: js.UndefOr[ShadowBlur] = js.native
      
      /**
        * Data item name
        *
        *
        * @see https://echarts.apache.org/en/option.html#series-radar.data.name
        */
      var name: js.UndefOr[String] = js.native
      
      /**
        * Symbol of single data.
        *
        * Icon types provided by ECharts includes `'circle'`, `'rect'`,
        * `'roundRect'`, `'triangle'`, `'diamond'`, `'pin'`, `'arrow'`,
        * `'none'`
        *
        * It can be set to an image with `'image://url'` , in which
        * URL is the link to an image, or `dataURI` of an image.
        *
        * An image URL example:
        *
        * ```
        * 'image://http://xxx.xxx.xxx/a/b.png'
        *
        * ```
        *
        * A `dataURI` example:
        *
        * [see doc](https://echarts.apache.org/en/option.html#series-radar.radar.data)
        *
        * Icons can be set to arbitrary vector path via `'path://'`
        * in ECharts.
        * As compared with raster image, vector paths prevent from
        * jagging and blurring when scaled, and have a better control
        * over changing colors.
        * Size of vectoer icon will be adapted automatically.
        * Refer to
        * [SVG PathData](http://www.w3.org/TR/SVG/paths.html#PathData)
        * for more information about format of path.
        * You may export vector paths from tools like Adobe Illustrator.
        *
        * For example:
        *
        * [see doc](https://echarts.apache.org/en/option.html#series-radar.radar.data)
        *
        *
        * @default
        * "circle"
        * @see https://echarts.apache.org/en/option.html#series-radar.data.symbol
        */
      var symbol: js.UndefOr[String] = js.native
      
      /**
        * Whether to keep aspect for symbols in the form of `path://`.
        *
        *
        * @see https://echarts.apache.org/en/option.html#series-radar.data.symbolKeepAspect
        */
      var symbolKeepAspect: js.UndefOr[Boolean] = js.native
      
      /**
        * Offset of single data symbol relative to original position.
        * By default, symbol will be put in the center position of
        * data.
        * But if symbol is from user-defined vector path or image,
        * you may not expect symbol to be in center.
        * In this case, you may use this attribute to set offset to
        * default position.
        * It can be in absolute pixel value, or in relative percentage
        * value.
        *
        * For example, `[0, '50%']` means to move upside side position
        * of symbol height.
        * It can be used to make the arrow in the bottom to be at data
        * position when symbol is pin.
        *
        *
        * @default
        * [0, 0]
        * @see https://echarts.apache.org/en/option.html#series-radar.data.symbolOffset
        */
      var symbolOffset: js.UndefOr[js.Array[_]] = js.native
      
      /**
        * Rotate degree of single data symbol.
        * Note that when `symbol` is set to be `'arrow'` in `markLine`,
        * `symbolRotate` value will be ignored, and compulsively use
        * tangent angle.
        *
        *
        * @see https://echarts.apache.org/en/option.html#series-radar.data.symbolRotate
        */
      var symbolRotate: js.UndefOr[Double] = js.native
      
      /**
        * single data symbol size.
        * It can be set to single numbers like `10`, or use an array
        * to represent width and height.
        * For example, `[20, 10]` means symbol width is `20`, and height
        * is`10`.
        *
        *
        * @default
        * 4
        * @see https://echarts.apache.org/en/option.html#series-radar.data.symbolSize
        */
      var symbolSize: js.UndefOr[js.Array[_] | Double] = js.native
      
      /**
        * tooltip settings in this series data.
        *
        *
        * @see https://echarts.apache.org/en/option.html#series-radar.data.tooltip
        */
      var tooltip: js.UndefOr[BaseTooltip] = js.native
      
      /**
        * Numerical value of a single data item.
        *
        *
        * @see https://echarts.apache.org/en/option.html#series-radar.data.value
        */
      var value: js.UndefOr[Double | js.Array[Double]] = js.native
    }
    object DataObject {
      
      @scala.inline
      def apply(): typingsSlinky.echarts.echarts.EChartOption.SeriesRadar.DataObject = {
        val __obj = js.Dynamic.literal()
        __obj.asInstanceOf[typingsSlinky.echarts.echarts.EChartOption.SeriesRadar.DataObject]
      }
      
      @scala.inline
      implicit class DataObjectMutableBuilder[Self <: typingsSlinky.echarts.echarts.EChartOption.SeriesRadar.DataObject] (val x: Self) extends AnyVal {
        
        @scala.inline
        def setAreaStyle(value: Opacity): Self = StObject.set(x, "areaStyle", value.asInstanceOf[js.Any])
        
        @scala.inline
        def setAreaStyleUndefined: Self = StObject.set(x, "areaStyle", js.undefined)
        
        @scala.inline
        def setEmphasis(value: AreaStyleItemStyle): Self = StObject.set(x, "emphasis", value.asInstanceOf[js.Any])
        
        @scala.inline
        def setEmphasisUndefined: Self = StObject.set(x, "emphasis", js.undefined)
        
        @scala.inline
        def setItemStyle(value: BarBorderWidth): Self = StObject.set(x, "itemStyle", value.asInstanceOf[js.Any])
        
        @scala.inline
        def setItemStyleUndefined: Self = StObject.set(x, "itemStyle", js.undefined)
        
        @scala.inline
        def setLabel(value: Distance): Self = StObject.set(x, "label", value.asInstanceOf[js.Any])
        
        @scala.inline
        def setLabelUndefined: Self = StObject.set(x, "label", js.undefined)
        
        @scala.inline
        def setLineStyle(value: ShadowBlur): Self = StObject.set(x, "lineStyle", value.asInstanceOf[js.Any])
        
        @scala.inline
        def setLineStyleUndefined: Self = StObject.set(x, "lineStyle", js.undefined)
        
        @scala.inline
        def setName(value: String): Self = StObject.set(x, "name", value.asInstanceOf[js.Any])
        
        @scala.inline
        def setNameUndefined: Self = StObject.set(x, "name", js.undefined)
        
        @scala.inline
        def setSymbol(value: String): Self = StObject.set(x, "symbol", value.asInstanceOf[js.Any])
        
        @scala.inline
        def setSymbolKeepAspect(value: Boolean): Self = StObject.set(x, "symbolKeepAspect", value.asInstanceOf[js.Any])
        
        @scala.inline
        def setSymbolKeepAspectUndefined: Self = StObject.set(x, "symbolKeepAspect", js.undefined)
        
        @scala.inline
        def setSymbolOffset(value: js.Array[_]): Self = StObject.set(x, "symbolOffset", value.asInstanceOf[js.Any])
        
        @scala.inline
        def setSymbolOffsetUndefined: Self = StObject.set(x, "symbolOffset", js.undefined)
        
        @scala.inline
        def setSymbolOffsetVarargs(value: js.Any*): Self = StObject.set(x, "symbolOffset", js.Array(value :_*))
        
        @scala.inline
        def setSymbolRotate(value: Double): Self = StObject.set(x, "symbolRotate", value.asInstanceOf[js.Any])
        
        @scala.inline
        def setSymbolRotateUndefined: Self = StObject.set(x, "symbolRotate", js.undefined)
        
        @scala.inline
        def setSymbolSize(value: js.Array[_] | Double): Self = StObject.set(x, "symbolSize", value.asInstanceOf[js.Any])
        
        @scala.inline
        def setSymbolSizeUndefined: Self = StObject.set(x, "symbolSize", js.undefined)
        
        @scala.inline
        def setSymbolSizeVarargs(value: js.Any*): Self = StObject.set(x, "symbolSize", js.Array(value :_*))
        
        @scala.inline
        def setSymbolUndefined: Self = StObject.set(x, "symbol", js.undefined)
        
        @scala.inline
        def setTooltip(value: BaseTooltip): Self = StObject.set(x, "tooltip", value.asInstanceOf[js.Any])
        
        @scala.inline
        def setTooltipUndefined: Self = StObject.set(x, "tooltip", js.undefined)
        
        @scala.inline
        def setValue(value: Double | js.Array[Double]): Self = StObject.set(x, "value", value.asInstanceOf[js.Any])
        
        @scala.inline
        def setValueUndefined: Self = StObject.set(x, "value", js.undefined)
        
        @scala.inline
        def setValueVarargs(value: Double*): Self = StObject.set(x, "value", js.Array(value :_*))
      }
    }
    
    @scala.inline
    implicit class SeriesRadarMutableBuilder[Self <: SeriesRadar] (val x: Self) extends AnyVal {
      
      @scala.inline
      def setAnimation(value: Boolean): Self = StObject.set(x, "animation", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setAnimationDelay(value: js.Function | Double): Self = StObject.set(x, "animationDelay", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setAnimationDelayUndefined: Self = StObject.set(x, "animationDelay", js.undefined)
      
      @scala.inline
      def setAnimationDelayUpdate(value: js.Function | Double): Self = StObject.set(x, "animationDelayUpdate", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setAnimationDelayUpdateUndefined: Self = StObject.set(x, "animationDelayUpdate", js.undefined)
      
      @scala.inline
      def setAnimationDuration(value: js.Function | Double): Self = StObject.set(x, "animationDuration", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setAnimationDurationUndefined: Self = StObject.set(x, "animationDuration", js.undefined)
      
      @scala.inline
      def setAnimationDurationUpdate(value: js.Function | Double): Self = StObject.set(x, "animationDurationUpdate", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setAnimationDurationUpdateUndefined: Self = StObject.set(x, "animationDurationUpdate", js.undefined)
      
      @scala.inline
      def setAnimationEasing(value: String): Self = StObject.set(x, "animationEasing", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setAnimationEasingUndefined: Self = StObject.set(x, "animationEasing", js.undefined)
      
      @scala.inline
      def setAnimationEasingUpdate(value: String): Self = StObject.set(x, "animationEasingUpdate", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setAnimationEasingUpdateUndefined: Self = StObject.set(x, "animationEasingUpdate", js.undefined)
      
      @scala.inline
      def setAnimationThreshold(value: Double): Self = StObject.set(x, "animationThreshold", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setAnimationThresholdUndefined: Self = StObject.set(x, "animationThreshold", js.undefined)
      
      @scala.inline
      def setAnimationUndefined: Self = StObject.set(x, "animation", js.undefined)
      
      @scala.inline
      def setAreaStyle(value: Opacity): Self = StObject.set(x, "areaStyle", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setAreaStyleUndefined: Self = StObject.set(x, "areaStyle", js.undefined)
      
      @scala.inline
      def setData(value: js.Array[typingsSlinky.echarts.echarts.EChartOption.SeriesRadar.DataObject]): Self = StObject.set(x, "data", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setDataUndefined: Self = StObject.set(x, "data", js.undefined)
      
      @scala.inline
      def setDataVarargs(value: typingsSlinky.echarts.echarts.EChartOption.SeriesRadar.DataObject*): Self = StObject.set(x, "data", js.Array(value :_*))
      
      @scala.inline
      def setEmphasis(value: AreaStyle): Self = StObject.set(x, "emphasis", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setEmphasisUndefined: Self = StObject.set(x, "emphasis", js.undefined)
      
      @scala.inline
      def setId(value: String): Self = StObject.set(x, "id", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setIdUndefined: Self = StObject.set(x, "id", js.undefined)
      
      @scala.inline
      def setItemStyle(value: ShadowOffsetY): Self = StObject.set(x, "itemStyle", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setItemStyleUndefined: Self = StObject.set(x, "itemStyle", js.undefined)
      
      @scala.inline
      def setLabel(value: BorderRadius): Self = StObject.set(x, "label", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setLabelUndefined: Self = StObject.set(x, "label", js.undefined)
      
      @scala.inline
      def setLineStyle(value: ShadowBlur): Self = StObject.set(x, "lineStyle", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setLineStyleUndefined: Self = StObject.set(x, "lineStyle", js.undefined)
      
      @scala.inline
      def setName(value: String): Self = StObject.set(x, "name", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setNameUndefined: Self = StObject.set(x, "name", js.undefined)
      
      @scala.inline
      def setRadarIndex(value: Double): Self = StObject.set(x, "radarIndex", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setRadarIndexUndefined: Self = StObject.set(x, "radarIndex", js.undefined)
      
      @scala.inline
      def setSilent(value: Boolean): Self = StObject.set(x, "silent", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setSilentUndefined: Self = StObject.set(x, "silent", js.undefined)
      
      @scala.inline
      def setSymbol(value: String): Self = StObject.set(x, "symbol", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setSymbolKeepAspect(value: Boolean): Self = StObject.set(x, "symbolKeepAspect", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setSymbolKeepAspectUndefined: Self = StObject.set(x, "symbolKeepAspect", js.undefined)
      
      @scala.inline
      def setSymbolOffset(value: js.Array[_]): Self = StObject.set(x, "symbolOffset", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setSymbolOffsetUndefined: Self = StObject.set(x, "symbolOffset", js.undefined)
      
      @scala.inline
      def setSymbolOffsetVarargs(value: js.Any*): Self = StObject.set(x, "symbolOffset", js.Array(value :_*))
      
      @scala.inline
      def setSymbolRotate(value: Double): Self = StObject.set(x, "symbolRotate", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setSymbolRotateUndefined: Self = StObject.set(x, "symbolRotate", js.undefined)
      
      @scala.inline
      def setSymbolSize(value: js.Array[_] | js.Function | Double): Self = StObject.set(x, "symbolSize", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setSymbolSizeUndefined: Self = StObject.set(x, "symbolSize", js.undefined)
      
      @scala.inline
      def setSymbolSizeVarargs(value: js.Any*): Self = StObject.set(x, "symbolSize", js.Array(value :_*))
      
      @scala.inline
      def setSymbolUndefined: Self = StObject.set(x, "symbol", js.undefined)
      
      @scala.inline
      def setTooltip(value: BaseTooltip): Self = StObject.set(x, "tooltip", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setTooltipUndefined: Self = StObject.set(x, "tooltip", js.undefined)
      
      @scala.inline
      def setType(value: String): Self = StObject.set(x, "type", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setTypeUndefined: Self = StObject.set(x, "type", js.undefined)
      
      @scala.inline
      def setZ(value: Double): Self = StObject.set(x, "z", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setZUndefined: Self = StObject.set(x, "z", js.undefined)
      
      @scala.inline
      def setZlevel(value: Double): Self = StObject.set(x, "zlevel", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setZlevelUndefined: Self = StObject.set(x, "zlevel", js.undefined)
    }
  }
  
  /**
    * **Sankey Graphs**
    *
    * Sankey diagram is a specific type of streamgraphs(can also be seen
    * as a directed acyclic graph).
    * In which the width of each branch is shown proportionally to the
    * flow quantity.
    * These graphs are typically used to visualize energy or material or
    * cost transfers between processes.
    * They can also visualize the energy accounts, material flow accounts
    * on a regional or national level, and also the breakdown of cost of
    * item or services.
    *
    * **Example:**
    *
    * [see doc](https://echarts.apache.org/en/option.html#series-sankey)
    *
    * **Visual Encoding:**
    *
    * The sankey graphs encodes each `node` of the raw data into a small
    * rectangular.
    * And different nodes are presented in different colors as far as possible.
    * The `label` next to the small rectangular, which encoding the name
    * of the node.
    *
    * In addition, the edge between two small rectangulars in the graph
    * encoding the `link` of the raw data.
    * The width of edge is shown proportionally to the `value` of `link`.
    *
    *
    * @see https://echarts.apache.org/en/option.html#series-sankey
    */
  @js.native
  trait SeriesSankey extends Series {
    
    /**
      * Whether to enable animation.
      *
      *
      * @default
      * "true"
      * @see https://echarts.apache.org/en/option.html#series-sankey.animation
      */
    var animation: js.UndefOr[Boolean] = js.native
    
    /**
      * Delay before updating the first animation, which supports callback
      * function for different data to have different animation effect.
      *
      * For example:
      *
      * [see doc](https://echarts.apache.org/en/option.html#series-sankey.sankey)
      *
      * See
      * [this example](https://echarts.apache.org/examples/en/editor.html?c=bar-animation-delay)
      * for more information.
      *
      *
      * @see https://echarts.apache.org/en/option.html#series-sankey.animationDelay
      */
    var animationDelay: js.UndefOr[js.Function | Double] = js.native
    
    /**
      * Delay before updating animation, which supports callback function
      * for different data to have different animation effect.
      *
      * For example:
      *
      * [see doc](https://echarts.apache.org/en/option.html#series-sankey.sankey)
      *
      * See
      * [this example](https://echarts.apache.org/examples/en/editor.html?c=bar-animation-delay)
      * for more information.
      *
      *
      * @see https://echarts.apache.org/en/option.html#series-sankey.animationDelayUpdate
      */
    var animationDelayUpdate: js.UndefOr[js.Function | Double] = js.native
    
    /**
      * Duration of the first animation, which supports callback function
      * for different data to have different animation effect:
      *
      * [see doc](https://echarts.apache.org/en/option.html#series-sankey.sankey)
      *
      *
      * @default
      * 1000
      * @see https://echarts.apache.org/en/option.html#series-sankey.animationDuration
      */
    var animationDuration: js.UndefOr[js.Function | Double] = js.native
    
    /**
      * Time for animation to complete, which supports callback function
      * for different data to have different animation effect:
      *
      * [see doc](https://echarts.apache.org/en/option.html#series-sankey.sankey)
      *
      *
      * @default
      * 300
      * @see https://echarts.apache.org/en/option.html#series-sankey.animationDurationUpdate
      */
    var animationDurationUpdate: js.UndefOr[js.Function | Double] = js.native
    
    /**
      * Easing method used for the first animation.
      * Varied easing effects can be found at
      * [easing effect example](https://echarts.apache.org/examples/en/editor.html?c=line-easing)
      * .
      *
      *
      * @default
      * "linear"
      * @see https://echarts.apache.org/en/option.html#series-sankey.animationEasing
      */
    var animationEasing: js.UndefOr[String] = js.native
    
    /**
      * Easing method used for animation.
      *
      *
      * @default
      * "cubicOut"
      * @see https://echarts.apache.org/en/option.html#series-sankey.animationEasingUpdate
      */
    var animationEasingUpdate: js.UndefOr[String] = js.native
    
    /**
      * Whether to set graphic number threshold to animation.
      * Animation will be disabled when graphic number is larger than
      * threshold.
      *
      *
      * @default
      * 2000
      * @see https://echarts.apache.org/en/option.html#series-sankey.animationThreshold
      */
    var animationThreshold: js.UndefOr[Double] = js.native
    
    /**
      * Distance between sankey component and the bottom side of the
      * container.
      *
      * `bottom` value can be instant pixel value like `20`; it can also
      * be percentage value relative to container width like `'20%'`.
      *
      *
      * @default
      * 5%
      * @see https://echarts.apache.org/en/option.html#series-sankey.bottom
      */
    var bottom: js.UndefOr[Double | String] = js.native
    
    /**
      * Data array of series, which can be a single data value, like:
      *
      * ```
      * [12, 34, 56, 10, 23]
      *
      * ```
      *
      * Or, if need extra dimensions for components like
      * [visualMap](https://echarts.apache.org/en/option.html#visualMap)
      * to map to graphic attributes like color, it can also be in the
      * form of array. For example:
      *
      * ```
      * [[12, 14], [34, 50], [56, 30], [10, 15], [23, 10]]
      *
      * ```
      *
      * In this case, we can assgin the second value in each arrary item
      * to
      * [visualMap](https://echarts.apache.org/en/option.html#visualMap)
      * component.
      *
      * More likely, we need to assign name to each data item, in which
      * case each item should be an object:
      *
      * [see doc](https://echarts.apache.org/en/option.html#series-sankey.sankey)
      *
      * Each data item can be further custerized:
      *
      * [see doc](https://echarts.apache.org/en/option.html#series-sankey.sankey)
      *
      *
      * @see https://echarts.apache.org/en/option.html#series-sankey.data
      */
    var data: js.UndefOr[
        js.Array[
          (js.Array[Double | typingsSlinky.echarts.echarts.EChartOption.SeriesSankey.DataObject]) | typingsSlinky.echarts.echarts.EChartOption.SeriesSankey.DataObject | Double
        ]
      ] = js.native
    
    /**
      * The drag-and-drop interaction of the node, which is enabled by
      * default.
      * After opening, the user can drag any node in the Sankey diagram
      * to any position.
      * To turn this interaction off, simply set the value to `false`.
      *
      *
      * @default
      * "true"
      * @see https://echarts.apache.org/en/option.html#series-sankey.draggable
      */
    var draggable: js.UndefOr[Boolean] = js.native
    
    /**
      * Equals to
      * [links](https://echarts.apache.org/en/option.html#series-sankey.links)
      *
      *
      * @see https://echarts.apache.org/en/option.html#series-sankey.edges
      */
    var edges: js.UndefOr[js.Array[_]] = js.native
    
    /**
      * @see https://echarts.apache.org/en/option.html#series-sankey.emphasis
      */
    var emphasis: js.UndefOr[ItemStyleLabelLineStyle] = js.native
    
    /**
      * Support when mouse hovering over a node or an edge, the adjacent
      * nodes and edges are also highlighted.
      * Default off, can be manually opened.
      *
      * Optional values:
      *
      * + `false`: When hovering over a node or an edge, only the hovered
      * node or edge is highlighted.
      * + `true`: the same as `'allEdges'`.
      * + `'allEdges'`: When hovering over a node, all of the adjacent
      * edges and nodes are highlighted.
      * When hovering over an edge, the adjacent nodes are highlighted.
      * + `'outEdges'`: When hovering over a node, the outcoming edges
      * and its adjacent nodes are highlighted.
      * When hovering over an edge, the adjacent nodes are highlighted.
      * + `'inEdges'`: When hovering over a node, the incoming edges
      * and its adjacent nodes are highlighted.
      * When hovering over an edge, the adjacent nodes are highlighted.
      *
      *
      * @see https://echarts.apache.org/en/option.html#series-sankey.focusNodeAdjacency
      */
    var focusNodeAdjacency: js.UndefOr[Boolean | String] = js.native
    
    /**
      * Height of sankey component.
      *
      *
      * @see https://echarts.apache.org/en/option.html#series-sankey.height
      */
    var height: js.UndefOr[Double | String] = js.native
    
    /**
      * Component ID, not specified by default.
      * If specified, it can be used to refer the component in option
      * or API.
      *
      *
      * @see https://echarts.apache.org/en/option.html#series-sankey.id
      */
    var id: js.UndefOr[String] = js.native
    
    /**
      * The style of node rectangle in sankey graphs.
      *
      *
      * @see https://echarts.apache.org/en/option.html#series-sankey.itemStyle
      */
    var itemStyle: js.UndefOr[BorderType] = js.native
    
    /**
      * `label` describes the text label style in each rectangular node.
      *
      *
      * @see https://echarts.apache.org/en/option.html#series-sankey.label
      */
    var label: js.UndefOr[BorderRadius] = js.native
    
    /**
      * The iterations of layout, which is used to continuously optimize
      * the positions of nodes in graph, decreasing the overlapping between
      * nodes and edges.
      *
      * The default iterations of layout: `32`.
      *
      * The test shows that iterations of layout could not be less than
      * the default value.
      *
      *
      * @default
      * 32
      * @see https://echarts.apache.org/en/option.html#series-sankey.layoutIterations
      */
    var layoutIterations: js.UndefOr[Double] = js.native
    
    /**
      * Distance between sankey component and the left side of the container.
      *
      * `left` value can be instant pixel value like `20`; it can also
      * be percentage value relative to container width like `'20%'`;
      * and it can also be `'left'`, `'center'`, or `'right'`.
      *
      * If the `left` value is set to be `'left'`, `'center'`, or `'right'`,
      * then the component will be aligned automatically based on position.
      *
      *
      * @default
      * 5%
      * @see https://echarts.apache.org/en/option.html#series-sankey.left
      */
    var left: js.UndefOr[Double | String] = js.native
    
    /**
      * The line style of sankey graph, in which
      * [lineStyle.color](https://echarts.apache.org/en/option.html#series-sankey.lineStyle.color)
      * can be assigned to the value of `'source'` of `'target'`, then
      * the edge will automatically take the source node or target node
      * color as its own color.
      *
      *
      * @see https://echarts.apache.org/en/option.html#series-sankey.lineStyle
      */
    var lineStyle: js.UndefOr[ColorCurveness] = js.native
    
    /**
      * The links between nodes.
      * **Notes: The Sankey diagram theoretically only supports Directed
      * Acyclic Graph(DAG), so please make sure that there is no cycle
      * in the links.** For instance:
      *
      * [see doc](https://echarts.apache.org/en/option.html#series-sankey.sankey)
      *
      *
      * @see https://echarts.apache.org/en/option.html#series-sankey.links
      */
    var links: js.UndefOr[js.Array[typingsSlinky.echarts.echarts.EChartOption.SeriesSankey.LinkObject]] = js.native
    
    /**
      * Series name used for displaying in
      * [tooltip](https://echarts.apache.org/en/option.html#tooltip)
      *
      *
      * @see https://echarts.apache.org/en/option.html#series-sankey.name
      */
    var name: js.UndefOr[String] = js.native
    
    /**
      * Alignment of nodes in the graph.
      *
      * May be 'left', 'right' or 'justify'
      *
      * @default
      * justify
      * @see https://echarts.apache.org/en/option.html#series-sankey.nodeAlign
      */
    var nodeAlign: js.UndefOr[String] = js.native
    
    /**
      * The gap between any two rectangles in each column from the graph.
      *
      *
      * @default
      * 8
      * @see https://echarts.apache.org/en/option.html#series-sankey.nodeGap
      */
    var nodeGap: js.UndefOr[Double] = js.native
    
    /**
      * The node width of rectangle in graph.
      *
      *
      * @default
      * 20
      * @see https://echarts.apache.org/en/option.html#series-sankey.nodeWidth
      */
    var nodeWidth: js.UndefOr[Double] = js.native
    
    /**
      * Equals to
      * [data](https://echarts.apache.org/en/option.html#series-sankey.data)
      *
      *
      * @see https://echarts.apache.org/en/option.html#series-sankey.nodes
      */
    var nodes: js.UndefOr[js.Array[_]] = js.native
    
    /**
      * The layout direction of the nodes in the Sankey diagram, which
      * can be horizontal from left to right or vertical from top to
      * bottom.
      * The corresponding parameter values ​​are `horizontal` or `vertical`.
      *
      *
      * @default
      * "horizontal"
      * @see https://echarts.apache.org/en/option.html#series-sankey.orient
      */
    var orient: js.UndefOr[String] = js.native
    
    /**
      * Distance between sankey component and the right side of the container.
      *
      * `right` value can be instant pixel value like `20`; it can also
      * be percentage value relative to container width like `'20%'`.
      *
      *
      * @default
      * 20%
      * @see https://echarts.apache.org/en/option.html#series-sankey.right
      */
    var right: js.UndefOr[Double | String] = js.native
    
    /**
      * Whether to ignore mouse events.
      * Default value is false, for triggering and responding to mouse
      * events.
      *
      *
      * @see https://echarts.apache.org/en/option.html#series-sankey.silent
      */
    var silent: js.UndefOr[Boolean] = js.native
    
    /**
      * tooltip settings in this series.
      *
      *
      * @see https://echarts.apache.org/en/option.html#series-sankey.tooltip
      */
    var tooltip: js.UndefOr[BaseTooltip] = js.native
    
    /**
      * Distance between sankey component and the top side of the container.
      *
      * `top` value can be instant pixel value like `20`; it can also
      * be percentage value relative to container width like `'20%'`;
      * and it can also be `'top'`, `'middle'`, or `'bottom'`.
      *
      * If the `left` value is set to be `'top'`, `'middle'`, or `'bottom'`,
      * then the component will be aligned automatically based on position.
      *
      *
      * @default
      * 5%
      * @see https://echarts.apache.org/en/option.html#series-sankey.top
      */
    var top: js.UndefOr[Double | String] = js.native
    
    /**
      * @default
      * "sankey"
      * @see https://echarts.apache.org/en/option.html#series-sankey.type
      */
    var `type`: js.UndefOr[String] = js.native
    
    /**
      * Width of sankey component.
      *
      *
      * @see https://echarts.apache.org/en/option.html#series-sankey.width
      */
    var width: js.UndefOr[Double | String] = js.native
    
    /**
      * `z` value of all graghical elements in , which controls order
      * of drawing graphical components.
      * Components with smaller `z` values may be overwritten by those
      * with larger `z` values.
      *
      * `z` has a lower priority to `zlevel`, and will not create new
      * Canvas.
      *
      *
      * @default
      * 2
      * @see https://echarts.apache.org/en/option.html#series-sankey.z
      */
    var z: js.UndefOr[Double] = js.native
    
    /**
      * `zlevel` value of all graghical elements in .
      *
      * `zlevel` is used to make layers with Canvas.
      * Graphical elements with different `zlevel` values will be placed
      * in different Canvases, which is a common optimization technique.
      * We can put those frequently changed elements (like those with
      * animations) to a seperate `zlevel`.
      * Notice that too many Canvases will increase memory cost, and
      * should be used carefully on mobile phones to avoid crash.
      *
      * Canvases with bigger `zlevel` will be placed on Canvases with
      * smaller `zlevel`.
      *
      *
      * @see https://echarts.apache.org/en/option.html#series-sankey.zlevel
      */
    var zlevel: js.UndefOr[Double] = js.native
  }
  object SeriesSankey {
    
    @scala.inline
    def apply(): SeriesSankey = {
      val __obj = js.Dynamic.literal()
      __obj.asInstanceOf[SeriesSankey]
    }
    
    @js.native
    trait DataObject extends StObject {
      
      /**
        * @see https://echarts.apache.org/en/option.html#series-sankey.data.emphasis
        */
      var emphasis: js.UndefOr[`7`] = js.native
      
      /**
        * The style of this node.
        *
        *
        * @see https://echarts.apache.org/en/option.html#series-sankey.data.itemStyle
        */
      var itemStyle: js.UndefOr[BorderType] = js.native
      
      /**
        * The lable style of this node.
        *
        *
        * @see https://echarts.apache.org/en/option.html#series-sankey.data.label
        */
      var label: js.UndefOr[Distance] = js.native
      
      /**
        * The name of data item.
        *
        *
        * @see https://echarts.apache.org/en/option.html#series-sankey.data.name
        */
      var name: js.UndefOr[String] = js.native
      
      /**
        * tooltip settings in this series data.
        *
        *
        * @see https://echarts.apache.org/en/option.html#series-sankey.data.tooltip
        */
      var tooltip: js.UndefOr[BaseTooltip] = js.native
      
      /**
        * The value of data item.
        *
        *
        * @see https://echarts.apache.org/en/option.html#series-sankey.data.value
        */
      var value: js.UndefOr[js.Array[_] | Double] = js.native
    }
    object DataObject {
      
      @scala.inline
      def apply(): typingsSlinky.echarts.echarts.EChartOption.SeriesSankey.DataObject = {
        val __obj = js.Dynamic.literal()
        __obj.asInstanceOf[typingsSlinky.echarts.echarts.EChartOption.SeriesSankey.DataObject]
      }
      
      @scala.inline
      implicit class DataObjectMutableBuilder[Self <: typingsSlinky.echarts.echarts.EChartOption.SeriesSankey.DataObject] (val x: Self) extends AnyVal {
        
        @scala.inline
        def setEmphasis(value: `7`): Self = StObject.set(x, "emphasis", value.asInstanceOf[js.Any])
        
        @scala.inline
        def setEmphasisUndefined: Self = StObject.set(x, "emphasis", js.undefined)
        
        @scala.inline
        def setItemStyle(value: BorderType): Self = StObject.set(x, "itemStyle", value.asInstanceOf[js.Any])
        
        @scala.inline
        def setItemStyleUndefined: Self = StObject.set(x, "itemStyle", js.undefined)
        
        @scala.inline
        def setLabel(value: Distance): Self = StObject.set(x, "label", value.asInstanceOf[js.Any])
        
        @scala.inline
        def setLabelUndefined: Self = StObject.set(x, "label", js.undefined)
        
        @scala.inline
        def setName(value: String): Self = StObject.set(x, "name", value.asInstanceOf[js.Any])
        
        @scala.inline
        def setNameUndefined: Self = StObject.set(x, "name", js.undefined)
        
        @scala.inline
        def setTooltip(value: BaseTooltip): Self = StObject.set(x, "tooltip", value.asInstanceOf[js.Any])
        
        @scala.inline
        def setTooltipUndefined: Self = StObject.set(x, "tooltip", js.undefined)
        
        @scala.inline
        def setValue(value: js.Array[_] | Double): Self = StObject.set(x, "value", value.asInstanceOf[js.Any])
        
        @scala.inline
        def setValueUndefined: Self = StObject.set(x, "value", js.undefined)
        
        @scala.inline
        def setValueVarargs(value: js.Any*): Self = StObject.set(x, "value", js.Array(value :_*))
      }
    }
    
    @js.native
    trait LinkObject extends StObject {
      
      /**
        * @see https://echarts.apache.org/en/option.html#series-sankey.links.emphasis
        */
      var emphasis: js.UndefOr[`21`] = js.native
      
      /**
        * The line stlye of edge.
        *
        *
        * @see https://echarts.apache.org/en/option.html#series-sankey.links.lineStyle
        */
      var lineStyle: js.UndefOr[ColorCurveness] = js.native
      
      /**
        * The
        * [name of source node](https://echarts.apache.org/en/option.html#series-graph.data.name)
        * of edge
        *
        *
        * @see https://echarts.apache.org/en/option.html#series-sankey.links.source
        */
      var source: js.UndefOr[String] = js.native
      
      /**
        * The
        * [name of target node](https://echarts.apache.org/en/option.html#series-graph.data.name)
        * of edge
        *
        *
        * @see https://echarts.apache.org/en/option.html#series-sankey.links.target
        */
      var target: js.UndefOr[String] = js.native
      
      /**
        * The value of edge, which decides the width of edge.
        *
        *
        * @see https://echarts.apache.org/en/option.html#series-sankey.links.value
        */
      var value: js.UndefOr[Double] = js.native
    }
    object LinkObject {
      
      @scala.inline
      def apply(): typingsSlinky.echarts.echarts.EChartOption.SeriesSankey.LinkObject = {
        val __obj = js.Dynamic.literal()
        __obj.asInstanceOf[typingsSlinky.echarts.echarts.EChartOption.SeriesSankey.LinkObject]
      }
      
      @scala.inline
      implicit class LinkObjectMutableBuilder[Self <: typingsSlinky.echarts.echarts.EChartOption.SeriesSankey.LinkObject] (val x: Self) extends AnyVal {
        
        @scala.inline
        def setEmphasis(value: `21`): Self = StObject.set(x, "emphasis", value.asInstanceOf[js.Any])
        
        @scala.inline
        def setEmphasisUndefined: Self = StObject.set(x, "emphasis", js.undefined)
        
        @scala.inline
        def setLineStyle(value: ColorCurveness): Self = StObject.set(x, "lineStyle", value.asInstanceOf[js.Any])
        
        @scala.inline
        def setLineStyleUndefined: Self = StObject.set(x, "lineStyle", js.undefined)
        
        @scala.inline
        def setSource(value: String): Self = StObject.set(x, "source", value.asInstanceOf[js.Any])
        
        @scala.inline
        def setSourceUndefined: Self = StObject.set(x, "source", js.undefined)
        
        @scala.inline
        def setTarget(value: String): Self = StObject.set(x, "target", value.asInstanceOf[js.Any])
        
        @scala.inline
        def setTargetUndefined: Self = StObject.set(x, "target", js.undefined)
        
        @scala.inline
        def setValue(value: Double): Self = StObject.set(x, "value", value.asInstanceOf[js.Any])
        
        @scala.inline
        def setValueUndefined: Self = StObject.set(x, "value", js.undefined)
      }
    }
    
    @scala.inline
    implicit class SeriesSankeyMutableBuilder[Self <: SeriesSankey] (val x: Self) extends AnyVal {
      
      @scala.inline
      def setAnimation(value: Boolean): Self = StObject.set(x, "animation", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setAnimationDelay(value: js.Function | Double): Self = StObject.set(x, "animationDelay", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setAnimationDelayUndefined: Self = StObject.set(x, "animationDelay", js.undefined)
      
      @scala.inline
      def setAnimationDelayUpdate(value: js.Function | Double): Self = StObject.set(x, "animationDelayUpdate", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setAnimationDelayUpdateUndefined: Self = StObject.set(x, "animationDelayUpdate", js.undefined)
      
      @scala.inline
      def setAnimationDuration(value: js.Function | Double): Self = StObject.set(x, "animationDuration", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setAnimationDurationUndefined: Self = StObject.set(x, "animationDuration", js.undefined)
      
      @scala.inline
      def setAnimationDurationUpdate(value: js.Function | Double): Self = StObject.set(x, "animationDurationUpdate", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setAnimationDurationUpdateUndefined: Self = StObject.set(x, "animationDurationUpdate", js.undefined)
      
      @scala.inline
      def setAnimationEasing(value: String): Self = StObject.set(x, "animationEasing", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setAnimationEasingUndefined: Self = StObject.set(x, "animationEasing", js.undefined)
      
      @scala.inline
      def setAnimationEasingUpdate(value: String): Self = StObject.set(x, "animationEasingUpdate", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setAnimationEasingUpdateUndefined: Self = StObject.set(x, "animationEasingUpdate", js.undefined)
      
      @scala.inline
      def setAnimationThreshold(value: Double): Self = StObject.set(x, "animationThreshold", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setAnimationThresholdUndefined: Self = StObject.set(x, "animationThreshold", js.undefined)
      
      @scala.inline
      def setAnimationUndefined: Self = StObject.set(x, "animation", js.undefined)
      
      @scala.inline
      def setBottom(value: Double | String): Self = StObject.set(x, "bottom", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setBottomUndefined: Self = StObject.set(x, "bottom", js.undefined)
      
      @scala.inline
      def setData(
        value: js.Array[
              (js.Array[Double | typingsSlinky.echarts.echarts.EChartOption.SeriesSankey.DataObject]) | typingsSlinky.echarts.echarts.EChartOption.SeriesSankey.DataObject | Double
            ]
      ): Self = StObject.set(x, "data", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setDataUndefined: Self = StObject.set(x, "data", js.undefined)
      
      @scala.inline
      def setDataVarargs(
        value: ((js.Array[Double | typingsSlinky.echarts.echarts.EChartOption.SeriesSankey.DataObject]) | typingsSlinky.echarts.echarts.EChartOption.SeriesSankey.DataObject | Double)*
      ): Self = StObject.set(x, "data", js.Array(value :_*))
      
      @scala.inline
      def setDraggable(value: Boolean): Self = StObject.set(x, "draggable", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setDraggableUndefined: Self = StObject.set(x, "draggable", js.undefined)
      
      @scala.inline
      def setEdges(value: js.Array[_]): Self = StObject.set(x, "edges", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setEdgesUndefined: Self = StObject.set(x, "edges", js.undefined)
      
      @scala.inline
      def setEdgesVarargs(value: js.Any*): Self = StObject.set(x, "edges", js.Array(value :_*))
      
      @scala.inline
      def setEmphasis(value: ItemStyleLabelLineStyle): Self = StObject.set(x, "emphasis", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setEmphasisUndefined: Self = StObject.set(x, "emphasis", js.undefined)
      
      @scala.inline
      def setFocusNodeAdjacency(value: Boolean | String): Self = StObject.set(x, "focusNodeAdjacency", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setFocusNodeAdjacencyUndefined: Self = StObject.set(x, "focusNodeAdjacency", js.undefined)
      
      @scala.inline
      def setHeight(value: Double | String): Self = StObject.set(x, "height", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setHeightUndefined: Self = StObject.set(x, "height", js.undefined)
      
      @scala.inline
      def setId(value: String): Self = StObject.set(x, "id", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setIdUndefined: Self = StObject.set(x, "id", js.undefined)
      
      @scala.inline
      def setItemStyle(value: BorderType): Self = StObject.set(x, "itemStyle", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setItemStyleUndefined: Self = StObject.set(x, "itemStyle", js.undefined)
      
      @scala.inline
      def setLabel(value: BorderRadius): Self = StObject.set(x, "label", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setLabelUndefined: Self = StObject.set(x, "label", js.undefined)
      
      @scala.inline
      def setLayoutIterations(value: Double): Self = StObject.set(x, "layoutIterations", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setLayoutIterationsUndefined: Self = StObject.set(x, "layoutIterations", js.undefined)
      
      @scala.inline
      def setLeft(value: Double | String): Self = StObject.set(x, "left", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setLeftUndefined: Self = StObject.set(x, "left", js.undefined)
      
      @scala.inline
      def setLineStyle(value: ColorCurveness): Self = StObject.set(x, "lineStyle", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setLineStyleUndefined: Self = StObject.set(x, "lineStyle", js.undefined)
      
      @scala.inline
      def setLinks(value: js.Array[typingsSlinky.echarts.echarts.EChartOption.SeriesSankey.LinkObject]): Self = StObject.set(x, "links", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setLinksUndefined: Self = StObject.set(x, "links", js.undefined)
      
      @scala.inline
      def setLinksVarargs(value: typingsSlinky.echarts.echarts.EChartOption.SeriesSankey.LinkObject*): Self = StObject.set(x, "links", js.Array(value :_*))
      
      @scala.inline
      def setName(value: String): Self = StObject.set(x, "name", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setNameUndefined: Self = StObject.set(x, "name", js.undefined)
      
      @scala.inline
      def setNodeAlign(value: String): Self = StObject.set(x, "nodeAlign", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setNodeAlignUndefined: Self = StObject.set(x, "nodeAlign", js.undefined)
      
      @scala.inline
      def setNodeGap(value: Double): Self = StObject.set(x, "nodeGap", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setNodeGapUndefined: Self = StObject.set(x, "nodeGap", js.undefined)
      
      @scala.inline
      def setNodeWidth(value: Double): Self = StObject.set(x, "nodeWidth", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setNodeWidthUndefined: Self = StObject.set(x, "nodeWidth", js.undefined)
      
      @scala.inline
      def setNodes(value: js.Array[_]): Self = StObject.set(x, "nodes", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setNodesUndefined: Self = StObject.set(x, "nodes", js.undefined)
      
      @scala.inline
      def setNodesVarargs(value: js.Any*): Self = StObject.set(x, "nodes", js.Array(value :_*))
      
      @scala.inline
      def setOrient(value: String): Self = StObject.set(x, "orient", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setOrientUndefined: Self = StObject.set(x, "orient", js.undefined)
      
      @scala.inline
      def setRight(value: Double | String): Self = StObject.set(x, "right", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setRightUndefined: Self = StObject.set(x, "right", js.undefined)
      
      @scala.inline
      def setSilent(value: Boolean): Self = StObject.set(x, "silent", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setSilentUndefined: Self = StObject.set(x, "silent", js.undefined)
      
      @scala.inline
      def setTooltip(value: BaseTooltip): Self = StObject.set(x, "tooltip", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setTooltipUndefined: Self = StObject.set(x, "tooltip", js.undefined)
      
      @scala.inline
      def setTop(value: Double | String): Self = StObject.set(x, "top", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setTopUndefined: Self = StObject.set(x, "top", js.undefined)
      
      @scala.inline
      def setType(value: String): Self = StObject.set(x, "type", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setTypeUndefined: Self = StObject.set(x, "type", js.undefined)
      
      @scala.inline
      def setWidth(value: Double | String): Self = StObject.set(x, "width", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setWidthUndefined: Self = StObject.set(x, "width", js.undefined)
      
      @scala.inline
      def setZ(value: Double): Self = StObject.set(x, "z", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setZUndefined: Self = StObject.set(x, "z", js.undefined)
      
      @scala.inline
      def setZlevel(value: Double): Self = StObject.set(x, "zlevel", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setZlevelUndefined: Self = StObject.set(x, "zlevel", js.undefined)
    }
  }
  
  /**
    * Scatter (bubble) chart . The scatter chart in
    * [rectangular coordinate](https://echarts.apache.org/en/option.html#grid)
    * could be used to present the relation between `x` and `y`.
    * If data have multiple dimensions, the values of the other dimensions
    * can be visualized through
    * [symbol](https://echarts.apache.org/en/option.html#series-scatter.symbol)
    * with various sizes and colors, which becomes a bubble chart.
    * These can be done by using with
    * [visualMap](https://echarts.apache.org/en/option.html#visualMap)
    * component.
    *
    * It could be used with
    * [rectangular coordinate](https://echarts.apache.org/en/option.html#grid)
    * and
    * [polar coordinate](https://echarts.apache.org/en/option.html#polar)
    * and
    * [geographical coordinate](https://echarts.apache.org/en/option.html#geo)
    * .
    *
    * [see doc](https://echarts.apache.org/en/option.html#series-scatter)
    *
    *
    * @see https://echarts.apache.org/en/option.html#series-scatter
    */
  @js.native
  trait SeriesScatter extends Series {
    
    /**
      * Whether to enable animation.
      *
      *
      * @default
      * "true"
      * @see https://echarts.apache.org/en/option.html#series-scatter.animation
      */
    var animation: js.UndefOr[Boolean] = js.native
    
    /**
      * Delay before updating the first animation, which supports callback
      * function for different data to have different animation effect.
      *
      * For example:
      *
      * [see doc](https://echarts.apache.org/en/option.html#series-scatter.scatter)
      *
      * See
      * [this example](https://echarts.apache.org/examples/en/editor.html?c=bar-animation-delay)
      * for more information.
      *
      *
      * @see https://echarts.apache.org/en/option.html#series-scatter.animationDelay
      */
    var animationDelay: js.UndefOr[js.Function | Double] = js.native
    
    /**
      * Delay before updating animation, which supports callback function
      * for different data to have different animation effect.
      *
      * For example:
      *
      * [see doc](https://echarts.apache.org/en/option.html#series-scatter.scatter)
      *
      * See
      * [this example](https://echarts.apache.org/examples/en/editor.html?c=bar-animation-delay)
      * for more information.
      *
      *
      * @see https://echarts.apache.org/en/option.html#series-scatter.animationDelayUpdate
      */
    var animationDelayUpdate: js.UndefOr[js.Function | Double] = js.native
    
    /**
      * Duration of the first animation, which supports callback function
      * for different data to have different animation effect:
      *
      * [see doc](https://echarts.apache.org/en/option.html#series-scatter.scatter)
      *
      *
      * @default
      * 1000
      * @see https://echarts.apache.org/en/option.html#series-scatter.animationDuration
      */
    var animationDuration: js.UndefOr[js.Function | Double] = js.native
    
    /**
      * Time for animation to complete, which supports callback function
      * for different data to have different animation effect:
      *
      * [see doc](https://echarts.apache.org/en/option.html#series-scatter.scatter)
      *
      *
      * @default
      * 300
      * @see https://echarts.apache.org/en/option.html#series-scatter.animationDurationUpdate
      */
    var animationDurationUpdate: js.UndefOr[js.Function | Double] = js.native
    
    /**
      * Easing method used for the first animation.
      * Varied easing effects can be found at
      * [easing effect example](https://echarts.apache.org/examples/en/editor.html?c=line-easing)
      * .
      *
      *
      * @default
      * "cubicOut"
      * @see https://echarts.apache.org/en/option.html#series-scatter.animationEasing
      */
    var animationEasing: js.UndefOr[String] = js.native
    
    /**
      * Easing method used for animation.
      *
      *
      * @default
      * "cubicOut"
      * @see https://echarts.apache.org/en/option.html#series-scatter.animationEasingUpdate
      */
    var animationEasingUpdate: js.UndefOr[String] = js.native
    
    /**
      * Whether to set graphic number threshold to animation.
      * Animation will be disabled when graphic number is larger than
      * threshold.
      *
      *
      * @default
      * 2000
      * @see https://echarts.apache.org/en/option.html#series-scatter.animationThreshold
      */
    var animationThreshold: js.UndefOr[Double] = js.native
    
    /**
      * Index of
      * [calendar coordinates](https://echarts.apache.org/en/option.html#calendar)
      * to combine with, which is useful for multiple calendar coordinates
      * in one chart.
      *
      *
      * @see https://echarts.apache.org/en/option.html#series-scatter.calendarIndex
      */
    var calendarIndex: js.UndefOr[Double] = js.native
    
    /**
      * The coordinate used in the series, whose options are:
      *
      * + `'cartesian2d'`
      *
      * Use a two-dimensional rectangular coordinate (also known as Cartesian
      * coordinate), with
      * [xAxisIndex](https://echarts.apache.org/en/option.html#series-bar.xAxisIndex)
      * and
      * [yAxisIndex](https://echarts.apache.org/en/option.html#series-bar.yAxisIndex)
      * to assign the corresponding axis component.
      *
      * + `'polar'`
      *
      * Use polar coordinates, with
      * [polarIndex](https://echarts.apache.org/en/option.html#series-bar.polarIndex)
      * to assign the corresponding polar coordinate component.
      *
      * + `'geo'`
      *
      * Use geographic coordinate, with
      * [geoIndex](https://echarts.apache.org/en/option.html#series-bar.geoIndex)
      * to assign the corresponding geographic coordinate components.
      *
      *
      * @default
      * "cartesian2d"
      * @see https://echarts.apache.org/en/option.html#series-scatter.coordinateSystem
      */
    var coordinateSystem: js.UndefOr[String] = js.native
    
    /**
      * The mouse style when mouse hovers on an element, the same as
      * `cursor` property in `CSS`.
      *
      *
      * @default
      * "pointer"
      * @see https://echarts.apache.org/en/option.html#series-scatter.cursor
      */
    var cursor: js.UndefOr[String] = js.native
    
    /**
      * Data array of series, which can be in the following forms:
      *
      * Notice, if no `data` specified in series, and there is
      * [dataset](https://echarts.apache.org/en/option.html#dataset)
      * in option, series will use the first
      * [dataset](https://echarts.apache.org/en/option.html#dataset)
      * as its datasource. If `data` has been specified,
      * [dataset](https://echarts.apache.org/en/option.html#dataset)
      * will not used.
      *
      * `series.datasetIndex` can be used to specify other
      * [dataset](https://echarts.apache.org/en/option.html#dataset)
      * .
      *
      * Basically, data is represented by a two-dimension array, like
      * the example below, where each colum is named as a "dimension".
      *
      * [see doc](https://echarts.apache.org/en/option.html#series-scatter.scatter)
      *
      * + In
      * [cartesian (grid)](https://echarts.apache.org/en/option.html#grid)
      * , "dimX" and "dimY" correspond to
      * [xAxis](https://echarts.apache.org/en/option.html#xAxis)
      * and
      * [yAxis](https://echarts.apache.org/en/option.html#yAxis)
      * repectively.
      * + In
      * [polar](https://echarts.apache.org/en/option.html#polar)
      * "dimX" and "dimY" correspond to
      * [radiusAxis](https://echarts.apache.org/en/option.html#radiusAxis)
      * 和
      * [angleAxis](https://echarts.apache.org/en/option.html#anbleAxis)
      * repectively.
      * + Other dimensions are optional, which can be used in other place.
      * For example:
      * + [visualMap](https://echarts.apache.org/en/option.html#visualMap)
      * can map one or more dimensions to viusal (color, symbol size
      * ...).
      * + [series.symbolSize](https://echarts.apache.org/en/option.html#series.symbolSize)
      * can be set as a callback function, where symbol size can be calculated
      * by values of a certain dimension.
      * + Values in other dimensions can be shown by
      * [tooltip.formatter](https://echarts.apache.org/en/option.html#tooltip.formatter)
      * or
      * [series.label.formatter](https://echarts.apache.org/en/option.html#series.label.formatter)
      * .
      *
      * Especially, when there is one and only one category axis (axis.type
      * is `'category'`), data can be simply be represented by a one-dimension
      * array, like:
      *
      * [see doc](https://echarts.apache.org/en/option.html#series-scatter.scatter)
      *
      * **Relationship between "value" and
      * [axis.type](https://echarts.apache.org/en/option.html#xAxis.type)
      * **
      *
      * + When a dimension corresponds to a value axis (axis.type
      * is `'value'` or `'log'`):
      *
      * The value can be a `number` (like `12`) (can also be a number
      * in a `string` format, like `'12'`).
      *
      * + When a dimension corresponds to a category axis (axis.type
      * is `'category'`):
      *
      * The value should be the ordinal of the axis.data
      * (based on `0`), the string value of the axis.data.
      * For example:
      *
      * [see doc](https://echarts.apache.org/en/option.html#series-scatter.scatter)
      *
      * There is an example of double category axes:
      * [Github Punchcard](https://echarts.apache.org/examples/en/editor.html?c=scatter-punchCard)
      * .
      *
      * + When a dimension corresponds to a time axis (type is `'time'`),
      * the value can be:
      *
      * + a timestamp, like `1484141700832`, which represents a UTC time.
      * + a date string, in one of the formats below:
      * + a subset of
      * [ISO 8601](http://www.ecma-international.org/ecma-262/5.1/#se
      * c-15.9.1.15)
      * , only including (all of these are treated as local time unless
      * timezone is specified, which is consistent with
      * [moment](https://momentjs.com/)
      * ):
      * + only part of year/month/date/time are specified: `'2012-03'`,
      * `'2012-03-01'`, `'2012-03-01 05'`, `'2012-03-01 05:06'`.
      * + separated by `"T"` or a space: `'2012-03-01T12:22:33.123'`,
      * `'2012-03-01 12:22:33.123'`.
      * + timezone specified: `'2012-03-01T12:22:33Z'`, `'2012-03-01T12:22:33+8000'`,
      * `'2012-03-01T12:22:33-05:00'`.
      * + other date string format (all of these are treated as local
      * time): `'2012'`, `'2012-3-1'`, `'2012/3/1'`, `'2012/03/01'`,
      * `'2009/6/12 2:00'`, `'2009/6/12 2:05:08'`, `'2009/6/12 2:05:08.123'`.
      * + a JavaScript Date instance created by user:
      * + Caution, when using a data string to create a Date instance,
      * [browser differences and inconsistencies](http://dygraphs.com/date-formats.html)
      * should be considered.
      * + For example: In chrome, `new Date('2012-01-01')` is treated
      * as a Jan 1st 2012 in UTC, while `new Date('2012-1-1')` and `new
      * Date('2012/01/01')` are treated as Jan 1st 2012 in local timezone.
      * In safari `new Date('2012-1-1')` is not supported.
      * + So if you intent to perform `new Date(dateString)`, it is strongly
      * recommended to use a time parse library (e.g.,
      * [moment](https://momentjs.com/)
      * ), or use `echarts.number.parseDate`, or check
      * [this](http://dygraphs.com/date-formats.html)
      * .
      *
      * **Customize a data item:**
      *
      * When needing to customize a data item, it can be set as an object,
      * where property `value` reprensent real value. For example:
      *
      * [see doc](https://echarts.apache.org/en/option.html#series-scatter.scatter)
      *
      * **Empty value:**
      *
      * `'-'` or `null` or `undefined` or `NaN` can be used to describe
      * that a data item is not exists (ps：_not exist_ does not means
      * its value is `0`).
      *
      * For example, line chart can break when encounter an empty value,
      * and scatter chart do not display graphic elements for empty values.
      *
      *
      * @see https://echarts.apache.org/en/option.html#series-scatter.data
      */
    var data: js.UndefOr[
        js.Array[
          (js.Array[
            Unit | Double | String | typingsSlinky.echarts.echarts.EChartOption.SeriesScatter.DataObject
          ]) | typingsSlinky.echarts.echarts.EChartOption.SeriesScatter.DataObject | Double | String | Unit
        ]
      ] = js.native
    
    /**
      * If
      * [series.data](https://echarts.apache.org/en/option.html#series.data)
      * is not specified, and
      * [dataset](https://echarts.apache.org/en/option.html#dataset)
      * exists, the series will use `dataset`.
      * `datasetIndex` specifies which dataset will be used.
      *
      *
      * @see https://echarts.apache.org/en/option.html#series-scatter.datasetIndex
      */
    var datasetIndex: js.UndefOr[Double] = js.native
    
    /**
      * `dimensions` can be used to define dimension info for `series.data`
      * or `dataset.source`.
      *
      * Notice: if
      * [dataset](https://echarts.apache.org/en/option.html#dataset)
      * is used, we can provide dimension names in the first column/row
      * of
      * [dataset.source](https://echarts.apache.org/en/option.html#dataset.source)
      * , and not need to specify `dimensions` here.
      * But if `dimensions` is specified here, echarts will not retrieve
      * dimension names from the first row/column of `dataset.source`
      * any more.
      *
      * For example:
      *
      * [see doc](https://echarts.apache.org/en/option.html#series-scatter.scatter)
      * [see doc](https://echarts.apache.org/en/option.html#series-scatter.scatter)
      *
      * Each data item of `dimensions` can be:
      *
      * + `string`, for example, `'someName'`, which equals to `{name:
      * 'someName'}`.
      * + `Object`, where the attributes can be:
      * + name: `string`.
      * + type: `string`, supports:
      * + `number`
      * + `float`, that is,
      * [Float64Array](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Float64Array)
      *
      * + `int`, that is,
      * [Int32Array](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Int32Array)
      *
      * + `ordinal`, discrete value, which represents string generally.
      * + `time`, time value, see
      * [data](https://echarts.apache.org/en/option.html#series.data)
      * to check the format of time value.
      * + displayName: `string`, generally used in tooltip for dimension
      * display. If not specified, use `name` by default.
      *
      * When `dimensions` is specified, the default `tooltip` will be
      * displayed vertically, which is better to show diemsion names.
      * Otherwise, `tooltip` will displayed only value horizontally.
      *
      *
      * @see https://echarts.apache.org/en/option.html#series-scatter.dimensions
      */
    var dimensions: js.UndefOr[js.Array[_]] = js.native
    
    /**
      * @see https://echarts.apache.org/en/option.html#series-scatter.emphasis
      */
    var emphasis: js.UndefOr[`8`] = js.native
    
    /**
      * Define what is encoded to for each dimension of `data`.
      * For example:
      *
      * [see doc](https://echarts.apache.org/en/option.html#series-scatter.scatter)
      *
      * Attributes of encode are different according to the type of coordinate
      * systtems. For
      * [cartesian2d](https://echarts.apache.org/en/option.html#grid)
      * , `x` and `y` can be defined. For
      * [polar](https://echarts.apache.org/en/option.html#polar)
      * , `radius` and `angle` can be defined. For
      * [geo](https://echarts.apache.org/en/option.html#geo)
      * , `lng` and `lat` can be defined.
      * Attribute `tooltip` and `itemName` (data item name in tooltip)
      * are always able to be defined.
      *
      * When
      * [dimensions](https://echarts.apache.org/en/option.html#series.dimensions)
      * is used to defined name for a certain dimension, `encode` can
      * refer the name directly. For example:
      *
      * [see doc](https://echarts.apache.org/en/option.html#series-scatter.scatter)
      *
      * Specially, in \[custom series(~series-custom), some property
      * in `encode`, corresponding to axis, can be set as null to make
      * the series not controlled by the axis, that is, the series data
      * will not be count in the extent of the axis, and the
      * [dataZoom](https://echarts.apache.org/en/option.html#dataZoom)
      * on the axis will not filter the series.
      *
      * [see doc](https://echarts.apache.org/en/option.html#series-scatter.scatter)
      *
      *
      * @see https://echarts.apache.org/en/option.html#series-scatter.encode
      */
    var encode: js.UndefOr[js.Object] = js.native
    
    /**
      * Index of
      * [geographic coordinate](https://echarts.apache.org/en/option.html#geo)
      * to combine with, which is useful for multiple geographic axes
      * in one chart.
      *
      *
      * @see https://echarts.apache.org/en/option.html#series-scatter.geoIndex
      */
    var geoIndex: js.UndefOr[Double] = js.native
    
    /**
      * Whether to enable the animation effect when mouse is on the symbol.
      *
      *
      * @see https://echarts.apache.org/en/option.html#series-scatter.hoverAnimation
      */
    var hoverAnimation: js.UndefOr[Boolean] = js.native
    
    /**
      * Component ID, not specified by default.
      * If specified, it can be used to refer the component in option
      * or API.
      *
      *
      * @see https://echarts.apache.org/en/option.html#series-scatter.id
      */
    var id: js.UndefOr[String] = js.native
    
    /**
      * Graphic style of , `emphasis` is the style when it is highlighted,
      * like being hovered by mouse, or highlighted via legend connect.
      *
      *
      * @see https://echarts.apache.org/en/option.html#series-scatter.itemStyle
      */
    var itemStyle: js.UndefOr[ShadowOffsetY] = js.native
    
    /**
      * Text label of , to explain some data information about graphic
      * item like value, name and so on.
      * `label` is placed under `itemStyle` in ECharts 2.x.
      * In ECharts 3, to make the configuration structure flatter, `label`is
      * taken to be at the same level with `itemStyle`, and has `emphasis`
      * as `itemStyle` does.
      *
      *
      * @see https://echarts.apache.org/en/option.html#series-scatter.label
      */
    var label: js.UndefOr[BorderRadius] = js.native
    
    /**
      * Whether to enable the optimization of large-scale data.
      * It could be set when large data causes performance problem.
      *
      * After being enabled, `largeThreshold` can be used to indicate
      * the minimum number for turning on the optimization.
      *
      * But when the optimization enabled, the style of single data item
      * can't be customized any more.
      *
      *
      * @see https://echarts.apache.org/en/option.html#series-scatter.large
      */
    var large: js.UndefOr[Boolean] = js.native
    
    /**
      * The threshold enabling the drawing optimization.
      *
      *
      * @default
      * 2000
      * @see https://echarts.apache.org/en/option.html#series-scatter.largeThreshold
      */
    var largeThreshold: js.UndefOr[Double] = js.native
    
    /**
      * Whether to enable highlighting chart when
      * [legend](https://echarts.apache.org/en/option.html#legend)
      * is being hovered.
      *
      *
      * @default
      * "true"
      * @see https://echarts.apache.org/en/option.html#series-scatter.legendHoverLink
      */
    var legendHoverLink: js.UndefOr[Boolean] = js.native
    
    /**
      * Used to mark an area in chart.
      * For example, mark a time interval.
      *
      *
      * @see https://echarts.apache.org/en/option.html#series-scatter.markArea
      */
    var markArea: js.UndefOr[AnimationDelayUpdate] = js.native
    
    /**
      * Use a line in the chart to illustrate.
      *
      *
      * @see https://echarts.apache.org/en/option.html#series-scatter.markLine
      */
    var markLine: js.UndefOr[AnimationDelay] = js.native
    
    /**
      * Mark point in a chart.
      *
      *
      * @see https://echarts.apache.org/en/option.html#series-scatter.markPoint
      */
    var markPoint: js.UndefOr[AnimationDuration] = js.native
    
    /**
      * Series name used for displaying in
      * [tooltip](https://echarts.apache.org/en/option.html#tooltip)
      * and filtering with
      * [legend](https://echarts.apache.org/en/option.html#legend)
      * , or updaing data and configuration with `setOption`.
      *
      *
      * @see https://echarts.apache.org/en/option.html#series-scatter.name
      */
    var name: js.UndefOr[String] = js.native
    
    /**
      * Index of
      * [polar coordinate](https://echarts.apache.org/en/option.html#polar)
      * to combine with, which is useful for multiple polar axes in one
      * chart.
      *
      *
      * @see https://echarts.apache.org/en/option.html#series-scatter.polarIndex
      */
    var polarIndex: js.UndefOr[Double] = js.native
    
    /**
      * `progressive` specifies the amount of graphic elements that can
      * be rendered within a frame (about 16ms) if "progressive rendering"
      * enabled.
      *
      * When data amount is from thousand to more than 10 million, it
      * will take too long time to render all of the graphic elements.
      * Since ECharts 4, "progressive rendering" is supported in its
      * workflow, which processes and renders data chunk by chunk alone
      * with each frame, avoiding to block the UI thread of the browser.
      *
      *
      * @default
      * 400
      * @see https://echarts.apache.org/en/option.html#series-scatter.progressive
      */
    var progressive: js.UndefOr[Double] = js.native
    
    /**
      * If current data amount is over the threshold, "progressive rendering"
      * is enabled.
      *
      *
      * @default
      * 3000
      * @see https://echarts.apache.org/en/option.html#series-scatter.progressiveThreshold
      */
    var progressiveThreshold: js.UndefOr[Double] = js.native
    
    /**
      * When
      * [dataset](https://echarts.apache.org/en/option.html#dataset)
      * is used, `seriesLayoutBy` specifies whether the column or the
      * row of `dataset` is mapped to the series, namely, the series
      * is "layout" on columns or rows. Optional values:
      *
      * + 'column': by default, the columns of `dataset` are mapped the
      * series. In this case, each column represents a dimension.
      * + 'row'：the rows of `dataset` are mapped to the series.
      * In this case, each row represents a dimension.
      *
      * Check this
      * [example](https://echarts.apache.org/examples/en/editor.html?c=dataset-series-layout-by)
      * .
      *
      *
      * @default
      * "column"
      * @see https://echarts.apache.org/en/option.html#series-scatter.seriesLayoutBy
      */
    var seriesLayoutBy: js.UndefOr[String] = js.native
    
    /**
      * Whether to ignore mouse events.
      * Default value is false, for triggering and responding to mouse
      * events.
      *
      *
      * @see https://echarts.apache.org/en/option.html#series-scatter.silent
      */
    var silent: js.UndefOr[Boolean] = js.native
    
    /**
      * Symbol of .
      *
      * Icon types provided by ECharts includes `'circle'`, `'rect'`,
      * `'roundRect'`, `'triangle'`, `'diamond'`, `'pin'`, `'arrow'`,
      * `'none'`
      *
      * It can be set to an image with `'image://url'` , in which URL
      * is the link to an image, or `dataURI` of an image.
      *
      * An image URL example:
      *
      * ```
      * 'image://http://xxx.xxx.xxx/a/b.png'
      *
      * ```
      *
      * A `dataURI` example:
      *
      * [see doc](https://echarts.apache.org/en/option.html#series-scatter.scatter)
      *
      * Icons can be set to arbitrary vector path via `'path://'` in
      * ECharts.
      * As compared with raster image, vector paths prevent from jagging
      * and blurring when scaled, and have a better control over changing
      * colors.
      * Size of vectoer icon will be adapted automatically. Refer to
      * [SVG PathData](http://www.w3.org/TR/SVG/paths.html#PathData)
      * for more information about format of path.
      * You may export vector paths from tools like Adobe Illustrator.
      *
      * For example:
      *
      * [see doc](https://echarts.apache.org/en/option.html#series-scatter.scatter)
      *
      *
      * @default
      * "circle"
      * @see https://echarts.apache.org/en/option.html#series-scatter.symbol
      */
    var symbol: js.UndefOr[String] = js.native
    
    /**
      * Whether to keep aspect for symbols in the form of `path://`.
      *
      *
      * @see https://echarts.apache.org/en/option.html#series-scatter.symbolKeepAspect
      */
    var symbolKeepAspect: js.UndefOr[Boolean] = js.native
    
    /**
      * Offset of symbol relative to original position.
      * By default, symbol will be put in the center position of data.
      * But if symbol is from user-defined vector path or image, you
      * may not expect symbol to be in center.
      * In this case, you may use this attribute to set offset to default
      * position.
      * It can be in absolute pixel value, or in relative percentage
      * value.
      *
      * For example, `[0, '50%']` means to move upside side position
      * of symbol height.
      * It can be used to make the arrow in the bottom to be at data
      * position when symbol is pin.
      *
      *
      * @default
      * [0, 0]
      * @see https://echarts.apache.org/en/option.html#series-scatter.symbolOffset
      */
    var symbolOffset: js.UndefOr[js.Array[_]] = js.native
    
    /**
      * Rotate degree of symbol.
      * Note that when `symbol` is set to be `'arrow'` in `markLine`,
      * `symbolRotate` value will be ignored, and compulsively use tangent
      * angle.
      *
      *
      * @see https://echarts.apache.org/en/option.html#series-scatter.symbolRotate
      */
    var symbolRotate: js.UndefOr[Double] = js.native
    
    /**
      * symbol size.
      * It can be set to single numbers like `10`, or use an array to
      * represent width and height.
      * For example, `[20, 10]` means symbol width is `20`, and height
      * is`10`.
      *
      * If size of symbols needs to be different, you can set with callback
      * function in the following format:
      *
      * ```
      * (value: Array|number, params: Object) => number|Array
      *
      * ```
      *
      * The first parameter `value` is the value in
      * [data](https://echarts.apache.org/en/option.html#series-scatter.data)
      * , and the second parameter `params` is the rest parameters of
      * data item.
      *
      *
      * @default
      * 10
      * @see https://echarts.apache.org/en/option.html#series-scatter.symbolSize
      */
    var symbolSize: js.UndefOr[js.Array[_] | js.Function | Double] = js.native
    
    /**
      * tooltip settings in this series.
      *
      *
      * @see https://echarts.apache.org/en/option.html#series-scatter.tooltip
      */
    var tooltip: js.UndefOr[BaseTooltip] = js.native
    
    /**
      * @default
      * "scatter"
      * @see https://echarts.apache.org/en/option.html#series-scatter.type
      */
    var `type`: js.UndefOr[String] = js.native
    
    /**
      * Index of
      * [x axis](https://echarts.apache.org/en/option.html#xAxis)
      * to combine with, which is useful for multiple x axes in one chart.
      *
      *
      * @see https://echarts.apache.org/en/option.html#series-scatter.xAxisIndex
      */
    var xAxisIndex: js.UndefOr[Double] = js.native
    
    /**
      * Index of
      * [y axis](https://echarts.apache.org/en/option.html#yAxis)
      * to combine with, which is useful for multiple y axes in one chart.
      *
      *
      * @see https://echarts.apache.org/en/option.html#series-scatter.yAxisIndex
      */
    var yAxisIndex: js.UndefOr[Double] = js.native
    
    /**
      * `z` value of all graghical elements in scatter chart, which controls
      * order of drawing graphical components.
      * Components with smaller `z` values may be overwritten by those
      * with larger `z` values.
      *
      * `z` has a lower priority to `zlevel`, and will not create new
      * Canvas.
      *
      *
      * @default
      * 2
      * @see https://echarts.apache.org/en/option.html#series-scatter.z
      */
    var z: js.UndefOr[Double] = js.native
    
    /**
      * `zlevel` value of all graghical elements in scatter chart.
      *
      * `zlevel` is used to make layers with Canvas.
      * Graphical elements with different `zlevel` values will be placed
      * in different Canvases, which is a common optimization technique.
      * We can put those frequently changed elements (like those with
      * animations) to a seperate `zlevel`.
      * Notice that too many Canvases will increase memory cost, and
      * should be used carefully on mobile phones to avoid crash.
      *
      * Canvases with bigger `zlevel` will be placed on Canvases with
      * smaller `zlevel`.
      *
      *
      * @see https://echarts.apache.org/en/option.html#series-scatter.zlevel
      */
    var zlevel: js.UndefOr[Double] = js.native
  }
  object SeriesScatter {
    
    @scala.inline
    def apply(): SeriesScatter = {
      val __obj = js.Dynamic.literal()
      __obj.asInstanceOf[SeriesScatter]
    }
    
    @js.native
    trait DataObject extends StObject {
      
      /**
        * @see https://echarts.apache.org/en/option.html#series-scatter.data.emphasis
        */
      var emphasis: js.UndefOr[`4`] = js.native
      
      /**
        * the style setting about single data point(bubble).
        *
        *
        * @see https://echarts.apache.org/en/option.html#series-scatter.data.itemStyle
        */
      var itemStyle: js.UndefOr[BorderType] = js.native
      
      /**
        * @see https://echarts.apache.org/en/option.html#series-scatter.data.label
        */
      var label: js.UndefOr[Distance] = js.native
      
      /**
        * the name of data item.
        *
        *
        * @see https://echarts.apache.org/en/option.html#series-scatter.data.name
        */
      var name: js.UndefOr[String] = js.native
      
      /**
        * Symbol of single data.
        *
        * Icon types provided by ECharts includes `'circle'`, `'rect'`,
        * `'roundRect'`, `'triangle'`, `'diamond'`, `'pin'`, `'arrow'`,
        * `'none'`
        *
        * It can be set to an image with `'image://url'` , in which
        * URL is the link to an image, or `dataURI` of an image.
        *
        * An image URL example:
        *
        * ```
        * 'image://http://xxx.xxx.xxx/a/b.png'
        *
        * ```
        *
        * A `dataURI` example:
        *
        * [see doc](https://echarts.apache.org/en/option.html#series-scatter.scatter.data)
        *
        * Icons can be set to arbitrary vector path via `'path://'`
        * in ECharts.
        * As compared with raster image, vector paths prevent from
        * jagging and blurring when scaled, and have a better control
        * over changing colors.
        * Size of vectoer icon will be adapted automatically.
        * Refer to
        * [SVG PathData](http://www.w3.org/TR/SVG/paths.html#PathData)
        * for more information about format of path.
        * You may export vector paths from tools like Adobe Illustrator.
        *
        * For example:
        *
        * [see doc](https://echarts.apache.org/en/option.html#series-scatter.scatter.data)
        *
        *
        * @see https://echarts.apache.org/en/option.html#series-scatter.data.symbol
        */
      var symbol: js.UndefOr[String] = js.native
      
      /**
        * Whether to keep aspect for symbols in the form of `path://`.
        *
        *
        * @see https://echarts.apache.org/en/option.html#series-scatter.data.symbolKeepAspect
        */
      var symbolKeepAspect: js.UndefOr[Boolean] = js.native
      
      /**
        * Offset of single data symbol relative to original position.
        * By default, symbol will be put in the center position of
        * data.
        * But if symbol is from user-defined vector path or image,
        * you may not expect symbol to be in center.
        * In this case, you may use this attribute to set offset to
        * default position.
        * It can be in absolute pixel value, or in relative percentage
        * value.
        *
        * For example, `[0, '50%']` means to move upside side position
        * of symbol height.
        * It can be used to make the arrow in the bottom to be at data
        * position when symbol is pin.
        *
        *
        * @default
        * [0, 0]
        * @see https://echarts.apache.org/en/option.html#series-scatter.data.symbolOffset
        */
      var symbolOffset: js.UndefOr[js.Array[_]] = js.native
      
      /**
        * Rotate degree of single data symbol.
        * Note that when `symbol` is set to be `'arrow'` in `markLine`,
        * `symbolRotate` value will be ignored, and compulsively use
        * tangent angle.
        *
        *
        * @see https://echarts.apache.org/en/option.html#series-scatter.data.symbolRotate
        */
      var symbolRotate: js.UndefOr[Double] = js.native
      
      /**
        * single data symbol size.
        * It can be set to single numbers like `10`, or use an array
        * to represent width and height.
        * For example, `[20, 10]` means symbol width is `20`, and height
        * is`10`.
        *
        *
        * @see https://echarts.apache.org/en/option.html#series-scatter.data.symbolSize
        */
      var symbolSize: js.UndefOr[js.Array[_] | Double] = js.native
      
      /**
        * tooltip settings in this series data.
        *
        *
        * @see https://echarts.apache.org/en/option.html#series-scatter.data.tooltip
        */
      var tooltip: js.UndefOr[BaseTooltip] = js.native
      
      /**
        * the value of data item.
        *
        *
        * @see https://echarts.apache.org/en/option.html#series-scatter.data.value
        */
      var value: js.UndefOr[js.Array[_]] = js.native
    }
    object DataObject {
      
      @scala.inline
      def apply(): typingsSlinky.echarts.echarts.EChartOption.SeriesScatter.DataObject = {
        val __obj = js.Dynamic.literal()
        __obj.asInstanceOf[typingsSlinky.echarts.echarts.EChartOption.SeriesScatter.DataObject]
      }
      
      @scala.inline
      implicit class DataObjectMutableBuilder[Self <: typingsSlinky.echarts.echarts.EChartOption.SeriesScatter.DataObject] (val x: Self) extends AnyVal {
        
        @scala.inline
        def setEmphasis(value: `4`): Self = StObject.set(x, "emphasis", value.asInstanceOf[js.Any])
        
        @scala.inline
        def setEmphasisUndefined: Self = StObject.set(x, "emphasis", js.undefined)
        
        @scala.inline
        def setItemStyle(value: BorderType): Self = StObject.set(x, "itemStyle", value.asInstanceOf[js.Any])
        
        @scala.inline
        def setItemStyleUndefined: Self = StObject.set(x, "itemStyle", js.undefined)
        
        @scala.inline
        def setLabel(value: Distance): Self = StObject.set(x, "label", value.asInstanceOf[js.Any])
        
        @scala.inline
        def setLabelUndefined: Self = StObject.set(x, "label", js.undefined)
        
        @scala.inline
        def setName(value: String): Self = StObject.set(x, "name", value.asInstanceOf[js.Any])
        
        @scala.inline
        def setNameUndefined: Self = StObject.set(x, "name", js.undefined)
        
        @scala.inline
        def setSymbol(value: String): Self = StObject.set(x, "symbol", value.asInstanceOf[js.Any])
        
        @scala.inline
        def setSymbolKeepAspect(value: Boolean): Self = StObject.set(x, "symbolKeepAspect", value.asInstanceOf[js.Any])
        
        @scala.inline
        def setSymbolKeepAspectUndefined: Self = StObject.set(x, "symbolKeepAspect", js.undefined)
        
        @scala.inline
        def setSymbolOffset(value: js.Array[_]): Self = StObject.set(x, "symbolOffset", value.asInstanceOf[js.Any])
        
        @scala.inline
        def setSymbolOffsetUndefined: Self = StObject.set(x, "symbolOffset", js.undefined)
        
        @scala.inline
        def setSymbolOffsetVarargs(value: js.Any*): Self = StObject.set(x, "symbolOffset", js.Array(value :_*))
        
        @scala.inline
        def setSymbolRotate(value: Double): Self = StObject.set(x, "symbolRotate", value.asInstanceOf[js.Any])
        
        @scala.inline
        def setSymbolRotateUndefined: Self = StObject.set(x, "symbolRotate", js.undefined)
        
        @scala.inline
        def setSymbolSize(value: js.Array[_] | Double): Self = StObject.set(x, "symbolSize", value.asInstanceOf[js.Any])
        
        @scala.inline
        def setSymbolSizeUndefined: Self = StObject.set(x, "symbolSize", js.undefined)
        
        @scala.inline
        def setSymbolSizeVarargs(value: js.Any*): Self = StObject.set(x, "symbolSize", js.Array(value :_*))
        
        @scala.inline
        def setSymbolUndefined: Self = StObject.set(x, "symbol", js.undefined)
        
        @scala.inline
        def setTooltip(value: BaseTooltip): Self = StObject.set(x, "tooltip", value.asInstanceOf[js.Any])
        
        @scala.inline
        def setTooltipUndefined: Self = StObject.set(x, "tooltip", js.undefined)
        
        @scala.inline
        def setValue(value: js.Array[_]): Self = StObject.set(x, "value", value.asInstanceOf[js.Any])
        
        @scala.inline
        def setValueUndefined: Self = StObject.set(x, "value", js.undefined)
        
        @scala.inline
        def setValueVarargs(value: js.Any*): Self = StObject.set(x, "value", js.Array(value :_*))
      }
    }
    
    @scala.inline
    implicit class SeriesScatterMutableBuilder[Self <: SeriesScatter] (val x: Self) extends AnyVal {
      
      @scala.inline
      def setAnimation(value: Boolean): Self = StObject.set(x, "animation", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setAnimationDelay(value: js.Function | Double): Self = StObject.set(x, "animationDelay", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setAnimationDelayUndefined: Self = StObject.set(x, "animationDelay", js.undefined)
      
      @scala.inline
      def setAnimationDelayUpdate(value: js.Function | Double): Self = StObject.set(x, "animationDelayUpdate", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setAnimationDelayUpdateUndefined: Self = StObject.set(x, "animationDelayUpdate", js.undefined)
      
      @scala.inline
      def setAnimationDuration(value: js.Function | Double): Self = StObject.set(x, "animationDuration", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setAnimationDurationUndefined: Self = StObject.set(x, "animationDuration", js.undefined)
      
      @scala.inline
      def setAnimationDurationUpdate(value: js.Function | Double): Self = StObject.set(x, "animationDurationUpdate", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setAnimationDurationUpdateUndefined: Self = StObject.set(x, "animationDurationUpdate", js.undefined)
      
      @scala.inline
      def setAnimationEasing(value: String): Self = StObject.set(x, "animationEasing", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setAnimationEasingUndefined: Self = StObject.set(x, "animationEasing", js.undefined)
      
      @scala.inline
      def setAnimationEasingUpdate(value: String): Self = StObject.set(x, "animationEasingUpdate", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setAnimationEasingUpdateUndefined: Self = StObject.set(x, "animationEasingUpdate", js.undefined)
      
      @scala.inline
      def setAnimationThreshold(value: Double): Self = StObject.set(x, "animationThreshold", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setAnimationThresholdUndefined: Self = StObject.set(x, "animationThreshold", js.undefined)
      
      @scala.inline
      def setAnimationUndefined: Self = StObject.set(x, "animation", js.undefined)
      
      @scala.inline
      def setCalendarIndex(value: Double): Self = StObject.set(x, "calendarIndex", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setCalendarIndexUndefined: Self = StObject.set(x, "calendarIndex", js.undefined)
      
      @scala.inline
      def setCoordinateSystem(value: String): Self = StObject.set(x, "coordinateSystem", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setCoordinateSystemUndefined: Self = StObject.set(x, "coordinateSystem", js.undefined)
      
      @scala.inline
      def setCursor(value: String): Self = StObject.set(x, "cursor", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setCursorUndefined: Self = StObject.set(x, "cursor", js.undefined)
      
      @scala.inline
      def setData(
        value: js.Array[
              (js.Array[
                Unit | Double | String | typingsSlinky.echarts.echarts.EChartOption.SeriesScatter.DataObject
              ]) | typingsSlinky.echarts.echarts.EChartOption.SeriesScatter.DataObject | Double | String | Unit
            ]
      ): Self = StObject.set(x, "data", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setDataUndefined: Self = StObject.set(x, "data", js.undefined)
      
      @scala.inline
      def setDataVarargs(
        value: ((js.Array[
              Unit | Double | String | typingsSlinky.echarts.echarts.EChartOption.SeriesScatter.DataObject
            ]) | typingsSlinky.echarts.echarts.EChartOption.SeriesScatter.DataObject | Double | String | Unit)*
      ): Self = StObject.set(x, "data", js.Array(value :_*))
      
      @scala.inline
      def setDatasetIndex(value: Double): Self = StObject.set(x, "datasetIndex", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setDatasetIndexUndefined: Self = StObject.set(x, "datasetIndex", js.undefined)
      
      @scala.inline
      def setDimensions(value: js.Array[_]): Self = StObject.set(x, "dimensions", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setDimensionsUndefined: Self = StObject.set(x, "dimensions", js.undefined)
      
      @scala.inline
      def setDimensionsVarargs(value: js.Any*): Self = StObject.set(x, "dimensions", js.Array(value :_*))
      
      @scala.inline
      def setEmphasis(value: `8`): Self = StObject.set(x, "emphasis", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setEmphasisUndefined: Self = StObject.set(x, "emphasis", js.undefined)
      
      @scala.inline
      def setEncode(value: js.Object): Self = StObject.set(x, "encode", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setEncodeUndefined: Self = StObject.set(x, "encode", js.undefined)
      
      @scala.inline
      def setGeoIndex(value: Double): Self = StObject.set(x, "geoIndex", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setGeoIndexUndefined: Self = StObject.set(x, "geoIndex", js.undefined)
      
      @scala.inline
      def setHoverAnimation(value: Boolean): Self = StObject.set(x, "hoverAnimation", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setHoverAnimationUndefined: Self = StObject.set(x, "hoverAnimation", js.undefined)
      
      @scala.inline
      def setId(value: String): Self = StObject.set(x, "id", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setIdUndefined: Self = StObject.set(x, "id", js.undefined)
      
      @scala.inline
      def setItemStyle(value: ShadowOffsetY): Self = StObject.set(x, "itemStyle", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setItemStyleUndefined: Self = StObject.set(x, "itemStyle", js.undefined)
      
      @scala.inline
      def setLabel(value: BorderRadius): Self = StObject.set(x, "label", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setLabelUndefined: Self = StObject.set(x, "label", js.undefined)
      
      @scala.inline
      def setLarge(value: Boolean): Self = StObject.set(x, "large", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setLargeThreshold(value: Double): Self = StObject.set(x, "largeThreshold", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setLargeThresholdUndefined: Self = StObject.set(x, "largeThreshold", js.undefined)
      
      @scala.inline
      def setLargeUndefined: Self = StObject.set(x, "large", js.undefined)
      
      @scala.inline
      def setLegendHoverLink(value: Boolean): Self = StObject.set(x, "legendHoverLink", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setLegendHoverLinkUndefined: Self = StObject.set(x, "legendHoverLink", js.undefined)
      
      @scala.inline
      def setMarkArea(value: AnimationDelayUpdate): Self = StObject.set(x, "markArea", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setMarkAreaUndefined: Self = StObject.set(x, "markArea", js.undefined)
      
      @scala.inline
      def setMarkLine(value: AnimationDelay): Self = StObject.set(x, "markLine", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setMarkLineUndefined: Self = StObject.set(x, "markLine", js.undefined)
      
      @scala.inline
      def setMarkPoint(value: AnimationDuration): Self = StObject.set(x, "markPoint", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setMarkPointUndefined: Self = StObject.set(x, "markPoint", js.undefined)
      
      @scala.inline
      def setName(value: String): Self = StObject.set(x, "name", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setNameUndefined: Self = StObject.set(x, "name", js.undefined)
      
      @scala.inline
      def setPolarIndex(value: Double): Self = StObject.set(x, "polarIndex", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setPolarIndexUndefined: Self = StObject.set(x, "polarIndex", js.undefined)
      
      @scala.inline
      def setProgressive(value: Double): Self = StObject.set(x, "progressive", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setProgressiveThreshold(value: Double): Self = StObject.set(x, "progressiveThreshold", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setProgressiveThresholdUndefined: Self = StObject.set(x, "progressiveThreshold", js.undefined)
      
      @scala.inline
      def setProgressiveUndefined: Self = StObject.set(x, "progressive", js.undefined)
      
      @scala.inline
      def setSeriesLayoutBy(value: String): Self = StObject.set(x, "seriesLayoutBy", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setSeriesLayoutByUndefined: Self = StObject.set(x, "seriesLayoutBy", js.undefined)
      
      @scala.inline
      def setSilent(value: Boolean): Self = StObject.set(x, "silent", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setSilentUndefined: Self = StObject.set(x, "silent", js.undefined)
      
      @scala.inline
      def setSymbol(value: String): Self = StObject.set(x, "symbol", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setSymbolKeepAspect(value: Boolean): Self = StObject.set(x, "symbolKeepAspect", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setSymbolKeepAspectUndefined: Self = StObject.set(x, "symbolKeepAspect", js.undefined)
      
      @scala.inline
      def setSymbolOffset(value: js.Array[_]): Self = StObject.set(x, "symbolOffset", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setSymbolOffsetUndefined: Self = StObject.set(x, "symbolOffset", js.undefined)
      
      @scala.inline
      def setSymbolOffsetVarargs(value: js.Any*): Self = StObject.set(x, "symbolOffset", js.Array(value :_*))
      
      @scala.inline
      def setSymbolRotate(value: Double): Self = StObject.set(x, "symbolRotate", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setSymbolRotateUndefined: Self = StObject.set(x, "symbolRotate", js.undefined)
      
      @scala.inline
      def setSymbolSize(value: js.Array[_] | js.Function | Double): Self = StObject.set(x, "symbolSize", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setSymbolSizeUndefined: Self = StObject.set(x, "symbolSize", js.undefined)
      
      @scala.inline
      def setSymbolSizeVarargs(value: js.Any*): Self = StObject.set(x, "symbolSize", js.Array(value :_*))
      
      @scala.inline
      def setSymbolUndefined: Self = StObject.set(x, "symbol", js.undefined)
      
      @scala.inline
      def setTooltip(value: BaseTooltip): Self = StObject.set(x, "tooltip", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setTooltipUndefined: Self = StObject.set(x, "tooltip", js.undefined)
      
      @scala.inline
      def setType(value: String): Self = StObject.set(x, "type", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setTypeUndefined: Self = StObject.set(x, "type", js.undefined)
      
      @scala.inline
      def setXAxisIndex(value: Double): Self = StObject.set(x, "xAxisIndex", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setXAxisIndexUndefined: Self = StObject.set(x, "xAxisIndex", js.undefined)
      
      @scala.inline
      def setYAxisIndex(value: Double): Self = StObject.set(x, "yAxisIndex", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setYAxisIndexUndefined: Self = StObject.set(x, "yAxisIndex", js.undefined)
      
      @scala.inline
      def setZ(value: Double): Self = StObject.set(x, "z", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setZUndefined: Self = StObject.set(x, "z", js.undefined)
      
      @scala.inline
      def setZlevel(value: Double): Self = StObject.set(x, "zlevel", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setZlevelUndefined: Self = StObject.set(x, "zlevel", js.undefined)
    }
  }
  
  /**
    * [Sunburst Chart](https://en.wikipedia.org/wiki/Pie_chart#Ring_chart_/_Sunburst_chart_/_Multilevel_pie_chart)
    * is composed of multiple pie charts.
    * From the view of data structure, inner rings are the parent nodes
    * of outer rings.
    * Therefore, it can show the partial-overall relationship as
    * [Pie](https://echarts.apache.org/en/option.html#series-pie)
    * charts, and also level relation as
    * [Treemap](https://echarts.apache.org/en/option.html#series-treemap)
    * charts.
    *
    * **For example:**
    *
    * [see doc](https://echarts.apache.org/en/option.html#series-sunburst)
    * [see doc](https://echarts.apache.org/en/option.html#series-sunburst)
    *
    * **Data mining**
    *
    * Sunburst charts support data mining by default.
    * That means, when a user clicks a sector, it will be used as root
    * node, and there will be a circle in the center for return to parent
    * node. If data mining is not needed, it can be disabled by
    * [series-sunburst.nodeClick](https://echarts.apache.org/en/option.html#series-treemap.nodeClick)
    * .
    *
    *
    * @see https://echarts.apache.org/en/option.html#series-sunburst
    */
  @js.native
  trait SeriesSunburst extends Series {
    
    /**
      * Whether to enable animation.
      *
      *
      * @default
      * "true"
      * @see https://echarts.apache.org/en/option.html#series-sunburst.animation
      */
    var animation: js.UndefOr[Boolean] = js.native
    
    /**
      * Delay before updating the first animation, which supports callback
      * function for different data to have different animation effect.
      *
      * For example:
      *
      * [see doc](https://echarts.apache.org/en/option.html#series-sunburst.sunburst)
      *
      * See
      * [this example](https://echarts.apache.org/examples/en/editor.html?c=bar-animation-delay)
      * for more information.
      *
      *
      * @see https://echarts.apache.org/en/option.html#series-sunburst.animationDelay
      */
    var animationDelay: js.UndefOr[js.Function | Double] = js.native
    
    /**
      * Delay before updating animation, which supports callback function
      * for different data to have different animation effect.
      *
      * For example:
      *
      * [see doc](https://echarts.apache.org/en/option.html#series-sunburst.sunburst)
      *
      * See
      * [this example](https://echarts.apache.org/examples/en/editor.html?c=bar-animation-delay)
      * for more information.
      *
      *
      * @see https://echarts.apache.org/en/option.html#series-sunburst.animationDelayUpdate
      */
    var animationDelayUpdate: js.UndefOr[js.Function | Double] = js.native
    
    /**
      * Duration of the first animation, which supports callback function
      * for different data to have different animation effect:
      *
      * [see doc](https://echarts.apache.org/en/option.html#series-sunburst.sunburst)
      *
      *
      * @default
      * 1000
      * @see https://echarts.apache.org/en/option.html#series-sunburst.animationDuration
      */
    var animationDuration: js.UndefOr[js.Function | Double] = js.native
    
    /**
      * Time for animation to complete, which supports callback function
      * for different data to have different animation effect:
      *
      * [see doc](https://echarts.apache.org/en/option.html#series-sunburst.sunburst)
      *
      *
      * @default
      * 500
      * @see https://echarts.apache.org/en/option.html#series-sunburst.animationDurationUpdate
      */
    var animationDurationUpdate: js.UndefOr[js.Function | Double] = js.native
    
    /**
      * Easing method used for the first animation.
      * Varied easing effects can be found at
      * [easing effect example](https://echarts.apache.org/examples/en/editor.html?c=line-easing)
      * .
      *
      *
      * @default
      * "cubicOut"
      * @see https://echarts.apache.org/en/option.html#series-sunburst.animationEasing
      */
    var animationEasing: js.UndefOr[String] = js.native
    
    /**
      * Easing method used for animation.
      *
      *
      * @default
      * "cubicOut"
      * @see https://echarts.apache.org/en/option.html#series-sunburst.animationEasingUpdate
      */
    var animationEasingUpdate: js.UndefOr[String] = js.native
    
    /**
      * Whether to set graphic number threshold to animation.
      * Animation will be disabled when graphic number is larger than
      * threshold.
      *
      *
      * @default
      * 2000
      * @see https://echarts.apache.org/en/option.html#series-sunburst.animationThreshold
      */
    var animationThreshold: js.UndefOr[Double] = js.native
    
    /**
      * Center position of Sunburst chart, the first of which is the
      * horizontal position, and the second is the vertical position.
      *
      * Percentage is supported.
      * When set in percentage, the item is relative to the container
      * width, and the second item to the height.
      *
      * **Example:**
      *
      * [see doc](https://echarts.apache.org/en/option.html#series-sunburst.sunburst)
      *
      *
      * @default
      * ['50%', '50%']
      * @see https://echarts.apache.org/en/option.html#series-sunburst.center
      */
    var center: js.UndefOr[js.Array[_]] = js.native
    
    /**
      * The data structure of
      * [series-sunburst.data](https://echarts.apache.org/en/option.html#series-sunburst.data)
      * is like tree. For example:
      *
      * [see doc](https://echarts.apache.org/en/option.html#series-sunburst.sunburst)
      *
      *
      * @see https://echarts.apache.org/en/option.html#series-sunburst.data
      */
    var data: js.UndefOr[js.Array[typingsSlinky.echarts.echarts.EChartOption.SeriesSunburst.DataObject]] = js.native
    
    /**
      * Item style when mouse is hovering unrelated items. See
      * [highlightPolicy](https://echarts.apache.org/en/option.html#series-sunburst.highlightPolicy)
      * .
      *
      *
      * @see https://echarts.apache.org/en/option.html#series-sunburst.downplay
      */
    var downplay: js.UndefOr[`22`] = js.native
    
    /**
      * Item style when mouse is hovering. See
      * [highlightPolicy](https://echarts.apache.org/en/option.html#series-sunburst.highlightPolicy)
      * .
      *
      *
      * @see https://echarts.apache.org/en/option.html#series-sunburst.emphasis
      */
    var emphasis: js.UndefOr[`22`] = js.native
    
    /**
      * Item style when mouse is hovering related items. See
      * [highlightPolicy](https://echarts.apache.org/en/option.html#series-sunburst.highlightPolicy)
      * .
      *
      *
      * @see https://echarts.apache.org/en/option.html#series-sunburst.highlight
      */
    var highlight: js.UndefOr[`22`] = js.native
    
    /**
      * When mouse hovers a sector, the sector is emphasized.
      * **If `highlightPolicy` is set to be `'descendant'`, then the
      * sector and its descendant will be _highlighted_, and others will
      * be _downplayed_.
      * If `highlightPolicy` is `'ancestor'`, then the sector and its
      * ancestors will be highlighted.
      * If it is set to be `'self'`, then the sector will be highlighted
      * and others downplayed.
      * If it is set to be `'none'`, then others will not be downplayed.**
      *
      * [see doc](https://echarts.apache.org/en/option.html#series-sunburst.sunburst)
      *
      * The `highlightPolicy` value above is the default value `'descendant'`.
      * We use `dispatchAction` to highlight certain sector.
      * Target sector will use the style of `emphasis`, and related sectors
      * decided by `highlightPolicy` uses the style of `highlight`, and
      * others use `downplay`.
      *
      * [see doc](https://echarts.apache.org/en/option.html#series-sunburst.sunburst)
      *
      * If `highlightPolicy` is set to be `'ancestor'`, then the result
      * looks like:
      *
      * [see doc](https://echarts.apache.org/en/option.html#series-sunburst.sunburst)
      *
      *
      * @default
      * "descendant"
      * @see https://echarts.apache.org/en/option.html#series-sunburst.highlightPolicy
      */
    var highlightPolicy: js.UndefOr[String] = js.native
    
    /**
      * Component ID, not specified by default.
      * If specified, it can be used to refer the component in option
      * or API.
      *
      *
      * @see https://echarts.apache.org/en/option.html#series-sunburst.id
      */
    var id: js.UndefOr[String] = js.native
    
    /**
      * Style of Sunburst sectors.
      *
      * Style can be set in
      * [series.itemStyle](https://echarts.apache.org/en/option.html#series-sunburst.itemStyle)
      * for sectors of this series, or
      * [series.levels.itemStyle](https://echarts.apache.org/en/option.html#series-sunburst.levels.itemStyle)
      * for the whole level, or
      * [series.data.itemStyle](https://echarts.apache.org/en/option.html#series-sunburst.data.itemStyle)
      * for single sector. If
      * [series.data.itemStyle](https://echarts.apache.org/en/option.html#series-sunburst.data.itemStyle)
      * is defined, it will cover the setting of
      * [series.itemStyle](https://echarts.apache.org/en/option.html#series-sunburst.itemStyle)
      * and
      * [series.levels.itemStyle](https://echarts.apache.org/en/option.html#series-sunburst.levels.itemStyle)
      * .
      *
      * **Priority:
      * [series.data.itemStyle](https://echarts.apache.org/en/option.html#series-sunburst.data.itemStyle)
      * >
      * [series.levels.itemStyle](https://echarts.apache.org/en/option.html#series-sunburst.levels.itemStyle)
      * >
      * [series.itemStyle](https://echarts.apache.org/en/option.html#series-sunburst.itemStyle)
      * .**
      *
      * In ECharts, _emphasis_ is for styles when mouse hovers.
      * For Sunburst charts, there are two extra states: _highlight_
      * for highlighting items that relates to the emphasized one, and
      * _downplay_ for others when emphasizing an item. See
      * [highlightPolicy](https://echarts.apache.org/en/option.html#series-sunburst.highlightPolicy)
      * .
      *
      *
      * @see https://echarts.apache.org/en/option.html#series-sunburst.itemStyle
      */
    var itemStyle: js.UndefOr[BorderType] = js.native
    
    /**
      * `label` sets the text style for every sectors.
      *
      * **Priority:
      * [series.data.label](https://echarts.apache.org/en/option.html#series-sunburst.data.label)
      * >
      * [series.levels.label](https://echarts.apache.org/en/option.html#series-sunburst.levels.label)
      * >
      * [series.label](https://echarts.apache.org/en/option.html#series-sunburst.label)
      * .**
      *
      * Text label of , to explain some data information about graphic
      * item like value, name and so on.
      * `label` is placed under `itemStyle` in ECharts 2.x.
      * In ECharts 3, to make the configuration structure flatter, `label`is
      * taken to be at the same level with `itemStyle`, and has `emphasis`
      * as `itemStyle` does.
      *
      *
      * @see https://echarts.apache.org/en/option.html#series-sunburst.label
      */
    var label: js.UndefOr[MinAngle] = js.native
    
    /**
      * **Multiple levels**
      *
      * Sunburst chart has a leveled structure.
      * To make it convenient, we provide a `levels` option, which is
      * an array.
      * The first element of it is for returning to parent node when
      * data mining.
      * The following elements are for levels from center to outside.
      *
      * For example, if we don't want the data mining, and want to set
      * the most inside sector to be red, and text to be blue, we can
      * set the option like:
      *
      * [see doc](https://echarts.apache.org/en/option.html#series-sunburst.sunburst)
      *
      *
      * @default
      * []
      * @see https://echarts.apache.org/en/option.html#series-sunburst.levels
      */
    var levels: js.UndefOr[Downplay] = js.native
    
    /**
      * Series name used for displaying in
      * [tooltip](https://echarts.apache.org/en/option.html#tooltip)
      * and filtering with
      * [legend](https://echarts.apache.org/en/option.html#legend)
      * , or updaing data and configuration with `setOption`.
      *
      *
      * @see https://echarts.apache.org/en/option.html#series-sunburst.name
      */
    var name: js.UndefOr[String] = js.native
    
    /**
      * The action of clicking a sector, which can be:
      *
      * + `false`: nothing happens.
      * + `'rootToNode'`: use the clicked sector as root.
      * + `'link'`：if
      * [link](https://echarts.apache.org/en/option.html#series-sunburst.data.link)
      * is set, the page will redirect to it.
      *
      *
      * @default
      * "rootToNode"
      * @see https://echarts.apache.org/en/option.html#series-sunburst.nodeClick
      */
    var nodeClick: js.UndefOr[Boolean | String] = js.native
    
    /**
      * Radius of Sunburst chart. Value can be:
      *
      * + `number`: Specify outside radius directly.
      * + `string`: For example, `'20%'`, means that the outside radius
      * is 20% of the viewport size (the little one between width and
      * height of the chart container).
      * + `Array.<number|string>`:
      * The first item specifies the inside radius, and the second item
      * specifies the outside radius.
      * Each item follows the definitions above.
      *
      *
      * @default
      * [0, '75%']
      * @see https://echarts.apache.org/en/option.html#series-sunburst.radius
      */
    var radius: js.UndefOr[js.Array[_] | Double | String] = js.native
    
    /**
      * If there is no `name`, whether need to render it.
      *
      *
      * @see https://echarts.apache.org/en/option.html#series-sunburst.renderLabelForZeroData
      */
    var renderLabelForZeroData: js.UndefOr[Boolean] = js.native
    
    /**
      * Sorting method that sectors use based on
      * [`value`](https://echarts.apache.org/en/option.html#series-sunburst.data.value)
      * , which is the sum of children when not set.
      * The default value `'desc'` states for descending order, while
      * it can also be set to be `'asc'` for ascending order, or `null`
      * for not sorting, or callback function like:
      *
      * [see doc](https://echarts.apache.org/en/option.html#series-sunburst.sunburst)
      *
      *
      * @default
      * "desc"
      * @see https://echarts.apache.org/en/option.html#series-sunburst.sort
      */
    var sort: js.UndefOr[js.Function | String] = js.native
    
    /**
      * @default
      * "sunburst"
      * @see https://echarts.apache.org/en/option.html#series-sunburst.type
      */
    var `type`: js.UndefOr[String] = js.native
    
    /**
      * `z` value of all graghical elements in , which controls order
      * of drawing graphical components.
      * Components with smaller `z` values may be overwritten by those
      * with larger `z` values.
      *
      * `z` has a lower priority to `zlevel`, and will not create new
      * Canvas.
      *
      *
      * @default
      * 2
      * @see https://echarts.apache.org/en/option.html#series-sunburst.z
      */
    var z: js.UndefOr[Double] = js.native
    
    /**
      * `zlevel` value of all graghical elements in .
      *
      * `zlevel` is used to make layers with Canvas.
      * Graphical elements with different `zlevel` values will be placed
      * in different Canvases, which is a common optimization technique.
      * We can put those frequently changed elements (like those with
      * animations) to a seperate `zlevel`.
      * Notice that too many Canvases will increase memory cost, and
      * should be used carefully on mobile phones to avoid crash.
      *
      * Canvases with bigger `zlevel` will be placed on Canvases with
      * smaller `zlevel`.
      *
      *
      * @see https://echarts.apache.org/en/option.html#series-sunburst.zlevel
      */
    var zlevel: js.UndefOr[Double] = js.native
  }
  object SeriesSunburst {
    
    @scala.inline
    def apply(): SeriesSunburst = {
      val __obj = js.Dynamic.literal()
      __obj.asInstanceOf[SeriesSunburst]
    }
    
    @js.native
    trait DataObject extends StObject {
      
      /**
        * Children nodes, which is recursively defined.
        * In the same format to
        * [series-sunburst.data](https://echarts.apache.org/en/option.html#series-sunburst.data)
        * .
        *
        *
        * @see https://echarts.apache.org/en/option.html#series-sunburst.data.children
        */
      var children: js.UndefOr[js.Array[typingsSlinky.echarts.echarts.EChartOption.SeriesSunburst.DataObject]] = js.native
      
      /**
        * Item style when mouse is hovering unrelated items. See
        * [highlightPolicy](https://echarts.apache.org/en/option.html#series-sunburst.highlightPolicy)
        * .
        *
        *
        * @see https://echarts.apache.org/en/option.html#series-sunburst.data.downplay
        */
      var downplay: js.UndefOr[`22`] = js.native
      
      /**
        * Item style when mouse is hovering. See
        * [highlightPolicy](https://echarts.apache.org/en/option.html#series-sunburst.highlightPolicy)
        * .
        *
        *
        * @see https://echarts.apache.org/en/option.html#series-sunburst.data.emphasis
        */
      var emphasis: js.UndefOr[`22`] = js.native
      
      /**
        * Item style when mouse is hovering related items. See
        * [highlightPolicy](https://echarts.apache.org/en/option.html#series-sunburst.highlightPolicy)
        * .
        *
        *
        * @see https://echarts.apache.org/en/option.html#series-sunburst.data.highlight
        */
      var highlight: js.UndefOr[`22`] = js.native
      
      /**
        * Style of Sunburst sectors.
        *
        * Style can be set in
        * [series.itemStyle](https://echarts.apache.org/en/option.html#series-sunburst.itemStyle)
        * for sectors of this series, or
        * [series.levels.itemStyle](https://echarts.apache.org/en/option.html#series-sunburst.levels.itemStyle)
        * for the whole level, or
        * [series.data.itemStyle](https://echarts.apache.org/en/option.html#series-sunburst.data.itemStyle)
        * for single sector. If
        * [series.data.itemStyle](https://echarts.apache.org/en/option.html#series-sunburst.data.itemStyle)
        * is defined, it will cover the setting of
        * [series.itemStyle](https://echarts.apache.org/en/option.html#series-sunburst.itemStyle)
        * and
        * [series.levels.itemStyle](https://echarts.apache.org/en/option.html#series-sunburst.levels.itemStyle)
        * .
        *
        * **Priority:
        * [series.data.itemStyle](https://echarts.apache.org/en/option.html#series-sunburst.data.itemStyle)
        * >
        * [series.levels.itemStyle](https://echarts.apache.org/en/option.html#series-sunburst.levels.itemStyle)
        * >
        * [series.itemStyle](https://echarts.apache.org/en/option.html#series-sunburst.itemStyle)
        * .**
        *
        * In ECharts, _emphasis_ is for styles when mouse hovers.
        * For Sunburst charts, there are two extra states: _highlight_
        * for highlighting items that relates to the emphasized one,
        * and _downplay_ for others when emphasizing an item. See
        * [highlightPolicy](https://echarts.apache.org/en/option.html#series-sunburst.highlightPolicy)
        * .
        *
        *
        * @see https://echarts.apache.org/en/option.html#series-sunburst.data.itemStyle
        */
      var itemStyle: js.UndefOr[BorderType] = js.native
      
      /**
        * `label` sets the text style for every sectors.
        *
        * **Priority:
        * [series.data.label](https://echarts.apache.org/en/option.html#series-sunburst.data.label)
        * >
        * [series.levels.label](https://echarts.apache.org/en/option.html#series-sunburst.levels.label)
        * >
        * [series.label](https://echarts.apache.org/en/option.html#series-sunburst.label)
        * .**
        *
        * Text label of , to explain some data information about graphic
        * item like value, name and so on.
        * `label` is placed under `itemStyle` in ECharts 2.x.
        * In ECharts 3, to make the configuration structure flatter,
        * `label`is taken to be at the same level with `itemStyle`,
        * and has `emphasis` as `itemStyle` does.
        *
        *
        * @see https://echarts.apache.org/en/option.html#series-sunburst.data.label
        */
      var label: js.UndefOr[MinAngle] = js.native
      
      /**
        * Link address that redirects to when this sector is clicked.
        * Only useful when
        * [series-sunburst.nodeClick](https://echarts.apache.org/en/option.html#series-treemap.nodeClick)
        * is set to be `'link'`.
        *
        * See
        * [series-sunburst.data.target](https://echarts.apache.org/en/option.html#series-sunburst.data.target)
        * .
        *
        *
        * @see https://echarts.apache.org/en/option.html#series-sunburst.data.link
        */
      var link: js.UndefOr[String] = js.native
      
      /**
        * Name displayed in each sector.
        *
        *
        * @see https://echarts.apache.org/en/option.html#series-sunburst.data.name
        */
      var name: js.UndefOr[String] = js.native
      
      /**
        * Like `target` attribute of HTML `<a>`, which can either be
        * `'blank'` or `'self'`. See
        * [series-sunburst.data.link](https://echarts.apache.org/en/option.html#series-sunburst.data.link)
        * .
        *
        *
        * @default
        * "blank"
        * @see https://echarts.apache.org/en/option.html#series-sunburst.data.target
        */
      var target: js.UndefOr[String] = js.native
      
      /**
        * Value for each item.
        * If contains children, value can be left unset, and sum of
        * children values will be used in this case.
        *
        *
        * @see https://echarts.apache.org/en/option.html#series-sunburst.data.value
        */
      var value: js.UndefOr[Double] = js.native
    }
    object DataObject {
      
      @scala.inline
      def apply(): typingsSlinky.echarts.echarts.EChartOption.SeriesSunburst.DataObject = {
        val __obj = js.Dynamic.literal()
        __obj.asInstanceOf[typingsSlinky.echarts.echarts.EChartOption.SeriesSunburst.DataObject]
      }
      
      @scala.inline
      implicit class DataObjectMutableBuilder[Self <: typingsSlinky.echarts.echarts.EChartOption.SeriesSunburst.DataObject] (val x: Self) extends AnyVal {
        
        @scala.inline
        def setChildren(value: js.Array[typingsSlinky.echarts.echarts.EChartOption.SeriesSunburst.DataObject]): Self = StObject.set(x, "children", value.asInstanceOf[js.Any])
        
        @scala.inline
        def setChildrenUndefined: Self = StObject.set(x, "children", js.undefined)
        
        @scala.inline
        def setChildrenVarargs(value: typingsSlinky.echarts.echarts.EChartOption.SeriesSunburst.DataObject*): Self = StObject.set(x, "children", js.Array(value :_*))
        
        @scala.inline
        def setDownplay(value: `22`): Self = StObject.set(x, "downplay", value.asInstanceOf[js.Any])
        
        @scala.inline
        def setDownplayUndefined: Self = StObject.set(x, "downplay", js.undefined)
        
        @scala.inline
        def setEmphasis(value: `22`): Self = StObject.set(x, "emphasis", value.asInstanceOf[js.Any])
        
        @scala.inline
        def setEmphasisUndefined: Self = StObject.set(x, "emphasis", js.undefined)
        
        @scala.inline
        def setHighlight(value: `22`): Self = StObject.set(x, "highlight", value.asInstanceOf[js.Any])
        
        @scala.inline
        def setHighlightUndefined: Self = StObject.set(x, "highlight", js.undefined)
        
        @scala.inline
        def setItemStyle(value: BorderType): Self = StObject.set(x, "itemStyle", value.asInstanceOf[js.Any])
        
        @scala.inline
        def setItemStyleUndefined: Self = StObject.set(x, "itemStyle", js.undefined)
        
        @scala.inline
        def setLabel(value: MinAngle): Self = StObject.set(x, "label", value.asInstanceOf[js.Any])
        
        @scala.inline
        def setLabelUndefined: Self = StObject.set(x, "label", js.undefined)
        
        @scala.inline
        def setLink(value: String): Self = StObject.set(x, "link", value.asInstanceOf[js.Any])
        
        @scala.inline
        def setLinkUndefined: Self = StObject.set(x, "link", js.undefined)
        
        @scala.inline
        def setName(value: String): Self = StObject.set(x, "name", value.asInstanceOf[js.Any])
        
        @scala.inline
        def setNameUndefined: Self = StObject.set(x, "name", js.undefined)
        
        @scala.inline
        def setTarget(value: String): Self = StObject.set(x, "target", value.asInstanceOf[js.Any])
        
        @scala.inline
        def setTargetUndefined: Self = StObject.set(x, "target", js.undefined)
        
        @scala.inline
        def setValue(value: Double): Self = StObject.set(x, "value", value.asInstanceOf[js.Any])
        
        @scala.inline
        def setValueUndefined: Self = StObject.set(x, "value", js.undefined)
      }
    }
    
    @scala.inline
    implicit class SeriesSunburstMutableBuilder[Self <: SeriesSunburst] (val x: Self) extends AnyVal {
      
      @scala.inline
      def setAnimation(value: Boolean): Self = StObject.set(x, "animation", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setAnimationDelay(value: js.Function | Double): Self = StObject.set(x, "animationDelay", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setAnimationDelayUndefined: Self = StObject.set(x, "animationDelay", js.undefined)
      
      @scala.inline
      def setAnimationDelayUpdate(value: js.Function | Double): Self = StObject.set(x, "animationDelayUpdate", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setAnimationDelayUpdateUndefined: Self = StObject.set(x, "animationDelayUpdate", js.undefined)
      
      @scala.inline
      def setAnimationDuration(value: js.Function | Double): Self = StObject.set(x, "animationDuration", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setAnimationDurationUndefined: Self = StObject.set(x, "animationDuration", js.undefined)
      
      @scala.inline
      def setAnimationDurationUpdate(value: js.Function | Double): Self = StObject.set(x, "animationDurationUpdate", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setAnimationDurationUpdateUndefined: Self = StObject.set(x, "animationDurationUpdate", js.undefined)
      
      @scala.inline
      def setAnimationEasing(value: String): Self = StObject.set(x, "animationEasing", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setAnimationEasingUndefined: Self = StObject.set(x, "animationEasing", js.undefined)
      
      @scala.inline
      def setAnimationEasingUpdate(value: String): Self = StObject.set(x, "animationEasingUpdate", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setAnimationEasingUpdateUndefined: Self = StObject.set(x, "animationEasingUpdate", js.undefined)
      
      @scala.inline
      def setAnimationThreshold(value: Double): Self = StObject.set(x, "animationThreshold", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setAnimationThresholdUndefined: Self = StObject.set(x, "animationThreshold", js.undefined)
      
      @scala.inline
      def setAnimationUndefined: Self = StObject.set(x, "animation", js.undefined)
      
      @scala.inline
      def setCenter(value: js.Array[_]): Self = StObject.set(x, "center", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setCenterUndefined: Self = StObject.set(x, "center", js.undefined)
      
      @scala.inline
      def setCenterVarargs(value: js.Any*): Self = StObject.set(x, "center", js.Array(value :_*))
      
      @scala.inline
      def setData(value: js.Array[typingsSlinky.echarts.echarts.EChartOption.SeriesSunburst.DataObject]): Self = StObject.set(x, "data", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setDataUndefined: Self = StObject.set(x, "data", js.undefined)
      
      @scala.inline
      def setDataVarargs(value: typingsSlinky.echarts.echarts.EChartOption.SeriesSunburst.DataObject*): Self = StObject.set(x, "data", js.Array(value :_*))
      
      @scala.inline
      def setDownplay(value: `22`): Self = StObject.set(x, "downplay", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setDownplayUndefined: Self = StObject.set(x, "downplay", js.undefined)
      
      @scala.inline
      def setEmphasis(value: `22`): Self = StObject.set(x, "emphasis", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setEmphasisUndefined: Self = StObject.set(x, "emphasis", js.undefined)
      
      @scala.inline
      def setHighlight(value: `22`): Self = StObject.set(x, "highlight", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setHighlightPolicy(value: String): Self = StObject.set(x, "highlightPolicy", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setHighlightPolicyUndefined: Self = StObject.set(x, "highlightPolicy", js.undefined)
      
      @scala.inline
      def setHighlightUndefined: Self = StObject.set(x, "highlight", js.undefined)
      
      @scala.inline
      def setId(value: String): Self = StObject.set(x, "id", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setIdUndefined: Self = StObject.set(x, "id", js.undefined)
      
      @scala.inline
      def setItemStyle(value: BorderType): Self = StObject.set(x, "itemStyle", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setItemStyleUndefined: Self = StObject.set(x, "itemStyle", js.undefined)
      
      @scala.inline
      def setLabel(value: MinAngle): Self = StObject.set(x, "label", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setLabelUndefined: Self = StObject.set(x, "label", js.undefined)
      
      @scala.inline
      def setLevels(value: Downplay): Self = StObject.set(x, "levels", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setLevelsUndefined: Self = StObject.set(x, "levels", js.undefined)
      
      @scala.inline
      def setName(value: String): Self = StObject.set(x, "name", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setNameUndefined: Self = StObject.set(x, "name", js.undefined)
      
      @scala.inline
      def setNodeClick(value: Boolean | String): Self = StObject.set(x, "nodeClick", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setNodeClickUndefined: Self = StObject.set(x, "nodeClick", js.undefined)
      
      @scala.inline
      def setRadius(value: js.Array[_] | Double | String): Self = StObject.set(x, "radius", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setRadiusUndefined: Self = StObject.set(x, "radius", js.undefined)
      
      @scala.inline
      def setRadiusVarargs(value: js.Any*): Self = StObject.set(x, "radius", js.Array(value :_*))
      
      @scala.inline
      def setRenderLabelForZeroData(value: Boolean): Self = StObject.set(x, "renderLabelForZeroData", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setRenderLabelForZeroDataUndefined: Self = StObject.set(x, "renderLabelForZeroData", js.undefined)
      
      @scala.inline
      def setSort(value: js.Function | String): Self = StObject.set(x, "sort", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setSortUndefined: Self = StObject.set(x, "sort", js.undefined)
      
      @scala.inline
      def setType(value: String): Self = StObject.set(x, "type", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setTypeUndefined: Self = StObject.set(x, "type", js.undefined)
      
      @scala.inline
      def setZ(value: Double): Self = StObject.set(x, "z", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setZUndefined: Self = StObject.set(x, "z", js.undefined)
      
      @scala.inline
      def setZlevel(value: Double): Self = StObject.set(x, "zlevel", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setZlevelUndefined: Self = StObject.set(x, "zlevel", js.undefined)
    }
  }
  
  /**
    * **Theme river**
    *
    * It is a special flow graph which is mainly used to present the changes
    * of an event or theme during a period.
    *
    * **Sample:**
    *
    * [see doc](https://echarts.apache.org/en/option.html#series-themeRiver)
    *
    * **visual encoding:**
    *
    * The ribbon-shape river branches in different colors in theme river
    * encode variable events or themes.
    * The width of river branches encode the value of the original dataset.
    *
    * What's more, the time attribute of the orinigal dataset would map
    * to a single time axis.
    *
    *
    * @see https://echarts.apache.org/en/option.html#series-themeRiver
    */
  @js.native
  trait SeriesThemeRiver extends Series {
    
    /**
      * Distance between thmemRiver component and the bottom side of
      * the container.
      *
      * `bottom` value can be instant pixel value like `20`; it can also
      * be percentage value relative to container width like `'20%'`.
      *
      *
      * @default
      * 5%
      * @see https://echarts.apache.org/en/option.html#series-themeRiver.bottom
      */
    var bottom: js.UndefOr[Double | String] = js.native
    
    /**
      * The boundary gap of the direction orthogonal with coordinate
      * axis in diagram, which is set to adjust the diagram position,
      * keeping it on the screen center instead of the upside or downside
      * of the screen.
      *
      *
      * @default
      * ["10%", "10%"]
      * @see https://echarts.apache.org/en/option.html#series-themeRiver.boundaryGap
      */
    var boundaryGap: js.UndefOr[js.Array[_]] = js.native
    
    /**
      * coordinate. The theme river adopts sinle time axis.
      *
      *
      * @default
      * ""single""
      * @see https://echarts.apache.org/en/option.html#series-themeRiver.coordinateSystem
      */
    var coordinateSystem: js.UndefOr[String] = js.native
    
    /**
      * Data array of series, which can be in the following forms:
      *
      * Notice, if no `data` specified in series, and there is
      * [dataset](https://echarts.apache.org/en/option.html#dataset)
      * in option, series will use the first
      * [dataset](https://echarts.apache.org/en/option.html#dataset)
      * as its datasource. If `data` has been specified,
      * [dataset](https://echarts.apache.org/en/option.html#dataset)
      * will not used.
      *
      * `series.datasetIndex` can be used to specify other
      * [dataset](https://echarts.apache.org/en/option.html#dataset)
      * .
      *
      * Basically, data is represented by a two-dimension array, like
      * the example below, where each colum is named as a "dimension".
      *
      * [see doc](https://echarts.apache.org/en/option.html#series-themeRiver.themeRiver)
      *
      * + In
      * [cartesian (grid)](https://echarts.apache.org/en/option.html#grid)
      * , "dimX" and "dimY" correspond to
      * [xAxis](https://echarts.apache.org/en/option.html#xAxis)
      * and
      * [yAxis](https://echarts.apache.org/en/option.html#yAxis)
      * repectively.
      * + In
      * [polar](https://echarts.apache.org/en/option.html#polar)
      * "dimX" and "dimY" correspond to
      * [radiusAxis](https://echarts.apache.org/en/option.html#radiusAxis)
      * 和
      * [angleAxis](https://echarts.apache.org/en/option.html#anbleAxis)
      * repectively.
      * + Other dimensions are optional, which can be used in other place.
      * For example:
      * + [visualMap](https://echarts.apache.org/en/option.html#visualMap)
      * can map one or more dimensions to viusal (color, symbol size
      * ...).
      * + [series.symbolSize](https://echarts.apache.org/en/option.html#series.symbolSize)
      * can be set as a callback function, where symbol size can be calculated
      * by values of a certain dimension.
      * + Values in other dimensions can be shown by
      * [tooltip.formatter](https://echarts.apache.org/en/option.html#tooltip.formatter)
      * or
      * [series.label.formatter](https://echarts.apache.org/en/option.html#series.label.formatter)
      * .
      *
      * Especially, when there is one and only one category axis (axis.type
      * is `'category'`), data can be simply be represented by a one-dimension
      * array, like:
      *
      * [see doc](https://echarts.apache.org/en/option.html#series-themeRiver.themeRiver)
      *
      * **Relationship between "value" and
      * [axis.type](https://echarts.apache.org/en/option.html#xAxis.type)
      * **
      *
      * + When a dimension corresponds to a value axis (axis.type
      * is `'value'` or `'log'`):
      *
      * The value can be a `number` (like `12`) (can also be a number
      * in a `string` format, like `'12'`).
      *
      * + When a dimension corresponds to a category axis (axis.type
      * is `'category'`):
      *
      * The value should be the ordinal of the axis.data
      * (based on `0`), the string value of the axis.data.
      * For example:
      *
      * [see doc](https://echarts.apache.org/en/option.html#series-themeRiver.themeRiver)
      *
      * There is an example of double category axes:
      * [Github Punchcard](https://echarts.apache.org/examples/en/editor.html?c=scatter-punchCard)
      * .
      *
      * + When a dimension corresponds to a time axis (type is `'time'`),
      * the value can be:
      *
      * + a timestamp, like `1484141700832`, which represents a UTC time.
      * + a date string, in one of the formats below:
      * + a subset of
      * [ISO 8601](http://www.ecma-international.org/ecma-262/5.1/#se
      * c-15.9.1.15)
      * , only including (all of these are treated as local time unless
      * timezone is specified, which is consistent with
      * [moment](https://momentjs.com/)
      * ):
      * + only part of year/month/date/time are specified: `'2012-03'`,
      * `'2012-03-01'`, `'2012-03-01 05'`, `'2012-03-01 05:06'`.
      * + separated by `"T"` or a space: `'2012-03-01T12:22:33.123'`,
      * `'2012-03-01 12:22:33.123'`.
      * + timezone specified: `'2012-03-01T12:22:33Z'`, `'2012-03-01T12:22:33+8000'`,
      * `'2012-03-01T12:22:33-05:00'`.
      * + other date string format (all of these are treated as local
      * time): `'2012'`, `'2012-3-1'`, `'2012/3/1'`, `'2012/03/01'`,
      * `'2009/6/12 2:00'`, `'2009/6/12 2:05:08'`, `'2009/6/12 2:05:08.123'`.
      * + a JavaScript Date instance created by user:
      * + Caution, when using a data string to create a Date instance,
      * [browser differences and inconsistencies](http://dygraphs.com/date-formats.html)
      * should be considered.
      * + For example: In chrome, `new Date('2012-01-01')` is treated
      * as a Jan 1st 2012 in UTC, while `new Date('2012-1-1')` and `new
      * Date('2012/01/01')` are treated as Jan 1st 2012 in local timezone.
      * In safari `new Date('2012-1-1')` is not supported.
      * + So if you intent to perform `new Date(dateString)`, it is strongly
      * recommended to use a time parse library (e.g.,
      * [moment](https://momentjs.com/)
      * ), or use `echarts.number.parseDate`, or check
      * [this](http://dygraphs.com/date-formats.html)
      * .
      *
      * **Customize a data item:**
      *
      * When needing to customize a data item, it can be set as an object,
      * where property `value` reprensent real value. For example:
      *
      * [see doc](https://echarts.apache.org/en/option.html#series-themeRiver.themeRiver)
      *
      * **Empty value:**
      *
      * `'-'` or `null` or `undefined` or `NaN` can be used to describe
      * that a data item is not exists (ps：_not exist_ does not means
      * its value is `0`).
      *
      * For example, line chart can break when encounter an empty value,
      * and scatter chart do not display graphic elements for empty values.
      *
      *
      * @see https://echarts.apache.org/en/option.html#series-themeRiver.data
      */
    var data: js.UndefOr[
        js.Array[
          (js.Array[
            Unit | Double | String | typingsSlinky.echarts.echarts.EChartOption.SeriesThemeRiver.DataObject
          ]) | typingsSlinky.echarts.echarts.EChartOption.SeriesThemeRiver.DataObject | Double | String | Unit
        ]
      ] = js.native
    
    /**
      * @see https://echarts.apache.org/en/option.html#series-themeRiver.emphasis
      */
    var emphasis: js.UndefOr[`23`] = js.native
    
    /**
      * Height of thmemRiver component.
      *
      * **Notes:** The positional information of the whole theme river
      * view reuses the positional information of a single time axis,
      * which are left, top, right and bottom.
      *
      *
      * @see https://echarts.apache.org/en/option.html#series-themeRiver.height
      */
    var height: js.UndefOr[Double | String] = js.native
    
    /**
      * Component ID, not specified by default.
      * If specified, it can be used to refer the component in option
      * or API.
      *
      *
      * @see https://echarts.apache.org/en/option.html#series-themeRiver.id
      */
    var id: js.UndefOr[String] = js.native
    
    /**
      * style of each ribbon-shape river branch in theme river.
      *
      *
      * @see https://echarts.apache.org/en/option.html#series-themeRiver.itemStyle
      */
    var itemStyle: js.UndefOr[BorderType] = js.native
    
    /**
      * `label` describes style of text labels with which each ribbon-shape
      * river branch corresponds in theme river.
      *
      *
      * @see https://echarts.apache.org/en/option.html#series-themeRiver.label
      */
    var label: js.UndefOr[TextBorderWidth] = js.native
    
    /**
      * Distance between thmemRiver component and the left side of the
      * container.
      *
      * `left` value can be instant pixel value like `20`; it can also
      * be percentage value relative to container width like `'20%'`;
      * and it can also be `'left'`, `'center'`, or `'right'`.
      *
      * If the `left` value is set to be `'left'`, `'center'`, or `'right'`,
      * then the component will be aligned automatically based on position.
      *
      *
      * @default
      * 5%
      * @see https://echarts.apache.org/en/option.html#series-themeRiver.left
      */
    var left: js.UndefOr[Double | String] = js.native
    
    /**
      * Series name used for displaying in
      * [tooltip](https://echarts.apache.org/en/option.html#tooltip)
      *
      *
      * @see https://echarts.apache.org/en/option.html#series-themeRiver.name
      */
    var name: js.UndefOr[String] = js.native
    
    /**
      * Distance between thmemRiver component and the right side of the
      * container.
      *
      * `right` value can be instant pixel value like `20`; it can also
      * be percentage value relative to container width like `'20%'`.
      *
      *
      * @default
      * 5%
      * @see https://echarts.apache.org/en/option.html#series-themeRiver.right
      */
    var right: js.UndefOr[Double | String] = js.native
    
    /**
      * The index of single time axis, which defaults to be 0 because
      * it contains only one axis.
      *
      *
      * @see https://echarts.apache.org/en/option.html#series-themeRiver.singleAxisIndex
      */
    var singleAxisIndex: js.UndefOr[Double] = js.native
    
    /**
      * tooltip settings in this series.
      *
      *
      * @see https://echarts.apache.org/en/option.html#series-themeRiver.tooltip
      */
    var tooltip: js.UndefOr[BaseTooltip] = js.native
    
    /**
      * Distance between thmemRiver component and the top side of the
      * container.
      *
      * `top` value can be instant pixel value like `20`; it can also
      * be percentage value relative to container width like `'20%'`;
      * and it can also be `'top'`, `'middle'`, or `'bottom'`.
      *
      * If the `left` value is set to be `'top'`, `'middle'`, or `'bottom'`,
      * then the component will be aligned automatically based on position.
      *
      *
      * @default
      * 5%
      * @see https://echarts.apache.org/en/option.html#series-themeRiver.top
      */
    var top: js.UndefOr[Double | String] = js.native
    
    /**
      * @default
      * "themeRiver"
      * @see https://echarts.apache.org/en/option.html#series-themeRiver.type
      */
    var `type`: js.UndefOr[String] = js.native
    
    /**
      * Width of thmemRiver component.
      *
      *
      * @see https://echarts.apache.org/en/option.html#series-themeRiver.width
      */
    var width: js.UndefOr[Double | String] = js.native
    
    /**
      * `z` value of all graghical elements in , which controls order
      * of drawing graphical components.
      * Components with smaller `z` values may be overwritten by those
      * with larger `z` values.
      *
      * `z` has a lower priority to `zlevel`, and will not create new
      * Canvas.
      *
      *
      * @default
      * 2
      * @see https://echarts.apache.org/en/option.html#series-themeRiver.z
      */
    var z: js.UndefOr[Double] = js.native
    
    /**
      * `zlevel` value of all graphical elements in the series.
      *
      * `zlevel` is used to make layers with Canvas.
      * Graphical elements with different `zlevel` values will be placed
      * in different Canvases, which is a common optimization technique.
      * We can put those frequently changed elements (like those with
      * animations) to a seperate `zlevel`.
      * Notice that too many Canvases will increase memory cost, and
      * should be used carefully on mobile phones to avoid crash.
      *
      * Canvases with bigger `zlevel` will be placed on Canvases with
      * smaller `zlevel`.
      *
      *
      * @see https://echarts.apache.org/en/option.html#series-themeRiver.zlevel
      */
    var zlevel: js.UndefOr[Double] = js.native
  }
  object SeriesThemeRiver {
    
    @scala.inline
    def apply(): SeriesThemeRiver = {
      val __obj = js.Dynamic.literal()
      __obj.asInstanceOf[SeriesThemeRiver]
    }
    
    @js.native
    trait DataObject extends StObject {
      
      /**
        * the time attribute of time and theme.
        *
        *
        * @see https://echarts.apache.org/en/option.html#series-themeRiver.data.date
        */
      var date: js.UndefOr[String] = js.native
      
      /**
        * the name of an event or theme.
        *
        * [see doc](https://echarts.apache.org/en/option.html#series-themeRiver.themeRiver.data)
        *
        * **data specification:**
        *
        * As what is shown above, the data format of theme river is
        * double dimensional array.
        * Each item of the inner array consists of the time attribute
        * , the value at a time point and the name of an event or theme.
        * It needs to be noticed that you should provide an event or
        * theme with a complete time quantum as main river.
        * Other events and themes are based on the main river.
        * The default value of time point should be set as 0.
        * That is to say other events or themes are included in the
        * main river.
        * Once they are beyond the main river, the layout would be
        * wrong.
        * That is because a baseline should be calculated to draw each
        * event as ribbon shape when the whole diagram layout is calculated.
        * As the example above, the event "SS" is a main river.
        * After dispose, we would complete these 3 default time points
        * with the format of \["2015/11/08",0,"DQ"\], \["2015/11/12",0,"DQ"\],
        * ［"2015/11/13",0,"DQ"］, making it align with the main river.
        * From what is mentioned, we could set default value on any
        * position of a complete time period.
        *
        *
        * @see https://echarts.apache.org/en/option.html#series-themeRiver.data.name
        */
      var name: js.UndefOr[String] = js.native
      
      /**
        * the value of an event or theme at a time point.
        *
        *
        * @see https://echarts.apache.org/en/option.html#series-themeRiver.data.value
        */
      var value: js.UndefOr[Double | js.Array[Double]] = js.native
    }
    object DataObject {
      
      @scala.inline
      def apply(): typingsSlinky.echarts.echarts.EChartOption.SeriesThemeRiver.DataObject = {
        val __obj = js.Dynamic.literal()
        __obj.asInstanceOf[typingsSlinky.echarts.echarts.EChartOption.SeriesThemeRiver.DataObject]
      }
      
      @scala.inline
      implicit class DataObjectMutableBuilder[Self <: typingsSlinky.echarts.echarts.EChartOption.SeriesThemeRiver.DataObject] (val x: Self) extends AnyVal {
        
        @scala.inline
        def setDate(value: String): Self = StObject.set(x, "date", value.asInstanceOf[js.Any])
        
        @scala.inline
        def setDateUndefined: Self = StObject.set(x, "date", js.undefined)
        
        @scala.inline
        def setName(value: String): Self = StObject.set(x, "name", value.asInstanceOf[js.Any])
        
        @scala.inline
        def setNameUndefined: Self = StObject.set(x, "name", js.undefined)
        
        @scala.inline
        def setValue(value: Double | js.Array[Double]): Self = StObject.set(x, "value", value.asInstanceOf[js.Any])
        
        @scala.inline
        def setValueUndefined: Self = StObject.set(x, "value", js.undefined)
        
        @scala.inline
        def setValueVarargs(value: Double*): Self = StObject.set(x, "value", js.Array(value :_*))
      }
    }
    
    @scala.inline
    implicit class SeriesThemeRiverMutableBuilder[Self <: SeriesThemeRiver] (val x: Self) extends AnyVal {
      
      @scala.inline
      def setBottom(value: Double | String): Self = StObject.set(x, "bottom", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setBottomUndefined: Self = StObject.set(x, "bottom", js.undefined)
      
      @scala.inline
      def setBoundaryGap(value: js.Array[_]): Self = StObject.set(x, "boundaryGap", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setBoundaryGapUndefined: Self = StObject.set(x, "boundaryGap", js.undefined)
      
      @scala.inline
      def setBoundaryGapVarargs(value: js.Any*): Self = StObject.set(x, "boundaryGap", js.Array(value :_*))
      
      @scala.inline
      def setCoordinateSystem(value: String): Self = StObject.set(x, "coordinateSystem", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setCoordinateSystemUndefined: Self = StObject.set(x, "coordinateSystem", js.undefined)
      
      @scala.inline
      def setData(
        value: js.Array[
              (js.Array[
                Unit | Double | String | typingsSlinky.echarts.echarts.EChartOption.SeriesThemeRiver.DataObject
              ]) | typingsSlinky.echarts.echarts.EChartOption.SeriesThemeRiver.DataObject | Double | String | Unit
            ]
      ): Self = StObject.set(x, "data", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setDataUndefined: Self = StObject.set(x, "data", js.undefined)
      
      @scala.inline
      def setDataVarargs(
        value: ((js.Array[
              Unit | Double | String | typingsSlinky.echarts.echarts.EChartOption.SeriesThemeRiver.DataObject
            ]) | typingsSlinky.echarts.echarts.EChartOption.SeriesThemeRiver.DataObject | Double | String | Unit)*
      ): Self = StObject.set(x, "data", js.Array(value :_*))
      
      @scala.inline
      def setEmphasis(value: `23`): Self = StObject.set(x, "emphasis", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setEmphasisUndefined: Self = StObject.set(x, "emphasis", js.undefined)
      
      @scala.inline
      def setHeight(value: Double | String): Self = StObject.set(x, "height", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setHeightUndefined: Self = StObject.set(x, "height", js.undefined)
      
      @scala.inline
      def setId(value: String): Self = StObject.set(x, "id", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setIdUndefined: Self = StObject.set(x, "id", js.undefined)
      
      @scala.inline
      def setItemStyle(value: BorderType): Self = StObject.set(x, "itemStyle", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setItemStyleUndefined: Self = StObject.set(x, "itemStyle", js.undefined)
      
      @scala.inline
      def setLabel(value: TextBorderWidth): Self = StObject.set(x, "label", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setLabelUndefined: Self = StObject.set(x, "label", js.undefined)
      
      @scala.inline
      def setLeft(value: Double | String): Self = StObject.set(x, "left", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setLeftUndefined: Self = StObject.set(x, "left", js.undefined)
      
      @scala.inline
      def setName(value: String): Self = StObject.set(x, "name", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setNameUndefined: Self = StObject.set(x, "name", js.undefined)
      
      @scala.inline
      def setRight(value: Double | String): Self = StObject.set(x, "right", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setRightUndefined: Self = StObject.set(x, "right", js.undefined)
      
      @scala.inline
      def setSingleAxisIndex(value: Double): Self = StObject.set(x, "singleAxisIndex", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setSingleAxisIndexUndefined: Self = StObject.set(x, "singleAxisIndex", js.undefined)
      
      @scala.inline
      def setTooltip(value: BaseTooltip): Self = StObject.set(x, "tooltip", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setTooltipUndefined: Self = StObject.set(x, "tooltip", js.undefined)
      
      @scala.inline
      def setTop(value: Double | String): Self = StObject.set(x, "top", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setTopUndefined: Self = StObject.set(x, "top", js.undefined)
      
      @scala.inline
      def setType(value: String): Self = StObject.set(x, "type", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setTypeUndefined: Self = StObject.set(x, "type", js.undefined)
      
      @scala.inline
      def setWidth(value: Double | String): Self = StObject.set(x, "width", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setWidthUndefined: Self = StObject.set(x, "width", js.undefined)
      
      @scala.inline
      def setZ(value: Double): Self = StObject.set(x, "z", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setZUndefined: Self = StObject.set(x, "z", js.undefined)
      
      @scala.inline
      def setZlevel(value: Double): Self = StObject.set(x, "zlevel", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setZlevelUndefined: Self = StObject.set(x, "zlevel", js.undefined)
    }
  }
  
  /**
    * **Tree Diagram**
    *
    * The tree diagram is mainly used to visualize the tree data structure,
    * which is a special hierarchical type with a unique root node, left
    * subtree, and right subtree.
    *
    * **Note: Forests are not currently supported directly in a single
    * series, and can be implemented by configuring multiple series in
    * an option**
    *
    * **Tree example：**
    *
    * [see doc](https://echarts.apache.org/en/option.html#series-tree)
    *
    * **Multiple series are combined into forest：**
    *
    * [see doc](https://echarts.apache.org/en/option.html#series-tree)
    *
    *
    * @see https://echarts.apache.org/en/option.html#series-tree
    */
  @js.native
  trait SeriesTree extends Series {
    
    /**
      * Distance between tree component and the bottom side of the container.
      *
      * `bottom` value can be instant pixel value like `20`; it can also
      * be percentage value relative to container width like `'20%'`.
      *
      *
      * @default
      * 12%
      * @see https://echarts.apache.org/en/option.html#series-tree.bottom
      */
    var bottom: js.UndefOr[Double | String] = js.native
    
    /**
      * [series-tree.data](https://echarts.apache.org/en/option.html#series-tree.data)
      * the data format is a tree structure，for example：
      *
      * [see doc](https://echarts.apache.org/en/option.html#series-tree.tree)
      *
      *
      * @see https://echarts.apache.org/en/option.html#series-tree.data
      */
    var data: js.UndefOr[js.Array[typingsSlinky.echarts.echarts.EChartOption.SeriesTree.DataObject]] = js.native
    
    /**
      * @see https://echarts.apache.org/en/option.html#series-tree.emphasis
      */
    var emphasis: js.UndefOr[`24`] = js.native
    
    /**
      * Subtree collapses and expands interaction, `default true`.
      * As the drawing area is limited, and usually the nodes of a tree
      * may be more, so there will be hidden between the nodes.
      * In order to avoid this problem, you can put a temporary unrelated
      * subtree folded away, until you need to start when necessary.
      * Such as the above radial layout tree example, the center of the
      * node is filled with blue is the folded away subtree, you can
      * click to expand it.
      *
      * **Note: If you configure a custom image as the tag for a node,
      * it is not possible to distinguish whether the current node has
      * a collapsed subtree by the fill color.
      * And currently do not support, upload two pictures, respectively
      * represent the collapsing and expansion state of the node.
      * So, if you want to explicitly show the two states of the node,
      * it is recommended to use `ECharts` regular tag types, such as
      * `emptyCircle`.**
      *
      *
      * @default
      * "true"
      * @see https://echarts.apache.org/en/option.html#series-tree.expandAndCollapse
      */
    var expandAndCollapse: js.UndefOr[Boolean] = js.native
    
    /**
      * Height of tree component.
      *
      *
      * @see https://echarts.apache.org/en/option.html#series-tree.height
      */
    var height: js.UndefOr[Double | String] = js.native
    
    /**
      * Component ID, not specified by default.
      * If specified, it can be used to refer the component in option
      * or API.
      *
      *
      * @see https://echarts.apache.org/en/option.html#series-tree.id
      */
    var id: js.UndefOr[String] = js.native
    
    /**
      * The initial level (depth) of the tree.
      * The root node is the 0th layer, then the first layer, the second
      * layer,
      *
      *
      *
      * , until the leaf node.
      * This configuration item is primarily used in conjunction with
      * `collapsing and expansion` interactions.
      * The purpose is to prevent the nodes from obscuring each other.
      * If set as -1 or `null` or `undefined`, all nodes are expanded.
      *
      *
      * @default
      * 2
      * @see https://echarts.apache.org/en/option.html#series-tree.initialTreeDepth
      */
    var initialTreeDepth: js.UndefOr[Double] = js.native
    
    /**
      * The style of each node in the tree, where \[itemStyle.color\]
      * (~ series-tree.itemStyle.color)
      * represents the fill color of the node, to distinguish the state
      * of the subtree corresponding to `collapsing` or `expansion`.
      *
      *
      * @see https://echarts.apache.org/en/option.html#series-tree.itemStyle
      */
    var itemStyle: js.UndefOr[BorderType] = js.native
    
    /**
      * `label` describes the style of the text corresponding to each
      * node.
      *
      *
      * @see https://echarts.apache.org/en/option.html#series-tree.label
      */
    var label: js.UndefOr[BorderRadius] = js.native
    
    /**
      * The layout of the tree, which can be `orthogonal` and `radial`
      * 。Here the `orthogonal` layout is what we usually refer to the
      * `horizontal` and `vertical` direction, the corresponding parameter
      * value is `orthogonal`.
      * The `radial` layout refers to the view that the root node as
      * the center and each layer of nodes as the ring, the corresponding
      * parameter value is `radial`.
      *
      * **Orthogonal Example：**
      *
      * [see doc](https://echarts.apache.org/en/option.html#series-tree.tree)
      *
      * **Radial Example：**
      *
      * [see doc](https://echarts.apache.org/en/option.html#series-tree.tree)
      *
      *
      * @default
      * "orthogonal"
      * @see https://echarts.apache.org/en/option.html#series-tree.layout
      */
    var layout: js.UndefOr[String] = js.native
    
    /**
      * Leaf node special configuration, such as the above tree diagram
      * example, the leaf node and non-leaf node label location is different.
      *
      *
      * @see https://echarts.apache.org/en/option.html#series-tree.leaves
      */
    var leaves: js.UndefOr[EmphasisItemStyle] = js.native
    
    /**
      * Distance between tree component and the left side of the container.
      *
      * `left` value can be instant pixel value like `20`; it can also
      * be percentage value relative to container width like `'20%'`;
      * and it can also be `'left'`, `'center'`, or `'right'`.
      *
      * If the `left` value is set to be `'left'`, `'center'`, or `'right'`,
      * then the component will be aligned automatically based on position.
      *
      *
      * @default
      * 12%
      * @see https://echarts.apache.org/en/option.html#series-tree.left
      */
    var left: js.UndefOr[Double | String] = js.native
    
    /**
      * Defines the style of the tree edge.
      *
      *
      * @see https://echarts.apache.org/en/option.html#series-tree.lineStyle
      */
    var lineStyle: js.UndefOr[CurvenessShadowBlur] = js.native
    
    /**
      * Series name used for displaying in
      * [tooltip](https://echarts.apache.org/en/option.html#tooltip)
      * and filtering with
      * [legend](https://echarts.apache.org/en/option.html#legend)
      * , or updaing data and configuration with `setOption`.
      *
      *
      * @see https://echarts.apache.org/en/option.html#series-tree.name
      */
    var name: js.UndefOr[String] = js.native
    
    /**
      * The direction of the `orthogonal` layout in the tree diagram.
      * That means this configuration takes effect only if `layout =
      * 'orthogonal'`.
      * The corresponding directions are `from left to right`, `from
      * right to left`, `from top to bottom`, `from bottom to top`, with
      * shorthand values `'LR'`, `'RL'`, `'TB'`, `'BT'`.
      * **Note: The previous configuration value `'horizontal'` is equivalent
      * to `'LR'`, `'vertical'` is equivalent to `'TB'`.**
      *
      *
      * @default
      * "LR"
      * @see https://echarts.apache.org/en/option.html#series-tree.orient
      */
    var orient: js.UndefOr[String] = js.native
    
    /**
      * Distance between tree component and the right side of the container.
      *
      * `right` value can be instant pixel value like `20`; it can also
      * be percentage value relative to container width like `'20%'`.
      *
      *
      * @default
      * 12%
      * @see https://echarts.apache.org/en/option.html#series-tree.right
      */
    var right: js.UndefOr[Double | String] = js.native
    
    /**
      * Whether to enable mouse zooming and translating.
      * `false` by default.
      * If either zooming or translating is wanted, it can be set to
      * `'scale'` or `'move'`.
      * Otherwise, set it to be `true` to enable both.
      *
      *
      * @see https://echarts.apache.org/en/option.html#series-tree.roam
      */
    var roam: js.UndefOr[Boolean | String] = js.native
    
    /**
      * Symbol of .
      *
      * Icon types provided by ECharts includes `'circle'`, `'rect'`,
      * `'roundRect'`, `'triangle'`, `'diamond'`, `'pin'`, `'arrow'`,
      * `'none'`
      *
      * It can be set to an image with `'image://url'` , in which URL
      * is the link to an image, or `dataURI` of an image.
      *
      * An image URL example:
      *
      * ```
      * 'image://http://xxx.xxx.xxx/a/b.png'
      *
      * ```
      *
      * A `dataURI` example:
      *
      * [see doc](https://echarts.apache.org/en/option.html#series-tree.tree)
      *
      * Icons can be set to arbitrary vector path via `'path://'` in
      * ECharts.
      * As compared with raster image, vector paths prevent from jagging
      * and blurring when scaled, and have a better control over changing
      * colors.
      * Size of vectoer icon will be adapted automatically. Refer to
      * [SVG PathData](http://www.w3.org/TR/SVG/paths.html#PathData)
      * for more information about format of path.
      * You may export vector paths from tools like Adobe Illustrator.
      *
      * For example:
      *
      * [see doc](https://echarts.apache.org/en/option.html#series-tree.tree)
      *
      *
      * @default
      * "emptyCircle"
      * @see https://echarts.apache.org/en/option.html#series-tree.symbol
      */
    var symbol: js.UndefOr[String] = js.native
    
    /**
      * Whether to keep aspect for symbols in the form of `path://`.
      *
      *
      * @see https://echarts.apache.org/en/option.html#series-tree.symbolKeepAspect
      */
    var symbolKeepAspect: js.UndefOr[Boolean] = js.native
    
    /**
      * Offset of symbol relative to original position.
      * By default, symbol will be put in the center position of data.
      * But if symbol is from user-defined vector path or image, you
      * may not expect symbol to be in center.
      * In this case, you may use this attribute to set offset to default
      * position.
      * It can be in absolute pixel value, or in relative percentage
      * value.
      *
      * For example, `[0, '50%']` means to move upside side position
      * of symbol height.
      * It can be used to make the arrow in the bottom to be at data
      * position when symbol is pin.
      *
      *
      * @default
      * [0, 0]
      * @see https://echarts.apache.org/en/option.html#series-tree.symbolOffset
      */
    var symbolOffset: js.UndefOr[js.Array[_]] = js.native
    
    /**
      * Rotate degree of symbol.
      * Note that when `symbol` is set to be `'arrow'` in `markLine`,
      * `symbolRotate` value will be ignored, and compulsively use tangent
      * angle.
      *
      *
      * @see https://echarts.apache.org/en/option.html#series-tree.symbolRotate
      */
    var symbolRotate: js.UndefOr[Double] = js.native
    
    /**
      * symbol size.
      * It can be set to single numbers like `10`, or use an array to
      * represent width and height.
      * For example, `[20, 10]` means symbol width is `20`, and height
      * is`10`.
      *
      * If size of symbols needs to be different, you can set with callback
      * function in the following format:
      *
      * ```
      * (value: Array|number, params: Object) => number|Array
      *
      * ```
      *
      * The first parameter `value` is the value in
      * [data](https://echarts.apache.org/en/option.html#series-tree.data)
      * , and the second parameter `params` is the rest parameters of
      * data item.
      *
      *
      * @default
      * 7
      * @see https://echarts.apache.org/en/option.html#series-tree.symbolSize
      */
    var symbolSize: js.UndefOr[js.Array[_] | js.Function | Double] = js.native
    
    /**
      * tooltip settings in this series.
      *
      *
      * @see https://echarts.apache.org/en/option.html#series-tree.tooltip
      */
    var tooltip: js.UndefOr[BaseTooltip] = js.native
    
    /**
      * Distance between tree component and the top side of the container.
      *
      * `top` value can be instant pixel value like `20`; it can also
      * be percentage value relative to container width like `'20%'`;
      * and it can also be `'top'`, `'middle'`, or `'bottom'`.
      *
      * If the `left` value is set to be `'top'`, `'middle'`, or `'bottom'`,
      * then the component will be aligned automatically based on position.
      *
      *
      * @default
      * 12%
      * @see https://echarts.apache.org/en/option.html#series-tree.top
      */
    var top: js.UndefOr[Double | String] = js.native
    
    /**
      * @default
      * "tree"
      * @see https://echarts.apache.org/en/option.html#series-tree.type
      */
    var `type`: js.UndefOr[String] = js.native
    
    /**
      * Width of tree component.
      *
      *
      * @see https://echarts.apache.org/en/option.html#series-tree.width
      */
    var width: js.UndefOr[Double | String] = js.native
    
    /**
      * `z` value of all graghical elements in , which controls order
      * of drawing graphical components.
      * Components with smaller `z` values may be overwritten by those
      * with larger `z` values.
      *
      * `z` has a lower priority to `zlevel`, and will not create new
      * Canvas.
      *
      *
      * @default
      * 2
      * @see https://echarts.apache.org/en/option.html#series-tree.z
      */
    var z: js.UndefOr[Double] = js.native
    
    /**
      * `zlevel` value of all graghical elements in .
      *
      * `zlevel` is used to make layers with Canvas.
      * Graphical elements with different `zlevel` values will be placed
      * in different Canvases, which is a common optimization technique.
      * We can put those frequently changed elements (like those with
      * animations) to a seperate `zlevel`.
      * Notice that too many Canvases will increase memory cost, and
      * should be used carefully on mobile phones to avoid crash.
      *
      * Canvases with bigger `zlevel` will be placed on Canvases with
      * smaller `zlevel`.
      *
      *
      * @see https://echarts.apache.org/en/option.html#series-tree.zlevel
      */
    var zlevel: js.UndefOr[Double] = js.native
  }
  object SeriesTree {
    
    @scala.inline
    def apply(): SeriesTree = {
      val __obj = js.Dynamic.literal()
      __obj.asInstanceOf[SeriesTree]
    }
    
    @js.native
    trait DataObject extends StObject {
      
      /**
        * Whether to enable animation.
        *
        *
        * @default
        * "true"
        * @see https://echarts.apache.org/en/option.html#series-tree.data.animation
        */
      var animation: js.UndefOr[Boolean] = js.native
      
      /**
        * Delay before updating the first animation, which supports
        * callback function for different data to have different animation
        * effect.
        *
        * For example:
        *
        * [see doc](https://echarts.apache.org/en/option.html#series-tree.tree.data)
        *
        * See
        * [this example](https://echarts.apache.org/examples/en/editor.html?c=bar-animation-delay)
        * for more information.
        *
        *
        * @see https://echarts.apache.org/en/option.html#series-tree.data.animationDelay
        */
      var animationDelay: js.UndefOr[js.Function | Double] = js.native
      
      /**
        * Delay before updating animation, which supports callback
        * function for different data to have different animation effect.
        *
        * For example:
        *
        * [see doc](https://echarts.apache.org/en/option.html#series-tree.tree.data)
        *
        * See
        * [this example](https://echarts.apache.org/examples/en/editor.html?c=bar-animation-delay)
        * for more information.
        *
        *
        * @see https://echarts.apache.org/en/option.html#series-tree.data.animationDelayUpdate
        */
      var animationDelayUpdate: js.UndefOr[js.Function | Double] = js.native
      
      /**
        * Duration of the first animation, which supports callback
        * function for different data to have different animation effect:
        *
        * [see doc](https://echarts.apache.org/en/option.html#series-tree.tree.data)
        *
        *
        * @default
        * 1000
        * @see https://echarts.apache.org/en/option.html#series-tree.data.animationDuration
        */
      var animationDuration: js.UndefOr[js.Function | Double] = js.native
      
      /**
        * Time for animation to complete, which supports callback function
        * for different data to have different animation effect:
        *
        * [see doc](https://echarts.apache.org/en/option.html#series-tree.tree.data)
        *
        *
        * @default
        * 300
        * @see https://echarts.apache.org/en/option.html#series-tree.data.animationDurationUpdate
        */
      var animationDurationUpdate: js.UndefOr[js.Function | Double] = js.native
      
      /**
        * Easing method used for the first animation.
        * Varied easing effects can be found at
        * [easing effect example](https://echarts.apache.org/examples/en/editor.html?c=line-easing)
        * .
        *
        *
        * @default
        * "linear"
        * @see https://echarts.apache.org/en/option.html#series-tree.data.animationEasing
        */
      var animationEasing: js.UndefOr[String] = js.native
      
      /**
        * Easing method used for animation.
        *
        *
        * @default
        * "cubicOut"
        * @see https://echarts.apache.org/en/option.html#series-tree.data.animationEasingUpdate
        */
      var animationEasingUpdate: js.UndefOr[String] = js.native
      
      /**
        * Whether to set graphic number threshold to animation.
        * Animation will be disabled when graphic number is larger
        * than threshold.
        *
        *
        * @default
        * 2000
        * @see https://echarts.apache.org/en/option.html#series-tree.data.animationThreshold
        */
      var animationThreshold: js.UndefOr[Double] = js.native
      
      var children: js.UndefOr[js.Array[typingsSlinky.echarts.echarts.EChartOption.SeriesTree.DataObject]] = js.native
      
      /**
        * @see https://echarts.apache.org/en/option.html#series-tree.data.emphasis
        */
      var emphasis: js.UndefOr[`4`] = js.native
      
      /**
        * The style of the node.
        *
        *
        * @see https://echarts.apache.org/en/option.html#series-tree.data.itemStyle
        */
      var itemStyle: js.UndefOr[BorderType] = js.native
      
      /**
        * The label of the node.
        *
        *
        * @see https://echarts.apache.org/en/option.html#series-tree.data.label
        */
      var label: js.UndefOr[Distance] = js.native
      
      /**
        * The name of the tree node, used to identify each node.
        *
        *
        * @see https://echarts.apache.org/en/option.html#series-tree.data.name
        */
      var name: js.UndefOr[String] = js.native
      
      /**
        * tooltip settings in this series data.
        *
        *
        * @see https://echarts.apache.org/en/option.html#series-tree.data.tooltip
        */
      var tooltip: js.UndefOr[BaseTooltip] = js.native
      
      /**
        * The value of the node, displayed in the tooltip.
        *
        *
        * @see https://echarts.apache.org/en/option.html#series-tree.data.value
        */
      var value: js.UndefOr[Double] = js.native
    }
    object DataObject {
      
      @scala.inline
      def apply(): typingsSlinky.echarts.echarts.EChartOption.SeriesTree.DataObject = {
        val __obj = js.Dynamic.literal()
        __obj.asInstanceOf[typingsSlinky.echarts.echarts.EChartOption.SeriesTree.DataObject]
      }
      
      @scala.inline
      implicit class DataObjectMutableBuilder[Self <: typingsSlinky.echarts.echarts.EChartOption.SeriesTree.DataObject] (val x: Self) extends AnyVal {
        
        @scala.inline
        def setAnimation(value: Boolean): Self = StObject.set(x, "animation", value.asInstanceOf[js.Any])
        
        @scala.inline
        def setAnimationDelay(value: js.Function | Double): Self = StObject.set(x, "animationDelay", value.asInstanceOf[js.Any])
        
        @scala.inline
        def setAnimationDelayUndefined: Self = StObject.set(x, "animationDelay", js.undefined)
        
        @scala.inline
        def setAnimationDelayUpdate(value: js.Function | Double): Self = StObject.set(x, "animationDelayUpdate", value.asInstanceOf[js.Any])
        
        @scala.inline
        def setAnimationDelayUpdateUndefined: Self = StObject.set(x, "animationDelayUpdate", js.undefined)
        
        @scala.inline
        def setAnimationDuration(value: js.Function | Double): Self = StObject.set(x, "animationDuration", value.asInstanceOf[js.Any])
        
        @scala.inline
        def setAnimationDurationUndefined: Self = StObject.set(x, "animationDuration", js.undefined)
        
        @scala.inline
        def setAnimationDurationUpdate(value: js.Function | Double): Self = StObject.set(x, "animationDurationUpdate", value.asInstanceOf[js.Any])
        
        @scala.inline
        def setAnimationDurationUpdateUndefined: Self = StObject.set(x, "animationDurationUpdate", js.undefined)
        
        @scala.inline
        def setAnimationEasing(value: String): Self = StObject.set(x, "animationEasing", value.asInstanceOf[js.Any])
        
        @scala.inline
        def setAnimationEasingUndefined: Self = StObject.set(x, "animationEasing", js.undefined)
        
        @scala.inline
        def setAnimationEasingUpdate(value: String): Self = StObject.set(x, "animationEasingUpdate", value.asInstanceOf[js.Any])
        
        @scala.inline
        def setAnimationEasingUpdateUndefined: Self = StObject.set(x, "animationEasingUpdate", js.undefined)
        
        @scala.inline
        def setAnimationThreshold(value: Double): Self = StObject.set(x, "animationThreshold", value.asInstanceOf[js.Any])
        
        @scala.inline
        def setAnimationThresholdUndefined: Self = StObject.set(x, "animationThreshold", js.undefined)
        
        @scala.inline
        def setAnimationUndefined: Self = StObject.set(x, "animation", js.undefined)
        
        @scala.inline
        def setChildren(value: js.Array[typingsSlinky.echarts.echarts.EChartOption.SeriesTree.DataObject]): Self = StObject.set(x, "children", value.asInstanceOf[js.Any])
        
        @scala.inline
        def setChildrenUndefined: Self = StObject.set(x, "children", js.undefined)
        
        @scala.inline
        def setChildrenVarargs(value: typingsSlinky.echarts.echarts.EChartOption.SeriesTree.DataObject*): Self = StObject.set(x, "children", js.Array(value :_*))
        
        @scala.inline
        def setEmphasis(value: `4`): Self = StObject.set(x, "emphasis", value.asInstanceOf[js.Any])
        
        @scala.inline
        def setEmphasisUndefined: Self = StObject.set(x, "emphasis", js.undefined)
        
        @scala.inline
        def setItemStyle(value: BorderType): Self = StObject.set(x, "itemStyle", value.asInstanceOf[js.Any])
        
        @scala.inline
        def setItemStyleUndefined: Self = StObject.set(x, "itemStyle", js.undefined)
        
        @scala.inline
        def setLabel(value: Distance): Self = StObject.set(x, "label", value.asInstanceOf[js.Any])
        
        @scala.inline
        def setLabelUndefined: Self = StObject.set(x, "label", js.undefined)
        
        @scala.inline
        def setName(value: String): Self = StObject.set(x, "name", value.asInstanceOf[js.Any])
        
        @scala.inline
        def setNameUndefined: Self = StObject.set(x, "name", js.undefined)
        
        @scala.inline
        def setTooltip(value: BaseTooltip): Self = StObject.set(x, "tooltip", value.asInstanceOf[js.Any])
        
        @scala.inline
        def setTooltipUndefined: Self = StObject.set(x, "tooltip", js.undefined)
        
        @scala.inline
        def setValue(value: Double): Self = StObject.set(x, "value", value.asInstanceOf[js.Any])
        
        @scala.inline
        def setValueUndefined: Self = StObject.set(x, "value", js.undefined)
      }
    }
    
    @scala.inline
    implicit class SeriesTreeMutableBuilder[Self <: SeriesTree] (val x: Self) extends AnyVal {
      
      @scala.inline
      def setBottom(value: Double | String): Self = StObject.set(x, "bottom", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setBottomUndefined: Self = StObject.set(x, "bottom", js.undefined)
      
      @scala.inline
      def setData(value: js.Array[typingsSlinky.echarts.echarts.EChartOption.SeriesTree.DataObject]): Self = StObject.set(x, "data", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setDataUndefined: Self = StObject.set(x, "data", js.undefined)
      
      @scala.inline
      def setDataVarargs(value: typingsSlinky.echarts.echarts.EChartOption.SeriesTree.DataObject*): Self = StObject.set(x, "data", js.Array(value :_*))
      
      @scala.inline
      def setEmphasis(value: `24`): Self = StObject.set(x, "emphasis", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setEmphasisUndefined: Self = StObject.set(x, "emphasis", js.undefined)
      
      @scala.inline
      def setExpandAndCollapse(value: Boolean): Self = StObject.set(x, "expandAndCollapse", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setExpandAndCollapseUndefined: Self = StObject.set(x, "expandAndCollapse", js.undefined)
      
      @scala.inline
      def setHeight(value: Double | String): Self = StObject.set(x, "height", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setHeightUndefined: Self = StObject.set(x, "height", js.undefined)
      
      @scala.inline
      def setId(value: String): Self = StObject.set(x, "id", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setIdUndefined: Self = StObject.set(x, "id", js.undefined)
      
      @scala.inline
      def setInitialTreeDepth(value: Double): Self = StObject.set(x, "initialTreeDepth", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setInitialTreeDepthUndefined: Self = StObject.set(x, "initialTreeDepth", js.undefined)
      
      @scala.inline
      def setItemStyle(value: BorderType): Self = StObject.set(x, "itemStyle", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setItemStyleUndefined: Self = StObject.set(x, "itemStyle", js.undefined)
      
      @scala.inline
      def setLabel(value: BorderRadius): Self = StObject.set(x, "label", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setLabelUndefined: Self = StObject.set(x, "label", js.undefined)
      
      @scala.inline
      def setLayout(value: String): Self = StObject.set(x, "layout", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setLayoutUndefined: Self = StObject.set(x, "layout", js.undefined)
      
      @scala.inline
      def setLeaves(value: EmphasisItemStyle): Self = StObject.set(x, "leaves", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setLeavesUndefined: Self = StObject.set(x, "leaves", js.undefined)
      
      @scala.inline
      def setLeft(value: Double | String): Self = StObject.set(x, "left", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setLeftUndefined: Self = StObject.set(x, "left", js.undefined)
      
      @scala.inline
      def setLineStyle(value: CurvenessShadowBlur): Self = StObject.set(x, "lineStyle", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setLineStyleUndefined: Self = StObject.set(x, "lineStyle", js.undefined)
      
      @scala.inline
      def setName(value: String): Self = StObject.set(x, "name", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setNameUndefined: Self = StObject.set(x, "name", js.undefined)
      
      @scala.inline
      def setOrient(value: String): Self = StObject.set(x, "orient", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setOrientUndefined: Self = StObject.set(x, "orient", js.undefined)
      
      @scala.inline
      def setRight(value: Double | String): Self = StObject.set(x, "right", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setRightUndefined: Self = StObject.set(x, "right", js.undefined)
      
      @scala.inline
      def setRoam(value: Boolean | String): Self = StObject.set(x, "roam", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setRoamUndefined: Self = StObject.set(x, "roam", js.undefined)
      
      @scala.inline
      def setSymbol(value: String): Self = StObject.set(x, "symbol", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setSymbolKeepAspect(value: Boolean): Self = StObject.set(x, "symbolKeepAspect", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setSymbolKeepAspectUndefined: Self = StObject.set(x, "symbolKeepAspect", js.undefined)
      
      @scala.inline
      def setSymbolOffset(value: js.Array[_]): Self = StObject.set(x, "symbolOffset", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setSymbolOffsetUndefined: Self = StObject.set(x, "symbolOffset", js.undefined)
      
      @scala.inline
      def setSymbolOffsetVarargs(value: js.Any*): Self = StObject.set(x, "symbolOffset", js.Array(value :_*))
      
      @scala.inline
      def setSymbolRotate(value: Double): Self = StObject.set(x, "symbolRotate", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setSymbolRotateUndefined: Self = StObject.set(x, "symbolRotate", js.undefined)
      
      @scala.inline
      def setSymbolSize(value: js.Array[_] | js.Function | Double): Self = StObject.set(x, "symbolSize", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setSymbolSizeUndefined: Self = StObject.set(x, "symbolSize", js.undefined)
      
      @scala.inline
      def setSymbolSizeVarargs(value: js.Any*): Self = StObject.set(x, "symbolSize", js.Array(value :_*))
      
      @scala.inline
      def setSymbolUndefined: Self = StObject.set(x, "symbol", js.undefined)
      
      @scala.inline
      def setTooltip(value: BaseTooltip): Self = StObject.set(x, "tooltip", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setTooltipUndefined: Self = StObject.set(x, "tooltip", js.undefined)
      
      @scala.inline
      def setTop(value: Double | String): Self = StObject.set(x, "top", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setTopUndefined: Self = StObject.set(x, "top", js.undefined)
      
      @scala.inline
      def setType(value: String): Self = StObject.set(x, "type", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setTypeUndefined: Self = StObject.set(x, "type", js.undefined)
      
      @scala.inline
      def setWidth(value: Double | String): Self = StObject.set(x, "width", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setWidthUndefined: Self = StObject.set(x, "width", js.undefined)
      
      @scala.inline
      def setZ(value: Double): Self = StObject.set(x, "z", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setZUndefined: Self = StObject.set(x, "z", js.undefined)
      
      @scala.inline
      def setZlevel(value: Double): Self = StObject.set(x, "zlevel", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setZlevelUndefined: Self = StObject.set(x, "zlevel", js.undefined)
    }
  }
  
  /**
    * [Treemap](https://en.wikipedia.org/wiki/Treemapping)
    * is a common way to present "hierarchical data" or "tree data".It
    * primarily highlights the important nodes at all hierarchies in 『Tree』with
    * area.
    *
    * **Example:**
    *
    * [see doc](https://echarts.apache.org/en/option.html#series-treemap)
    *
    * **Visual Mapping:**
    *
    * treemap maps the numerical values to area.
    *
    * Moreover, it is able to map some dimensions of data to other visual
    * channel, like colors, lightness of colors and etc.
    *
    * About visual encoding, see details in
    * [series-treemap.levels](https://echarts.apache.org/en/option.html#series-treemap.levels)
    * .
    *
    * **Drill Down:**
    *
    * The feature `drill down` means: when clicking a tree node, this node
    * will be set as root and its children will be shown. When
    * [leafDepth](https://echarts.apache.org/en/option.html#series-treemap.leafDepth)
    * is set, this feature is enabled.
    *
    * **An example about drill down:**
    *
    * [see doc](https://echarts.apache.org/en/option.html#series-treemap)
    *
    * Notice: There are some difference in treemap configuration between
    * ECharts3 and ECharts2.
    * Some immature configuration ways are no longer supported:
    *
    * + The position method using `center/size` is no longer supported,
    * and `left/top/bottom/right/width/height` are used to position treemap,
    * as other components do.
    *
    * + The configuration item `breadcrumb` is moved outside `itemStyle/itemStyle.emphasis`,
    * and it is in the same level with `itemStyle` now.
    *
    * + The configuration item `root` is not avaliable temporarily.User
    * can zoom treemap to see some tiny or deep descendants, or using
    * [leafDepth](https://echarts.apache.org/en/option.html#series-treemap.leafDepth)
    * to enable the feature of "drill down".
    *
    * + The configuration item `label` is moved outside the `itemStyle/itemStyle.emphasis`,
    * and it is in the same level with `itemStyle` now.
    *
    * + The configuration items `itemStyle.childBorderWidth`
    * and `itemStyle.childBorderColor`
    * are not supported anymore (because in this way only 2 levels can
    * be defined).
    * [series-treemap.levels](https://echarts.apache.org/en/option.html#series-treemap.levels)
    * is used to define all levels now.
    *
    *
    * @see https://echarts.apache.org/en/option.html#series-treemap
    */
  @js.native
  trait SeriesTreemap extends Series {
    
    /**
      * Delay before updating the first animation, which supports callback
      * function for different data to have different animation effect.
      *
      * For example:
      *
      * [see doc](https://echarts.apache.org/en/option.html#series-treemap.treemap)
      *
      * See
      * [this example](https://echarts.apache.org/examples/en/editor.html?c=bar-animation-delay)
      * for more information.
      *
      *
      * @see https://echarts.apache.org/en/option.html#series-treemap.animationDelay
      */
    var animationDelay: js.UndefOr[js.Function | Double] = js.native
    
    /**
      * Duration of the first animation, which supports callback function
      * for different data to have different animation effect:
      *
      * [see doc](https://echarts.apache.org/en/option.html#series-treemap.treemap)
      *
      *
      * @default
      * 1500
      * @see https://echarts.apache.org/en/option.html#series-treemap.animationDuration
      */
    var animationDuration: js.UndefOr[js.Function | Double] = js.native
    
    /**
      * Easing method used for the first animation.
      * Varied easing effects can be found at
      * [easing effect example](https://echarts.apache.org/examples/en/editor.html?c=line-easing)
      * .
      *
      *
      * @default
      * "quinticInOut"
      * @see https://echarts.apache.org/en/option.html#series-treemap.animationEasing
      */
    var animationEasing: js.UndefOr[String] = js.native
    
    /**
      * Distance between treemap component and the bottom side of the
      * container.
      *
      * `bottom` value can be instant pixel value like `20`; it can also
      * be percentage value relative to container width like `'20%'`.
      *
      * Adaptive by default.
      *
      *
      * @default
      * "auto"
      * @see https://echarts.apache.org/en/option.html#series-treemap.bottom
      */
    var bottom: js.UndefOr[Double | String] = js.native
    
    /**
      * breadcrumb, showing the path of the current node.
      *
      *
      * @see https://echarts.apache.org/en/option.html#series-treemap.breadcrumb
      */
    var breadcrumb: js.UndefOr[Bottom] = js.native
    
    /**
      * Children will not be shown when area size of a node is smaller
      * than this value (unit: px square).
      *
      * This can hide the details of nodes when the rectangular area
      * is not large enough.
      * When users zoom nodes, the child node would show if the area
      * is larger than this threshold.
      *
      * About visual encoding, see details in
      * [series-treemap.levels](https://echarts.apache.org/en/option.html#series-treemap.levels)
      * .
      *
      * > Tps: In treemap, `childrenVisibleMin` attribute could appear
      * in more than one places:
      * >
      * > + It could appear in
      * > [sereis-treemap](https://echarts.apache.org/en/option.html#series-treemap)
      * > , indicating the unified setting of the series.
      * >
      * > + It could appear in each array element of
      * > [series-treemap.levels](https://echarts.apache.org/en/option.html#series-treemap.levels)
      * > , indicating the unified setting of each level of the tree.
      * >
      * > + It could appear in each node of
      * > [series-treemap.data](https://echarts.apache.org/en/option.html#series-treemap.data)
      * > , indicating the particular setting of each node.
      * >
      *
      *
      * @see https://echarts.apache.org/en/option.html#series-treemap.childrenVisibleMin
      */
    var childrenVisibleMin: js.UndefOr[Double] = js.native
    
    /**
      * It indicates the range of tranparent rate (color alpha) of the
      * series. The range of values is 0 ~ 1.
      *
      * For example, `colorAlpha` can be `[0.3, 1]`.
      *
      * About visual encoding, see details in
      * [series-treemap.levels](https://echarts.apache.org/en/option.html#series-treemap.levels)
      * .
      *
      * > Tps: In treemap, `colorAlpha` attribute could appear in more
      * than one places:
      * >
      * > + It could appear in
      * > [sereis-treemap](https://echarts.apache.org/en/option.html#series-treemap)
      * > , indicating the unified setting of the series.
      * >
      * > + It could appear in each array element of
      * > [series-treemap.levels](https://echarts.apache.org/en/option.html#series-treemap.levels)
      * > , indicating the unified setting of each level of the tree.
      * >
      * > + It could appear in each node of
      * > [series-treemap.data](https://echarts.apache.org/en/option.html#series-treemap.data)
      * > , indicating the particular setting of each node.
      * >
      *
      *
      * @see https://echarts.apache.org/en/option.html#series-treemap.colorAlpha
      */
    var colorAlpha: js.UndefOr[js.Array[_]] = js.native
    
    /**
      * Specify the rule according to which each node obtain color from
      * [color list](https://echarts.apache.org/en/option.html#series-treemap.levels.color)
      * . Optional values:
      *
      * + `'value'`:
      *
      * Map
      * [series-treemap.data.value](https://echarts.apache.org/en/option.html#series-treemap.data.value)
      * to color.
      *
      * In this way, the color of each node indicate its value.
      *
      * [visualDimension](https://echarts.apache.org/en/option.html#series-treemap.levels.visualDimension)
      * can be used to specify which dimension of
      * [data](https://echarts.apache.org/en/option.html#series-treemap.data)
      * is used to perform visual mapping.
      *
      * + `'index'`:
      *
      * Map the `index` (ordinal number) of nodes to color.
      * Namely, in a level, the first node is mapped to the first color
      * of
      * [color list](https://echarts.apache.org/en/option.html#series-treemap.levels.color)
      * , and the second node gets the second color.
      *
      * In this way, adjacent nodes are distinguished by color.
      *
      * + `'id'`:
      *
      * Map
      * [series-treemap.data.id](https://echarts.apache.org/en/option.html#series-treemap.data.id)
      * to color.
      *
      * Since `id` is used to identify node, if user call `setOption`
      * to modify the tree, each node will remain the original color
      * before and after `setOption` called. See this
      * [example](https://echarts.apache.org/examples/en/editor.html?c=treemap-obama&edit=1&reset=1)
      * .
      *
      * About visual encoding, see details in
      * [series-treemap.levels](https://echarts.apache.org/en/option.html#series-treemap.levels)
      * .
      *
      * > Tps: In treemap, `colorMappingBy` attribute could appear in
      * more than one places:
      * >
      * > + It could appear in
      * > [sereis-treemap](https://echarts.apache.org/en/option.html#series-treemap)
      * > , indicating the unified setting of the series.
      * >
      * > + It could appear in each array element of
      * > [series-treemap.levels](https://echarts.apache.org/en/option.html#series-treemap.levels)
      * > , indicating the unified setting of each level of the tree.
      * >
      * > + It could appear in each node of
      * > [series-treemap.data](https://echarts.apache.org/en/option.html#series-treemap.data)
      * > , indicating the particular setting of each node.
      * >
      *
      *
      * @default
      * "index"
      * @see https://echarts.apache.org/en/option.html#series-treemap.colorMappingBy
      */
    var colorMappingBy: js.UndefOr[String] = js.native
    
    /**
      * It indicates the range of saturation (color alpha) of the series.
      * The range of values is 0 ~ 1.
      *
      * For example, `colorSaturation` can be `[0.3, 1]`.
      *
      * About visual encoding, see details in
      * [series-treemap.levels](https://echarts.apache.org/en/option.html#series-treemap.levels)
      * .
      *
      * > Tps: In treemap, `colorSaturation` attribute could appear in
      * more than one places:
      * >
      * > + It could appear in
      * > [sereis-treemap](https://echarts.apache.org/en/option.html#series-treemap)
      * > , indicating the unified setting of the series.
      * >
      * > + It could appear in each array element of
      * > [series-treemap.levels](https://echarts.apache.org/en/option.html#series-treemap.levels)
      * > , indicating the unified setting of each level of the tree.
      * >
      * > + It could appear in each node of
      * > [series-treemap.data](https://echarts.apache.org/en/option.html#series-treemap.data)
      * > , indicating the particular setting of each node.
      * >
      *
      *
      * @see https://echarts.apache.org/en/option.html#series-treemap.colorSaturation
      */
    var colorSaturation: js.UndefOr[Double] = js.native
    
    /**
      * the the data format of
      * [series-treemap.data](https://echarts.apache.org/en/option.html#series-treemap.data)
      * is a forest. For example:
      *
      * [see doc](https://echarts.apache.org/en/option.html#series-treemap.treemap)
      *
      *
      * @see https://echarts.apache.org/en/option.html#series-treemap.data
      */
    var data: js.UndefOr[js.Array[typingsSlinky.echarts.echarts.EChartOption.SeriesTreemap.DataObject]] = js.native
    
    /**
      * Marker when the node is able to be drilled down.
      *
      *
      * @default
      * '▶'
      * @see https://echarts.apache.org/en/option.html#series-treemap.drillDownIcon
      */
    var drillDownIcon: js.UndefOr[String] = js.native
    
    /**
      * @see https://echarts.apache.org/en/option.html#series-treemap.emphasis
      */
    var emphasis: js.UndefOr[UpperLabel] = js.native
    
    /**
      * Height of treemap component.
      *
      *
      * @default
      * 80%
      * @see https://echarts.apache.org/en/option.html#series-treemap.height
      */
    var height: js.UndefOr[Double | String] = js.native
    
    /**
      * Component ID, not specified by default.
      * If specified, it can be used to refer the component in option
      * or API.
      *
      *
      * @see https://echarts.apache.org/en/option.html#series-treemap.id
      */
    var id: js.UndefOr[String] = js.native
    
    /**
      *
      * > Tps: In treemap, `itemStyle` attribute could appear in more
      * than one places:
      * >
      * > + It could appear in
      * > [sereis-treemap](https://echarts.apache.org/en/option.html#series-treemap)
      * > , indicating the unified setting of the series.
      * >
      * > + It could appear in each array element of
      * > [series-treemap.levels](https://echarts.apache.org/en/option.html#series-treemap.levels)
      * > , indicating the unified setting of each level of the tree.
      * >
      * > + It could appear in each node of
      * > [series-treemap.data](https://echarts.apache.org/en/option.html#series-treemap.data)
      * > , indicating the particular setting of each node.
      * >
      *
      *
      * @see https://echarts.apache.org/en/option.html#series-treemap.itemStyle
      */
    var itemStyle: js.UndefOr[BorderColorSaturation] = js.native
    
    /**
      * `label` decribes the style of the label in each node.
      *
      * > Tps: In treemap, `label` attribute could appear in more than
      * one places:
      * >
      * > + It could appear in
      * > [sereis-treemap](https://echarts.apache.org/en/option.html#series-treemap)
      * > , indicating the unified setting of the series.
      * >
      * > + It could appear in each array element of
      * > [series-treemap.levels](https://echarts.apache.org/en/option.html#series-treemap.levels)
      * > , indicating the unified setting of each level of the tree.
      * >
      * > + It could appear in each node of
      * > [series-treemap.data](https://echarts.apache.org/en/option.html#series-treemap.data)
      * > , indicating the particular setting of each node.
      * >
      *
      *
      * @see https://echarts.apache.org/en/option.html#series-treemap.label
      */
    var label: js.UndefOr[Ellipsis] = js.native
    
    /**
      * When `leafDepth` is set, the feature "drill down" is enabled,
      * which means when clicking a tree node, this node will be set
      * as root and its children will be shown.
      *
      * `leafDepth` represents how many levels are shown at most.
      * For example, when `leafDepth` is set to `1`, only one level will
      * be shown.
      *
      * `leafDepth` is `null`/`undefined` by default, which means that
      * "drill down" is disabled.
      *
      * **An example about drill down:**
      *
      * [see doc](https://echarts.apache.org/en/option.html#series-treemap.treemap)
      *
      *
      * @see https://echarts.apache.org/en/option.html#series-treemap.leafDepth
      */
    var leafDepth: js.UndefOr[Double] = js.native
    
    /**
      * Distance between treemap component and the left side of the container.
      *
      * `left` value can be instant pixel value like `20`; it can also
      * be percentage value relative to container width like `'20%'`;
      * and it can also be `'left'`, `'center'`, or `'right'`.
      *
      * If the `left` value is set to be `'left'`, `'center'`, or `'right'`,
      * then the component will be aligned automatically based on position.
      *
      *
      * @default
      * "center"
      * @see https://echarts.apache.org/en/option.html#series-treemap.left
      */
    var left: js.UndefOr[Double | String] = js.native
    
    /**
      * **Multiple Levels Configuration**
      *
      * treemap adopts 4-level configuration:
      *
      * ```
      * "each node" --> "each level" --> "each series".
      *
      * ```
      *
      * That is, we can configurate each node, can also configurate each
      * level of the tree, or set overall configurations on each series.
      * The highest priority is node configuration.
      *
      * `levels` is configurations on each levels, which is used most.
      *
      * For example:
      *
      * [see doc](https://echarts.apache.org/en/option.html#series-treemap.treemap)
      *
      * **The Rules about Visual Mapping**
      *
      * When designing a treemap, we primarily focus on how to visually
      * distinguish "different levels", "different categories in the
      * same level", which requires appropriate settings of "rectangular
      * color", "border thickness", "border color" and even "color saturation
      * of rectangular" and so on on each level.
      *
      * See
      * [example](https://echarts.apache.org/examples/en/editor.html?c=treemap-disk&edit=1&reset=1)
      *
      * The top level is divided into several parts by colors "red",
      * "green", "blue", and etc
      *
      *
      *
      * In each color block, `colorSaturation` is used to distinguish
      * nodes in sublevel.
      * The border color of the top level is "white", while the border
      * color of the sublevel is the color that based on the current
      * block color and processed by `borderColorSaturation`.
      *
      * `treemap` uses this rule of visual configuration: each level
      * computes its visual value based on the configurations (`color`,
      * `colorSaturation`, `borderColor`, `colorSaturation`) on this
      * level.
      * If there is no certain configuration in a node, it inherits the
      * configuration from its parent.
      *
      * In this way, this effect can be configured: set a `color` list
      * on the parent level, and set `colorSaturation` on the child level,
      * and then each node in the parent level would obtain a color from
      * the `color` list, and each node in the child level would obtain
      * a value from `colorSaturation` and compound it with the color
      * inherited from its parent node to get its final color.
      *
      * **Dimensions and "Extra Visual Mapping"**
      *
      * See the example below: every `value` field is set as an Array,
      * in which each item in the array represents a dimension respectively.
      *
      * [see doc](https://echarts.apache.org/en/option.html#series-treemap.treemap)
      *
      * `treemap` will map the first dimension (the first item of the
      * array) to "area".
      * If we want to express more information, we could map another
      * dimension (specified by
      * [series-treemap.visualDimension](https://echarts.apache.org/en/option.html#series-treemap.viusalDimension)
      * ) to another visual types, such as `colorSaturation` and so on.
      * See the
      * [example](https://echarts.apache.org/examples/en/editor.html?c=treemap-obama&edit=1&reset=1)
      * and select the legend 'Growth'.
      *
      * **How to avoid confusion by setting border/gap of node**
      *
      * If all of the border/gaps are set with the same color, confusion
      * might occur when rectangulars in different levels display at
      * the same time.
      *
      * See the
      * [example](https://echarts.apache.org/examples/en/editor.html?c=doc-example/treemap-borderColor&edit=1&reset=1)
      *
      * Noticed that the child rectangles in the red area are in the
      * deeper level than rectangles that are saparated by white gap.
      * So in the red area, basically we set gap color with red, and
      * use `borderColorSaturation` to lift the saturation.
      *
      * **Explanation about borderWidth, gapWidth, borderColor**
      *
      * [see doc](https://echarts.apache.org/en/option.html#series-treemap.treemap)
      *
      *
      * @default
      * []
      * @see https://echarts.apache.org/en/option.html#series-treemap.levels
      */
    var levels: js.UndefOr[ChildrenVisibleMin] = js.native
    
    /**
      * Series name used for displaying in
      * [tooltip](https://echarts.apache.org/en/option.html#tooltip)
      * and filtering with
      * [legend](https://echarts.apache.org/en/option.html#legend)
      * , or updaing data and configuration with `setOption`.
      *
      *
      * @see https://echarts.apache.org/en/option.html#series-treemap.name
      */
    var name: js.UndefOr[String] = js.native
    
    /**
      * The behaviour when clicking a node. Optional values are:
      *
      * + `false`: Do nothing after clicked.
      * + `'zoomToNode'`: Zoom to clicked node.
      * + `'link'`: If there is
      * [link](https://echarts.apache.org/en/option.html#series-treemap.data.link)
      * in node data, do hyperlink jump after clicked.
      *
      *
      * @default
      * "zoomToNode"
      * @see https://echarts.apache.org/en/option.html#series-treemap.nodeClick
      */
    var nodeClick: js.UndefOr[Boolean | String] = js.native
    
    /**
      * Distance between treemap component and the right side of the
      * container.
      *
      * `right` value can be instant pixel value like `20`; it can also
      * be percentage value relative to container width like `'20%'`.
      *
      * Adaptive by default.
      *
      *
      * @default
      * "auto"
      * @see https://echarts.apache.org/en/option.html#series-treemap.right
      */
    var right: js.UndefOr[Double | String] = js.native
    
    /**
      * Whether to enable dragging roam (move and zoom).
      * Optional values are:
      *
      * + `false`: roam is disabled.
      * + `'scale'` or `'zoom'`: zoom only.
      * + `'move'` or `'pan'`: move (translation) only.
      * + `true`: both zoom and move (translation) are avaliable.
      *
      *
      * @default
      * "true"
      * @see https://echarts.apache.org/en/option.html#series-treemap.roam
      */
    var roam: js.UndefOr[Boolean | String] = js.native
    
    /**
      * Whether to ignore mouse events.
      * Default value is false, for triggering and responding to mouse
      * events.
      *
      *
      * @see https://echarts.apache.org/en/option.html#series-treemap.silent
      */
    var silent: js.UndefOr[Children] = js.native
    
    /**
      * The expected square ratio.
      * Layout would approach the ratio as close as possible.
      *
      * It defaults to be the golden ratio: `0.5
      * * (1 + Math.sqrt(5))`.
      *
      *
      * @see https://echarts.apache.org/en/option.html#series-treemap.squareRatio
      */
    var squareRatio: js.UndefOr[Double] = js.native
    
    /**
      * tooltip settings in this series.
      *
      *
      * @see https://echarts.apache.org/en/option.html#series-treemap.tooltip
      */
    var tooltip: js.UndefOr[BaseTooltip] = js.native
    
    /**
      * Distance between treemap component and the top side of the container.
      *
      * `top` value can be instant pixel value like `20`; it can also
      * be percentage value relative to container width like `'20%'`;
      * and it can also be `'top'`, `'middle'`, or `'bottom'`.
      *
      * If the `left` value is set to be `'top'`, `'middle'`, or `'bottom'`,
      * then the component will be aligned automatically based on position.
      *
      *
      * @default
      * "middle"
      * @see https://echarts.apache.org/en/option.html#series-treemap.top
      */
    var top: js.UndefOr[Double | String] = js.native
    
    /**
      * @default
      * "treemap"
      * @see https://echarts.apache.org/en/option.html#series-treemap.type
      */
    var `type`: js.UndefOr[String] = js.native
    
    /**
      * `upperLabel` is used to specify whether show label when the node
      * has children. When
      * [upperLabel.show](https://echarts.apache.org/en/option.html#series-treemap.upperLabel.show)
      * is set as `true`, the feature that "show parent label" is enabled.
      *
      * The same as
      * [series-treemap.label](https://echarts.apache.org/en/option.html#series-treemap.label)
      * , the option `upperLabel` can be placed at the root of
      * [series-treemap](https://echarts.apache.org/en/option.html#series-treemap)
      * directly, or in
      * [series-treemap.level](https://echarts.apache.org/en/option.html#series-treemap.level)
      * , or in each item of
      * [series-treemap.data](https://echarts.apache.org/en/option.html#series-treemap.data)
      * .
      *
      * Specifically,
      * [series-treemap.label](https://echarts.apache.org/en/option.html#series-treemap.label)
      * specifies the style when a node is a leaf, while `upperLabel`
      * specifies the style when a node has children, in which case the
      * label is displayed in the inner top of the node.
      *
      * See:
      *
      * [see doc](https://echarts.apache.org/en/option.html#series-treemap.treemap)
      *
      * > Tps: In treemap, `label` attribute could appear in more than
      * one places:
      * >
      * > + It could appear in
      * > [sereis-treemap](https://echarts.apache.org/en/option.html#series-treemap)
      * > , indicating the unified setting of the series.
      * >
      * > + It could appear in each array element of
      * > [series-treemap.levels](https://echarts.apache.org/en/option.html#series-treemap.levels)
      * > , indicating the unified setting of each level of the tree.
      * >
      * > + It could appear in each node of
      * > [series-treemap.data](https://echarts.apache.org/en/option.html#series-treemap.data)
      * > , indicating the particular setting of each node.
      * >
      *
      *
      * @see https://echarts.apache.org/en/option.html#series-treemap.upperLabel
      */
    var upperLabel: js.UndefOr[TextShadowColor] = js.native
    
    /**
      * A node will not be shown when its area size is smaller than this
      * value (unit: px square).
      *
      * In this way, tiny nodes will be hidden, otherwise they will huddle
      * together.
      * When user zoom the treemap, the area size will increase and the
      * rectangle will be shown if the area size is larger than this
      * threshold.
      *
      * About visual encoding, see details in
      * [series-treemap.levels](https://echarts.apache.org/en/option.html#series-treemap.levels)
      * .
      *
      * > Tps: In treemap, `visibleMin` attribute could appear in more
      * than one places:
      * >
      * > + It could appear in
      * > [sereis-treemap](https://echarts.apache.org/en/option.html#series-treemap)
      * > , indicating the unified setting of the series.
      * >
      * > + It could appear in each array element of
      * > [series-treemap.levels](https://echarts.apache.org/en/option.html#series-treemap.levels)
      * > , indicating the unified setting of each level of the tree.
      * >
      * > + It could appear in each node of
      * > [series-treemap.data](https://echarts.apache.org/en/option.html#series-treemap.data)
      * > , indicating the particular setting of each node.
      * >
      *
      *
      * @default
      * 10
      * @see https://echarts.apache.org/en/option.html#series-treemap.visibleMin
      */
    var visibleMin: js.UndefOr[Double] = js.native
    
    /**
      * `treemap` is able to map any dimensions of data to visual.
      *
      * The value of
      * [series-treemap.data](https://echarts.apache.org/en/option.html#series-treemap.data)
      * can be an array.
      * And each item of the array represents a "dimension".
      * `visualDimension` specifies the dimension on which visual mapping
      * will be performed.
      *
      * About visual encoding, see details in
      * [series-treemap.levels](https://echarts.apache.org/en/option.html#series-treemap.levels)
      * .
      *
      * > Tps: In treemap, `visualDimension` attribute could appear in
      * more than one places:
      * >
      * > + It could appear in
      * > [sereis-treemap](https://echarts.apache.org/en/option.html#series-treemap)
      * > , indicating the unified setting of the series.
      * >
      * > + It could appear in each array element of
      * > [series-treemap.levels](https://echarts.apache.org/en/option.html#series-treemap.levels)
      * > , indicating the unified setting of each level of the tree.
      * >
      * > + It could appear in each node of
      * > [series-treemap.data](https://echarts.apache.org/en/option.html#series-treemap.data)
      * > , indicating the particular setting of each node.
      * >
      *
      *
      * @see https://echarts.apache.org/en/option.html#series-treemap.visualDimension
      */
    var visualDimension: js.UndefOr[Double] = js.native
    
    /**
      * The maximal value of current level.
      * Auto-statistics by default.
      *
      * When
      * [colorMappingBy](https://echarts.apache.org/en/option.html#series-treemap.levels.colorMappingBy)
      * is set to `'value'`, you are able to specify extent manually
      * for visual mapping by specifying `visualMin` or `visualMax`.
      *
      *
      * @see https://echarts.apache.org/en/option.html#series-treemap.visualMax
      */
    var visualMax: js.UndefOr[Double] = js.native
    
    /**
      * The minimal value of current level.
      * Auto-statistics by default.
      *
      * When
      * [colorMappingBy](https://echarts.apache.org/en/option.html#series-treemap.levels.colorMappingBy)
      * is set to `'value'`, you are able to specify extent manually
      * for visual mapping by specifying `visualMin` or `visualMax`.
      *
      *
      * @see https://echarts.apache.org/en/option.html#series-treemap.visualMin
      */
    var visualMin: js.UndefOr[Double] = js.native
    
    /**
      * Width of treemap component.
      *
      *
      * @default
      * 80%
      * @see https://echarts.apache.org/en/option.html#series-treemap.width
      */
    var width: js.UndefOr[Double | String] = js.native
    
    /**
      * `z` value of all graghical elements in , which controls order
      * of drawing graphical components.
      * Components with smaller `z` values may be overwritten by those
      * with larger `z` values.
      *
      * `z` has a lower priority to `zlevel`, and will not create new
      * Canvas.
      *
      *
      * @default
      * 2
      * @see https://echarts.apache.org/en/option.html#series-treemap.z
      */
    var z: js.UndefOr[Double] = js.native
    
    /**
      * `zlevel` value of all graghical elements in .
      *
      * `zlevel` is used to make layers with Canvas.
      * Graphical elements with different `zlevel` values will be placed
      * in different Canvases, which is a common optimization technique.
      * We can put those frequently changed elements (like those with
      * animations) to a seperate `zlevel`.
      * Notice that too many Canvases will increase memory cost, and
      * should be used carefully on mobile phones to avoid crash.
      *
      * Canvases with bigger `zlevel` will be placed on Canvases with
      * smaller `zlevel`.
      *
      *
      * @see https://echarts.apache.org/en/option.html#series-treemap.zlevel
      */
    var zlevel: js.UndefOr[Double] = js.native
    
    /**
      * The treemap will be auto zoomed to a appropriate ratio when a
      * node is clicked (when
      * [nodeClick](https://echarts.apache.org/en/option.html#series-treemap.nodeClick)
      * is set as `'zoomToNode'` and no drill down happens).
      * This configuration item indicates the ratio.
      *
      *
      * @default
      * 0.32*0.32
      * @see https://echarts.apache.org/en/option.html#series-treemap.zoomToNodeRatio
      */
    var zoomToNodeRatio: js.UndefOr[Double] = js.native
  }
  object SeriesTreemap {
    
    @scala.inline
    def apply(): SeriesTreemap = {
      val __obj = js.Dynamic.literal()
      __obj.asInstanceOf[SeriesTreemap]
    }
    
    @js.native
    trait DataObject extends StObject {
      
      var children: js.UndefOr[js.Array[typingsSlinky.echarts.echarts.EChartOption.SeriesTreemap.DataObject]] = js.native
      
      /**
        * Children will not be shown when area size of a node is smaller
        * than this value (unit: px square).
        *
        * This can hide the details of nodes when the rectangular area
        * is not large enough.
        * When users zoom nodes, the child node would show if the area
        * is larger than this threshold.
        *
        * About visual encoding, see details in
        * [series-treemap.levels](https://echarts.apache.org/en/option.html#series-treemap.levels)
        * .
        *
        * > Tps: In treemap, `childrenVisibleMin` attribute could appear
        * in more than one places:
        * >
        * > + It could appear in
        * > [sereis-treemap](https://echarts.apache.org/en/option.html#series-treemap)
        * > , indicating the unified setting of the series.
        * >
        * > + It could appear in each array element of
        * > [series-treemap.levels](https://echarts.apache.org/en/option.html#series-treemap.levels)
        * > , indicating the unified setting of each level of the tree.
        * >
        * > + It could appear in each node of
        * > [series-treemap.data](https://echarts.apache.org/en/option.html#series-treemap.data)
        * > , indicating the particular setting of each node.
        * >
        *
        *
        * @see https://echarts.apache.org/en/option.html#series-treemap.data.childrenVisibleMin
        */
      var childrenVisibleMin: js.UndefOr[Double] = js.native
      
      /**
        * A color list for a level.
        * Each node in the level will obtain a color from the color
        * list (the rule see
        * [colorMappingBy](https://echarts.apache.org/en/option.html#series-treemap.levels.colorMappingBy)
        * ).
        * It is empty by default, which means the global color list
        * will be used.
        *
        * About visual encoding, see details in
        * [series-treemap.levels](https://echarts.apache.org/en/option.html#series-treemap.levels)
        * .
        *
        * > Tps: In treemap, `color` attribute could appear in more
        * than one places:
        * >
        * > + It could appear in each array element of
        * > [series-treemap.levels](https://echarts.apache.org/en/option.html#series-treemap.levels)
        * > , indicating the unified setting of each level of the tree.
        * >
        * > + It could appear in each node of
        * > [series-treemap.data](https://echarts.apache.org/en/option.html#series-treemap.data)
        * > , indicating the particular setting of each node.
        * >
        *
        *
        * @see https://echarts.apache.org/en/option.html#series-treemap.data.color
        */
      var color: js.UndefOr[js.Array[_]] = js.native
      
      /**
        * It indicates the range of tranparent rate (color alpha) for
        * nodes in a level . The range of values is 0 ~ 1.
        *
        * For example, `colorAlpha` can be `[0.3, 1]`.
        *
        * About visual encoding, see details in
        * [series-treemap.levels](https://echarts.apache.org/en/option.html#series-treemap.levels)
        * .
        *
        * > Tps: In treemap, `colorAlpha` attribute could appear in
        * more than one places:
        * >
        * > + It could appear in
        * > [sereis-treemap](https://echarts.apache.org/en/option.html#series-treemap)
        * > , indicating the unified setting of the series.
        * >
        * > + It could appear in each array element of
        * > [series-treemap.levels](https://echarts.apache.org/en/option.html#series-treemap.levels)
        * > , indicating the unified setting of each level of the tree.
        * >
        * > + It could appear in each node of
        * > [series-treemap.data](https://echarts.apache.org/en/option.html#series-treemap.data)
        * > , indicating the particular setting of each node.
        * >
        *
        *
        * @see https://echarts.apache.org/en/option.html#series-treemap.data.colorAlpha
        */
      var colorAlpha: js.UndefOr[js.Array[_]] = js.native
      
      /**
        * Specify the rule according to which each node obtain color
        * from
        * [color list](https://echarts.apache.org/en/option.html#series-treemap.levels.color)
        * . Optional values:
        *
        * + `'value'`:
        *
        * Map
        * [series-treemap.data.value](https://echarts.apache.org/en/option.html#series-treemap.data.value)
        * to color.
        *
        * In this way, the color of each node indicate its value.
        *
        * [visualDimension](https://echarts.apache.org/en/option.html#series-treemap.levels.visualDimension)
        * can be used to specify which dimension of
        * [data](https://echarts.apache.org/en/option.html#series-treemap.data)
        * is used to perform visual mapping.
        *
        * + `'index'`:
        *
        * Map the `index` (ordinal number) of nodes to color.
        * Namely, in a level, the first node is mapped to the first
        * color of
        * [color list](https://echarts.apache.org/en/option.html#series-treemap.levels.color)
        * , and the second node gets the second color.
        *
        * In this way, adjacent nodes are distinguished by color.
        *
        * + `'id'`:
        *
        * Map
        * [series-treemap.data.id](https://echarts.apache.org/en/option.html#series-treemap.data.id)
        * to color.
        *
        * Since `id` is used to identify node, if user call `setOption`
        * to modify the tree, each node will remain the original color
        * before and after `setOption` called. See this
        * [example](https://echarts.apache.org/examples/en/editor.html?c=treemap-obama&edit=1&reset=1)
        * .
        *
        * About visual encoding, see details in
        * [series-treemap.levels](https://echarts.apache.org/en/option.html#series-treemap.levels)
        * .
        *
        * > Tps: In treemap, `colorMappingBy` attribute could appear
        * in more than one places:
        * >
        * > + It could appear in
        * > [sereis-treemap](https://echarts.apache.org/en/option.html#series-treemap)
        * > , indicating the unified setting of the series.
        * >
        * > + It could appear in each array element of
        * > [series-treemap.levels](https://echarts.apache.org/en/option.html#series-treemap.levels)
        * > , indicating the unified setting of each level of the tree.
        * >
        * > + It could appear in each node of
        * > [series-treemap.data](https://echarts.apache.org/en/option.html#series-treemap.data)
        * > , indicating the particular setting of each node.
        * >
        *
        *
        * @default
        * "index"
        * @see https://echarts.apache.org/en/option.html#series-treemap.data.colorMappingBy
        */
      var colorMappingBy: js.UndefOr[String] = js.native
      
      /**
        * It indicates the range of saturation (color alpha) for nodes
        * in a level . The range of values is 0 ~ 1.
        *
        * For example, `colorSaturation` can be `[0.3, 1]`.
        *
        * About visual encoding, see details in
        * [series-treemap.levels](https://echarts.apache.org/en/option.html#series-treemap.levels)
        * .
        *
        * > Tps: In treemap, `colorSaturation` attribute could appear
        * in more than one places:
        * >
        * > + It could appear in
        * > [sereis-treemap](https://echarts.apache.org/en/option.html#series-treemap)
        * > , indicating the unified setting of the series.
        * >
        * > + It could appear in each array element of
        * > [series-treemap.levels](https://echarts.apache.org/en/option.html#series-treemap.levels)
        * > , indicating the unified setting of each level of the tree.
        * >
        * > + It could appear in each node of
        * > [series-treemap.data](https://echarts.apache.org/en/option.html#series-treemap.data)
        * > , indicating the particular setting of each node.
        * >
        *
        *
        * @see https://echarts.apache.org/en/option.html#series-treemap.data.colorSaturation
        */
      var colorSaturation: js.UndefOr[Double] = js.native
      
      /**
        * @see https://echarts.apache.org/en/option.html#series-treemap.data.emphasis
        */
      var emphasis: js.UndefOr[UpperLabel] = js.native
      
      /**
        * `id` is not mandatory.
        * But if using API, id is used to locate node.
        *
        *
        * @see https://echarts.apache.org/en/option.html#series-treemap.data.id
        */
      var id: js.UndefOr[String] = js.native
      
      /**
        *
        * > Tps: In treemap, `itemStyle` attribute could appear in
        * more than one places:
        * >
        * > + It could appear in
        * > [sereis-treemap](https://echarts.apache.org/en/option.html#series-treemap)
        * > , indicating the unified setting of the series.
        * >
        * > + It could appear in each array element of
        * > [series-treemap.levels](https://echarts.apache.org/en/option.html#series-treemap.levels)
        * > , indicating the unified setting of each level of the tree.
        * >
        * > + It could appear in each node of
        * > [series-treemap.data](https://echarts.apache.org/en/option.html#series-treemap.data)
        * > , indicating the particular setting of each node.
        * >
        *
        *
        * @see https://echarts.apache.org/en/option.html#series-treemap.data.itemStyle
        */
      var itemStyle: js.UndefOr[BorderColorSaturation] = js.native
      
      /**
        * `label` decribes the style of the label in each node.
        *
        * > Tps: In treemap, `label` attribute could appear in more
        * than one places:
        * >
        * > + It could appear in
        * > [sereis-treemap](https://echarts.apache.org/en/option.html#series-treemap)
        * > , indicating the unified setting of the series.
        * >
        * > + It could appear in each array element of
        * > [series-treemap.levels](https://echarts.apache.org/en/option.html#series-treemap.levels)
        * > , indicating the unified setting of each level of the tree.
        * >
        * > + It could appear in each node of
        * > [series-treemap.data](https://echarts.apache.org/en/option.html#series-treemap.data)
        * > , indicating the particular setting of each node.
        * >
        *
        *
        * @see https://echarts.apache.org/en/option.html#series-treemap.data.label
        */
      var label: js.UndefOr[Ellipsis] = js.native
      
      /**
        * Show the description text in rectangle.
        *
        *
        * @see https://echarts.apache.org/en/option.html#series-treemap.data.name
        */
      var name: js.UndefOr[String] = js.native
      
      /**
        * `upperLabel` is used to specify whether show label when the
        * node has children. When
        * [upperLabel.show](https://echarts.apache.org/en/option.html#series-treemap.upperLabel.show)
        * is set as `true`, the feature that "show parent label" is
        * enabled.
        *
        * The same as
        * [series-treemap.label](https://echarts.apache.org/en/option.html#series-treemap.label)
        * , the option `upperLabel` can be placed at the root of
        * [series-treemap](https://echarts.apache.org/en/option.html#series-treemap)
        * directly, or in
        * [series-treemap.level](https://echarts.apache.org/en/option.html#series-treemap.level)
        * , or in each item of
        * [series-treemap.data](https://echarts.apache.org/en/option.html#series-treemap.data)
        * .
        *
        * Specifically,
        * [series-treemap.label](https://echarts.apache.org/en/option.html#series-treemap.label)
        * specifies the style when a node is a leaf, while `upperLabel`
        * specifies the style when a node has children, in which case
        * the label is displayed in the inner top of the node.
        *
        * See:
        *
        * [see doc](https://echarts.apache.org/en/option.html#series-treemap.treemap.data)
        *
        * > Tps: In treemap, `label` attribute could appear in more
        * than one places:
        * >
        * > + It could appear in
        * > [sereis-treemap](https://echarts.apache.org/en/option.html#series-treemap)
        * > , indicating the unified setting of the series.
        * >
        * > + It could appear in each array element of
        * > [series-treemap.levels](https://echarts.apache.org/en/option.html#series-treemap.levels)
        * > , indicating the unified setting of each level of the tree.
        * >
        * > + It could appear in each node of
        * > [series-treemap.data](https://echarts.apache.org/en/option.html#series-treemap.data)
        * > , indicating the particular setting of each node.
        * >
        *
        *
        * @see https://echarts.apache.org/en/option.html#series-treemap.data.upperLabel
        */
      var upperLabel: js.UndefOr[TextShadowColor] = js.native
      
      /**
        * The value of this node, indicating the area size.
        *
        * It could also be an array, such as \[2323, 43, 55\], in which
        * the first item of array indicates the area size.
        *
        * The other items of the array can be used for extra visual
        * mapping. See details in series-treemp.levels.
        *
        *
        * @see https://echarts.apache.org/en/option.html#series-treemap.data.value
        */
      var value: js.UndefOr[js.Array[_] | Double] = js.native
      
      /**
        * A node will not be shown when its area size is smaller than
        * this value (unit: px square).
        *
        * In this way, tiny nodes will be hidden, otherwise they will
        * huddle together.
        * When user zoom the treemap, the area size will increase and
        * the rectangle will be shown if the area size is larger than
        * this threshold.
        *
        * About visual encoding, see details in
        * [series-treemap.levels](https://echarts.apache.org/en/option.html#series-treemap.levels)
        * .
        *
        * > Tps: In treemap, `visibleMin` attribute could appear in
        * more than one places:
        * >
        * > + It could appear in
        * > [sereis-treemap](https://echarts.apache.org/en/option.html#series-treemap)
        * > , indicating the unified setting of the series.
        * >
        * > + It could appear in each array element of
        * > [series-treemap.levels](https://echarts.apache.org/en/option.html#series-treemap.levels)
        * > , indicating the unified setting of each level of the tree.
        * >
        * > + It could appear in each node of
        * > [series-treemap.data](https://echarts.apache.org/en/option.html#series-treemap.data)
        * > , indicating the particular setting of each node.
        * >
        *
        *
        * @default
        * 10
        * @see https://echarts.apache.org/en/option.html#series-treemap.data.visibleMin
        */
      var visibleMin: js.UndefOr[Double] = js.native
      
      /**
        * `treemap` is able to map any dimensions of data to visual.
        *
        * The value of
        * [series-treemap.data](https://echarts.apache.org/en/option.html#series-treemap.data)
        * can be an array.
        * And each item of the array represents a "dimension".
        * `visualDimension` specifies the dimension on which visual
        * mapping will be performed.
        *
        * About visual encoding, see details in
        * [series-treemap.levels](https://echarts.apache.org/en/option.html#series-treemap.levels)
        * .
        *
        * > Tps: In treemap, `visualDimension` attribute could appear
        * in more than one places:
        * >
        * > + It could appear in
        * > [sereis-treemap](https://echarts.apache.org/en/option.html#series-treemap)
        * > , indicating the unified setting of the series.
        * >
        * > + It could appear in each array element of
        * > [series-treemap.levels](https://echarts.apache.org/en/option.html#series-treemap.levels)
        * > , indicating the unified setting of each level of the tree.
        * >
        * > + It could appear in each node of
        * > [series-treemap.data](https://echarts.apache.org/en/option.html#series-treemap.data)
        * > , indicating the particular setting of each node.
        * >
        *
        *
        * @see https://echarts.apache.org/en/option.html#series-treemap.data.visualDimension
        */
      var visualDimension: js.UndefOr[Double] = js.native
      
      /**
        * The maximal value of current level.
        * Auto-statistics by default.
        *
        * When
        * [colorMappingBy](https://echarts.apache.org/en/option.html#series-treemap.levels.colorMappingBy)
        * is set to `'value'`, you are able to specify extent manually
        * for visual mapping by specifying `visualMin` or `visualMax`.
        *
        *
        * @see https://echarts.apache.org/en/option.html#series-treemap.data.visualMax
        */
      var visualMax: js.UndefOr[Double] = js.native
      
      /**
        * The minimal value of current level.
        * Auto-statistics by default.
        *
        * When
        * [colorMappingBy](https://echarts.apache.org/en/option.html#series-treemap.levels.colorMappingBy)
        * is set to `'value'`, you are able to specify extent manually
        * for visual mapping by specifying `visualMin` or `visualMax`.
        *
        *
        * @see https://echarts.apache.org/en/option.html#series-treemap.data.visualMin
        */
      var visualMin: js.UndefOr[Double] = js.native
    }
    object DataObject {
      
      @scala.inline
      def apply(): typingsSlinky.echarts.echarts.EChartOption.SeriesTreemap.DataObject = {
        val __obj = js.Dynamic.literal()
        __obj.asInstanceOf[typingsSlinky.echarts.echarts.EChartOption.SeriesTreemap.DataObject]
      }
      
      @scala.inline
      implicit class DataObjectMutableBuilder[Self <: typingsSlinky.echarts.echarts.EChartOption.SeriesTreemap.DataObject] (val x: Self) extends AnyVal {
        
        @scala.inline
        def setChildren(value: js.Array[typingsSlinky.echarts.echarts.EChartOption.SeriesTreemap.DataObject]): Self = StObject.set(x, "children", value.asInstanceOf[js.Any])
        
        @scala.inline
        def setChildrenUndefined: Self = StObject.set(x, "children", js.undefined)
        
        @scala.inline
        def setChildrenVarargs(value: typingsSlinky.echarts.echarts.EChartOption.SeriesTreemap.DataObject*): Self = StObject.set(x, "children", js.Array(value :_*))
        
        @scala.inline
        def setChildrenVisibleMin(value: Double): Self = StObject.set(x, "childrenVisibleMin", value.asInstanceOf[js.Any])
        
        @scala.inline
        def setChildrenVisibleMinUndefined: Self = StObject.set(x, "childrenVisibleMin", js.undefined)
        
        @scala.inline
        def setColor(value: js.Array[_]): Self = StObject.set(x, "color", value.asInstanceOf[js.Any])
        
        @scala.inline
        def setColorAlpha(value: js.Array[_]): Self = StObject.set(x, "colorAlpha", value.asInstanceOf[js.Any])
        
        @scala.inline
        def setColorAlphaUndefined: Self = StObject.set(x, "colorAlpha", js.undefined)
        
        @scala.inline
        def setColorAlphaVarargs(value: js.Any*): Self = StObject.set(x, "colorAlpha", js.Array(value :_*))
        
        @scala.inline
        def setColorMappingBy(value: String): Self = StObject.set(x, "colorMappingBy", value.asInstanceOf[js.Any])
        
        @scala.inline
        def setColorMappingByUndefined: Self = StObject.set(x, "colorMappingBy", js.undefined)
        
        @scala.inline
        def setColorSaturation(value: Double): Self = StObject.set(x, "colorSaturation", value.asInstanceOf[js.Any])
        
        @scala.inline
        def setColorSaturationUndefined: Self = StObject.set(x, "colorSaturation", js.undefined)
        
        @scala.inline
        def setColorUndefined: Self = StObject.set(x, "color", js.undefined)
        
        @scala.inline
        def setColorVarargs(value: js.Any*): Self = StObject.set(x, "color", js.Array(value :_*))
        
        @scala.inline
        def setEmphasis(value: UpperLabel): Self = StObject.set(x, "emphasis", value.asInstanceOf[js.Any])
        
        @scala.inline
        def setEmphasisUndefined: Self = StObject.set(x, "emphasis", js.undefined)
        
        @scala.inline
        def setId(value: String): Self = StObject.set(x, "id", value.asInstanceOf[js.Any])
        
        @scala.inline
        def setIdUndefined: Self = StObject.set(x, "id", js.undefined)
        
        @scala.inline
        def setItemStyle(value: BorderColorSaturation): Self = StObject.set(x, "itemStyle", value.asInstanceOf[js.Any])
        
        @scala.inline
        def setItemStyleUndefined: Self = StObject.set(x, "itemStyle", js.undefined)
        
        @scala.inline
        def setLabel(value: Ellipsis): Self = StObject.set(x, "label", value.asInstanceOf[js.Any])
        
        @scala.inline
        def setLabelUndefined: Self = StObject.set(x, "label", js.undefined)
        
        @scala.inline
        def setName(value: String): Self = StObject.set(x, "name", value.asInstanceOf[js.Any])
        
        @scala.inline
        def setNameUndefined: Self = StObject.set(x, "name", js.undefined)
        
        @scala.inline
        def setUpperLabel(value: TextShadowColor): Self = StObject.set(x, "upperLabel", value.asInstanceOf[js.Any])
        
        @scala.inline
        def setUpperLabelUndefined: Self = StObject.set(x, "upperLabel", js.undefined)
        
        @scala.inline
        def setValue(value: js.Array[_] | Double): Self = StObject.set(x, "value", value.asInstanceOf[js.Any])
        
        @scala.inline
        def setValueUndefined: Self = StObject.set(x, "value", js.undefined)
        
        @scala.inline
        def setValueVarargs(value: js.Any*): Self = StObject.set(x, "value", js.Array(value :_*))
        
        @scala.inline
        def setVisibleMin(value: Double): Self = StObject.set(x, "visibleMin", value.asInstanceOf[js.Any])
        
        @scala.inline
        def setVisibleMinUndefined: Self = StObject.set(x, "visibleMin", js.undefined)
        
        @scala.inline
        def setVisualDimension(value: Double): Self = StObject.set(x, "visualDimension", value.asInstanceOf[js.Any])
        
        @scala.inline
        def setVisualDimensionUndefined: Self = StObject.set(x, "visualDimension", js.undefined)
        
        @scala.inline
        def setVisualMax(value: Double): Self = StObject.set(x, "visualMax", value.asInstanceOf[js.Any])
        
        @scala.inline
        def setVisualMaxUndefined: Self = StObject.set(x, "visualMax", js.undefined)
        
        @scala.inline
        def setVisualMin(value: Double): Self = StObject.set(x, "visualMin", value.asInstanceOf[js.Any])
        
        @scala.inline
        def setVisualMinUndefined: Self = StObject.set(x, "visualMin", js.undefined)
      }
    }
    
    @scala.inline
    implicit class SeriesTreemapMutableBuilder[Self <: SeriesTreemap] (val x: Self) extends AnyVal {
      
      @scala.inline
      def setAnimationDelay(value: js.Function | Double): Self = StObject.set(x, "animationDelay", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setAnimationDelayUndefined: Self = StObject.set(x, "animationDelay", js.undefined)
      
      @scala.inline
      def setAnimationDuration(value: js.Function | Double): Self = StObject.set(x, "animationDuration", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setAnimationDurationUndefined: Self = StObject.set(x, "animationDuration", js.undefined)
      
      @scala.inline
      def setAnimationEasing(value: String): Self = StObject.set(x, "animationEasing", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setAnimationEasingUndefined: Self = StObject.set(x, "animationEasing", js.undefined)
      
      @scala.inline
      def setBottom(value: Double | String): Self = StObject.set(x, "bottom", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setBottomUndefined: Self = StObject.set(x, "bottom", js.undefined)
      
      @scala.inline
      def setBreadcrumb(value: Bottom): Self = StObject.set(x, "breadcrumb", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setBreadcrumbUndefined: Self = StObject.set(x, "breadcrumb", js.undefined)
      
      @scala.inline
      def setChildrenVisibleMin(value: Double): Self = StObject.set(x, "childrenVisibleMin", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setChildrenVisibleMinUndefined: Self = StObject.set(x, "childrenVisibleMin", js.undefined)
      
      @scala.inline
      def setColorAlpha(value: js.Array[_]): Self = StObject.set(x, "colorAlpha", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setColorAlphaUndefined: Self = StObject.set(x, "colorAlpha", js.undefined)
      
      @scala.inline
      def setColorAlphaVarargs(value: js.Any*): Self = StObject.set(x, "colorAlpha", js.Array(value :_*))
      
      @scala.inline
      def setColorMappingBy(value: String): Self = StObject.set(x, "colorMappingBy", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setColorMappingByUndefined: Self = StObject.set(x, "colorMappingBy", js.undefined)
      
      @scala.inline
      def setColorSaturation(value: Double): Self = StObject.set(x, "colorSaturation", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setColorSaturationUndefined: Self = StObject.set(x, "colorSaturation", js.undefined)
      
      @scala.inline
      def setData(value: js.Array[typingsSlinky.echarts.echarts.EChartOption.SeriesTreemap.DataObject]): Self = StObject.set(x, "data", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setDataUndefined: Self = StObject.set(x, "data", js.undefined)
      
      @scala.inline
      def setDataVarargs(value: typingsSlinky.echarts.echarts.EChartOption.SeriesTreemap.DataObject*): Self = StObject.set(x, "data", js.Array(value :_*))
      
      @scala.inline
      def setDrillDownIcon(value: String): Self = StObject.set(x, "drillDownIcon", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setDrillDownIconUndefined: Self = StObject.set(x, "drillDownIcon", js.undefined)
      
      @scala.inline
      def setEmphasis(value: UpperLabel): Self = StObject.set(x, "emphasis", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setEmphasisUndefined: Self = StObject.set(x, "emphasis", js.undefined)
      
      @scala.inline
      def setHeight(value: Double | String): Self = StObject.set(x, "height", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setHeightUndefined: Self = StObject.set(x, "height", js.undefined)
      
      @scala.inline
      def setId(value: String): Self = StObject.set(x, "id", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setIdUndefined: Self = StObject.set(x, "id", js.undefined)
      
      @scala.inline
      def setItemStyle(value: BorderColorSaturation): Self = StObject.set(x, "itemStyle", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setItemStyleUndefined: Self = StObject.set(x, "itemStyle", js.undefined)
      
      @scala.inline
      def setLabel(value: Ellipsis): Self = StObject.set(x, "label", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setLabelUndefined: Self = StObject.set(x, "label", js.undefined)
      
      @scala.inline
      def setLeafDepth(value: Double): Self = StObject.set(x, "leafDepth", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setLeafDepthUndefined: Self = StObject.set(x, "leafDepth", js.undefined)
      
      @scala.inline
      def setLeft(value: Double | String): Self = StObject.set(x, "left", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setLeftUndefined: Self = StObject.set(x, "left", js.undefined)
      
      @scala.inline
      def setLevels(value: ChildrenVisibleMin): Self = StObject.set(x, "levels", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setLevelsUndefined: Self = StObject.set(x, "levels", js.undefined)
      
      @scala.inline
      def setName(value: String): Self = StObject.set(x, "name", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setNameUndefined: Self = StObject.set(x, "name", js.undefined)
      
      @scala.inline
      def setNodeClick(value: Boolean | String): Self = StObject.set(x, "nodeClick", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setNodeClickUndefined: Self = StObject.set(x, "nodeClick", js.undefined)
      
      @scala.inline
      def setRight(value: Double | String): Self = StObject.set(x, "right", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setRightUndefined: Self = StObject.set(x, "right", js.undefined)
      
      @scala.inline
      def setRoam(value: Boolean | String): Self = StObject.set(x, "roam", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setRoamUndefined: Self = StObject.set(x, "roam", js.undefined)
      
      @scala.inline
      def setSilent(value: Children): Self = StObject.set(x, "silent", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setSilentUndefined: Self = StObject.set(x, "silent", js.undefined)
      
      @scala.inline
      def setSquareRatio(value: Double): Self = StObject.set(x, "squareRatio", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setSquareRatioUndefined: Self = StObject.set(x, "squareRatio", js.undefined)
      
      @scala.inline
      def setTooltip(value: BaseTooltip): Self = StObject.set(x, "tooltip", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setTooltipUndefined: Self = StObject.set(x, "tooltip", js.undefined)
      
      @scala.inline
      def setTop(value: Double | String): Self = StObject.set(x, "top", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setTopUndefined: Self = StObject.set(x, "top", js.undefined)
      
      @scala.inline
      def setType(value: String): Self = StObject.set(x, "type", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setTypeUndefined: Self = StObject.set(x, "type", js.undefined)
      
      @scala.inline
      def setUpperLabel(value: TextShadowColor): Self = StObject.set(x, "upperLabel", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setUpperLabelUndefined: Self = StObject.set(x, "upperLabel", js.undefined)
      
      @scala.inline
      def setVisibleMin(value: Double): Self = StObject.set(x, "visibleMin", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setVisibleMinUndefined: Self = StObject.set(x, "visibleMin", js.undefined)
      
      @scala.inline
      def setVisualDimension(value: Double): Self = StObject.set(x, "visualDimension", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setVisualDimensionUndefined: Self = StObject.set(x, "visualDimension", js.undefined)
      
      @scala.inline
      def setVisualMax(value: Double): Self = StObject.set(x, "visualMax", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setVisualMaxUndefined: Self = StObject.set(x, "visualMax", js.undefined)
      
      @scala.inline
      def setVisualMin(value: Double): Self = StObject.set(x, "visualMin", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setVisualMinUndefined: Self = StObject.set(x, "visualMin", js.undefined)
      
      @scala.inline
      def setWidth(value: Double | String): Self = StObject.set(x, "width", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setWidthUndefined: Self = StObject.set(x, "width", js.undefined)
      
      @scala.inline
      def setZ(value: Double): Self = StObject.set(x, "z", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setZUndefined: Self = StObject.set(x, "z", js.undefined)
      
      @scala.inline
      def setZlevel(value: Double): Self = StObject.set(x, "zlevel", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setZlevelUndefined: Self = StObject.set(x, "zlevel", js.undefined)
      
      @scala.inline
      def setZoomToNodeRatio(value: Double): Self = StObject.set(x, "zoomToNodeRatio", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setZoomToNodeRatioUndefined: Self = StObject.set(x, "zoomToNodeRatio", js.undefined)
    }
  }
  
  /**
    * An axis with a single dimension. It can be used to display data in one dimension
    *
    * @see https://echarts.apache.org/en/option.html#xAxis
    */
  @js.native
  trait SingleAxis extends CartesianAxis {
    
    /**
      * Distance between grid component and the bottom side of the container.
      * bottom value can be instant pixel value like 20;
      * it can also be percentage value relative to container width like '20%'.
      *
      * @default '5%'
      */
    var bottom: js.UndefOr[String | Double] = js.native
    
    /**
      * Height of grid component. Adaptive by default.
      *
      * @default 'auto'
      */
    var height: js.UndefOr[String | Double] = js.native
    
    /**
      * Distance between grid component and the left side of the container.
      * left value can be instant pixel value like 20;
      * it can also be percentage value relative to container width like '20%';
      * and it can also be 'left', 'center', or 'right'.
      * If the left value is set to be 'left', 'center', or 'right',
      * then the component will be aligned automatically based on position.
      *
      * @default '5%'
      */
    var left: js.UndefOr[String | Double] = js.native
    
    /**
      * Orientation of the axis. By default, it's 'horizontal'.
      * You can set it to be 'vertical' to make a vertical axis.
      *
      * @default 'horizontal'
      */
    var orient: js.UndefOr[horizontal | vertical] = js.native
    
    /**
      * Distance between grid component and the right side of the container.
      * right value can be instant pixel value like 20;
      * it can also be percentage value relative to container width like '20%'.
      *
      * @default '5%'
      */
    var right: js.UndefOr[String | Double] = js.native
    
    /**
      * Distance between grid component and the top side of the container.
      * top value can be instant pixel value like 20;
      * it can also be percentage value relative to container width like '20%';
      * and it can also be 'top', 'middle', or 'bottom'.
      * If the left value is set to be 'top', 'middle', or 'bottom',
      * then the component will be aligned automatically based on position.
      *
      * @default '5%'
      */
    var top: js.UndefOr[String | Double] = js.native
    
    /**
      * Options:
      * + 'value' - Numerical axis, suitable for continuous data.
      * + 'category' Category axis, suitable for discrete category data.
      *   Data should only be set via data for this type.
      * + 'time' Time axis, suitable for continuous time series data.
      *   As compared to value axis, it has a better formatting for time
      *   and a different tick calculation method.
      *   For example, it decides to use month, week, day or hour for tick
      *   based on the range of span.
      * + 'log' Log axis, suitable for log data.
      *
      * @default 'value'
      * @see https://echarts.apache.org/en/option.html#singleAxis.type
      */
    var `type`: js.UndefOr[typingsSlinky.echarts.echarts.EChartOption.BasicComponents.CartesianAxis.Type] = js.native
    
    /**
      * Width of grid component. Adaptive by default.
      *
      * @default 'auto'
      */
    var width: js.UndefOr[String | Double] = js.native
  }
  object SingleAxis {
    
    @scala.inline
    def apply(): SingleAxis = {
      val __obj = js.Dynamic.literal()
      __obj.asInstanceOf[SingleAxis]
    }
    
    @scala.inline
    implicit class SingleAxisMutableBuilder[Self <: SingleAxis] (val x: Self) extends AnyVal {
      
      @scala.inline
      def setBottom(value: String | Double): Self = StObject.set(x, "bottom", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setBottomUndefined: Self = StObject.set(x, "bottom", js.undefined)
      
      @scala.inline
      def setHeight(value: String | Double): Self = StObject.set(x, "height", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setHeightUndefined: Self = StObject.set(x, "height", js.undefined)
      
      @scala.inline
      def setLeft(value: String | Double): Self = StObject.set(x, "left", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setLeftUndefined: Self = StObject.set(x, "left", js.undefined)
      
      @scala.inline
      def setOrient(value: horizontal | vertical): Self = StObject.set(x, "orient", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setOrientUndefined: Self = StObject.set(x, "orient", js.undefined)
      
      @scala.inline
      def setRight(value: String | Double): Self = StObject.set(x, "right", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setRightUndefined: Self = StObject.set(x, "right", js.undefined)
      
      @scala.inline
      def setTop(value: String | Double): Self = StObject.set(x, "top", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setTopUndefined: Self = StObject.set(x, "top", js.undefined)
      
      @scala.inline
      def setType(value: typingsSlinky.echarts.echarts.EChartOption.BasicComponents.CartesianAxis.Type): Self = StObject.set(x, "type", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setTypeUndefined: Self = StObject.set(x, "type", js.undefined)
      
      @scala.inline
      def setWidth(value: String | Double): Self = StObject.set(x, "width", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setWidthUndefined: Self = StObject.set(x, "width", js.undefined)
    }
  }
  
  @js.native
  trait TextStyle extends BaseTextStyle {
    
    var align: js.UndefOr[String] = js.native
    
    var backgroundColor: js.UndefOr[String | js.Object] = js.native
    
    var borderColor: js.UndefOr[String] = js.native
    
    var borderRadius: js.UndefOr[Double] = js.native
    
    var borderWidth: js.UndefOr[Double] = js.native
    
    var padding: js.UndefOr[Double | js.Array[Double]] = js.native
    
    var shadowBlur: js.UndefOr[Double] = js.native
    
    var shadowColor: js.UndefOr[String] = js.native
    
    var shadowOffsetX: js.UndefOr[Double] = js.native
    
    var shadowOffsetY: js.UndefOr[Double] = js.native
    
    var verticalAlign: js.UndefOr[String] = js.native
  }
  object TextStyle {
    
    @scala.inline
    def apply(): TextStyle = {
      val __obj = js.Dynamic.literal()
      __obj.asInstanceOf[TextStyle]
    }
    
    @scala.inline
    implicit class TextStyleMutableBuilder[Self <: TextStyle] (val x: Self) extends AnyVal {
      
      @scala.inline
      def setAlign(value: String): Self = StObject.set(x, "align", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setAlignUndefined: Self = StObject.set(x, "align", js.undefined)
      
      @scala.inline
      def setBackgroundColor(value: String | js.Object): Self = StObject.set(x, "backgroundColor", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setBackgroundColorUndefined: Self = StObject.set(x, "backgroundColor", js.undefined)
      
      @scala.inline
      def setBorderColor(value: String): Self = StObject.set(x, "borderColor", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setBorderColorUndefined: Self = StObject.set(x, "borderColor", js.undefined)
      
      @scala.inline
      def setBorderRadius(value: Double): Self = StObject.set(x, "borderRadius", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setBorderRadiusUndefined: Self = StObject.set(x, "borderRadius", js.undefined)
      
      @scala.inline
      def setBorderWidth(value: Double): Self = StObject.set(x, "borderWidth", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setBorderWidthUndefined: Self = StObject.set(x, "borderWidth", js.undefined)
      
      @scala.inline
      def setPadding(value: Double | js.Array[Double]): Self = StObject.set(x, "padding", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setPaddingUndefined: Self = StObject.set(x, "padding", js.undefined)
      
      @scala.inline
      def setPaddingVarargs(value: Double*): Self = StObject.set(x, "padding", js.Array(value :_*))
      
      @scala.inline
      def setShadowBlur(value: Double): Self = StObject.set(x, "shadowBlur", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setShadowBlurUndefined: Self = StObject.set(x, "shadowBlur", js.undefined)
      
      @scala.inline
      def setShadowColor(value: String): Self = StObject.set(x, "shadowColor", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setShadowColorUndefined: Self = StObject.set(x, "shadowColor", js.undefined)
      
      @scala.inline
      def setShadowOffsetX(value: Double): Self = StObject.set(x, "shadowOffsetX", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setShadowOffsetXUndefined: Self = StObject.set(x, "shadowOffsetX", js.undefined)
      
      @scala.inline
      def setShadowOffsetY(value: Double): Self = StObject.set(x, "shadowOffsetY", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setShadowOffsetYUndefined: Self = StObject.set(x, "shadowOffsetY", js.undefined)
      
      @scala.inline
      def setVerticalAlign(value: String): Self = StObject.set(x, "verticalAlign", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setVerticalAlignUndefined: Self = StObject.set(x, "verticalAlign", js.undefined)
    }
  }
  
  @js.native
  trait TextStyleWithRich extends TextStyle {
    
    var rich: js.UndefOr[RichStyle] = js.native
  }
  object TextStyleWithRich {
    
    @scala.inline
    def apply(): TextStyleWithRich = {
      val __obj = js.Dynamic.literal()
      __obj.asInstanceOf[TextStyleWithRich]
    }
    
    @scala.inline
    implicit class TextStyleWithRichMutableBuilder[Self <: TextStyleWithRich] (val x: Self) extends AnyVal {
      
      @scala.inline
      def setRich(value: RichStyle): Self = StObject.set(x, "rich", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setRichUndefined: Self = StObject.set(x, "rich", js.undefined)
    }
  }
  
  /**
    * Fill with texture
    */
  @js.native
  trait Texture extends _Color {
    
    /**
      * HTMLImageElement, and HTMLCanvasElement are supported, while string path is not supported
      */
    var image: HTMLImageElement | HTMLCanvasElement = js.native
    
    /**
      * whether to repeat texture, whose value can be repeat-x, repeat-y, or no-repeat
      */
    var repeat: js.UndefOr[
        typingsSlinky.echarts.echartsStrings.repeat | `repeat-x` | `repeat-y` | `no-repeat`
      ] = js.native
  }
  object Texture {
    
    @scala.inline
    def apply(image: HTMLImageElement | HTMLCanvasElement): Texture = {
      val __obj = js.Dynamic.literal(image = image.asInstanceOf[js.Any])
      __obj.asInstanceOf[Texture]
    }
    
    @scala.inline
    implicit class TextureMutableBuilder[Self <: Texture] (val x: Self) extends AnyVal {
      
      @scala.inline
      def setImage(value: HTMLImageElement | HTMLCanvasElement): Self = StObject.set(x, "image", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setImageHTMLCanvasElement(value: HTMLCanvasElement): Self = StObject.set(x, "image", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setImageHTMLImageElement(value: HTMLImageElement): Self = StObject.set(x, "image", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setRepeat(value: repeat | `repeat-x` | `repeat-y` | `no-repeat`): Self = StObject.set(x, "repeat", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setRepeatUndefined: Self = StObject.set(x, "repeat", js.undefined)
    }
  }
  
  @js.native
  trait Tooltip extends BaseTooltip {
    
    /**
      * Whether to show tooltip content all the time.
      * By default, it will be hidden after `tooltip.hideDelay`.
      * It can be set to be true to preserve displaying.
      * This attribute is newly added to ECharts 3.0.
      *
      * @default false
      */
    var alwaysShowContent: js.UndefOr[Boolean] = js.native
    
    /**
      * `axisPointer` is a tool for displaying reference line
      * and axis value under mouse pointer.
      *
      * Configuration item for axis indicator.
      * `tooltip.axisPointer` is like syntactic sugar
      * of `axisPointer` settings on axes
      * (for example, `xAxis.axisPointer` or `angleAxis.axisPointer`).
      * More detailed features can be configured
      * on `someAxis.axisPointer`.
      * But in common cases, using `tooltip.axisPinter`
      * is more convenient.
      * Notice: configurations of `tooltip.axisPointer` has
      * lower priority than that of `someAxis.axisPointer`.
      *
      * @see https://echarts.apache.org/en/option.html#tooltip.axisPointer
      */
    var axisPointer: js.UndefOr[typingsSlinky.echarts.echarts.EChartOption.Tooltip.AxisPointer] = js.native
    
    /**
      * Whether confine tooltip content in the view rect
      * of chart instance.
      * Useful when tooltip is cut because of `'overflow: hidden'`
      * set on outer dom of chart instance, or because of narrow
      * screen on mobile.
      *
      * @default false
      */
    var confine: js.UndefOr[Boolean] = js.native
    
    /**
      * Whether mouse is allowed to enter the floating layer
      * of tooltip, whose default value is false.
      * If you need to interact in the tooltip like with links
      * or buttons, it can be set as `true`.
      *
      * @default true
      */
    var enterable: js.UndefOr[Boolean] = js.native
    
    /**
      * Delay time for hiding tooltip, in ms.
      * It will be invalid when `alwaysShowContent` is `true`.
      *
      * @default 100
      */
    var hideDelay: js.UndefOr[Double] = js.native
    
    /**
      * Render mode for tooltip.
      * By default, it is set to be `'html'` so that extra DOM element
      * is used for tooltip.
      * It can also set to be `'richText'` so that the tooltip
      * will be rendered inside Canvas (SVG rich text is
      * not implemented yet).
      * This is very useful for environments that don't have DOM,
      * such as Wechat applications.
      *
      * @default 'html'
      */
    var renderMode: js.UndefOr[html] = js.native
    
    /**
      * Whether to show the tooltip component,
      * including tooltip floating layer and `axisPointer`.
      *
      * @default true
      */
    var show: js.UndefOr[Boolean] = js.native
    
    /**
      * Whether to show the tooltip floating layer,
      * whose default value is true.
      * It should be configurated to be `false`,
      * if you only need tooltip to trigger the event
      * or show the axisPointer without content.
      *
      * @default true
      */
    var showContent: js.UndefOr[Boolean] = js.native
    
    /**
      * Delay time for showing tooltip, in ms.
      * No delay by default, and it is not recommended to set.
      * Only valid when `triggerOn` is set to be `'mousemove'`.
      *
      * @default 0
      */
    var showDelay: js.UndefOr[Double] = js.native
    
    /**
      * The transition duration of tooltip's animation, in seconds.
      * When it is set to be 0, it would move closely with the mouse.
      *
      * @default 0.4
      */
    var transitionDuration: js.UndefOr[Double] = js.native
    
    /**
      * Type of triggering.
      * Options:
      * + `'item'` - Triggered by data item, which is mainly used
      *   for charts that don't have a category axis like scatter
      *   charts or pie charts.
      * + `'axis'` - Triggered by axes, which is mainly used
      *   for charts that have category axes, like bar charts
      *   or line charts.
      *   ECharts 2.x only supports axis trigger for category axis.
      *   In ECharts 3, it is supported for all types of axes in `grid`
      *   or `polar`. Also, you may assign axis with `axisPointer.axis`.
      * + `'none'` - Trigger nothing.
      *
      * @default 'item'
      */
    var trigger: js.UndefOr[item | axis | none] = js.native
    
    /**
      * Conditions to trigger tooltip.
      * Options:
      * + `'mousemove'` - Trigger when mouse moves.
      * + `'click'` - Trigger when mouse clicks.
      * + `'mousemove|click'` - Trigger when mouse clicks and moves.
      *   `'none'` - Do not triggered by `'mousemove'` and `'click'`.
      *   Tooltip can be triggered and hidden manually by calling
      *   `action.tooltip.showTip` and `action.tooltip.hideTip`.
      *   It can also be triggered by `axisPointer.handle` in this case.
      *
      * This attribute is new to ECharts 3.0.
      *
      * @default 'mousemove|click'
      */
    var triggerOn: js.UndefOr[mousemove | click | mousemoveVerticallineclick | none] = js.native
  }
  object Tooltip {
    
    @scala.inline
    def apply(): Tooltip = {
      val __obj = js.Dynamic.literal()
      __obj.asInstanceOf[Tooltip]
    }
    
    @js.native
    trait AxisPointer extends StObject {
      
      var animation: js.UndefOr[Boolean] = js.native
      
      var animationDelay: js.UndefOr[Double | js.Function] = js.native
      
      var animationDelayUpdate: js.UndefOr[Double | js.Function] = js.native
      
      var animationDuration: js.UndefOr[Double] = js.native
      
      var animationDurationUpdate: js.UndefOr[Double | js.Function] = js.native
      
      var animationEasing: js.UndefOr[String] = js.native
      
      var animationEasingUpdate: js.UndefOr[String] = js.native
      
      var animationThreshold: js.UndefOr[Double] = js.native
      
      var axis: js.UndefOr[auto | x | y | radius | angle] = js.native
      
      // It is valid when axisPointer.type is 'cross'.
      var crossStyle: js.UndefOr[LineStyle] = js.native
      
      var label: js.UndefOr[PointerLabel] = js.native
      
      var lineStyle: js.UndefOr[LineStyle] = js.native
      
      var shadowStyle: js.UndefOr[ColorOpacity] = js.native
      
      var show: js.UndefOr[Boolean] = js.native
      
      var snap: js.UndefOr[Boolean] = js.native
      
      var `type`: js.UndefOr[line | shadow | none | cross] = js.native
      
      var z: js.UndefOr[Double] = js.native
    }
    object AxisPointer {
      
      @scala.inline
      def apply(): typingsSlinky.echarts.echarts.EChartOption.Tooltip.AxisPointer = {
        val __obj = js.Dynamic.literal()
        __obj.asInstanceOf[typingsSlinky.echarts.echarts.EChartOption.Tooltip.AxisPointer]
      }
      
      @scala.inline
      implicit class AxisPointerMutableBuilder[Self <: typingsSlinky.echarts.echarts.EChartOption.Tooltip.AxisPointer] (val x: Self) extends AnyVal {
        
        @scala.inline
        def setAnimation(value: Boolean): Self = StObject.set(x, "animation", value.asInstanceOf[js.Any])
        
        @scala.inline
        def setAnimationDelay(value: Double | js.Function): Self = StObject.set(x, "animationDelay", value.asInstanceOf[js.Any])
        
        @scala.inline
        def setAnimationDelayUndefined: Self = StObject.set(x, "animationDelay", js.undefined)
        
        @scala.inline
        def setAnimationDelayUpdate(value: Double | js.Function): Self = StObject.set(x, "animationDelayUpdate", value.asInstanceOf[js.Any])
        
        @scala.inline
        def setAnimationDelayUpdateUndefined: Self = StObject.set(x, "animationDelayUpdate", js.undefined)
        
        @scala.inline
        def setAnimationDuration(value: Double): Self = StObject.set(x, "animationDuration", value.asInstanceOf[js.Any])
        
        @scala.inline
        def setAnimationDurationUndefined: Self = StObject.set(x, "animationDuration", js.undefined)
        
        @scala.inline
        def setAnimationDurationUpdate(value: Double | js.Function): Self = StObject.set(x, "animationDurationUpdate", value.asInstanceOf[js.Any])
        
        @scala.inline
        def setAnimationDurationUpdateUndefined: Self = StObject.set(x, "animationDurationUpdate", js.undefined)
        
        @scala.inline
        def setAnimationEasing(value: String): Self = StObject.set(x, "animationEasing", value.asInstanceOf[js.Any])
        
        @scala.inline
        def setAnimationEasingUndefined: Self = StObject.set(x, "animationEasing", js.undefined)
        
        @scala.inline
        def setAnimationEasingUpdate(value: String): Self = StObject.set(x, "animationEasingUpdate", value.asInstanceOf[js.Any])
        
        @scala.inline
        def setAnimationEasingUpdateUndefined: Self = StObject.set(x, "animationEasingUpdate", js.undefined)
        
        @scala.inline
        def setAnimationThreshold(value: Double): Self = StObject.set(x, "animationThreshold", value.asInstanceOf[js.Any])
        
        @scala.inline
        def setAnimationThresholdUndefined: Self = StObject.set(x, "animationThreshold", js.undefined)
        
        @scala.inline
        def setAnimationUndefined: Self = StObject.set(x, "animation", js.undefined)
        
        @scala.inline
        def setAxis(value: auto | typingsSlinky.echarts.echartsStrings.x | y | radius | angle): Self = StObject.set(x, "axis", value.asInstanceOf[js.Any])
        
        @scala.inline
        def setAxisUndefined: Self = StObject.set(x, "axis", js.undefined)
        
        @scala.inline
        def setCrossStyle(value: LineStyle): Self = StObject.set(x, "crossStyle", value.asInstanceOf[js.Any])
        
        @scala.inline
        def setCrossStyleUndefined: Self = StObject.set(x, "crossStyle", js.undefined)
        
        @scala.inline
        def setLabel(value: PointerLabel): Self = StObject.set(x, "label", value.asInstanceOf[js.Any])
        
        @scala.inline
        def setLabelUndefined: Self = StObject.set(x, "label", js.undefined)
        
        @scala.inline
        def setLineStyle(value: LineStyle): Self = StObject.set(x, "lineStyle", value.asInstanceOf[js.Any])
        
        @scala.inline
        def setLineStyleUndefined: Self = StObject.set(x, "lineStyle", js.undefined)
        
        @scala.inline
        def setShadowStyle(value: ColorOpacity): Self = StObject.set(x, "shadowStyle", value.asInstanceOf[js.Any])
        
        @scala.inline
        def setShadowStyleUndefined: Self = StObject.set(x, "shadowStyle", js.undefined)
        
        @scala.inline
        def setShow(value: Boolean): Self = StObject.set(x, "show", value.asInstanceOf[js.Any])
        
        @scala.inline
        def setShowUndefined: Self = StObject.set(x, "show", js.undefined)
        
        @scala.inline
        def setSnap(value: Boolean): Self = StObject.set(x, "snap", value.asInstanceOf[js.Any])
        
        @scala.inline
        def setSnapUndefined: Self = StObject.set(x, "snap", js.undefined)
        
        @scala.inline
        def setType(value: line | shadow | none | cross): Self = StObject.set(x, "type", value.asInstanceOf[js.Any])
        
        @scala.inline
        def setTypeUndefined: Self = StObject.set(x, "type", js.undefined)
        
        @scala.inline
        def setZ(value: Double): Self = StObject.set(x, "z", value.asInstanceOf[js.Any])
        
        @scala.inline
        def setZUndefined: Self = StObject.set(x, "z", js.undefined)
      }
    }
    
    @js.native
    trait Format extends StObject {
      
      // Value of axis
      var axisValue: js.UndefOr[Double | String] = js.native
      
      // Label of axis value
      var axisValueLabel: js.UndefOr[String] = js.native
      
      // Color of data
      var color: js.UndefOr[String] = js.native
      
      var componentType: js.UndefOr[series] = js.native
      
      // Original data as input
      var data: js.UndefOr[js.Any] = js.native
      
      // Data index in input data array
      var dataIndex: js.UndefOr[Double] = js.native
      
      // data dimension index, for example 0 or 1 or 2 ...
      // Only work in `radar` series.
      var dimensionIndex: js.UndefOr[Double] = js.native
      
      // dimension names list
      var dimensionNames: js.UndefOr[js.Array[String]] = js.native
      
      // encoding info of coordinate system
      // Key: coord, like ('x' 'y' 'radius' 'angle')
      // value: Must be an array, not null/undefined. Contain dimension indices, like:
      // {
      //     x: [2] // values on dimension index 2 are mapped to x axis.
      //     y: [0] // values on dimension index 0 are mapped to y axis.
      // }
      var encode: js.UndefOr[js.Object] = js.native
      
      // item marker, string of HTMLElement
      var marker: js.UndefOr[String] = js.native
      
      // Data name, or category name
      var name: js.UndefOr[String] = js.native
      
      // the percentage of pie chart
      var percent: js.UndefOr[Double] = js.native
      
      // Series index in option.series
      var seriesIndex: js.UndefOr[Double] = js.native
      
      // Series name
      var seriesName: js.UndefOr[String] = js.native
      
      // Series type
      var seriesType: js.UndefOr[String] = js.native
      
      // Value of data
      var value: js.UndefOr[Double | js.Array[_]] = js.native
    }
    object Format {
      
      @scala.inline
      def apply(): Format = {
        val __obj = js.Dynamic.literal()
        __obj.asInstanceOf[Format]
      }
      
      @scala.inline
      implicit class FormatMutableBuilder[Self <: Format] (val x: Self) extends AnyVal {
        
        @scala.inline
        def setAxisValue(value: Double | String): Self = StObject.set(x, "axisValue", value.asInstanceOf[js.Any])
        
        @scala.inline
        def setAxisValueLabel(value: String): Self = StObject.set(x, "axisValueLabel", value.asInstanceOf[js.Any])
        
        @scala.inline
        def setAxisValueLabelUndefined: Self = StObject.set(x, "axisValueLabel", js.undefined)
        
        @scala.inline
        def setAxisValueUndefined: Self = StObject.set(x, "axisValue", js.undefined)
        
        @scala.inline
        def setColor(value: String): Self = StObject.set(x, "color", value.asInstanceOf[js.Any])
        
        @scala.inline
        def setColorUndefined: Self = StObject.set(x, "color", js.undefined)
        
        @scala.inline
        def setComponentType(value: series): Self = StObject.set(x, "componentType", value.asInstanceOf[js.Any])
        
        @scala.inline
        def setComponentTypeUndefined: Self = StObject.set(x, "componentType", js.undefined)
        
        @scala.inline
        def setData(value: js.Any): Self = StObject.set(x, "data", value.asInstanceOf[js.Any])
        
        @scala.inline
        def setDataIndex(value: Double): Self = StObject.set(x, "dataIndex", value.asInstanceOf[js.Any])
        
        @scala.inline
        def setDataIndexUndefined: Self = StObject.set(x, "dataIndex", js.undefined)
        
        @scala.inline
        def setDataUndefined: Self = StObject.set(x, "data", js.undefined)
        
        @scala.inline
        def setDimensionIndex(value: Double): Self = StObject.set(x, "dimensionIndex", value.asInstanceOf[js.Any])
        
        @scala.inline
        def setDimensionIndexUndefined: Self = StObject.set(x, "dimensionIndex", js.undefined)
        
        @scala.inline
        def setDimensionNames(value: js.Array[String]): Self = StObject.set(x, "dimensionNames", value.asInstanceOf[js.Any])
        
        @scala.inline
        def setDimensionNamesUndefined: Self = StObject.set(x, "dimensionNames", js.undefined)
        
        @scala.inline
        def setDimensionNamesVarargs(value: String*): Self = StObject.set(x, "dimensionNames", js.Array(value :_*))
        
        @scala.inline
        def setEncode(value: js.Object): Self = StObject.set(x, "encode", value.asInstanceOf[js.Any])
        
        @scala.inline
        def setEncodeUndefined: Self = StObject.set(x, "encode", js.undefined)
        
        @scala.inline
        def setMarker(value: String): Self = StObject.set(x, "marker", value.asInstanceOf[js.Any])
        
        @scala.inline
        def setMarkerUndefined: Self = StObject.set(x, "marker", js.undefined)
        
        @scala.inline
        def setName(value: String): Self = StObject.set(x, "name", value.asInstanceOf[js.Any])
        
        @scala.inline
        def setNameUndefined: Self = StObject.set(x, "name", js.undefined)
        
        @scala.inline
        def setPercent(value: Double): Self = StObject.set(x, "percent", value.asInstanceOf[js.Any])
        
        @scala.inline
        def setPercentUndefined: Self = StObject.set(x, "percent", js.undefined)
        
        @scala.inline
        def setSeriesIndex(value: Double): Self = StObject.set(x, "seriesIndex", value.asInstanceOf[js.Any])
        
        @scala.inline
        def setSeriesIndexUndefined: Self = StObject.set(x, "seriesIndex", js.undefined)
        
        @scala.inline
        def setSeriesName(value: String): Self = StObject.set(x, "seriesName", value.asInstanceOf[js.Any])
        
        @scala.inline
        def setSeriesNameUndefined: Self = StObject.set(x, "seriesName", js.undefined)
        
        @scala.inline
        def setSeriesType(value: String): Self = StObject.set(x, "seriesType", value.asInstanceOf[js.Any])
        
        @scala.inline
        def setSeriesTypeUndefined: Self = StObject.set(x, "seriesType", js.undefined)
        
        @scala.inline
        def setValue(value: Double | js.Array[_]): Self = StObject.set(x, "value", value.asInstanceOf[js.Any])
        
        @scala.inline
        def setValueUndefined: Self = StObject.set(x, "value", js.undefined)
        
        @scala.inline
        def setValueVarargs(value: js.Any*): Self = StObject.set(x, "value", js.Array(value :_*))
      }
    }
    
    /**
      * The first parameter params is the data that the formatter needs.
      * Its format is shown as {Format}
      * When trigger is `'axis'`, or when tooltip is triggered by
      * `axisPointer`, params is the data array of multiple series.
      * The content of each item of the array is Format type but, without
      * `percent` field.
      *
      * Note: Using array to present all the parameters in ECharts 2.x
      * is not supported anymore.
      * The second parameter ticket is the asynchronous callback flag
      * which should be used along with the third parameter callback
      * when it is used.
      * The third parameter callback is asynchronous callback.
      * When the content of tooltip is acquired asynchronously,
      * ticket and htm as introduced above can be used to update tooltip
      * with callback.
      *
      * @example
      * formatter: function (params, ticket, callback) {
      *     $.get('detail?name=' + params.name, function (content) {
      *         callback(ticket, toHTML(content));
      *     });
      *     return 'Loading';
      * }
      */
    type Formatter = js.Function3[
        /* params */ Format | js.Array[Format], 
        /* ticket */ String, 
        /* callback */ js.Function2[/* ticket */ String, /* html */ String, Unit], 
        String
      ]
    
    object Position {
      
      type Fn = js.Function5[
            /* point */ js.Array[Double | String], 
            /* params */ js.Object | js.Array[js.Object], 
            /* element */ HTMLElement, 
            /* rect */ js.Object, 
            /* size */ js.Object, 
            (js.Array[Double | String]) | Obj
          ]
      
      @js.native
      trait Obj extends _Type {
        
        var bottom: js.UndefOr[String | Double] = js.native
        
        var left: js.UndefOr[String | Double] = js.native
        
        var right: js.UndefOr[String | Double] = js.native
        
        var top: js.UndefOr[String | Double] = js.native
      }
      object Obj {
        
        @scala.inline
        def apply(): Obj = {
          val __obj = js.Dynamic.literal()
          __obj.asInstanceOf[Obj]
        }
        
        @scala.inline
        implicit class ObjMutableBuilder[Self <: Obj] (val x: Self) extends AnyVal {
          
          @scala.inline
          def setBottom(value: String | Double): Self = StObject.set(x, "bottom", value.asInstanceOf[js.Any])
          
          @scala.inline
          def setBottomUndefined: Self = StObject.set(x, "bottom", js.undefined)
          
          @scala.inline
          def setLeft(value: String | Double): Self = StObject.set(x, "left", value.asInstanceOf[js.Any])
          
          @scala.inline
          def setLeftUndefined: Self = StObject.set(x, "left", js.undefined)
          
          @scala.inline
          def setRight(value: String | Double): Self = StObject.set(x, "right", value.asInstanceOf[js.Any])
          
          @scala.inline
          def setRightUndefined: Self = StObject.set(x, "right", js.undefined)
          
          @scala.inline
          def setTop(value: String | Double): Self = StObject.set(x, "top", value.asInstanceOf[js.Any])
          
          @scala.inline
          def setTopUndefined: Self = StObject.set(x, "top", js.undefined)
        }
      }
      
      /* Rewritten from type alias, can be one of: 
        - typingsSlinky.echarts.echartsStrings.inside
        - typingsSlinky.echarts.echartsStrings.top
        - typingsSlinky.echarts.echartsStrings.left
        - typingsSlinky.echarts.echartsStrings.right
        - typingsSlinky.echarts.echartsStrings.bottom
      */
      trait Str extends _Type
      object Str {
        
        @scala.inline
        def bottom: typingsSlinky.echarts.echartsStrings.bottom = "bottom".asInstanceOf[typingsSlinky.echarts.echartsStrings.bottom]
        
        @scala.inline
        def inside: typingsSlinky.echarts.echartsStrings.inside = "inside".asInstanceOf[typingsSlinky.echarts.echartsStrings.inside]
        
        @scala.inline
        def left: typingsSlinky.echarts.echartsStrings.left = "left".asInstanceOf[typingsSlinky.echarts.echartsStrings.left]
        
        @scala.inline
        def right: typingsSlinky.echarts.echartsStrings.right = "right".asInstanceOf[typingsSlinky.echarts.echartsStrings.right]
        
        @scala.inline
        def top: typingsSlinky.echarts.echartsStrings.top = "top".asInstanceOf[typingsSlinky.echarts.echartsStrings.top]
      }
      
      /* Rewritten from type alias, can be one of: 
        - typingsSlinky.echarts.echarts.EChartOption.Tooltip.Position.Str
        - typingsSlinky.echarts.echarts.EChartOption.Tooltip.Position.Obj
        - js.Array[scala.Double | java.lang.String]
        - typingsSlinky.echarts.echarts.EChartOption.Tooltip.Position.Fn
      */
      type Type = _Type | (js.Array[Double | String]) | Fn
      
      trait _Type extends StObject
    }
    
    @scala.inline
    implicit class TooltipMutableBuilder[Self <: Tooltip] (val x: Self) extends AnyVal {
      
      @scala.inline
      def setAlwaysShowContent(value: Boolean): Self = StObject.set(x, "alwaysShowContent", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setAlwaysShowContentUndefined: Self = StObject.set(x, "alwaysShowContent", js.undefined)
      
      @scala.inline
      def setAxisPointer(value: typingsSlinky.echarts.echarts.EChartOption.Tooltip.AxisPointer): Self = StObject.set(x, "axisPointer", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setAxisPointerUndefined: Self = StObject.set(x, "axisPointer", js.undefined)
      
      @scala.inline
      def setConfine(value: Boolean): Self = StObject.set(x, "confine", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setConfineUndefined: Self = StObject.set(x, "confine", js.undefined)
      
      @scala.inline
      def setEnterable(value: Boolean): Self = StObject.set(x, "enterable", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setEnterableUndefined: Self = StObject.set(x, "enterable", js.undefined)
      
      @scala.inline
      def setHideDelay(value: Double): Self = StObject.set(x, "hideDelay", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setHideDelayUndefined: Self = StObject.set(x, "hideDelay", js.undefined)
      
      @scala.inline
      def setRenderMode(value: html): Self = StObject.set(x, "renderMode", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setRenderModeUndefined: Self = StObject.set(x, "renderMode", js.undefined)
      
      @scala.inline
      def setShow(value: Boolean): Self = StObject.set(x, "show", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setShowContent(value: Boolean): Self = StObject.set(x, "showContent", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setShowContentUndefined: Self = StObject.set(x, "showContent", js.undefined)
      
      @scala.inline
      def setShowDelay(value: Double): Self = StObject.set(x, "showDelay", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setShowDelayUndefined: Self = StObject.set(x, "showDelay", js.undefined)
      
      @scala.inline
      def setShowUndefined: Self = StObject.set(x, "show", js.undefined)
      
      @scala.inline
      def setTransitionDuration(value: Double): Self = StObject.set(x, "transitionDuration", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setTransitionDurationUndefined: Self = StObject.set(x, "transitionDuration", js.undefined)
      
      @scala.inline
      def setTrigger(value: item | axis | none): Self = StObject.set(x, "trigger", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setTriggerOn(value: mousemove | click | mousemoveVerticallineclick | none): Self = StObject.set(x, "triggerOn", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setTriggerOnUndefined: Self = StObject.set(x, "triggerOn", js.undefined)
      
      @scala.inline
      def setTriggerUndefined: Self = StObject.set(x, "trigger", js.undefined)
    }
  }
  
  /* Rewritten from type alias, can be one of: 
    - typingsSlinky.echarts.echarts.VisualMap.Continuous
    - typingsSlinky.echarts.echarts.VisualMap.Piecewise
  */
  trait VisualMap extends StObject
  object VisualMap {
    
    @scala.inline
    def Continuous(): typingsSlinky.echarts.echarts.VisualMap.Continuous = {
      val __obj = js.Dynamic.literal()
      __obj.asInstanceOf[typingsSlinky.echarts.echarts.VisualMap.Continuous]
    }
    
    @scala.inline
    def Piecewise(): typingsSlinky.echarts.echarts.VisualMap.Piecewise = {
      val __obj = js.Dynamic.literal()
      __obj.asInstanceOf[typingsSlinky.echarts.echarts.VisualMap.Piecewise]
    }
  }
  
  /**
    * The x axis in cartesian(rectangular) coordinate.
    * Usually a single grid component can place at most 2 x axis,
    * one on the bottom and another on the top.
    * offset can be used to avoid overlap when you need to put more
    * than two x axis.
    *
    * @see https://echarts.apache.org/en/option.html#xAxis
    */
  @js.native
  trait XAxis extends CartesianAxis {
    
    /**
      * The first x axis in grid defaults to be on the bottom of the grid,
      * and the second x axis is on the other side against the first x axis.
      *
      * @default ''
      */
    var position: js.UndefOr[top | bottom] = js.native
    
    /**
      * Options:
      * + 'value' - Numerical axis, suitable for continuous data.
      * + 'category' Category axis, suitable for discrete category data.
      *   Data should only be set via data for this type.
      * + 'time' Time axis, suitable for continuous time series data.
      *   As compared to value axis, it has a better formatting for time
      *   and a different tick calculation method.
      *   For example, it decides to use month, week, day or hour for tick
      *   based on the range of span.
      * + 'log' Log axis, suitable for log data.
      *
      * @default 'value'
      * @see https://echarts.apache.org/en/option.html#xAxis.type
      */
    var `type`: js.UndefOr[typingsSlinky.echarts.echarts.EChartOption.BasicComponents.CartesianAxis.Type] = js.native
  }
  object XAxis {
    
    @scala.inline
    def apply(): XAxis = {
      val __obj = js.Dynamic.literal()
      __obj.asInstanceOf[XAxis]
    }
    
    @scala.inline
    implicit class XAxisMutableBuilder[Self <: XAxis] (val x: Self) extends AnyVal {
      
      @scala.inline
      def setPosition(value: top | bottom): Self = StObject.set(x, "position", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setPositionUndefined: Self = StObject.set(x, "position", js.undefined)
      
      @scala.inline
      def setType(value: typingsSlinky.echarts.echarts.EChartOption.BasicComponents.CartesianAxis.Type): Self = StObject.set(x, "type", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setTypeUndefined: Self = StObject.set(x, "type", js.undefined)
    }
  }
  
  /**
    * The y axis in cartesian(rectangular) coordinate.
    * Usually a single grid component can place at most 2 y axis,
    * one on the left and another on the right. offset can be used
    * to avoid overlap when you need to put more than two y axis.
    *
    * @see https://echarts.apache.org/en/option.html#yAxis
    */
  @js.native
  trait YAxis extends CartesianAxis {
    
    /**
      * The first y axis in grid defaults to be the left (`'left'`)
      * of the grid, and the second y axis is on the other side
      * against the first y axis.
      */
    var position: js.UndefOr[left | right] = js.native
    
    /**
      * Options:
      * + 'value' - Numerical axis, suitable for continuous data.
      * + 'category' Category axis, suitable for discrete category data.
      *   Data should only be set via 'data' for this type.
      * + 'time' Time axis, suitable for continuous time series data.
      *   As compared to value axis, it has a better formatting for time
      *   and a different tick calculation method.
      *   For example, it decides to use month, week, day or hour for tick
      *   based on the range of span.
      * + 'log' Log axis, suitable for log data.
      *
      * @default 'value'
      * @see https://echarts.apache.org/en/option.html#yAxis.type
      */
    var `type`: js.UndefOr[typingsSlinky.echarts.echarts.EChartOption.BasicComponents.CartesianAxis.Type] = js.native
  }
  object YAxis {
    
    @scala.inline
    def apply(): YAxis = {
      val __obj = js.Dynamic.literal()
      __obj.asInstanceOf[YAxis]
    }
    
    @scala.inline
    implicit class YAxisMutableBuilder[Self <: YAxis] (val x: Self) extends AnyVal {
      
      @scala.inline
      def setPosition(value: left | right): Self = StObject.set(x, "position", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setPositionUndefined: Self = StObject.set(x, "position", js.undefined)
      
      @scala.inline
      def setType(value: typingsSlinky.echarts.echarts.EChartOption.BasicComponents.CartesianAxis.Type): Self = StObject.set(x, "type", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setTypeUndefined: Self = StObject.set(x, "type", js.undefined)
    }
  }
  
  trait _Color extends StObject
  object _Color {
    
    @scala.inline
    def LinearGradient(
      colorStops: ColorStops,
      global: Boolean,
      `type`: linear,
      x: Double,
      x2: Double,
      y: Double,
      y2: Double
    ): typingsSlinky.echarts.echarts.EChartOption.LinearGradient = {
      val __obj = js.Dynamic.literal(colorStops = colorStops.asInstanceOf[js.Any], global = global.asInstanceOf[js.Any], x = x.asInstanceOf[js.Any], x2 = x2.asInstanceOf[js.Any], y = y.asInstanceOf[js.Any], y2 = y2.asInstanceOf[js.Any])
      __obj.updateDynamic("type")(`type`.asInstanceOf[js.Any])
      __obj.asInstanceOf[typingsSlinky.echarts.echarts.EChartOption.LinearGradient]
    }
    
    @scala.inline
    def RadialGradient(colorStops: ColorStops, global: Boolean, r: Double, `type`: radial, x: Double, y: Double): typingsSlinky.echarts.echarts.EChartOption.RadialGradient = {
      val __obj = js.Dynamic.literal(colorStops = colorStops.asInstanceOf[js.Any], global = global.asInstanceOf[js.Any], r = r.asInstanceOf[js.Any], x = x.asInstanceOf[js.Any], y = y.asInstanceOf[js.Any])
      __obj.updateDynamic("type")(`type`.asInstanceOf[js.Any])
      __obj.asInstanceOf[typingsSlinky.echarts.echarts.EChartOption.RadialGradient]
    }
    
    @scala.inline
    def Texture(image: HTMLImageElement | HTMLCanvasElement): typingsSlinky.echarts.echarts.EChartOption.Texture = {
      val __obj = js.Dynamic.literal(image = image.asInstanceOf[js.Any])
      __obj.asInstanceOf[typingsSlinky.echarts.echarts.EChartOption.Texture]
    }
  }
}
