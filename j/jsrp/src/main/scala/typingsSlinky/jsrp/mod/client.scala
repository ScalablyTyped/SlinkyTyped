package typingsSlinky.jsrp.mod

import scala.scalajs.js
import scala.scalajs.js.`|`
import scala.scalajs.js.annotation.{JSGlobalScope, JSGlobal, JSImport, JSName, JSBracketAccess}

@JSImport("jsrp", "client")
@js.native
/** Client SRP constructor */
class client () extends js.Object {
  
  /**
    * Verifies the server's M2 proof against the client's. Only call after using {@link getProof}.
    * @param hexM2 - hex representation of M2
    * @returns true if it matches the client's proof, false if it doesn't
    */
  def checkServerProof(hexM2: String): Boolean = js.native
  
  /**
    * Generate the v and salt values from values passed into init().
    * @param callback - callback has an error as the first argument, or an object containing the verifier and salt as the second.
    */
  def createVerifier(callback: js.Function2[/* error */ js.Any, /* result */ Verifier, _]): Unit = js.native
  
  /**
    * Returns the hex representation of the client's M1 proof
    * @returns hex representation of M1
    */
  def getProof(): String = js.native
  
  /**
    * Returns the hex representation of the client's A value
    * @returns hex representation of A
    */
  def getPublicKey(): String = js.native
  
  /**
    * Returns the hex representation of the salt
    * @returns hex representation of the salt
    */
  def getSalt(): String = js.native
  
  /**
    * Returns the hex representation of the shared secret key, K
    * @returns hex representation of K
    */
  def getSharedKey(): String = js.native
  
  /**
    * Initialise the client SRP and calculate needed SRP values
    * @param options - the client options including the username and password
    * @param callback - called when the client instance is ready to use
    */
  def init(options: ClientOptions, callback: js.Function0[_]): Unit = js.native
  
  /**
    * Set the salt generated by the server for later computations
    * @param hexSalt - hex value of the salt
    */
  def setSalt(hexSalt: String): Unit = js.native
  
  /**
    * Sets the server's B value on the client and compute values to complete authentication
    * @param hexB - hex representation of B
    * @throws Will throw an error if the server provides an incorrect value
    */
  def setServerPublicKey(hexB: String): Unit = js.native
}
