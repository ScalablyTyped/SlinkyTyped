package typingsSlinky.jquery

import org.scalablytyped.runtime.Instantiable1
import org.scalablytyped.runtime.Instantiable2
import org.scalablytyped.runtime.NumberDictionary
import org.scalablytyped.runtime.StringDictionary
import org.scalajs.dom.raw.Comment
import org.scalajs.dom.raw.Document
import org.scalajs.dom.raw.DocumentFragment
import org.scalajs.dom.raw.Element
import org.scalajs.dom.raw.EventTarget
import org.scalajs.dom.raw.HTMLAnchorElement
import org.scalajs.dom.raw.HTMLAreaElement
import org.scalajs.dom.raw.HTMLAudioElement
import org.scalajs.dom.raw.HTMLBRElement
import org.scalajs.dom.raw.HTMLBaseElement
import org.scalajs.dom.raw.HTMLBodyElement
import org.scalajs.dom.raw.HTMLButtonElement
import org.scalajs.dom.raw.HTMLCanvasElement
import org.scalajs.dom.raw.HTMLDListElement
import org.scalajs.dom.raw.HTMLDataListElement
import org.scalajs.dom.raw.HTMLDivElement
import org.scalajs.dom.raw.HTMLElement
import org.scalajs.dom.raw.HTMLEmbedElement
import org.scalajs.dom.raw.HTMLFieldSetElement
import org.scalajs.dom.raw.HTMLFormElement
import org.scalajs.dom.raw.HTMLHRElement
import org.scalajs.dom.raw.HTMLHeadElement
import org.scalajs.dom.raw.HTMLHeadingElement
import org.scalajs.dom.raw.HTMLHtmlElement
import org.scalajs.dom.raw.HTMLIFrameElement
import org.scalajs.dom.raw.HTMLImageElement
import org.scalajs.dom.raw.HTMLInputElement
import org.scalajs.dom.raw.HTMLLIElement
import org.scalajs.dom.raw.HTMLLabelElement
import org.scalajs.dom.raw.HTMLLegendElement
import org.scalajs.dom.raw.HTMLLinkElement
import org.scalajs.dom.raw.HTMLMapElement
import org.scalajs.dom.raw.HTMLMenuElement
import org.scalajs.dom.raw.HTMLMetaElement
import org.scalajs.dom.raw.HTMLModElement
import org.scalajs.dom.raw.HTMLOListElement
import org.scalajs.dom.raw.HTMLObjectElement
import org.scalajs.dom.raw.HTMLOptGroupElement
import org.scalajs.dom.raw.HTMLOptionElement
import org.scalajs.dom.raw.HTMLParagraphElement
import org.scalajs.dom.raw.HTMLParamElement
import org.scalajs.dom.raw.HTMLPreElement
import org.scalajs.dom.raw.HTMLProgressElement
import org.scalajs.dom.raw.HTMLQuoteElement
import org.scalajs.dom.raw.HTMLScriptElement
import org.scalajs.dom.raw.HTMLSelectElement
import org.scalajs.dom.raw.HTMLSourceElement
import org.scalajs.dom.raw.HTMLSpanElement
import org.scalajs.dom.raw.HTMLStyleElement
import org.scalajs.dom.raw.HTMLTableCaptionElement
import org.scalajs.dom.raw.HTMLTableColElement
import org.scalajs.dom.raw.HTMLTableElement
import org.scalajs.dom.raw.HTMLTableRowElement
import org.scalajs.dom.raw.HTMLTableSectionElement
import org.scalajs.dom.raw.HTMLTextAreaElement
import org.scalajs.dom.raw.HTMLTitleElement
import org.scalajs.dom.raw.HTMLTrackElement
import org.scalajs.dom.raw.HTMLUListElement
import org.scalajs.dom.raw.HTMLVideoElement
import org.scalajs.dom.raw.SVGCircleElement
import org.scalajs.dom.raw.SVGClipPathElement
import org.scalajs.dom.raw.SVGDefsElement
import org.scalajs.dom.raw.SVGDescElement
import org.scalajs.dom.raw.SVGEllipseElement
import org.scalajs.dom.raw.SVGFEBlendElement
import org.scalajs.dom.raw.SVGFEColorMatrixElement
import org.scalajs.dom.raw.SVGFEComponentTransferElement
import org.scalajs.dom.raw.SVGFECompositeElement
import org.scalajs.dom.raw.SVGFEConvolveMatrixElement
import org.scalajs.dom.raw.SVGFEDiffuseLightingElement
import org.scalajs.dom.raw.SVGFEDisplacementMapElement
import org.scalajs.dom.raw.SVGFEDistantLightElement
import org.scalajs.dom.raw.SVGFEFloodElement
import org.scalajs.dom.raw.SVGFEFuncAElement
import org.scalajs.dom.raw.SVGFEFuncBElement
import org.scalajs.dom.raw.SVGFEFuncGElement
import org.scalajs.dom.raw.SVGFEFuncRElement
import org.scalajs.dom.raw.SVGFEGaussianBlurElement
import org.scalajs.dom.raw.SVGFEImageElement
import org.scalajs.dom.raw.SVGFEMergeElement
import org.scalajs.dom.raw.SVGFEMergeNodeElement
import org.scalajs.dom.raw.SVGFEMorphologyElement
import org.scalajs.dom.raw.SVGFEOffsetElement
import org.scalajs.dom.raw.SVGFEPointLightElement
import org.scalajs.dom.raw.SVGFESpecularLightingElement
import org.scalajs.dom.raw.SVGFESpotLightElement
import org.scalajs.dom.raw.SVGFETileElement
import org.scalajs.dom.raw.SVGFETurbulenceElement
import org.scalajs.dom.raw.SVGFilterElement
import org.scalajs.dom.raw.SVGGElement
import org.scalajs.dom.raw.SVGImageElement
import org.scalajs.dom.raw.SVGLineElement
import org.scalajs.dom.raw.SVGLinearGradientElement
import org.scalajs.dom.raw.SVGMarkerElement
import org.scalajs.dom.raw.SVGMaskElement
import org.scalajs.dom.raw.SVGMetadataElement
import org.scalajs.dom.raw.SVGPathElement
import org.scalajs.dom.raw.SVGPatternElement
import org.scalajs.dom.raw.SVGPolygonElement
import org.scalajs.dom.raw.SVGPolylineElement
import org.scalajs.dom.raw.SVGRadialGradientElement
import org.scalajs.dom.raw.SVGRectElement
import org.scalajs.dom.raw.SVGSVGElement
import org.scalajs.dom.raw.SVGStopElement
import org.scalajs.dom.raw.SVGSwitchElement
import org.scalajs.dom.raw.SVGSymbolElement
import org.scalajs.dom.raw.SVGTSpanElement
import org.scalajs.dom.raw.SVGTextElement
import org.scalajs.dom.raw.SVGTextPathElement
import org.scalajs.dom.raw.SVGUseElement
import org.scalajs.dom.raw.SVGViewElement
import org.scalajs.dom.raw.Text
import org.scalajs.dom.raw.TouchList
import org.scalajs.dom.raw.Window
import org.scalajs.dom.raw.XMLHttpRequest
import typingsSlinky.jquery.JQuery.Ajax.AjaxSettingsBase
import typingsSlinky.jquery.JQuery.Ajax.ErrorTextStatus
import typingsSlinky.jquery.JQuery.Ajax.StatusCodeCallbacks
import typingsSlinky.jquery.JQuery.Ajax.SuccessTextStatus
import typingsSlinky.jquery.JQuery.Ajax.TextStatus
import typingsSlinky.jquery.JQuery.AjaxSettings
import typingsSlinky.jquery.JQuery.Coordinates
import typingsSlinky.jquery.JQuery.CoordinatesPartial
import typingsSlinky.jquery.JQuery.Deferred.Callback
import typingsSlinky.jquery.JQuery.Deferred.Callback3
import typingsSlinky.jquery.JQuery.Deferred.CallbackBase
import typingsSlinky.jquery.JQuery.Duration
import typingsSlinky.jquery.JQuery.EffectsOptions
import typingsSlinky.jquery.JQuery.NameValuePair
import typingsSlinky.jquery.JQuery.Node
import typingsSlinky.jquery.JQuery.PlainObject
import typingsSlinky.jquery.JQuery.Promise
import typingsSlinky.jquery.JQuery.Queue
import typingsSlinky.jquery.JQuery.QueueFunction
import typingsSlinky.jquery.JQuery.Selector
import typingsSlinky.jquery.JQuery.Transport.SuccessCallback
import typingsSlinky.jquery.JQuery.TriggeredEvent
import typingsSlinky.jquery.JQuery.TypeEventHandler
import typingsSlinky.jquery.JQuery.TypeEventHandlers
import typingsSlinky.jquery.JQuery.TypeOrArray
import typingsSlinky.jquery.JQuery.htmlString
import typingsSlinky.jquery.JQuery.jqXHR
import typingsSlinky.jquery.anon.HandleObj
import typingsSlinky.jquery.jqueryBooleans.`false`
import typingsSlinky.jquery.jqueryBooleans.`true`
import typingsSlinky.jquery.jqueryStrings.`applicationSlashx-www-form-urlencoded`
import typingsSlinky.jquery.jqueryStrings.`multipartSlashform-data`
import typingsSlinky.jquery.jqueryStrings.`object`
import typingsSlinky.jquery.jqueryStrings.`var`
import typingsSlinky.jquery.jqueryStrings.a
import typingsSlinky.jquery.jqueryStrings.abbr
import typingsSlinky.jquery.jqueryStrings.address
import typingsSlinky.jquery.jqueryStrings.applet
import typingsSlinky.jquery.jqueryStrings.area
import typingsSlinky.jquery.jqueryStrings.article
import typingsSlinky.jquery.jqueryStrings.aside
import typingsSlinky.jquery.jqueryStrings.audio
import typingsSlinky.jquery.jqueryStrings.b
import typingsSlinky.jquery.jqueryStrings.base
import typingsSlinky.jquery.jqueryStrings.basefont
import typingsSlinky.jquery.jqueryStrings.bdi
import typingsSlinky.jquery.jqueryStrings.bdo
import typingsSlinky.jquery.jqueryStrings.blockquote
import typingsSlinky.jquery.jqueryStrings.blur
import typingsSlinky.jquery.jqueryStrings.body
import typingsSlinky.jquery.jqueryStrings.br
import typingsSlinky.jquery.jqueryStrings.button
import typingsSlinky.jquery.jqueryStrings.canvas
import typingsSlinky.jquery.jqueryStrings.caption
import typingsSlinky.jquery.jqueryStrings.change
import typingsSlinky.jquery.jqueryStrings.circle
import typingsSlinky.jquery.jqueryStrings.cite
import typingsSlinky.jquery.jqueryStrings.click
import typingsSlinky.jquery.jqueryStrings.clipPath
import typingsSlinky.jquery.jqueryStrings.code
import typingsSlinky.jquery.jqueryStrings.col
import typingsSlinky.jquery.jqueryStrings.colgroup
import typingsSlinky.jquery.jqueryStrings.contextmenu
import typingsSlinky.jquery.jqueryStrings.data
import typingsSlinky.jquery.jqueryStrings.datalist
import typingsSlinky.jquery.jqueryStrings.dblclick
import typingsSlinky.jquery.jqueryStrings.dd
import typingsSlinky.jquery.jqueryStrings.defs
import typingsSlinky.jquery.jqueryStrings.del
import typingsSlinky.jquery.jqueryStrings.desc
import typingsSlinky.jquery.jqueryStrings.details
import typingsSlinky.jquery.jqueryStrings.dfn
import typingsSlinky.jquery.jqueryStrings.dialog
import typingsSlinky.jquery.jqueryStrings.dir
import typingsSlinky.jquery.jqueryStrings.div
import typingsSlinky.jquery.jqueryStrings.dl
import typingsSlinky.jquery.jqueryStrings.drag
import typingsSlinky.jquery.jqueryStrings.dragend
import typingsSlinky.jquery.jqueryStrings.dragenter
import typingsSlinky.jquery.jqueryStrings.dragexit
import typingsSlinky.jquery.jqueryStrings.dragleave
import typingsSlinky.jquery.jqueryStrings.dragover
import typingsSlinky.jquery.jqueryStrings.dragstart
import typingsSlinky.jquery.jqueryStrings.drop
import typingsSlinky.jquery.jqueryStrings.dt
import typingsSlinky.jquery.jqueryStrings.ellipse
import typingsSlinky.jquery.jqueryStrings.em
import typingsSlinky.jquery.jqueryStrings.embed
import typingsSlinky.jquery.jqueryStrings.feBlend
import typingsSlinky.jquery.jqueryStrings.feColorMatrix
import typingsSlinky.jquery.jqueryStrings.feComponentTransfer
import typingsSlinky.jquery.jqueryStrings.feComposite
import typingsSlinky.jquery.jqueryStrings.feConvolveMatrix
import typingsSlinky.jquery.jqueryStrings.feDiffuseLighting
import typingsSlinky.jquery.jqueryStrings.feDisplacementMap
import typingsSlinky.jquery.jqueryStrings.feDistantLight
import typingsSlinky.jquery.jqueryStrings.feFlood
import typingsSlinky.jquery.jqueryStrings.feFuncA
import typingsSlinky.jquery.jqueryStrings.feFuncB
import typingsSlinky.jquery.jqueryStrings.feFuncG
import typingsSlinky.jquery.jqueryStrings.feFuncR
import typingsSlinky.jquery.jqueryStrings.feGaussianBlur
import typingsSlinky.jquery.jqueryStrings.feImage
import typingsSlinky.jquery.jqueryStrings.feMerge
import typingsSlinky.jquery.jqueryStrings.feMergeNode
import typingsSlinky.jquery.jqueryStrings.feMorphology
import typingsSlinky.jquery.jqueryStrings.feOffset
import typingsSlinky.jquery.jqueryStrings.fePointLight
import typingsSlinky.jquery.jqueryStrings.feSpecularLighting
import typingsSlinky.jquery.jqueryStrings.feSpotLight
import typingsSlinky.jquery.jqueryStrings.feTile
import typingsSlinky.jquery.jqueryStrings.feTurbulence
import typingsSlinky.jquery.jqueryStrings.fieldset
import typingsSlinky.jquery.jqueryStrings.figcaption
import typingsSlinky.jquery.jqueryStrings.figure
import typingsSlinky.jquery.jqueryStrings.filter
import typingsSlinky.jquery.jqueryStrings.focus
import typingsSlinky.jquery.jqueryStrings.focusin
import typingsSlinky.jquery.jqueryStrings.focusout
import typingsSlinky.jquery.jqueryStrings.font
import typingsSlinky.jquery.jqueryStrings.footer
import typingsSlinky.jquery.jqueryStrings.foreignObject
import typingsSlinky.jquery.jqueryStrings.form
import typingsSlinky.jquery.jqueryStrings.frame
import typingsSlinky.jquery.jqueryStrings.frameset
import typingsSlinky.jquery.jqueryStrings.g
import typingsSlinky.jquery.jqueryStrings.get
import typingsSlinky.jquery.jqueryStrings.h1
import typingsSlinky.jquery.jqueryStrings.h2
import typingsSlinky.jquery.jqueryStrings.h3
import typingsSlinky.jquery.jqueryStrings.h4
import typingsSlinky.jquery.jqueryStrings.h5
import typingsSlinky.jquery.jqueryStrings.h6
import typingsSlinky.jquery.jqueryStrings.head
import typingsSlinky.jquery.jqueryStrings.header
import typingsSlinky.jquery.jqueryStrings.hgroup
import typingsSlinky.jquery.jqueryStrings.hr
import typingsSlinky.jquery.jqueryStrings.html
import typingsSlinky.jquery.jqueryStrings.i
import typingsSlinky.jquery.jqueryStrings.iframe
import typingsSlinky.jquery.jqueryStrings.image
import typingsSlinky.jquery.jqueryStrings.img
import typingsSlinky.jquery.jqueryStrings.input
import typingsSlinky.jquery.jqueryStrings.ins
import typingsSlinky.jquery.jqueryStrings.json
import typingsSlinky.jquery.jqueryStrings.jsonp
import typingsSlinky.jquery.jqueryStrings.kbd
import typingsSlinky.jquery.jqueryStrings.keydown
import typingsSlinky.jquery.jqueryStrings.keypress
import typingsSlinky.jquery.jqueryStrings.keyup
import typingsSlinky.jquery.jqueryStrings.label
import typingsSlinky.jquery.jqueryStrings.legend
import typingsSlinky.jquery.jqueryStrings.li
import typingsSlinky.jquery.jqueryStrings.line
import typingsSlinky.jquery.jqueryStrings.linearGradient
import typingsSlinky.jquery.jqueryStrings.link
import typingsSlinky.jquery.jqueryStrings.main
import typingsSlinky.jquery.jqueryStrings.map
import typingsSlinky.jquery.jqueryStrings.mark
import typingsSlinky.jquery.jqueryStrings.marker
import typingsSlinky.jquery.jqueryStrings.marquee
import typingsSlinky.jquery.jqueryStrings.mask
import typingsSlinky.jquery.jqueryStrings.menu
import typingsSlinky.jquery.jqueryStrings.meta
import typingsSlinky.jquery.jqueryStrings.metadata
import typingsSlinky.jquery.jqueryStrings.meter
import typingsSlinky.jquery.jqueryStrings.mousedown
import typingsSlinky.jquery.jqueryStrings.mouseenter
import typingsSlinky.jquery.jqueryStrings.mouseleave
import typingsSlinky.jquery.jqueryStrings.mousemove
import typingsSlinky.jquery.jqueryStrings.mouseout
import typingsSlinky.jquery.jqueryStrings.mouseover
import typingsSlinky.jquery.jqueryStrings.mouseup
import typingsSlinky.jquery.jqueryStrings.nav
import typingsSlinky.jquery.jqueryStrings.noscript
import typingsSlinky.jquery.jqueryStrings.ol
import typingsSlinky.jquery.jqueryStrings.optgroup
import typingsSlinky.jquery.jqueryStrings.option
import typingsSlinky.jquery.jqueryStrings.output
import typingsSlinky.jquery.jqueryStrings.p
import typingsSlinky.jquery.jqueryStrings.param
import typingsSlinky.jquery.jqueryStrings.path
import typingsSlinky.jquery.jqueryStrings.pattern
import typingsSlinky.jquery.jqueryStrings.pending
import typingsSlinky.jquery.jqueryStrings.picture
import typingsSlinky.jquery.jqueryStrings.polygon
import typingsSlinky.jquery.jqueryStrings.polyline
import typingsSlinky.jquery.jqueryStrings.pre
import typingsSlinky.jquery.jqueryStrings.progress
import typingsSlinky.jquery.jqueryStrings.q
import typingsSlinky.jquery.jqueryStrings.radialGradient
import typingsSlinky.jquery.jqueryStrings.rect
import typingsSlinky.jquery.jqueryStrings.rejected
import typingsSlinky.jquery.jqueryStrings.resize
import typingsSlinky.jquery.jqueryStrings.resolved
import typingsSlinky.jquery.jqueryStrings.rp
import typingsSlinky.jquery.jqueryStrings.rt
import typingsSlinky.jquery.jqueryStrings.ruby
import typingsSlinky.jquery.jqueryStrings.s
import typingsSlinky.jquery.jqueryStrings.samp
import typingsSlinky.jquery.jqueryStrings.script
import typingsSlinky.jquery.jqueryStrings.scroll
import typingsSlinky.jquery.jqueryStrings.section
import typingsSlinky.jquery.jqueryStrings.select
import typingsSlinky.jquery.jqueryStrings.set
import typingsSlinky.jquery.jqueryStrings.slot
import typingsSlinky.jquery.jqueryStrings.small
import typingsSlinky.jquery.jqueryStrings.source
import typingsSlinky.jquery.jqueryStrings.span
import typingsSlinky.jquery.jqueryStrings.stop
import typingsSlinky.jquery.jqueryStrings.strong
import typingsSlinky.jquery.jqueryStrings.style
import typingsSlinky.jquery.jqueryStrings.sub
import typingsSlinky.jquery.jqueryStrings.submit
import typingsSlinky.jquery.jqueryStrings.summary
import typingsSlinky.jquery.jqueryStrings.sup
import typingsSlinky.jquery.jqueryStrings.svg
import typingsSlinky.jquery.jqueryStrings.switch
import typingsSlinky.jquery.jqueryStrings.symbol
import typingsSlinky.jquery.jqueryStrings.table
import typingsSlinky.jquery.jqueryStrings.tbody
import typingsSlinky.jquery.jqueryStrings.td
import typingsSlinky.jquery.jqueryStrings.template
import typingsSlinky.jquery.jqueryStrings.text
import typingsSlinky.jquery.jqueryStrings.textPath
import typingsSlinky.jquery.jqueryStrings.textSlashplain
import typingsSlinky.jquery.jqueryStrings.textarea
import typingsSlinky.jquery.jqueryStrings.tfoot
import typingsSlinky.jquery.jqueryStrings.th
import typingsSlinky.jquery.jqueryStrings.thead
import typingsSlinky.jquery.jqueryStrings.time
import typingsSlinky.jquery.jqueryStrings.title
import typingsSlinky.jquery.jqueryStrings.touchcancel
import typingsSlinky.jquery.jqueryStrings.touchend
import typingsSlinky.jquery.jqueryStrings.touchmove
import typingsSlinky.jquery.jqueryStrings.touchstart
import typingsSlinky.jquery.jqueryStrings.tr
import typingsSlinky.jquery.jqueryStrings.track
import typingsSlinky.jquery.jqueryStrings.tspan
import typingsSlinky.jquery.jqueryStrings.u
import typingsSlinky.jquery.jqueryStrings.ul
import typingsSlinky.jquery.jqueryStrings.use
import typingsSlinky.jquery.jqueryStrings.video
import typingsSlinky.jquery.jqueryStrings.view
import typingsSlinky.jquery.jqueryStrings.wbr
import typingsSlinky.jquery.jqueryStrings.xml
import typingsSlinky.sizzle.mod.Selectors.AttrHandleFunctions
import typingsSlinky.sizzle.mod.Selectors.CreatePseudoFunction
import typingsSlinky.sizzle.mod.Selectors.FilterFunctions
import typingsSlinky.sizzle.mod.Selectors.FindFunctions
import typingsSlinky.sizzle.mod.Selectors.Matches
import typingsSlinky.sizzle.mod.Selectors.PreFilterFunctions
import typingsSlinky.sizzle.mod.Selectors.PseudoFunction
import typingsSlinky.sizzle.mod.Selectors.PseudoFunctions
import typingsSlinky.sizzle.mod.Selectors.SetFilterFunctions
import typingsSlinky.std.ArrayLike
import typingsSlinky.std.FlatArray
import typingsSlinky.std.HTMLAllCollection
import typingsSlinky.std.HTMLAppletElement
import typingsSlinky.std.HTMLBaseFontElement
import typingsSlinky.std.HTMLDataElement
import typingsSlinky.std.HTMLDetailsElement
import typingsSlinky.std.HTMLDialogElement
import typingsSlinky.std.HTMLDirectoryElement
import typingsSlinky.std.HTMLFontElement
import typingsSlinky.std.HTMLFrameElement
import typingsSlinky.std.HTMLFrameSetElement
import typingsSlinky.std.HTMLMarqueeElement
import typingsSlinky.std.HTMLMeterElement
import typingsSlinky.std.HTMLOutputElement
import typingsSlinky.std.HTMLPictureElement
import typingsSlinky.std.HTMLSlotElement
import typingsSlinky.std.HTMLTableDataCellElement
import typingsSlinky.std.HTMLTableHeaderCellElement
import typingsSlinky.std.HTMLTemplateElement
import typingsSlinky.std.HTMLTimeElement
import typingsSlinky.std.Iterable
import typingsSlinky.std.IterableIterator
import typingsSlinky.std.Partial
import typingsSlinky.std.Pick
import typingsSlinky.std.SVGForeignObjectElement
import typingsSlinky.std.XMLHttpRequestResponseType
import typingsSlinky.std.anon.CopyWithin
import org.scalablytyped.runtime.StObject
import scala.scalajs.js
import scala.scalajs.js.`|`
import scala.scalajs.js.annotation.{JSGlobalScope, JSGlobal, JSImport, JSName, JSBracketAccess}

@js.native
trait JQuery[TElement]
  extends Iterable[TElement]
     with /* n */ NumberDictionary[TElement] {
  
  // TODO: The return type should reflect newly selected types.
  /**
    * Create a new jQuery object with elements added to the set of matched elements.
    * @param selector_elements_html_selection _&#x40;param_ `selector_elements_html_selection`
    * <br>
    * * `selector` — A string representing a selector expression to find additional elements to add to the set of matched elements. <br>
    * * `elements` — One or more elements to add to the set of matched elements. <br>
    * * `html` — An HTML fragment to add to the set of matched elements. <br>
    * * `selection` — An existing jQuery object to add to the set of matched elements.
    * @see \`{@link https://api.jquery.com/add/ }\`
    * @since 1.0
    * @since 1.3.2
    * @example ​ ````Finds all divs and makes a border.  Then adds all paragraphs to the jQuery object to set their backgrounds yellow.
  ```html
  <!doctype html>
  <html lang="en">
  <head>
    <meta charset="utf-8">
    <title>add demo</title>
    <style>
    div {
    width: 60px;
    height: 60px;
    margin: 10px;
    float: left;
    }
    p {
    clear: left;
    font-weight: bold;
    font-size: 16px;
    color: blue;
    margin: 0 10px;
    padding: 2px;
    }
    </style>
    <script src="https://code.jquery.com/jquery-3.3.1.js"></script>
  </head>
  <body>
  ​
  <div></div>
  <div></div>
  <div></div>
  <div></div>
  <div></div>
  <div></div>
  ​
  <p>Added this... (notice no border)</p>
  ​
  <script>
  $( "div" ).css( "border", "2px solid red" )
    .add( "p" )
    .css( "background", "yellow" );
  </script>
  ​
  </body>
  </html>
  ```
    * @example ​ ````Adds more elements, matched by the given expression, to the set of matched elements.
  ```html
  <!doctype html>
  <html lang="en">
  <head>
    <meta charset="utf-8">
    <title>add demo</title>
    <script src="https://code.jquery.com/jquery-3.3.1.js"></script>
  </head>
  <body>
  ​
  <p>Hello</p>
  <span>Hello Again</span>
  ​
  <script>
  $( "p" ).add( "span" ).css( "background", "yellow" );
  </script>
  ​
  </body>
  </html>
  ```
    * @example ​ ````Adds more elements, created on the fly, to the set of matched elements.
  ```html
  <!doctype html>
  <html lang="en">
  <head>
    <meta charset="utf-8">
    <title>add demo</title>
    <script src="https://code.jquery.com/jquery-3.3.1.js"></script>
  </head>
  <body>
  ​
  <p>Hello</p>
  ​
  <script>
  $( "p" ).clone().add( "<span>Again</span>" ).appendTo( document.body );
  </script>
  ​
  </body>
  </html>
  ```
    * @example ​ ````Adds one or more Elements to the set of matched elements.
  ```html
  <!doctype html>
  <html lang="en">
  <head>
    <meta charset="utf-8">
    <title>add demo</title>
    <script src="https://code.jquery.com/jquery-3.3.1.js"></script>
  </head>
  <body>
  ​
  <p>Hello</p>
  <span id="a">Hello Again</span>
  ​
  <script>
  $( "p" ).add( document.getElementById( "a" ) ).css( "background", "yellow" );
  </script>
  ​
  </body>
  </html>
  ```
    * @example ​ ````Demonstrates how to add (or push) elements to an existing collection
  ```html
  <!doctype html>
  <html lang="en">
  <head>
    <meta charset="utf-8">
    <title>add demo</title>
    <script src="https://code.jquery.com/jquery-3.3.1.js"></script>
  </head>
  <body>
  ​
  <p>Hello</p>
  <span id="a">Hello Again</span>
  ​
  <script>
  var collection = $( "p" );
  // Capture the new collection
  collection = collection.add( document.getElementById( "a" ) );
  collection.css( "background", "yellow" );
  </script>
  ​
  </body>
  </html>
  ```
    */
  def add(selector_elements_html_selection: Node | Selector | TypeOrArray[Element] | htmlString): this.type = js.native
  def add(selector_elements_html_selection: JQuery[HTMLElement]): this.type = js.native
  /**
    * Create a new jQuery object with elements added to the set of matched elements.
    * @param selector A string representing a selector expression to find additional elements to add to the set of matched elements.
    * @param context The point in the document at which the selector should begin matching; similar to the context
    *                argument of the $(selector, context) method.
    * @see \`{@link https://api.jquery.com/add/ }\`
    * @since 1.4
    */
  def add(selector: Selector, context: Element): this.type = js.native
  
  /**
    * Add the previous set of elements on the stack to the current set, optionally filtered by a selector.
    * @param selector A string containing a selector expression to match the current set of elements against.
    * @see \`{@link https://api.jquery.com/addBack/ }\`
    * @since 1.8
    * @example ​ ````The .addBack() method causes the previous set of DOM elements in the traversal stack to be added to the current set. In the first example, the top stack contains the set resulting from .find(&quot;p&quot;). In the second example, .addBack() adds the previous set of elements on the stack — in this case $(&quot;div.after-addback&quot;) — to the current set, selecting both the div and its enclosed paragraphs.
  ```html
  <!doctype html>
  <html lang="en">
  <head>
    <meta charset="utf-8">
    <title>addBack demo</title>
    <style>
    p, div {
    margin: 5px;
    padding: 5px;
    }
    .border {
    border: 2px solid red;
    }
    .background {
    background: yellow;
    }
    .left, .right {
    width: 45%;
    float: left;
    }
    .right {
    margin-left: 3%;
    }
    </style>
    <script src="https://code.jquery.com/jquery-3.3.1.js"></script>
  </head>
  <body>
  ​
  <div class="left">
    <p><strong>Before <code>addBack()</code></strong></p>
    <div class="before-addback">
    <p>First Paragraph</p>
    <p>Second Paragraph</p>
    </div>
  </div>
  <div class="right">
    <p><strong>After <code>addBack()</code></strong></p>
    <div class="after-addback">
    <p>First Paragraph</p>
    <p>Second Paragraph</p>
    </div>
  </div>
  ​
  <script>
  $( "div.left, div.right" ).find( "div, div > p" ).addClass( "border" );
  ​
  // First Example
  $( "div.before-addback" ).find( "p" ).addClass( "background" );
  ​
  // Second Example
  $( "div.after-addback" ).find( "p" ).addBack().addClass( "background" );
  </script>
  ​
  </body>
  </html>
  ```
    */
  def addBack(): this.type = js.native
  def addBack(selector: Selector): this.type = js.native
  
  def addClass(
    className_function: js.ThisFunction2[/* this */ TElement, /* index */ Double, /* currentClassName */ String, String]
  ): this.type = js.native
  /**
    * Adds the specified class(es) to each element in the set of matched elements.
    * @param className_function _&#x40;param_ `className_function`
    * <br>
    * * `className` — One or more space-separated classes to be added to the class attribute of each matched element. <br>
    * * `function` — A function returning one or more space-separated class names to be added to the existing class
    *                name(s). Receives the index position of the element in the set and the existing class name(s) as
    *                arguments. Within the function, `this` refers to the current element in the set.
    * @see \`{@link https://api.jquery.com/addClass/ }\`
    * @since 1.0
    * @since 1.4
    * @since 3.3
    * @example ​ ````Add the class &quot;selected&quot; to the matched elements.
  ```html
  <!doctype html>
  <html lang="en">
  <head>
    <meta charset="utf-8">
    <title>addClass demo</title>
    <style>
    p {
    margin: 8px;
    font-size: 16px;
    }
    .selected {
    color: blue;
    }
    .highlight {
    background: yellow;
    }
    </style>
    <script src="https://code.jquery.com/jquery-3.3.1.js"></script>
  </head>
  <body>
  ​
  <p>Hello</p>
  <p>and</p>
  <p>Goodbye</p>
  ​
  <script>
  $( "p" ).last().addClass( "selected" );
  </script>
  ​
  </body>
  </html>
  ```
    * @example ​ ````Add the classes &quot;selected&quot; and &quot;highlight&quot; to the matched elements.
  ```html
  <!doctype html>
  <html lang="en">
  <head>
    <meta charset="utf-8">
    <title>addClass demo</title>
    <style>
    p {
    margin: 8px;
    font-size: 16px;
    }
    .selected {
    color: red;
    }
    .highlight {
    background: yellow;
    }
    </style>
    <script src="https://code.jquery.com/jquery-3.3.1.js"></script>
  </head>
  <body>
  ​
  <p>Hello</p>
  <p>and</p>
  <p>Goodbye</p>
  ​
  <script>
  $( "p:last" ).addClass( "selected highlight" );
  </script>
  ​
  </body>
  </html>
  ```
    * @example ​ ````Pass in a function to .addClass() to add the &quot;green&quot; class to a div that already has a &quot;red&quot; class.
  ```html
  <!doctype html>
  <html lang="en">
  <head>
    <meta charset="utf-8">
    <title>addClass demo</title>
    <style>
    div {
    background: white;
    }
    .red {
    background: red;
    }
    .red.green {
    background: green;
    }
    </style>
    <script src="https://code.jquery.com/jquery-3.3.1.js"></script>
  </head>
  <body>
  ​
    <div>This div should be white</div>
    <div class="red">This div will be green because it now has the "green" and "red" classes.
    It would be red if the addClass function failed.</div>
    <div>This div should be white</div>
    <p>There are zero green divs</p>
  ​
  <script>
  $( "div" ).addClass(function( index, currentClass ) {
    var addedClass;
  ​
    if ( currentClass === "red" ) {
    addedClass = "green";
    $( "p" ).text( "There is one green div" );
    }
  ​
    return addedClass;
  });
  </script>
  ​
  </body>
  </html>
  ```
    */
  def addClass(className_function: TypeOrArray[String]): this.type = js.native
  
  /**
    * Insert content, specified by the parameter, after each element in the set of matched elements.
    * @param contents One or more additional DOM elements, text nodes, arrays of elements and text nodes, HTML strings, or
    *                 jQuery objects to insert after each element in the set of matched elements.
    * @see \`{@link https://api.jquery.com/after/ }\`
    * @since 1.0
    * @example ​ ````Inserts some HTML after all paragraphs.
  ```html
  <!doctype html>
  <html lang="en">
  <head>
    <meta charset="utf-8">
    <title>after demo</title>
    <style>
    p {
    background: yellow;
    }
    </style>
    <script src="https://code.jquery.com/jquery-3.3.1.js"></script>
  </head>
  <body>
  ​
  <p>I would like to say: </p>
  ​
  <script>
  $( "p" ).after( "<b>Hello</b>" );
  </script>
  ​
  </body>
  </html>
  ```
    * @example ​ ````Inserts a DOM element after all paragraphs.
  ```html
  <!doctype html>
  <html lang="en">
  <head>
    <meta charset="utf-8">
    <title>after demo</title>
    <style>
    p {
    background: yellow;
    }
    </style>
    <script src="https://code.jquery.com/jquery-3.3.1.js"></script>
  </head>
  <body>
  ​
  <p>I would like to say: </p>
  ​
  <script>
  $( "p" ).after( document.createTextNode( "Hello" ) );
  </script>
  ​
  </body>
  </html>
  ```
    * @example ​ ````Inserts a jQuery object (similar to an Array of DOM Elements) after all paragraphs.
  ```html
  <!doctype html>
  <html lang="en">
  <head>
    <meta charset="utf-8">
    <title>after demo</title>
    <style>
    p {
    background: yellow;
    }
    </style>
    <script src="https://code.jquery.com/jquery-3.3.1.js"></script>
  </head>
  <body>
  ​
  <b>Hello</b>
  <p>I would like to say: </p>
  ​
  <script>
  $( "p" ).after( $( "b" ) );
  </script>
  ​
  </body>
  </html>
  ```
    */
  def after(contents: (htmlString | (TypeOrArray[Node | JQuery[Node]]))*): this.type = js.native
  /**
    * Insert content, specified by the parameter, after each element in the set of matched elements.
    * @param function_functionｰhtml _&#x40;param_ `function_functionｰhtml`
    * <br>
    * * `function` — A function that returns an HTML string, DOM element(s), text node(s), or jQuery object to insert
    *                after each element in the set of matched elements. Receives the index position of the element in the
    *                set as an argument. Within the function, `this` refers to the current element in the set. <br>
    * * `functionｰhtml` — A function that returns an HTML string, DOM element(s), text node(s), or jQuery object to insert
    *                     after each element in the set of matched elements. Receives the index position of the element in the
    *                     set and the old HTML value of the element as arguments. Within the function, `this` refers to the
    *                     current element in the set.
    * @see \`{@link https://api.jquery.com/after/ }\`
    * @since 1.4
    * @since 1.10
    */
  def after(
    function_functionｰhtml: js.ThisFunction2[
      /* this */ TElement, 
      /* index */ Double, 
      /* html */ String, 
      htmlString | (TypeOrArray[Node | JQuery[Node]])
    ]
  ): this.type = js.native
  
  /**
    * Register a handler to be called when Ajax requests complete. This is an AjaxEvent.
    * @param handler The function to be invoked.
    * @see \`{@link https://api.jquery.com/ajaxComplete/ }\`
    * @since 1.0
    * @example ​ ````Show a message when an Ajax request completes.
  ```javascript
  $( document ).ajaxComplete(function( event, request, settings ) {
    $( "#msg" ).append( "<li>Request Complete.</li>" );
  });
  ```
    */
  @JSName("ajaxComplete")
  def ajaxComplete_false(
    handler: js.ThisFunction3[
      /* this */ Document, 
      /* event */ TriggeredEvent[Document, js.UndefOr[scala.Nothing], Document, Document], 
      /* jqXHR */ jqXHR[_], 
      /* ajaxOptions */ AjaxSettings[_], 
      Unit | `false`
    ]
  ): this.type = js.native
  
  /**
    * Register a handler to be called when Ajax requests complete with an error. This is an Ajax Event.
    * @param handler The function to be invoked.
    * @see \`{@link https://api.jquery.com/ajaxError/ }\`
    * @since 1.0
    * @example ​ ````Show a message when an Ajax request fails.
  ```javascript
  $( document ).ajaxError(function( event, request, settings ) {
    $( "#msg" ).append( "<li>Error requesting page " + settings.url + "</li>" );
  });
  ```
    */
  @JSName("ajaxError")
  def ajaxError_false(
    handler: js.ThisFunction4[
      /* this */ Document, 
      /* event */ TriggeredEvent[Document, js.UndefOr[scala.Nothing], Document, Document], 
      /* jqXHR */ jqXHR[_], 
      /* ajaxSettings */ AjaxSettings[_], 
      /* thrownError */ String, 
      Unit | `false`
    ]
  ): this.type = js.native
  
  /**
    * Attach a function to be executed before an Ajax request is sent. This is an Ajax Event.
    * @param handler The function to be invoked.
    * @see \`{@link https://api.jquery.com/ajaxSend/ }\`
    * @since 1.0
    * @example ​ ````Show a message before an Ajax request is sent.
  ```javascript
  $( document ).ajaxSend(function( event, request, settings ) {
    $( "#msg" ).append( "<li>Starting request at " + settings.url + "</li>" );
  });
  ```
    */
  @JSName("ajaxSend")
  def ajaxSend_false(
    handler: js.ThisFunction3[
      /* this */ Document, 
      /* event */ TriggeredEvent[Document, js.UndefOr[scala.Nothing], Document, Document], 
      /* jqXHR */ jqXHR[_], 
      /* ajaxOptions */ AjaxSettings[_], 
      Unit | `false`
    ]
  ): this.type = js.native
  
  /**
    * Register a handler to be called when the first Ajax request begins. This is an Ajax Event.
    * @param handler The function to be invoked.
    * @see \`{@link https://api.jquery.com/ajaxStart/ }\`
    * @since 1.0
    * @example ​ ````Show a loading message whenever an Ajax request starts (and none is already active).
  ```javascript
  $( document ).ajaxStart(function() {
    $( "#loading" ).show();
  });
  ```
    */
  @JSName("ajaxStart")
  def ajaxStart_false(handler: js.ThisFunction0[/* this */ Document, Unit | `false`]): this.type = js.native
  
  /**
    * Register a handler to be called when all Ajax requests have completed. This is an Ajax Event.
    * @param handler The function to be invoked.
    * @see \`{@link https://api.jquery.com/ajaxStop/ }\`
    * @since 1.0
    * @example ​ ````Hide a loading message after all the Ajax requests have stopped.
  ```javascript
  $( document ).ajaxStop(function() {
    $( "#loading" ).hide();
  });
  ```
    */
  @JSName("ajaxStop")
  def ajaxStop_false(handler: js.ThisFunction0[/* this */ Document, Unit | `false`]): this.type = js.native
  
  /**
    * Attach a function to be executed whenever an Ajax request completes successfully. This is an Ajax Event.
    * @param handler The function to be invoked.
    * @see \`{@link https://api.jquery.com/ajaxSuccess/ }\`
    * @since 1.0
    * @example ​ ````Show a message when an Ajax request completes successfully.
  ```javascript
  $( document ).ajaxSuccess(function( event, request, settings ) {
    $( "#msg" ).append( "<li>Successful Request!</li>" );
  });
  ```
    */
  @JSName("ajaxSuccess")
  def ajaxSuccess_false(
    handler: js.ThisFunction4[
      /* this */ Document, 
      /* event */ TriggeredEvent[Document, js.UndefOr[scala.Nothing], Document, Document], 
      /* jqXHR */ jqXHR[_], 
      /* ajaxOptions */ AjaxSettings[_], 
      /* data */ PlainObject[_], 
      Unit | `false`
    ]
  ): this.type = js.native
  
  /**
    * Perform a custom animation of a set of CSS properties.
    * @param properties An object of CSS properties and values that the animation will move toward.
    * @param complete A function to call once the animation is complete, called once per matched element.
    * @see \`{@link https://api.jquery.com/animate/ }\`
    * @since 1.0
    */
  def animate(properties: PlainObject[_]): this.type = js.native
  def animate(properties: PlainObject[_], complete: js.ThisFunction0[/* this */ TElement, Unit]): this.type = js.native
  def animate(properties: PlainObject[_], duration_easing: String): this.type = js.native
  def animate(
    properties: PlainObject[_],
    duration_easing: String,
    complete: js.ThisFunction0[/* this */ TElement, Unit]
  ): this.type = js.native
  /**
    * Perform a custom animation of a set of CSS properties.
    * @param properties An object of CSS properties and values that the animation will move toward.
    * @param duration_easing _&#x40;param_ `duration_easing`
    * <br>
    * * `duration` — A string or number determining how long the animation will run. <br>
    * * `easing` — A string indicating which easing function to use for the transition.
    * @param complete A function to call once the animation is complete, called once per matched element.
    * @see \`{@link https://api.jquery.com/animate/ }\`
    * @since 1.0
    * @example ​ ````Click the button to animate the div with a number of different properties.
  ```html
  <!doctype html>
  <html lang="en">
  <head>
    <meta charset="utf-8">
    <title>animate demo</title>
    <style>
    div {
    background-color: #bca;
    width: 100px;
    border: 1px solid green;
    }
    </style>
    <script src="https://code.jquery.com/jquery-3.3.1.js"></script>
  </head>
  <body>
  ​
  <button id="go">&raquo; Run</button>
  <div id="block">Hello!</div>
  ​
  <script>
  // Using multiple unit types within one animation.
  ​
  $( "#go" ).click(function() {
    $( "#block" ).animate({
    width: "70%",
    opacity: 0.4,
    marginLeft: "0.6in",
    fontSize: "3em",
    borderWidth: "10px"
    }, 1500 );
  });
  </script>
  ​
  </body>
  </html>
  ```
    * @example ​ ````Animates a div&#39;s left property with a relative value. Click several times on the buttons to see the relative animations queued up.
  ```html
  <!doctype html>
  <html lang="en">
  <head>
    <meta charset="utf-8">
    <title>animate demo</title>
    <style>
    div {
    position: absolute;
    background-color: #abc;
    left: 50px;
    width: 90px;
    height: 90px;
    margin: 5px;
    }
    </style>
    <script src="https://code.jquery.com/jquery-3.3.1.js"></script>
  </head>
  <body>
  ​
  <button id="left">&laquo;</button>
  <button id="right">&raquo;</button>
  <div class="block"></div>
  ​
  <script>
  $( "#right" ).click(function() {
    $( ".block" ).animate({ "left": "+=50px" }, "slow" );
  });
  ​
  $( "#left" ).click(function(){
    $( ".block" ).animate({ "left": "-=50px" }, "slow" );
  });
  </script>
  ​
  </body>
  </html>
  ```
    * @example ​ ````Animate all paragraphs to toggle both height and opacity, completing the animation within 600 milliseconds.
  ```javascript
  $( "p" ).animate({
    height: "toggle",
    opacity: "toggle"
  }, "slow" );
  ```
    * @example ​ ````Animate all paragraphs to a left style of 50 and opacity of 1 (opaque, visible), completing the animation within 500 milliseconds.
  ```javascript
  $( "p" ).animate({
    left: 50,
    opacity: 1
  }, 500 );
  ```
    */
  def animate(properties: PlainObject[_], duration_easing: Duration): this.type = js.native
  def animate(
    properties: PlainObject[_],
    duration_easing: Duration,
    complete: js.ThisFunction0[/* this */ TElement, Unit]
  ): this.type = js.native
  /**
    * Perform a custom animation of a set of CSS properties.
    * @param properties An object of CSS properties and values that the animation will move toward.
    * @param duration A string or number determining how long the animation will run.
    * @param easing A string indicating which easing function to use for the transition.
    * @param complete A function to call once the animation is complete, called once per matched element.
    * @see \`{@link https://api.jquery.com/animate/ }\`
    * @since 1.0
    * @example ​ ````An example of using an &#39;easing&#39; function to provide a different style of animation. This will only work if you have a plugin that provides this easing function.  Note, this code will do nothing unless the paragraph element is hidden.
  ```javascript
  $( "p" ).animate({
    opacity: "show"
  }, "slow", "easein" );
  ```
    * @example ​ ````Animate all paragraphs and execute a callback function when the animation is complete.  The first argument is an object of CSS properties, the second specifies that the animation should take 1000 milliseconds to complete, the third states the easing type, and the fourth argument is an anonymous callback function.
  ```javascript
  $( "p" ).animate({
    height: 200,
    width: 400,
    opacity: 0.5
  }, 1000, "linear", function() {
    alert( "all done" );
  });
  ```
    */
  def animate(properties: PlainObject[_], duration: Duration, easing: String): this.type = js.native
  def animate(
    properties: PlainObject[_],
    duration: Duration,
    easing: String,
    complete: js.ThisFunction0[/* this */ TElement, Unit]
  ): this.type = js.native
  /**
    * Perform a custom animation of a set of CSS properties.
    * @param properties An object of CSS properties and values that the animation will move toward.
    * @param options A map of additional options to pass to the method.
    * @see \`{@link https://api.jquery.com/animate/ }\`
    * @since 1.0
    * @example ​ ````The first button shows how an unqueued animation works.  It expands the div out to 90% width while the font-size is increasing. Once the font-size change is complete, the border animation will begin.
  The second button starts a traditional chained animation, where each animation will start once the previous animation on the element has completed.
  ```html
  <!doctype html>
  <html lang="en">
  <head>
    <meta charset="utf-8">
    <title>animate demo</title>
    <style>
    div {
    background-color: #bca;
    width: 200px;
    height: 1.1em;
    text-align: center;
    border: 2px solid green;
    margin: 3px;
    font-size: 14px;
    }
    button {
    font-size: 14px;
    }
    </style>
    <script src="https://code.jquery.com/jquery-3.3.1.js"></script>
  </head>
  <body>
  ​
  <button id="go1">&raquo; Animate Block1</button>
  <button id="go2">&raquo; Animate Block2</button>
  <button id="go3">&raquo; Animate Both</button>
  <button id="go4">&raquo; Reset</button>
  <div id="block1">Block1</div>
  <div id="block2">Block2</div>
  ​
  <script>
  $( "#go1" ).click(function() {
    $( "#block1" )
    .animate({
    width: "90%"
    }, {
    queue: false,
    duration: 3000
    })
    .animate({ fontSize: "24px" }, 1500 )
    .animate({ borderRightWidth: "15px" }, 1500 );
  });
  ​
  $( "#go2" ).click(function() {
    $( "#block2" )
    .animate({ width: "90%" }, 1000 )
    .animate({ fontSize: "24px" }, 1000 )
    .animate({ borderLeftWidth: "15px" }, 1000 );
  });
  ​
  $( "#go3" ).click(function() {
    $( "#go1" ).add( "#go2" ).click();
  });
  ​
  $( "#go4" ).click(function() {
    $( "div" ).css({
    width: "",
    fontSize: "",
    borderWidth: ""
    });
  });
  </script>
  ​
  </body>
  </html>
  ```
    * @example ​ ````Animates the first div&#39;s left property and synchronizes the remaining divs, using the step function to set their left properties at each stage of the animation.
  ```html
  <!doctype html>
  <html lang="en">
  <head>
    <meta charset="utf-8">
    <title>animate demo</title>
    <style>
    div {
    position: relative;
    background-color: #abc;
    width: 40px;
    height: 40px;
    float: left;
    margin: 5px;
    }
    </style>
    <script src="https://code.jquery.com/jquery-3.3.1.js"></script>
  </head>
  <body>
  ​
  <p><button id="go">Run »</button></p>
  <div class="block"></div>
  <div class="block"></div>
  <div class="block"></div>
  <div class="block"></div>
  <div class="block"></div>
  <div class="block"></div>
  ​
  <script>
  $( "#go" ).click(function() {
    $( ".block:first" ).animate({
    left: 100
    }, {
    duration: 1000,
    step: function( now, fx ){
    $( ".block:gt(0)" ).css( "left", now );
    }
    });
  });
  </script>
  ​
  </body>
  </html>
  ```
    * @example ​ ````Animate the left and opacity style properties of all paragraphs; run the animation outside the queue, so that it will automatically start without waiting for its turn.
  ```javascript
  $( "p" ).animate({
    left: "50px",
    opacity: 1
  }, {
    duration: 500,
    queue: false
  });
  ```
    * @example ​ ````Animates all paragraphs to toggle both height and opacity, completing the animation within 600 milliseconds.
  ```javascript
  $( "p" ).animate({
    height: "toggle",
    opacity: "toggle"
  }, {
    duration: "slow"
  });
  ```
    * @example ​ ````Use an easing function to provide a different style of animation. This will only work if you have a plugin that provides this easing function.
  ```javascript
  $( "p" ).animate({
    opacity: "show"
  }, {
    duration: "slow",
    easing: "easein"
  });
  ```
    */
  def animate(properties: PlainObject[_], options: EffectsOptions[TElement]): this.type = js.native
  
  /**
    * Insert content, specified by the parameter, to the end of each element in the set of matched elements.
    * @param contents One or more additional DOM elements, text nodes, arrays of elements and text nodes, HTML strings, or
    *                 jQuery objects to insert at the end of each element in the set of matched elements.
    * @see \`{@link https://api.jquery.com/append/ }\`
    * @since 1.0
    * @example ​ ````Appends some HTML to all paragraphs.
  ```html
  <!doctype html>
  <html lang="en">
  <head>
    <meta charset="utf-8">
    <title>append demo</title>
    <style>
    p {
    background: yellow;
    }
    </style>
    <script src="https://code.jquery.com/jquery-3.3.1.js"></script>
  </head>
  <body>
  ​
  <p>I would like to say: </p>
  ​
  <script>
  $( "p" ).append( "<strong>Hello</strong>" );
  </script>
  ​
  </body>
  </html>
  ```
    * @example ​ ````Appends an Element to all paragraphs.
  ```html
  <!doctype html>
  <html lang="en">
  <head>
    <meta charset="utf-8">
    <title>append demo</title>
    <style>
    p {
    background: yellow;
    }
    </style>
    <script src="https://code.jquery.com/jquery-3.3.1.js"></script>
  </head>
  <body>
  ​
  <p>I would like to say: </p>
  ​
  <script>
  $( "p" ).append( document.createTextNode( "Hello" ) );
  </script>
  ​
  </body>
  </html>
  ```
    * @example ​ ````Appends a jQuery object (similar to an Array of DOM Elements) to all paragraphs.
  ```html
  <!doctype html>
  <html lang="en">
  <head>
    <meta charset="utf-8">
    <title>append demo</title>
    <style>
    p {
    background: yellow;
    }
    </style>
    <script src="https://code.jquery.com/jquery-3.3.1.js"></script>
  </head>
  <body>
  ​
  <strong>Hello world!!!</strong>
  <p>I would like to say: </p>
  ​
  <script>
  $( "p" ).append( $( "strong" ) );
  </script>
  ​
  </body>
  </html>
  ```
    */
  def append(contents: (htmlString | (TypeOrArray[Node | JQuery[Node]]))*): this.type = js.native
  /**
    * Insert content, specified by the parameter, to the end of each element in the set of matched elements.
    * @param funсtion A function that returns an HTML string, DOM element(s), text node(s), or jQuery object to insert at
    *                 the end of each element in the set of matched elements. Receives the index position of the element
    *                 in the set and the old HTML value of the element as arguments. Within the function, `this` refers to
    *                 the current element in the set.
    * @see \`{@link https://api.jquery.com/append/ }\`
    * @since 1.4
    */
  def append(
    funсtion: js.ThisFunction2[
      /* this */ TElement, 
      /* index */ Double, 
      /* html */ String, 
      htmlString | (TypeOrArray[Node | JQuery[Node]])
    ]
  ): this.type = js.native
  
  /**
    * Insert every element in the set of matched elements to the end of the target.
    * @param target A selector, element, HTML string, array of elements, or jQuery object; the matched set of elements
    *               will be inserted at the end of the element(s) specified by this parameter.
    * @see \`{@link https://api.jquery.com/appendTo/ }\`
    * @since 1.0
    * @example ​ ````Append all spans to the element with the ID &quot;foo&quot; (Check append() documentation for more examples)
  ```html
  <!doctype html>
  <html lang="en">
  <head>
    <meta charset="utf-8">
    <title>appendTo demo</title>
    <style>
    #foo {
    background: yellow;
    }
    </style>
    <script src="https://code.jquery.com/jquery-3.3.1.js"></script>
  </head>
  <body>
  ​
  <span>I have nothing more to say... </span>
  ​
  <div id="foo">FOO! </div>
  ​
  <script>
  $( "span" ).appendTo( "#foo" );
  </script>
  ​
  </body>
  </html>
  ```
    */
  def appendTo(target: Selector | (TypeOrArray[Element | DocumentFragment]) | htmlString): this.type = js.native
  def appendTo(target: JQuery[HTMLElement]): this.type = js.native
  
  /**
    * Set one or more attributes for the set of matched elements.
    * @param attributeName The name of the attribute to set.
    * @param value_function _&#x40;param_ `value_function`
    * <br>
    * * `value` — A value to set for the attribute. If `null`, the specified attribute will be removed (as in \`{@link removeAttr .removeAttr()}`). <br>
    * * `function` — A function returning the value to set. `this` is the current element. Receives the index position of
    *                the element in the set and the old attribute value as arguments.
    * @see \`{@link https://api.jquery.com/attr/ }\`
    * @since 1.0
    * @since 1.1
    * @example ​ ````Set the id for divs based on the position in the page.
  ```html
  <!doctype html>
  <html lang="en">
  <head>
    <meta charset="utf-8">
    <title>attr demo</title>
    <style>
    div {
    color: blue;
    }
    span {
    color: red;
    }
    b {
    font-weight: bolder;
    }
    </style>
    <script src="https://code.jquery.com/jquery-3.3.1.js"></script>
  </head>
  <body>
  ​
  <div>Zero-th <span></span></div>
  <div>First <span></span></div>
  <div>Second <span></span></div>
  ​
  <script>
  $( "div" )
    .attr( "id", function( arr ) {
    return "div-id" + arr;
    })
    .each(function() {
    $( "span", this ).html( "(id = '<b>" + this.id + "</b>')" );
  });
  </script>
  ​
  </body>
  </html>
  ```
    * @example ​ ````Set the src attribute from title attribute on the image.
  ```html
  <!doctype html>
  <html lang="en">
  <head>
    <meta charset="utf-8">
    <title>attr demo</title>
    <script src="https://code.jquery.com/jquery-3.3.1.js"></script>
  </head>
  <body>
  ​
  <img title="hat.gif">
  ​
  <script>
  $( "img" ).attr( "src", function() {
    return "/resources/" + this.title;
  });
  </script>
  ​
  </body>
  </html>
  ```
    */
  def attr(attributeName: String): this.type = js.native
  def attr(attributeName: String, value_function: String): this.type = js.native
  def attr(
    attributeName: String,
    value_function: js.ThisFunction2[
      /* this */ TElement, 
      /* index */ Double, 
      /* attr */ String, 
      js.UndefOr[String | Double | Unit]
    ]
  ): this.type = js.native
  def attr(attributeName: String, value_function: Double): this.type = js.native
  /**
    * Set one or more attributes for the set of matched elements.
    * @param attributes An object of attribute-value pairs to set.
    * @see \`{@link https://api.jquery.com/attr/ }\`
    * @since 1.0
    * @example ​ ````Set some attributes for all &lt;img&gt;s in the page.
  ```html
  <!doctype html>
  <html lang="en">
  <head>
    <meta charset="utf-8">
    <title>attr demo</title>
    <style>
    img {
    padding: 10px;
    }
    div {
    color: red;
    font-size: 24px;
    }
    </style>
    <script src="https://code.jquery.com/jquery-3.3.1.js"></script>
  </head>
  <body>
  ​
  <img>
  <img>
  <img>
  ​
  <div><b>Attribute of Ajax</b></div>
  ​
  <script>
  $( "img" ).attr({
    src: "/resources/hat.gif",
    title: "jQuery",
    alt: "jQuery Logo"
  });
  $( "div" ).text( $( "img" ).attr( "alt" ) );
  </script>
  ​
  </body>
  </html>
  ```
    */
  def attr(attributes: PlainObject[_]): this.type = js.native
  /**
    * Get the value of an attribute for the first element in the set of matched elements.
    * @param attributeName The name of the attribute to get.
    * @see \`{@link https://api.jquery.com/attr/ }\`
    * @since 1.0
    * @example ​ ````Display the checked attribute and property of a checkbox as it changes.
  ```html
  <!doctype html>
  <html lang="en">
  <head>
    <meta charset="utf-8">
    <title>attr demo</title>
    <style>
    p {
    margin: 20px 0 0;
    }
    b {
    color: blue;
    }
    </style>
    <script src="https://code.jquery.com/jquery-3.3.1.js"></script>
  </head>
  <body>
  ​
  <input id="check1" type="checkbox" checked="checked">
  <label for="check1">Check me</label>
  <p></p>
  ​
  <script>
  $( "input" )
    .change(function() {
    var $input = $( this );
    $( "p" ).html( ".attr( 'checked' ): <b>" + $input.attr( "checked" ) + "</b><br>" +
    ".prop( 'checked' ): <b>" + $input.prop( "checked" ) + "</b><br>" +
    ".is( ':checked' ): <b>" + $input.is( ":checked" ) + "</b>" );
    })
    .change();
  </script>
  ​
  </body>
  </html>
  ```
    * @example ​ ````Find the title attribute of the first &lt;em&gt; in the page.
  ```html
  <!doctype html>
  <html lang="en">
  <head>
    <meta charset="utf-8">
    <title>attr demo</title>
    <style>
    em {
    color: blue;
    font-weight: bold;
    }
    div {
    color: red;
    }
    </style>
    <script src="https://code.jquery.com/jquery-3.3.1.js"></script>
  </head>
  <body>
  ​
  <p>Once there was a <em title="huge, gigantic">large</em> dinosaur...</p>
  ​
  The title of the emphasis is:<div></div>
  ​
  <script>
  var title = $( "em" ).attr( "title" );
  $( "div" ).text( title );
  </script>
  ​
  </body>
  </html>
  ```
    */
  @JSName("attr")
  def attr_Union(attributeName: String): js.UndefOr[String] = js.native
  
  /**
    * Insert content, specified by the parameter, before each element in the set of matched elements.
    * @param contents One or more additional DOM elements, text nodes, arrays of elements and text nodes, HTML strings, or
    *                 jQuery objects to insert before each element in the set of matched elements.
    * @see \`{@link https://api.jquery.com/before/ }\`
    * @since 1.0
    * @example ​ ````Inserts some HTML before all paragraphs.
  ```html
  <!doctype html>
  <html lang="en">
  <head>
    <meta charset="utf-8">
    <title>before demo</title>
    <style>
    p {
    background: yellow;
    }
    </style>
    <script src="https://code.jquery.com/jquery-3.3.1.js"></script>
  </head>
  <body>
  ​
  <p> is what I said...</p>
  ​
  <script>
  $( "p" ).before( "<b>Hello</b>" );
  </script>
  ​
  </body>
  </html>
  ```
    * @example ​ ````Inserts a DOM element before all paragraphs.
  ```html
  <!doctype html>
  <html lang="en">
  <head>
    <meta charset="utf-8">
    <title>before demo</title>
    <style>
    p {
    background: yellow;
    }
    </style>
    <script src="https://code.jquery.com/jquery-3.3.1.js"></script>
  </head>
  <body>
  ​
  <p> is what I said...</p>
  ​
  <script>
  $( "p" ).before( document.createTextNode( "Hello" ) );
  </script>
  ​
  </body>
  </html>
  ```
    * @example ​ ````Inserts a jQuery object (similar to an Array of DOM Elements) before all paragraphs.
  ```html
  <!doctype html>
  <html lang="en">
  <head>
    <meta charset="utf-8">
    <title>before demo</title>
    <style>
    p {
    background: yellow;
    }
    </style>
    <script src="https://code.jquery.com/jquery-3.3.1.js"></script>
  </head>
  <body>
  ​
  <p> is what I said...</p><b>Hello</b>
  ​
  <script>
  $( "p" ).before( $( "b" ) );
  </script>
  ​
  </body>
  </html>
  ```
    */
  def before(contents: (htmlString | (TypeOrArray[Node | JQuery[Node]]))*): this.type = js.native
  /**
    * Insert content, specified by the parameter, before each element in the set of matched elements.
    * @param function_functionｰhtml _&#x40;param_ `function_functionｰhtml`
    * <br>
    * * `function` — A function that returns an HTML string, DOM element(s), text node(s), or jQuery object to insert
    *                before each element in the set of matched elements. Receives the index position of the element in
    *                the set as an argument. Within the function, `this` refers to the current element in the set. <br>
    * * `functionｰhtml` — A function that returns an HTML string, DOM element(s), text node(s), or jQuery object to insert
    *                     before each element in the set of matched elements. Receives the index position of the element in
    *                     the set and the old HTML value of the element as arguments. Within the function, `this` refers to the
    *                     current element in the set.
    * @see \`{@link https://api.jquery.com/before/ }\`
    * @since 1.4
    * @since 1.10
    */
  def before(
    function_functionｰhtml: js.ThisFunction2[
      /* this */ TElement, 
      /* index */ Double, 
      /* html */ String, 
      htmlString | (TypeOrArray[Node | JQuery[Node]])
    ]
  ): this.type = js.native
  
  /**
    * Attach a handler to an event for the elements.
    * @param events An object containing one or more DOM event types and functions to execute for them.
    * @see \`{@link https://api.jquery.com/bind/ }\`
    * @since 1.4
    * @deprecated ​ Deprecated since 3.0. Use \`{@link on }\`.
    *
    * **Cause**: These event binding methods have been deprecated in favor of the `.on()` and `.off()` methods which can handle both delegated and direct event binding. Although the older methods are still present in jQuery 3.0, they may be removed as early as the next major-version update.
    *
    * **Solution**: Change the method call to use `.on()` or `.off()`, the documentation for the old methods include specific instructions. In general, the `.bind()` and `.unbind()` methods can be renamed directly to `.on()` and `.off()` respectively since the argument orders are identical.
    * @example ​ ````Bind multiple events simultaneously.
  ```javascript
  $( "div.test" ).bind({
    click: function() {
    $( this ).addClass( "active" );
    },
    mouseenter: function() {
    $( this ).addClass( "inside" );
    },
    mouseleave: function() {
    $( this ).removeClass( "inside" );
    }
  });
  ```
    */
  def bind(events: TypeEventHandlers[TElement, js.UndefOr[scala.Nothing], TElement, TElement]): this.type = js.native
  /**
    * Attach a handler to an event for the elements.
    * @param eventType A string containing one or more DOM event types, such as "click" or "submit," or custom event names.
    * @param handler_preventBubble _&#x40;param_ `handler_preventBubble`
    * <br>
    * * `handler` — A function to execute each time the event is triggered. <br>
    * * `preventBubble` — Setting the third argument to false will attach a function that prevents the default action from
    *                     occurring and stops the event from bubbling. The default is `true`.
    * @see \`{@link https://api.jquery.com/bind/ }\`
    * @since 1.0
    * @since 1.4.3
    * @deprecated ​ Deprecated since 3.0. Use \`{@link on }\`.
    *
    * **Cause**: These event binding methods have been deprecated in favor of the `.on()` and `.off()` methods which can handle both delegated and direct event binding. Although the older methods are still present in jQuery 3.0, they may be removed as early as the next major-version update.
    *
    * **Solution**: Change the method call to use `.on()` or `.off()`, the documentation for the old methods include specific instructions. In general, the `.bind()` and `.unbind()` methods can be renamed directly to `.on()` and `.off()` respectively since the argument orders are identical.
    * @example ​ ````Handle click and double-click for the paragraph.  Note: the coordinates are window relative, so in this case relative to the demo iframe.
  ```html
  <!doctype html>
  <html lang="en">
  <head>
    <meta charset="utf-8">
    <title>bind demo</title>
    <style>
    p {
    background: yellow;
    font-weight: bold;
    cursor: pointer;
    padding: 5px;
    }
    p.over {
    background: #ccc;
    }
    span {
    color: red;
    }
    </style>
    <script src="https://code.jquery.com/jquery-3.3.1.js"></script>
  </head>
  <body>
  ​
  <p>Click or double click here.</p>
  <span></span>
  ​
  <script>
  $( "p" ).bind( "click", function( event ) {
    var str = "( " + event.pageX + ", " + event.pageY + " )";
    $( "span" ).text( "Click happened! " + str );
  });
  $( "p" ).bind( "dblclick", function() {
    $( "span" ).text( "Double-click happened in " + this.nodeName );
  });
  $( "p" ).bind( "mouseenter mouseleave", function( event ) {
    $( this ).toggleClass( "over" );
  });
  </script>
  ​
  </body>
  </html>
  ```
    * @example ​ ````To display each paragraph&#39;s text in an alert box whenever it is clicked:
  ```javascript
  $( "p" ).bind( "click", function() {
    alert( $( this ).text() );
  });
  ```
    * @example ​ ````Cancel a default action and prevent it from bubbling up by returning false:
  ```javascript
  $( "form" ).bind( "submit", function() {
    return false;
  })
  ```
    * @example ​ ````Cancel only the default action by using the .preventDefault() method.
  ```javascript
  $( "form" ).bind( "submit", function( event ) {
    event.preventDefault();
  });
  ```
    * @example ​ ````Stop an event from bubbling without preventing the default action by using the .stopPropagation() method.
  ```javascript
  $( "form" ).bind( "submit", function( event ) {
    event.stopPropagation();
  });
  ```
    * @example ​ ````Bind custom events.
  ```html
  <!doctype html>
  <html lang="en">
  <head>
    <meta charset="utf-8">
    <title>bind demo</title>
    <style>
    p {
    color: red;
    }
    span {
    color: blue;
    }
    </style>
    <script src="https://code.jquery.com/jquery-3.3.1.js"></script>
  </head>
  <body>
  ​
  <p>Has an attached custom event.</p>
  <button>Trigger custom event</button>
  <span style="display: none;"></span>
  ​
  <script>
  $( "p" ).bind( "myCustomEvent", function( e, myName, myValue ) {
    $( this ).text( myName + ", hi there!" );
    $( "span" )
    .stop()
    .css( "opacity", 1 )
    .text( "myName = " + myName )
    .fadeIn( 30 )
    .fadeOut( 1000 );
    });
  $( "button" ).click(function() {
    $( "p" ).trigger( "myCustomEvent", [ "John" ] );
  });
  </script>
  ​
  </body>
  </html>
  ```
    */
  def bind[TType /* <: String */](eventType: TType): this.type = js.native
  def bind[TType /* <: String */](
    eventType: TType,
    handler_preventBubble: TypeEventHandler[TElement, js.UndefOr[scala.Nothing], TElement, TElement, TType]
  ): this.type = js.native
  // [bind() overloads] https://github.com/jquery/api.jquery.com/issues/1048
  /**
    * Attach a handler to an event for the elements.
    * @param eventType A string containing one or more DOM event types, such as "click" or "submit," or custom event names.
    * @param eventData An object containing data that will be passed to the event handler.
    * @param handler A function to execute each time the event is triggered.
    * @see \`{@link https://api.jquery.com/bind/ }\`
    * @since 1.0
    * @since 1.4.3
    * @deprecated ​ Deprecated since 3.0. Use \`{@link on }\`.
    *
    * **Cause**: These event binding methods have been deprecated in favor of the `.on()` and `.off()` methods which can handle both delegated and direct event binding. Although the older methods are still present in jQuery 3.0, they may be removed as early as the next major-version update.
    *
    * **Solution**: Change the method call to use `.on()` or `.off()`, the documentation for the old methods include specific instructions. In general, the `.bind()` and `.unbind()` methods can be renamed directly to `.on()` and `.off()` respectively since the argument orders are identical.
    */
  def bind[TType /* <: String */, TData](
    eventType: TType,
    eventData: TData,
    handler: TypeEventHandler[TElement, TData, TElement, TElement, TType]
  ): this.type = js.native
  @JSName("bind")
  def bind_false[TType /* <: String */](eventType: TType, handler_preventBubble: `false`): this.type = js.native
  
  /**
    * Bind an event handler to the "blur" JavaScript event, or trigger that event on an element.
    * @param handler A function to execute each time the event is triggered.
    * @see \`{@link https://api.jquery.com/blur/ }\`
    * @since 1.0
    * @deprecated ​ Deprecated since 3.3. Use \`{@link on }\` or \`{@link trigger }\`.
    *
    * **Cause**: The `.on()` and `.trigger()` methods can set an event handler or generate an event for any event type, and should be used instead of the shortcut methods. This message also applies to the other event shorthands, including: blur, focus, focusin, focusout, resize, scroll, dblclick, mousedown, mouseup, mousemove, mouseover, mouseout, mouseenter, mouseleave, change, select, submit, keydown, keypress, keyup, and contextmenu.
    *
    * **Solution**: Instead of `.click(fn)` use `.on("click", fn)`. Instead of `.click()` use `.trigger("click")`.
    * @example ​ ````To trigger the blur event on all paragraphs:
  ```javascript
  $( "p" ).blur();
  ```
    */
  def blur(): this.type = js.native
  @JSName("blur")
  def blur_blur(handler: TypeEventHandler[TElement, Null, TElement, TElement, blur]): this.type = js.native
  /**
    * Bind an event handler to the "blur" JavaScript event, or trigger that event on an element.
    * @param eventData An object containing data that will be passed to the event handler.
    * @param handler A function to execute each time the event is triggered.
    * @see \`{@link https://api.jquery.com/blur/ }\`
    * @since 1.4.3
    * @deprecated ​ Deprecated since 3.3. Use \`{@link on }\` or \`{@link trigger }\`.
    *
    * **Cause**: The `.on()` and `.trigger()` methods can set an event handler or generate an event for any event type, and should be used instead of the shortcut methods. This message also applies to the other event shorthands, including: blur, focus, focusin, focusout, resize, scroll, dblclick, mousedown, mouseup, mousemove, mouseover, mouseout, mouseenter, mouseleave, change, select, submit, keydown, keypress, keyup, and contextmenu.
    *
    * **Solution**: Instead of `.click(fn)` use `.on("click", fn)`. Instead of `.click()` use `.trigger("click")`.
    */
  @JSName("blur")
  def blur_blur[TData](eventData: TData, handler: TypeEventHandler[TElement, TData, TElement, TElement, blur]): this.type = js.native
  @JSName("blur")
  def blur_false(handler: `false`): this.type = js.native
  
  /**
    * Bind an event handler to the "change" JavaScript event, or trigger that event on an element.
    * @param handler A function to execute each time the event is triggered.
    * @see \`{@link https://api.jquery.com/change/ }\`
    * @since 1.0
    * @deprecated ​ Deprecated since 3.3. Use \`{@link on }\` or \`{@link trigger }\`.
    *
    * **Cause**: The `.on()` and `.trigger()` methods can set an event handler or generate an event for any event type, and should be used instead of the shortcut methods. This message also applies to the other event shorthands, including: blur, focus, focusin, focusout, resize, scroll, dblclick, mousedown, mouseup, mousemove, mouseover, mouseout, mouseenter, mouseleave, change, select, submit, keydown, keypress, keyup, and contextmenu.
    *
    * **Solution**: Instead of `.click(fn)` use `.on("click", fn)`. Instead of `.click()` use `.trigger("click")`.
    * @example ​ ````Attaches a change event to the select that gets the text for each selected option and writes them in the div.  It then triggers the event for the initial text draw.
  ```html
  <!doctype html>
  <html lang="en">
  <head>
    <meta charset="utf-8">
    <title>change demo</title>
    <style>
    div {
    color: red;
    }
    </style>
    <script src="https://code.jquery.com/jquery-3.3.1.js"></script>
  </head>
  <body>
  ​
  <select name="sweets" multiple="multiple">
    <option>Chocolate</option>
    <option selected="selected">Candy</option>
    <option>Taffy</option>
    <option selected="selected">Caramel</option>
    <option>Fudge</option>
    <option>Cookie</option>
  </select>
  <div></div>
  ​
  <script>
  $( "select" )
    .change(function () {
    var str = "";
    $( "select option:selected" ).each(function() {
    str += $( this ).text() + " ";
    });
    $( "div" ).text( str );
    })
    .change();
  </script>
  ​
  </body>
  </html>
  ```
    * @example ​ ````To add a validity test to all text input elements:
  ```javascript
  $( "input[type='text']" ).change(function() {
    // Check input( $( this ).val() ) for validity here
  });
  ```
    */
  def change(): this.type = js.native
  @JSName("change")
  def change_change(handler: TypeEventHandler[TElement, Null, TElement, TElement, change]): this.type = js.native
  /**
    * Bind an event handler to the "change" JavaScript event, or trigger that event on an element.
    * @param eventData An object containing data that will be passed to the event handler.
    * @param handler A function to execute each time the event is triggered.
    * @see \`{@link https://api.jquery.com/change/ }\`
    * @since 1.4.3
    * @deprecated ​ Deprecated since 3.3. Use \`{@link on }\` or \`{@link trigger }\`.
    *
    * **Cause**: The `.on()` and `.trigger()` methods can set an event handler or generate an event for any event type, and should be used instead of the shortcut methods. This message also applies to the other event shorthands, including: blur, focus, focusin, focusout, resize, scroll, dblclick, mousedown, mouseup, mousemove, mouseover, mouseout, mouseenter, mouseleave, change, select, submit, keydown, keypress, keyup, and contextmenu.
    *
    * **Solution**: Instead of `.click(fn)` use `.on("click", fn)`. Instead of `.click()` use `.trigger("click")`.
    */
  @JSName("change")
  def change_change[TData](eventData: TData, handler: TypeEventHandler[TElement, TData, TElement, TElement, change]): this.type = js.native
  @JSName("change")
  def change_false(handler: `false`): this.type = js.native
  
  /**
    * Get the children of each element in the set of matched elements, optionally filtered by a selector.
    * @param selector A string containing a selector expression to match elements against.
    * @see \`{@link https://api.jquery.com/children/ }\`
    * @since 1.0
    * @example ​ ````Find all children of the clicked element.
  ```html
  <!doctype html>
  <html lang="en">
  <head>
    <meta charset="utf-8">
    <title>children demo</title>
    <style>
    body {
    font-size: 16px;
    font-weight: bolder;
    }
    div {
    width: 130px;
    height: 82px;
    margin: 10px;
    float: left;
    border: 1px solid blue;
    padding: 4px;
    }
    #container {
    width: auto;
    height: 105px;
    margin: 0;
    float: none;
    border: none;
    }
    .hilite {
    border-color: red;
    }
    #results {
    display: block;
    color: red;
    }
    p, span, em, a, b, button {
    border: 1px solid transparent;
    }
    p {
    margin: 10px;
    }
    span {
    color: blue;
    }
    input {
    width: 100px;
    }
    </style>
    <script src="https://code.jquery.com/jquery-3.3.1.js"></script>
  </head>
  <body>
  ​
  <div id="container">
    <div>
    <p>This <span>is the <em>way</em> we</span>
    write <em>the</em> demo,</p>
    </div>
  ​
    <div>
    <a href="#"><b>w</b>rit<b>e</b></a> the <span>demo,</span> <button>write
    the</button> demo,
    </div>
  ​
    <div>
    This <span>the way we <em>write</em> the <em>demo</em> so</span>
    <input type="text" value="early"> in
    </div>
  ​
    <p>
    <span>t</span>he <span>m</span>orning.
    <span id="results">Found <span>0</span> children in <span>TAG</span>.</span>
    </p>
  </div>
  ​
  <script>
  $( "#container" ).click(function ( event ) {
    $( "*" ).removeClass( "hilite" );
    var kids = $( event.target ).children();
    var len = kids.addClass( "hilite" ).length;
  ​
    $( "#results span:first" ).text( len );
    $( "#results span:last" ).text( event.target.tagName );
  ​
    event.preventDefault();
  });
  </script>
  ​
  </body>
  </html>
  ```
    * @example ​ ````Find all children of each div.
  ```html
  <!doctype html>
  <html lang="en">
  <head>
    <meta charset="utf-8">
    <title>children demo</title>
    <style>
    body {
    font-size: 16px;
    font-weight: bolder;
    }
    span {
    color: blue;
    }
    p {
    margin: 5px 0;
    }
    </style>
    <script src="https://code.jquery.com/jquery-3.3.1.js"></script>
  </head>
  <body>
  ​
  <p>Hello (this is a paragraph)</p>
  ​
  <div><span>Hello Again (this span is a child of the a div)</span></div>
  <p>And <span>Again</span> (in another paragraph)</p>
  ​
  <div>And One Last <span>Time</span> (most text directly in a div)</div>
  ​
  <script>
  $( "div" ).children().css( "border-bottom", "3px double red" );
  </script>
  ​
  </body>
  </html>
  ```
    * @example ​ ````Find all children with a class &quot;selected&quot; of each div.
  ```html
  <!doctype html>
  <html lang="en">
  <head>
    <meta charset="utf-8">
    <title>children demo</title>
    <style>
    body {
    font-size: 16px;
    font-weight: bolder;
    }
    p {
    margin: 5px 0;
    }
    </style>
    <script src="https://code.jquery.com/jquery-3.3.1.js"></script>
  </head>
  <body>
  ​
  <div>
    <span>Hello</span>
    <p class="selected">Hello Again</p>
    <div class="selected">And Again</div>
    <p>And One Last Time</p>
  </div>
  ​
  <script>
  $( "div" ).children( ".selected" ).css( "color", "blue" );
  </script>
  ​
  </body>
  </html>
  ```
    */
  def children(): this.type = js.native
  def children(selector: Selector): this.type = js.native
  
  /**
    * Remove from the queue all items that have not yet been run.
    * @param queueName A string containing the name of the queue. Defaults to fx, the standard effects queue.
    * @see \`{@link https://api.jquery.com/clearQueue/ }\`
    * @since 1.4
    * @example ​ ````Empty the queue.
  ```html
  <!doctype html>
  <html lang="en">
  <head>
    <meta charset="utf-8">
    <title>clearQueue demo</title>
    <style>
    div {
    margin: 3px;
    width: 40px;
    height: 40px;
    position: absolute;
    left: 0px;
    top: 30px;
    background: green;
    display: none;
    }
    div.newcolor {
    background: blue;
    }
    </style>
    <script src="https://code.jquery.com/jquery-3.3.1.js"></script>
  </head>
  <body>
  ​
  <button id="start">Start</button>
  <button id="stop">Stop</button>
  <div></div>
  ​
  <script>
  $( "#start" ).click(function() {
    var myDiv = $( "div" );
    myDiv.show( "slow" );
    myDiv.animate({
    left:"+=200"
    }, 5000 );
  ​
    myDiv.queue(function() {
    var that = $( this );
    that.addClass( "newcolor" );
    that.dequeue();
    });
  ​
    myDiv.animate({
    left:"-=200"
    }, 1500 );
    myDiv.queue(function() {
    var that = $( this );
    that.removeClass( "newcolor" );
    that.dequeue();
    });
    myDiv.slideUp();
  });
  ​
  $( "#stop" ).click(function() {
    var myDiv = $( "div" );
    myDiv.clearQueue();
    myDiv.stop();
  });
  </script>
  ​
  </body>
  </html>
  ```
    */
  def clearQueue(): this.type = js.native
  def clearQueue(queueName: String): this.type = js.native
  
  /**
    * Bind an event handler to the "click" JavaScript event, or trigger that event on an element.
    * @param handler A function to execute each time the event is triggered.
    * @see \`{@link https://api.jquery.com/click/ }\`
    * @since 1.0
    * @deprecated ​ Deprecated since 3.3. Use \`{@link on }\` or \`{@link trigger }\`.
    *
    * **Cause**: The `.on()` and `.trigger()` methods can set an event handler or generate an event for any event type, and should be used instead of the shortcut methods. This message also applies to the other event shorthands, including: blur, focus, focusin, focusout, resize, scroll, dblclick, mousedown, mouseup, mousemove, mouseover, mouseout, mouseenter, mouseleave, change, select, submit, keydown, keypress, keyup, and contextmenu.
    *
    * **Solution**: Instead of `.click(fn)` use `.on("click", fn)`. Instead of `.click()` use `.trigger("click")`.
    * @example ​ ````Hide paragraphs on a page when they are clicked:
  ```html
  <!doctype html>
  <html lang="en">
  <head>
    <meta charset="utf-8">
    <title>click demo</title>
    <style>
    p {
    color: red;
    margin: 5px;
    cursor: pointer;
    }
    p:hover {
    background: yellow;
    }
    </style>
    <script src="https://code.jquery.com/jquery-3.3.1.js"></script>
  </head>
  <body>
  ​
  <p>First Paragraph</p>
  <p>Second Paragraph</p>
  <p>Yet one more Paragraph</p>
  ​
  <script>
  $( "p" ).click(function() {
    $( this ).slideUp();
  });
  </script>
  ​
  </body>
  </html>
  ```
    * @example ​ ````Trigger the click event on all of the paragraphs on the page:
  ```javascript
  $( "p" ).click();
  ```
    */
  def click(): this.type = js.native
  @JSName("click")
  def click_click(handler: TypeEventHandler[TElement, Null, TElement, TElement, click]): this.type = js.native
  /**
    * Bind an event handler to the "click" JavaScript event, or trigger that event on an element.
    * @param eventData An object containing data that will be passed to the event handler.
    * @param handler A function to execute each time the event is triggered.
    * @see \`{@link https://api.jquery.com/click/ }\`
    * @since 1.4.3
    * @deprecated ​ Deprecated since 3.3. Use \`{@link on }\` or \`{@link trigger }\`.
    *
    * **Cause**: The `.on()` and `.trigger()` methods can set an event handler or generate an event for any event type, and should be used instead of the shortcut methods. This message also applies to the other event shorthands, including: blur, focus, focusin, focusout, resize, scroll, dblclick, mousedown, mouseup, mousemove, mouseover, mouseout, mouseenter, mouseleave, change, select, submit, keydown, keypress, keyup, and contextmenu.
    *
    * **Solution**: Instead of `.click(fn)` use `.on("click", fn)`. Instead of `.click()` use `.trigger("click")`.
    */
  @JSName("click")
  def click_click[TData](eventData: TData, handler: TypeEventHandler[TElement, TData, TElement, TElement, click]): this.type = js.native
  @JSName("click")
  def click_false(handler: `false`): this.type = js.native
  
  def clone(withDataAndEvents: js.UndefOr[scala.Nothing], deepWithDataAndEvents: Boolean): this.type = js.native
  def clone(withDataAndEvents: Boolean): this.type = js.native
  def clone(withDataAndEvents: Boolean, deepWithDataAndEvents: Boolean): this.type = js.native
  
  def closest(selector_selection_element: Element): this.type = js.native
  def closest(selector_selection_element: JQuery[HTMLElement]): this.type = js.native
  /**
    * For each element in the set, get the first element that matches the selector by testing the element itself and traversing up through its ancestors in the DOM tree.
    * @param selector_selection_element _&#x40;param_ `selector_selection_element`
    * <br>
    * * `selector` — A string containing a selector expression to match elements against. <br>
    * * `selection` — A jQuery object to match elements against. <br>
    * * `element` — An element to match elements against.
    * @see \`{@link https://api.jquery.com/closest/ }\`
    * @since 1.3
    * @since 1.6
    * @example ​ ````Show how event delegation can be done with closest. The closest list element toggles a yellow background when it or its descendent is clicked.
  ```html
  <!doctype html>
  <html lang="en">
  <head>
    <meta charset="utf-8">
    <title>closest demo</title>
    <style>
    li {
    margin: 3px;
    padding: 3px;
    background: #EEEEEE;
    }
    li.highlight {
    background: yellow;
    }
    </style>
    <script src="https://code.jquery.com/jquery-3.3.1.js"></script>
  </head>
  <body>
  ​
  <ul>
    <li><b>Click me!</b></li>
    <li>You can also <b>Click me!</b></li>
  </ul>
  ​
  <script>
  $( document ).on( "click", function( event ) {
    $( event.target ).closest( "li" ).toggleClass( "highlight" );
  });
  </script>
  ​
  </body>
  </html>
  ```
    * @example ​ ````Pass a jQuery object to closest. The closest list element toggles a yellow background when it or its descendent is clicked.
  ```html
  <!doctype html>
  <html lang="en">
  <head>
    <meta charset="utf-8">
    <title>closest demo</title>
    <style>
    li {
    margin: 3px;
    padding: 3px;
    background: #EEEEEE;
    }
    li.highlight {
    background: yellow;
    }
    </style>
    <script src="https://code.jquery.com/jquery-3.3.1.js"></script>
  </head>
  <body>
  ​
  <ul>
    <li><b>Click me!</b></li>
    <li>You can also <b>Click me!</b></li>
  </ul>
  ​
  <script>
  var listElements = $( "li" ).css( "color", "blue" );
  $( document ).on( "click", function( event ) {
    $( event.target ).closest( listElements ).toggleClass( "highlight" );
  });
  </script>
  ​
  </body>
  </html>
  ```
    */
  def closest(selector_selection_element: Selector): this.type = js.native
  /**
    * For each element in the set, get the first element that matches the selector by testing the element itself and traversing up through its ancestors in the DOM tree.
    * @param selector A string containing a selector expression to match elements against.
    * @param context A DOM element within which a matching element may be found.
    * @see \`{@link https://api.jquery.com/closest/ }\`
    * @since 1.4
    */
  def closest(selector: Selector, context: Element): this.type = js.native
  
  /**
    * Get the children of each element in the set of matched elements, including text and comment nodes.
    * @see \`{@link https://api.jquery.com/contents/ }\`
    * @since 1.2
    * @example ​ ````Find all the text nodes inside a paragraph and wrap them with a bold tag.
  ```html
  <!doctype html>
  <html lang="en">
  <head>
    <meta charset="utf-8">
    <title>contents demo</title>
    <script src="https://code.jquery.com/jquery-3.3.1.js"></script>
  </head>
  <body>
  ​
  <p>Hello <a href="https://johnresig.com/">John</a>, how are you doing?</p>
  ​
  <script>
  $( "p" )
    .contents()
    .filter(function(){
    return this.nodeType !== 1;
    })
    .wrap( "<b></b>" );
  </script>
  ​
  </body>
  </html>
  ```
    * @example ​ ````Change the background color of links inside of an iframe.
  ```html
  <!doctype html>
  <html lang="en">
  <head>
    <meta charset="utf-8">
    <title>contents demo</title>
    <script src="https://code.jquery.com/jquery-3.3.1.js"></script>
  </head>
  <body>
  ​
  <iframe src="https://api.jquery.com/" width="80%" height="600" id="frameDemo"></iframe>
  ​
  <script>
  $( "#frameDemo" ).contents().find( "a" ).css( "background-color", "#BADA55" );
  </script>
  ​
  </body>
  </html>
  ```
    */
  def contents(): JQuery[TElement | Text | Comment | Document] = js.native
  
  /**
    * Bind an event handler to the "contextmenu" JavaScript event, or trigger that event on an element.
    * @param handler A function to execute each time the event is triggered.
    * @see \`{@link https://api.jquery.com/contextmenu/ }\`
    * @since 1.0
    * @deprecated ​ Deprecated since 3.3. Use \`{@link on }\` or \`{@link trigger }\`.
    *
    * **Cause**: The `.on()` and `.trigger()` methods can set an event handler or generate an event for any event type, and should be used instead of the shortcut methods. This message also applies to the other event shorthands, including: blur, focus, focusin, focusout, resize, scroll, dblclick, mousedown, mouseup, mousemove, mouseover, mouseout, mouseenter, mouseleave, change, select, submit, keydown, keypress, keyup, and contextmenu.
    *
    * **Solution**: Instead of `.click(fn)` use `.on("click", fn)`. Instead of `.click()` use `.trigger("click")`.
    * @example ​ ````To show a &quot;Hello World!&quot; alert box when the contextmenu event is triggered on a paragraph on the page:
  ```javascript
  $( "p" ).contextmenu(function() {
    alert( "Hello World!" );
  });
  ```
    * @example ​ ````Right click to toggle background color.
  ```html
  <!doctype html>
  <html lang="en">
  <head>
    <meta charset="utf-8">
    <title>contextmenu demo</title>
    <style>
    div {
    background: blue;
    color: white;
    height: 100px;
    width: 150px;
    }
    div.contextmenu {
    background: yellow;
    color: black;
    }
    </style>
    <script src="https://code.jquery.com/jquery-3.3.1.js"></script>
  </head>
  <body>
  ​
  <div></div>
  <span>Right click the block</span>
  ​
  <script>
  var div = $( "div:first" );
  div.contextmenu(function() {
    div.toggleClass( "contextmenu" );
  });
  </script>
  ​
  </body>
  </html>
  ```
    */
  def contextmenu(): this.type = js.native
  @JSName("contextmenu")
  def contextmenu_contextmenu(handler: TypeEventHandler[TElement, Null, TElement, TElement, contextmenu]): this.type = js.native
  /**
    * Bind an event handler to the "contextmenu" JavaScript event, or trigger that event on an element.
    * @param eventData An object containing data that will be passed to the event handler.
    * @param handler A function to execute each time the event is triggered.
    * @see \`{@link https://api.jquery.com/contextmenu/ }\`
    * @since 1.4.3
    * @deprecated ​ Deprecated since 3.3. Use \`{@link on }\` or \`{@link trigger }\`.
    *
    * **Cause**: The `.on()` and `.trigger()` methods can set an event handler or generate an event for any event type, and should be used instead of the shortcut methods. This message also applies to the other event shorthands, including: blur, focus, focusin, focusout, resize, scroll, dblclick, mousedown, mouseup, mousemove, mouseover, mouseout, mouseenter, mouseleave, change, select, submit, keydown, keypress, keyup, and contextmenu.
    *
    * **Solution**: Instead of `.click(fn)` use `.on("click", fn)`. Instead of `.click()` use `.trigger("click")`.
    */
  @JSName("contextmenu")
  def contextmenu_contextmenu[TData](eventData: TData, handler: TypeEventHandler[TElement, TData, TElement, TElement, contextmenu]): this.type = js.native
  @JSName("contextmenu")
  def contextmenu_false(handler: `false`): this.type = js.native
  
  /**
    * Set one or more CSS properties for the set of matched elements.
    * @param properties An object of property-value pairs to set.
    * @see \`{@link https://api.jquery.com/css/ }\`
    * @since 1.0
    * @example ​ ````Change the font weight and background color on mouseenter and mouseleave.
  ```html
  <!doctype html>
  <html lang="en">
  <head>
    <meta charset="utf-8">
    <title>css demo</title>
    <style>
    p {
    color: green;
    }
    </style>
    <script src="https://code.jquery.com/jquery-3.3.1.js"></script>
  </head>
  <body>
  ​
  <p>Move the mouse over a paragraph.</p>
  <p>Like this one or the one above.</p>
  ​
  <script>
  $( "p" )
    .on( "mouseenter", function() {
    $( this ).css({
    "background-color": "yellow",
    "font-weight": "bolder"
    });
    })
    .on( "mouseleave", function() {
    var styles = {
    backgroundColor : "#ddd",
    fontWeight: ""
    };
    $( this ).css( styles );
    });
  </script>
  ​
  </body>
  </html>
  ```
    * @example ​ ````Increase the size of a div when you click it.
  ```html
  <!doctype html>
  <html lang="en">
  <head>
    <meta charset="utf-8">
    <title>css demo</title>
    <style>
    div {
    width: 20px;
    height: 15px;
    background-color: #f33;
    }
    </style>
    <script src="https://code.jquery.com/jquery-3.3.1.js"></script>
  </head>
  <body>
  ​
  <div>click</div>
  <div>click</div>
  ​
  <script>
  $( "div" ).on( "click", function() {
    $( this ).css({
    width: function( index, value ) {
    return parseFloat( value ) * 1.2;
    },
    height: function( index, value ) {
    return parseFloat( value ) * 1.2;
    }
    });
  });
  </script>
  ​
  </body>
  </html>
  ```
    */
  def css(
    properties: PlainObject[
      String | Double | (js.ThisFunction2[
        /* this */ TElement, 
        /* index */ Double, 
        /* value */ String, 
        js.UndefOr[String | Double | Unit]
      ])
    ]
  ): this.type = js.native
  /**
    * Get the computed style properties for the first element in the set of matched elements.
    * @param propertyName A CSS property.
    * @see \`{@link https://api.jquery.com/css/ }\`
    * @since 1.0
    * @example ​ ````Get the background color of a clicked div.
  ```html
  <!doctype html>
  <html lang="en">
  <head>
    <meta charset="utf-8">
    <title>css demo</title>
    <style>
    div {
    width: 60px;
    height: 60px;
    margin: 5px;
    float: left;
    }
    </style>
    <script src="https://code.jquery.com/jquery-3.3.1.js"></script>
  </head>
  <body>
  ​
  <span id="result">&nbsp;</span>
  <div style="background-color:blue;"></div>
  <div style="background-color:rgb(15,99,30);"></div>
  <div style="background-color:#123456;"></div>
  <div style="background-color:#f11;"></div>
  ​
  <script>
  $( "div" ).click(function() {
    var color = $( this ).css( "background-color" );
    $( "#result" ).html( "That div is <span style='color:" +
    color + ";'>" + color + "</span>." );
  });
  </script>
  ​
  </body>
  </html>
  ```
    */
  def css(propertyName: String): String = js.native
  /**
    * Set one or more CSS properties for the set of matched elements.
    * @param propertyName A CSS property name.
    * @param value_function _&#x40;param_ `value_function`
    * <br>
    * * `value` — A value to set for the property. <br>
    * * `function` — A function returning the value to set. `this` is the current element. Receives the index position of
    *                the element in the set and the old value as arguments.
    * @see \`{@link https://api.jquery.com/css/ }\`
    * @since 1.0
    * @since 1.4
    * @example ​ ````Change the color of any paragraph to red on mouseover event.
  ```html
  <!doctype html>
  <html lang="en">
  <head>
    <meta charset="utf-8">
    <title>css demo</title>
    <style>
    p {
    color: blue;
    width: 200px;
    font-size: 14px;
    }
    </style>
    <script src="https://code.jquery.com/jquery-3.3.1.js"></script>
  </head>
  <body>
  ​
    <p>Just roll the mouse over me.</p>
  ​
    <p>Or me to see a color change.</p>
  ​
  <script>
  $( "p" ).on( "mouseover", function() {
    $( this ).css( "color", "red" );
  });
  </script>
  ​
  </body>
  </html>
  ```
    * @example ​ ````Increase the width of #box by 200 pixels the first time it is clicked.
  ```html
  <!doctype html>
  <html lang="en">
  <head>
    <meta charset="utf-8">
    <title>css demo</title>
    <style>
    #box {
    background: black;
    color: snow;
    width: 100px;
    padding: 10px;
    }
    </style>
    <script src="https://code.jquery.com/jquery-3.3.1.js"></script>
  </head>
  <body>
  ​
  <div id="box">Click me to grow</div>
  ​
  <script>
  $( "#box" ).one( "click", function() {
    $( this ).css( "width", "+=200" );
  });
  </script>
  ​
  </body>
  </html>
  ```
    * @example ​ ````Highlight a clicked word in the paragraph.
  ```html
  <!doctype html>
  <html lang="en">
  <head>
    <meta charset="utf-8">
    <title>css demo</title>
    <style>
    p {
    color: blue;
    font-weight: bold;
    cursor: pointer;
    }
    </style>
    <script src="https://code.jquery.com/jquery-3.3.1.js"></script>
  </head>
  <body>
  ​
  <p>
    Once upon a time there was a man
    who lived in a pizza parlor. This
    man just loved pizza and ate it all
    the time.  He went on to be the
    happiest man in the world.  The end.
  </p>
  ​
  <script>
  var words = $( "p" ).first().text().split( /\s+/ );
  var text = words.join( "</span> <span>" );
  $( "p" ).first().html( "<span>" + text + "</span>" );
  $( "span" ).on( "click", function() {
    $( this ).css( "background-color", "yellow" );
  });
  </script>
  ​
  </body>
  </html>
  ```
    */
  def css(propertyName: String, value_function: String): this.type = js.native
  def css(
    propertyName: String,
    value_function: js.ThisFunction2[
      /* this */ TElement, 
      /* index */ Double, 
      /* value */ String, 
      js.UndefOr[String | Double | Unit]
    ]
  ): this.type = js.native
  def css(propertyName: String, value_function: Double): this.type = js.native
  /**
    * Get the computed style properties for the first element in the set of matched elements.
    * @param propertyNames An array of one or more CSS properties.
    * @see \`{@link https://api.jquery.com/css/ }\`
    * @since 1.9
    * @example ​ ````Get the width, height, text color, and background color of a clicked div.
  ```html
  <!doctype html>
  <html lang="en">
  <head>
    <meta charset="utf-8">
    <title>css demo</title>
    <style>
    div {
    height: 50px;
    margin: 5px;
    padding: 5px;
    float: left;
    }
    #box1 {
    width: 50px;
    color: yellow;
    background-color: blue;
    }
    #box2 {
    width: 80px;
    color: rgb(255, 255, 255);
    background-color: rgb(15, 99, 30);
    }
    #box3 {
    width: 40px;
    color: #fcc;
    background-color: #123456;
    }
    #box4 {
    width: 70px;
    background-color: #f11;
    }
    </style>
    <script src="https://code.jquery.com/jquery-3.3.1.js"></script>
  </head>
  <body>
  ​
  <p id="result">&nbsp;</p>
  <div id="box1">1</div>
  <div id="box2">2</div>
  <div id="box3">3</div>
  <div id="box4">4</div>
  ​
  <script>
  $( "div" ).click(function() {
    var html = [ "The clicked div has the following styles:" ];
  ​
    var styleProps = $( this ).css([
    "width", "height", "color", "background-color"
    ]);
    $.each( styleProps, function( prop, value ) {
    html.push( prop + ": " + value );
    });
  ​
    $( "#result" ).html( html.join( "<br>" ) );
  });
  </script>
  ​
  </body>
  </html>
  ```
    */
  def css(propertyNames: js.Array[String]): PlainObject[String] = js.native
  
  /**
    * Return the value at the named data store for the first element in the jQuery collection, as set by data(name, value) or by an HTML5 data-* attribute.
    * @see \`{@link https://api.jquery.com/data/ }\`
    * @since 1.4
    */
  def data(): PlainObject[_] = js.native
  /**
    * Return the value at the named data store for the first element in the jQuery collection, as set by data(name, value) or by an HTML5 data-* attribute.
    * @param key Name of the data stored.
    * @see \`{@link https://api.jquery.com/data/ }\`
    * @since 1.2.3
    * @example ​ ````Get the data named &quot;blah&quot; stored at for an element.
  ```html
  <!doctype html>
  <html lang="en">
  <head>
    <meta charset="utf-8">
    <title>data demo</title>
    <style>
    div {
    margin: 5px;
    background: yellow;
    }
    button {
    margin: 5px;
    font-size: 14px;
    }
    p {
    margin: 5px;
    color: blue;
    }
    span {
    color: red;
    }
    </style>
    <script src="https://code.jquery.com/jquery-3.3.1.js"></script>
  </head>
  <body>
  ​
  <div>A div</div>
  <button>Get "blah" from the div</button>
  <button>Set "blah" to "hello"</button>
  <button>Set "blah" to 86</button>
  <button>Remove "blah" from the div</button>
  <p>The "blah" value of this div is <span>?</span></p>
  ​
  <script>
  $( "button" ).click(function() {
    var value;
  ​
    switch ( $( "button" ).index( this ) ) {
    case 0 :
    value = $( "div" ).data( "blah" );
    break;
    case 1 :
    $( "div" ).data( "blah", "hello" );
    value = "Stored!";
    break;
    case 2 :
    $( "div" ).data( "blah", 86 );
    value = "Stored!";
    break;
    case 3 :
    $( "div" ).removeData( "blah" );
    value = "Removed!";
    break;
    }
  ​
    $( "span" ).text( "" + value );
  });
  </script>
  ​
  </body>
  </html>
  ```
    */
  def data(key: String): js.Any = js.native
  /**
    * Return the value at the named data store for the first element in the jQuery collection, as set by data(name, value) or by an HTML5 data-* attribute.
    * @param key Name of the data stored.
    * @param value `undefined` is not recognized as a data value. Calls such as `.data( "name", undefined )`
    *              will return the jQuery object that it was called on, allowing for chaining.
    * @see \`{@link https://api.jquery.com/data/ }\`
    * @since 1.2.3
    */
  // `unified-signatures` is disabled so that behavior when passing `undefined` to `value` can be documented. Unifying the signatures
  // results in potential confusion for users from an unexpected parameter.
  // tslint:disable-next-line:unified-signatures
  def data(key: String, value: js.UndefOr[scala.Nothing]): js.Any = js.native
  def data(key: String, value: String): this.type = js.native
  def data(key: String, value: js.Object): this.type = js.native
  def data(key: String, value: js.Symbol): this.type = js.native
  def data(key: String, value: Boolean): this.type = js.native
  def data(key: String, value: Double): this.type = js.native
  /**
    * Store arbitrary data associated with the matched elements.
    * @param obj An object of key-value pairs of data to update.
    * @see \`{@link https://api.jquery.com/data/ }\`
    * @since 1.4.3
    */
  def data(obj: PlainObject[_]): this.type = js.native
  /**
    * Store arbitrary data associated with the matched elements.
    * @param key A string naming the piece of data to set.
    * @param value The new data value; this can be any Javascript type except `undefined`.
    * @see \`{@link https://api.jquery.com/data/ }\`
    * @since 1.2.3
    * @example ​ ````Store then retrieve a value from the div element.
  ```html
  <!doctype html>
  <html lang="en">
  <head>
    <meta charset="utf-8">
    <title>data demo</title>
    <style>
    div {
    color: blue;
    }
    span {
    color: red;
    }
    </style>
    <script src="https://code.jquery.com/jquery-3.3.1.js"></script>
  </head>
  <body>
  ​
  <div>
    The values stored were
    <span></span>
    and
    <span></span>
  </div>
  ​
  <script>
  $( "div" ).data( "test", { first: 16, last: "pizza!" } );
  $( "span:first" ).text( $( "div" ).data( "test" ).first );
  $( "span:last" ).text( $( "div" ).data( "test" ).last );
  </script>
  ​
  </body>
  </html>
  ```
    */
  @JSName("data")
  def data_This(key: String): this.type = js.native
  
  /**
    * Bind an event handler to the "dblclick" JavaScript event, or trigger that event on an element.
    * @param handler A function to execute each time the event is triggered.
    * @see \`{@link https://api.jquery.com/dblclick/ }\`
    * @since 1.0
    * @deprecated ​ Deprecated since 3.3. Use \`{@link on }\` or \`{@link trigger }\`.
    *
    * **Cause**: The `.on()` and `.trigger()` methods can set an event handler or generate an event for any event type, and should be used instead of the shortcut methods. This message also applies to the other event shorthands, including: blur, focus, focusin, focusout, resize, scroll, dblclick, mousedown, mouseup, mousemove, mouseover, mouseout, mouseenter, mouseleave, change, select, submit, keydown, keypress, keyup, and contextmenu.
    *
    * **Solution**: Instead of `.click(fn)` use `.on("click", fn)`. Instead of `.click()` use `.trigger("click")`.
    * @example ​ ````To bind a &quot;Hello World!&quot; alert box to the dblclick event on every paragraph on the page:
  ```javascript
  $( "p" ).dblclick(function() {
    alert( "Hello World!" );
  });
  ```
    * @example ​ ````Double click to toggle background color.
  ```html
  <!doctype html>
  <html lang="en">
  <head>
    <meta charset="utf-8">
    <title>dblclick demo</title>
    <style>
    div {
    background: blue;
    color: white;
    height: 100px;
    width: 150px;
    }
    div.dbl {
    background: yellow;
    color: black;
    }
    </style>
    <script src="https://code.jquery.com/jquery-3.3.1.js"></script>
  </head>
  <body>
  ​
  <div></div>
  <span>Double click the block</span>
  ​
  <script>
  var divdbl = $( "div:first" );
  divdbl.dblclick(function() {
    divdbl.toggleClass( "dbl" );
  });
  </script>
  ​
  </body>
  </html>
  ```
    */
  def dblclick(): this.type = js.native
  @JSName("dblclick")
  def dblclick_dblclick(handler: TypeEventHandler[TElement, Null, TElement, TElement, dblclick]): this.type = js.native
  /**
    * Bind an event handler to the "dblclick" JavaScript event, or trigger that event on an element.
    * @param eventData An object containing data that will be passed to the event handler.
    * @param handler A function to execute each time the event is triggered.
    * @see \`{@link https://api.jquery.com/dblclick/ }\`
    * @since 1.4.3
    * @deprecated ​ Deprecated since 3.3. Use \`{@link on }\` or \`{@link trigger }\`.
    *
    * **Cause**: The `.on()` and `.trigger()` methods can set an event handler or generate an event for any event type, and should be used instead of the shortcut methods. This message also applies to the other event shorthands, including: blur, focus, focusin, focusout, resize, scroll, dblclick, mousedown, mouseup, mousemove, mouseover, mouseout, mouseenter, mouseleave, change, select, submit, keydown, keypress, keyup, and contextmenu.
    *
    * **Solution**: Instead of `.click(fn)` use `.on("click", fn)`. Instead of `.click()` use `.trigger("click")`.
    */
  @JSName("dblclick")
  def dblclick_dblclick[TData](eventData: TData, handler: TypeEventHandler[TElement, TData, TElement, TElement, dblclick]): this.type = js.native
  @JSName("dblclick")
  def dblclick_false(handler: `false`): this.type = js.native
  
  /**
    * Set a timer to delay execution of subsequent items in the queue.
    * @param duration An integer indicating the number of milliseconds to delay execution of the next item in the queue.
    * @param queueName A string containing the name of the queue. Defaults to fx, the standard effects queue.
    * @see \`{@link https://api.jquery.com/delay/ }\`
    * @since 1.4
    * @example ​ ````Animate the hiding and showing of two divs, delaying the first before showing it.
  ```html
  <!doctype html>
  <html lang="en">
  <head>
    <meta charset="utf-8">
    <title>delay demo</title>
    <style>
    div {
    position: absolute;
    width: 60px;
    height: 60px;
    float: left;
    }
    .first {
    background-color: #3f3;
    left: 0;
    }
    .second {
    background-color: #33f;
    left: 80px;
    }
    </style>
    <script src="https://code.jquery.com/jquery-3.3.1.js"></script>
  </head>
  <body>
  ​
  <p><button>Run</button></p>
  <div class="first"></div>
  <div class="second"></div>
  ​
  <script>
  $( "button" ).click(function() {
    $( "div.first" ).slideUp( 300 ).delay( 800 ).fadeIn( 400 );
    $( "div.second" ).slideUp( 300 ).fadeIn( 400 );
  });
  </script>
  ​
  </body>
  </html>
  ```
    */
  def delay(duration: Duration): this.type = js.native
  def delay(duration: Duration, queueName: String): this.type = js.native
  
  /**
    * Attach a handler to one or more events for all elements that match the selector, now or in the future, based on a specific set of root elements.
    * @param selector A selector to filter the elements that trigger the event.
    * @param events A plain object of one or more event types and functions to execute for them.
    * @see \`{@link https://api.jquery.com/delegate/ }\`
    * @since 1.4.3
    * @deprecated ​ Deprecated since 3.0. Use \`{@link on }\`.
    *
    * **Cause**: These event binding methods have been deprecated in favor of the `.on()` and `.off()` methods which can handle both delegated and direct event binding. Although the older methods are still present in jQuery 3.0, they may be removed as early as the next major-version update.
    *
    * **Solution**: Change the method call to use `.on()` or `.off()`, the documentation for the old methods include specific instructions. In general, the `.bind()` and `.unbind()` methods can be renamed directly to `.on()` and `.off()` respectively since the argument orders are identical.
    */
  def delegate(selector: Selector, events: TypeEventHandlers[TElement, js.UndefOr[scala.Nothing], _, _]): this.type = js.native
  /**
    * Attach a handler to one or more events for all elements that match the selector, now or in the future, based on a specific set of root elements.
    * @param selector A selector to filter the elements that trigger the event.
    * @param eventType A string containing one or more space-separated JavaScript event types, such as "click" or
    *                  "keydown," or custom event names.
    * @param handler A function to execute each time the event is triggered.
    * @see \`{@link https://api.jquery.com/delegate/ }\`
    * @since 1.4.2
    * @deprecated ​ Deprecated since 3.0. Use \`{@link on }\`.
    *
    * **Cause**: These event binding methods have been deprecated in favor of the `.on()` and `.off()` methods which can handle both delegated and direct event binding. Although the older methods are still present in jQuery 3.0, they may be removed as early as the next major-version update.
    *
    * **Solution**: Change the method call to use `.on()` or `.off()`, the documentation for the old methods include specific instructions. In general, the `.bind()` and `.unbind()` methods can be renamed directly to `.on()` and `.off()` respectively since the argument orders are identical.
    * @example ​ ````Click a paragraph to add another. Note that .delegate() attaches a click event handler to all paragraphs - even new ones.
  ```html
  <!doctype html>
  <html lang="en">
  <head>
    <meta charset="utf-8">
    <title>delegate demo</title>
    <style>
    p {
    background: yellow;
    font-weight: bold;
    cursor: pointer;
    padding: 5px;
    }
    p.over {
    background: #ccc;
    }
    span {
    color: red;
    }
    </style>
    <script src="https://code.jquery.com/jquery-3.3.1.js"></script>
  </head>
  <body>
  ​
  <p>Click me!</p>
  ​
  <span></span>
  ​
  <script>
  $( "body" ).delegate( "p", "click", function() {
    $( this ).after( "<p>Another paragraph!</p>" );
  });
  </script>
  ​
  </body>
  </html>
  ```
    * @example ​ ````To display each paragraph&#39;s text in an alert box whenever it is clicked:
  ```javascript
  $( "body" ).delegate( "p", "click", function() {
    alert( $( this ).text() );
  });
  ```
    * @example ​ ````To cancel a default action and prevent it from bubbling up, return false:
  ```javascript
  $( "body" ).delegate( "a", "click", function() {
    return false;
  });
  ```
    * @example ​ ````To cancel only the default action by using the preventDefault method.
  ```javascript
  $( "body" ).delegate( "a", "click", function( event ) {
    event.preventDefault();
  });
  ```
    * @example ​ ````Can bind custom events too.
  ```html
  <!doctype html>
  <html lang="en">
  <head>
    <meta charset="utf-8">
    <title>delegate demo</title>
    <style>
    p {
    color: red;
    }
    span {
    color: blue;
    }
    </style>
    <script src="https://code.jquery.com/jquery-3.3.1.js"></script>
  </head>
  <body>
  ​
  <p>Has an attached custom event.</p>
  <button>Trigger custom event</button>
  <span style="display:none;"></span>
  ​
  <script>
  $( "body" ).delegate( "p", "myCustomEvent", function( e, myName, myValue ) {
    $( this ).text( "Hi there!" );
    $( "span" )
    .stop()
    .css( "opacity", 1 )
    .text( "myName = " + myName )
    .fadeIn( 30 )
    .fadeOut( 1000 );
  });
  $( "button" ).click(function() {
    $( "p" ).trigger( "myCustomEvent" );
  });
  </script>
  ​
  </body>
  </html>
  ```
    */
  def delegate[TType /* <: String */](
    selector: Selector,
    eventType: TType,
    handler: TypeEventHandler[TElement, js.UndefOr[scala.Nothing], _, _, TType]
  ): this.type = js.native
  /**
    * Attach a handler to one or more events for all elements that match the selector, now or in the future, based on a specific set of root elements.
    * @param selector A selector to filter the elements that trigger the event.
    * @param eventType A string containing one or more space-separated JavaScript event types, such as "click" or
    *                  "keydown," or custom event names.
    * @param eventData An object containing data that will be passed to the event handler.
    * @param handler A function to execute each time the event is triggered.
    * @see \`{@link https://api.jquery.com/delegate/ }\`
    * @since 1.4.2
    * @deprecated ​ Deprecated since 3.0. Use \`{@link on }\`.
    *
    * **Cause**: These event binding methods have been deprecated in favor of the `.on()` and `.off()` methods which can handle both delegated and direct event binding. Although the older methods are still present in jQuery 3.0, they may be removed as early as the next major-version update.
    *
    * **Solution**: Change the method call to use `.on()` or `.off()`, the documentation for the old methods include specific instructions. In general, the `.bind()` and `.unbind()` methods can be renamed directly to `.on()` and `.off()` respectively since the argument orders are identical.
    */
  def delegate[TType /* <: String */, TData](
    selector: Selector,
    eventType: TType,
    eventData: TData,
    handler: TypeEventHandler[TElement, TData, _, _, TType]
  ): this.type = js.native
  @JSName("delegate")
  def delegate_false[TType /* <: String */](selector: Selector, eventType: TType, handler: `false`): this.type = js.native
  
  /**
    * Execute the next function on the queue for the matched elements.
    * @param queueName A string containing the name of the queue. Defaults to fx, the standard effects queue.
    * @see \`{@link https://api.jquery.com/dequeue/ }\`
    * @since 1.2
    * @example ​ ````Use dequeue to end a custom queue function which allows the queue to keep going.
  ```html
  <!doctype html>
  <html lang="en">
  <head>
    <meta charset="utf-8">
    <title>dequeue demo</title>
    <style>
    div {
    margin: 3px;
    width: 50px;
    position: absolute;
    height: 50px;
    left: 10px;
    top: 30px;
    background-color: yellow;
    }
    div.red {
    background-color: red;
    }
    </style>
    <script src="https://code.jquery.com/jquery-3.3.1.js"></script>
  </head>
  <body>
  ​
  <button>Start</button>
  <div></div>
  ​
  <script>
  $( "button" ).click(function() {
    $( "div" )
    .animate({ left:"+=200px" }, 2000 )
    .animate({ top:"0px" }, 600 )
    .queue(function() {
    $( this ).toggleClass( "red" ).dequeue();
    })
    .animate({ left:"10px", top:"30px" }, 700 );
  });
  </script>
  ​
  </body>
  </html>
  ```
    */
  def dequeue(): this.type = js.native
  def dequeue(queueName: String): this.type = js.native
  
  /**
    * Remove the set of matched elements from the DOM.
    * @param selector A selector expression that filters the set of matched elements to be removed.
    * @see \`{@link https://api.jquery.com/detach/ }\`
    * @since 1.4
    * @example ​ ````Detach all paragraphs from the DOM
  ```html
  <!doctype html>
  <html lang="en">
  <head>
    <meta charset="utf-8">
    <title>detach demo</title>
    <style>
    p {
    background: yellow;
    margin: 6px 0;
    }
    p.off {
    background: black;
    }
    </style>
    <script src="https://code.jquery.com/jquery-3.3.1.js"></script>
  </head>
  <body>
  ​
  <p>Hello</p>
  how are
  <p>you?</p>
  <button>Attach/detach paragraphs</button>
  ​
  <script>
  $( "p" ).click(function() {
    $( this ).toggleClass( "off" );
  });
  var p;
  $( "button" ).click(function() {
    if ( p ) {
    p.appendTo( "body" );
    p = null;
    } else {
    p = $( "p" ).detach();
    }
  });
  </script>
  ​
  </body>
  </html>
  ```
    */
  def detach(): this.type = js.native
  def detach(selector: Selector): this.type = js.native
  
  /**
    * Iterate over a jQuery object, executing a function for each matched element.
    * @param funсtion A function to execute for each matched element.
    * @see \`{@link https://api.jquery.com/each/ }\`
    * @since 1.0
    * @example ​ ````Iterate over three divs and sets their color property.
  ```html
  <!doctype html>
  <html lang="en">
  <head>
    <meta charset="utf-8">
    <title>each demo</title>
    <style>
    div {
    color: red;
    text-align: center;
    cursor: pointer;
    font-weight: bolder;
    width: 300px;
    }
    </style>
    <script src="https://code.jquery.com/jquery-3.3.1.js"></script>
  </head>
  <body>
  ​
  <div>Click here</div>
  <div>to iterate through</div>
  <div>these divs.</div>
  ​
  <script>
  $( document.body ).click(function() {
    $( "div" ).each(function( i ) {
    if ( this.style.color !== "blue" ) {
    this.style.color = "blue";
    } else {
    this.style.color = "";
    }
    });
  });
  </script>
  ​
  </body>
  </html>
  ```
    * @example ​ ````To access a jQuery object instead of the regular DOM element, use $( this ). For example:
  ```html
  <!doctype html>
  <html lang="en">
  <head>
    <meta charset="utf-8">
    <title>each demo</title>
    <style>
    ul {
    font-size: 18px;
    margin: 0;
    }
    span {
    color: blue;
    text-decoration: underline;
    cursor: pointer;
    }
    .example {
    font-style: italic;
    }
    </style>
    <script src="https://code.jquery.com/jquery-3.3.1.js"></script>
  </head>
  <body>
  ​
  To do list: <span>(click here to change)</span>
  <ul>
    <li>Eat</li>
    <li>Sleep</li>
    <li>Be merry</li>
  </ul>
  ​
  <script>
  $( "span" ).click(function() {
    $( "li" ).each(function() {
    $( this ).toggleClass( "example" );
    });
  });
  </script>
  ​
  </body>
  </html>
  ```
    * @example ​ ````Use return false to break out of each() loops early.
  ```html
  <!doctype html>
  <html lang="en">
  <head>
    <meta charset="utf-8">
    <title>each demo</title>
    <style>
    div {
    width: 40px;
    height: 40px;
    margin: 5px;
    float: left;
    border: 2px blue solid;
    text-align: center;
    }
    span {
    color: red;
    }
    </style>
    <script src="https://code.jquery.com/jquery-3.3.1.js"></script>
  </head>
  <body>
  ​
  <button>Change colors</button>
  <span></span>
  <div></div>
  <div></div>
  <div></div>
  <div></div>
  <div id="stop">Stop here</div>
  <div></div>
  <div></div>
  <div></div>
  ​
  <script>
  $( "button" ).click(function() {
    $( "div" ).each(function( index, element ) {
    // element == this
    $( element ).css( "backgroundColor", "yellow" );
    if ( $( this ).is( "#stop" ) ) {
    $( "span" ).text( "Stopped at div index #" + index );
    return false;
    }
    });
  });
  </script>
  ​
  </body>
  </html>
  ```
    */
  @JSName("each")
  def each_false(
    funсtion: js.ThisFunction2[/* this */ TElement, /* index */ Double, /* element */ TElement, Unit | `false`]
  ): this.type = js.native
  
  /**
    * Remove all child nodes of the set of matched elements from the DOM.
    * @see \`{@link https://api.jquery.com/empty/ }\`
    * @since 1.0
    * @example ​ ````Removes all child nodes (including text nodes) from all paragraphs
  ```html
  <!doctype html>
  <html lang="en">
  <head>
    <meta charset="utf-8">
    <title>empty demo</title>
    <style>
    p {
    background: yellow;
    }
    </style>
    <script src="https://code.jquery.com/jquery-3.3.1.js"></script>
  </head>
  <body>
  ​
  <p>
    Hello, <span>Person</span> <em>and person</em>.
  </p>
  ​
  <button>Call empty() on above paragraph</button>
  ​
  <script>
  $( "button" ).click(function() {
    $( "p" ).empty();
  });
  </script>
  ​
  </body>
  </html>
  ```
    */
  def empty(): this.type = js.native
  
  /**
    * End the most recent filtering operation in the current chain and return the set of matched elements to its previous state.
    * @see \`{@link https://api.jquery.com/end/ }\`
    * @since 1.0
    * @example ​ ````Selects all paragraphs, finds span elements inside these, and reverts the selection back to the paragraphs.
  ```html
  <!doctype html>
  <html lang="en">
  <head>
    <meta charset="utf-8">
    <title>end demo</title>
    <style>
    p, div {
    margin: 1px;
    padding: 1px;
    font-weight: bold;
    font-size: 16px;
    }
    div {
    color: blue;
    }
    b {
    color: red;
    }
    </style>
    <script src="https://code.jquery.com/jquery-3.3.1.js"></script>
  </head>
  <body>
  ​
  <p>
    Hi there <span>how</span> are you <span>doing</span>?
  </p>
  ​
  <p>
    This <span>span</span> is one of
    several <span>spans</span> in this
    <span>sentence</span>.
  </p>
  ​
  <div>
    Tags in jQuery object initially: <b></b>
  </div>
  ​
  <div>
    Tags in jQuery object after find: <b></b>
  </div>
  ​
  <div>
    Tags in jQuery object after end: <b></b>
  </div>
  ​
  <script>
  jQuery.fn.showTags = function( n ) {
    var tags = this.map(function() {
    return this.tagName;
    })
    .get()
    .join( ", " );
    $( "b:eq( " + n + " )" ).text( tags );
    return this;
  };
  ​
  $( "p" )
    .showTags( 0 )
    .find( "span" )
    .showTags( 1 )
    .css( "background", "yellow" )
    .end()
    .showTags( 2 )
    .css( "font-style", "italic" );
  </script>
  ​
  </body>
  </html>
  ```
    * @example ​ ````Selects all paragraphs, finds span elements inside these, and reverts the selection back to the paragraphs.
  ```html
  <!doctype html>
  <html lang="en">
  <head>
    <meta charset="utf-8">
    <title>end demo</title>
    <style>
    p {
    margin: 10px;
    padding: 10px;
    }
    </style>
    <script src="https://code.jquery.com/jquery-3.3.1.js"></script>
  </head>
  <body>
  ​
  <p><span>Hello</span>, how are you?</p>
  ​
  <script>
  $( "p" )
    .find( "span" )
    .end()
    .css( "border", "2px red solid" );
  </script>
  ​
  </body>
  </html>
  ```
    */
  def end(): this.type = js.native
  
  /**
    * Reduce the set of matched elements to the one at the specified index.
    * @param index An integer indicating the 0-based position of the element.
    *              An integer indicating the position of the element, counting backwards from the last element in the set.
    * @see \`{@link https://api.jquery.com/eq/ }\`
    * @since 1.1.2
    * @since 1.4
    * @example ​ ````Turn the div with index 2 blue by adding an appropriate class.
  ```html
  <!doctype html>
  <html lang="en">
  <head>
    <meta charset="utf-8">
    <title>eq demo</title>
    <style>
    div {
    width: 60px;
    height: 60px;
    margin: 10px;
    float: left;
    border: 2px solid blue;
    }
    .blue {
    background: blue;
    }
    </style>
    <script src="https://code.jquery.com/jquery-3.3.1.js"></script>
  </head>
  <body>
  ​
  <div></div>
  <div></div>
  <div></div>
  <div></div>
  <div></div>
  <div></div>
  ​
  <script>
  $( "body" ).find( "div" ).eq( 2 ).addClass( "blue" );
  </script>
  ​
  </body>
  </html>
  ```
    */
  def eq(index: Double): this.type = js.native
  
  /**
    * Reduce the set of matched elements to the even ones in the set, numbered from zero.
    * @see \`{@link https://api.jquery.com/even/ }\`
    * @since 3.5
    * @example ​ ````Highlight the even items in a list.
  ```html
  <!doctype html>
  <html lang="en">
  <head>
    <meta charset="utf-8">
    <title>even demo</title>
    <style>
    .highlight {
    background-color: yellow;
    }
    </style>
    <script src="https://code.jquery.com/jquery-3.5.0.js"></script>
  </head>
  <body>
  <ul>
    <li>Look:</li>
    <li>This is some text in a list.</li>
    <li>This is a note about it.</li>
    <li>This is another note about it.</li>
  </ul>
  <script>
  $( "ul li" ).even().addClass( "highlight" );
  </script>
  </body>
  </html>
  ```
    */
  def even(): this.type = js.native
  
  /**
    * Merge the contents of an object onto the jQuery prototype to provide new jQuery instance methods.
    * @param obj An object to merge onto the jQuery prototype.
    * @see \`{@link https://api.jquery.com/jQuery.fn.extend/ }\`
    * @since 1.0
    * @example ​ ````Add two methods to the jQuery prototype ($.fn) object and then use one of them.
  ```html
  <!doctype html>
  <html lang="en">
  <head>
    <meta charset="utf-8">
    <title>jQuery.fn.extend demo</title>
    <style>
    label {
    display: block;
    margin: .5em;
    }
    </style>
    <script src="https://code.jquery.com/jquery-3.3.1.js"></script>
  </head>
  <body>
  ​
  <label><input type="checkbox" name="foo"> Foo</label>
  <label><input type="checkbox" name="bar"> Bar</label>
  ​
  <script>
  jQuery.fn.extend({
    check: function() {
    return this.each(function() {
    this.checked = true;
    });
    },
    uncheck: function() {
    return this.each(function() {
    this.checked = false;
    });
    }
  });
  ​
  // Use the newly created .check() method
  $( "input[type='checkbox']" ).check();
  </script>
  ​
  </body>
  </html>
  ```
    */
  def extend(obj: js.Object): this.type = js.native
  
  /**
    * Display the matched elements by fading them to opaque.
    * @param duration_easing_complete_options _&#x40;param_ `duration_easing_complete_options`
    * <br>
    * * `duration` — A string or number determining how long the animation will run. <br>
    * * `easing` — A string indicating which easing function to use for the transition. <br>
    * * `complete` — A function to call once the animation is complete, called once per matched element. <br>
    * * `options` — A map of additional options to pass to the method.
    * @see \`{@link https://api.jquery.com/fadeIn/ }\`
    * @since 1.0
    * @since 1.4.3
    * @example ​ ````Animates hidden divs to fade in one by one, completing each animation within 600 milliseconds.
  ```html
  <!doctype html>
  <html lang="en">
  <head>
    <meta charset="utf-8">
    <title>fadeIn demo</title>
    <style>
    span {
    color: red;
    cursor: pointer;
    }
    div {
    margin: 3px;
    width: 80px;
    display: none;
    height: 80px;
    float: left;
    }
    #one {
    background: #f00;
    }
    #two {
    background: #0f0;
    }
    #three {
    background: #00f;
    }
    </style>
    <script src="https://code.jquery.com/jquery-3.3.1.js"></script>
  </head>
  <body>
  ​
  <span>Click here...</span>
  <div id="one"></div>
  <div id="two"></div>
  <div id="three"></div>
  ​
  <script>
  $( document.body ).click(function() {
    $( "div:hidden:first" ).fadeIn( "slow" );
  });
  </script>
  ​
  </body>
  </html>
  ```
    */
  def fadeIn(): this.type = js.native
  def fadeIn(duration_easing_complete_options: String): this.type = js.native
  def fadeIn(duration_easing_complete_options: js.ThisFunction0[/* this */ TElement, Unit]): this.type = js.native
  def fadeIn(duration_easing_complete_options: Duration): this.type = js.native
  def fadeIn(duration_easing_complete_options: EffectsOptions[TElement]): this.type = js.native
  def fadeIn(duration_easing: String, complete: js.ThisFunction0[/* this */ TElement, Unit]): this.type = js.native
  /**
    * Display the matched elements by fading them to opaque.
    * @param duration_easing _&#x40;param_ `duration_easing`
    * <br>
    * * `duration` — A string or number determining how long the animation will run. <br>
    * * `easing` — A string indicating which easing function to use for the transition.
    * @param complete A function to call once the animation is complete, called once per matched element.
    * @see \`{@link https://api.jquery.com/fadeIn/ }\`
    * @since 1.0
    * @since 1.4.3
    * @example ​ ````Fades a red block in over the text. Once the animation is done, it quickly fades in more text on top.
  ```html
  <!doctype html>
  <html lang="en">
  <head>
    <meta charset="utf-8">
    <title>fadeIn demo</title>
    <style>
    p {
    position: relative;
    width: 400px;
    height: 90px;
    }
    div {
    position: absolute;
    width: 400px;
    height: 65px;
    font-size: 36px;
    text-align: center;
    color: yellow;
    background: red;
    padding-top: 25px;
    top: 0;
    left: 0;
    display: none;
    }
    span {
    display: none;
    }
    </style>
    <script src="https://code.jquery.com/jquery-3.3.1.js"></script>
  </head>
  <body>
  ​
  <p>
    Let it be known that the party of the first part
    and the party of the second part are henceforth
    and hereto directed to assess the allegations
    for factual correctness... (<a href="#">click!</a>)
    <div><span>CENSORED!</span></div>
  </p>
  ​
  <script>
  $( "a" ).click(function() {
    $( "div" ).fadeIn( 3000, function() {
    $( "span" ).fadeIn( 100 );
    });
    return false;
  });
  </script>
  ​
  </body>
  </html>
  ```
    */
  def fadeIn(duration_easing: Duration, complete: js.ThisFunction0[/* this */ TElement, Unit]): this.type = js.native
  /**
    * Display the matched elements by fading them to opaque.
    * @param duration A string or number determining how long the animation will run.
    * @param easing A string indicating which easing function to use for the transition.
    * @param complete A function to call once the animation is complete, called once per matched element.
    * @see \`{@link https://api.jquery.com/fadeIn/ }\`
    * @since 1.4.3
    */
  def fadeIn(duration: Duration, easing: String): this.type = js.native
  def fadeIn(duration: Duration, easing: String, complete: js.ThisFunction0[/* this */ TElement, Unit]): this.type = js.native
  
  /**
    * Hide the matched elements by fading them to transparent.
    * @param duration_easing_complete_options _&#x40;param_ `duration_easing_complete_options`
    * <br>
    * * `duration` — A string or number determining how long the animation will run. <br>
    * * `easing` — A string indicating which easing function to use for the transition. <br>
    * * `complete` — A function to call once the animation is complete, called once per matched element. <br>
    * * `options` — A map of additional options to pass to the method.
    * @see \`{@link https://api.jquery.com/fadeOut/ }\`
    * @since 1.0
    * @since 1.4.3
    * @example ​ ````Animates all paragraphs to fade out, completing the animation within 600 milliseconds.
  ```html
  <!doctype html>
  <html lang="en">
  <head>
    <meta charset="utf-8">
    <title>fadeOut demo</title>
    <style>
    p {
    font-size: 150%;
    cursor: pointer;
    }
    </style>
    <script src="https://code.jquery.com/jquery-3.3.1.js"></script>
  </head>
  <body>
  ​
  <p>
    If you click on this paragraph
    you'll see it just fade away.
  </p>
  ​
  <script>
  $( "p" ).click(function() {
    $( "p" ).fadeOut( "slow" );
  });
  </script>
  ​
  </body>
  </html>
  ```
    */
  def fadeOut(): this.type = js.native
  def fadeOut(duration_easing_complete_options: String): this.type = js.native
  def fadeOut(duration_easing_complete_options: js.ThisFunction0[/* this */ TElement, Unit]): this.type = js.native
  def fadeOut(duration_easing_complete_options: Duration): this.type = js.native
  def fadeOut(duration_easing_complete_options: EffectsOptions[TElement]): this.type = js.native
  def fadeOut(duration_easing: String, complete: js.ThisFunction0[/* this */ TElement, Unit]): this.type = js.native
  /**
    * Hide the matched elements by fading them to transparent.
    * @param duration_easing _&#x40;param_ `duration_easing`
    * <br>
    * * `duration` — A string or number determining how long the animation will run. <br>
    * * `easing` — A string indicating which easing function to use for the transition.
    * @param complete A function to call once the animation is complete, called once per matched element.
    * @see \`{@link https://api.jquery.com/fadeOut/ }\`
    * @since 1.0
    * @since 1.4.3
    * @example ​ ````Fades out spans in one section that you click on.
  ```html
  <!doctype html>
  <html lang="en">
  <head>
    <meta charset="utf-8">
    <title>fadeOut demo</title>
    <style>
    span {
    cursor: pointer;
    }
    span.hilite {
    background: yellow;
    }
    div {
    display: inline;
    color: red;
    }
    </style>
    <script src="https://code.jquery.com/jquery-3.3.1.js"></script>
  </head>
  <body>
  ​
  <h3>Find the modifiers - <div></div></h3>
  <p>
    If you <span>really</span> want to go outside
    <span>in the cold</span> then make sure to wear
    your <span>warm</span> jacket given to you by
    your <span>favorite</span> teacher.
  </p>
  ​
  <script>
  $( "span" ).click(function() {
    $( this ).fadeOut( 1000, function() {
    $( "div" ).text( "'" + $( this ).text() + "' has faded!" );
    $( this ).remove();
    });
  });
  $( "span" ).hover(function() {
    $( this ).addClass( "hilite" );
  }, function() {
    $( this ).removeClass( "hilite" );
  });
  </script>
  ​
  </body>
  </html>
  ```
    */
  def fadeOut(duration_easing: Duration, complete: js.ThisFunction0[/* this */ TElement, Unit]): this.type = js.native
  /**
    * Hide the matched elements by fading them to transparent.
    * @param duration A string or number determining how long the animation will run.
    * @param easing A string indicating which easing function to use for the transition.
    * @param complete A function to call once the animation is complete, called once per matched element.
    * @see \`{@link https://api.jquery.com/fadeOut/ }\`
    * @since 1.4.3
    * @example ​ ````Fades out two divs, one with a &quot;linear&quot; easing and one with the default, &quot;swing,&quot; easing.
  ```html
  <!doctype html>
  <html lang="en">
  <head>
    <meta charset="utf-8">
    <title>fadeOut demo</title>
    <style>
    .box,
    button {
    float: left;
    margin: 5px 10px 5px 0;
    }
    .box {
    height: 80px;
    width: 80px;
    background: #090;
    }
    #log {
    clear: left;
    }
    </style>
    <script src="https://code.jquery.com/jquery-3.3.1.js"></script>
  </head>
  <body>
  ​
  <button id="btn1">fade out</button>
  <button id="btn2">show</button>
  ​
  <div id="log"></div>
  ​
  <div id="box1" class="box">linear</div>
  <div id="box2" class="box">swing</div>
  ​
  <script>
  $( "#btn1" ).click(function() {
    function complete() {
    $( "<div>" ).text( this.id ).appendTo( "#log" );
    }
    $( "#box1" ).fadeOut( 1600, "linear", complete );
    $( "#box2" ).fadeOut( 1600, complete );
  });
  ​
  $( "#btn2" ).click(function() {
    $( "div" ).show();
    $( "#log" ).empty();
  });
  </script>
  ​
  </body>
  </html>
  ```
    */
  def fadeOut(duration: Duration, easing: String): this.type = js.native
  def fadeOut(duration: Duration, easing: String, complete: js.ThisFunction0[/* this */ TElement, Unit]): this.type = js.native
  
  /**
    * Adjust the opacity of the matched elements.
    * @param duration A string or number determining how long the animation will run.
    * @param opacity A number between 0 and 1 denoting the target opacity.
    * @param complete A function to call once the animation is complete, called once per matched element.
    * @see \`{@link https://api.jquery.com/fadeTo/ }\`
    * @since 1.0
    * @example ​ ````Animates first paragraph to fade to an opacity of 0.33 (33%, about one third visible), completing the animation within 600 milliseconds.
  ```html
  <!doctype html>
  <html lang="en">
  <head>
    <meta charset="utf-8">
    <title>fadeTo demo</title>
    <script src="https://code.jquery.com/jquery-3.3.1.js"></script>
  </head>
  <body>
  ​
  <p>
  Click this paragraph to see it fade.
  </p>
  ​
  <p>
  Compare to this one that won't fade.
  </p>
  ​
  <script>
  $( "p:first" ).click(function() {
    $( this ).fadeTo( "slow", 0.33 );
  });
  </script>
  ​
  </body>
  </html>
  ```
    * @example ​ ````Fade div to a random opacity on each click, completing the animation within 200 milliseconds.
  ```html
  <!doctype html>
  <html lang="en">
  <head>
    <meta charset="utf-8">
    <title>fadeTo demo</title>
    <style>
    p {
    width: 80px;
    margin: 0;
    padding: 5px;
    }
    div {
    width: 40px;
    height: 40px;
    position: absolute;
    }
    #one {
    top: 0;
    left: 0;
    background: #f00;
    }
    #two {
    top: 20px;
    left: 20px;
    background: #0f0;
    }
    #three {
    top: 40px;
    left:40px;
    background:#00f;
    }
    </style>
    <script src="https://code.jquery.com/jquery-3.3.1.js"></script>
  </head>
  <body>
  ​
  <p>And this is the library that John built...</p>
  ​
  <div id="one"></div>
  <div id="two"></div>
  <div id="three"></div>
  ​
  <script>
  $( "div" ).click(function() {
    $( this ).fadeTo( "fast", Math.random() );
  });
  </script>
  ​
  </body>
  </html>
  ```
    * @example ​ ````Find the right answer! The fade will take 250 milliseconds and change various styles when it completes.
  ```html
  <!doctype html>
  <html lang="en">
  <head>
    <meta charset="utf-8">
    <title>fadeTo demo</title>
    <style>
    div, p {
    width: 80px;
    height: 40px;
    top: 0;
    margin: 0;
    position: absolute;
    padding-top: 8px;
    }
    p {
    background: #fcc;
    text-align: center;
    }
    div {
    background: blue;
    }
    </style>
    <script src="https://code.jquery.com/jquery-3.3.1.js"></script>
  </head>
  <body>
  ​
  <p>Wrong</p>
  <div></div>
  <p>Wrong</p>
  <div></div>
  <p>Right!</p>
  <div></div>
  ​
  <script>
  var getPos = function( n ) {
    return (Math.floor( n ) * 90) + "px";
  };
  $( "p" ).each(function( n ) {
    var r = Math.floor( Math.random() * 3 );
    var tmp = $( this ).text();
    $( this ).text( $( "p:eq(" + r + ")" ).text() );
    $( "p:eq(" + r + ")" ).text( tmp );
    $( this ).css( "left", getPos( n ) );
  });
  $( "div" )
    .each(function( n ) {
    $( this ).css( "left", getPos( n ) );
    })
    .css( "cursor", "pointer" )
    .click( function() {
    $( this ).fadeTo( 250, 0.25, function() {
    $( this )
    .css( "cursor", "" )
    .prev()
    .css({
    "font-weight": "bolder",
    "font-style": "italic"
    });
    });
    });
  </script>
  ​
  </body>
  </html>
  ```
    */
  def fadeTo(duration: Duration, opacity: Double): this.type = js.native
  def fadeTo(duration: Duration, opacity: Double, complete: js.ThisFunction0[/* this */ TElement, Unit]): this.type = js.native
  /**
    * Adjust the opacity of the matched elements.
    * @param duration A string or number determining how long the animation will run.
    * @param opacity A number between 0 and 1 denoting the target opacity.
    * @param easing A string indicating which easing function to use for the transition.
    * @param complete A function to call once the animation is complete, called once per matched element.
    * @see \`{@link https://api.jquery.com/fadeTo/ }\`
    * @since 1.4.3
    */
  def fadeTo(duration: Duration, opacity: Double, easing: String): this.type = js.native
  def fadeTo(
    duration: Duration,
    opacity: Double,
    easing: String,
    complete: js.ThisFunction0[/* this */ TElement, Unit]
  ): this.type = js.native
  
  /**
    * Display or hide the matched elements by animating their opacity.
    * @param duration_easing_complete_options _&#x40;param_ `duration_easing_complete_options`
    * <br>
    * * `duration` — A string or number determining how long the animation will run. <br>
    * * `easing` — A string indicating which easing function to use for the transition. <br>
    * * `complete` — A function to call once the animation is complete, called once per matched element. <br>
    * * `options` — A map of additional options to pass to the method.
    * @see \`{@link https://api.jquery.com/fadeToggle/ }\`
    * @since 1.0
    * @since 1.4.3
    */
  def fadeToggle(): this.type = js.native
  def fadeToggle(duration_easing_complete_options: String): this.type = js.native
  def fadeToggle(duration_easing_complete_options: js.ThisFunction0[/* this */ TElement, Unit]): this.type = js.native
  def fadeToggle(duration_easing_complete_options: Duration): this.type = js.native
  def fadeToggle(duration_easing_complete_options: EffectsOptions[TElement]): this.type = js.native
  def fadeToggle(duration_easing: String, complete: js.ThisFunction0[/* this */ TElement, Unit]): this.type = js.native
  /**
    * Display or hide the matched elements by animating their opacity.
    * @param duration_easing _&#x40;param_ `duration_easing`
    * <br>
    * * `duration` — A string or number determining how long the animation will run. <br>
    * * `easing` — A string indicating which easing function to use for the transition.
    * @param complete A function to call once the animation is complete, called once per matched element.
    * @see \`{@link https://api.jquery.com/fadeToggle/ }\`
    * @since 1.0
    * @since 1.4.3
    * @example ​ ````Fades first paragraph in or out, completing the animation within 600 milliseconds and using a linear easing. Fades last paragraph in or out for 200 milliseconds, inserting a &quot;finished&quot; message upon completion.
  ```html
  <!doctype html>
  <html lang="en">
  <head>
    <meta charset="utf-8">
    <title>fadeToggle demo</title>
    <script src="https://code.jquery.com/jquery-3.3.1.js"></script>
  </head>
  <body>
  ​
  <button>fadeToggle p1</button>
  <button>fadeToggle p2</button>
  <p>This paragraph has a slow, linear fade.</p>
  <p>This paragraph has a fast animation.</p>
  <div id="log"></div>
  ​
  <script>
  $( "button:first" ).click(function() {
    $( "p:first" ).fadeToggle( "slow", "linear" );
  });
  $( "button:last" ).click(function() {
    $( "p:last" ).fadeToggle( "fast", function() {
    $( "#log" ).append( "<div>finished</div>" );
    });
  });
  </script>
  ​
  </body>
  </html>
  ```
    */
  def fadeToggle(duration_easing: Duration, complete: js.ThisFunction0[/* this */ TElement, Unit]): this.type = js.native
  /**
    * Display or hide the matched elements by animating their opacity.
    * @param duration A string or number determining how long the animation will run.
    * @param easing A string indicating which easing function to use for the transition.
    * @param complete A function to call once the animation is complete, called once per matched element.
    * @see \`{@link https://api.jquery.com/fadeToggle/ }\`
    * @since 1.4.4
    * @example ​ ````Fades first paragraph in or out, completing the animation within 600 milliseconds and using a linear easing. Fades last paragraph in or out for 200 milliseconds, inserting a &quot;finished&quot; message upon completion.
  ```html
  <!doctype html>
  <html lang="en">
  <head>
    <meta charset="utf-8">
    <title>fadeToggle demo</title>
    <script src="https://code.jquery.com/jquery-3.3.1.js"></script>
  </head>
  <body>
  ​
  <button>fadeToggle p1</button>
  <button>fadeToggle p2</button>
  <p>This paragraph has a slow, linear fade.</p>
  <p>This paragraph has a fast animation.</p>
  <div id="log"></div>
  ​
  <script>
  $( "button:first" ).click(function() {
    $( "p:first" ).fadeToggle( "slow", "linear" );
  });
  $( "button:last" ).click(function() {
    $( "p:last" ).fadeToggle( "fast", function() {
    $( "#log" ).append( "<div>finished</div>" );
    });
  });
  </script>
  ​
  </body>
  </html>
  ```
    */
  def fadeToggle(duration: Duration, easing: String): this.type = js.native
  def fadeToggle(duration: Duration, easing: String, complete: js.ThisFunction0[/* this */ TElement, Unit]): this.type = js.native
  
  def filter(
    selector_elements_selection_function: js.ThisFunction2[/* this */ TElement, /* index */ Double, /* element */ TElement, Boolean]
  ): this.type = js.native
  def filter(selector_elements_selection_function: JQuery[HTMLElement]): this.type = js.native
  /**
    * Reduce the set of matched elements to those that match the selector or pass the function's test.
    * @param selector_elements_selection_function _&#x40;param_ `selector_elements_selection_function`
    * <br>
    * * `selector` — A string containing a selector expression to match the current set of elements against. <br>
    * * `elements` — One or more DOM elements to match the current set of elements against. <br>
    * * `selection` — An existing jQuery object to match the current set of elements against. <br>
    * * `function` — A function used as a test for each element in the set. this is the current DOM element.
    * @see \`{@link https://api.jquery.com/filter/ }\`
    * @since 1.0
    * @since 1.4
    * @example ​ ````Change the color of all divs; then add a border to those with a &quot;middle&quot; class.
  ```html
  <!doctype html>
  <html lang="en">
  <head>
    <meta charset="utf-8">
    <title>filter demo</title>
    <style>
    div {
    width: 60px;
    height: 60px;
    margin: 5px;
    float: left;
    border: 2px white solid;
    }
    </style>
    <script src="https://code.jquery.com/jquery-3.3.1.js"></script>
  </head>
  <body>
  ​
  <div></div>
  <div class="middle"></div>
  <div class="middle"></div>
  <div class="middle"></div>
  <div class="middle"></div>
  <div></div>
  ​
  <script>
  $( "div" )
    .css( "background", "#c8ebcc" )
    .filter( ".middle" )
    .css( "border-color", "red" );
  </script>
  ​
  </body>
  </html>
  ```
    * @example ​ ````Change the color of all divs; then add a border to the second one (index == 1) and the div with an id of &quot;fourth.&quot;
  ```html
  <!doctype html>
  <html lang="en">
  <head>
    <meta charset="utf-8">
    <title>filter demo</title>
    <style>
    div {
    width: 60px;
    height: 60px;
    margin: 5px;
    float: left;
    border: 3px white solid;
    }
    </style>
    <script src="https://code.jquery.com/jquery-3.3.1.js"></script>
  </head>
  <body>
  ​
  <div id="first"></div>
  <div id="second"></div>
  <div id="third"></div>
  <div id="fourth"></div>
  <div id="fifth"></div>
  <div id="sixth"></div>
  ​
  <script>
  $( "div" )
    .css( "background", "#b4b0da" )
    .filter(function( index ) {
    return index === 1 || $( this ).attr( "id" ) === "fourth";
    })
    .css( "border", "3px double red" );
  </script>
  ​
  </body>
  </html>
  ```
    * @example ​ ````Select all divs and filter the selection with a DOM element, keeping only the one with an id of &quot;unique&quot;.
  ```javascript
  $( "div" ).filter( document.getElementById( "unique" ) );
  ```
    * @example ​ ````Select all divs and filter the selection with a jQuery object, keeping only the one with an id of &quot;unique&quot;.
  ```javascript
  $( "div" ).filter( $( "#unique" ) );
  ```
    */
  def filter(selector_elements_selection_function: Selector): this.type = js.native
  def filter(selector_elements_selection_function: TypeOrArray[Element]): this.type = js.native
  
  def find[E /* <: HTMLElement */](selector_element: E): JQuery[E] = js.native
  def find[E /* <: HTMLElement */](selector_element: Element): JQuery[E] = js.native
  def find[E /* <: HTMLElement */](selector_element: JQuery[E]): JQuery[E] = js.native
  def find[E /* <: HTMLElement */](selector_element: Selector): JQuery[E] = js.native
  @JSName("find")
  def find_a(selector_element: JQuery[a]): JQuery[HTMLAnchorElement] = js.native
  /**
    * Get the descendants of each element in the current set of matched elements, filtered by a selector, jQuery object, or element.
    * @param selector_element _&#x40;param_ `selector_element`
    * <br>
    * * `selector` — A string containing a selector expression to match elements against. <br>
    * * `element` — An element or a jQuery object to match elements against.
    * @see \`{@link https://api.jquery.com/find/ }\`
    * @since 1.0
    * @since 1.6
    * @example ​ ````Starts with all paragraphs and searches for descendant span elements, same as $( &quot;p span&quot; )
  ```html
  <!doctype html>
  <html lang="en">
  <head>
    <meta charset="utf-8">
    <title>find demo</title>
    <script src="https://code.jquery.com/jquery-3.3.1.js"></script>
  </head>
  <body>
  ​
  <p><span>Hello</span>, how are you?</p>
  <p>Me? I'm <span>good</span>.</p>
  ​
  <script>
  $( "p" ).find( "span" ).css( "color", "red" );
  </script>
  ​
  </body>
  </html>
  ```
    * @example ​ ````A selection using a jQuery collection of all span tags. Only spans within p tags are changed to red while others are left blue.
  ```html
  <!doctype html>
  <html lang="en">
  <head>
    <meta charset="utf-8">
    <title>find demo</title>
    <style>
    span {
    color: blue;
    }
    </style>
    <script src="https://code.jquery.com/jquery-3.3.1.js"></script>
  </head>
  <body>
  ​
  <p><span>Hello</span>, how are you?</p>
  <p>Me? I'm <span>good</span>.</p>
  <div>Did you <span>eat</span> yet?</div>
  ​
  <script>
  var spans = $( "span" );
  $( "p" ).find( spans ).css( "color", "red" );
  </script>
  ​
  </body>
  </html>
  ```
    * @example ​ ````Add spans around each word then add a hover and italicize words with the letter t.
  ```html
  <!doctype html>
  <html lang="en">
  <head>
    <meta charset="utf-8">
    <title>find demo</title>
    <style>
    p {
    font-size: 20px;
    width: 200px;
    color: blue;
    font-weight: bold;
    margin: 0 10px;
    }
    .hilite {
    background: yellow;
    }
    </style>
    <script src="https://code.jquery.com/jquery-3.3.1.js"></script>
  </head>
  <body>
  ​
  <p>
    When the day is short
    find that which matters to you
    or stop believing
  </p>
  ​
  <script>
  var newText = $( "p" ).text().split( " " ).join( "</span> <span>" );
  newText = "<span>" + newText + "</span>";
  ​
  $( "p" )
    .html( newText )
    .find( "span" )
    .hover(function() {
    $( this ).addClass( "hilite" );
    }, function() {
    $( this ).removeClass( "hilite" );
    })
    .end()
    .find( ":contains('t')" )
    .css({
    "font-style": "italic",
    "font-weight": "bolder"
    });
  </script>
  ​
  </body>
  </html>
  ```
    */
  @JSName("find")
  def find_a(selector_element: a): JQuery[HTMLAnchorElement] = js.native
  @JSName("find")
  def find_abbr(selector_element: JQuery[abbr]): JQuery[HTMLElement] = js.native
  @JSName("find")
  def find_abbr(selector_element: abbr): JQuery[HTMLElement] = js.native
  @JSName("find")
  def find_address(selector_element: JQuery[address]): JQuery[HTMLElement] = js.native
  @JSName("find")
  def find_address(selector_element: address): JQuery[HTMLElement] = js.native
  @JSName("find")
  def find_applet(selector_element: JQuery[applet]): JQuery[HTMLAppletElement] = js.native
  @JSName("find")
  def find_applet(selector_element: applet): JQuery[HTMLAppletElement] = js.native
  @JSName("find")
  def find_area(selector_element: JQuery[area]): JQuery[HTMLAreaElement] = js.native
  @JSName("find")
  def find_area(selector_element: area): JQuery[HTMLAreaElement] = js.native
  @JSName("find")
  def find_article(selector_element: JQuery[article]): JQuery[HTMLElement] = js.native
  @JSName("find")
  def find_article(selector_element: article): JQuery[HTMLElement] = js.native
  @JSName("find")
  def find_aside(selector_element: JQuery[aside]): JQuery[HTMLElement] = js.native
  @JSName("find")
  def find_aside(selector_element: aside): JQuery[HTMLElement] = js.native
  @JSName("find")
  def find_audio(selector_element: JQuery[audio]): JQuery[HTMLAudioElement] = js.native
  @JSName("find")
  def find_audio(selector_element: audio): JQuery[HTMLAudioElement] = js.native
  @JSName("find")
  def find_b(selector_element: JQuery[b]): JQuery[HTMLElement] = js.native
  @JSName("find")
  def find_b(selector_element: b): JQuery[HTMLElement] = js.native
  @JSName("find")
  def find_base(selector_element: JQuery[base]): JQuery[HTMLBaseElement] = js.native
  @JSName("find")
  def find_base(selector_element: base): JQuery[HTMLBaseElement] = js.native
  @JSName("find")
  def find_basefont(selector_element: JQuery[basefont]): JQuery[HTMLBaseFontElement] = js.native
  @JSName("find")
  def find_basefont(selector_element: basefont): JQuery[HTMLBaseFontElement] = js.native
  @JSName("find")
  def find_bdi(selector_element: JQuery[bdi]): JQuery[HTMLElement] = js.native
  @JSName("find")
  def find_bdi(selector_element: bdi): JQuery[HTMLElement] = js.native
  @JSName("find")
  def find_bdo(selector_element: JQuery[bdo]): JQuery[HTMLElement] = js.native
  @JSName("find")
  def find_bdo(selector_element: bdo): JQuery[HTMLElement] = js.native
  @JSName("find")
  def find_blockquote(selector_element: JQuery[blockquote]): JQuery[HTMLQuoteElement] = js.native
  @JSName("find")
  def find_blockquote(selector_element: blockquote): JQuery[HTMLQuoteElement] = js.native
  @JSName("find")
  def find_body(selector_element: JQuery[body]): JQuery[HTMLBodyElement] = js.native
  @JSName("find")
  def find_body(selector_element: body): JQuery[HTMLBodyElement] = js.native
  @JSName("find")
  def find_br(selector_element: JQuery[br]): JQuery[HTMLBRElement] = js.native
  @JSName("find")
  def find_br(selector_element: br): JQuery[HTMLBRElement] = js.native
  @JSName("find")
  def find_button(selector_element: JQuery[button]): JQuery[HTMLButtonElement] = js.native
  @JSName("find")
  def find_button(selector_element: button): JQuery[HTMLButtonElement] = js.native
  @JSName("find")
  def find_canvas(selector_element: JQuery[canvas]): JQuery[HTMLCanvasElement] = js.native
  @JSName("find")
  def find_canvas(selector_element: canvas): JQuery[HTMLCanvasElement] = js.native
  @JSName("find")
  def find_caption(selector_element: JQuery[caption]): JQuery[HTMLTableCaptionElement] = js.native
  @JSName("find")
  def find_caption(selector_element: caption): JQuery[HTMLTableCaptionElement] = js.native
  @JSName("find")
  def find_circle(selector_element: JQuery[circle]): JQuery[SVGCircleElement] = js.native
  @JSName("find")
  def find_circle(selector_element: circle): JQuery[SVGCircleElement] = js.native
  @JSName("find")
  def find_cite(selector_element: JQuery[cite]): JQuery[HTMLElement] = js.native
  @JSName("find")
  def find_cite(selector_element: cite): JQuery[HTMLElement] = js.native
  @JSName("find")
  def find_clipPath(selector_element: JQuery[clipPath]): JQuery[SVGClipPathElement] = js.native
  @JSName("find")
  def find_clipPath(selector_element: clipPath): JQuery[SVGClipPathElement] = js.native
  @JSName("find")
  def find_code(selector_element: JQuery[code]): JQuery[HTMLElement] = js.native
  @JSName("find")
  def find_code(selector_element: code): JQuery[HTMLElement] = js.native
  @JSName("find")
  def find_col(selector_element: JQuery[col]): JQuery[HTMLTableColElement] = js.native
  @JSName("find")
  def find_col(selector_element: col): JQuery[HTMLTableColElement] = js.native
  @JSName("find")
  def find_colgroup(selector_element: JQuery[colgroup]): JQuery[HTMLTableColElement] = js.native
  @JSName("find")
  def find_colgroup(selector_element: colgroup): JQuery[HTMLTableColElement] = js.native
  @JSName("find")
  def find_data(selector_element: JQuery[data]): JQuery[HTMLDataElement] = js.native
  @JSName("find")
  def find_data(selector_element: data): JQuery[HTMLDataElement] = js.native
  @JSName("find")
  def find_datalist(selector_element: JQuery[datalist]): JQuery[HTMLDataListElement] = js.native
  @JSName("find")
  def find_datalist(selector_element: datalist): JQuery[HTMLDataListElement] = js.native
  @JSName("find")
  def find_dd(selector_element: JQuery[dd]): JQuery[HTMLElement] = js.native
  @JSName("find")
  def find_dd(selector_element: dd): JQuery[HTMLElement] = js.native
  @JSName("find")
  def find_defs(selector_element: JQuery[defs]): JQuery[SVGDefsElement] = js.native
  @JSName("find")
  def find_defs(selector_element: defs): JQuery[SVGDefsElement] = js.native
  @JSName("find")
  def find_del(selector_element: JQuery[del]): JQuery[HTMLModElement] = js.native
  @JSName("find")
  def find_del(selector_element: del): JQuery[HTMLModElement] = js.native
  @JSName("find")
  def find_desc(selector_element: JQuery[desc]): JQuery[SVGDescElement] = js.native
  @JSName("find")
  def find_desc(selector_element: desc): JQuery[SVGDescElement] = js.native
  @JSName("find")
  def find_details(selector_element: JQuery[details]): JQuery[HTMLDetailsElement] = js.native
  @JSName("find")
  def find_details(selector_element: details): JQuery[HTMLDetailsElement] = js.native
  @JSName("find")
  def find_dfn(selector_element: JQuery[dfn]): JQuery[HTMLElement] = js.native
  @JSName("find")
  def find_dfn(selector_element: dfn): JQuery[HTMLElement] = js.native
  @JSName("find")
  def find_dialog(selector_element: JQuery[dialog]): JQuery[HTMLDialogElement] = js.native
  @JSName("find")
  def find_dialog(selector_element: dialog): JQuery[HTMLDialogElement] = js.native
  @JSName("find")
  def find_dir(selector_element: JQuery[dir]): JQuery[HTMLDirectoryElement] = js.native
  @JSName("find")
  def find_dir(selector_element: dir): JQuery[HTMLDirectoryElement] = js.native
  @JSName("find")
  def find_div(selector_element: JQuery[div]): JQuery[HTMLDivElement] = js.native
  @JSName("find")
  def find_div(selector_element: div): JQuery[HTMLDivElement] = js.native
  @JSName("find")
  def find_dl(selector_element: JQuery[dl]): JQuery[HTMLDListElement] = js.native
  @JSName("find")
  def find_dl(selector_element: dl): JQuery[HTMLDListElement] = js.native
  @JSName("find")
  def find_dt(selector_element: JQuery[dt]): JQuery[HTMLElement] = js.native
  @JSName("find")
  def find_dt(selector_element: dt): JQuery[HTMLElement] = js.native
  @JSName("find")
  def find_ellipse(selector_element: JQuery[ellipse]): JQuery[SVGEllipseElement] = js.native
  @JSName("find")
  def find_ellipse(selector_element: ellipse): JQuery[SVGEllipseElement] = js.native
  @JSName("find")
  def find_em(selector_element: JQuery[em]): JQuery[HTMLElement] = js.native
  @JSName("find")
  def find_em(selector_element: em): JQuery[HTMLElement] = js.native
  @JSName("find")
  def find_embed(selector_element: JQuery[embed]): JQuery[HTMLEmbedElement] = js.native
  @JSName("find")
  def find_embed(selector_element: embed): JQuery[HTMLEmbedElement] = js.native
  @JSName("find")
  def find_feBlend(selector_element: JQuery[feBlend]): JQuery[SVGFEBlendElement] = js.native
  @JSName("find")
  def find_feBlend(selector_element: feBlend): JQuery[SVGFEBlendElement] = js.native
  @JSName("find")
  def find_feColorMatrix(selector_element: JQuery[feColorMatrix]): JQuery[SVGFEColorMatrixElement] = js.native
  @JSName("find")
  def find_feColorMatrix(selector_element: feColorMatrix): JQuery[SVGFEColorMatrixElement] = js.native
  @JSName("find")
  def find_feComponentTransfer(selector_element: JQuery[feComponentTransfer]): JQuery[SVGFEComponentTransferElement] = js.native
  @JSName("find")
  def find_feComponentTransfer(selector_element: feComponentTransfer): JQuery[SVGFEComponentTransferElement] = js.native
  @JSName("find")
  def find_feComposite(selector_element: JQuery[feComposite]): JQuery[SVGFECompositeElement] = js.native
  @JSName("find")
  def find_feComposite(selector_element: feComposite): JQuery[SVGFECompositeElement] = js.native
  @JSName("find")
  def find_feConvolveMatrix(selector_element: JQuery[feConvolveMatrix]): JQuery[SVGFEConvolveMatrixElement] = js.native
  @JSName("find")
  def find_feConvolveMatrix(selector_element: feConvolveMatrix): JQuery[SVGFEConvolveMatrixElement] = js.native
  @JSName("find")
  def find_feDiffuseLighting(selector_element: JQuery[feDiffuseLighting]): JQuery[SVGFEDiffuseLightingElement] = js.native
  @JSName("find")
  def find_feDiffuseLighting(selector_element: feDiffuseLighting): JQuery[SVGFEDiffuseLightingElement] = js.native
  @JSName("find")
  def find_feDisplacementMap(selector_element: JQuery[feDisplacementMap]): JQuery[SVGFEDisplacementMapElement] = js.native
  @JSName("find")
  def find_feDisplacementMap(selector_element: feDisplacementMap): JQuery[SVGFEDisplacementMapElement] = js.native
  @JSName("find")
  def find_feDistantLight(selector_element: JQuery[feDistantLight]): JQuery[SVGFEDistantLightElement] = js.native
  @JSName("find")
  def find_feDistantLight(selector_element: feDistantLight): JQuery[SVGFEDistantLightElement] = js.native
  @JSName("find")
  def find_feFlood(selector_element: JQuery[feFlood]): JQuery[SVGFEFloodElement] = js.native
  @JSName("find")
  def find_feFlood(selector_element: feFlood): JQuery[SVGFEFloodElement] = js.native
  @JSName("find")
  def find_feFuncA(selector_element: JQuery[feFuncA]): JQuery[SVGFEFuncAElement] = js.native
  @JSName("find")
  def find_feFuncA(selector_element: feFuncA): JQuery[SVGFEFuncAElement] = js.native
  @JSName("find")
  def find_feFuncB(selector_element: JQuery[feFuncB]): JQuery[SVGFEFuncBElement] = js.native
  @JSName("find")
  def find_feFuncB(selector_element: feFuncB): JQuery[SVGFEFuncBElement] = js.native
  @JSName("find")
  def find_feFuncG(selector_element: JQuery[feFuncG]): JQuery[SVGFEFuncGElement] = js.native
  @JSName("find")
  def find_feFuncG(selector_element: feFuncG): JQuery[SVGFEFuncGElement] = js.native
  @JSName("find")
  def find_feFuncR(selector_element: JQuery[feFuncR]): JQuery[SVGFEFuncRElement] = js.native
  @JSName("find")
  def find_feFuncR(selector_element: feFuncR): JQuery[SVGFEFuncRElement] = js.native
  @JSName("find")
  def find_feGaussianBlur(selector_element: JQuery[feGaussianBlur]): JQuery[SVGFEGaussianBlurElement] = js.native
  @JSName("find")
  def find_feGaussianBlur(selector_element: feGaussianBlur): JQuery[SVGFEGaussianBlurElement] = js.native
  @JSName("find")
  def find_feImage(selector_element: JQuery[feImage]): JQuery[SVGFEImageElement] = js.native
  @JSName("find")
  def find_feImage(selector_element: feImage): JQuery[SVGFEImageElement] = js.native
  @JSName("find")
  def find_feMerge(selector_element: JQuery[feMerge]): JQuery[SVGFEMergeElement] = js.native
  @JSName("find")
  def find_feMerge(selector_element: feMerge): JQuery[SVGFEMergeElement] = js.native
  @JSName("find")
  def find_feMergeNode(selector_element: JQuery[feMergeNode]): JQuery[SVGFEMergeNodeElement] = js.native
  @JSName("find")
  def find_feMergeNode(selector_element: feMergeNode): JQuery[SVGFEMergeNodeElement] = js.native
  @JSName("find")
  def find_feMorphology(selector_element: JQuery[feMorphology]): JQuery[SVGFEMorphologyElement] = js.native
  @JSName("find")
  def find_feMorphology(selector_element: feMorphology): JQuery[SVGFEMorphologyElement] = js.native
  @JSName("find")
  def find_feOffset(selector_element: JQuery[feOffset]): JQuery[SVGFEOffsetElement] = js.native
  @JSName("find")
  def find_feOffset(selector_element: feOffset): JQuery[SVGFEOffsetElement] = js.native
  @JSName("find")
  def find_fePointLight(selector_element: JQuery[fePointLight]): JQuery[SVGFEPointLightElement] = js.native
  @JSName("find")
  def find_fePointLight(selector_element: fePointLight): JQuery[SVGFEPointLightElement] = js.native
  @JSName("find")
  def find_feSpecularLighting(selector_element: JQuery[feSpecularLighting]): JQuery[SVGFESpecularLightingElement] = js.native
  @JSName("find")
  def find_feSpecularLighting(selector_element: feSpecularLighting): JQuery[SVGFESpecularLightingElement] = js.native
  @JSName("find")
  def find_feSpotLight(selector_element: JQuery[feSpotLight]): JQuery[SVGFESpotLightElement] = js.native
  @JSName("find")
  def find_feSpotLight(selector_element: feSpotLight): JQuery[SVGFESpotLightElement] = js.native
  @JSName("find")
  def find_feTile(selector_element: JQuery[feTile]): JQuery[SVGFETileElement] = js.native
  @JSName("find")
  def find_feTile(selector_element: feTile): JQuery[SVGFETileElement] = js.native
  @JSName("find")
  def find_feTurbulence(selector_element: JQuery[feTurbulence]): JQuery[SVGFETurbulenceElement] = js.native
  @JSName("find")
  def find_feTurbulence(selector_element: feTurbulence): JQuery[SVGFETurbulenceElement] = js.native
  @JSName("find")
  def find_fieldset(selector_element: JQuery[fieldset]): JQuery[HTMLFieldSetElement] = js.native
  @JSName("find")
  def find_fieldset(selector_element: fieldset): JQuery[HTMLFieldSetElement] = js.native
  @JSName("find")
  def find_figcaption(selector_element: JQuery[figcaption]): JQuery[HTMLElement] = js.native
  @JSName("find")
  def find_figcaption(selector_element: figcaption): JQuery[HTMLElement] = js.native
  @JSName("find")
  def find_figure(selector_element: JQuery[figure]): JQuery[HTMLElement] = js.native
  @JSName("find")
  def find_figure(selector_element: figure): JQuery[HTMLElement] = js.native
  @JSName("find")
  def find_filter(selector_element: JQuery[filter]): JQuery[SVGFilterElement] = js.native
  @JSName("find")
  def find_filter(selector_element: filter): JQuery[SVGFilterElement] = js.native
  @JSName("find")
  def find_font(selector_element: JQuery[font]): JQuery[HTMLFontElement] = js.native
  @JSName("find")
  def find_font(selector_element: font): JQuery[HTMLFontElement] = js.native
  @JSName("find")
  def find_footer(selector_element: JQuery[footer]): JQuery[HTMLElement] = js.native
  @JSName("find")
  def find_footer(selector_element: footer): JQuery[HTMLElement] = js.native
  @JSName("find")
  def find_foreignObject(selector_element: JQuery[foreignObject]): JQuery[SVGForeignObjectElement] = js.native
  @JSName("find")
  def find_foreignObject(selector_element: foreignObject): JQuery[SVGForeignObjectElement] = js.native
  @JSName("find")
  def find_form(selector_element: JQuery[form]): JQuery[HTMLFormElement] = js.native
  @JSName("find")
  def find_form(selector_element: form): JQuery[HTMLFormElement] = js.native
  @JSName("find")
  def find_frame(selector_element: JQuery[frame]): JQuery[HTMLFrameElement] = js.native
  @JSName("find")
  def find_frame(selector_element: frame): JQuery[HTMLFrameElement] = js.native
  @JSName("find")
  def find_frameset(selector_element: JQuery[frameset]): JQuery[HTMLFrameSetElement] = js.native
  @JSName("find")
  def find_frameset(selector_element: frameset): JQuery[HTMLFrameSetElement] = js.native
  @JSName("find")
  def find_g(selector_element: JQuery[g]): JQuery[SVGGElement] = js.native
  @JSName("find")
  def find_g(selector_element: g): JQuery[SVGGElement] = js.native
  @JSName("find")
  def find_h1(selector_element: JQuery[h1]): JQuery[HTMLHeadingElement] = js.native
  @JSName("find")
  def find_h1(selector_element: h1): JQuery[HTMLHeadingElement] = js.native
  @JSName("find")
  def find_h2(selector_element: JQuery[h2]): JQuery[HTMLHeadingElement] = js.native
  @JSName("find")
  def find_h2(selector_element: h2): JQuery[HTMLHeadingElement] = js.native
  @JSName("find")
  def find_h3(selector_element: JQuery[h3]): JQuery[HTMLHeadingElement] = js.native
  @JSName("find")
  def find_h3(selector_element: h3): JQuery[HTMLHeadingElement] = js.native
  @JSName("find")
  def find_h4(selector_element: JQuery[h4]): JQuery[HTMLHeadingElement] = js.native
  @JSName("find")
  def find_h4(selector_element: h4): JQuery[HTMLHeadingElement] = js.native
  @JSName("find")
  def find_h5(selector_element: JQuery[h5]): JQuery[HTMLHeadingElement] = js.native
  @JSName("find")
  def find_h5(selector_element: h5): JQuery[HTMLHeadingElement] = js.native
  @JSName("find")
  def find_h6(selector_element: JQuery[h6]): JQuery[HTMLHeadingElement] = js.native
  @JSName("find")
  def find_h6(selector_element: h6): JQuery[HTMLHeadingElement] = js.native
  @JSName("find")
  def find_head(selector_element: JQuery[head]): JQuery[HTMLHeadElement] = js.native
  @JSName("find")
  def find_head(selector_element: head): JQuery[HTMLHeadElement] = js.native
  @JSName("find")
  def find_header(selector_element: JQuery[header]): JQuery[HTMLElement] = js.native
  @JSName("find")
  def find_header(selector_element: header): JQuery[HTMLElement] = js.native
  @JSName("find")
  def find_hgroup(selector_element: JQuery[hgroup]): JQuery[HTMLElement] = js.native
  @JSName("find")
  def find_hgroup(selector_element: hgroup): JQuery[HTMLElement] = js.native
  @JSName("find")
  def find_hr(selector_element: JQuery[hr]): JQuery[HTMLHRElement] = js.native
  @JSName("find")
  def find_hr(selector_element: hr): JQuery[HTMLHRElement] = js.native
  @JSName("find")
  def find_html(selector_element: JQuery[html]): JQuery[HTMLHtmlElement] = js.native
  @JSName("find")
  def find_html(selector_element: html): JQuery[HTMLHtmlElement] = js.native
  @JSName("find")
  def find_i(selector_element: JQuery[i]): JQuery[HTMLElement] = js.native
  @JSName("find")
  def find_i(selector_element: i): JQuery[HTMLElement] = js.native
  @JSName("find")
  def find_iframe(selector_element: JQuery[iframe]): JQuery[HTMLIFrameElement] = js.native
  @JSName("find")
  def find_iframe(selector_element: iframe): JQuery[HTMLIFrameElement] = js.native
  @JSName("find")
  def find_image(selector_element: JQuery[image]): JQuery[SVGImageElement] = js.native
  @JSName("find")
  def find_image(selector_element: image): JQuery[SVGImageElement] = js.native
  @JSName("find")
  def find_img(selector_element: JQuery[img]): JQuery[HTMLImageElement] = js.native
  @JSName("find")
  def find_img(selector_element: img): JQuery[HTMLImageElement] = js.native
  @JSName("find")
  def find_input(selector_element: JQuery[input]): JQuery[HTMLInputElement] = js.native
  @JSName("find")
  def find_input(selector_element: input): JQuery[HTMLInputElement] = js.native
  @JSName("find")
  def find_ins(selector_element: JQuery[ins]): JQuery[HTMLModElement] = js.native
  @JSName("find")
  def find_ins(selector_element: ins): JQuery[HTMLModElement] = js.native
  @JSName("find")
  def find_kbd(selector_element: JQuery[kbd]): JQuery[HTMLElement] = js.native
  @JSName("find")
  def find_kbd(selector_element: kbd): JQuery[HTMLElement] = js.native
  @JSName("find")
  def find_label(selector_element: JQuery[label]): JQuery[HTMLLabelElement] = js.native
  @JSName("find")
  def find_label(selector_element: label): JQuery[HTMLLabelElement] = js.native
  @JSName("find")
  def find_legend(selector_element: JQuery[legend]): JQuery[HTMLLegendElement] = js.native
  @JSName("find")
  def find_legend(selector_element: legend): JQuery[HTMLLegendElement] = js.native
  @JSName("find")
  def find_li(selector_element: JQuery[li]): JQuery[HTMLLIElement] = js.native
  @JSName("find")
  def find_li(selector_element: li): JQuery[HTMLLIElement] = js.native
  @JSName("find")
  def find_line(selector_element: JQuery[line]): JQuery[SVGLineElement] = js.native
  @JSName("find")
  def find_line(selector_element: line): JQuery[SVGLineElement] = js.native
  @JSName("find")
  def find_linearGradient(selector_element: JQuery[linearGradient]): JQuery[SVGLinearGradientElement] = js.native
  @JSName("find")
  def find_linearGradient(selector_element: linearGradient): JQuery[SVGLinearGradientElement] = js.native
  @JSName("find")
  def find_link(selector_element: JQuery[link]): JQuery[HTMLLinkElement] = js.native
  @JSName("find")
  def find_link(selector_element: link): JQuery[HTMLLinkElement] = js.native
  @JSName("find")
  def find_main(selector_element: JQuery[main]): JQuery[HTMLElement] = js.native
  @JSName("find")
  def find_main(selector_element: main): JQuery[HTMLElement] = js.native
  @JSName("find")
  def find_map(selector_element: JQuery[map]): JQuery[HTMLMapElement] = js.native
  @JSName("find")
  def find_map(selector_element: map): JQuery[HTMLMapElement] = js.native
  @JSName("find")
  def find_mark(selector_element: JQuery[mark]): JQuery[HTMLElement] = js.native
  @JSName("find")
  def find_mark(selector_element: mark): JQuery[HTMLElement] = js.native
  @JSName("find")
  def find_marker(selector_element: JQuery[marker]): JQuery[SVGMarkerElement] = js.native
  @JSName("find")
  def find_marker(selector_element: marker): JQuery[SVGMarkerElement] = js.native
  @JSName("find")
  def find_marquee(selector_element: JQuery[marquee]): JQuery[HTMLMarqueeElement] = js.native
  @JSName("find")
  def find_marquee(selector_element: marquee): JQuery[HTMLMarqueeElement] = js.native
  @JSName("find")
  def find_mask(selector_element: JQuery[mask]): JQuery[SVGMaskElement] = js.native
  @JSName("find")
  def find_mask(selector_element: mask): JQuery[SVGMaskElement] = js.native
  @JSName("find")
  def find_menu(selector_element: JQuery[menu]): JQuery[HTMLMenuElement] = js.native
  @JSName("find")
  def find_menu(selector_element: menu): JQuery[HTMLMenuElement] = js.native
  @JSName("find")
  def find_meta(selector_element: JQuery[meta]): JQuery[HTMLMetaElement] = js.native
  @JSName("find")
  def find_meta(selector_element: meta): JQuery[HTMLMetaElement] = js.native
  @JSName("find")
  def find_metadata(selector_element: JQuery[metadata]): JQuery[SVGMetadataElement] = js.native
  @JSName("find")
  def find_metadata(selector_element: metadata): JQuery[SVGMetadataElement] = js.native
  @JSName("find")
  def find_meter(selector_element: JQuery[meter]): JQuery[HTMLMeterElement] = js.native
  @JSName("find")
  def find_meter(selector_element: meter): JQuery[HTMLMeterElement] = js.native
  @JSName("find")
  def find_nav(selector_element: JQuery[nav]): JQuery[HTMLElement] = js.native
  @JSName("find")
  def find_nav(selector_element: nav): JQuery[HTMLElement] = js.native
  @JSName("find")
  def find_noscript(selector_element: JQuery[noscript]): JQuery[HTMLElement] = js.native
  @JSName("find")
  def find_noscript(selector_element: noscript): JQuery[HTMLElement] = js.native
  @JSName("find")
  def find_object(selector_element: JQuery[`object`]): JQuery[HTMLObjectElement] = js.native
  @JSName("find")
  def find_object(selector_element: `object`): JQuery[HTMLObjectElement] = js.native
  @JSName("find")
  def find_ol(selector_element: JQuery[ol]): JQuery[HTMLOListElement] = js.native
  @JSName("find")
  def find_ol(selector_element: ol): JQuery[HTMLOListElement] = js.native
  @JSName("find")
  def find_optgroup(selector_element: JQuery[optgroup]): JQuery[HTMLOptGroupElement] = js.native
  @JSName("find")
  def find_optgroup(selector_element: optgroup): JQuery[HTMLOptGroupElement] = js.native
  @JSName("find")
  def find_option(selector_element: JQuery[option]): JQuery[HTMLOptionElement] = js.native
  @JSName("find")
  def find_option(selector_element: option): JQuery[HTMLOptionElement] = js.native
  @JSName("find")
  def find_output(selector_element: JQuery[output]): JQuery[HTMLOutputElement] = js.native
  @JSName("find")
  def find_output(selector_element: output): JQuery[HTMLOutputElement] = js.native
  @JSName("find")
  def find_p(selector_element: JQuery[p]): JQuery[HTMLParagraphElement] = js.native
  @JSName("find")
  def find_p(selector_element: p): JQuery[HTMLParagraphElement] = js.native
  @JSName("find")
  def find_param(selector_element: JQuery[param]): JQuery[HTMLParamElement] = js.native
  @JSName("find")
  def find_param(selector_element: param): JQuery[HTMLParamElement] = js.native
  @JSName("find")
  def find_path(selector_element: JQuery[path]): JQuery[SVGPathElement] = js.native
  @JSName("find")
  def find_path(selector_element: path): JQuery[SVGPathElement] = js.native
  @JSName("find")
  def find_pattern(selector_element: JQuery[pattern]): JQuery[SVGPatternElement] = js.native
  @JSName("find")
  def find_pattern(selector_element: pattern): JQuery[SVGPatternElement] = js.native
  @JSName("find")
  def find_picture(selector_element: JQuery[picture]): JQuery[HTMLPictureElement] = js.native
  @JSName("find")
  def find_picture(selector_element: picture): JQuery[HTMLPictureElement] = js.native
  @JSName("find")
  def find_polygon(selector_element: JQuery[polygon]): JQuery[SVGPolygonElement] = js.native
  @JSName("find")
  def find_polygon(selector_element: polygon): JQuery[SVGPolygonElement] = js.native
  @JSName("find")
  def find_polyline(selector_element: JQuery[polyline]): JQuery[SVGPolylineElement] = js.native
  @JSName("find")
  def find_polyline(selector_element: polyline): JQuery[SVGPolylineElement] = js.native
  @JSName("find")
  def find_pre(selector_element: JQuery[pre]): JQuery[HTMLPreElement] = js.native
  @JSName("find")
  def find_pre(selector_element: pre): JQuery[HTMLPreElement] = js.native
  @JSName("find")
  def find_progress(selector_element: JQuery[progress]): JQuery[HTMLProgressElement] = js.native
  @JSName("find")
  def find_progress(selector_element: progress): JQuery[HTMLProgressElement] = js.native
  @JSName("find")
  def find_q(selector_element: JQuery[q]): JQuery[HTMLQuoteElement] = js.native
  @JSName("find")
  def find_q(selector_element: q): JQuery[HTMLQuoteElement] = js.native
  @JSName("find")
  def find_radialGradient(selector_element: JQuery[radialGradient]): JQuery[SVGRadialGradientElement] = js.native
  @JSName("find")
  def find_radialGradient(selector_element: radialGradient): JQuery[SVGRadialGradientElement] = js.native
  @JSName("find")
  def find_rect(selector_element: JQuery[rect]): JQuery[SVGRectElement] = js.native
  @JSName("find")
  def find_rect(selector_element: rect): JQuery[SVGRectElement] = js.native
  @JSName("find")
  def find_rp(selector_element: JQuery[rp]): JQuery[HTMLElement] = js.native
  @JSName("find")
  def find_rp(selector_element: rp): JQuery[HTMLElement] = js.native
  @JSName("find")
  def find_rt(selector_element: JQuery[rt]): JQuery[HTMLElement] = js.native
  @JSName("find")
  def find_rt(selector_element: rt): JQuery[HTMLElement] = js.native
  @JSName("find")
  def find_ruby(selector_element: JQuery[ruby]): JQuery[HTMLElement] = js.native
  @JSName("find")
  def find_ruby(selector_element: ruby): JQuery[HTMLElement] = js.native
  @JSName("find")
  def find_s(selector_element: JQuery[s]): JQuery[HTMLElement] = js.native
  @JSName("find")
  def find_s(selector_element: s): JQuery[HTMLElement] = js.native
  @JSName("find")
  def find_samp(selector_element: JQuery[samp]): JQuery[HTMLElement] = js.native
  @JSName("find")
  def find_samp(selector_element: samp): JQuery[HTMLElement] = js.native
  @JSName("find")
  def find_script(selector_element: JQuery[script]): JQuery[HTMLScriptElement] = js.native
  @JSName("find")
  def find_script(selector_element: script): JQuery[HTMLScriptElement] = js.native
  @JSName("find")
  def find_section(selector_element: JQuery[section]): JQuery[HTMLElement] = js.native
  @JSName("find")
  def find_section(selector_element: section): JQuery[HTMLElement] = js.native
  @JSName("find")
  def find_select(selector_element: JQuery[select]): JQuery[HTMLSelectElement] = js.native
  @JSName("find")
  def find_select(selector_element: select): JQuery[HTMLSelectElement] = js.native
  @JSName("find")
  def find_slot(selector_element: JQuery[slot]): JQuery[HTMLSlotElement] = js.native
  @JSName("find")
  def find_slot(selector_element: slot): JQuery[HTMLSlotElement] = js.native
  @JSName("find")
  def find_small(selector_element: JQuery[small]): JQuery[HTMLElement] = js.native
  @JSName("find")
  def find_small(selector_element: small): JQuery[HTMLElement] = js.native
  @JSName("find")
  def find_source(selector_element: JQuery[source]): JQuery[HTMLSourceElement] = js.native
  @JSName("find")
  def find_source(selector_element: source): JQuery[HTMLSourceElement] = js.native
  @JSName("find")
  def find_span(selector_element: JQuery[span]): JQuery[HTMLSpanElement] = js.native
  @JSName("find")
  def find_span(selector_element: span): JQuery[HTMLSpanElement] = js.native
  @JSName("find")
  def find_stop(selector_element: JQuery[stop]): JQuery[SVGStopElement] = js.native
  @JSName("find")
  def find_stop(selector_element: stop): JQuery[SVGStopElement] = js.native
  @JSName("find")
  def find_strong(selector_element: JQuery[strong]): JQuery[HTMLElement] = js.native
  @JSName("find")
  def find_strong(selector_element: strong): JQuery[HTMLElement] = js.native
  @JSName("find")
  def find_style(selector_element: JQuery[style]): JQuery[HTMLStyleElement] = js.native
  @JSName("find")
  def find_style(selector_element: style): JQuery[HTMLStyleElement] = js.native
  @JSName("find")
  def find_sub(selector_element: JQuery[sub]): JQuery[HTMLElement] = js.native
  @JSName("find")
  def find_sub(selector_element: sub): JQuery[HTMLElement] = js.native
  @JSName("find")
  def find_summary(selector_element: JQuery[summary]): JQuery[HTMLElement] = js.native
  @JSName("find")
  def find_summary(selector_element: summary): JQuery[HTMLElement] = js.native
  @JSName("find")
  def find_sup(selector_element: JQuery[sup]): JQuery[HTMLElement] = js.native
  @JSName("find")
  def find_sup(selector_element: sup): JQuery[HTMLElement] = js.native
  @JSName("find")
  def find_svg(selector_element: JQuery[svg]): JQuery[SVGSVGElement] = js.native
  @JSName("find")
  def find_svg(selector_element: svg): JQuery[SVGSVGElement] = js.native
  @JSName("find")
  def find_switch(selector_element: JQuery[switch]): JQuery[SVGSwitchElement] = js.native
  @JSName("find")
  def find_switch(selector_element: switch): JQuery[SVGSwitchElement] = js.native
  @JSName("find")
  def find_symbol(selector_element: JQuery[symbol]): JQuery[SVGSymbolElement] = js.native
  @JSName("find")
  def find_symbol(selector_element: symbol): JQuery[SVGSymbolElement] = js.native
  @JSName("find")
  def find_table(selector_element: JQuery[table]): JQuery[HTMLTableElement] = js.native
  @JSName("find")
  def find_table(selector_element: table): JQuery[HTMLTableElement] = js.native
  @JSName("find")
  def find_tbody(selector_element: JQuery[tbody]): JQuery[HTMLTableSectionElement] = js.native
  @JSName("find")
  def find_tbody(selector_element: tbody): JQuery[HTMLTableSectionElement] = js.native
  @JSName("find")
  def find_td(selector_element: JQuery[td]): JQuery[HTMLTableDataCellElement] = js.native
  @JSName("find")
  def find_td(selector_element: td): JQuery[HTMLTableDataCellElement] = js.native
  @JSName("find")
  def find_template(selector_element: JQuery[template]): JQuery[HTMLTemplateElement] = js.native
  @JSName("find")
  def find_template(selector_element: template): JQuery[HTMLTemplateElement] = js.native
  @JSName("find")
  def find_text(selector_element: JQuery[text]): JQuery[SVGTextElement] = js.native
  @JSName("find")
  def find_text(selector_element: text): JQuery[SVGTextElement] = js.native
  @JSName("find")
  def find_textPath(selector_element: JQuery[textPath]): JQuery[SVGTextPathElement] = js.native
  @JSName("find")
  def find_textPath(selector_element: textPath): JQuery[SVGTextPathElement] = js.native
  @JSName("find")
  def find_textarea(selector_element: JQuery[textarea]): JQuery[HTMLTextAreaElement] = js.native
  @JSName("find")
  def find_textarea(selector_element: textarea): JQuery[HTMLTextAreaElement] = js.native
  @JSName("find")
  def find_tfoot(selector_element: JQuery[tfoot]): JQuery[HTMLTableSectionElement] = js.native
  @JSName("find")
  def find_tfoot(selector_element: tfoot): JQuery[HTMLTableSectionElement] = js.native
  @JSName("find")
  def find_th(selector_element: JQuery[th]): JQuery[HTMLTableHeaderCellElement] = js.native
  @JSName("find")
  def find_th(selector_element: th): JQuery[HTMLTableHeaderCellElement] = js.native
  @JSName("find")
  def find_thead(selector_element: JQuery[thead]): JQuery[HTMLTableSectionElement] = js.native
  @JSName("find")
  def find_thead(selector_element: thead): JQuery[HTMLTableSectionElement] = js.native
  @JSName("find")
  def find_time(selector_element: JQuery[time]): JQuery[HTMLTimeElement] = js.native
  @JSName("find")
  def find_time(selector_element: time): JQuery[HTMLTimeElement] = js.native
  @JSName("find")
  def find_title(selector_element: JQuery[title]): JQuery[HTMLTitleElement] = js.native
  @JSName("find")
  def find_title(selector_element: title): JQuery[HTMLTitleElement] = js.native
  @JSName("find")
  def find_tr(selector_element: JQuery[tr]): JQuery[HTMLTableRowElement] = js.native
  @JSName("find")
  def find_tr(selector_element: tr): JQuery[HTMLTableRowElement] = js.native
  @JSName("find")
  def find_track(selector_element: JQuery[track]): JQuery[HTMLTrackElement] = js.native
  @JSName("find")
  def find_track(selector_element: track): JQuery[HTMLTrackElement] = js.native
  @JSName("find")
  def find_tspan(selector_element: JQuery[tspan]): JQuery[SVGTSpanElement] = js.native
  @JSName("find")
  def find_tspan(selector_element: tspan): JQuery[SVGTSpanElement] = js.native
  @JSName("find")
  def find_u(selector_element: JQuery[u]): JQuery[HTMLElement] = js.native
  @JSName("find")
  def find_u(selector_element: u): JQuery[HTMLElement] = js.native
  @JSName("find")
  def find_ul(selector_element: JQuery[ul]): JQuery[HTMLUListElement] = js.native
  @JSName("find")
  def find_ul(selector_element: ul): JQuery[HTMLUListElement] = js.native
  @JSName("find")
  def find_use(selector_element: JQuery[use]): JQuery[SVGUseElement] = js.native
  @JSName("find")
  def find_use(selector_element: use): JQuery[SVGUseElement] = js.native
  @JSName("find")
  def find_var(selector_element: JQuery[`var`]): JQuery[HTMLElement] = js.native
  @JSName("find")
  def find_var(selector_element: `var`): JQuery[HTMLElement] = js.native
  @JSName("find")
  def find_video(selector_element: JQuery[video]): JQuery[HTMLVideoElement] = js.native
  @JSName("find")
  def find_video(selector_element: video): JQuery[HTMLVideoElement] = js.native
  @JSName("find")
  def find_view(selector_element: JQuery[view]): JQuery[SVGViewElement] = js.native
  @JSName("find")
  def find_view(selector_element: view): JQuery[SVGViewElement] = js.native
  @JSName("find")
  def find_wbr(selector_element: JQuery[wbr]): JQuery[HTMLElement] = js.native
  @JSName("find")
  def find_wbr(selector_element: wbr): JQuery[HTMLElement] = js.native
  
  /**
    * Stop the currently-running animation, remove all queued animations, and complete all animations for the matched elements.
    * @param queue The name of the queue in which to stop animations.
    * @see \`{@link https://api.jquery.com/finish/ }\`
    * @since 1.9
    * @example ​ ````Click the Go button once to start the animation, and then click the other buttons to see how they affect the current and queued animations.
  ```html
  <!doctype html>
  <html lang="en">
  <head>
    <meta charset="utf-8">
    <title>finish demo</title>
    <style>
    .box {
    position: absolute;
    top: 10px;
    left: 10px;
    width: 15px;
    height: 15px;
    background: black;
    }
    #path {
    height: 244px;
    font-size: 70%;
    border-left: 2px dashed red;
    border-bottom: 2px dashed green;
    border-right: 2px dashed blue;
    }
    button {
    width: 12em;
    display: block;
    text-align: left;
    margin: 0 auto;
    }
    </style>
    <script src="https://code.jquery.com/jquery-3.3.1.js"></script>
  </head>
  <body>
  ​
  <div class="box"></div>
  <div id="path">
    <button id="go">Go</button>
    <br>
    <button id="bstt" class="b">.stop( true,true )</button>
    <button id="bcf" class="b">.clearQueue().finish()</button>
    <br>
    <button id="bstf" class="b">.stop( true, false )</button>
    <button id="bcs" class="b">.clearQueue().stop()</button>
    <br>
    <button id="bsff" class="b">.stop( false, false )</button>
    <button id="bs" class="b">.stop()</button>
    <br>
    <button id="bsft" class="b">.stop( false, true )</button>
    <br>
    <button id="bf" class="b">.finish()</button>
  </div>
  ​
  <script>
  var horiz = $( "#path" ).width() - 20,
    vert = $( "#path" ).height() - 20;
  ​
  var btns = {
    bstt: function() {
    $( "div.box" ).stop( true, true );
    },
    bs: function() {
    $( "div.box" ).stop();
    },
    bsft: function() {
    $( "div.box" ).stop( false, true );
    },
    bf: function() {
    $( "div.box" ).finish();
    },
    bcf: function() {
    $( "div.box" ).clearQueue().finish();
    },
    bsff: function() {
    $( "div.box" ).stop( false, false );
    },
    bstf: function() {
    $( "div.box" ).stop( true, false );
    },
    bcs: function() {
    $( "div.box" ).clearQueue().stop();
    }
  };
  ​
  $( "button.b" ).on( "click", function() {
    btns[ this.id ]();
  });
  ​
  $( "#go" ).on( "click", function() {
    $( ".box" )
    .clearQueue()
    .stop()
    .css({
    left: 10,
    top: 10
    })
    .animate({
    top: vert
    }, 3000 )
    .animate({
    left: horiz
    }, 3000 )
    .animate({
    top: 10
    }, 3000 );
  });
  </script>
  ​
  </body>
  </html>
  ```
    */
  def finish(): this.type = js.native
  def finish(queue: String): this.type = js.native
  
  /**
    * Reduce the set of matched elements to the first in the set.
    * @see \`{@link https://api.jquery.com/first/ }\`
    * @since 1.4
    * @example ​ ````Highlight the first span in a paragraph.
  ```html
  <!doctype html>
  <html lang="en">
  <head>
    <meta charset="utf-8">
    <title>first demo</title>
    <style>
    .highlight{
    background-color: yellow
    }
    </style>
    <script src="https://code.jquery.com/jquery-3.3.1.js"></script>
  </head>
  <body>
  ​
  <p>
    <span>Look:</span>
    <span>This is some text in a paragraph.</span>
    <span>This is a note about it.</span>
  </p>
  ​
  <script>
  $( "p span" ).first().addClass( "highlight" );
  </script>
  ​
  </body>
  </html>
  ```
    */
  def first(): this.type = js.native
  
  /**
    * Bind an event handler to the "focus" JavaScript event, or trigger that event on an element.
    * @param handler A function to execute each time the event is triggered.
    * @see \`{@link https://api.jquery.com/focus/ }\`
    * @since 1.0
    * @deprecated ​ Deprecated since 3.3. Use \`{@link on }\` or \`{@link trigger }\`.
    *
    * **Cause**: The `.on()` and `.trigger()` methods can set an event handler or generate an event for any event type, and should be used instead of the shortcut methods. This message also applies to the other event shorthands, including: blur, focus, focusin, focusout, resize, scroll, dblclick, mousedown, mouseup, mousemove, mouseover, mouseout, mouseenter, mouseleave, change, select, submit, keydown, keypress, keyup, and contextmenu.
    *
    * **Solution**: Instead of `.click(fn)` use `.on("click", fn)`. Instead of `.click()` use `.trigger("click")`.
    * @example ​ ````Fire focus.
  ```html
  <!doctype html>
  <html lang="en">
  <head>
    <meta charset="utf-8">
    <title>focus demo</title>
    <style>
    span {
    display: none;
    }
    </style>
    <script src="https://code.jquery.com/jquery-3.3.1.js"></script>
  </head>
  <body>
  ​
  <p><input type="text"> <span>focus fire</span></p>
  <p><input type="password"> <span>focus fire</span></p>
  ​
  <script>
  $( "input" ).focus(function() {
    $( this ).next( "span" ).css( "display", "inline" ).fadeOut( 1000 );
  });
  </script>
  ​
  </body>
  </html>
  ```
    * @example ​ ````To stop people from writing in text input boxes, try:
  ```javascript
  $( "input[type=text]" ).focus(function() {
    $( this ).blur();
  });
  ```
    * @example ​ ````To focus on a login input box with id &#39;login&#39; on page startup, try:
  ```javascript
  $( document ).ready(function() {
    $( "#login" ).focus();
  });
  ```
    */
  def focus(): this.type = js.native
  @JSName("focus")
  def focus_false(handler: `false`): this.type = js.native
  @JSName("focus")
  def focus_focus(handler: TypeEventHandler[TElement, Null, TElement, TElement, focus]): this.type = js.native
  /**
    * Bind an event handler to the "focus" JavaScript event, or trigger that event on an element.
    * @param eventData An object containing data that will be passed to the event handler.
    * @param handler A function to execute each time the event is triggered.
    * @see \`{@link https://api.jquery.com/focus/ }\`
    * @since 1.4.3
    * @deprecated ​ Deprecated since 3.3. Use \`{@link on }\` or \`{@link trigger }\`.
    *
    * **Cause**: The `.on()` and `.trigger()` methods can set an event handler or generate an event for any event type, and should be used instead of the shortcut methods. This message also applies to the other event shorthands, including: blur, focus, focusin, focusout, resize, scroll, dblclick, mousedown, mouseup, mousemove, mouseover, mouseout, mouseenter, mouseleave, change, select, submit, keydown, keypress, keyup, and contextmenu.
    *
    * **Solution**: Instead of `.click(fn)` use `.on("click", fn)`. Instead of `.click()` use `.trigger("click")`.
    */
  @JSName("focus")
  def focus_focus[TData](eventData: TData, handler: TypeEventHandler[TElement, TData, TElement, TElement, focus]): this.type = js.native
  
  /**
    * Bind an event handler to the "focusin" event.
    * @param handler A function to execute each time the event is triggered.
    * @see \`{@link https://api.jquery.com/focusin/ }\`
    * @since 1.4
    * @deprecated ​ Deprecated since 3.3. Use \`{@link on }\` or \`{@link trigger }\`.
    *
    * **Cause**: The `.on()` and `.trigger()` methods can set an event handler or generate an event for any event type, and should be used instead of the shortcut methods. This message also applies to the other event shorthands, including: blur, focus, focusin, focusout, resize, scroll, dblclick, mousedown, mouseup, mousemove, mouseover, mouseout, mouseenter, mouseleave, change, select, submit, keydown, keypress, keyup, and contextmenu.
    *
    * **Solution**: Instead of `.click(fn)` use `.on("click", fn)`. Instead of `.click()` use `.trigger("click")`.
    * @example ​ ````Watch for a focus to occur within the paragraphs on the page.
  ```html
  <!doctype html>
  <html lang="en">
  <head>
    <meta charset="utf-8">
    <title>focusin demo</title>
    <style>
    span {
    display: none;
    }
    </style>
    <script src="https://code.jquery.com/jquery-3.3.1.js"></script>
  </head>
  <body>
  ​
  <p><input type="text"> <span>focusin fire</span></p>
  <p><input type="password"> <span>focusin fire</span></p>
  ​
  <script>
  $( "p" ).focusin(function() {
    $( this ).find( "span" ).css( "display", "inline" ).fadeOut( 1000 );
  });
  </script>
  ​
  </body>
  </html>
  ```
    */
  def focusin(): this.type = js.native
  @JSName("focusin")
  def focusin_false(handler: `false`): this.type = js.native
  @JSName("focusin")
  def focusin_focusin(handler: TypeEventHandler[TElement, Null, TElement, TElement, focusin]): this.type = js.native
  /**
    * Bind an event handler to the "focusin" event.
    * @param eventData An object containing data that will be passed to the event handler.
    * @param handler A function to execute each time the event is triggered.
    * @see \`{@link https://api.jquery.com/focusin/ }\`
    * @since 1.4.3
    * @deprecated ​ Deprecated since 3.3. Use \`{@link on }\` or \`{@link trigger }\`.
    *
    * **Cause**: The `.on()` and `.trigger()` methods can set an event handler or generate an event for any event type, and should be used instead of the shortcut methods. This message also applies to the other event shorthands, including: blur, focus, focusin, focusout, resize, scroll, dblclick, mousedown, mouseup, mousemove, mouseover, mouseout, mouseenter, mouseleave, change, select, submit, keydown, keypress, keyup, and contextmenu.
    *
    * **Solution**: Instead of `.click(fn)` use `.on("click", fn)`. Instead of `.click()` use `.trigger("click")`.
    */
  @JSName("focusin")
  def focusin_focusin[TData](eventData: TData, handler: TypeEventHandler[TElement, TData, TElement, TElement, focusin]): this.type = js.native
  
  /**
    * Bind an event handler to the "focusout" JavaScript event.
    * @param handler A function to execute each time the event is triggered.
    * @see \`{@link https://api.jquery.com/focusout/ }\`
    * @since 1.4
    * @deprecated ​ Deprecated since 3.3. Use \`{@link on }\` or \`{@link trigger }\`.
    *
    * **Cause**: The `.on()` and `.trigger()` methods can set an event handler or generate an event for any event type, and should be used instead of the shortcut methods. This message also applies to the other event shorthands, including: blur, focus, focusin, focusout, resize, scroll, dblclick, mousedown, mouseup, mousemove, mouseover, mouseout, mouseenter, mouseleave, change, select, submit, keydown, keypress, keyup, and contextmenu.
    *
    * **Solution**: Instead of `.click(fn)` use `.on("click", fn)`. Instead of `.click()` use `.trigger("click")`.
    * @example ​ ````Watch for a loss of focus to occur inside paragraphs and note the difference between the focusout count and the blur count. (The blur count does not change because those events do not bubble.)
  ```html
  <!doctype html>
  <html lang="en">
  <head>
    <meta charset="utf-8">
    <title>focusout demo</title>
    <style>
    .inputs {
    float: left;
    margin-right: 1em;
    }
    .inputs p {
    margin-top: 0;
    }
    </style>
    <script src="https://code.jquery.com/jquery-3.3.1.js"></script>
  </head>
  <body>
  ​
  <div class="inputs">
    <p>
    <input type="text"><br>
    <input type="text">
    </p>
    <p>
    <input type="password">
    </p>
  </div>
  <div id="focus-count">focusout fire</div>
  <div id="blur-count">blur fire</div>
  ​
  <script>
  var focus = 0,
    blur = 0;
  $( "p" )
    .focusout(function() {
    focus++;
    $( "#focus-count" ).text( "focusout fired: " + focus + "x" );
    })
    .blur(function() {
    blur++;
    $( "#blur-count" ).text( "blur fired: " + blur + "x" );
    });
  </script>
  ​
  </body>
  </html>
  ```
    */
  def focusout(): this.type = js.native
  @JSName("focusout")
  def focusout_false(handler: `false`): this.type = js.native
  @JSName("focusout")
  def focusout_focusout(handler: TypeEventHandler[TElement, Null, TElement, TElement, focusout]): this.type = js.native
  /**
    * Bind an event handler to the "focusout" JavaScript event.
    * @param eventData An object containing data that will be passed to the event handler.
    * @param handler A function to execute each time the event is triggered.
    * @see \`{@link https://api.jquery.com/focusout/ }\`
    * @since 1.4.3
    * @deprecated ​ Deprecated since 3.3. Use \`{@link on }\` or \`{@link trigger }\`.
    *
    * **Cause**: The `.on()` and `.trigger()` methods can set an event handler or generate an event for any event type, and should be used instead of the shortcut methods. This message also applies to the other event shorthands, including: blur, focus, focusin, focusout, resize, scroll, dblclick, mousedown, mouseup, mousemove, mouseover, mouseout, mouseenter, mouseleave, change, select, submit, keydown, keypress, keyup, and contextmenu.
    *
    * **Solution**: Instead of `.click(fn)` use `.on("click", fn)`. Instead of `.click()` use `.trigger("click")`.
    */
  @JSName("focusout")
  def focusout_focusout[TData](eventData: TData, handler: TypeEventHandler[TElement, TData, TElement, TElement, focusout]): this.type = js.native
  
  /**
    * Retrieve the elements matched by the jQuery object.
    * @see \`{@link https://api.jquery.com/get/ }\`
    * @since 1.0
    * @example ​ ````Select all divs in the document and return the DOM Elements as an Array; then use the built-in reverse() method to reverse that array.
  ```html
  <!doctype html>
  <html lang="en">
  <head>
    <meta charset="utf-8">
    <title>get demo</title>
    <style>
    span {
    color: red;
    }
    </style>
    <script src="https://code.jquery.com/jquery-3.3.1.js"></script>
  </head>
  <body>
  ​
  Reversed - <span></span>
  ​
  <div>One</div>
  <div>Two</div>
  <div>Three</div>
  ​
  <script>
  function display( divs ) {
    var a = [];
    for ( var i = 0; i < divs.length; i++ ) {
    a.push( divs[ i ].innerHTML );
    }
    $( "span" ).text( a.join(" ") );
  }
  display( $( "div" ).get().reverse() );
  </script>
  ​
  </body>
  </html>
  ```
    */
  def get(): js.Array[TElement] = js.native
  /**
    * Retrieve one of the elements matched by the jQuery object.
    * @param index A zero-based integer indicating which element to retrieve.
    * @see \`{@link https://api.jquery.com/get/ }\`
    * @since 1.0
    * @example ​ ````Display the tag name of the click element.
  ```html
  <!doctype html>
  <html lang="en">
  <head>
    <meta charset="utf-8">
    <title>get demo</title>
    <style>
    span {
    color: red;
    }
    div {
    background: yellow;
    }
    </style>
    <script src="https://code.jquery.com/jquery-3.3.1.js"></script>
  </head>
  <body>
  ​
  <span>&nbsp;</span>
  <p>In this paragraph is an <span>important</span> section</p>
  <div><input type="text"></div>
  ​
  <script>
  $( "*", document.body ).click(function( event ) {
    event.stopPropagation();
    var domElement = $( this ).get( 0 );
    $( "span:first" ).text( "Clicked on - " + domElement.nodeName );
  });
  </script>
  ​
  </body>
  </html>
  ```
    */
  def get(index: Double): TElement = js.native
  
  /**
    * Reduce the set of matched elements to those that have a descendant that matches the selector or DOM element.
    * @param selector_contained _&#x40;param_ `selector_contained`
    * <br>
    * * `selector` — A string containing a selector expression to match elements against. <br>
    * * `contained` — A DOM element to match elements against.
    * @see \`{@link https://api.jquery.com/has/ }\`
    * @since 1.4
    * @example ​ ````Check if an element is inside another.
  ```html
  <!doctype html>
  <html lang="en">
  <head>
    <meta charset="utf-8">
    <title>has demo</title>
    <style>
    .full {
    border: 1px solid red;
    }
    </style>
    <script src="https://code.jquery.com/jquery-3.3.1.js"></script>
  </head>
  <body>
  ​
  <ul><li>Does the UL contain an LI?</li></ul>
  ​
  <script>
  $( "ul" ).append( "<li>" +
    ( $( "ul" ).has( "li" ).length ? "Yes" : "No" ) +
    "</li>" );
  $( "ul" ).has( "li" ).addClass( "full" );
  </script>
  ​
  </body>
  </html>
  ```
    */
  def has(selector_contained: String): this.type = js.native
  def has(selector_contained: Element): this.type = js.native
  
  /**
    * Determine whether any of the matched elements are assigned the given class.
    * @param className The class name to search for.
    * @see \`{@link https://api.jquery.com/hasClass/ }\`
    * @since 1.2
    * @example ​ ````Looks for the paragraph that contains &#39;selected&#39; as a class.
  ```html
  <!doctype html>
  <html lang="en">
  <head>
    <meta charset="utf-8">
    <title>hasClass demo</title>
    <style>
    p {
    margin: 8px;
    font-size: 16px;
    }
    .selected {
    color: red;
    }
    </style>
    <script src="https://code.jquery.com/jquery-3.3.1.js"></script>
  </head>
  <body>
  ​
  <p>This paragraph is black and is the first paragraph.</p>
  <p class="selected">This paragraph is red and is the second paragraph.</p>
  <div id="result1">First paragraph has selected class: </div>
  <div id="result2">Second paragraph has selected class: </div>
  <div id="result3">At least one paragraph has selected class: </div>
  ​
  <script>
  $( "#result1" ).append( $( "p:first" ).hasClass( "selected" ).toString() );
  $( "#result2" ).append( $( "p:last" ).hasClass( "selected" ).toString() );
  $( "#result3" ).append( $( "p" ).hasClass( "selected" ).toString() ) ;
  </script>
  ​
  </body>
  </html>
  ```
    */
  def hasClass(className: String): Boolean = js.native
  
  /**
    * Get the current computed height for the first element in the set of matched elements.
    * @see \`{@link https://api.jquery.com/height/ }\`
    * @since 1.0
    * @example ​ ````Show various heights.  Note the values are from the iframe so might be smaller than you expected.  The yellow highlight shows the iframe body.
  ```html
  <!doctype html>
  <html lang="en">
  <head>
    <meta charset="utf-8">
    <title>height demo</title>
    <style>
    body {
    background: yellow;
    }
    button {
    font-size: 12px;
    margin: 2px;
    }
    p {
    width: 150px;
    border: 1px red solid;
    }
    div {
    color: red;
    font-weight: bold;
    }
    </style>
    <script src="https://code.jquery.com/jquery-3.3.1.js"></script>
  </head>
  <body>
  ​
  <button id="getp">Get Paragraph Height</button>
  <button id="getd">Get Document Height</button>
  <button id="getw">Get Window Height</button>
  ​
  <div>&nbsp;</div>
  <p>
    Sample paragraph to test height
  </p>
  ​
  <script>
  function showHeight( element, height ) {
    $( "div" ).text( "The height for the " + element + " is " + height + "px." );
  }
  $( "#getp" ).click(function() {
    showHeight( "paragraph", $( "p" ).height() );
  });
  $( "#getd" ).click(function() {
    showHeight( "document", $( document ).height() );
  });
  $( "#getw" ).click(function() {
    showHeight( "window", $( window ).height() );
  });
  </script>
  ​
  </body>
  </html>
  ```
    */
  def height(): js.UndefOr[Double] = js.native
  /**
    * Set the CSS height of every matched element.
    * @param value_function _&#x40;param_ `value_function`
    * <br>
    * * `value` — An integer representing the number of pixels, or an integer with an optional unit of measure
    *             appended (as a string). <br>
    * * `function` — A function returning the height to set. Receives the index position of the element in the set and
    *                the old height as arguments. Within the function, `this` refers to the current element in the set.
    * @see \`{@link https://api.jquery.com/height/ }\`
    * @since 1.0
    * @since 1.4.1
    * @example ​ ````To set the height of each div on click to 30px plus a color change.
  ```html
  <!doctype html>
  <html lang="en">
  <head>
    <meta charset="utf-8">
    <title>height demo</title>
    <style>
    div {
    width: 50px;
    height: 70px;
    float: left;
    margin: 5px;
    background: rgb(255,140,0);
    cursor: pointer;
    }
    </style>
    <script src="https://code.jquery.com/jquery-3.3.1.js"></script>
  </head>
  <body>
  ​
  <div></div>
  <div></div>
  <div></div>
  <div></div>
  <div></div>
  ​
  <script>
  $( "div" ).one( "click", function() {
    $( this ).height( 30 ).css({
    cursor: "auto",
    backgroundColor: "green"
    });
  });
  </script>
  ​
  </body>
  </html>
  ```
    */
  def height(value_function: String): this.type = js.native
  def height(
    value_function: js.ThisFunction2[/* this */ TElement, /* index */ Double, /* height */ Double, String | Double]
  ): this.type = js.native
  def height(value_function: Double): this.type = js.native
  
  /**
    * Hide the matched elements.
    * @param duration_complete_options _&#x40;param_ `duration_complete_options`
    * <br>
    * * `duration` — A string or number determining how long the animation will run. <br>
    * * `complete` — A function to call once the animation is complete, called once per matched element. <br>
    * * `options` — A map of additional options to pass to the method.
    * @see \`{@link https://api.jquery.com/hide/ }\`
    * @since 1.0
    * @example ​ ````Hides all paragraphs then the link on click.
  ```html
  <!doctype html>
  <html lang="en">
  <head>
    <meta charset="utf-8">
    <title>hide demo</title>
    <script src="https://code.jquery.com/jquery-3.3.1.js"></script>
  </head>
  <body>
  ​
  <p>Hello</p>
  <a href="#">Click to hide me too</a>
  <p>Here is another paragraph</p>
  ​
  <script>
  $( "p" ).hide();
  $( "a" ).click(function( event ) {
    event.preventDefault();
    $( this ).hide();
  });
  </script>
  ​
  </body>
  </html>
  ```
    * @example ​ ````Animates all shown paragraphs to hide slowly, completing the animation within 600 milliseconds.
  ```html
  <!doctype html>
  <html lang="en">
  <head>
    <meta charset="utf-8">
    <title>hide demo</title>
    <style>
    p {
    background: #dad;
    font-weight: bold;
    }
    </style>
    <script src="https://code.jquery.com/jquery-3.3.1.js"></script>
  </head>
  <body>
  ​
  <button>Hide 'em</button>
  <p>Hiya</p>
  <p>Such interesting text, eh?</p>
  ​
  <script>
  $( "button" ).click(function() {
    $( "p" ).hide( "slow" );
  });
  </script>
  ​
  </body>
  </html>
  ```
    */
  def hide(): this.type = js.native
  def hide(duration_complete_options: js.ThisFunction0[/* this */ TElement, Unit]): this.type = js.native
  def hide(duration_complete_options: Duration): this.type = js.native
  def hide(duration_complete_options: EffectsOptions[TElement]): this.type = js.native
  /**
    * Hide the matched elements.
    * @param duration A string or number determining how long the animation will run.
    * @param easing_complete _&#x40;param_ `easing_complete`
    * <br>
    * * `easing` — A string indicating which easing function to use for the transition. <br>
    * * `complete` — A function to call once the animation is complete, called once per matched element.
    * @see \`{@link https://api.jquery.com/hide/ }\`
    * @since 1.0
    * @since 1.4.3
    * @example ​ ````Animates all spans (words in this case) to hide fastly, completing each animation within 200 milliseconds. Once each animation is done, it starts the next one.
  ```html
  <!doctype html>
  <html lang="en">
  <head>
    <meta charset="utf-8">
    <title>hide demo</title>
    <style>
    span {
    background: #def3ca;
    padding: 3px;
    float: left;
    }
    </style>
    <script src="https://code.jquery.com/jquery-3.3.1.js"></script>
  </head>
  <body>
  ​
  <button id="hider">Hide</button>
  <button id="shower">Show</button>
  <div>
    <span>Once</span> <span>upon</span> <span>a</span>
    <span>time</span> <span>there</span> <span>were</span>
    <span>three</span> <span>programmers...</span>
  </div>
  ​
  <script>
  $( "#hider" ).click(function() {
    $( "span:last-child" ).hide( "fast", function() {
    // Use arguments.callee so we don't need a named function
    $( this ).prev().hide( "fast", arguments.callee );
    });
  });
  $( "#shower" ).click(function() {
    $( "span" ).show( 2000 );
  });
  </script>
  ​
  </body>
  </html>
  ```
    * @example ​ ````Hides the divs when clicked over 2 seconds, then removes the div element when its hidden.  Try clicking on more than one box at a time.
  ```html
  <!doctype html>
  <html lang="en">
  <head>
    <meta charset="utf-8">
    <title>hide demo</title>
    <style>
    div {
    background: #ece023;
    width: 30px;
    height: 40px;
    margin: 2px;
    float: left;
    }
    </style>
    <script src="https://code.jquery.com/jquery-3.3.1.js"></script>
  </head>
  <body>
  ​
  <div></div>
  ​
  <script>
  for ( var i = 0; i < 5; i++ ) {
    $( "<div>" ).appendTo( document.body );
  }
  $( "div" ).click(function() {
    $( this ).hide( 2000, function() {
    $( this ).remove();
    });
  });
  </script>
  ​
  </body>
  </html>
  ```
    */
  def hide(duration: Duration, easing_complete: String): this.type = js.native
  def hide(duration: Duration, easing_complete: js.ThisFunction0[/* this */ TElement, Unit]): this.type = js.native
  /**
    * Hide the matched elements.
    * @param duration A string or number determining how long the animation will run.
    * @param easing A string indicating which easing function to use for the transition.
    * @param complete A function to call once the animation is complete, called once per matched element.
    * @see \`{@link https://api.jquery.com/hide/ }\`
    * @since 1.4.3
    */
  def hide(duration: Duration, easing: String, complete: js.ThisFunction0[/* this */ TElement, Unit]): this.type = js.native
  
  /**
    * Bind a single handler to the matched elements, to be executed when the mouse pointer enters or leaves the elements.
    * @param handlerInOut A function to execute when the mouse pointer enters or leaves the element.
    * @see \`{@link https://api.jquery.com/hover/ }\`
    * @since 1.4
    * @deprecated ​ Deprecated.
    *
    * **Cause**: The `.hover()` method is a shorthand for the use of the `mouseover`/`mouseout` events. It is often a poor user interface choice because it does not allow for any small amounts of delay between when the mouse enters or exits an area and when the event fires. This can make it quite difficult to use with UI widgets such as drop-down menus. For more information on the problems of hovering, see the \`{@link http://cherne.net/brian/resources/jquery.hoverIntent.html hoverIntent plugin}\`.
    *
    * **Solution**: Review uses of `.hover()` to determine if they are appropriate, and consider use of plugins such as `hoverIntent` as an alternative. The direct replacement for `.hover(fn1, fn2)`, is `.on("mouseenter", fn1).on("mouseleave", fn2)`.
    * @example ​ ````Slide the next sibling LI up or down on hover, and toggle a class.
  ```html
  <!doctype html>
  <html lang="en">
  <head>
    <meta charset="utf-8">
    <title>hover demo</title>
    <style>
    ul {
    margin-left: 20px;
    color: blue;
    }
    li {
    cursor: default;
    }
    li.active {
    background: black;
    color: white;
    }
    span {
    color:red;
    }
    </style>
    <script src="https://code.jquery.com/jquery-3.3.1.js"></script>
  </head>
  <body>
  ​
  <ul>
    <li>Milk</li>
    <li>White</li>
    <li>Carrots</li>
    <li>Orange</li>
    <li>Broccoli</li>
    <li>Green</li>
  </ul>
  ​
  <script>
  $( "li" )
    .filter( ":odd" )
    .hide()
    .end()
    .filter( ":even" )
    .hover(function() {
    $( this )
    .toggleClass( "active" )
    .next()
    .stop( true, true )
    .slideToggle();
    });
  </script>
  ​
  </body>
  </html>
  ```
    */
  def hover(handlerInOut: TypeEventHandler[TElement, Null, TElement, TElement, mouseenter | mouseleave]): this.type = js.native
  /**
    * Bind two handlers to the matched elements, to be executed when the mouse pointer enters and leaves the elements.
    * @param handlerIn A function to execute when the mouse pointer enters the element.
    * @param handlerOut A function to execute when the mouse pointer leaves the element.
    * @see \`{@link https://api.jquery.com/hover/ }\`
    * @since 1.0
    * @deprecated ​ Deprecated.
    *
    * **Cause**: The `.hover()` method is a shorthand for the use of the `mouseover`/`mouseout` events. It is often a poor user interface choice because it does not allow for any small amounts of delay between when the mouse enters or exits an area and when the event fires. This can make it quite difficult to use with UI widgets such as drop-down menus. For more information on the problems of hovering, see the \`{@link http://cherne.net/brian/resources/jquery.hoverIntent.html hoverIntent plugin}\`.
    *
    * **Solution**: Review uses of `.hover()` to determine if they are appropriate, and consider use of plugins such as `hoverIntent` as an alternative. The direct replacement for `.hover(fn1, fn2)`, is `.on("mouseenter", fn1).on("mouseleave", fn2)`.
    * @example ​ ````To add a special style to list items that are being hovered over, try:
  ```html
  <!doctype html>
  <html lang="en">
  <head>
    <meta charset="utf-8">
    <title>hover demo</title>
    <style>
    ul {
    margin-left: 20px;
    color: blue;
    }
    li {
    cursor: default;
    }
    span {
    color: red;
    }
    </style>
    <script src="https://code.jquery.com/jquery-3.3.1.js"></script>
  </head>
  <body>
  ​
  <ul>
    <li>Milk</li>
    <li>Bread</li>
    <li class="fade">Chips</li>
    <li class="fade">Socks</li>
  </ul>
  ​
  <script>
  $( "li" ).hover(
    function() {
    $( this ).append( $( "<span> ***</span>" ) );
    }, function() {
    $( this ).find( "span:last" ).remove();
    }
  );
  ​
  $( "li.fade" ).hover(function() {
    $( this ).fadeOut( 100 );
    $( this ).fadeIn( 500 );
  });
  </script>
  ​
  </body>
  </html>
  ```
    * @example ​ ````To add a special style to table cells that are being hovered over, try:
  ```javascript
  $( "td" ).hover(
    function() {
    $( this ).addClass( "hover" );
    }, function() {
    $( this ).removeClass( "hover" );
    }
  );
  ```
    * @example ​ ````To unbind the above example use:
  ```javascript
  $( "td" ).off( "mouseenter mouseleave" );
  ```
    */
  def hover(
    handlerIn: TypeEventHandler[TElement, Null, TElement, TElement, mouseenter],
    handlerOut: TypeEventHandler[TElement, Null, TElement, TElement, mouseleave]
  ): this.type = js.native
  def hover(handlerIn: TypeEventHandler[TElement, Null, TElement, TElement, mouseenter], handlerOut: `false`): this.type = js.native
  def hover(handlerIn: `false`, handlerOut: TypeEventHandler[TElement, Null, TElement, TElement, mouseleave]): this.type = js.native
  @JSName("hover")
  def hover_false(handlerInOut: `false`): this.type = js.native
  @JSName("hover")
  def hover_false(handlerIn: `false`, handlerOut: `false`): this.type = js.native
  
  /**
    * Get the HTML contents of the first element in the set of matched elements.
    * @see \`{@link https://api.jquery.com/html/ }\`
    * @since 1.0
    * @example ​ ````Click a paragraph to convert it from html to text.
  ```html
  <!doctype html>
  <html lang="en">
  <head>
    <meta charset="utf-8">
    <title>html demo</title>
    <style>
    p {
    margin: 8px;
    font-size: 20px;
    color: blue;
    cursor: pointer;
    }
    b {
    text-decoration: underline;
    }
    button {
    cursor: pointer;
    }
    </style>
    <script src="https://code.jquery.com/jquery-3.3.1.js"></script>
  </head>
  <body>
  ​
  <p>
    <b>Click</b> to change the <span id="tag">html</span>
  </p>
  <p>
    to a <span id="text">text</span> node.
  </p>
  <p>
    This <button name="nada">button</button> does nothing.
  </p>
  ​
  <script>
  $( "p" ).click(function() {
    var htmlString = $( this ).html();
    $( this ).text( htmlString );
  });
  </script>
  ​
  </body>
  </html>
  ```
    */
  def html(): String = js.native
  def html(
    htmlString_function: js.ThisFunction2[/* this */ TElement, /* index */ Double, /* oldhtml */ htmlString, htmlString | Node]
  ): this.type = js.native
  def html(htmlString_function: Node): this.type = js.native
  /**
    * Set the HTML contents of each element in the set of matched elements.
    * @param htmlString_function _&#x40;param_ `htmlString_function`
    * <br>
    * * `htmlString` — A string of HTML to set as the content of each matched element. <br>
    * * `function` — A function returning the HTML content to set. Receives the index position of the element in the set
    *                and the old HTML value as arguments. jQuery empties the element before calling the function; use the
    *                oldhtml argument to reference the previous content. Within the function, `this` refers to the current
    *                element in the set.
    * @see \`{@link https://api.jquery.com/html/ }\`
    * @since 1.0
    * @since 1.4
    * @example ​ ````Add some html to each div.
  ```html
  <!doctype html>
  <html lang="en">
  <head>
    <meta charset="utf-8">
    <title>html demo</title>
    <style>
    .red {
    color: red;
    }
    </style>
    <script src="https://code.jquery.com/jquery-3.3.1.js"></script>
  </head>
  <body>
  ​
  <span>Hello</span>
  <div></div>
  <div></div>
  <div></div>
  ​
  <script>
  $( "div" ).html( "<span class='red'>Hello <b>Again</b></span>" );
  </script>
  ​
  </body>
  </html>
  ```
    * @example ​ ````Add some html to each div then immediately do further manipulations to the inserted html.
  ```html
  <!doctype html>
  <html lang="en">
  <head>
    <meta charset="utf-8">
    <title>html demo</title>
    <style>
    div {
    color: blue;
    font-size: 18px;
    }
    </style>
    <script src="https://code.jquery.com/jquery-3.3.1.js"></script>
  </head>
  <body>
  ​
  <div></div>
  <div></div>
  <div></div>
  ​
  <script>
  $( "div" ).html( "<b>Wow!</b> Such excitement..." );
  $( "div b" )
    .append( document.createTextNode( "!!!" ) )
    .css( "color", "red" );
  </script>
  ​
  </body>
  </html>
  ```
    */
  def html(htmlString_function: htmlString): this.type = js.native
  
  /**
    * Search for a given element from among the matched elements.
    * @param selector_element _&#x40;param_ `selector_element`
    * <br>
    * * `selector` — A selector representing a jQuery collection in which to look for an element. <br>
    * * `element` — The DOM element or first element within the jQuery object to look for.
    * @see \`{@link https://api.jquery.com/index/ }\`
    * @since 1.0
    * @since 1.4
    * @example ​ ````On click, returns the index (zero-based) of that div in the page.
  ```html
  <!doctype html>
  <html lang="en">
  <head>
    <meta charset="utf-8">
    <title>index demo</title>
    <style>
    div {
    background: yellow;
    margin: 5px;
    }
    span {
    color: red;
    }
    </style>
    <script src="https://code.jquery.com/jquery-3.3.1.js"></script>
  </head>
  <body>
  ​
  <span>Click a div!</span>
  <div>First div</div>
  <div>Second div</div>
  <div>Third div</div>
  ​
  <script>
  $( "div" ).click(function() {
    // `this` is the DOM element that was clicked
    var index = $( "div" ).index( this );
    $( "span" ).text( "That was div index #" + index );
  });
  </script>
  ​
  </body>
  </html>
  ```
    * @example ​ ````Returns the index for the element with ID bar.
  ```html
  <!doctype html>
  <html lang="en">
  <head>
    <meta charset="utf-8">
    <title>index demo</title>
    <style>
    div {
    font-weight: bold;
    color: #090;
    }
    </style>
    <script src="https://code.jquery.com/jquery-3.3.1.js"></script>
  </head>
  <body>
  ​
  <ul>
    <li id="foo">foo</li>
    <li id="bar">bar</li>
    <li id="baz">baz</li>
  </ul>
  <div></div>
  ​
  <script>
  var listItem = $( "#bar" );
  $( "div" ).html( "Index: " + $( "li" ).index( listItem ) );
  </script>
  ​
  </body>
  </html>
  ```
    * @example ​ ````Returns the index for the first item in the jQuery collection.
  ```html
  <!doctype html>
  <html lang="en">
  <head>
    <meta charset="utf-8">
    <title>index demo</title>
    <style>
    div {
    font-weight: bold;
    color: #090;
    }
    </style>
    <script src="https://code.jquery.com/jquery-3.3.1.js"></script>
  </head>
  <body>
  ​
  <ul>
    <li id="foo">foo</li>
    <li id="bar">bar</li>
    <li id="baz">baz</li>
  </ul>
  <div></div>
  ​
  <script>
  var listItems = $( "li:gt(0)" );
  $( "div" ).html( "Index: " + $( "li" ).index( listItems ) );
  </script>
  ​
  </body>
  </html>
  ```
    * @example ​ ````Returns the index for the element with ID bar in relation to all &lt;li&gt; elements.
  ```html
  <!doctype html>
  <html lang="en">
  <head>
    <meta charset="utf-8">
    <title>index demo</title>
    <style>
    div {
    font-weight: bold;
    color: #090;
    }
    </style>
    <script src="https://code.jquery.com/jquery-3.3.1.js"></script>
  </head>
  <body>
  ​
  <ul>
    <li id="foo">foo</li>
    <li id="bar">bar</li>
    <li id="baz">baz</li>
  </ul>
  <div></div>
  ​
  <script>
  $( "div" ).html( "Index: " +  $( "#bar" ).index( "li" ) );
  </script>
  ​
  </body>
  </html>
  ```
    * @example ​ ````Returns the index for the element with ID bar in relation to its siblings.
  ```html
  <!doctype html>
  <html lang="en">
  <head>
    <meta charset="utf-8">
    <title>index demo</title>
    <style>
    div {
    font-weight: bold;
    color: #090;
    }
    </style>
    <script src="https://code.jquery.com/jquery-3.3.1.js"></script>
  </head>
  <body>
  ​
  <ul>
    <li id="foo">foo</li>
    <li id="bar">bar</li>
    <li id="baz">baz</li>
  </ul>
  <div></div>
  ​
  <script>
  var barIndex = $( "#bar" ).index();
  $( "div" ).html( "Index: " +  barIndex );
  </script>
  ​
  </body>
  </html>
  ```
    * @example ​ ````Returns -1, as there is no element with ID foobar.
  ```html
  <!doctype html>
  <html lang="en">
  <head>
    <meta charset="utf-8">
    <title>index demo</title>
    <style>
    div {
    font-weight: bold;
    color: #090;
    }
    </style>
    <script src="https://code.jquery.com/jquery-3.3.1.js"></script>
  </head>
  <body>
  ​
  <ul>
    <li id="foo">foo</li>
    <li id="bar">bar</li>
    <li id="baz">baz</li>
  </ul>
  <div></div>
  ​
  <script>
  var foobar = $( "li" ).index( $( "#foobar" ) );
  $( "div" ).html( "Index: " + foobar );
  </script>
  ​
  </body>
  </html>
  ```
    */
  def index(): Double = js.native
  def index(selector_element: Element): Double = js.native
  def index(selector_element: JQuery[HTMLElement]): Double = js.native
  def index(selector_element: Selector): Double = js.native
  
  /**
    * Get the current computed height for the first element in the set of matched elements, including padding but not border.
    * @see \`{@link https://api.jquery.com/innerHeight/ }\`
    * @since 1.2.6
    * @example ​ ````Get the innerHeight of a paragraph.
  ```html
  <!doctype html>
  <html lang="en">
  <head>
    <meta charset="utf-8">
    <title>innerHeight demo</title>
    <style>
    p {
    margin: 10px;
    padding: 5px;
    border: 2px solid #666;
    }
    </style>
    <script src="https://code.jquery.com/jquery-3.3.1.js"></script>
  </head>
  <body>
  ​
  <p>Hello</p>
  <p></p>
  ​
  <script>
  var p = $( "p:first" );
  $( "p:last" ).text( "innerHeight:" + p.innerHeight() );
  </script>
  ​
  </body>
  </html>
  ```
    */
  def innerHeight(): js.UndefOr[Double] = js.native
  /**
    * Set the CSS inner height of each element in the set of matched elements.
    * @param value_function _&#x40;param_ `value_function`
    * <br>
    * * `value` — A number representing the number of pixels, or a number along with an optional unit of measure
    *             appended (as a string). <br>
    * * `function` — A function returning the inner height (including padding but not border) to set. Receives the index
    *                position of the element in the set and the old inner height as arguments. Within the function, `this`
    *                refers to the current element in the set.
    * @see \`{@link https://api.jquery.com/innerHeight/ }\`
    * @since 1.8.0
    * @example ​ ````Change the inner height of each div the first time it is clicked (and change its color).
  ```html
  <!doctype html>
  <html lang="en">
  <head>
    <meta charset="utf-8">
    <title>innerHeight demo</title>
    <style>
  div {
    width: 60px;
    padding: 10px;
    height: 70px;
    float: left;
    margin: 5px;
    background: red;
    cursor: pointer;
  }
  .mod {
    background: blue;
    cursor: default;
  }
    </style>
    <script src="https://code.jquery.com/jquery-3.3.1.js"></script>
  </head>
  <body>
  ​
  <div>d</div>
  <div>d</div>
  <div>d</div>
  <div>d</div>
  <div>d</div>
  ​
  <script>
  var modHeight = 70;
  $( "div" ).one( "click", function() {
    $( this ).innerHeight( modHeight ).addClass( "mod" );
    modHeight -= 8;
  });
  </script>
  ​
  </body>
  </html>
  ```
    */
  def innerHeight(value_function: String): this.type = js.native
  def innerHeight(
    value_function: js.ThisFunction2[/* this */ TElement, /* index */ Double, /* height */ Double, String | Double]
  ): this.type = js.native
  def innerHeight(value_function: Double): this.type = js.native
  
  /**
    * Get the current computed inner width for the first element in the set of matched elements, including padding but not border.
    * @see \`{@link https://api.jquery.com/innerWidth/ }\`
    * @since 1.2.6
    * @example ​ ````Get the innerWidth of a paragraph.
  ```html
  <!doctype html>
  <html lang="en">
  <head>
    <meta charset="utf-8">
    <title>innerWidth demo</title>
    <style>
    p {
    margin: 10px;
    padding: 5px;
    border: 2px solid #666;
    }
    </style>
    <script src="https://code.jquery.com/jquery-3.3.1.js"></script>
  </head>
  <body>
  ​
  <p>Hello</p>
  <p></p>
  ​
  <script>
  var p = $( "p:first" );
  $( "p:last" ).text( "innerWidth:" + p.innerWidth() );
  </script>
  ​
  </body>
  </html>
  ```
    */
  def innerWidth(): js.UndefOr[Double] = js.native
  /**
    * Set the CSS inner width of each element in the set of matched elements.
    * @param value_function _&#x40;param_ `value_function`
    * <br>
    * * `value` — A number representing the number of pixels, or a number along with an optional unit of measure
    *             appended (as a string). <br>
    * * `function` — A function returning the inner width (including padding but not border) to set. Receives the index
    *                position of the element in the set and the old inner width as arguments. Within the function, `this`
    *                refers to the current element in the set.
    * @see \`{@link https://api.jquery.com/innerWidth/ }\`
    * @since 1.8.0
    * @example ​ ````Change the inner width of each div the first time it is clicked (and change its color).
  ```html
  <!doctype html>
  <html lang="en">
  <head>
    <meta charset="utf-8">
    <title>innerWidth demo</title>
    <style>
  div {
  width: 60px;
  padding: 10px;
  height: 50px;
  float: left;
  margin: 5px;
  background: red;
  cursor: pointer;
  }
  .mod {
  background: blue;
  cursor: default;
  }
    </style>
    <script src="https://code.jquery.com/jquery-3.3.1.js"></script>
  </head>
  <body>
  ​
  <div>d</div>
  <div>d</div>
  <div>d</div>
  <div>d</div>
  <div>d</div>
  ​
  <script>
  var modWidth = 60;
  $( "div" ).one( "click", function() {
  $( this ).innerWidth( modWidth ).addClass( "mod" );
  modWidth -= 8;
  });
  </script>
  ​
  </body>
  </html>
  ```
    */
  def innerWidth(value_function: String): this.type = js.native
  def innerWidth(
    value_function: js.ThisFunction2[/* this */ TElement, /* index */ Double, /* width */ Double, String | Double]
  ): this.type = js.native
  def innerWidth(value_function: Double): this.type = js.native
  
  /**
    * Insert every element in the set of matched elements after the target.
    * @param target A selector, element, array of elements, HTML string, or jQuery object; the matched set of elements
    *               will be inserted after the element(s) specified by this parameter.
    * @see \`{@link https://api.jquery.com/insertAfter/ }\`
    * @since 1.0
    * @example ​ ````Insert all paragraphs after an element with id of &quot;foo&quot;. Same as $( &quot;#foo&quot; ).after( &quot;p&quot; )
  ```html
  <!doctype html>
  <html lang="en">
  <head>
    <meta charset="utf-8">
    <title>insertAfter demo</title>
    <style>
    #foo {
    background: yellow;
    }
    </style>
    <script src="https://code.jquery.com/jquery-3.3.1.js"></script>
  </head>
  <body>
  ​
  <p> is what I said... </p>
  <div id="foo">FOO!</div>
  ​
  <script>
  $( "p" ).insertAfter( "#foo" );
  </script>
  ​
  </body>
  </html>
  ```
    */
  def insertAfter(target: Selector | TypeOrArray[org.scalajs.dom.raw.Node] | htmlString): this.type = js.native
  def insertAfter(target: JQuery[org.scalajs.dom.raw.Node]): this.type = js.native
  
  /**
    * Insert every element in the set of matched elements before the target.
    * @param target A selector, element, array of elements, HTML string, or jQuery object; the matched set of elements
    *               will be inserted before the element(s) specified by this parameter.
    * @see \`{@link https://api.jquery.com/insertBefore/ }\`
    * @since 1.0
    * @example ​ ````Insert all paragraphs before an element with id of &quot;foo&quot;. Same as $( &quot;#foo&quot; ).before( &quot;p&quot; )
  ```html
  <!doctype html>
  <html lang="en">
  <head>
    <meta charset="utf-8">
    <title>insertBefore demo</title>
    <style>
    #foo {
    background: yellow;
    }
    </style>
    <script src="https://code.jquery.com/jquery-3.3.1.js"></script>
  </head>
  <body>
  ​
  <div id="foo">FOO!</div>
  <p>I would like to say: </p>
  ​
  <script>
  $( "p" ).insertBefore( "#foo" );
  </script>
  ​
  </body>
  </html>
  ```
    */
  def insertBefore(target: Selector | TypeOrArray[org.scalajs.dom.raw.Node] | htmlString): this.type = js.native
  def insertBefore(target: JQuery[org.scalajs.dom.raw.Node]): this.type = js.native
  
  def is(
    selector_function_selection_elements: js.ThisFunction2[/* this */ TElement, /* index */ Double, /* element */ TElement, Boolean]
  ): Boolean = js.native
  def is(selector_function_selection_elements: JQuery[HTMLElement]): Boolean = js.native
  /**
    * Check the current matched set of elements against a selector, element, or jQuery object and return true if at least one of these elements matches the given arguments.
    * @param selector_function_selection_elements _&#x40;param_ `selector_function_selection_elements`
    * <br>
    * * `selector` — A string containing a selector expression to match elements against. <br>
    * * `function` — A function used as a test for every element in the set. It accepts two arguments, `index`, which is
    *                the element's index in the jQuery collection, and `element`, which is the DOM element. Within the
    *                function, `this` refers to the current DOM element. <br>
    * * `selection` — An existing jQuery object to match the current set of elements against. <br>
    * * `elements` — One or more elements to match the current set of elements against.
    * @see \`{@link https://api.jquery.com/is/ }\`
    * @since 1.0
    * @since 1.6
    * @example ​ ````Shows a few ways is() can be used inside an event handler.
  ```html
  <!doctype html>
  <html lang="en">
  <head>
    <meta charset="utf-8">
    <title>is demo</title>
    <style>
    div {
    width: 60px;
    height: 60px;
    margin: 5px;
    float: left;
    border: 4px outset;
    background: green;
    text-align: center;
    font-weight: bolder;
    cursor: pointer;
    }
    .blue {
    background: blue;
    }
    .red {
    background: red;
    }
    span {
    color: white;
    font-size: 16px;
    }
    p {
    color: red;
    font-weight: bolder;
    background: yellow;
    margin: 3px;
    clear: left;
    display: none;
    }
    </style>
    <script src="https://code.jquery.com/jquery-3.3.1.js"></script>
  </head>
  <body>
  ​
  <div></div>
  <div class="blue"></div>
  <div></div>
  <div class="red"></div>
  <div><br/><span>Peter</span></div>
  <div class="blue"></div>
  <p>&nbsp;</p>
  ​
  <script>
  $( "div" ).one( "click", function() {
    if ( $( this ).is( ":first-child" ) ) {
    $( "p" ).text( "It's the first div." );
    } else if ( $( this ).is( ".blue,.red" ) ) {
    $( "p" ).text( "It's a blue or red div." );
    } else if ( $( this ).is( ":contains('Peter')" ) ) {
    $( "p" ).text( "It's Peter!" );
    } else {
    $( "p" ).html( "It's nothing <em>special</em>." );
    }
    $( "p" ).hide().slideDown( "slow" );
    $( this ).css({
    "border-style": "inset",
    cursor: "default"
    });
  });
  </script>
  ​
  </body>
  </html>
  ```
    * @example ​ ````Returns true, because the parent of the input is a form element.
  ```html
  <!doctype html>
  <html lang="en">
  <head>
    <meta charset="utf-8">
    <title>is demo</title>
    <style>
    div {
    color: red;
    }
    </style>
    <script src="https://code.jquery.com/jquery-3.3.1.js"></script>
  </head>
  <body>
  ​
  <form>
    <input type="checkbox">
  </form>
  <div></div>
  ​
  <script>
  var isFormParent = $( "input[type='checkbox']" ).parent().is( "form" );
  $( "div" ).text( "isFormParent = " + isFormParent );
  </script>
  ​
  </body>
  </html>
  ```
    * @example ​ ````Returns false, because the parent of the input is a p element.
  ```html
  <!doctype html>
  <html lang="en">
  <head>
    <meta charset="utf-8">
    <title>is demo</title>
    <style>
    div {
    color: red;
    }
    </style>
    <script src="https://code.jquery.com/jquery-3.3.1.js"></script>
  </head>
  <body>
  ​
  <form>
    <p><input type="checkbox"></p>
  </form>
  <div></div>
  ​
  <script>
  var isFormParent = $( "input[type='checkbox']" ).parent().is( "form" );
  $( "div" ).text( "isFormParent = " + isFormParent );
  </script>
  ​
  </body>
  </html>
  ```
    * @example ​ ````Checks against an existing collection of alternating list elements. Blue, alternating list elements slide up while others turn red.
  ```html
  <!doctype html>
  <html lang="en">
  <head>
    <meta charset="utf-8">
    <title>is demo</title>
    <style>
    li {
    cursor: pointer;
    }
    </style>
    <script src="https://code.jquery.com/jquery-3.3.1.js"></script>
  </head>
  <body>
  ​
  <ul id="browsers">
    <li>Chrome</li>
    <li>Safari</li>
    <li>Firefox</li>
    <li>Opera</li>
  </ul>
  ​
  <script>
  var alt = $( "#browsers li:nth-child(2n)" ).css( "background", "#0ff" );
  $( "li" ).click(function() {
    var li = $( this );
    if ( li.is( alt ) ) {
    li.slideUp();
    } else {
    li.css( "background", "red" );
    }
  });
  </script>
  ​
  </body>
  </html>
  ```
    * @example ​ ````An alternate way to achieve the above example using an element rather than a jQuery object. Checks against an existing collection of alternating list elements. Blue, alternating list elements slide up while others turn red.
  ```html
  <!doctype html>
  <html lang="en">
  <head>
    <meta charset="utf-8">
    <title>is demo</title>
    <style>
    li {
    cursor: pointer;
    }
    </style>
    <script src="https://code.jquery.com/jquery-3.3.1.js"></script>
  </head>
  <body>
  ​
  <ul id="browsers">
    <li>Chrome</li>
    <li>Safari</li>
    <li>Firefox</li>
    <li>Opera</li>
  </ul>
  ​
  <script>
  var alt = $( "#browsers li:nth-child(2n)" ).css( "background", "#0ff" );
  $( "li" ).click(function() {
    if ( alt.is( this ) ) {
    $( this ).slideUp();
    } else {
    $( this ).css( "background", "red" );
    }
  });
  </script>
  ​
  </body>
  </html>
  ```
    */
  def is(selector_function_selection_elements: Selector): Boolean = js.native
  def is(selector_function_selection_elements: TypeOrArray[Element]): Boolean = js.native
  
  /**
    * A string containing the jQuery version number.
    * @see \`{@link https://api.jquery.com/jquery-2/#jquery1 }\`
    * @since 1.0
    * @example ​ ````Determine if an object is a jQuery object
  ```javascript
  var a = { what: "A regular JS object" },
    b = $( "body" );
  ​
  if ( a.jquery ) { // Falsy, since it's undefined
    alert( "a is a jQuery object!" );
  }
  ​
  if ( b.jquery ) { // Truthy, since it's a string
    alert( "b is a jQuery object!" );
  }
  ```
    * @example ​ ````Get the current version of jQuery running on the page
  ```javascript
  alert( "You are running jQuery version: " + $.fn.jquery );
  ```
    */
  var jquery: String = js.native
  
  /**
    * Bind an event handler to the "keydown" JavaScript event, or trigger that event on an element.
    * @param handler A function to execute each time the event is triggered.
    * @see \`{@link https://api.jquery.com/keydown/ }\`
    * @since 1.0
    * @deprecated ​ Deprecated since 3.3. Use \`{@link on }\` or \`{@link trigger }\`.
    *
    * **Cause**: The `.on()` and `.trigger()` methods can set an event handler or generate an event for any event type, and should be used instead of the shortcut methods. This message also applies to the other event shorthands, including: blur, focus, focusin, focusout, resize, scroll, dblclick, mousedown, mouseup, mousemove, mouseover, mouseout, mouseenter, mouseleave, change, select, submit, keydown, keypress, keyup, and contextmenu.
    *
    * **Solution**: Instead of `.click(fn)` use `.on("click", fn)`. Instead of `.click()` use `.trigger("click")`.
    * @example ​ ````Show the event object for the keydown handler when a key is pressed in the input.
  ```html
  <!doctype html>
  <html lang="en">
  <head>
    <meta charset="utf-8">
    <title>keydown demo</title>
    <style>
    fieldset {
    margin-bottom: 1em;
    }
    input {
    display: block;
    margin-bottom: .25em;
    }
    #print-output {
    width: 100%;
    }
    .print-output-line {
    white-space: pre;
    padding: 5px;
    font-family: monaco, monospace;
    font-size: .7em;
    }
    </style>
    <script src="https://code.jquery.com/jquery-3.3.1.js"></script>
  </head>
  <body>
  ​
  <form>
    <fieldset>
    <label for="target">Type Something:</label>
    <input id="target" type="text">
    </fieldset>
  </form>
  <button id="other">
    Trigger the handler
  </button>
  <script type="text/javascript" src="/resources/events.js"></script>
  ​
  <script>
  var xTriggered = 0;
  $( "#target" ).keydown(function( event ) {
    if ( event.which == 13 ) {
    event.preventDefault();
    }
    xTriggered++;
    var msg = "Handler for .keydown() called " + xTriggered + " time(s).";
    $.print( msg, "html" );
    $.print( event );
  });
  ​
  $( "#other" ).click(function() {
    $( "#target" ).keydown();
  });
  </script>
  ​
  </body>
  </html>
  ```
    */
  def keydown(): this.type = js.native
  @JSName("keydown")
  def keydown_false(handler: `false`): this.type = js.native
  @JSName("keydown")
  def keydown_keydown(handler: TypeEventHandler[TElement, Null, TElement, TElement, keydown]): this.type = js.native
  /**
    * Bind an event handler to the "keydown" JavaScript event, or trigger that event on an element.
    * @param eventData An object containing data that will be passed to the event handler.
    * @param handler A function to execute each time the event is triggered.
    * @see \`{@link https://api.jquery.com/keydown/ }\`
    * @since 1.4.3
    * @deprecated ​ Deprecated since 3.3. Use \`{@link on }\` or \`{@link trigger }\`.
    *
    * **Cause**: The `.on()` and `.trigger()` methods can set an event handler or generate an event for any event type, and should be used instead of the shortcut methods. This message also applies to the other event shorthands, including: blur, focus, focusin, focusout, resize, scroll, dblclick, mousedown, mouseup, mousemove, mouseover, mouseout, mouseenter, mouseleave, change, select, submit, keydown, keypress, keyup, and contextmenu.
    *
    * **Solution**: Instead of `.click(fn)` use `.on("click", fn)`. Instead of `.click()` use `.trigger("click")`.
    */
  @JSName("keydown")
  def keydown_keydown[TData](eventData: TData, handler: TypeEventHandler[TElement, TData, TElement, TElement, keydown]): this.type = js.native
  
  /**
    * Bind an event handler to the "keypress" JavaScript event, or trigger that event on an element.
    * @param handler A function to execute each time the event is triggered.
    * @see \`{@link https://api.jquery.com/keypress/ }\`
    * @since 1.0
    * @deprecated ​ Deprecated since 3.3. Use \`{@link on }\` or \`{@link trigger }\`.
    *
    * **Cause**: The `.on()` and `.trigger()` methods can set an event handler or generate an event for any event type, and should be used instead of the shortcut methods. This message also applies to the other event shorthands, including: blur, focus, focusin, focusout, resize, scroll, dblclick, mousedown, mouseup, mousemove, mouseover, mouseout, mouseenter, mouseleave, change, select, submit, keydown, keypress, keyup, and contextmenu.
    *
    * **Solution**: Instead of `.click(fn)` use `.on("click", fn)`. Instead of `.click()` use `.trigger("click")`.
    * @example ​ ````Show the event object when a key is pressed in the input. Note: This demo relies on a simple $.print() plugin (https://api.jquery.com/resources/events.js) for the event object&#39;s output.
  ```html
  <!doctype html>
  <html lang="en">
  <head>
    <meta charset="utf-8">
    <title>keypress demo</title>
    <style>
    fieldset {
    margin-bottom: 1em;
    }
    input {
    display: block;
    margin-bottom: .25em;
    }
    #print-output {
    width: 100%;
    }
    .print-output-line {
    white-space: pre;
    padding: 5px;
    font-family: monaco, monospace;
    font-size: .7em;
    }
    </style>
    <script src="https://code.jquery.com/jquery-3.3.1.js"></script>
  </head>
  <body>
  ​
  <form>
    <fieldset>
    <label for="target">Type Something:</label>
    <input id="target" type="text">
    </fieldset>
  </form>
  <button id="other">
    Trigger the handler
  </button>
  <script src="/resources/events.js"></script>
  ​
  <script>
  var xTriggered = 0;
  $( "#target" ).keypress(function( event ) {
    if ( event.which == 13 ) {
    event.preventDefault();
    }
    xTriggered++;
    var msg = "Handler for .keypress() called " + xTriggered + " time(s).";
    $.print( msg, "html" );
    $.print( event );
  });
  ​
  $( "#other" ).click(function() {
    $( "#target" ).keypress();
  });
  </script>
  ​
  </body>
  </html>
  ```
    */
  def keypress(): this.type = js.native
  @JSName("keypress")
  def keypress_false(handler: `false`): this.type = js.native
  @JSName("keypress")
  def keypress_keypress(handler: TypeEventHandler[TElement, Null, TElement, TElement, keypress]): this.type = js.native
  /**
    * Bind an event handler to the "keypress" JavaScript event, or trigger that event on an element.
    * @param eventData An object containing data that will be passed to the event handler.
    * @param handler A function to execute each time the event is triggered.
    * @see \`{@link https://api.jquery.com/keypress/ }\`
    * @since 1.4.3
    * @deprecated ​ Deprecated since 3.3. Use \`{@link on }\` or \`{@link trigger }\`.
    *
    * **Cause**: The `.on()` and `.trigger()` methods can set an event handler or generate an event for any event type, and should be used instead of the shortcut methods. This message also applies to the other event shorthands, including: blur, focus, focusin, focusout, resize, scroll, dblclick, mousedown, mouseup, mousemove, mouseover, mouseout, mouseenter, mouseleave, change, select, submit, keydown, keypress, keyup, and contextmenu.
    *
    * **Solution**: Instead of `.click(fn)` use `.on("click", fn)`. Instead of `.click()` use `.trigger("click")`.
    */
  @JSName("keypress")
  def keypress_keypress[TData](eventData: TData, handler: TypeEventHandler[TElement, TData, TElement, TElement, keypress]): this.type = js.native
  
  /**
    * Bind an event handler to the "keyup" JavaScript event, or trigger that event on an element.
    * @param handler A function to execute each time the event is triggered.
    * @see \`{@link https://api.jquery.com/keyup/ }\`
    * @since 1.0
    * @deprecated ​ Deprecated since 3.3. Use \`{@link on }\` or \`{@link trigger }\`.
    *
    * **Cause**: The `.on()` and `.trigger()` methods can set an event handler or generate an event for any event type, and should be used instead of the shortcut methods. This message also applies to the other event shorthands, including: blur, focus, focusin, focusout, resize, scroll, dblclick, mousedown, mouseup, mousemove, mouseover, mouseout, mouseenter, mouseleave, change, select, submit, keydown, keypress, keyup, and contextmenu.
    *
    * **Solution**: Instead of `.click(fn)` use `.on("click", fn)`. Instead of `.click()` use `.trigger("click")`.
    * @example ​ ````Show the event object for the keyup handler (using a simple $.print plugin) when a key is released in the input.
  ```html
  <!doctype html>
  <html lang="en">
  <head>
    <meta charset="utf-8">
    <title>keyup demo</title>
    <style>
    fieldset {
    margin-bottom: 1em;
    }
    input {
    display: block;
    margin-bottom: .25em;
    }
    #print-output {
    width: 100%;
    }
    .print-output-line {
    white-space: pre;
    padding: 5px;
    font-family: monaco, monospace;
    font-size: .7em;
    }
    </style>
    <script src="https://code.jquery.com/jquery-3.3.1.js"></script>
  </head>
  <body>
  ​
  <form>
    <fieldset>
    <label for="target">Type Something:</label>
    <input id="target" type="text">
    </fieldset>
  </form>
  <button id="other">
    Trigger the handler
  </button>
  <script type="text/javascript" src="/resources/events.js"></script>
  ​
  <script>
  var xTriggered = 0;
  $( "#target" ).keyup(function( event ) {
    xTriggered++;
    var msg = "Handler for .keyup() called " + xTriggered + " time(s).";
    $.print( msg, "html" );
    $.print( event );
  }).keydown(function( event ) {
    if ( event.which == 13 ) {
    event.preventDefault();
    }
  });
  ​
  $( "#other").click(function() {
    $( "#target" ).keyup();
  });
  </script>
  ​
  </body>
  </html>
  ```
    */
  def keyup(): this.type = js.native
  @JSName("keyup")
  def keyup_false(handler: `false`): this.type = js.native
  @JSName("keyup")
  def keyup_keyup(handler: TypeEventHandler[TElement, Null, TElement, TElement, keyup]): this.type = js.native
  /**
    * Bind an event handler to the "keyup" JavaScript event, or trigger that event on an element.
    * @param eventData An object containing data that will be passed to the event handler.
    * @param handler A function to execute each time the event is triggered.
    * @see \`{@link https://api.jquery.com/keyup/ }\`
    * @since 1.4.3
    * @deprecated ​ Deprecated since 3.3. Use \`{@link on }\` or \`{@link trigger }\`.
    *
    * **Cause**: The `.on()` and `.trigger()` methods can set an event handler or generate an event for any event type, and should be used instead of the shortcut methods. This message also applies to the other event shorthands, including: blur, focus, focusin, focusout, resize, scroll, dblclick, mousedown, mouseup, mousemove, mouseover, mouseout, mouseenter, mouseleave, change, select, submit, keydown, keypress, keyup, and contextmenu.
    *
    * **Solution**: Instead of `.click(fn)` use `.on("click", fn)`. Instead of `.click()` use `.trigger("click")`.
    */
  @JSName("keyup")
  def keyup_keyup[TData](eventData: TData, handler: TypeEventHandler[TElement, TData, TElement, TElement, keyup]): this.type = js.native
  
  /**
    * Reduce the set of matched elements to the final one in the set.
    * @see \`{@link https://api.jquery.com/last/ }\`
    * @since 1.4
    * @example ​ ````Highlight the last span in a paragraph.
  ```html
  <!doctype html>
  <html lang="en">
  <head>
    <meta charset="utf-8">
    <title>last demo</title>
    <style>
    .highlight {
    background-color: yellow;
    }
    </style>
    <script src="https://code.jquery.com/jquery-3.3.1.js"></script>
  </head>
  <body>
  ​
  <p><span>Look:</span> <span>This is some text in a paragraph.</span> <span>This is a note about it.</span></p>
  ​
  <script>
  $( "p span" ).last().addClass( "highlight" );
  </script>
  ​
  </body>
  </html>
  ```
    */
  def last(): this.type = js.native
  
  /**
    * The number of elements in the jQuery object.
    * @see \`{@link https://api.jquery.com/length/ }\`
    * @since 1.0
    * @example ​ ````Count the divs.  Click to add more.
  ```html
  <!doctype html>
  <html lang="en">
  <head>
    <meta charset="utf-8">
    <title>length demo</title>
    <style>
    body {
    cursor: pointer;
    }
    div {
    width: 50px;
    height: 30px;
    margin: 5px;
    float: left;
    background: green;
    }
    span {
    color: red;
    }
    </style>
    <script src="https://code.jquery.com/jquery-3.3.1.js"></script>
  </head>
  <body>
  ​<span></span>
    <div></div>​
  <script>
  $( document.body )
    .click(function() {
    $( document.body ).append( $( "<div>" ) );
    var n = $( "div" ).length;
    $( "span" ).text( "There are " + n + " divs." +
    "Click to add more.");
    })
    // Trigger the click to start
    .trigger( "click" );
  </script>
  ​
  </body>
  </html>
  ```
    */
  var length: Double = js.native
  
  /**
    * Load data from the server and place the returned HTML into the matched element.
    * @param url A string containing the URL to which the request is sent.
    * @param complete_data _&#x40;param_ `complete_data`
    * <br>
    * * `complete` — A callback function that is executed when the request completes. <br>
    * * `data` — A plain object or string that is sent to the server with the request.
    * @see \`{@link https://api.jquery.com/load/ }\`
    * @since 1.0
    * @example ​ ````Load another page&#39;s list items into an ordered list.
  ```html
  <!doctype html>
  <html lang="en">
  <head>
    <meta charset="utf-8">
    <title>load demo</title>
    <style>
    body {
    font-size: 12px;
    font-family: Arial;
    }
    </style>
    <script src="https://code.jquery.com/jquery-3.3.1.js"></script>
  </head>
  <body>
  ​
  <b>Projects:</b>
  <ol id="new-projects"></ol>
  ​
  <script>
  $( "#new-projects" ).load( "/resources/load.html #projects li" );
  </script>
  ​
  </body>
  </html>
  ```
    * @example ​ ````Display a notice if the Ajax request encounters an error.
  ```html
  <!doctype html>
  <html lang="en">
  <head>
    <meta charset="utf-8">
    <title>load demo</title>
    <style>
    body {
    font-size: 12px;
    font-family: Arial;
    }
    </style>
    <script src="https://code.jquery.com/jquery-3.3.1.js"></script>
  </head>
  <body>
  ​
  <b>Successful Response (should be blank):</b>
  <div id="success"></div>
  <b>Error Response:</b>
  <div id="error"></div>
  ​
  <script>
  $( "#success" ).load( "/not-here.php", function( response, status, xhr ) {
    if ( status == "error" ) {
    var msg = "Sorry but there was an error: ";
    $( "#error" ).html( msg + xhr.status + " " + xhr.statusText );
    }
  });
  </script>
  ​
  </body>
  </html>
  ```
    * @example ​ ````Load the feeds.html file into the div with the ID of feeds.
  ```javascript
  $( "#feeds" ).load( "feeds.html" );
  ```
    * @example ​ ````pass arrays of data to the server.
  ```javascript
  $( "#objectID" ).load( "test.php", { "choices[]": [ "Jon", "Susan" ] } );
  ```
    */
  def load(url: String): this.type = js.native
  def load(url: String, complete_data: String): this.type = js.native
  def load(
    url: String,
    complete_data: js.ThisFunction3[
      /* this */ TElement, 
      /* responseText */ String, 
      /* textStatus */ TextStatus, 
      /* jqXHR */ jqXHR[_], 
      Unit
    ]
  ): this.type = js.native
  def load(url: String, complete_data: PlainObject[_]): this.type = js.native
  /**
    * Load data from the server and place the returned HTML into the matched element.
    * @param url A string containing the URL to which the request is sent.
    * @param data A plain object or string that is sent to the server with the request.
    * @param complete A callback function that is executed when the request completes.
    * @see \`{@link https://api.jquery.com/load/ }\`
    * @since 1.0
    * @example ​ ````Same as above, but will POST the additional parameters to the server and a callback that is executed when the server is finished responding.
  ```javascript
  $( "#feeds" ).load( "feeds.php", { limit: 25 }, function() {
    alert( "The last 25 entries in the feed have been loaded" );
  });
  ```
    */
  def load(
    url: String,
    data: String,
    complete: js.ThisFunction3[
      /* this */ TElement, 
      /* responseText */ String, 
      /* textStatus */ TextStatus, 
      /* jqXHR */ jqXHR[_], 
      Unit
    ]
  ): this.type = js.native
  def load(
    url: String,
    data: PlainObject[_],
    complete: js.ThisFunction3[
      /* this */ TElement, 
      /* responseText */ String, 
      /* textStatus */ TextStatus, 
      /* jqXHR */ jqXHR[_], 
      Unit
    ]
  ): this.type = js.native
  
  /**
    * Pass each element in the current matched set through a function, producing a new jQuery object containing the return values.
    * @param callback A function object that will be invoked for each element in the current set.
    * @see \`{@link https://api.jquery.com/map/ }\`
    * @since 1.2
    * @example ​ ````Build a list of all the values within a form.
  ```html
  <!doctype html>
  <html lang="en">
  <head>
    <meta charset="utf-8">
    <title>map demo</title>
    <style>
    p {
    color: red;
    }
    </style>
    <script src="https://code.jquery.com/jquery-3.3.1.js"></script>
  </head>
  <body>
  ​
  <p><b>Values: </b></p>
  <form>
    <input type="text" name="name" value="John">
    <input type="text" name="password" value="password">
    <input type="text" name="url" value="https://johnresig.com/">
  </form>
  ​
  <script>
  $( "p" )
    .append( $( "input" ).map(function() {
    return $( this ).val();
    })
    .get()
    .join( ", " ) );
  </script>
  ​
  </body>
  </html>
  ```
    * @example ​ ````A contrived example to show some functionality.
  ```html
  <!doctype html>
  <html lang="en">
  <head>
    <meta charset="utf-8">
    <title>map demo</title>
    <style>
    body {
    font-size: 16px;
    }
    ul {
    float: left;
    margin: 0 30px;
    color: blue;
    }
    #results {
    color: red;
    }
    </style>
    <script src="https://code.jquery.com/jquery-3.3.1.js"></script>
  </head>
  <body>
  ​
  <ul>
    <li>First</li>
    <li>Second</li>
    <li>Third</li>
    <li>Fourth</li>
    <li>Fifth</li>
  </ul>
  <ul id="results">
  </ul>
  ​
  <script>
  var mappedItems = $( "li" ).map(function( index ) {
    var replacement = $( "<li>" ).text( $( this ).text() ).get( 0 );
    if ( index === 0 ) {
  ​
    // Make the first item all caps
    $( replacement ).text( $( replacement ).text().toUpperCase() );
    } else if ( index === 1 || index === 3 ) {
  ​
    // Delete the second and fourth items
    replacement = null;
    } else if ( index === 2 ) {
  ​
    // Make two of the third item and add some text
    replacement = [ replacement, $( "<li>" ).get( 0 ) ];
    $( replacement[ 0 ] ).append( "<b> - A</b>" );
    $( replacement[ 1 ] ).append( "Extra <b> - B</b>" );
    }
  ​
    // Replacement will be a dom element, null,
    // or an array of dom elements
    return replacement;
  });
  $( "#results" ).append( mappedItems );
  </script>
  ​
  </body>
  </html>
  ```
    * @example ​ ````Equalize the heights of the divs.
  ```html
  <!doctype html>
  <html lang="en">
  <head>
    <meta charset="utf-8">
    <title>map demo</title>
    <style>
    div {
    width: 40px;
    float: left;
    }
    input {
    clear: left;
    }
    </style>
    <script src="https://code.jquery.com/jquery-3.3.1.js"></script>
  </head>
  <body>
  ​
  <input type="button" value="equalize div heights">
  <div style="background: red; height: 40px; "></div>
  <div style="background: green; height: 70px;"></div>
  <div style="background: blue; height: 50px; "></div>
  ​
  <script>
  $.fn.equalizeHeights = function() {
    var maxHeight = this.map(function( i, e ) {
    return $( e ).height();
    }).get();
    return this.height( Math.max.apply( this, maxHeight ) );
  };
  ​
  $( "input" ).click(function() {
    $( "div" ).equalizeHeights();
  });
  </script>
  ​
  </body>
  </html>
  ```
    */
  def map[TReturn](
    callback: js.ThisFunction2[
      /* this */ TElement, 
      /* index */ Double, 
      /* domElement */ TElement, 
      js.UndefOr[TypeOrArray[TReturn] | Null]
    ]
  ): JQuery[TReturn] = js.native
  
  /**
    * Bind an event handler to the "mousedown" JavaScript event, or trigger that event on an element.
    * @param handler A function to execute each time the event is triggered.
    * @see \`{@link https://api.jquery.com/mousedown/ }\`
    * @since 1.0
    * @deprecated ​ Deprecated since 3.3. Use \`{@link on }\` or \`{@link trigger }\`.
    *
    * **Cause**: The `.on()` and `.trigger()` methods can set an event handler or generate an event for any event type, and should be used instead of the shortcut methods. This message also applies to the other event shorthands, including: blur, focus, focusin, focusout, resize, scroll, dblclick, mousedown, mouseup, mousemove, mouseover, mouseout, mouseenter, mouseleave, change, select, submit, keydown, keypress, keyup, and contextmenu.
    *
    * **Solution**: Instead of `.click(fn)` use `.on("click", fn)`. Instead of `.click()` use `.trigger("click")`.
    * @example ​ ````Show texts when mouseup and mousedown event triggering.
  ```html
  <!doctype html>
  <html lang="en">
  <head>
    <meta charset="utf-8">
    <title>mousedown demo</title>
    <script src="https://code.jquery.com/jquery-3.3.1.js"></script>
  </head>
  <body>
  ​
  <p>Press mouse and release here.</p>
  ​
  <script>
  $( "p" )
    .mouseup(function() {
    $( this ).append( "<span style='color:#f00;'>Mouse up.</span>" );
    })
    .mousedown(function() {
    $( this ).append( "<span style='color:#00f;'>Mouse down.</span>" );
    });
  </script>
  ​
  </body>
  </html>
  ```
    */
  def mousedown(): this.type = js.native
  @JSName("mousedown")
  def mousedown_false(handler: `false`): this.type = js.native
  @JSName("mousedown")
  def mousedown_mousedown(handler: TypeEventHandler[TElement, Null, TElement, TElement, mousedown]): this.type = js.native
  /**
    * Bind an event handler to the "mousedown" JavaScript event, or trigger that event on an element.
    * @param eventData An object containing data that will be passed to the event handler.
    * @param handler A function to execute each time the event is triggered.
    * @see \`{@link https://api.jquery.com/mousedown/ }\`
    * @since 1.4.3
    * @deprecated ​ Deprecated since 3.3. Use \`{@link on }\` or \`{@link trigger }\`.
    *
    * **Cause**: The `.on()` and `.trigger()` methods can set an event handler or generate an event for any event type, and should be used instead of the shortcut methods. This message also applies to the other event shorthands, including: blur, focus, focusin, focusout, resize, scroll, dblclick, mousedown, mouseup, mousemove, mouseover, mouseout, mouseenter, mouseleave, change, select, submit, keydown, keypress, keyup, and contextmenu.
    *
    * **Solution**: Instead of `.click(fn)` use `.on("click", fn)`. Instead of `.click()` use `.trigger("click")`.
    */
  @JSName("mousedown")
  def mousedown_mousedown[TData](eventData: TData, handler: TypeEventHandler[TElement, TData, TElement, TElement, mousedown]): this.type = js.native
  
  /**
    * Bind an event handler to be fired when the mouse enters an element, or trigger that handler on an element.
    * @param handler A function to execute each time the event is triggered.
    * @see \`{@link https://api.jquery.com/mouseenter/ }\`
    * @since 1.0
    * @deprecated ​ Deprecated since 3.3. Use \`{@link on }\` or \`{@link trigger }\`.
    *
    * **Cause**: The `.on()` and `.trigger()` methods can set an event handler or generate an event for any event type, and should be used instead of the shortcut methods. This message also applies to the other event shorthands, including: blur, focus, focusin, focusout, resize, scroll, dblclick, mousedown, mouseup, mousemove, mouseover, mouseout, mouseenter, mouseleave, change, select, submit, keydown, keypress, keyup, and contextmenu.
    *
    * **Solution**: Instead of `.click(fn)` use `.on("click", fn)`. Instead of `.click()` use `.trigger("click")`.
    * @example ​ ````Show texts when mouseenter and mouseout event triggering.
    mouseover fires when the pointer moves into the child element as well, while mouseenter fires only when the pointer moves into the bound element.
  ```html
  <!doctype html>
  <html lang="en">
  <head>
    <meta charset="utf-8">
    <title>mouseenter demo</title>
    <style>
    div.out {
    width: 40%;
    height: 120px;
    margin: 0 15px;
    background-color: #d6edfc;
    float: left;
    }
    div.in {
    width: 60%;
    height: 60%;
    background-color: #fc0;
    margin: 10px auto;
    }
    p {
    line-height: 1em;
    margin: 0;
    padding: 0;
    }
    </style>
    <script src="https://code.jquery.com/jquery-3.3.1.js"></script>
  </head>
  <body>
  ​
  <div class="out overout">
    <p>move your mouse</p>
    <div class="in overout"><p>move your mouse</p><p>0</p></div>
    <p>0</p>
  </div>
  ​
  <div class="out enterleave">
    <p>move your mouse</p>
    <div class="in enterleave"><p>move your mouse</p><p>0</p></div>
    <p>0</p>
  </div>
  ​
  <script>
  var i = 0;
  $( "div.overout" )
    .mouseover(function() {
    $( "p:first", this ).text( "mouse over" );
    $( "p:last", this ).text( ++i );
    })
    .mouseout(function() {
    $( "p:first", this ).text( "mouse out" );
    });
  ​
  var n = 0;
  $( "div.enterleave" )
    .mouseenter(function() {
    $( "p:first", this ).text( "mouse enter" );
    $( "p:last", this ).text( ++n );
    })
    .mouseleave(function() {
    $( "p:first", this ).text( "mouse leave" );
    });
  </script>
  ​
  </body>
  </html>
  ```
    */
  def mouseenter(): this.type = js.native
  @JSName("mouseenter")
  def mouseenter_false(handler: `false`): this.type = js.native
  @JSName("mouseenter")
  def mouseenter_mouseenter(handler: TypeEventHandler[TElement, Null, TElement, TElement, mouseenter]): this.type = js.native
  /**
    * Bind an event handler to be fired when the mouse enters an element, or trigger that handler on an element.
    * @param eventData An object containing data that will be passed to the event handler.
    * @param handler A function to execute each time the event is triggered.
    * @see \`{@link https://api.jquery.com/mouseenter/ }\`
    * @since 1.4.3
    * @deprecated ​ Deprecated since 3.3. Use \`{@link on }\` or \`{@link trigger }\`.
    *
    * **Cause**: The `.on()` and `.trigger()` methods can set an event handler or generate an event for any event type, and should be used instead of the shortcut methods. This message also applies to the other event shorthands, including: blur, focus, focusin, focusout, resize, scroll, dblclick, mousedown, mouseup, mousemove, mouseover, mouseout, mouseenter, mouseleave, change, select, submit, keydown, keypress, keyup, and contextmenu.
    *
    * **Solution**: Instead of `.click(fn)` use `.on("click", fn)`. Instead of `.click()` use `.trigger("click")`.
    */
  @JSName("mouseenter")
  def mouseenter_mouseenter[TData](eventData: TData, handler: TypeEventHandler[TElement, TData, TElement, TElement, mouseenter]): this.type = js.native
  
  /**
    * Bind an event handler to be fired when the mouse leaves an element, or trigger that handler on an element.
    * @param handler A function to execute each time the event is triggered.
    * @see \`{@link https://api.jquery.com/mouseleave/ }\`
    * @since 1.0
    * @deprecated ​ Deprecated since 3.3. Use \`{@link on }\` or \`{@link trigger }\`.
    *
    * **Cause**: The `.on()` and `.trigger()` methods can set an event handler or generate an event for any event type, and should be used instead of the shortcut methods. This message also applies to the other event shorthands, including: blur, focus, focusin, focusout, resize, scroll, dblclick, mousedown, mouseup, mousemove, mouseover, mouseout, mouseenter, mouseleave, change, select, submit, keydown, keypress, keyup, and contextmenu.
    *
    * **Solution**: Instead of `.click(fn)` use `.on("click", fn)`. Instead of `.click()` use `.trigger("click")`.
    * @example ​ ````Show number of times mouseout and mouseleave events are triggered. mouseout fires when the pointer moves out of child element as well, while mouseleave fires only when the pointer moves out of the bound element.
  ```html
  <!doctype html>
  <html lang="en">
  <head>
    <meta charset="utf-8">
    <title>mouseleave demo</title>
    <style>
    div.out {
    width: 40%;
    height: 120px;
    margin: 0 15px;
    background-color: #d6edfc;
    float: left;
    }
    div.in {
    width: 60%;
    height: 60%;
    background-color: #fc0;
    margin: 10px auto;
    }
    p {
    line-height: 1em;
    margin: 0;
    padding: 0;
    }
    </style>
    <script src="https://code.jquery.com/jquery-3.3.1.js"></script>
  </head>
  <body>
  ​
  <div class="out overout">
    <p>move your mouse</p>
    <div class="in overout"><p>move your mouse</p><p>0</p></div>
    <p>0</p>
  </div>
  <div class="out enterleave">
    <p>move your mouse</p>
    <div class="in enterleave"><p>move your mouse</p><p>0</p></div>
    <p>0</p>
  </div>
  ​
  <script>
  var i = 0;
  $( "div.overout" )
    .mouseover(function() {
    $( "p:first", this ).text( "mouse over" );
    })
    .mouseout(function() {
    $( "p:first", this ).text( "mouse out" );
    $( "p:last", this ).text( ++i );
    });
  ​
  var n = 0;
  $( "div.enterleave" )
    .mouseenter(function() {
    $( "p:first", this ).text( "mouse enter" );
    })
    .mouseleave(function() {
    $( "p:first", this ).text( "mouse leave" );
    $( "p:last", this ).text( ++n );
    });
  </script>
  ​
  </body>
  </html>
  ```
    */
  def mouseleave(): this.type = js.native
  @JSName("mouseleave")
  def mouseleave_false(handler: `false`): this.type = js.native
  @JSName("mouseleave")
  def mouseleave_mouseleave(handler: TypeEventHandler[TElement, Null, TElement, TElement, mouseleave]): this.type = js.native
  /**
    * Bind an event handler to be fired when the mouse leaves an element, or trigger that handler on an element.
    * @param eventData An object containing data that will be passed to the event handler.
    * @param handler A function to execute each time the event is triggered.
    * @see \`{@link https://api.jquery.com/mouseleave/ }\`
    * @since 1.4.3
    * @deprecated ​ Deprecated since 3.3. Use \`{@link on }\` or \`{@link trigger }\`.
    *
    * **Cause**: The `.on()` and `.trigger()` methods can set an event handler or generate an event for any event type, and should be used instead of the shortcut methods. This message also applies to the other event shorthands, including: blur, focus, focusin, focusout, resize, scroll, dblclick, mousedown, mouseup, mousemove, mouseover, mouseout, mouseenter, mouseleave, change, select, submit, keydown, keypress, keyup, and contextmenu.
    *
    * **Solution**: Instead of `.click(fn)` use `.on("click", fn)`. Instead of `.click()` use `.trigger("click")`.
    */
  @JSName("mouseleave")
  def mouseleave_mouseleave[TData](eventData: TData, handler: TypeEventHandler[TElement, TData, TElement, TElement, mouseleave]): this.type = js.native
  
  /**
    * Bind an event handler to the "mousemove" JavaScript event, or trigger that event on an element.
    * @param handler A function to execute each time the event is triggered.
    * @see \`{@link https://api.jquery.com/mousemove/ }\`
    * @since 1.0
    * @deprecated ​ Deprecated since 3.3. Use \`{@link on }\` or \`{@link trigger }\`.
    *
    * **Cause**: The `.on()` and `.trigger()` methods can set an event handler or generate an event for any event type, and should be used instead of the shortcut methods. This message also applies to the other event shorthands, including: blur, focus, focusin, focusout, resize, scroll, dblclick, mousedown, mouseup, mousemove, mouseover, mouseout, mouseenter, mouseleave, change, select, submit, keydown, keypress, keyup, and contextmenu.
    *
    * **Solution**: Instead of `.click(fn)` use `.on("click", fn)`. Instead of `.click()` use `.trigger("click")`.
    * @example ​ ````Show the mouse coordinates when the mouse is moved over the yellow div.  Coordinates are relative to the window, which in this case is the iframe.
  ```html
  <!doctype html>
  <html lang="en">
  <head>
    <meta charset="utf-8">
    <title>mousemove demo</title>
    <style>
    div {
    width: 220px;
    height: 170px;
    margin: 10px 50px 10px 10px;
    background: yellow;
    border: 2px groove;
    float: right;
    }
    p {
    margin: 0;
    margin-left: 10px;
    color: red;
    width: 220px;
    height: 120px;
    padding-top: 70px;
    float: left;
    font-size: 14px;
    }
    span {
    display: block;
    }
    </style>
    <script src="https://code.jquery.com/jquery-3.3.1.js"></script>
  </head>
  <body>
  ​
  <p>
    <span>Move the mouse over the div.</span>
    <span>&nbsp;</span>
  </p>
  <div></div>
  ​
  <script>
  $( "div" ).mousemove(function( event ) {
    var pageCoords = "( " + event.pageX + ", " + event.pageY + " )";
    var clientCoords = "( " + event.clientX + ", " + event.clientY + " )";
    $( "span:first" ).text( "( event.pageX, event.pageY ) : " + pageCoords );
    $( "span:last" ).text( "( event.clientX, event.clientY ) : " + clientCoords );
  });
  </script>
  ​
  </body>
  </html>
  ```
    */
  def mousemove(): this.type = js.native
  @JSName("mousemove")
  def mousemove_false(handler: `false`): this.type = js.native
  @JSName("mousemove")
  def mousemove_mousemove(handler: TypeEventHandler[TElement, Null, TElement, TElement, mousemove]): this.type = js.native
  /**
    * Bind an event handler to the "mousemove" JavaScript event, or trigger that event on an element.
    * @param eventData An object containing data that will be passed to the event handler.
    * @param handler A function to execute each time the event is triggered.
    * @see \`{@link https://api.jquery.com/mousemove/ }\`
    * @since 1.4.3
    * @deprecated ​ Deprecated since 3.3. Use \`{@link on }\` or \`{@link trigger }\`.
    *
    * **Cause**: The `.on()` and `.trigger()` methods can set an event handler or generate an event for any event type, and should be used instead of the shortcut methods. This message also applies to the other event shorthands, including: blur, focus, focusin, focusout, resize, scroll, dblclick, mousedown, mouseup, mousemove, mouseover, mouseout, mouseenter, mouseleave, change, select, submit, keydown, keypress, keyup, and contextmenu.
    *
    * **Solution**: Instead of `.click(fn)` use `.on("click", fn)`. Instead of `.click()` use `.trigger("click")`.
    */
  @JSName("mousemove")
  def mousemove_mousemove[TData](eventData: TData, handler: TypeEventHandler[TElement, TData, TElement, TElement, mousemove]): this.type = js.native
  
  /**
    * Bind an event handler to the "mouseout" JavaScript event, or trigger that event on an element.
    * @param handler A function to execute each time the event is triggered.
    * @see \`{@link https://api.jquery.com/mouseout/ }\`
    * @since 1.0
    * @deprecated ​ Deprecated since 3.3. Use \`{@link on }\` or \`{@link trigger }\`.
    *
    * **Cause**: The `.on()` and `.trigger()` methods can set an event handler or generate an event for any event type, and should be used instead of the shortcut methods. This message also applies to the other event shorthands, including: blur, focus, focusin, focusout, resize, scroll, dblclick, mousedown, mouseup, mousemove, mouseover, mouseout, mouseenter, mouseleave, change, select, submit, keydown, keypress, keyup, and contextmenu.
    *
    * **Solution**: Instead of `.click(fn)` use `.on("click", fn)`. Instead of `.click()` use `.trigger("click")`.
    * @example ​ ````Show the number of times mouseout and mouseleave events are triggered.
    mouseout fires when the pointer moves out of the child element as well, while mouseleave fires only when the pointer moves out of the bound element.
  ```html
  <!doctype html>
  <html lang="en">
  <head>
    <meta charset="utf-8">
    <title>mouseout demo</title>
    <style>
    div.out {
    width: 40%;
    height: 120px;
    margin: 0 15px;
    background-color: #d6edfc;
    float: left;
    }
    div.in {
    width: 60%;
    height: 60%;
    background-color: #fc0;
    margin: 10px auto;
    }
    p {
    line-height: 1em;
    margin: 0;
    padding: 0;
    }
    </style>
    <script src="https://code.jquery.com/jquery-3.3.1.js"></script>
  </head>
  <body>
  ​
  <div class="out overout">
    <p>move your mouse</p>
    <div class="in overout"><p>move your mouse</p><p>0</p></div>
    <p>0</p>
  </div>
  ​
  <div class="out enterleave">
    <p>move your mouse</p>
    <div class="in enterleave"><p>move your mouse</p><p>0</p></div>
    <p>0</p>
  </div>
  ​
  <script>
  var i = 0;
  $( "div.overout" )
    .mouseout(function() {
    $( "p:first", this ).text( "mouse out" );
    $( "p:last", this ).text( ++i );
    })
    .mouseover(function() {
    $( "p:first", this ).text( "mouse over" );
    });
  ​
  var n = 0;
  $( "div.enterleave" )
    .on( "mouseenter", function() {
    $( "p:first", this ).text( "mouse enter" );
    })
    .on( "mouseleave", function() {
    $( "p:first", this ).text( "mouse leave" );
    $( "p:last", this ).text( ++n );
    });
  </script>
  ​
  </body>
  </html>
  ```
    */
  def mouseout(): this.type = js.native
  @JSName("mouseout")
  def mouseout_false(handler: `false`): this.type = js.native
  @JSName("mouseout")
  def mouseout_mouseout(handler: TypeEventHandler[TElement, Null, TElement, TElement, mouseout]): this.type = js.native
  /**
    * Bind an event handler to the "mouseout" JavaScript event, or trigger that event on an element.
    * @param eventData An object containing data that will be passed to the event handler.
    * @param handler A function to execute each time the event is triggered.
    * @see \`{@link https://api.jquery.com/mouseout/ }\`
    * @since 1.4.3
    * @deprecated ​ Deprecated since 3.3. Use \`{@link on }\` or \`{@link trigger }\`.
    *
    * **Cause**: The `.on()` and `.trigger()` methods can set an event handler or generate an event for any event type, and should be used instead of the shortcut methods. This message also applies to the other event shorthands, including: blur, focus, focusin, focusout, resize, scroll, dblclick, mousedown, mouseup, mousemove, mouseover, mouseout, mouseenter, mouseleave, change, select, submit, keydown, keypress, keyup, and contextmenu.
    *
    * **Solution**: Instead of `.click(fn)` use `.on("click", fn)`. Instead of `.click()` use `.trigger("click")`.
    */
  @JSName("mouseout")
  def mouseout_mouseout[TData](eventData: TData, handler: TypeEventHandler[TElement, TData, TElement, TElement, mouseout]): this.type = js.native
  
  /**
    * Bind an event handler to the "mouseover" JavaScript event, or trigger that event on an element.
    * @param handler A function to execute each time the event is triggered.
    * @see \`{@link https://api.jquery.com/mouseover/ }\`
    * @since 1.0
    * @deprecated ​ Deprecated since 3.3. Use \`{@link on }\` or \`{@link trigger }\`.
    *
    * **Cause**: The `.on()` and `.trigger()` methods can set an event handler or generate an event for any event type, and should be used instead of the shortcut methods. This message also applies to the other event shorthands, including: blur, focus, focusin, focusout, resize, scroll, dblclick, mousedown, mouseup, mousemove, mouseover, mouseout, mouseenter, mouseleave, change, select, submit, keydown, keypress, keyup, and contextmenu.
    *
    * **Solution**: Instead of `.click(fn)` use `.on("click", fn)`. Instead of `.click()` use `.trigger("click")`.
    * @example ​ ````Show the number of times mouseover and mouseenter events are triggered.
  mouseover fires when the pointer moves into the child element as well, while mouseenter fires only when the pointer moves into the bound element.
  ```html
  <!doctype html>
  <html lang="en">
  <head>
    <meta charset="utf-8">
    <title>mouseover demo</title>
    <style>
    div.out {
    width: 40%;
    height: 120px;
    margin: 0 15px;
    background-color: #d6edfc;
    float: left;
    }
    div.in {
    width: 60%;
    height: 60%;
    background-color: #fc0;
    margin: 10px auto;
    }
    p {
    line-height: 1em;
    margin: 0;
    padding: 0;
    }
    </style>
    <script src="https://code.jquery.com/jquery-3.3.1.js"></script>
  </head>
  <body>
  ​
  <div class="out overout">
    <span>move your mouse</span>
    <div class="in">
    </div>
  </div>
  ​
  <div class="out enterleave">
    <span>move your mouse</span>
    <div class="in">
    </div>
  </div>
  ​
  <script>
  var i = 0;
  $( "div.overout" )
    .mouseover(function() {
    i += 1;
    $( this ).find( "span" ).text( "mouse over x " + i );
    })
    .mouseout(function() {
    $( this ).find( "span" ).text( "mouse out " );
    });
  ​
  var n = 0;
  $( "div.enterleave" )
    .mouseenter(function() {
    n += 1;
    $( this ).find( "span" ).text( "mouse enter x " + n );
    })
    .mouseleave(function() {
    $( this ).find( "span" ).text( "mouse leave" );
    });
  </script>
  ​
  </body>
  </html>
  ```
    */
  def mouseover(): this.type = js.native
  @JSName("mouseover")
  def mouseover_false(handler: `false`): this.type = js.native
  @JSName("mouseover")
  def mouseover_mouseover(handler: TypeEventHandler[TElement, Null, TElement, TElement, mouseover]): this.type = js.native
  /**
    * Bind an event handler to the "mouseover" JavaScript event, or trigger that event on an element.
    * @param eventData An object containing data that will be passed to the event handler.
    * @param handler A function to execute each time the event is triggered.
    * @see \`{@link https://api.jquery.com/mouseover/ }\`
    * @since 1.4.3
    * @deprecated ​ Deprecated since 3.3. Use \`{@link on }\` or \`{@link trigger }\`.
    *
    * **Cause**: The `.on()` and `.trigger()` methods can set an event handler or generate an event for any event type, and should be used instead of the shortcut methods. This message also applies to the other event shorthands, including: blur, focus, focusin, focusout, resize, scroll, dblclick, mousedown, mouseup, mousemove, mouseover, mouseout, mouseenter, mouseleave, change, select, submit, keydown, keypress, keyup, and contextmenu.
    *
    * **Solution**: Instead of `.click(fn)` use `.on("click", fn)`. Instead of `.click()` use `.trigger("click")`.
    */
  @JSName("mouseover")
  def mouseover_mouseover[TData](eventData: TData, handler: TypeEventHandler[TElement, TData, TElement, TElement, mouseover]): this.type = js.native
  
  /**
    * Bind an event handler to the "mouseup" JavaScript event, or trigger that event on an element.
    * @param handler A function to execute each time the event is triggered.
    * @see \`{@link https://api.jquery.com/mouseup/ }\`
    * @since 1.0
    * @deprecated ​ Deprecated since 3.3. Use \`{@link on }\` or \`{@link trigger }\`.
    *
    * **Cause**: The `.on()` and `.trigger()` methods can set an event handler or generate an event for any event type, and should be used instead of the shortcut methods. This message also applies to the other event shorthands, including: blur, focus, focusin, focusout, resize, scroll, dblclick, mousedown, mouseup, mousemove, mouseover, mouseout, mouseenter, mouseleave, change, select, submit, keydown, keypress, keyup, and contextmenu.
    *
    * **Solution**: Instead of `.click(fn)` use `.on("click", fn)`. Instead of `.click()` use `.trigger("click")`.
    * @example ​ ````Show texts when mouseup and mousedown event triggering.
  ```html
  <!doctype html>
  <html lang="en">
  <head>
    <meta charset="utf-8">
    <title>mouseup demo</title>
    <script src="https://code.jquery.com/jquery-3.3.1.js"></script>
  </head>
  <body>
  ​
  <p>Press mouse and release here.</p>
  ​
  <script>
  $( "p" )
    .mouseup(function() {
    $( this ).append( "<span style='color:#f00;'>Mouse up.</span>" );
    })
    .mousedown(function() {
    $( this ).append( "<span style='color:#00f;'>Mouse down.</span>" );
    });
  </script>
  ​
  </body>
  </html>
  ```
    */
  def mouseup(): this.type = js.native
  @JSName("mouseup")
  def mouseup_false(handler: `false`): this.type = js.native
  @JSName("mouseup")
  def mouseup_mouseup(handler: TypeEventHandler[TElement, Null, TElement, TElement, mouseup]): this.type = js.native
  /**
    * Bind an event handler to the "mouseup" JavaScript event, or trigger that event on an element.
    * @param eventData An object containing data that will be passed to the event handler.
    * @param handler A function to execute each time the event is triggered.
    * @see \`{@link https://api.jquery.com/mouseup/ }\`
    * @since 1.4.3
    * @deprecated ​ Deprecated since 3.3. Use \`{@link on }\` or \`{@link trigger }\`.
    *
    * **Cause**: The `.on()` and `.trigger()` methods can set an event handler or generate an event for any event type, and should be used instead of the shortcut methods. This message also applies to the other event shorthands, including: blur, focus, focusin, focusout, resize, scroll, dblclick, mousedown, mouseup, mousemove, mouseover, mouseout, mouseenter, mouseleave, change, select, submit, keydown, keypress, keyup, and contextmenu.
    *
    * **Solution**: Instead of `.click(fn)` use `.on("click", fn)`. Instead of `.click()` use `.trigger("click")`.
    */
  @JSName("mouseup")
  def mouseup_mouseup[TData](eventData: TData, handler: TypeEventHandler[TElement, TData, TElement, TElement, mouseup]): this.type = js.native
  
  /**
    * Get the immediately following sibling of each element in the set of matched elements. If a selector is provided, it retrieves the next sibling only if it matches that selector.
    * @param selector A string containing a selector expression to match elements against.
    * @see \`{@link https://api.jquery.com/next/ }\`
    * @since 1.0
    * @example ​ ````Find the very next sibling of each disabled button and change its text &quot;this button is disabled&quot;.
  ```html
  <!doctype html>
  <html lang="en">
  <head>
    <meta charset="utf-8">
    <title>next demo</title>
    <style>
    span {
    color: blue;
    font-weight: bold;
    }
    button {
    width: 100px;
    }
    </style>
    <script src="https://code.jquery.com/jquery-3.3.1.js"></script>
  </head>
  <body>
  ​
  <div><button disabled="disabled">First</button> - <span></span></div>
  <div><button>Second</button> - <span></span></div>
  <div><button disabled="disabled">Third</button> - <span></span></div>
  ​
  <script>
  $( "button[disabled]" ).next().text( "this button is disabled" );
  </script>
  ​
  </body>
  </html>
  ```
    * @example ​ ````Find the very next sibling of each paragraph. Keep only the ones with a class &quot;selected&quot;.
  ```html
  <!doctype html>
  <html lang="en">
  <head>
    <meta charset="utf-8">
    <title>next demo</title>
    <script src="https://code.jquery.com/jquery-3.3.1.js"></script>
  </head>
  <body>
  ​
  <p>Hello</p>
  <p class="selected">Hello Again</p>
  <div><span>And Again</span></div>
  ​
  <script>
  $( "p" ).next( ".selected" ).css( "background", "yellow" );
  </script>
  ​
  </body>
  </html>
  ```
    */
  def next(): this.type = js.native
  def next(selector: Selector): this.type = js.native
  
  /**
    * Get all following siblings of each element in the set of matched elements, optionally filtered by a selector.
    * @param selector A string containing a selector expression to match elements against.
    * @see \`{@link https://api.jquery.com/nextAll/ }\`
    * @since 1.2
    * @example ​ ````Locate all the divs after the first and give them a class.
  ```html
  <!doctype html>
  <html lang="en">
  <head>
    <meta charset="utf-8">
    <title>nextAll demo</title>
    <style>
    div {
    width: 80px;
    height: 80px;
    background: #abc;
    border: 2px solid black;
    margin: 10px;
    float: left;
    }
    div.after {
    border-color: red;
    }
    </style>
    <script src="https://code.jquery.com/jquery-3.3.1.js"></script>
  </head>
  <body>
  ​
  <div>first</div>
  <div>sibling<div>child</div></div>
  <div>sibling</div>
  <div>sibling</div>​
  <script>
  $( "div:first" ).nextAll().addClass( "after" );
  </script>
  ​
  </body>
  </html>
  ```
    * @example ​ ````Locate all the paragraphs after the second child in the body and give them a class.
  ```html
  <!doctype html>
  <html lang="en">
  <head>
    <meta charset="utf-8">
    <title>nextAll demo</title>
    <style>
    div, p {
    width: 60px;
    height: 60px;
    background: #abc;
    border: 2px solid black;
    margin: 10px;
    float: left;
    }
    .after {
    border-color: red;
    }
    </style>
    <script src="https://code.jquery.com/jquery-3.3.1.js"></script>
  </head>
  <body>
  ​
  <p>p</p>
  <div>div</div>
  <p>p</p>
  <p>p</p>
  <div>div</div>
  <p>p</p>
  <div>div</div>
  ​
  <script>
  $( ":nth-child(1)" ).nextAll( "p" ).addClass( "after" );
  </script>
  ​
  </body>
  </html>
  ```
    */
  def nextAll(): this.type = js.native
  def nextAll(selector: String): this.type = js.native
  
  /**
    * Get all following siblings of each element up to but not including the element matched by the selector, DOM node, or jQuery object passed.
    * @param selector_element _&#x40;param_ `selector_element`
    * <br>
    * * `selector` — A string containing a selector expression to indicate where to stop matching following sibling elements. <br>
    * * `element` — A DOM node or jQuery object indicating where to stop matching following sibling elements.
    * @param filter A string containing a selector expression to match elements against.
    * @see \`{@link https://api.jquery.com/nextUntil/ }\`
    * @since 1.4
    * @since 1.6
    * @example ​ ````Find the siblings that follow &lt;dt id=&quot;term-2&quot;&gt; up to the next &lt;dt&gt; and give them a red background color. Also, find &lt;dd&gt; siblings that follow &lt;dt id=&quot;term-1&quot;&gt; up to &lt;dt id=&quot;term-3&quot;&gt; and give them a green text color.
  ```html
  <!doctype html>
  <html lang="en">
  <head>
    <meta charset="utf-8">
    <title>nextUntil demo</title>
    <script src="https://code.jquery.com/jquery-3.3.1.js"></script>
  </head>
  <body>
  ​
  <dl>
    <dt id="term-1">term 1</dt>
    <dd>definition 1-a</dd>
    <dd>definition 1-b</dd>
    <dd>definition 1-c</dd>
    <dd>definition 1-d</dd>
    <dt id="term-2">term 2</dt>
    <dd>definition 2-a</dd>
    <dd>definition 2-b</dd>
    <dd>definition 2-c</dd>
    <dt id="term-3">term 3</dt>
    <dd>definition 3-a</dd>
    <dd>definition 3-b</dd>
  </dl>
  ​
  <script>
  $( "#term-2" )
    .nextUntil( "dt" )
    .css( "background-color", "red" );
  var term3 = document.getElementById( "term-3" );
  $( "#term-1" )
    .nextUntil( term3, "dd" )
    .css( "color", "green" );
  </script>
  ​
  </body>
  </html>
  ```
    */
  def nextUntil(): this.type = js.native
  def nextUntil(selector_element: js.UndefOr[scala.Nothing], filter: Selector): this.type = js.native
  def nextUntil(selector_element: Element): this.type = js.native
  def nextUntil(selector_element: Element, filter: Selector): this.type = js.native
  def nextUntil(selector_element: JQuery[HTMLElement]): this.type = js.native
  def nextUntil(selector_element: Selector): this.type = js.native
  def nextUntil(selector_element: Selector, filter: Selector): this.type = js.native
  def nextUntil(selector_element: JQuery[HTMLElement], filter: Selector): this.type = js.native
  
  def not(
    selector_function_selection: js.ThisFunction2[/* this */ TElement, /* index */ Double, /* element */ TElement, Boolean]
  ): this.type = js.native
  def not(selector_function_selection: JQuery[HTMLElement]): this.type = js.native
  /**
    * Remove elements from the set of matched elements.
    * @param selector_function_selection _&#x40;param_ `selector_function_selection`
    * <br>
    * * `selector` — A string containing a selector expression, a DOM element, or an array of elements to match against the set. <br>
    * * `function` — A function used as a test for each element in the set. It accepts two arguments, `index`, which is
    *                the element's index in the jQuery collection, and `element`, which is the DOM element. Within the
    *                function, `this` refers to the current DOM element. <br>
    * * `selection` — An existing jQuery object to match the current set of elements against.
    * @see \`{@link https://api.jquery.com/not/ }\`
    * @since 1.0
    * @since 1.4
    * @example ​ ````Adds a border to divs that are not green or blue.
  ```html
  <!doctype html>
  <html lang="en">
  <head>
    <meta charset="utf-8">
    <title>not demo</title>
    <style>
    div {
    width: 50px;
    height: 50px;
    margin: 10px;
    float: left;
    background: yellow;
    border: 2px solid white;
    }
    .green {
    background: #8f8;
    }
    .gray {
    background: #ccc;
    }
    #blueone {
    background: #99f;
    }
    </style>
    <script src="https://code.jquery.com/jquery-3.3.1.js"></script>
  </head>
  <body>
  ​
  <div></div>
  <div id="blueone"></div>
  <div></div>
  <div class="green"></div>
  <div class="green"></div>
  <div class="gray"></div>
  <div></div>
  ​
  <script>
  $( "div" ).not( ".green, #blueone" )
    .css( "border-color", "red" );
  </script>
  ​
  </body>
  </html>
  ```
    * @example ​ ````Removes the element with the ID &quot;selected&quot; from the set of all paragraphs.
  ```javascript
  $( "p" ).not( $( "#selected" )[ 0 ] );
  ```
    * @example ​ ````Removes the element with the ID &quot;selected&quot; from the set of all paragraphs.
  ```javascript
  $( "p" ).not( "#selected" );
  ```
    * @example ​ ````Removes all elements that match &quot;div p.selected&quot; from the total set of all paragraphs.
  ```javascript
  $( "p" ).not( $( "div p.selected" ) );
  ```
    */
  def not(selector_function_selection: Selector): this.type = js.native
  def not(selector_function_selection: TypeOrArray[Element]): this.type = js.native
  
  /**
    * Reduce the set of matched elements to the odd ones in the set, numbered from zero.
    * @see \`{@link https://api.jquery.com/odd/ }\`
    * @since 3.5
    * @example ​ ````Highlight the odd items in a list.
  ```html
  <!doctype html>
  <html lang="en">
  <head>
    <meta charset="utf-8">
    <title>odd demo</title>
    <style>
    .highlight {
    background-color: yellow;
    }
    </style>
    <script src="https://code.jquery.com/jquery-3.5.0.js"></script>
  </head>
  <body>
  <ul>
    <li>Look:</li>
    <li>This is some text in a list.</li>
    <li>This is a note about it.</li>
    <li>This is another note about it.</li>
  </ul>
  <script>
  $( "ul li" ).odd().addClass( "highlight" );
  </script>
  </body>
  </html>
  ```
    */
  def odd(): this.type = js.native
  
  /**
    * Remove an event handler.
    * @param event A jQuery.Event object.
    * @see \`{@link https://api.jquery.com/off/ }\`
    * @since 1.7
    * @example ​ ````Remove all event handlers from all paragraphs:
  ```javascript
  $( "p" ).off();
  ```
    */
  def off(): this.type = js.native
  /**
    * Remove an event handler.
    * @param events An object where the string keys represent one or more space-separated event types and optional
    *               namespaces, and the values represent handler functions previously attached for the event(s).
    * @param selector A selector which should match the one originally passed to .on() when attaching event handlers.
    * @see \`{@link https://api.jquery.com/off/ }\`
    * @since 1.7
    */
  def off(events: TypeEventHandlers[TElement, _, _, _]): this.type = js.native
  def off(events: TypeEventHandlers[TElement, _, _, _], selector: Selector): this.type = js.native
  def off(event: TriggeredEvent[TElement, _, _, _]): this.type = js.native
  /**
    * Remove an event handler.
    * @param events One or more space-separated event types and optional namespaces, or just namespaces, such as
    *               "click", "keydown.myPlugin", or ".myPlugin".
    * @param selector_handler _&#x40;param_ `selector_handler`
    * <br>
    * * `selector` — A selector which should match the one originally passed to `.on()` when attaching event handlers. <br>
    * * `handler` — A handler function previously attached for the event(s), or the special value `false`.
    * @see \`{@link https://api.jquery.com/off/ }\`
    * @since 1.7
    * @example ​ ````Remove all delegated click handlers from all paragraphs:
  ```javascript
  $( "p" ).off( "click", "**" );
  ```
    * @example ​ ````Unbind all delegated event handlers by their namespace:
  ```javascript
  var validate = function() {
    // Code to validate form entries
  };
  ​
  // Delegate events under the ".validator" namespace
  $( "form" ).on( "click.validator", "button", validate );
  ​
  $( "form" ).on( "keypress.validator", "input[type='text']", validate );
  ​
  // Remove event handlers in the ".validator" namespace
  $( "form" ).off( ".validator" );
  ```
    */
  def off[TType /* <: String */](events: TType): this.type = js.native
  def off[TType /* <: String */](events: TType, selector_handler: Selector): this.type = js.native
  def off[TType /* <: String */](events: TType, selector_handler: TypeEventHandler[TElement, _, _, _, TType]): this.type = js.native
  /**
    * Remove an event handler.
    * @param events One or more space-separated event types and optional namespaces, or just namespaces, such as
    *               "click", "keydown.myPlugin", or ".myPlugin".
    * @param selector A selector which should match the one originally passed to .on() when attaching event handlers.
    * @param handler A function to execute each time the event is triggered.
    * @see \`{@link https://api.jquery.com/off/ }\`
    * @since 1.7
    * @example ​ ````Add and remove event handlers on the colored button.
  ```html
  <!doctype html>
  <html lang="en">
  <head>
    <meta charset="utf-8">
    <title>off demo</title>
    <style>
    button {
    margin: 5px;
    }
    button#theone {
    color: red;
    background: yellow;
    }
    </style>
    <script src="https://code.jquery.com/jquery-3.3.1.js"></script>
  </head>
  <body>
  ​
  <button id="theone">Does nothing...</button>
  <button id="bind">Add Click</button>
  <button id="unbind">Remove Click</button>
  <div style="display:none;">Click!</div>
  ​
  <script>
  function flash() {
    $( "div" ).show().fadeOut( "slow" );
  }
  $( "#bind" ).click(function() {
    $( "body" )
    .on( "click", "#theone", flash )
    .find( "#theone" )
    .text( "Can Click!" );
  });
  $( "#unbind" ).click(function() {
    $( "body" )
    .off( "click", "#theone", flash )
    .find( "#theone" )
    .text( "Does nothing..." );
  });
  </script>
  ​
  </body>
  </html>
  ```
    * @example ​ ````Remove just one previously bound handler by passing it as the third argument:
  ```javascript
  var foo = function() {
    // Code to handle some kind of event
  };
  ​
  // ... Now foo will be called when paragraphs are clicked ...
  $( "body" ).on( "click", "p", foo );
  ​
  // ... Foo will no longer be called.
  $( "body" ).off( "click", "p", foo );
  ```
    */
  def off[TType /* <: String */](events: TType, selector: Selector, handler: TypeEventHandler[TElement, _, _, _, TType]): this.type = js.native
  @JSName("off")
  def off_false[TType /* <: String */](events: TType, selector_handler: `false`): this.type = js.native
  @JSName("off")
  def off_false[TType /* <: String */](events: TType, selector: Selector, handler: `false`): this.type = js.native
  
  /**
    * Get the current coordinates of the first element in the set of matched elements, relative to the document.
    * @see \`{@link https://api.jquery.com/offset/ }\`
    * @since 1.2
    * @example ​ ````Access the offset of the second paragraph:
  ```html
  <!doctype html>
  <html lang="en">
  <head>
    <meta charset="utf-8">
    <title>offset demo</title>
    <style>
    p {
    margin-left: 10px;
    }
    </style>
    <script src="https://code.jquery.com/jquery-3.3.1.js"></script>
  </head>
  <body>
  ​
  <p>Hello</p><p>2nd Paragraph</p>
  ​
  <script>
  var p = $( "p:last" );
  var offset = p.offset();
  p.html( "left: " + offset.left + ", top: " + offset.top );
  </script>
  ​
  </body>
  </html>
  ```
    * @example ​ ````Click to see the offset.
  ```html
  <!doctype html>
  <html lang="en">
  <head>
    <meta charset="utf-8">
    <title>offset demo</title>
    <style>
    p {
    margin-left: 10px;
    color: blue;
    width: 200px;
    cursor: pointer;
    }
    span {
    color: red;
    cursor: pointer;
    }
    div.abs {
    width: 50px;
    height: 50px;
    position: absolute;
    left: 220px;
    top: 35px;
    background-color: green;
    cursor: pointer;
    }
    </style>
    <script src="https://code.jquery.com/jquery-3.3.1.js"></script>
  </head>
  <body>
  ​
  <div id="result">Click an element.</div>
  <p>
    This is the best way to <span>find</span> an offset.
  </p>
  <div class="abs">
  </div>
  ​
  <script>
  $( "*", document.body ).click(function( event ) {
    var offset = $( this ).offset();
    event.stopPropagation();
    $( "#result" ).text( this.tagName +
    " coords ( " + offset.left + ", " + offset.top + " )" );
  });
  </script>
  ​
  </body>
  </html>
  ```
    */
  def offset(): js.UndefOr[Coordinates] = js.native
  def offset(
    coordinates_function: js.ThisFunction2[/* this */ TElement, /* index */ Double, /* coords */ Coordinates, CoordinatesPartial]
  ): this.type = js.native
  /**
    * Set the current coordinates of every element in the set of matched elements, relative to the document.
    * @param coordinates_function _&#x40;param_ `coordinates_function`
    * <br>
    * * `coordinates` — An object containing the properties `top` and `left`, which are numbers indicating the new top and
    *                   left coordinates for the elements. <br>
    * * `function` — A function to return the coordinates to set. Receives the index of the element in the collection as
    *                the first argument and the current coordinates as the second argument. The function should return an
    *                object with the new `top` and `left` properties.
    * @see \`{@link https://api.jquery.com/offset/ }\`
    * @since 1.4
    * @example ​ ````Set the offset of the second paragraph:
  ```html
  <!doctype html>
  <html lang="en">
  <head>
    <meta charset="utf-8">
    <title>offset demo</title>
    <style>
    p {
    margin-left: 10px;
    }
    </style>
    <script src="https://code.jquery.com/jquery-3.3.1.js"></script>
  </head>
  <body>
  ​
  <p>Hello</p><p>2nd Paragraph</p>
  ​
  <script>
  $( "p:last" ).offset({ top: 10, left: 30 });
  </script>
  ​
  </body>
  </html>
  ```
    */
  def offset(coordinates_function: CoordinatesPartial): this.type = js.native
  
  /**
    * Get the closest ancestor element that is positioned.
    * @see \`{@link https://api.jquery.com/offsetParent/ }\`
    * @since 1.2.6
    * @example ​ ````Find the offsetParent of item &quot;A.&quot;
  ```html
  <!doctype html>
  <html lang="en">
  <head>
    <meta charset="utf-8">
    <title>offsetParent demo</title>
    <script src="https://code.jquery.com/jquery-3.3.1.js"></script>
  </head>
  <body>
  ​
  <ul class="level-1">
    <li class="item-i">I</li>
    <li class="item-ii" style="position: relative;">II
    <ul class="level-2">
    <li class="item-a">A</li>
    <li class="item-b">B
    <ul class="level-3">
    <li class="item-1">1</li>
    <li class="item-2">2</li>
    <li class="item-3">3</li>
    </ul>
    </li>
    <li class="item-c">C</li>
    </ul>
    </li>
    <li class="item-iii">III</li>
  </ul>
  ​
  <script>$( "li.item-a" ).offsetParent().css( "background-color", "red" );</script>
  ​
  </body>
  </html>
  ```
    */
  def offsetParent(): this.type = js.native
  
  /**
    * Attach an event handler function for one or more events to the selected elements.
    * @param events One or more space-separated event types and optional namespaces, such as "click" or "keydown.myPlugin".
    * @param handler A function to execute when the event is triggered.
    * @see \`{@link https://api.jquery.com/on/ }\`
    * @since 1.7
    * @deprecated ​ Deprecated. Use \`{@link JQuery.Event }\` in place of \`{@link JQueryEventObject }\`.
    * @example ​ ````Display a paragraph&#39;s text in an alert when it is clicked:
  ```javascript
  $( "p" ).on( "click", function() {
    alert( $( this ).text() );
  });
  ```
    * @example ​ ````Cancel a form submit action and prevent the event from bubbling up by returning false:
  ```javascript
  $( "form" ).on( "submit", false );
  ```
    * @example ​ ````Cancel only the default action by using .preventDefault().
  ```javascript
  $( "form" ).on( "submit", function( event ) {
    event.preventDefault();
  });
  ```
    * @example ​ ````Stop submit events from bubbling without preventing form submit, using .stopPropagation().
  ```javascript
  $( "form" ).on( "submit", function( event ) {
    event.stopPropagation();
  });
  ```
    * @example ​ ````Pass data to the event handler using the second argument to .trigger()
  ```javascript
  $( "div" ).on( "click", function( event, person ) {
    alert( "Hello, " + person.name );
  });
  $( "div" ).trigger( "click", { name: "Jim" } );
  ```
    * @example ​ ````Use the the second argument of .trigger() to pass an array of data to the event handler
  ```javascript
  $( "div" ).on( "click", function( event, salutation, name ) {
    alert( salutation + ", " + name );
  });
  $( "div" ).trigger( "click", [ "Goodbye", "Jim" ] );
  ```
    * @example ​ ````Attach and trigger custom (non-browser) events.
  ```html
  <!doctype html>
  <html lang="en">
  <head>
    <meta charset="utf-8">
    <title>on demo</title>
    <style>
    p {
    color: red;
    }
    span {
    color: blue;
    }
    </style>
    <script src="https://code.jquery.com/jquery-3.3.1.js"></script>
  </head>
  <body>
  ​
  <p>Has an attached custom event.</p>
  <button>Trigger custom event</button>
  <span style="display:none;"></span>
  ​
  <script>
  $( "p" ).on( "myCustomEvent", function( event, myName ) {
    $( this ).text( myName + ", hi there!" );
    $( "span" )
    .stop()
    .css( "opacity", 1 )
    .text( "myName = " + myName )
    .fadeIn( 30 )
    .fadeOut( 1000 );
  });
  $( "button" ).click(function () {
    $( "p" ).trigger( "myCustomEvent", [ "John" ] );
  });
  </script>
  ​
  </body>
  </html>
  ```
    * @example ​ ````Attach multiple events—one on mouseenter and one on mouseleave to the same element:
  ```javascript
  $( "#cart" ).on( "mouseenter mouseleave", function( event ) {
    $( this ).toggleClass( "active" );
  });
  ```
    */
  def on(events: String, handler: js.Function1[/* event */ JQueryEventObject, Unit]): this.type = js.native
  /**
    * Attach an event handler function for one or more events to the selected elements.
    * @param events One or more space-separated event types and optional namespaces, such as "click" or "keydown.myPlugin".
    * @param selector_data _&#x40;param_ `selector_data`
    * <br>
    * * `selector` — A selector string to filter the descendants of the selected elements that trigger the event. If the
    *                selector is null or omitted, the event is always triggered when it reaches the selected element. <br>
    * * `data` — Data to be passed to the handler in event.data when an event is triggered.
    * @param handler A function to execute when the event is triggered.
    * @see \`{@link https://api.jquery.com/on/ }\`
    * @since 1.7
    * @deprecated ​ Deprecated. Use \`{@link JQuery.Event }\` in place of \`{@link JQueryEventObject }\`.
    * @example ​ ````Click any paragraph to add another after it. Note that .on() allows a click event on any paragraph--even new ones--since the event is handled by the ever-present body element after it bubbles to there.
  ```html
  <!doctype html>
  <html lang="en">
  <head>
    <meta charset="utf-8">
    <title>on demo</title>
    <style>
    p {
    background: yellow;
    font-weight: bold;
    cursor: pointer;
    padding: 5px;
    }
    p.over {
    background: #ccc;
    }
    span {
    color: red;
    }
    </style>
    <script src="https://code.jquery.com/jquery-3.3.1.js"></script>
  </head>
  <body>
  ​
  <p>Click me!</p>
  <span></span>
  ​
  <script>
  var count = 0;
  $( "body" ).on( "click", "p", function() {
    $( this ).after( "<p>Another paragraph! " + (++count) + "</p>" );
  });
  </script>
  ​
  </body>
  </html>
  ```
    * @example ​ ````Display each paragraph&#39;s text in an alert box whenever it is clicked:
  ```javascript
  $( "body" ).on( "click", "p", function() {
    alert( $( this ).text() );
  });
  ```
    * @example ​ ````Cancel a link&#39;s default action using the .preventDefault() method:
  ```javascript
  $( "body" ).on( "click", "a", function( event ) {
    event.preventDefault();
  });
  ```
    * @example ​ ````Pass data to the event handler, which is specified here by name:
  ```javascript
  function myHandler( event ) {
    alert( event.data.foo );
  }
  $( "p" ).on( "click", { foo: "bar" }, myHandler );
  ```
    */
  def on(events: String, selector_data: js.Any, handler: js.Function1[/* event */ JQueryEventObject, Unit]): this.type = js.native
  def on(
    events: String,
    selector: js.UndefOr[scala.Nothing],
    data: js.Any,
    handler: js.Function1[/* event */ JQueryEventObject, Unit]
  ): this.type = js.native
  def on(
    events: String,
    selector: Null,
    data: js.Any,
    handler: js.Function1[/* event */ JQueryEventObject, Unit]
  ): this.type = js.native
  /**
    * Attach an event handler function for one or more events to the selected elements.
    * @param events One or more space-separated event types and optional namespaces, such as "click" or "keydown.myPlugin".
    * @param selector A selector string to filter the descendants of the selected elements that trigger the event. If the
    *                 selector is null or omitted, the event is always triggered when it reaches the selected element.
    * @param data Data to be passed to the handler in event.data when an event is triggered.
    * @param handler A function to execute when the event is triggered.
    * @see \`{@link https://api.jquery.com/on/ }\`
    * @since 1.7
    * @deprecated ​ Deprecated. Use \`{@link JQuery.Event }\` in place of \`{@link JQueryEventObject }\`.
    */
  def on(
    events: String,
    selector: Selector,
    data: js.Any,
    handler: js.Function1[/* event */ JQueryEventObject, Unit]
  ): this.type = js.native
  /**
    * Attach an event handler function for one or more events to the selected elements.
    * @param events An object in which the string keys represent one or more space-separated event types and optional
    *               namespaces, and the values represent a handler function to be called for the event(s).
    * @see \`{@link https://api.jquery.com/on/ }\`
    * @since 1.7
    * @example ​ ````Attach multiple event handlers simultaneously using a plain object.
  ```html
  <!doctype html>
  <html lang="en">
  <head>
    <meta charset="utf-8">
    <title>on demo</title>
    <style>
    .test {
    color: #000;
    padding: .5em;
    border: 1px solid #444;
    }
    .active {
    color: #900;
    }
    .inside {
    background-color: aqua;
    }
    </style>
    <script src="https://code.jquery.com/jquery-3.3.1.js"></script>
  </head>
  <body>
  ​
  <div class="test">test div</div>
  ​
  <script>
  $( "div.test" ).on({
    click: function() {
    $( this ).toggleClass( "active" );
    }, mouseenter: function() {
    $( this ).addClass( "inside" );
    }, mouseleave: function() {
    $( this ).removeClass( "inside" );
    }
  });
  </script>
  ​
  </body>
  </html>
  ```
    */
  def on(events: TypeEventHandlers[TElement, js.UndefOr[scala.Nothing], TElement, TElement]): this.type = js.native
  /**
    * Attach an event handler function for one or more events to the selected elements.
    * @param events An object in which the string keys represent one or more space-separated event types and optional
    *               namespaces, and the values represent a handler function to be called for the event(s).
    * @param selector A selector string to filter the descendants of the selected elements that will call the handler. If
    *                 the selector is null or omitted, the handler is always called when it reaches the selected element.
    * @see \`{@link https://api.jquery.com/on/ }\`
    * @since 1.7
    */
  def on(events: TypeEventHandlers[TElement, js.UndefOr[scala.Nothing], _, _], selector: Selector): this.type = js.native
  /**
    * Attach an event handler function for one or more events to the selected elements.
    * @param events One or more space-separated event types and optional namespaces, such as "click" or "keydown.myPlugin".
    * @param handler A function to execute when the event is triggered. The value false is also allowed as a shorthand
    *                for a function that simply does return false.
    * @see \`{@link https://api.jquery.com/on/ }\`
    * @since 1.7
    * @example ​ ````Display a paragraph&#39;s text in an alert when it is clicked:
  ```javascript
  $( "p" ).on( "click", function() {
    alert( $( this ).text() );
  });
  ```
    * @example ​ ````Cancel a form submit action and prevent the event from bubbling up by returning false:
  ```javascript
  $( "form" ).on( "submit", false );
  ```
    * @example ​ ````Cancel only the default action by using .preventDefault().
  ```javascript
  $( "form" ).on( "submit", function( event ) {
    event.preventDefault();
  });
  ```
    * @example ​ ````Stop submit events from bubbling without preventing form submit, using .stopPropagation().
  ```javascript
  $( "form" ).on( "submit", function( event ) {
    event.stopPropagation();
  });
  ```
    * @example ​ ````Pass data to the event handler using the second argument to .trigger()
  ```javascript
  $( "div" ).on( "click", function( event, person ) {
    alert( "Hello, " + person.name );
  });
  $( "div" ).trigger( "click", { name: "Jim" } );
  ```
    * @example ​ ````Use the the second argument of .trigger() to pass an array of data to the event handler
  ```javascript
  $( "div" ).on( "click", function( event, salutation, name ) {
    alert( salutation + ", " + name );
  });
  $( "div" ).trigger( "click", [ "Goodbye", "Jim" ] );
  ```
    * @example ​ ````Attach and trigger custom (non-browser) events.
  ```html
  <!doctype html>
  <html lang="en">
  <head>
    <meta charset="utf-8">
    <title>on demo</title>
    <style>
    p {
    color: red;
    }
    span {
    color: blue;
    }
    </style>
    <script src="https://code.jquery.com/jquery-3.3.1.js"></script>
  </head>
  <body>
  ​
  <p>Has an attached custom event.</p>
  <button>Trigger custom event</button>
  <span style="display:none;"></span>
  ​
  <script>
  $( "p" ).on( "myCustomEvent", function( event, myName ) {
    $( this ).text( myName + ", hi there!" );
    $( "span" )
    .stop()
    .css( "opacity", 1 )
    .text( "myName = " + myName )
    .fadeIn( 30 )
    .fadeOut( 1000 );
  });
  $( "button" ).click(function () {
    $( "p" ).trigger( "myCustomEvent", [ "John" ] );
  });
  </script>
  ​
  </body>
  </html>
  ```
    * @example ​ ````Attach multiple events—one on mouseenter and one on mouseleave to the same element:
  ```javascript
  $( "#cart" ).on( "mouseenter mouseleave", function( event ) {
    $( this ).toggleClass( "active" );
  });
  ```
    */
  def on[TType /* <: String */](
    events: TType,
    handler: TypeEventHandler[TElement, js.UndefOr[scala.Nothing], TElement, TElement, TType]
  ): this.type = js.native
  /**
    * Attach an event handler function for one or more events to the selected elements.
    * @param events One or more space-separated event types and optional namespaces, such as "click" or "keydown.myPlugin".
    * @param selector A selector string to filter the descendants of the selected elements that trigger the event. If the
    *                 selector is null or omitted, the event is always triggered when it reaches the selected element.
    * @param handler A function to execute when the event is triggered. The value false is also allowed as a shorthand
    *                for a function that simply does return false.
    * @see \`{@link https://api.jquery.com/on/ }\`
    * @since 1.7
    * @example ​ ````Click any paragraph to add another after it. Note that .on() allows a click event on any paragraph--even new ones--since the event is handled by the ever-present body element after it bubbles to there.
  ```html
  <!doctype html>
  <html lang="en">
  <head>
    <meta charset="utf-8">
    <title>on demo</title>
    <style>
    p {
    background: yellow;
    font-weight: bold;
    cursor: pointer;
    padding: 5px;
    }
    p.over {
    background: #ccc;
    }
    span {
    color: red;
    }
    </style>
    <script src="https://code.jquery.com/jquery-3.3.1.js"></script>
  </head>
  <body>
  ​
  <p>Click me!</p>
  <span></span>
  ​
  <script>
  var count = 0;
  $( "body" ).on( "click", "p", function() {
    $( this ).after( "<p>Another paragraph! " + (++count) + "</p>" );
  });
  </script>
  ​
  </body>
  </html>
  ```
    * @example ​ ````Display each paragraph&#39;s text in an alert box whenever it is clicked:
  ```javascript
  $( "body" ).on( "click", "p", function() {
    alert( $( this ).text() );
  });
  ```
    * @example ​ ````Cancel a link&#39;s default action using the .preventDefault() method:
  ```javascript
  $( "body" ).on( "click", "a", function( event ) {
    event.preventDefault();
  });
  ```
    */
  def on[TType /* <: String */](
    events: TType,
    selector: Selector,
    handler: TypeEventHandler[TElement, js.UndefOr[scala.Nothing], _, _, TType]
  ): this.type = js.native
  /**
    * Attach an event handler function for one or more events to the selected elements.
    * @param events An object in which the string keys represent one or more space-separated event types and optional
    *               namespaces, and the values represent a handler function to be called for the event(s).
    * @param data Data to be passed to the handler in event.data when an event occurs.
    * @see \`{@link https://api.jquery.com/on/ }\`
    * @since 1.7
    */
  def on[TData](events: TypeEventHandlers[TElement, TData, TElement, TElement], data: TData): this.type = js.native
  def on[TData](
    events: TypeEventHandlers[TElement, TData, TElement, TElement],
    selector: js.UndefOr[scala.Nothing],
    data: TData
  ): this.type = js.native
  /**
    * Attach an event handler function for one or more events to the selected elements.
    * @param events An object in which the string keys represent one or more space-separated event types and optional
    *               namespaces, and the values represent a handler function to be called for the event(s).
    * @param selector A selector string to filter the descendants of the selected elements that will call the handler. If
    *                 the selector is null or omitted, the handler is always called when it reaches the selected element.
    * @param data Data to be passed to the handler in event.data when an event occurs.
    * @see \`{@link https://api.jquery.com/on/ }\`
    * @since 1.7
    */
  def on[TData](events: TypeEventHandlers[TElement, TData, TElement, TElement], selector: Null, data: TData): this.type = js.native
  /**
    * Attach an event handler function for one or more events to the selected elements.
    * @param events An object in which the string keys represent one or more space-separated event types and optional
    *               namespaces, and the values represent a handler function to be called for the event(s).
    * @param selector A selector string to filter the descendants of the selected elements that will call the handler. If
    *                 the selector is null or omitted, the handler is always called when it reaches the selected element.
    * @param data Data to be passed to the handler in event.data when an event occurs.
    * @see \`{@link https://api.jquery.com/on/ }\`
    * @since 1.7
    */
  def on[TData](events: TypeEventHandlers[TElement, TData, _, _], selector: Selector, data: TData): this.type = js.native
  /**
    * Attach an event handler function for one or more events to the selected elements.
    * @param events One or more space-separated event types and optional namespaces, such as "click" or "keydown.myPlugin".
    * @param data Data to be passed to the handler in event.data when an event is triggered.
    * @param handler A function to execute when the event is triggered.
    * @see \`{@link https://api.jquery.com/on/ }\`
    * @since 1.7
    * @example ​ ````Pass data to the event handler, which is specified here by name:
  ```javascript
  function myHandler( event ) {
    alert( event.data.foo );
  }
  $( "p" ).on( "click", { foo: "bar" }, myHandler );
  ```
    */
  def on[TType /* <: String */, TData](events: TType, data: TData, handler: TypeEventHandler[TElement, TData, TElement, TElement, TType]): this.type = js.native
  def on[TType /* <: String */, TData](
    events: TType,
    selector: js.UndefOr[scala.Nothing],
    data: TData,
    handler: TypeEventHandler[TElement, TData, TElement, TElement, TType]
  ): this.type = js.native
  /**
    * Attach an event handler function for one or more events to the selected elements.
    * @param events One or more space-separated event types and optional namespaces, such as "click" or "keydown.myPlugin".
    * @param selector A selector string to filter the descendants of the selected elements that trigger the event. If the
    *                 selector is null or omitted, the event is always triggered when it reaches the selected element.
    * @param data Data to be passed to the handler in event.data when an event is triggered.
    * @param handler A function to execute when the event is triggered.
    * @see \`{@link https://api.jquery.com/on/ }\`
    * @since 1.7
    */
  def on[TType /* <: String */, TData](
    events: TType,
    selector: Null,
    data: TData,
    handler: TypeEventHandler[TElement, TData, TElement, TElement, TType]
  ): this.type = js.native
  /**
    * Attach an event handler function for one or more events to the selected elements.
    * @param events One or more space-separated event types and optional namespaces, such as "click" or "keydown.myPlugin".
    * @param selector A selector string to filter the descendants of the selected elements that trigger the event. If the
    *                 selector is null or omitted, the event is always triggered when it reaches the selected element.
    * @param data Data to be passed to the handler in event.data when an event is triggered.
    * @param handler A function to execute when the event is triggered.
    * @see \`{@link https://api.jquery.com/on/ }\`
    * @since 1.7
    */
  def on[TType /* <: String */, TData](
    events: TType,
    selector: Selector,
    data: TData,
    handler: TypeEventHandler[TElement, TData, _, _, TType]
  ): this.type = js.native
  @JSName("on")
  def on_false[TType /* <: String */](events: TType, handler: `false`): this.type = js.native
  @JSName("on")
  def on_false[TType /* <: String */](events: TType, selector: Selector, handler: `false`): this.type = js.native
  
  /**
    * Attach a handler to an event for the elements. The handler is executed at most once per element per event type.
    * @param events An object in which the string keys represent one or more space-separated event types and optional
    *               namespaces, and the values represent a handler function to be called for the event(s).
    * @see \`{@link https://api.jquery.com/one/ }\`
    * @since 1.7
    */
  def one(events: TypeEventHandlers[TElement, js.UndefOr[scala.Nothing], TElement, TElement]): this.type = js.native
  /**
    * Attach a handler to an event for the elements. The handler is executed at most once per element per event type.
    * @param events An object in which the string keys represent one or more space-separated event types and optional
    *               namespaces, and the values represent a handler function to be called for the event(s).
    * @param selector A selector string to filter the descendants of the selected elements that will call the handler. If
    *                 the selector is null or omitted, the handler is always called when it reaches the selected element.
    * @see \`{@link https://api.jquery.com/one/ }\`
    * @since 1.7
    */
  def one(events: TypeEventHandlers[TElement, js.UndefOr[scala.Nothing], _, _], selector: Selector): this.type = js.native
  /**
    * Attach a handler to an event for the elements. The handler is executed at most once per element per event type.
    * @param events One or more space-separated event types and optional namespaces, such as "click" or "keydown.myPlugin".
    * @param handler A function to execute when the event is triggered. The value false is also allowed as a shorthand
    *                for a function that simply does return false.
    * @see \`{@link https://api.jquery.com/one/ }\`
    * @since 1.7
    * @example ​ ````Tie a one-time click to each div.
  ```html
  <!doctype html>
  <html lang="en">
  <head>
    <meta charset="utf-8">
    <title>one demo</title>
    <style>
    div {
    width: 60px;
    height: 60px;
    margin: 5px;
    float: left;
    background: green;
    border: 10px outset;
    cursor:pointer;
    }
    p {
    color: red;
    margin: 0;
    clear: left;
    }
    </style>
    <script src="https://code.jquery.com/jquery-3.3.1.js"></script>
  </head>
  <body>
  ​
  <div></div>
  <div></div>
  <div></div>
  <div></div>
  <div></div>
  <p>Click a green square...</p>
  ​
  <script>
  var n = 0;
  $( "div" ).one( "click", function() {
    var index = $( "div" ).index( this );
    $( this ).css({
    borderStyle: "inset",
    cursor: "auto"
    });
    $( "p" ).text( "Div at index #" + index + " clicked." +
    " That's " + (++n) + " total clicks." );
  });
  </script>
  ​
  </body>
  </html>
  ```
    * @example ​ ````To display the text of all paragraphs in an alert box the first time each of them is clicked:
  ```javascript
  $( "p" ).one( "click", function() {
    alert( $( this ).text() );
  });
  ```
    * @example ​ ````Event handlers will trigger once per element per event type
  ```html
  <!doctype html>
  <html lang="en">
  <head>
    <meta charset="utf-8">
    <title>one demo</title>
    <script src="https://code.jquery.com/jquery-3.3.1.js"></script>
  </head>
  <body>
  ​
  <div class="count">0</div>
  <div class="target">Hover/click me</div>
  ​
  <script>
  var n = 0;
  $(".target").one("click mouseenter", function() {
    $(".count").html(++n);
  });
  </script>
  ​
  </body>
  </html>
  ```
    */
  def one[TType /* <: String */](
    events: TType,
    handler: TypeEventHandler[TElement, js.UndefOr[scala.Nothing], TElement, TElement, TType]
  ): this.type = js.native
  /**
    * Attach a handler to an event for the elements. The handler is executed at most once per element per event type.
    * @param events One or more space-separated event types and optional namespaces, such as "click" or "keydown.myPlugin".
    * @param selector A selector string to filter the descendants of the selected elements that trigger the event. If the
    *                 selector is null or omitted, the event is always triggered when it reaches the selected element.
    * @param handler A function to execute when the event is triggered. The value false is also allowed as a shorthand
    *                for a function that simply does return false.
    * @see \`{@link https://api.jquery.com/one/ }\`
    * @since 1.7
    */
  def one[TType /* <: String */](
    events: TType,
    selector: Selector,
    handler: TypeEventHandler[TElement, js.UndefOr[scala.Nothing], _, _, TType]
  ): this.type = js.native
  /**
    * Attach a handler to an event for the elements. The handler is executed at most once per element per event type.
    * @param events An object in which the string keys represent one or more space-separated event types and optional
    *               namespaces, and the values represent a handler function to be called for the event(s).
    * @param data Data to be passed to the handler in event.data when an event occurs.
    * @see \`{@link https://api.jquery.com/one/ }\`
    * @since 1.7
    */
  def one[TData](events: TypeEventHandlers[TElement, TData, TElement, TElement], data: TData): this.type = js.native
  def one[TData](
    events: TypeEventHandlers[TElement, TData, TElement, TElement],
    selector: js.UndefOr[scala.Nothing],
    data: TData
  ): this.type = js.native
  /**
    * Attach a handler to an event for the elements. The handler is executed at most once per element per event type.
    * @param events An object in which the string keys represent one or more space-separated event types and optional
    *               namespaces, and the values represent a handler function to be called for the event(s).
    * @param selector A selector string to filter the descendants of the selected elements that will call the handler. If
    *                 the selector is null or omitted, the handler is always called when it reaches the selected element.
    * @param data Data to be passed to the handler in event.data when an event occurs.
    * @see \`{@link https://api.jquery.com/one/ }\`
    * @since 1.7
    */
  def one[TData](events: TypeEventHandlers[TElement, TData, TElement, TElement], selector: Null, data: TData): this.type = js.native
  /**
    * Attach a handler to an event for the elements. The handler is executed at most once per element per event type.
    * @param events An object in which the string keys represent one or more space-separated event types and optional
    *               namespaces, and the values represent a handler function to be called for the event(s).
    * @param selector A selector string to filter the descendants of the selected elements that will call the handler. If
    *                 the selector is null or omitted, the handler is always called when it reaches the selected element.
    * @param data Data to be passed to the handler in event.data when an event occurs.
    * @see \`{@link https://api.jquery.com/one/ }\`
    * @since 1.7
    */
  def one[TData](events: TypeEventHandlers[TElement, TData, _, _], selector: Selector, data: TData): this.type = js.native
  /**
    * Attach a handler to an event for the elements. The handler is executed at most once per element per event type.
    * @param events One or more space-separated event types and optional namespaces, such as "click" or "keydown.myPlugin".
    * @param data Data to be passed to the handler in event.data when an event is triggered.
    * @param handler A function to execute when the event is triggered.
    * @see \`{@link https://api.jquery.com/one/ }\`
    * @since 1.7
    */
  def one[TType /* <: String */, TData](events: TType, data: TData, handler: TypeEventHandler[TElement, TData, TElement, TElement, TType]): this.type = js.native
  def one[TType /* <: String */, TData](
    events: TType,
    selector: js.UndefOr[scala.Nothing],
    data: TData,
    handler: TypeEventHandler[TElement, TData, TElement, TElement, TType]
  ): this.type = js.native
  /**
    * Attach a handler to an event for the elements. The handler is executed at most once per element per event type.
    * @param events One or more space-separated event types and optional namespaces, such as "click" or "keydown.myPlugin".
    * @param selector A selector string to filter the descendants of the selected elements that trigger the event. If the
    *                 selector is null or omitted, the event is always triggered when it reaches the selected element.
    * @param data Data to be passed to the handler in event.data when an event is triggered.
    * @param handler A function to execute when the event is triggered.
    * @see \`{@link https://api.jquery.com/one/ }\`
    * @since 1.7
    */
  def one[TType /* <: String */, TData](
    events: TType,
    selector: Null,
    data: TData,
    handler: TypeEventHandler[TElement, TData, TElement, TElement, TType]
  ): this.type = js.native
  /**
    * Attach a handler to an event for the elements. The handler is executed at most once per element per event type.
    * @param events One or more space-separated event types and optional namespaces, such as "click" or "keydown.myPlugin".
    * @param selector A selector string to filter the descendants of the selected elements that trigger the event. If the
    *                 selector is null or omitted, the event is always triggered when it reaches the selected element.
    * @param data Data to be passed to the handler in event.data when an event is triggered.
    * @param handler A function to execute when the event is triggered.
    * @see \`{@link https://api.jquery.com/one/ }\`
    * @since 1.7
    */
  def one[TType /* <: String */, TData](
    events: TType,
    selector: Selector,
    data: TData,
    handler: TypeEventHandler[TElement, TData, _, _, TType]
  ): this.type = js.native
  @JSName("one")
  def one_false[TType /* <: String */](events: TType, handler: `false`): this.type = js.native
  @JSName("one")
  def one_false[TType /* <: String */](events: TType, selector: Selector, handler: `false`): this.type = js.native
  
  /**
    * Get the current computed outer height (including padding, border, and optionally margin) for the first element in the set of matched elements.
    * @param includeMargin A Boolean indicating whether to include the element's margin in the calculation.
    * @see \`{@link https://api.jquery.com/outerHeight/ }\`
    * @since 1.2.6
    * @example ​ ````Get the outerHeight of a paragraph.
  ```html
  <!doctype html>
  <html lang="en">
  <head>
    <meta charset="utf-8">
    <title>outerHeight demo</title>
    <style>
    p {
    margin: 10px;
    padding: 5px;
    border: 2px solid #666;
    }
    </style>
    <script src="https://code.jquery.com/jquery-3.3.1.js"></script>
  </head>
  <body>
  ​
  <p>Hello</p><p></p>
  ​
  <script>
  var p = $( "p:first" );
  $( "p:last" ).text(
    "outerHeight:" + p.outerHeight() +
    " , outerHeight( true ):" + p.outerHeight( true ) );
  </script>
  ​
  </body>
  </html>
  ```
    */
  def outerHeight(): js.UndefOr[Double] = js.native
  def outerHeight(includeMargin: Boolean): js.UndefOr[Double] = js.native
  /**
    * Set the CSS outer height of each element in the set of matched elements.
    * @param value_function _&#x40;param_ `value_function`
    * <br>
    * * `value` — A number representing the number of pixels, or a number along with an optional unit of measure
    *             appended (as a string). <br>
    * * `function` — A function returning the outer height to set. Receives the index position of the element in the set
    *                and the old outer height as arguments. Within the function, `this` refers to the current element in
    *                the set.
    * @see \`{@link https://api.jquery.com/outerHeight/ }\`
    * @since 1.8.0
    * @example ​ ````Change the outer height of each div the first time it is clicked (and change its color).
  ```html
  <!doctype html>
  <html lang="en">
  <head>
    <meta charset="utf-8">
    <title>outerHeight demo</title>
    <style>
    div {
    width: 50px;
    padding: 10px;
    height: 60px;
    float: left;
    margin: 5px;
    background: red;
    cursor: pointer;
    }
    .mod {
    background: blue;
    cursor: default;
    }
    </style>
    <script src="https://code.jquery.com/jquery-3.3.1.js"></script>
  </head>
  <body>
  ​
  <div>d</div>
  <div>d</div>
  <div>d</div>
  <div>d</div>
  <div>d</div>
  ​
  <script>
  var modHeight = 60;
  $( "div" ).one( "click", function() {
    $( this ).outerHeight( modHeight ).addClass( "mod" );
    modHeight -= 8;
  });
  </script>
  ​
  </body>
  </html>
  ```
    */
  def outerHeight(value_function: String): this.type = js.native
  def outerHeight(value_function: String, includeMargin: Boolean): this.type = js.native
  def outerHeight(
    value_function: js.ThisFunction2[/* this */ TElement, /* index */ Double, /* height */ Double, String | Double]
  ): this.type = js.native
  def outerHeight(
    value_function: js.ThisFunction2[/* this */ TElement, /* index */ Double, /* height */ Double, String | Double],
    includeMargin: Boolean
  ): this.type = js.native
  def outerHeight(value_function: Double): this.type = js.native
  def outerHeight(value_function: Double, includeMargin: Boolean): this.type = js.native
  
  /**
    * Get the current computed outer width (including padding, border, and optionally margin) for the first element in the set of matched elements.
    * @param includeMargin A Boolean indicating whether to include the element's margin in the calculation.
    * @see \`{@link https://api.jquery.com/outerWidth/ }\`
    * @since 1.2.6
    * @example ​ ````Get the outerWidth of a paragraph.
  ```html
  <!doctype html>
  <html lang="en">
  <head>
    <meta charset="utf-8">
    <title>outerWidth demo</title>
    <style>
    p {
    margin: 10px;
    padding: 5px;
    border: 2px solid #666;
    }
    </style>
    <script src="https://code.jquery.com/jquery-3.3.1.js"></script>
  </head>
  <body>
  ​
  <p>Hello</p><p></p>
  ​
  <script>
  var p = $( "p:first" );
  $( "p:last" ).text(
    "outerWidth:" + p.outerWidth() +
    " , outerWidth( true ):" + p.outerWidth( true ) );
  </script>
  ​
  </body>
  </html>
  ```
    */
  def outerWidth(): js.UndefOr[Double] = js.native
  def outerWidth(includeMargin: Boolean): js.UndefOr[Double] = js.native
  /**
    * Set the CSS outer width of each element in the set of matched elements.
    * @param value_function _&#x40;param_ `value_function`
    * <br>
    * * `value` — A number representing the number of pixels, or a number along with an optional unit of measure
    *             appended (as a string). <br>
    * * `function` — A function returning the outer width to set. Receives the index position of the element in the set
    *                and the old outer width as arguments. Within the function, `this` refers to the current element in
    *                the set.
    * @see \`{@link https://api.jquery.com/outerWidth/ }\`
    * @since 1.8.0
    * @example ​ ````Change the outer width of each div the first time it is clicked (and change its color).
  ```html
  <!doctype html>
  <html lang="en">
  <head>
    <meta charset="utf-8">
    <title>outerWidth demo</title>
    <style>
    div {
    width: 60px;
    padding: 10px;
    height: 50px;
    float: left;
    margin: 5px;
    background: red;
    cursor: pointer;
    }
    .mod {
    background: blue;
    cursor: default;
    }
    </style>
    <script src="https://code.jquery.com/jquery-3.3.1.js"></script>
  </head>
  <body>
  ​
  <div>d</div>
  <div>d</div>
  <div>d</div>
  <div>d</div>
  <div>d</div>
  ​
  <script>
  var modWidth = 60;
  $( "div" ).one( "click", function() {
    $( this ).outerWidth( modWidth ).addClass( "mod" );
    modWidth -= 8;
  });
  </script>
  ​
  </body>
  </html>
  ```
    */
  def outerWidth(value_function: String): this.type = js.native
  def outerWidth(value_function: String, includeMargin: Boolean): this.type = js.native
  def outerWidth(
    value_function: js.ThisFunction2[/* this */ TElement, /* index */ Double, /* width */ Double, String | Double]
  ): this.type = js.native
  def outerWidth(
    value_function: js.ThisFunction2[/* this */ TElement, /* index */ Double, /* width */ Double, String | Double],
    includeMargin: Boolean
  ): this.type = js.native
  def outerWidth(value_function: Double): this.type = js.native
  def outerWidth(value_function: Double, includeMargin: Boolean): this.type = js.native
  
  /**
    * Get the parent of each element in the current set of matched elements, optionally filtered by a selector.
    * @param selector A string containing a selector expression to match elements against.
    * @see \`{@link https://api.jquery.com/parent/ }\`
    * @since 1.0
    * @example ​ ````Shows the parent of each element as (parent &gt; child).  Check the View Source to see the raw html.
  ```html
  <!doctype html>
  <html lang="en">
  <head>
    <meta charset="utf-8">
    <title>parent demo</title>
    <style>
    div, p {
    margin: 10px;
    }
    </style>
    <script src="https://code.jquery.com/jquery-3.3.1.js"></script>
  </head>
  <body>
  ​
  <div>div,
    <span>span, </span>
    <b>b </b>
  </div>
  ​
  <p>p,
    <span>span,
    <em>em </em>
    </span>
  </p>
  ​
  <div>div,
    <strong>strong,
    <span>span, </span>
    <em>em,
    <b>b, </b>
    </em>
    </strong>
    <b>b </b>
  </div>
  ​
  <script>
  $( "*", document.body ).each(function() {
    var parentTag = $( this ).parent().get( 0 ).tagName;
    $( this ).prepend( document.createTextNode( parentTag + " > " ) );
  });
  </script>
  ​
  </body>
  </html>
  ```
    * @example ​ ````Find the parent element of each paragraph with a class &quot;selected&quot;.
  ```html
  <!doctype html>
  <html lang="en">
  <head>
    <meta charset="utf-8">
    <title>parent demo</title>
    <script src="https://code.jquery.com/jquery-3.3.1.js"></script>
  </head>
  <body>
  ​
  <div><p>Hello</p></div>
  <div class="selected"><p>Hello Again</p></div>
  ​
  <script>
  $( "p" ).parent( ".selected" ).css( "background", "yellow" );
  </script>
  ​
  </body>
  </html>
  ```
    */
  def parent(): this.type = js.native
  def parent(selector: Selector): this.type = js.native
  
  def parents(): this.type = js.native
  def parents(selector: Selector): this.type = js.native
  
  /**
    * Get the ancestors of each element in the current set of matched elements, up to but not including the element matched by the selector, DOM node, or jQuery object.
    * @param selector_element _&#x40;param_ `selector_element`
    * <br>
    * * `selector` — A string containing a selector expression to indicate where to stop matching ancestor elements. <br>
    * * `element` — A DOM node or jQuery object indicating where to stop matching ancestor elements.
    * @param filter A string containing a selector expression to match elements against.
    * @see \`{@link https://api.jquery.com/parentsUntil/ }\`
    * @since 1.4
    * @since 1.6
    * @example ​ ````Find the ancestors of &lt;li class=&quot;item-a&quot;&gt; up to &lt;ul class=&quot;level-1&quot;&gt; and give them a red background color. Also, find ancestors of &lt;li class=&quot;item-2&quot;&gt; that have a class of &quot;yes&quot; up to &lt;ul class=&quot;level-1&quot;&gt; and give them a green border.
  ```html
  <!doctype html>
  <html lang="en">
  <head>
    <meta charset="utf-8">
    <title>parentsUntil demo</title>
    <script src="https://code.jquery.com/jquery-3.3.1.js"></script>
  </head>
  <body>
  ​
  <ul class="level-1 yes">
    <li class="item-i">I</li>
    <li class="item-ii">II
    <ul class="level-2 yes">
    <li class="item-a">A</li>
    <li class="item-b">B
    <ul class="level-3">
    <li class="item-1">1</li>
    <li class="item-2">2</li>
    <li class="item-3">3</li>
    </ul>
    </li>
    <li class="item-c">C</li>
    </ul>
    </li>
    <li class="item-iii">III</li>
  </ul>
  ​
  <script>
  $( "li.item-a" )
    .parentsUntil( ".level-1" )
    .css( "background-color", "red" );
  ​
  $( "li.item-2" )
    .parentsUntil( $( "ul.level-1" ), ".yes" )
    .css( "border", "3px solid green" );
  </script>
  ​
  </body>
  </html>
  ```
    */
  def parentsUntil(): this.type = js.native
  def parentsUntil(selector_element: js.UndefOr[scala.Nothing], filter: Selector): this.type = js.native
  def parentsUntil(selector_element: Element): this.type = js.native
  def parentsUntil(selector_element: Element, filter: Selector): this.type = js.native
  def parentsUntil(selector_element: JQuery[HTMLElement]): this.type = js.native
  def parentsUntil(selector_element: Selector): this.type = js.native
  def parentsUntil(selector_element: Selector, filter: Selector): this.type = js.native
  def parentsUntil(selector_element: JQuery[HTMLElement], filter: Selector): this.type = js.native
  
  @JSName("parents")
  def parents_a(selector: JQuery[a]): JQuery[HTMLAnchorElement] = js.native
  /**
    * Get the ancestors of each element in the current set of matched elements, optionally filtered by a selector.
    * @param selector A string containing a selector expression to match elements against.
    * @see \`{@link https://api.jquery.com/parents/ }\`
    * @since 1.0
    * @example ​ ````Find all parent elements of each b.
  ```html
  <!doctype html>
  <html lang="en">
  <head>
    <meta charset="utf-8">
    <title>parents demo</title>
    <style>
    b, span, p, html body {
    padding: .5em;
    border: 1px solid;
    }
    b {
    color: blue;
    }
    strong {
    color: red;
    }
    </style>
    <script src="https://code.jquery.com/jquery-3.3.1.js"></script>
  </head>
  <body>
  ​
  <div>
    <p>
    <span>
    <b>My parents are: </b>
    </span>
    </p>
  </div>
  ​
  <script>
  var parentEls = $( "b" ).parents()
    .map(function() {
    return this.tagName;
    })
    .get()
    .join( ", " );
  $( "b" ).append( "<strong>" + parentEls + "</strong>" );
  </script>
  ​
  </body>
  </html>
  ```
    * @example ​ ````Click to find all unique div parent elements of each span.
  ```html
  <!doctype html>
  <html lang="en">
  <head>
    <meta charset="utf-8">
    <title>parents demo</title>
    <style>
    p, div, span {
    margin: 2px;
    padding: 1px;
    }
    div {
    border: 2px white solid;
    }
    span {
    cursor: pointer;
    font-size: 12px;
    }
    .selected {
    color: blue;
    }
    b {
    color: red;
    display: block;
    font-size: 14px;
    }
    </style>
    <script src="https://code.jquery.com/jquery-3.3.1.js"></script>
  </head>
  <body>
  ​
  <p>
    <div>
    <div><span>Hello</span></div>
    <span>Hello Again</span>
    </div>
    <div>
    <span>And Hello Again</span>
    </div>
    </p>
    <b>Click Hellos to toggle their parents.</b>
  ​
  <script>
  function showParents() {
    $( "div" ).css( "border-color", "white" );
    var len = $( "span.selected" )
    .parents( "div" )
    .css( "border", "2px red solid" )
    .length;
    $( "b" ).text( "Unique div parents: " + len );
  }
  $( "span" ).click(function() {
    $( this ).toggleClass( "selected" );
    showParents();
  });
  </script>
  ​
  </body>
  </html>
  ```
    */
  @JSName("parents")
  def parents_a(selector: a): JQuery[HTMLAnchorElement] = js.native
  @JSName("parents")
  def parents_abbr(selector: JQuery[abbr]): JQuery[HTMLElement] = js.native
  @JSName("parents")
  def parents_abbr(selector: abbr): JQuery[HTMLElement] = js.native
  @JSName("parents")
  def parents_address(selector: JQuery[address]): JQuery[HTMLElement] = js.native
  @JSName("parents")
  def parents_address(selector: address): JQuery[HTMLElement] = js.native
  @JSName("parents")
  def parents_applet(selector: JQuery[applet]): JQuery[HTMLAppletElement] = js.native
  @JSName("parents")
  def parents_applet(selector: applet): JQuery[HTMLAppletElement] = js.native
  @JSName("parents")
  def parents_area(selector: JQuery[area]): JQuery[HTMLAreaElement] = js.native
  @JSName("parents")
  def parents_area(selector: area): JQuery[HTMLAreaElement] = js.native
  @JSName("parents")
  def parents_article(selector: JQuery[article]): JQuery[HTMLElement] = js.native
  @JSName("parents")
  def parents_article(selector: article): JQuery[HTMLElement] = js.native
  @JSName("parents")
  def parents_aside(selector: JQuery[aside]): JQuery[HTMLElement] = js.native
  @JSName("parents")
  def parents_aside(selector: aside): JQuery[HTMLElement] = js.native
  @JSName("parents")
  def parents_audio(selector: JQuery[audio]): JQuery[HTMLAudioElement] = js.native
  @JSName("parents")
  def parents_audio(selector: audio): JQuery[HTMLAudioElement] = js.native
  @JSName("parents")
  def parents_b(selector: JQuery[b]): JQuery[HTMLElement] = js.native
  @JSName("parents")
  def parents_b(selector: b): JQuery[HTMLElement] = js.native
  @JSName("parents")
  def parents_base(selector: JQuery[base]): JQuery[HTMLBaseElement] = js.native
  @JSName("parents")
  def parents_base(selector: base): JQuery[HTMLBaseElement] = js.native
  @JSName("parents")
  def parents_basefont(selector: JQuery[basefont]): JQuery[HTMLBaseFontElement] = js.native
  @JSName("parents")
  def parents_basefont(selector: basefont): JQuery[HTMLBaseFontElement] = js.native
  @JSName("parents")
  def parents_bdi(selector: JQuery[bdi]): JQuery[HTMLElement] = js.native
  @JSName("parents")
  def parents_bdi(selector: bdi): JQuery[HTMLElement] = js.native
  @JSName("parents")
  def parents_bdo(selector: JQuery[bdo]): JQuery[HTMLElement] = js.native
  @JSName("parents")
  def parents_bdo(selector: bdo): JQuery[HTMLElement] = js.native
  @JSName("parents")
  def parents_blockquote(selector: JQuery[blockquote]): JQuery[HTMLQuoteElement] = js.native
  @JSName("parents")
  def parents_blockquote(selector: blockquote): JQuery[HTMLQuoteElement] = js.native
  @JSName("parents")
  def parents_body(selector: JQuery[body]): JQuery[HTMLBodyElement] = js.native
  @JSName("parents")
  def parents_body(selector: body): JQuery[HTMLBodyElement] = js.native
  @JSName("parents")
  def parents_br(selector: JQuery[br]): JQuery[HTMLBRElement] = js.native
  @JSName("parents")
  def parents_br(selector: br): JQuery[HTMLBRElement] = js.native
  @JSName("parents")
  def parents_button(selector: JQuery[button]): JQuery[HTMLButtonElement] = js.native
  @JSName("parents")
  def parents_button(selector: button): JQuery[HTMLButtonElement] = js.native
  @JSName("parents")
  def parents_canvas(selector: JQuery[canvas]): JQuery[HTMLCanvasElement] = js.native
  @JSName("parents")
  def parents_canvas(selector: canvas): JQuery[HTMLCanvasElement] = js.native
  @JSName("parents")
  def parents_caption(selector: JQuery[caption]): JQuery[HTMLTableCaptionElement] = js.native
  @JSName("parents")
  def parents_caption(selector: caption): JQuery[HTMLTableCaptionElement] = js.native
  @JSName("parents")
  def parents_circle(selector: JQuery[circle]): JQuery[SVGCircleElement] = js.native
  @JSName("parents")
  def parents_circle(selector: circle): JQuery[SVGCircleElement] = js.native
  @JSName("parents")
  def parents_cite(selector: JQuery[cite]): JQuery[HTMLElement] = js.native
  @JSName("parents")
  def parents_cite(selector: cite): JQuery[HTMLElement] = js.native
  @JSName("parents")
  def parents_clipPath(selector: JQuery[clipPath]): JQuery[SVGClipPathElement] = js.native
  @JSName("parents")
  def parents_clipPath(selector: clipPath): JQuery[SVGClipPathElement] = js.native
  @JSName("parents")
  def parents_code(selector: JQuery[code]): JQuery[HTMLElement] = js.native
  @JSName("parents")
  def parents_code(selector: code): JQuery[HTMLElement] = js.native
  @JSName("parents")
  def parents_col(selector: JQuery[col]): JQuery[HTMLTableColElement] = js.native
  @JSName("parents")
  def parents_col(selector: col): JQuery[HTMLTableColElement] = js.native
  @JSName("parents")
  def parents_colgroup(selector: JQuery[colgroup]): JQuery[HTMLTableColElement] = js.native
  @JSName("parents")
  def parents_colgroup(selector: colgroup): JQuery[HTMLTableColElement] = js.native
  @JSName("parents")
  def parents_data(selector: JQuery[data]): JQuery[HTMLDataElement] = js.native
  @JSName("parents")
  def parents_data(selector: data): JQuery[HTMLDataElement] = js.native
  @JSName("parents")
  def parents_datalist(selector: JQuery[datalist]): JQuery[HTMLDataListElement] = js.native
  @JSName("parents")
  def parents_datalist(selector: datalist): JQuery[HTMLDataListElement] = js.native
  @JSName("parents")
  def parents_dd(selector: JQuery[dd]): JQuery[HTMLElement] = js.native
  @JSName("parents")
  def parents_dd(selector: dd): JQuery[HTMLElement] = js.native
  @JSName("parents")
  def parents_defs(selector: JQuery[defs]): JQuery[SVGDefsElement] = js.native
  @JSName("parents")
  def parents_defs(selector: defs): JQuery[SVGDefsElement] = js.native
  @JSName("parents")
  def parents_del(selector: JQuery[del]): JQuery[HTMLModElement] = js.native
  @JSName("parents")
  def parents_del(selector: del): JQuery[HTMLModElement] = js.native
  @JSName("parents")
  def parents_desc(selector: JQuery[desc]): JQuery[SVGDescElement] = js.native
  @JSName("parents")
  def parents_desc(selector: desc): JQuery[SVGDescElement] = js.native
  @JSName("parents")
  def parents_details(selector: JQuery[details]): JQuery[HTMLDetailsElement] = js.native
  @JSName("parents")
  def parents_details(selector: details): JQuery[HTMLDetailsElement] = js.native
  @JSName("parents")
  def parents_dfn(selector: JQuery[dfn]): JQuery[HTMLElement] = js.native
  @JSName("parents")
  def parents_dfn(selector: dfn): JQuery[HTMLElement] = js.native
  @JSName("parents")
  def parents_dialog(selector: JQuery[dialog]): JQuery[HTMLDialogElement] = js.native
  @JSName("parents")
  def parents_dialog(selector: dialog): JQuery[HTMLDialogElement] = js.native
  @JSName("parents")
  def parents_dir(selector: JQuery[dir]): JQuery[HTMLDirectoryElement] = js.native
  @JSName("parents")
  def parents_dir(selector: dir): JQuery[HTMLDirectoryElement] = js.native
  @JSName("parents")
  def parents_div(selector: JQuery[div]): JQuery[HTMLDivElement] = js.native
  @JSName("parents")
  def parents_div(selector: div): JQuery[HTMLDivElement] = js.native
  @JSName("parents")
  def parents_dl(selector: JQuery[dl]): JQuery[HTMLDListElement] = js.native
  @JSName("parents")
  def parents_dl(selector: dl): JQuery[HTMLDListElement] = js.native
  @JSName("parents")
  def parents_dt(selector: JQuery[dt]): JQuery[HTMLElement] = js.native
  @JSName("parents")
  def parents_dt(selector: dt): JQuery[HTMLElement] = js.native
  @JSName("parents")
  def parents_ellipse(selector: JQuery[ellipse]): JQuery[SVGEllipseElement] = js.native
  @JSName("parents")
  def parents_ellipse(selector: ellipse): JQuery[SVGEllipseElement] = js.native
  @JSName("parents")
  def parents_em(selector: JQuery[em]): JQuery[HTMLElement] = js.native
  @JSName("parents")
  def parents_em(selector: em): JQuery[HTMLElement] = js.native
  @JSName("parents")
  def parents_embed(selector: JQuery[embed]): JQuery[HTMLEmbedElement] = js.native
  @JSName("parents")
  def parents_embed(selector: embed): JQuery[HTMLEmbedElement] = js.native
  @JSName("parents")
  def parents_feBlend(selector: JQuery[feBlend]): JQuery[SVGFEBlendElement] = js.native
  @JSName("parents")
  def parents_feBlend(selector: feBlend): JQuery[SVGFEBlendElement] = js.native
  @JSName("parents")
  def parents_feColorMatrix(selector: JQuery[feColorMatrix]): JQuery[SVGFEColorMatrixElement] = js.native
  @JSName("parents")
  def parents_feColorMatrix(selector: feColorMatrix): JQuery[SVGFEColorMatrixElement] = js.native
  @JSName("parents")
  def parents_feComponentTransfer(selector: JQuery[feComponentTransfer]): JQuery[SVGFEComponentTransferElement] = js.native
  @JSName("parents")
  def parents_feComponentTransfer(selector: feComponentTransfer): JQuery[SVGFEComponentTransferElement] = js.native
  @JSName("parents")
  def parents_feComposite(selector: JQuery[feComposite]): JQuery[SVGFECompositeElement] = js.native
  @JSName("parents")
  def parents_feComposite(selector: feComposite): JQuery[SVGFECompositeElement] = js.native
  @JSName("parents")
  def parents_feConvolveMatrix(selector: JQuery[feConvolveMatrix]): JQuery[SVGFEConvolveMatrixElement] = js.native
  @JSName("parents")
  def parents_feConvolveMatrix(selector: feConvolveMatrix): JQuery[SVGFEConvolveMatrixElement] = js.native
  @JSName("parents")
  def parents_feDiffuseLighting(selector: JQuery[feDiffuseLighting]): JQuery[SVGFEDiffuseLightingElement] = js.native
  @JSName("parents")
  def parents_feDiffuseLighting(selector: feDiffuseLighting): JQuery[SVGFEDiffuseLightingElement] = js.native
  @JSName("parents")
  def parents_feDisplacementMap(selector: JQuery[feDisplacementMap]): JQuery[SVGFEDisplacementMapElement] = js.native
  @JSName("parents")
  def parents_feDisplacementMap(selector: feDisplacementMap): JQuery[SVGFEDisplacementMapElement] = js.native
  @JSName("parents")
  def parents_feDistantLight(selector: JQuery[feDistantLight]): JQuery[SVGFEDistantLightElement] = js.native
  @JSName("parents")
  def parents_feDistantLight(selector: feDistantLight): JQuery[SVGFEDistantLightElement] = js.native
  @JSName("parents")
  def parents_feFlood(selector: JQuery[feFlood]): JQuery[SVGFEFloodElement] = js.native
  @JSName("parents")
  def parents_feFlood(selector: feFlood): JQuery[SVGFEFloodElement] = js.native
  @JSName("parents")
  def parents_feFuncA(selector: JQuery[feFuncA]): JQuery[SVGFEFuncAElement] = js.native
  @JSName("parents")
  def parents_feFuncA(selector: feFuncA): JQuery[SVGFEFuncAElement] = js.native
  @JSName("parents")
  def parents_feFuncB(selector: JQuery[feFuncB]): JQuery[SVGFEFuncBElement] = js.native
  @JSName("parents")
  def parents_feFuncB(selector: feFuncB): JQuery[SVGFEFuncBElement] = js.native
  @JSName("parents")
  def parents_feFuncG(selector: JQuery[feFuncG]): JQuery[SVGFEFuncGElement] = js.native
  @JSName("parents")
  def parents_feFuncG(selector: feFuncG): JQuery[SVGFEFuncGElement] = js.native
  @JSName("parents")
  def parents_feFuncR(selector: JQuery[feFuncR]): JQuery[SVGFEFuncRElement] = js.native
  @JSName("parents")
  def parents_feFuncR(selector: feFuncR): JQuery[SVGFEFuncRElement] = js.native
  @JSName("parents")
  def parents_feGaussianBlur(selector: JQuery[feGaussianBlur]): JQuery[SVGFEGaussianBlurElement] = js.native
  @JSName("parents")
  def parents_feGaussianBlur(selector: feGaussianBlur): JQuery[SVGFEGaussianBlurElement] = js.native
  @JSName("parents")
  def parents_feImage(selector: JQuery[feImage]): JQuery[SVGFEImageElement] = js.native
  @JSName("parents")
  def parents_feImage(selector: feImage): JQuery[SVGFEImageElement] = js.native
  @JSName("parents")
  def parents_feMerge(selector: JQuery[feMerge]): JQuery[SVGFEMergeElement] = js.native
  @JSName("parents")
  def parents_feMerge(selector: feMerge): JQuery[SVGFEMergeElement] = js.native
  @JSName("parents")
  def parents_feMergeNode(selector: JQuery[feMergeNode]): JQuery[SVGFEMergeNodeElement] = js.native
  @JSName("parents")
  def parents_feMergeNode(selector: feMergeNode): JQuery[SVGFEMergeNodeElement] = js.native
  @JSName("parents")
  def parents_feMorphology(selector: JQuery[feMorphology]): JQuery[SVGFEMorphologyElement] = js.native
  @JSName("parents")
  def parents_feMorphology(selector: feMorphology): JQuery[SVGFEMorphologyElement] = js.native
  @JSName("parents")
  def parents_feOffset(selector: JQuery[feOffset]): JQuery[SVGFEOffsetElement] = js.native
  @JSName("parents")
  def parents_feOffset(selector: feOffset): JQuery[SVGFEOffsetElement] = js.native
  @JSName("parents")
  def parents_fePointLight(selector: JQuery[fePointLight]): JQuery[SVGFEPointLightElement] = js.native
  @JSName("parents")
  def parents_fePointLight(selector: fePointLight): JQuery[SVGFEPointLightElement] = js.native
  @JSName("parents")
  def parents_feSpecularLighting(selector: JQuery[feSpecularLighting]): JQuery[SVGFESpecularLightingElement] = js.native
  @JSName("parents")
  def parents_feSpecularLighting(selector: feSpecularLighting): JQuery[SVGFESpecularLightingElement] = js.native
  @JSName("parents")
  def parents_feSpotLight(selector: JQuery[feSpotLight]): JQuery[SVGFESpotLightElement] = js.native
  @JSName("parents")
  def parents_feSpotLight(selector: feSpotLight): JQuery[SVGFESpotLightElement] = js.native
  @JSName("parents")
  def parents_feTile(selector: JQuery[feTile]): JQuery[SVGFETileElement] = js.native
  @JSName("parents")
  def parents_feTile(selector: feTile): JQuery[SVGFETileElement] = js.native
  @JSName("parents")
  def parents_feTurbulence(selector: JQuery[feTurbulence]): JQuery[SVGFETurbulenceElement] = js.native
  @JSName("parents")
  def parents_feTurbulence(selector: feTurbulence): JQuery[SVGFETurbulenceElement] = js.native
  @JSName("parents")
  def parents_fieldset(selector: JQuery[fieldset]): JQuery[HTMLFieldSetElement] = js.native
  @JSName("parents")
  def parents_fieldset(selector: fieldset): JQuery[HTMLFieldSetElement] = js.native
  @JSName("parents")
  def parents_figcaption(selector: JQuery[figcaption]): JQuery[HTMLElement] = js.native
  @JSName("parents")
  def parents_figcaption(selector: figcaption): JQuery[HTMLElement] = js.native
  @JSName("parents")
  def parents_figure(selector: JQuery[figure]): JQuery[HTMLElement] = js.native
  @JSName("parents")
  def parents_figure(selector: figure): JQuery[HTMLElement] = js.native
  @JSName("parents")
  def parents_filter(selector: JQuery[filter]): JQuery[SVGFilterElement] = js.native
  @JSName("parents")
  def parents_filter(selector: filter): JQuery[SVGFilterElement] = js.native
  @JSName("parents")
  def parents_font(selector: JQuery[font]): JQuery[HTMLFontElement] = js.native
  @JSName("parents")
  def parents_font(selector: font): JQuery[HTMLFontElement] = js.native
  @JSName("parents")
  def parents_footer(selector: JQuery[footer]): JQuery[HTMLElement] = js.native
  @JSName("parents")
  def parents_footer(selector: footer): JQuery[HTMLElement] = js.native
  @JSName("parents")
  def parents_foreignObject(selector: JQuery[foreignObject]): JQuery[SVGForeignObjectElement] = js.native
  @JSName("parents")
  def parents_foreignObject(selector: foreignObject): JQuery[SVGForeignObjectElement] = js.native
  @JSName("parents")
  def parents_form(selector: JQuery[form]): JQuery[HTMLFormElement] = js.native
  @JSName("parents")
  def parents_form(selector: form): JQuery[HTMLFormElement] = js.native
  @JSName("parents")
  def parents_frame(selector: JQuery[frame]): JQuery[HTMLFrameElement] = js.native
  @JSName("parents")
  def parents_frame(selector: frame): JQuery[HTMLFrameElement] = js.native
  @JSName("parents")
  def parents_frameset(selector: JQuery[frameset]): JQuery[HTMLFrameSetElement] = js.native
  @JSName("parents")
  def parents_frameset(selector: frameset): JQuery[HTMLFrameSetElement] = js.native
  @JSName("parents")
  def parents_g(selector: JQuery[g]): JQuery[SVGGElement] = js.native
  @JSName("parents")
  def parents_g(selector: g): JQuery[SVGGElement] = js.native
  @JSName("parents")
  def parents_h1(selector: JQuery[h1]): JQuery[HTMLHeadingElement] = js.native
  @JSName("parents")
  def parents_h1(selector: h1): JQuery[HTMLHeadingElement] = js.native
  @JSName("parents")
  def parents_h2(selector: JQuery[h2]): JQuery[HTMLHeadingElement] = js.native
  @JSName("parents")
  def parents_h2(selector: h2): JQuery[HTMLHeadingElement] = js.native
  @JSName("parents")
  def parents_h3(selector: JQuery[h3]): JQuery[HTMLHeadingElement] = js.native
  @JSName("parents")
  def parents_h3(selector: h3): JQuery[HTMLHeadingElement] = js.native
  @JSName("parents")
  def parents_h4(selector: JQuery[h4]): JQuery[HTMLHeadingElement] = js.native
  @JSName("parents")
  def parents_h4(selector: h4): JQuery[HTMLHeadingElement] = js.native
  @JSName("parents")
  def parents_h5(selector: JQuery[h5]): JQuery[HTMLHeadingElement] = js.native
  @JSName("parents")
  def parents_h5(selector: h5): JQuery[HTMLHeadingElement] = js.native
  @JSName("parents")
  def parents_h6(selector: JQuery[h6]): JQuery[HTMLHeadingElement] = js.native
  @JSName("parents")
  def parents_h6(selector: h6): JQuery[HTMLHeadingElement] = js.native
  @JSName("parents")
  def parents_head(selector: JQuery[head]): JQuery[HTMLHeadElement] = js.native
  @JSName("parents")
  def parents_head(selector: head): JQuery[HTMLHeadElement] = js.native
  @JSName("parents")
  def parents_header(selector: JQuery[header]): JQuery[HTMLElement] = js.native
  @JSName("parents")
  def parents_header(selector: header): JQuery[HTMLElement] = js.native
  @JSName("parents")
  def parents_hgroup(selector: JQuery[hgroup]): JQuery[HTMLElement] = js.native
  @JSName("parents")
  def parents_hgroup(selector: hgroup): JQuery[HTMLElement] = js.native
  @JSName("parents")
  def parents_hr(selector: JQuery[hr]): JQuery[HTMLHRElement] = js.native
  @JSName("parents")
  def parents_hr(selector: hr): JQuery[HTMLHRElement] = js.native
  @JSName("parents")
  def parents_html(selector: JQuery[html]): JQuery[HTMLHtmlElement] = js.native
  @JSName("parents")
  def parents_html(selector: html): JQuery[HTMLHtmlElement] = js.native
  @JSName("parents")
  def parents_i(selector: JQuery[i]): JQuery[HTMLElement] = js.native
  @JSName("parents")
  def parents_i(selector: i): JQuery[HTMLElement] = js.native
  @JSName("parents")
  def parents_iframe(selector: JQuery[iframe]): JQuery[HTMLIFrameElement] = js.native
  @JSName("parents")
  def parents_iframe(selector: iframe): JQuery[HTMLIFrameElement] = js.native
  @JSName("parents")
  def parents_image(selector: JQuery[image]): JQuery[SVGImageElement] = js.native
  @JSName("parents")
  def parents_image(selector: image): JQuery[SVGImageElement] = js.native
  @JSName("parents")
  def parents_img(selector: JQuery[img]): JQuery[HTMLImageElement] = js.native
  @JSName("parents")
  def parents_img(selector: img): JQuery[HTMLImageElement] = js.native
  @JSName("parents")
  def parents_input(selector: JQuery[input]): JQuery[HTMLInputElement] = js.native
  @JSName("parents")
  def parents_input(selector: input): JQuery[HTMLInputElement] = js.native
  @JSName("parents")
  def parents_ins(selector: JQuery[ins]): JQuery[HTMLModElement] = js.native
  @JSName("parents")
  def parents_ins(selector: ins): JQuery[HTMLModElement] = js.native
  @JSName("parents")
  def parents_kbd(selector: JQuery[kbd]): JQuery[HTMLElement] = js.native
  @JSName("parents")
  def parents_kbd(selector: kbd): JQuery[HTMLElement] = js.native
  @JSName("parents")
  def parents_label(selector: JQuery[label]): JQuery[HTMLLabelElement] = js.native
  @JSName("parents")
  def parents_label(selector: label): JQuery[HTMLLabelElement] = js.native
  @JSName("parents")
  def parents_legend(selector: JQuery[legend]): JQuery[HTMLLegendElement] = js.native
  @JSName("parents")
  def parents_legend(selector: legend): JQuery[HTMLLegendElement] = js.native
  @JSName("parents")
  def parents_li(selector: JQuery[li]): JQuery[HTMLLIElement] = js.native
  @JSName("parents")
  def parents_li(selector: li): JQuery[HTMLLIElement] = js.native
  @JSName("parents")
  def parents_line(selector: JQuery[line]): JQuery[SVGLineElement] = js.native
  @JSName("parents")
  def parents_line(selector: line): JQuery[SVGLineElement] = js.native
  @JSName("parents")
  def parents_linearGradient(selector: JQuery[linearGradient]): JQuery[SVGLinearGradientElement] = js.native
  @JSName("parents")
  def parents_linearGradient(selector: linearGradient): JQuery[SVGLinearGradientElement] = js.native
  @JSName("parents")
  def parents_link(selector: JQuery[link]): JQuery[HTMLLinkElement] = js.native
  @JSName("parents")
  def parents_link(selector: link): JQuery[HTMLLinkElement] = js.native
  @JSName("parents")
  def parents_main(selector: JQuery[main]): JQuery[HTMLElement] = js.native
  @JSName("parents")
  def parents_main(selector: main): JQuery[HTMLElement] = js.native
  @JSName("parents")
  def parents_map(selector: JQuery[map]): JQuery[HTMLMapElement] = js.native
  @JSName("parents")
  def parents_map(selector: map): JQuery[HTMLMapElement] = js.native
  @JSName("parents")
  def parents_mark(selector: JQuery[mark]): JQuery[HTMLElement] = js.native
  @JSName("parents")
  def parents_mark(selector: mark): JQuery[HTMLElement] = js.native
  @JSName("parents")
  def parents_marker(selector: JQuery[marker]): JQuery[SVGMarkerElement] = js.native
  @JSName("parents")
  def parents_marker(selector: marker): JQuery[SVGMarkerElement] = js.native
  @JSName("parents")
  def parents_marquee(selector: JQuery[marquee]): JQuery[HTMLMarqueeElement] = js.native
  @JSName("parents")
  def parents_marquee(selector: marquee): JQuery[HTMLMarqueeElement] = js.native
  @JSName("parents")
  def parents_mask(selector: JQuery[mask]): JQuery[SVGMaskElement] = js.native
  @JSName("parents")
  def parents_mask(selector: mask): JQuery[SVGMaskElement] = js.native
  @JSName("parents")
  def parents_menu(selector: JQuery[menu]): JQuery[HTMLMenuElement] = js.native
  @JSName("parents")
  def parents_menu(selector: menu): JQuery[HTMLMenuElement] = js.native
  @JSName("parents")
  def parents_meta(selector: JQuery[meta]): JQuery[HTMLMetaElement] = js.native
  @JSName("parents")
  def parents_meta(selector: meta): JQuery[HTMLMetaElement] = js.native
  @JSName("parents")
  def parents_metadata(selector: JQuery[metadata]): JQuery[SVGMetadataElement] = js.native
  @JSName("parents")
  def parents_metadata(selector: metadata): JQuery[SVGMetadataElement] = js.native
  @JSName("parents")
  def parents_meter(selector: JQuery[meter]): JQuery[HTMLMeterElement] = js.native
  @JSName("parents")
  def parents_meter(selector: meter): JQuery[HTMLMeterElement] = js.native
  @JSName("parents")
  def parents_nav(selector: JQuery[nav]): JQuery[HTMLElement] = js.native
  @JSName("parents")
  def parents_nav(selector: nav): JQuery[HTMLElement] = js.native
  @JSName("parents")
  def parents_noscript(selector: JQuery[noscript]): JQuery[HTMLElement] = js.native
  @JSName("parents")
  def parents_noscript(selector: noscript): JQuery[HTMLElement] = js.native
  @JSName("parents")
  def parents_object(selector: JQuery[`object`]): JQuery[HTMLObjectElement] = js.native
  @JSName("parents")
  def parents_object(selector: `object`): JQuery[HTMLObjectElement] = js.native
  @JSName("parents")
  def parents_ol(selector: JQuery[ol]): JQuery[HTMLOListElement] = js.native
  @JSName("parents")
  def parents_ol(selector: ol): JQuery[HTMLOListElement] = js.native
  @JSName("parents")
  def parents_optgroup(selector: JQuery[optgroup]): JQuery[HTMLOptGroupElement] = js.native
  @JSName("parents")
  def parents_optgroup(selector: optgroup): JQuery[HTMLOptGroupElement] = js.native
  @JSName("parents")
  def parents_option(selector: JQuery[option]): JQuery[HTMLOptionElement] = js.native
  @JSName("parents")
  def parents_option(selector: option): JQuery[HTMLOptionElement] = js.native
  @JSName("parents")
  def parents_output(selector: JQuery[output]): JQuery[HTMLOutputElement] = js.native
  @JSName("parents")
  def parents_output(selector: output): JQuery[HTMLOutputElement] = js.native
  @JSName("parents")
  def parents_p(selector: JQuery[p]): JQuery[HTMLParagraphElement] = js.native
  @JSName("parents")
  def parents_p(selector: p): JQuery[HTMLParagraphElement] = js.native
  @JSName("parents")
  def parents_param(selector: JQuery[param]): JQuery[HTMLParamElement] = js.native
  @JSName("parents")
  def parents_param(selector: param): JQuery[HTMLParamElement] = js.native
  @JSName("parents")
  def parents_path(selector: JQuery[path]): JQuery[SVGPathElement] = js.native
  @JSName("parents")
  def parents_path(selector: path): JQuery[SVGPathElement] = js.native
  @JSName("parents")
  def parents_pattern(selector: JQuery[pattern]): JQuery[SVGPatternElement] = js.native
  @JSName("parents")
  def parents_pattern(selector: pattern): JQuery[SVGPatternElement] = js.native
  @JSName("parents")
  def parents_picture(selector: JQuery[picture]): JQuery[HTMLPictureElement] = js.native
  @JSName("parents")
  def parents_picture(selector: picture): JQuery[HTMLPictureElement] = js.native
  @JSName("parents")
  def parents_polygon(selector: JQuery[polygon]): JQuery[SVGPolygonElement] = js.native
  @JSName("parents")
  def parents_polygon(selector: polygon): JQuery[SVGPolygonElement] = js.native
  @JSName("parents")
  def parents_polyline(selector: JQuery[polyline]): JQuery[SVGPolylineElement] = js.native
  @JSName("parents")
  def parents_polyline(selector: polyline): JQuery[SVGPolylineElement] = js.native
  @JSName("parents")
  def parents_pre(selector: JQuery[pre]): JQuery[HTMLPreElement] = js.native
  @JSName("parents")
  def parents_pre(selector: pre): JQuery[HTMLPreElement] = js.native
  @JSName("parents")
  def parents_progress(selector: JQuery[progress]): JQuery[HTMLProgressElement] = js.native
  @JSName("parents")
  def parents_progress(selector: progress): JQuery[HTMLProgressElement] = js.native
  @JSName("parents")
  def parents_q(selector: JQuery[q]): JQuery[HTMLQuoteElement] = js.native
  @JSName("parents")
  def parents_q(selector: q): JQuery[HTMLQuoteElement] = js.native
  @JSName("parents")
  def parents_radialGradient(selector: JQuery[radialGradient]): JQuery[SVGRadialGradientElement] = js.native
  @JSName("parents")
  def parents_radialGradient(selector: radialGradient): JQuery[SVGRadialGradientElement] = js.native
  @JSName("parents")
  def parents_rect(selector: JQuery[rect]): JQuery[SVGRectElement] = js.native
  @JSName("parents")
  def parents_rect(selector: rect): JQuery[SVGRectElement] = js.native
  @JSName("parents")
  def parents_rp(selector: JQuery[rp]): JQuery[HTMLElement] = js.native
  @JSName("parents")
  def parents_rp(selector: rp): JQuery[HTMLElement] = js.native
  @JSName("parents")
  def parents_rt(selector: JQuery[rt]): JQuery[HTMLElement] = js.native
  @JSName("parents")
  def parents_rt(selector: rt): JQuery[HTMLElement] = js.native
  @JSName("parents")
  def parents_ruby(selector: JQuery[ruby]): JQuery[HTMLElement] = js.native
  @JSName("parents")
  def parents_ruby(selector: ruby): JQuery[HTMLElement] = js.native
  @JSName("parents")
  def parents_s(selector: JQuery[s]): JQuery[HTMLElement] = js.native
  @JSName("parents")
  def parents_s(selector: s): JQuery[HTMLElement] = js.native
  @JSName("parents")
  def parents_samp(selector: JQuery[samp]): JQuery[HTMLElement] = js.native
  @JSName("parents")
  def parents_samp(selector: samp): JQuery[HTMLElement] = js.native
  @JSName("parents")
  def parents_script(selector: JQuery[script]): JQuery[HTMLScriptElement] = js.native
  @JSName("parents")
  def parents_script(selector: script): JQuery[HTMLScriptElement] = js.native
  @JSName("parents")
  def parents_section(selector: JQuery[section]): JQuery[HTMLElement] = js.native
  @JSName("parents")
  def parents_section(selector: section): JQuery[HTMLElement] = js.native
  @JSName("parents")
  def parents_select(selector: JQuery[select]): JQuery[HTMLSelectElement] = js.native
  @JSName("parents")
  def parents_select(selector: select): JQuery[HTMLSelectElement] = js.native
  @JSName("parents")
  def parents_slot(selector: JQuery[slot]): JQuery[HTMLSlotElement] = js.native
  @JSName("parents")
  def parents_slot(selector: slot): JQuery[HTMLSlotElement] = js.native
  @JSName("parents")
  def parents_small(selector: JQuery[small]): JQuery[HTMLElement] = js.native
  @JSName("parents")
  def parents_small(selector: small): JQuery[HTMLElement] = js.native
  @JSName("parents")
  def parents_source(selector: JQuery[source]): JQuery[HTMLSourceElement] = js.native
  @JSName("parents")
  def parents_source(selector: source): JQuery[HTMLSourceElement] = js.native
  @JSName("parents")
  def parents_span(selector: JQuery[span]): JQuery[HTMLSpanElement] = js.native
  @JSName("parents")
  def parents_span(selector: span): JQuery[HTMLSpanElement] = js.native
  @JSName("parents")
  def parents_stop(selector: JQuery[stop]): JQuery[SVGStopElement] = js.native
  @JSName("parents")
  def parents_stop(selector: stop): JQuery[SVGStopElement] = js.native
  @JSName("parents")
  def parents_strong(selector: JQuery[strong]): JQuery[HTMLElement] = js.native
  @JSName("parents")
  def parents_strong(selector: strong): JQuery[HTMLElement] = js.native
  @JSName("parents")
  def parents_style(selector: JQuery[style]): JQuery[HTMLStyleElement] = js.native
  @JSName("parents")
  def parents_style(selector: style): JQuery[HTMLStyleElement] = js.native
  @JSName("parents")
  def parents_sub(selector: JQuery[sub]): JQuery[HTMLElement] = js.native
  @JSName("parents")
  def parents_sub(selector: sub): JQuery[HTMLElement] = js.native
  @JSName("parents")
  def parents_summary(selector: JQuery[summary]): JQuery[HTMLElement] = js.native
  @JSName("parents")
  def parents_summary(selector: summary): JQuery[HTMLElement] = js.native
  @JSName("parents")
  def parents_sup(selector: JQuery[sup]): JQuery[HTMLElement] = js.native
  @JSName("parents")
  def parents_sup(selector: sup): JQuery[HTMLElement] = js.native
  @JSName("parents")
  def parents_svg(selector: JQuery[svg]): JQuery[SVGSVGElement] = js.native
  @JSName("parents")
  def parents_svg(selector: svg): JQuery[SVGSVGElement] = js.native
  @JSName("parents")
  def parents_switch(selector: JQuery[switch]): JQuery[SVGSwitchElement] = js.native
  @JSName("parents")
  def parents_switch(selector: switch): JQuery[SVGSwitchElement] = js.native
  @JSName("parents")
  def parents_symbol(selector: JQuery[symbol]): JQuery[SVGSymbolElement] = js.native
  @JSName("parents")
  def parents_symbol(selector: symbol): JQuery[SVGSymbolElement] = js.native
  @JSName("parents")
  def parents_table(selector: JQuery[table]): JQuery[HTMLTableElement] = js.native
  @JSName("parents")
  def parents_table(selector: table): JQuery[HTMLTableElement] = js.native
  @JSName("parents")
  def parents_tbody(selector: JQuery[tbody]): JQuery[HTMLTableSectionElement] = js.native
  @JSName("parents")
  def parents_tbody(selector: tbody): JQuery[HTMLTableSectionElement] = js.native
  @JSName("parents")
  def parents_td(selector: JQuery[td]): JQuery[HTMLTableDataCellElement] = js.native
  @JSName("parents")
  def parents_td(selector: td): JQuery[HTMLTableDataCellElement] = js.native
  @JSName("parents")
  def parents_template(selector: JQuery[template]): JQuery[HTMLTemplateElement] = js.native
  @JSName("parents")
  def parents_template(selector: template): JQuery[HTMLTemplateElement] = js.native
  @JSName("parents")
  def parents_text(selector: JQuery[text]): JQuery[SVGTextElement] = js.native
  @JSName("parents")
  def parents_text(selector: text): JQuery[SVGTextElement] = js.native
  @JSName("parents")
  def parents_textPath(selector: JQuery[textPath]): JQuery[SVGTextPathElement] = js.native
  @JSName("parents")
  def parents_textPath(selector: textPath): JQuery[SVGTextPathElement] = js.native
  @JSName("parents")
  def parents_textarea(selector: JQuery[textarea]): JQuery[HTMLTextAreaElement] = js.native
  @JSName("parents")
  def parents_textarea(selector: textarea): JQuery[HTMLTextAreaElement] = js.native
  @JSName("parents")
  def parents_tfoot(selector: JQuery[tfoot]): JQuery[HTMLTableSectionElement] = js.native
  @JSName("parents")
  def parents_tfoot(selector: tfoot): JQuery[HTMLTableSectionElement] = js.native
  @JSName("parents")
  def parents_th(selector: JQuery[th]): JQuery[HTMLTableHeaderCellElement] = js.native
  @JSName("parents")
  def parents_th(selector: th): JQuery[HTMLTableHeaderCellElement] = js.native
  @JSName("parents")
  def parents_thead(selector: JQuery[thead]): JQuery[HTMLTableSectionElement] = js.native
  @JSName("parents")
  def parents_thead(selector: thead): JQuery[HTMLTableSectionElement] = js.native
  @JSName("parents")
  def parents_time(selector: JQuery[time]): JQuery[HTMLTimeElement] = js.native
  @JSName("parents")
  def parents_time(selector: time): JQuery[HTMLTimeElement] = js.native
  @JSName("parents")
  def parents_title(selector: JQuery[title]): JQuery[HTMLTitleElement] = js.native
  @JSName("parents")
  def parents_title(selector: title): JQuery[HTMLTitleElement] = js.native
  @JSName("parents")
  def parents_tr(selector: JQuery[tr]): JQuery[HTMLTableRowElement] = js.native
  @JSName("parents")
  def parents_tr(selector: tr): JQuery[HTMLTableRowElement] = js.native
  @JSName("parents")
  def parents_track(selector: JQuery[track]): JQuery[HTMLTrackElement] = js.native
  @JSName("parents")
  def parents_track(selector: track): JQuery[HTMLTrackElement] = js.native
  @JSName("parents")
  def parents_tspan(selector: JQuery[tspan]): JQuery[SVGTSpanElement] = js.native
  @JSName("parents")
  def parents_tspan(selector: tspan): JQuery[SVGTSpanElement] = js.native
  @JSName("parents")
  def parents_u(selector: JQuery[u]): JQuery[HTMLElement] = js.native
  @JSName("parents")
  def parents_u(selector: u): JQuery[HTMLElement] = js.native
  @JSName("parents")
  def parents_ul(selector: JQuery[ul]): JQuery[HTMLUListElement] = js.native
  @JSName("parents")
  def parents_ul(selector: ul): JQuery[HTMLUListElement] = js.native
  @JSName("parents")
  def parents_use(selector: JQuery[use]): JQuery[SVGUseElement] = js.native
  @JSName("parents")
  def parents_use(selector: use): JQuery[SVGUseElement] = js.native
  @JSName("parents")
  def parents_var(selector: JQuery[`var`]): JQuery[HTMLElement] = js.native
  @JSName("parents")
  def parents_var(selector: `var`): JQuery[HTMLElement] = js.native
  @JSName("parents")
  def parents_video(selector: JQuery[video]): JQuery[HTMLVideoElement] = js.native
  @JSName("parents")
  def parents_video(selector: video): JQuery[HTMLVideoElement] = js.native
  @JSName("parents")
  def parents_view(selector: JQuery[view]): JQuery[SVGViewElement] = js.native
  @JSName("parents")
  def parents_view(selector: view): JQuery[SVGViewElement] = js.native
  @JSName("parents")
  def parents_wbr(selector: JQuery[wbr]): JQuery[HTMLElement] = js.native
  @JSName("parents")
  def parents_wbr(selector: wbr): JQuery[HTMLElement] = js.native
  
  /**
    * Get the current coordinates of the first element in the set of matched elements, relative to the offset parent.
    * @see \`{@link https://api.jquery.com/position/ }\`
    * @since 1.2
    * @example ​ ````Access the position of the second paragraph:
  ```html
  <!doctype html>
  <html lang="en">
  <head>
    <meta charset="utf-8">
    <title>position demo</title>
    <style>
    div {
    padding: 15px;
    }
    p {
    margin-left: 10px;
    }
    </style>
    <script src="https://code.jquery.com/jquery-3.3.1.js"></script>
  </head>
  <body>
  ​
  <div>
    <p>Hello</p>
  </div>
  <p></p>
  ​
  <script>
  var p = $( "p:first" );
  var position = p.position();
  $( "p:last" ).text( "left: " + position.left + ", top: " + position.top );
  </script>
  ​
  </body>
  </html>
  ```
    */
  def position(): Coordinates = js.native
  
  /**
    * Insert content, specified by the parameter, to the beginning of each element in the set of matched elements.
    * @param contents One or more additional DOM elements, text nodes, arrays of elements and text nodes, HTML strings, or
    *                 jQuery objects to insert at the beginning of each element in the set of matched elements.
    * @see \`{@link https://api.jquery.com/prepend/ }\`
    * @since 1.0
    * @example ​ ````Prepends some HTML to all paragraphs.
  ```html
  <!doctype html>
  <html lang="en">
  <head>
    <meta charset="utf-8">
    <title>prepend demo</title>
    <style>
    p {
    background: yellow;
    }
    </style>
    <script src="https://code.jquery.com/jquery-3.3.1.js"></script>
  </head>
  <body>
  ​
  <p>there, friend!</p>
  <p>amigo!</p>
  ​
  <script>
  $( "p" ).prepend( "<b>Hello </b>" );
  </script>
  ​
  </body>
  </html>
  ```
    * @example ​ ````Prepends a DOM Element to all paragraphs.
  ```html
  <!doctype html>
  <html lang="en">
  <head>
    <meta charset="utf-8">
    <title>prepend demo</title>
    <style>
    p {
    background: yellow;
    }
    </style>
    <script src="https://code.jquery.com/jquery-3.3.1.js"></script>
  </head>
  <body>
  ​
  <p>is what I'd say</p>
  <p>is what I said</p>
  ​
  <script>
  $( "p" ).prepend( document.createTextNode( "Hello " ) );
  </script>
  ​
  </body>
  </html>
  ```
    * @example ​ ````Prepends a jQuery object (similar to an Array of DOM Elements) to all paragraphs.
  ```html
  <!doctype html>
  <html lang="en">
  <head>
    <meta charset="utf-8">
    <title>prepend demo</title>
    <style>
    p {
    background: yellow;
    }
    </style>
    <script src="https://code.jquery.com/jquery-3.3.1.js"></script>
  </head>
  <body>
  ​
  <p> is what was said.</p><b>Hello</b>
  ​
  <script>
  $( "p" ).prepend( $( "b" ) );
  </script>
  ​
  </body>
  </html>
  ```
    */
  def prepend(contents: (htmlString | (TypeOrArray[Node | JQuery[Node]]))*): this.type = js.native
  /**
    * Insert content, specified by the parameter, to the beginning of each element in the set of matched elements.
    * @param funсtion A function that returns an HTML string, DOM element(s), text node(s), or jQuery object to insert at
    *                 the beginning of each element in the set of matched elements. Receives the index position of the
    *                 element in the set and the old HTML value of the element as arguments. Within the function, `this`
    *                 refers to the current element in the set.
    * @see \`{@link https://api.jquery.com/prepend/ }\`
    * @since 1.4
    */
  def prepend(
    funсtion: js.ThisFunction2[
      /* this */ TElement, 
      /* index */ Double, 
      /* html */ String, 
      htmlString | (TypeOrArray[Node | JQuery[Node]])
    ]
  ): this.type = js.native
  
  /**
    * Insert every element in the set of matched elements to the beginning of the target.
    * @param target A selector, element, HTML string, array of elements, or jQuery object; the matched set of elements
    *               will be inserted at the beginning of the element(s) specified by this parameter.
    * @see \`{@link https://api.jquery.com/prependTo/ }\`
    * @since 1.0
    * @example ​ ````Prepend all spans to the element with the ID &quot;foo&quot; (Check .prepend() documentation for more examples)
  ```html
  <!doctype html>
  <html lang="en">
  <head>
    <meta charset="utf-8">
    <title>prependTo demo</title>
    <style>
    div {
    background: yellow;
    }
    </style>
    <script src="https://code.jquery.com/jquery-3.3.1.js"></script>
  </head>
  <body>
  ​
  <div id="foo">FOO!</div>
  <span>I have something to say... </span>
  ​
  <script>
  $( "span" ).prependTo( "#foo" );
  </script>
  ​
  </body>
  </html>
  ```
    */
  def prependTo(target: Selector | (TypeOrArray[Element | DocumentFragment]) | htmlString): this.type = js.native
  def prependTo(target: JQuery[HTMLElement]): this.type = js.native
  
  /**
    * Get the immediately preceding sibling of each element in the set of matched elements. If a selector is provided, it retrieves the previous sibling only if it matches that selector.
    * @param selector A string containing a selector expression to match elements against.
    * @see \`{@link https://api.jquery.com/prev/ }\`
    * @since 1.0
    * @example ​ ````Find the very previous sibling of each div.
  ```html
  <!doctype html>
  <html lang="en">
  <head>
    <meta charset="utf-8">
    <title>prev demo</title>
    <style>
    div {
    width: 40px;
    height: 40px;
    margin: 10px;
    float: left;
    border: 2px blue solid;
    padding: 2px;
    }
    span {
    font-size: 14px;
    }
    p {
    clear: left;
    margin: 10px;
    }
    </style>
    <script src="https://code.jquery.com/jquery-3.3.1.js"></script>
  </head>
  <body>
  ​
  <div></div>
  <div></div>
  <div><span>has child</span></div>
  <div></div>
  <div></div>
  <div></div>
  <div id="start"></div>
  <div></div>
  <p><button>Go to Prev</button></p>
  ​
  <script>
  var $curr = $( "#start" );
  $curr.css( "background", "#f99" );
  $( "button" ).click(function() {
    $curr = $curr.prev();
    $( "div" ).css( "background", "" );
    $curr.css( "background", "#f99" );
  });
  </script>
  ​
  </body>
  </html>
  ```
    * @example ​ ````For each paragraph, find the very previous sibling that has a class &quot;selected&quot;.
  ```html
  <!doctype html>
  <html lang="en">
  <head>
    <meta charset="utf-8">
    <title>prev demo</title>
    <script src="https://code.jquery.com/jquery-3.3.1.js"></script>
  </head>
  <body>
  ​
  <div><span>Hello</span></div>
  <p class="selected">Hello Again</p>
  <p>And Again</p>
  ​
  <script>
  $( "p" ).prev( ".selected" ).css( "background", "yellow" );
  </script>
  ​
  </body>
  </html>
  ```
    */
  def prev(): this.type = js.native
  def prev(selector: Selector): this.type = js.native
  
  /**
    * Get all preceding siblings of each element in the set of matched elements, optionally filtered by a selector.
    * @param selector A string containing a selector expression to match elements against.
    * @see \`{@link https://api.jquery.com/prevAll/ }\`
    * @since 1.2
    * @example ​ ````Locate all the divs preceding the last div and give them a class.
  ```html
  <!doctype html>
  <html lang="en">
  <head>
    <meta charset="utf-8">
    <title>prevAll demo</title>
    <style>
    div {
    width: 70px;
    height: 70px;
    background: #abc;
    border: 2px solid black;
    margin: 10px;
    float: left;
    }
    div.before {
    border-color: red;
    }
    </style>
    <script src="https://code.jquery.com/jquery-3.3.1.js"></script>
  </head>
  <body>
  ​
  <div></div>
  <div></div>
  <div></div>
  <div></div>
  ​
  <script>
  $( "div:last" ).prevAll().addClass( "before" );
  </script>
  ​
  </body>
  </html>
  ```
    */
  def prevAll(): this.type = js.native
  def prevAll(selector: Selector): this.type = js.native
  
  /**
    * Get all preceding siblings of each element up to but not including the element matched by the selector, DOM node, or jQuery object.
    * @param selector_element _&#x40;param_ `selector_element`
    * <br>
    * * `selector` — A string containing a selector expression to indicate where to stop matching preceding sibling elements. <br>
    * * `element` — A DOM node or jQuery object indicating where to stop matching preceding sibling elements.
    * @param filter A string containing a selector expression to match elements against.
    * @see \`{@link https://api.jquery.com/prevUntil/ }\`
    * @since 1.4
    * @since 1.6
    * @example ​ ````Find the siblings that precede &lt;dt id=&quot;term-2&quot;&gt; up to the preceding &lt;dt&gt; and give them a red background color. Also, find previous &lt;dd&gt; siblings of &lt;dt id=&quot;term-3&quot;&gt; up to &lt;dt id=&quot;term-1&quot;&gt; and give them a green text color.
  ```html
  <!doctype html>
  <html lang="en">
  <head>
    <meta charset="utf-8">
    <title>prevUntil demo</title>
    <script src="https://code.jquery.com/jquery-3.3.1.js"></script>
  </head>
  <body>
  ​
  <dl>
    <dt id="term-1">term 1</dt>
    <dd>definition 1-a</dd>
    <dd>definition 1-b</dd>
    <dd>definition 1-c</dd>
    <dd>definition 1-d</dd>
  ​
    <dt id="term-2">term 2</dt>
    <dd>definition 2-a</dd>
    <dd>definition 2-b</dd>
    <dd>definition 2-c</dd>
  ​
    <dt id="term-3">term 3</dt>
    <dd>definition 3-a</dd>
    <dd>definition 3-b</dd>
  </dl>
  ​
  <script>
  $( "#term-2" ).prevUntil( "dt" )
    .css( "background-color", "red" );
  ​
  var term1 = document.getElementById( "term-1" );
  $( "#term-3" ).prevUntil( term1, "dd" )
    .css( "color", "green" );
  </script>
  ​
  </body>
  </html>
  ```
    */
  def prevUntil(): this.type = js.native
  def prevUntil(selector_element: js.UndefOr[scala.Nothing], filter: Selector): this.type = js.native
  def prevUntil(selector_element: Element): this.type = js.native
  def prevUntil(selector_element: Element, filter: Selector): this.type = js.native
  def prevUntil(selector_element: JQuery[HTMLElement]): this.type = js.native
  def prevUntil(selector_element: Selector): this.type = js.native
  def prevUntil(selector_element: Selector, filter: Selector): this.type = js.native
  def prevUntil(selector_element: JQuery[HTMLElement], filter: Selector): this.type = js.native
  
  /**
    * Return a Promise object to observe when all actions of a certain type bound to the collection, queued or not, have finished.
    * @param type The type of queue that needs to be observed.
    * @see \`{@link https://api.jquery.com/promise/ }\`
    * @since 1.6
    * @example ​ ````Using .promise() on a collection with no active animation returns a resolved Promise:
  ```javascript
  var div = $( "<div>" );
  ​
  div.promise().done(function( arg1 ) {
    // Will fire right away and alert "true"
    alert( this === div && arg1 === div );
  });
  ```
    * @example ​ ````Resolve the returned Promise when all animations have ended (including those initiated in the animation callback or added later on):
  ```html
  <!doctype html>
  <html lang="en">
  <head>
    <meta charset="utf-8">
    <title>promise demo</title>
    <style>
    div {
    height: 50px;
    width: 50px;
    float: left;
    margin-right: 10px;
    display: none;
    background-color: #090;
    }
    </style>
    <script src="https://code.jquery.com/jquery-3.3.1.js"></script>
  </head>
  <body>
  ​
  <button>Go</button>
  <p>Ready...</p>
  <div></div>
  <div></div>
  <div></div>
  <div></div>
  ​
  <script>
  $( "button" ).on( "click", function() {
    $( "p" ).append( "Started..." );
  ​
    $( "div" ).each(function( i ) {
    $( this ).fadeIn().fadeOut( 1000 * ( i + 1 ) );
    });
  ​
    $( "div" ).promise().done(function() {
    $( "p" ).append( " Finished! " );
    });
  });
  </script>
  ​
  </body>
  </html>
  ```
    * @example ​ ````Resolve the returned Promise using a $.when() statement (the .promise() method makes it possible to do this with jQuery collections):
  ```html
  <!doctype html>
  <html lang="en">
  <head>
    <meta charset="utf-8">
    <title>promise demo</title>
    <style>
    div {
    height: 50px;
    width: 50px;
    float: left;
    margin-right: 10px;
    display: none;
    background-color: #090;
    }
    </style>
    <script src="https://code.jquery.com/jquery-3.3.1.js"></script>
  </head>
  <body>
  ​
  <button>Go</button>
  <p>Ready...</p>
  <div></div>
  <div></div>
  <div></div>
  <div></div>
  ​
  <script>
  var effect = function() {
    return $( "div" ).fadeIn( 800 ).delay( 1200 ).fadeOut();
  };
  ​
  $( "button" ).on( "click", function() {
    $( "p" ).append( " Started... " );
  ​
    $.when( effect() ).done(function() {
    $( "p" ).append( " Finished! " );
    });
  });
  </script>
  ​
  </body>
  </html>
  ```
    */
  def promise(): Promise[this.type, _, _] = js.native
  def promise(`type`: String): Promise[this.type, _, _] = js.native
  /**
    * Return a Promise object to observe when all actions of a certain type bound to the collection, queued or not, have finished.
    * @param target Object onto which the promise methods have to be attached
    * @see \`{@link https://api.jquery.com/promise/ }\`
    * @since 1.6
    */
  def promise[T /* <: js.Object */](target: T): T with (Promise[this.type, _, _]) = js.native
  /**
    * Return a Promise object to observe when all actions of a certain type bound to the collection, queued or not, have finished.
    * @param type The type of queue that needs to be observed.
    * @param target Object onto which the promise methods have to be attached
    * @see \`{@link https://api.jquery.com/promise/ }\`
    * @since 1.6
    */
  def promise[T /* <: js.Object */](`type`: String, target: T): T with (Promise[this.type, _, _]) = js.native
  
  /**
    * Set one or more properties for the set of matched elements.
    * @param properties An object of property-value pairs to set.
    * @see \`{@link https://api.jquery.com/prop/ }\`
    * @since 1.6
    * @example ​ ````Disable all checkboxes on the page.
  ```html
  <!doctype html>
  <html lang="en">
  <head>
    <meta charset="utf-8">
    <title>prop demo</title>
    <style>
    img {
    padding: 10px;
    }
    div {
    color: red;
    font-size: 24px;
    }
    </style>
    <script src="https://code.jquery.com/jquery-3.3.1.js"></script>
  </head>
  <body>
  ​
    <input type="checkbox" checked="checked">
    <input type="checkbox">
    <input type="checkbox">
    <input type="checkbox" checked="checked">
  ​
  <script>
  $( "input[type='checkbox']" ).prop({
    disabled: true
  });
  </script>
  ​
  </body>
  </html>
  ```
    */
  def prop(properties: PlainObject[_]): this.type = js.native
  /**
    * Get the value of a property for the first element in the set of matched elements.
    * @param propertyName The name of the property to get.
    * @see \`{@link https://api.jquery.com/prop/ }\`
    * @since 1.6
    * @example ​ ````Display the checked property and attribute of a checkbox as it changes.
  ```html
  <!doctype html>
  <html lang="en">
  <head>
    <meta charset="utf-8">
    <title>prop demo</title>
    <style>
    p {
    margin: 20px 0 0;
    }
    b {
    color: blue;
    }
    </style>
    <script src="https://code.jquery.com/jquery-3.3.1.js"></script>
  </head>
  <body>
  ​
  <input id="check1" type="checkbox" checked="checked">
  <label for="check1">Check me</label>
  <p></p>
  ​
  <script>
  $( "input" ).change(function() {
    var $input = $( this );
    $( "p" ).html(
    ".attr( \"checked\" ): <b>" + $input.attr( "checked" ) + "</b><br>" +
    ".prop( \"checked\" ): <b>" + $input.prop( "checked" ) + "</b><br>" +
    ".is( \":checked\" ): <b>" + $input.is( ":checked" ) + "</b>" );
  }).change();
  </script>
  ​
  </body>
  </html>
  ```
    */
  def prop(propertyName: String): js.Any = js.native
  def prop(propertyName: String, value_function: String): this.type = js.native
  def prop(propertyName: String, value_function: js.Object): this.type = js.native
  def prop(propertyName: String, value_function: js.Symbol): this.type = js.native
  def prop(
    propertyName: String,
    value_function: js.ThisFunction2[/* this */ TElement, /* index */ Double, /* oldPropertyValue */ js.Any, _]
  ): this.type = js.native
  def prop(propertyName: String, value_function: Boolean): this.type = js.native
  def prop(propertyName: String, value_function: Double): this.type = js.native
  /**
    * Set one or more properties for the set of matched elements.
    * @param propertyName The name of the property to set.
    * @param value_function _&#x40;param_ `value_function`
    * <br>
    * * `value` — A value to set for the property. <br>
    * * `function` — A function returning the value to set. Receives the index position of the element in the set and the
    *                old property value as arguments. Within the function, the keyword `this` refers to the current element.
    * @see \`{@link https://api.jquery.com/prop/ }\`
    * @since 1.6
    */
  @JSName("prop")
  def prop_This(propertyName: String): this.type = js.native
  
  /**
    * Add a collection of DOM elements onto the jQuery stack.
    * @param elements An array of elements to push onto the stack and make into a new jQuery object.
    * @see \`{@link https://api.jquery.com/pushStack/ }\`
    * @since 1.0
    * @example ​ ````Add some elements onto the jQuery stack, then pop back off again.
  ```javascript
  jQuery([])
    .pushStack( document.getElementsByTagName( "div" ) )
    .remove()
    .end();
  ```
    */
  def pushStack(elements: ArrayLike[Element]): this.type = js.native
  /**
    * Add a collection of DOM elements onto the jQuery stack.
    * @param elements An array of elements to push onto the stack and make into a new jQuery object.
    * @param name The name of a jQuery method that generated the array of elements.
    * @param args The arguments that were passed in to the jQuery method (for serialization).
    * @see \`{@link https://api.jquery.com/pushStack/ }\`
    * @since 1.3
    */
  def pushStack(elements: ArrayLike[Element], name: String, args: js.Array[_]): this.type = js.native
  
  /**
    * Show the queue of functions to be executed on the matched elements.
    * @param queueName A string containing the name of the queue. Defaults to fx, the standard effects queue.
    * @see \`{@link https://api.jquery.com/queue/ }\`
    * @since 1.2
    * @example ​ ````Show the length of the queue.
  ```html
  <!doctype html>
  <html lang="en">
  <head>
    <meta charset="utf-8">
    <title>queue demo</title>
    <style>
    div {
    margin: 3px;
    width: 40px;
    height: 40px;
    position: absolute;
    left: 0px;
    top: 60px;
    background: green;
    display: none;
    }
    div.newcolor {
    background: blue;
    }
    p {
    color: red;
    }
    </style>
    <script src="https://code.jquery.com/jquery-3.3.1.js"></script>
  </head>
  <body>
  ​
  <p>The queue length is: <span></span></p>
  <div></div>
  ​
  <script>
  var div = $( "div" );
  ​
  function runIt() {
    div
    .show( "slow" )
    .animate({ left: "+=200" }, 2000 )
    .slideToggle( 1000 )
    .slideToggle( "fast" )
    .animate({ left: "-=200" }, 1500 )
    .hide( "slow" )
    .show( 1200 )
    .slideUp( "normal", runIt );
  }
  ​
  function showIt() {
    var n = div.queue( "fx" );
    $( "span" ).text( n.length );
    setTimeout( showIt, 100 );
  }
  ​
  runIt();
  showIt();
  </script>
  ​
  </body>
  </html>
  ```
    */
  def queue(): Queue[org.scalajs.dom.raw.Node] = js.native
  /**
    * Manipulate the queue of functions to be executed, once for each matched element.
    * @param newQueue The new function to add to the queue, with a function to call that will dequeue the next item.
    *                 An array of functions to replace the current queue contents.
    * @see \`{@link https://api.jquery.com/queue/ }\`
    * @since 1.2
    * @example ​ ````Queue a custom function.
  ```html
  <!doctype html>
  <html lang="en">
  <head>
    <meta charset="utf-8">
    <title>queue demo</title>
    <style>
    div {
    margin: 3px;
    width: 40px;
    height: 40px;
    position: absolute;
    left: 0px;
    top: 30px;
    background: green;
    display: none;
    }
    div.newcolor {
    background: blue;
    }
    </style>
    <script src="https://code.jquery.com/jquery-3.3.1.js"></script>
  </head>
  <body>
  ​
  Click here...
  <div></div>
  ​
  <script>
  $( document.body ).click(function() {
    $( "div" )
    .show( "slow" )
    .animate({ left: "+=200" }, 2000 )
    .queue(function() {
    $( this ).addClass( "newcolor" ).dequeue();
    })
    .animate({ left: "-=200" }, 500 )
    .queue(function() {
    $( this ).removeClass( "newcolor" ).dequeue();
    })
    .slideUp();
  });
  </script>
  ​
  </body>
  </html>
  ```
    */
  def queue(newQueue: TypeOrArray[QueueFunction[TElement]]): this.type = js.native
  def queue(queueName: String): Queue[org.scalajs.dom.raw.Node] = js.native
  /**
    * Manipulate the queue of functions to be executed, once for each matched element.
    * @param queueName A string containing the name of the queue. Defaults to fx, the standard effects queue.
    * @param newQueue The new function to add to the queue, with a function to call that will dequeue the next item.
    *                 An array of functions to replace the current queue contents.
    * @see \`{@link https://api.jquery.com/queue/ }\`
    * @since 1.2
    * @example ​ ````Set a queue array to delete the queue.
  ```html
  <!doctype html>
  <html lang="en">
  <head>
    <meta charset="utf-8">
    <title>queue demo</title>
    <style>
    div {
    margin: 3px;
    width: 40px;
    height: 40px;
    position: absolute;
    left: 0px;
    top: 30px;
    background: green;
    display: none;
    }
    div.newcolor {
    background: blue;
    }
    </style>
    <script src="https://code.jquery.com/jquery-3.3.1.js"></script>
  </head>
  <body>
  ​
  <button id="start">Start</button>
  <button id="stop">Stop</button>
  <div></div>
  ​
  <script>
  $( "#start" ).click(function() {
    $( "div" )
    .show( "slow" )
    .animate({ left: "+=200" }, 5000 )
    .queue(function() {
    $( this ).addClass( "newcolor" ).dequeue();
    })
    .animate({ left: '-=200' }, 1500 )
    .queue(function() {
    $( this ).removeClass( "newcolor" ).dequeue();
    })
    .slideUp();
  });
  $( "#stop" ).click(function() {
    $( "div" )
    .queue( "fx", [] )
    .stop();
  });
  </script>
  ​
  </body>
  </html>
  ```
    */
  def queue(queueName: String, newQueue: TypeOrArray[QueueFunction[TElement]]): this.type = js.native
  
  /**
    * Specify a function to execute when the DOM is fully loaded.
    * @param handler A function to execute after the DOM is ready.
    * @see \`{@link https://api.jquery.com/ready/ }\`
    * @since 1.0
    * @deprecated ​ Deprecated since 3.0. Use `jQuery(function() { })`.
    * @example ​ ````Display a message when the DOM is loaded.
  ```html
  <!doctype html>
  <html lang="en">
  <head>
    <meta charset="utf-8">
    <title>ready demo</title>
    <style>
    p {
    color: red;
    }
    </style>
    <script src="https://code.jquery.com/jquery-3.3.1.js"></script>
    <script>
  ​
    $(function() {
    $( "p" ).text( "The DOM is now loaded and can be manipulated." );
    });
  ​
    </script>
  </head>
  <body>
  ​
  <p>Not loaded yet.</p>
  ​
  </body>
  </html>
  ```
    */
  def ready(handler: js.Function1[/* $ */ JQueryStatic, Unit]): this.type = js.native
  
  /**
    * Remove the set of matched elements from the DOM.
    * @param selector A selector expression that filters the set of matched elements to be removed.
    * @see \`{@link https://api.jquery.com/remove/ }\`
    * @since 1.0
    * @example ​ ````Removes all paragraphs from the DOM
  ```html
  <!doctype html>
  <html lang="en">
  <head>
    <meta charset="utf-8">
    <title>remove demo</title>
    <style>
    p {
    background: yellow;
    margin: 6px 0;
    }
    </style>
    <script src="https://code.jquery.com/jquery-3.3.1.js"></script>
  </head>
  <body>
  ​
  <p>Hello</p>
  how are
  <p>you?</p>
  <button>Call remove() on paragraphs</button>
  ​
  <script>
  $( "button" ).click(function() {
    $( "p" ).remove();
  });
  </script>
  ​
  </body>
  </html>
  ```
    * @example ​ ````Removes all paragraphs that contain &quot;Hello&quot; from the DOM.  Analogous to doing $(&quot;p&quot;).filter(&quot;:contains(&#39;Hello&#39;)&quot;).remove().
  ```html
  <!doctype html>
  <html lang="en">
  <head>
    <meta charset="utf-8">
    <title>remove demo</title>
    <style>
    p {
    background: yellow;
    margin: 6px 0;
    }
    </style>
    <script src="https://code.jquery.com/jquery-3.3.1.js"></script>
  </head>
  <body>
  ​
  <p class="hello">Hello</p>
  how are
  <p>you?</p>
  <button>Call remove( ":contains('Hello')" ) on paragraphs</button>
  ​
  <script>
  $( "button" ).click(function() {
    $( "p" ).remove( ":contains('Hello')" );
  });
  </script>
  ​
  </body>
  </html>
  ```
    */
  def remove(): this.type = js.native
  def remove(selector: String): this.type = js.native
  
  /**
    * Remove an attribute from each element in the set of matched elements.
    * @param attributeName An attribute to remove; as of version 1.7, it can be a space-separated list of attributes.
    * @see \`{@link https://api.jquery.com/removeAttr/ }\`
    * @since 1.0
    * @example ​ ````Clicking the button changes the title of the input next to it. Move the mouse pointer over the text input to see the effect of adding and removing the title attribute.
  ```html
  <!doctype html>
  <html lang="en">
  <head>
    <meta charset="utf-8">
    <title>removeAttr demo</title>
    <script src="https://code.jquery.com/jquery-3.3.1.js"></script>
  </head>
  <body>
  ​
  <button>Change title</button>
  <input type="text" title="hello there">
  <div id="log"></div>
  ​
  <script>
  (function() {
    var inputTitle = $( "input" ).attr( "title" );
    $( "button" ).click(function() {
    var input = $( this ).next();
  ​
    if ( input.attr( "title" ) === inputTitle ) {
    input.removeAttr( "title" )
    } else {
    input.attr( "title", inputTitle );
    }
  ​
    $( "#log" ).html( "input title is now " + input.attr( "title" ) );
    });
  })();
  </script>
  ​
  </body>
  </html>
  ```
    */
  def removeAttr(attributeName: String): this.type = js.native
  
  /**
    * Remove a single class, multiple classes, or all classes from each element in the set of matched elements.
    * @param className_function _&#x40;param_ `className_function`
    * <br>
    * * `className` — One or more space-separated classes to be removed from the class attribute of each matched element. <br>
    * * `function` — A function returning one or more space-separated class names to be removed. Receives the index
    *                position of the element in the set and the old class value as arguments.
    * @see \`{@link https://api.jquery.com/removeClass/ }\`
    * @since 1.0
    * @since 1.4
    * @since 3.3
    * @example ​ ````Remove the class &#39;blue&#39; from the matched elements.
  ```html
  <!doctype html>
  <html lang="en">
  <head>
    <meta charset="utf-8">
    <title>removeClass demo</title>
    <style>
    p {
    margin: 4px;
    font-size: 16px;
    font-weight: bolder;
    }
    .blue {
    color: blue;
    }
    .under {
    text-decoration: underline;
    }
    .highlight {
    background: yellow;
    }
    </style>
    <script src="https://code.jquery.com/jquery-3.3.1.js"></script>
  </head>
  <body>
  ​
  <p class="blue under">Hello</p>
  <p class="blue under highlight">and</p>
  <p class="blue under">then</p>
  <p class="blue under">Goodbye</p>
  ​
  <script>
  $( "p:even" ).removeClass( "blue" );
  </script>
  ​
  </body>
  </html>
  ```
    * @example ​ ````Remove the class &#39;blue&#39; and &#39;under&#39; from the matched elements.
  ```html
  <!doctype html>
  <html lang="en">
  <head>
    <meta charset="utf-8">
    <title>removeClass demo</title>
    <style>
    p {
    margin: 4px;
    font-size: 16px;
    font-weight: bolder;
    }
    .blue {
    color: blue;
    }
    .under {
    text-decoration: underline;
    }
    .highlight {
    background: yellow;
    }
    </style>
    <script src="https://code.jquery.com/jquery-3.3.1.js"></script>
  </head>
  <body>
  ​
  <p class="blue under">Hello</p>
  <p class="blue under highlight">and</p>
  <p class="blue under">then</p>
  <p class="blue under">Goodbye</p>
  ​
  <script>
  $( "p:odd" ).removeClass( "blue under" );
  </script>
  ​
  </body>
  </html>
  ```
    * @example ​ ````Remove all the classes from the matched elements.
  ```html
  <!doctype html>
  <html lang="en">
  <head>
    <meta charset="utf-8">
    <title>removeClass demo</title>
    <style>
    p {
    margin: 4px;
    font-size: 16px;
    font-weight: bolder;
    }
    .blue {
    color: blue;
    }
    .under {
    text-decoration: underline;
    }
    .highlight {
    background: yellow;
    }
    </style>
    <script src="https://code.jquery.com/jquery-3.3.1.js"></script>
  </head>
  <body>
  ​
  <p class="blue under">Hello</p>
  <p class="blue under highlight">and</p>
  <p class="blue under">then</p>
  <p class="blue under">Goodbye</p>
  ​
  <script>
  $( "p:eq(1)" ).removeClass();
  </script>
  ​
  </body>
  </html>
  ```
    */
  def removeClass(): this.type = js.native
  def removeClass(
    className_function: js.ThisFunction2[/* this */ TElement, /* index */ Double, /* className */ String, String]
  ): this.type = js.native
  def removeClass(className_function: TypeOrArray[String]): this.type = js.native
  
  /**
    * Remove a previously-stored piece of data.
    * @param name A string naming the piece of data to delete.
    *             An array or space-separated string naming the pieces of data to delete.
    * @see \`{@link https://api.jquery.com/removeData/ }\`
    * @since 1.2.3
    * @since 1.7
    * @example ​ ````Set a data store for 2 names then remove one of them.
  ```html
  <!doctype html>
  <html lang="en">
  <head>
    <meta charset="utf-8">
    <title>removeData demo</title>
    <style>
    div {
    margin: 2px;
    color: blue;
    }
    span {
    color: red;
    }
    </style>
    <script src="https://code.jquery.com/jquery-3.3.1.js"></script>
  </head>
  <body>
  ​
  <div>value1 before creation: <span></span></div>
  <div>value1 after creation: <span></span></div>
  <div>value1 after removal: <span></span></div>
  <div>value2 after removal: <span></span></div>
  ​
  <script>
  $( "span:eq(0)" ).text( "" + $( "div" ).data( "test1" ) );
  $( "div" ).data( "test1", "VALUE-1" );
  $( "div" ).data( "test2", "VALUE-2" );
  $( "span:eq(1)" ).text( "" + $( "div").data( "test1" ) );
  $( "div" ).removeData( "test1" );
  $( "span:eq(2)" ).text( "" + $( "div" ).data( "test1" ) );
  $( "span:eq(3)" ).text( "" + $( "div" ).data( "test2" ) );
  </script>
  ​
  </body>
  </html>
  ```
    */
  def removeData(): this.type = js.native
  def removeData(name: TypeOrArray[String]): this.type = js.native
  
  /**
    * Remove a property for the set of matched elements.
    * @param propertyName The name of the property to remove.
    * @see \`{@link https://api.jquery.com/removeProp/ }\`
    * @since 1.6
    * @example ​ ````Set a numeric property on a paragraph and then remove it.
  ```html
  <!doctype html>
  <html lang="en">
  <head>
    <meta charset="utf-8">
    <title>removeProp demo</title>
    <style>
    img {
    padding: 10px;
    }
    div {
    color: red;
    font-size: 24px;
    }
    </style>
    <script src="https://code.jquery.com/jquery-3.3.1.js"></script>
  </head>
  <body>
  ​
    <p></p>
  ​
  <script>
  para = $( "p" );
  para
    .prop( "luggageCode", 1234 )
    .append( "The secret luggage code is: ", String( para.prop( "luggageCode" ) ), ". " )
    .removeProp( "luggageCode" )
    .append( "Now the secret luggage code is: ", String( para.prop( "luggageCode" ) ), ". " );
  </script>
  ​
  </body>
  </html>
  ```
    */
  def removeProp(propertyName: String): this.type = js.native
  
  def replaceAll(target: JQuery[HTMLElement]): this.type = js.native
  /**
    * Replace each target element with the set of matched elements.
    * @param target A selector string, jQuery object, DOM element, or array of elements indicating which element(s) to replace.
    * @see \`{@link https://api.jquery.com/replaceAll/ }\`
    * @since 1.2
    * @example ​ ````Replace all the paragraphs with bold words.
  ```html
  <!doctype html>
  <html lang="en">
  <head>
    <meta charset="utf-8">
    <title>replaceAll demo</title>
    <script src="https://code.jquery.com/jquery-3.3.1.js"></script>
  </head>
  <body>
  ​
  <p>Hello</p>
  <p>cruel</p>
  <p>World</p>
  ​
  <script>
  $( "<b>Paragraph. </b>" ).replaceAll( "p" );
  </script>
  ​
  </body>
  </html>
  ```
    */
  def replaceAll(target: Selector): this.type = js.native
  def replaceAll(target: TypeOrArray[Element]): this.type = js.native
  
  def replaceWith(newContent_function: Node | TypeOrArray[Element]): this.type = js.native
  def replaceWith(
    newContent_function: js.ThisFunction2[
      /* this */ TElement, 
      /* index */ Double, 
      /* oldhtml */ htmlString, 
      htmlString | JQuery[Node] | TypeOrArray[Element] | Node
    ]
  ): this.type = js.native
  def replaceWith(newContent_function: JQuery[Node]): this.type = js.native
  /**
    * Replace each element in the set of matched elements with the provided new content and return the set of elements that was removed.
    * @param newContent_function _&#x40;param_ `newContent_function`
    * <br>
    * * `newContent` — The content to insert. May be an HTML string, DOM element, array of DOM elements, or jQuery object. <br>
    * * `function` — A function that returns content with which to replace the set of matched elements.
    * @see \`{@link https://api.jquery.com/replaceWith/ }\`
    * @since 1.2
    * @since 1.4
    * @example ​ ````On click, replace the button with a div containing the same word.
  ```html
  <!doctype html>
  <html lang="en">
  <head>
    <meta charset="utf-8">
    <title>replaceWith demo</title>
    <style>
    button {
    display: block;
    margin: 3px;
    color: red;
    width: 200px;
    }
    div {
    color: red;
    border: 2px solid blue;
    width: 200px;
    margin: 3px;
    text-align: center;
    }
    </style>
    <script src="https://code.jquery.com/jquery-3.3.1.js"></script>
  </head>
  <body>
  ​
  <button>First</button>
  <button>Second</button>
  <button>Third</button>
  ​
  <script>
  $( "button" ).click(function() {
    $( this ).replaceWith( "<div>" + $( this ).text() + "</div>" );
  });
  </script>
  ​
  </body>
  </html>
  ```
    * @example ​ ````Replace all paragraphs with bold words.
  ```html
  <!doctype html>
  <html lang="en">
  <head>
    <meta charset="utf-8">
    <title>replaceWith demo</title>
    <script src="https://code.jquery.com/jquery-3.3.1.js"></script>
  </head>
  <body>
  ​
  <p>Hello</p>
  <p>cruel</p>
  <p>World</p>
  ​
  <script>
  $( "p" ).replaceWith( "<b>Paragraph. </b>" );
  </script>
  ​
  </body>
  </html>
  ```
    * @example ​ ````On click, replace each paragraph with a div that is already in the DOM and selected with the $() function. Notice it doesn&#39;t clone the object but rather moves it to replace the paragraph.
  ```html
  <!doctype html>
  <html lang="en">
  <head>
    <meta charset="utf-8">
    <title>replaceWith demo</title>
    <style>
    div {
    border: 2px solid blue;
    color: red;
    margin: 3px;
    }
    p {
    border: 2px solid red;
    color: blue;
    margin: 3px;
    cursor: pointer;
    }
    </style>
    <script src="https://code.jquery.com/jquery-3.3.1.js"></script>
  </head>
  <body>
  ​
    <p>Hello</p>
    <p>cruel</p>
    <p>World</p>
    <div>Replaced!</div>
  ​
  <script>
  $( "p" ).click(function() {
    $( this ).replaceWith( $( "div" ) );
  });
  </script>
  ​
  </body>
  </html>
  ```
    * @example ​ ````On button click, replace the containing div with its child divs and append the class name of the selected element to the paragraph.
  ```html
  <!doctype html>
  <html lang="en">
  <head>
    <meta charset="utf-8">
    <title>replaceWith demo</title>
    <style>
    .container {
    background-color: #991;
    }
    .inner {
    color: #911;
    }
    </style>
    <script src="https://code.jquery.com/jquery-3.3.1.js"></script>
  </head>
  <body>
  ​
  <p>
    <button>Replace!</button>
  </p>
  <div class="container">
    <div class="inner">Scooby</div>
    <div class="inner">Dooby</div>
    <div class="inner">Doo</div>
  </div>
  ​
  <script>
  $( "button" ).on( "click", function() {
    var $container = $( "div.container" ).replaceWith(function() {
    return $( this ).contents();
    });
  ​
    $( "p" ).append( $container.attr( "class" ) );
  });
  </script>
  ​
  </body>
  </html>
  ```
    */
  def replaceWith(newContent_function: htmlString): this.type = js.native
  
  /**
    * Bind an event handler to the "resize" JavaScript event, or trigger that event on an element.
    * @param handler A function to execute each time the event is triggered.
    * @see \`{@link https://api.jquery.com/resize/ }\`
    * @since 1.0
    * @deprecated ​ Deprecated since 3.3. Use \`{@link on }\` or \`{@link trigger }\`.
    *
    * **Cause**: The `.on()` and `.trigger()` methods can set an event handler or generate an event for any event type, and should be used instead of the shortcut methods. This message also applies to the other event shorthands, including: blur, focus, focusin, focusout, resize, scroll, dblclick, mousedown, mouseup, mousemove, mouseover, mouseout, mouseenter, mouseleave, change, select, submit, keydown, keypress, keyup, and contextmenu.
    *
    * **Solution**: Instead of `.click(fn)` use `.on("click", fn)`. Instead of `.click()` use `.trigger("click")`.
    * @example ​ ````To see the window width while (or after) it is resized, try:
  ```javascript
  $( window ).resize(function() {
    $( "body" ).prepend( "<div>" + $( window ).width() + "</div>" );
  });
  ```
    */
  def resize(): this.type = js.native
  @JSName("resize")
  def resize_false(handler: `false`): this.type = js.native
  @JSName("resize")
  def resize_resize(handler: TypeEventHandler[TElement, Null, TElement, TElement, resize]): this.type = js.native
  /**
    * Bind an event handler to the "resize" JavaScript event, or trigger that event on an element.
    * @param eventData An object containing data that will be passed to the event handler.
    * @param handler A function to execute each time the event is triggered.
    * @see \`{@link https://api.jquery.com/resize/ }\`
    * @since 1.4.3
    * @deprecated ​ Deprecated since 3.3. Use \`{@link on }\` or \`{@link trigger }\`.
    *
    * **Cause**: The `.on()` and `.trigger()` methods can set an event handler or generate an event for any event type, and should be used instead of the shortcut methods. This message also applies to the other event shorthands, including: blur, focus, focusin, focusout, resize, scroll, dblclick, mousedown, mouseup, mousemove, mouseover, mouseout, mouseenter, mouseleave, change, select, submit, keydown, keypress, keyup, and contextmenu.
    *
    * **Solution**: Instead of `.click(fn)` use `.on("click", fn)`. Instead of `.click()` use `.trigger("click")`.
    */
  @JSName("resize")
  def resize_resize[TData](eventData: TData, handler: TypeEventHandler[TElement, TData, TElement, TElement, resize]): this.type = js.native
  
  /**
    * Bind an event handler to the "scroll" JavaScript event, or trigger that event on an element.
    * @param handler A function to execute each time the event is triggered.
    * @see \`{@link https://api.jquery.com/scroll/ }\`
    * @since 1.0
    * @deprecated ​ Deprecated since 3.3. Use \`{@link on }\` or \`{@link trigger }\`.
    *
    * **Cause**: The `.on()` and `.trigger()` methods can set an event handler or generate an event for any event type, and should be used instead of the shortcut methods. This message also applies to the other event shorthands, including: blur, focus, focusin, focusout, resize, scroll, dblclick, mousedown, mouseup, mousemove, mouseover, mouseout, mouseenter, mouseleave, change, select, submit, keydown, keypress, keyup, and contextmenu.
    *
    * **Solution**: Instead of `.click(fn)` use `.on("click", fn)`. Instead of `.click()` use `.trigger("click")`.
    * @example ​ ````To do something when your page is scrolled:
  ```html
  <!doctype html>
  <html lang="en">
  <head>
    <meta charset="utf-8">
    <title>scroll demo</title>
    <style>
    div {
    color: blue;
    }
    p {
    color: green;
    }
    span {
    color: red;
    display: none;
    }
    </style>
    <script src="https://code.jquery.com/jquery-3.3.1.js"></script>
  </head>
  <body>
  ​
  <div>Try scrolling the iframe.</div>
  <p>Paragraph - <span>Scroll happened!</span></p>
  ​
  <script>
  $( "p" ).clone().appendTo( document.body );
  $( "p" ).clone().appendTo( document.body );
  $( "p" ).clone().appendTo( document.body );
  $( window ).scroll(function() {
    $( "span" ).css( "display", "inline" ).fadeOut( "slow" );
  });
  </script>
  ​
  </body>
  </html>
  ```
    */
  def scroll(): this.type = js.native
  
  /**
    * Get the current horizontal position of the scroll bar for the first element in the set of matched elements.
    * @see \`{@link https://api.jquery.com/scrollLeft/ }\`
    * @since 1.2.6
    * @example ​ ````Get the scrollLeft of a paragraph.
  ```html
  <!doctype html>
  <html lang="en">
  <head>
    <meta charset="utf-8">
    <title>scrollLeft demo</title>
    <style>
    p {
    margin: 10px;
    padding: 5px;
    border: 2px solid #666;
    }
    </style>
    <script src="https://code.jquery.com/jquery-3.3.1.js"></script>
  </head>
  <body>
  ​
  <p>Hello</p><p></p>
  ​
  <script>
  var p = $( "p:first" );
  $( "p:last" ).text( "scrollLeft:" + p.scrollLeft() );
  </script>
  ​
  </body>
  </html>
  ```
    */
  def scrollLeft(): js.UndefOr[Double] = js.native
  /**
    * Set the current horizontal position of the scroll bar for each of the set of matched elements.
    * @param value An integer indicating the new position to set the scroll bar to.
    * @see \`{@link https://api.jquery.com/scrollLeft/ }\`
    * @since 1.2.6
    * @example ​ ````Set the scrollLeft of a div.
  ```html
  <!doctype html>
  <html lang="en">
  <head>
    <meta charset="utf-8">
    <title>scrollLeft demo</title>
    <style>
    div.demo {
    background: #ccc none repeat scroll 0 0;
    border: 3px solid #666;
    margin: 5px;
    padding: 5px;
    position: relative;
    width: 200px;
    height: 100px;
    overflow: auto;
    }
    p {
    margin: 10px;
    padding: 5px;
    border: 2px solid #666;
    width: 1000px;
    height: 1000px;
    }
    </style>
    <script src="https://code.jquery.com/jquery-3.3.1.js"></script>
  </head>
  <body>
  ​
  <div class="demo"><h1>lalala</h1><p>Hello</p></div>
  ​
  <script>
  $( "div.demo" ).scrollLeft( 300 );
  </script>
  ​
  </body>
  </html>
  ```
    */
  def scrollLeft(value: Double): this.type = js.native
  
  /**
    * Get the current vertical position of the scroll bar for the first element in the set of matched elements or set the vertical position of the scroll bar for every matched element.
    * @see \`{@link https://api.jquery.com/scrollTop/ }\`
    * @since 1.2.6
    * @example ​ ````Get the scrollTop of a paragraph.
  ```html
  <!doctype html>
  <html lang="en">
  <head>
    <meta charset="utf-8">
    <title>scrollTop demo</title>
    <style>
    p {
    margin: 10px;
    padding: 5px;
    border: 2px solid #666;
    }
    </style>
    <script src="https://code.jquery.com/jquery-3.3.1.js"></script>
  </head>
  <body>
  ​
  <p>Hello</p><p></p>
  ​
  <script>
  var p = $( "p:first" );
  $( "p:last" ).text( "scrollTop:" + p.scrollTop() );
  </script>
  ​
  </body>
  </html>
  ```
    */
  def scrollTop(): js.UndefOr[Double] = js.native
  /**
    * Set the current vertical position of the scroll bar for each of the set of matched elements.
    * @param value A number indicating the new position to set the scroll bar to.
    * @see \`{@link https://api.jquery.com/scrollTop/ }\`
    * @since 1.2.6
    * @example ​ ````Set the scrollTop of a div.
  ```html
  <!doctype html>
  <html lang="en">
  <head>
    <meta charset="utf-8">
    <title>scrollTop demo</title>
    <style>
    div.demo {
    background: #ccc none repeat scroll 0 0;
    border: 3px solid #666;
    margin: 5px;
    padding: 5px;
    position: relative;
    width: 200px;
    height: 100px;
    overflow: auto;
    }
    p {
    margin: 10px;
    padding: 5px;
    border: 2px solid #666;
    width: 1000px;
    height: 1000px;
    }
    </style>
    <script src="https://code.jquery.com/jquery-3.3.1.js"></script>
  </head>
  <body>
  ​
  <div class="demo"><h1>lalala</h1><p>Hello</p></div>
  ​
  <script>
  $( "div.demo" ).scrollTop( 300 );
  </script>
  ​
  </body>
  </html>
  ```
    */
  def scrollTop(value: Double): this.type = js.native
  
  @JSName("scroll")
  def scroll_false(handler: `false`): this.type = js.native
  @JSName("scroll")
  def scroll_scroll(handler: TypeEventHandler[TElement, Null, TElement, TElement, scroll]): this.type = js.native
  /**
    * Bind an event handler to the "scroll" JavaScript event, or trigger that event on an element.
    * @param eventData An object containing data that will be passed to the event handler.
    * @param handler A function to execute each time the event is triggered.
    * @see \`{@link https://api.jquery.com/scroll/ }\`
    * @since 1.4.3
    * @deprecated ​ Deprecated since 3.3. Use \`{@link on }\` or \`{@link trigger }\`.
    *
    * **Cause**: The `.on()` and `.trigger()` methods can set an event handler or generate an event for any event type, and should be used instead of the shortcut methods. This message also applies to the other event shorthands, including: blur, focus, focusin, focusout, resize, scroll, dblclick, mousedown, mouseup, mousemove, mouseover, mouseout, mouseenter, mouseleave, change, select, submit, keydown, keypress, keyup, and contextmenu.
    *
    * **Solution**: Instead of `.click(fn)` use `.on("click", fn)`. Instead of `.click()` use `.trigger("click")`.
    */
  @JSName("scroll")
  def scroll_scroll[TData](eventData: TData, handler: TypeEventHandler[TElement, TData, TElement, TElement, scroll]): this.type = js.native
  
  /**
    * Bind an event handler to the "select" JavaScript event, or trigger that event on an element.
    * @param handler A function to execute each time the event is triggered.
    * @see \`{@link https://api.jquery.com/select/ }\`
    * @since 1.0
    * @deprecated ​ Deprecated since 3.3. Use \`{@link on }\` or \`{@link trigger }\`.
    *
    * **Cause**: The `.on()` and `.trigger()` methods can set an event handler or generate an event for any event type, and should be used instead of the shortcut methods. This message also applies to the other event shorthands, including: blur, focus, focusin, focusout, resize, scroll, dblclick, mousedown, mouseup, mousemove, mouseover, mouseout, mouseenter, mouseleave, change, select, submit, keydown, keypress, keyup, and contextmenu.
    *
    * **Solution**: Instead of `.click(fn)` use `.on("click", fn)`. Instead of `.click()` use `.trigger("click")`.
    * @example ​ ````To do something when text in input boxes is selected:
  ```html
  <!doctype html>
  <html lang="en">
  <head>
    <meta charset="utf-8">
    <title>select demo</title>
    <style>
    p {
    color: blue;
    }
    div {
    color: red;
    }
    </style>
    <script src="https://code.jquery.com/jquery-3.3.1.js"></script>
  </head>
  <body>
  ​
    <p>Click and drag the mouse to select text in the inputs.</p>
    <input type="text" value="Some text">
    <input type="text" value="to test on">
    <div></div>
    ​
  <script>
  $( ":input" ).select(function() {
    $( "div" ).text( "Something was selected" ).show().fadeOut( 1000 );
  });
  </script>
  ​
  </body>
  </html>
  ```
    * @example ​ ````To trigger the select event on all input elements, try:
  ```javascript
  $( "input" ).select();
  ```
    */
  def select(): this.type = js.native
  @JSName("select")
  def select_false(handler: `false`): this.type = js.native
  @JSName("select")
  def select_select(handler: TypeEventHandler[TElement, Null, TElement, TElement, select]): this.type = js.native
  /**
    * Bind an event handler to the "select" JavaScript event, or trigger that event on an element.
    * @param eventData An object containing data that will be passed to the event handler.
    * @param handler A function to execute each time the event is triggered.
    * @see \`{@link https://api.jquery.com/select/ }\`
    * @since 1.4.3
    * @deprecated ​ Deprecated since 3.3. Use \`{@link on }\` or \`{@link trigger }\`.
    *
    * **Cause**: The `.on()` and `.trigger()` methods can set an event handler or generate an event for any event type, and should be used instead of the shortcut methods. This message also applies to the other event shorthands, including: blur, focus, focusin, focusout, resize, scroll, dblclick, mousedown, mouseup, mousemove, mouseover, mouseout, mouseenter, mouseleave, change, select, submit, keydown, keypress, keyup, and contextmenu.
    *
    * **Solution**: Instead of `.click(fn)` use `.on("click", fn)`. Instead of `.click()` use `.trigger("click")`.
    */
  @JSName("select")
  def select_select[TData](eventData: TData, handler: TypeEventHandler[TElement, TData, TElement, TElement, select]): this.type = js.native
  
  /**
    * Encode a set of form elements as a string for submission.
    * @see \`{@link https://api.jquery.com/serialize/ }\`
    * @since 1.0
    * @example ​ ````Serialize a form to a query string that could be sent to a server in an Ajax request.
  ```html
  <!doctype html>
  <html lang="en">
  <head>
    <meta charset="utf-8">
    <title>serialize demo</title>
    <style>
    body, select {
    font-size: 12px;
    }
    form {
    margin: 5px;
    }
    p {
    color: red;
    margin: 5px;
    font-size: 14px;
    }
    b {
    color: blue;
    }
    </style>
    <script src="https://code.jquery.com/jquery-3.3.1.js"></script>
  </head>
  <body>
  ​
  <form>
    <select name="single">
    <option>Single</option>
    <option>Single2</option>
    </select>
  ​
    <br>
    <select name="multiple" multiple="multiple">
    <option selected="selected">Multiple</option>
    <option>Multiple2</option>
    <option selected="selected">Multiple3</option>
    </select>
  ​
    <br>
    <input type="checkbox" name="check" value="check1" id="ch1">
    <label for="ch1">check1</label>
    <input type="checkbox" name="check" value="check2" checked="checked" id="ch2">
    <label for="ch2">check2</label>
  ​
    <br>
    <input type="radio" name="radio" value="radio1" checked="checked" id="r1">
    <label for="r1">radio1</label>
    <input type="radio" name="radio" value="radio2" id="r2">
    <label for="r2">radio2</label>
  </form>
  ​
  <p><tt id="results"></tt></p>
  ​
  <script>
    function showValues() {
    var str = $( "form" ).serialize();
    $( "#results" ).text( str );
    }
    $( "input[type='checkbox'], input[type='radio']" ).on( "click", showValues );
    $( "select" ).on( "change", showValues );
    showValues();
  </script>
  ​
  </body>
  </html>
  ```
    */
  def serialize(): String = js.native
  
  /**
    * Encode a set of form elements as an array of names and values.
    * @see \`{@link https://api.jquery.com/serializeArray/ }\`
    * @since 1.2
    * @example ​ ````Get the values from a form, iterate through them, and append them to a results display.
  ```html
  <!doctype html>
  <html lang="en">
  <head>
    <meta charset="utf-8">
    <title>serializeArray demo</title>
    <style>
    body, select {
    font-size: 14px;
    }
    form {
    margin: 5px;
    }
    p {
    color: red;
    margin: 5px;
    }
    b {
    color: blue;
    }
    </style>
    <script src="https://code.jquery.com/jquery-3.3.1.js"></script>
  </head>
  <body>
  ​
  <p><b>Results:</b> <span id="results"></span></p>
  <form>
    <select name="single">
    <option>Single</option>
    <option>Single2</option>
    </select>
    <select name="multiple" multiple="multiple">
    <option selected="selected">Multiple</option>
    <option>Multiple2</option>
    <option selected="selected">Multiple3</option>
    </select>
    <br>
    <input type="checkbox" name="check" value="check1" id="ch1">
    <label for="ch1">check1</label>
    <input type="checkbox" name="check" value="check2" checked="checked" id="ch2">
    <label for="ch2">check2</label>
    <input type="radio" name="radio" value="radio1" checked="checked" id="r1">
    <label for="r1">radio1</label>
    <input type="radio" name="radio" value="radio2" id="r2">
    <label for="r2">radio2</label>
  </form>
  ​
  <script>
    function showValues() {
    var fields = $( ":input" ).serializeArray();
    $( "#results" ).empty();
    jQuery.each( fields, function( i, field ) {
    $( "#results" ).append( field.value + " " );
    });
    }
  ​
    $( ":checkbox, :radio" ).click( showValues );
    $( "select" ).change( showValues );
    showValues();
  </script>
  ​
  </body>
  </html>
  ```
    */
  def serializeArray(): js.Array[NameValuePair] = js.native
  
  /**
    * Display the matched elements.
    * @param duration_complete_options _&#x40;param_ `duration_complete_options`
    * <br>
    * * `duration` — A string or number determining how long the animation will run. <br>
    * * `complete` — A function to call once the animation is complete, called once per matched element. <br>
    * * `options` — A map of additional options to pass to the method.
    * @see \`{@link https://api.jquery.com/show/ }\`
    * @since 1.0
    * @example ​ ````Animates all hidden paragraphs to show slowly, completing the animation within 600 milliseconds.
  ```html
  <!doctype html>
  <html lang="en">
  <head>
    <meta charset="utf-8">
    <title>show demo</title>
    <style>
    p {
    background: yellow;
    }
    </style>
    <script src="https://code.jquery.com/jquery-3.3.1.js"></script>
  </head>
  <body>
  ​
  <button>Show it</button>
  <p style="display: none">Hello  2</p>
  ​
  <script>
  $( "button" ).click(function() {
    $( "p" ).show( "slow" );
  });
  </script>
  ​
  </body>
  </html>
  ```
    */
  def show(): this.type = js.native
  def show(duration_complete_options: js.ThisFunction0[/* this */ TElement, Unit]): this.type = js.native
  def show(duration_complete_options: Duration): this.type = js.native
  def show(duration_complete_options: EffectsOptions[TElement]): this.type = js.native
  /**
    * Display the matched elements.
    * @param duration A string or number determining how long the animation will run.
    * @param easing_complete _&#x40;param_ `easing_complete`
    * <br>
    * * `easing` — A string indicating which easing function to use for the transition. <br>
    * * `complete` — A function to call once the animation is complete, called once per matched element.
    * @see \`{@link https://api.jquery.com/show/ }\`
    * @since 1.0
    * @since 1.4.3
    * @example ​ ````Show the first div, followed by each next adjacent sibling div in order, with a 200ms animation. Each animation starts when the previous sibling div&#39;s animation ends.
  ```html
  <!doctype html>
  <html lang="en">
  <head>
    <meta charset="utf-8">
    <title>show demo</title>
    <style>
    div {
    background: #def3ca;
    margin: 3px;
    width: 80px;
    display: none;
    float: left;
    text-align: center;
    }
    </style>
    <script src="https://code.jquery.com/jquery-3.3.1.js"></script>
  </head>
  <body>
  ​
  <button id="showr">Show</button>
  <button id="hidr">Hide</button>
  <div>Hello 3,</div>
  <div>how</div>
  <div>are</div>
  <div>you?</div>
  ​
  <script>
  $( "#showr" ).click(function() {
    $( "div" ).first().show( "fast", function showNext() {
    $( this ).next( "div" ).show( "fast", showNext );
    });
  });
  ​
  $( "#hidr" ).click(function() {
    $( "div" ).hide( 1000 );
  });
  </script>
  ​
  </body>
  </html>
  ```
    * @example ​ ````Show all span and input elements with an animation. Change the text once the animation is done.
  ```html
  <!doctype html>
  <html lang="en">
  <head>
    <meta charset="utf-8">
    <title>show demo</title>
    <style>
    span {
    display: none;
    }
    div {
    display: none;
    }
    p {
    font-weight: bold;
    background-color: #fcd;
    }
    </style>
    <script src="https://code.jquery.com/jquery-3.3.1.js"></script>
  </head>
  <body>
  ​
  <button>Do it!</button>
  <span>Are you sure? (type 'yes' if you are) </span>
  <div>
    <form>
    <input type="text"  value="as;ldkfjalsdf">
    </form>
  </div>
  <p style="display:none;">I'm hidden...</p>
  ​
  <script>
  function doIt() {
    $( "span,div" ).show( "slow" );
  }
  // Can pass in function name
  $( "button" ).click( doIt );
  ​
  $( "form" ).submit(function( event ) {
    if ( $( "input" ).val() === "yes" ) {
    $( "p" ).show( 4000, function() {
    $( this ).text( "Ok, DONE! (now showing)" );
    });
    }
    $( "span,div" ).hide( "fast" );
  ​
    // Prevent form submission
    event.preventDefault();
  });
  </script>
  ​
  </body>
  </html>
  ```
    */
  def show(duration: Duration, easing_complete: String): this.type = js.native
  def show(duration: Duration, easing_complete: js.ThisFunction0[/* this */ TElement, Unit]): this.type = js.native
  /**
    * Display the matched elements.
    * @param duration A string or number determining how long the animation will run.
    * @param easing A string indicating which easing function to use for the transition.
    * @param complete A function to call once the animation is complete, called once per matched element.
    * @see \`{@link https://api.jquery.com/show/ }\`
    * @since 1.4.3
    */
  def show(duration: Duration, easing: String, complete: js.ThisFunction0[/* this */ TElement, Unit]): this.type = js.native
  
  /**
    * Get the siblings of each element in the set of matched elements, optionally filtered by a selector.
    * @param selector A string containing a selector expression to match elements against.
    * @see \`{@link https://api.jquery.com/siblings/ }\`
    * @since 1.0
    * @example ​ ````Find the unique siblings of all yellow li elements in the 3 lists (including other yellow li elements if appropriate).
  ```html
  <!doctype html>
  <html lang="en">
  <head>
    <meta charset="utf-8">
    <title>siblings demo</title>
    <style>
    ul {
    float: left;
    margin: 5px;
    font-size: 16px;
    font-weight: bold;
    }
    p {
    color: blue;
    margin: 10px 20px;
    font-size: 16px;
    padding: 5px;
    font-weight: bolder;
    }
    .hilite {
    background: yellow;
    }
    </style>
    <script src="https://code.jquery.com/jquery-3.3.1.js"></script>
  </head>
  <body>
  ​
  <ul>
    <li>One</li>
    <li>Two</li>
    <li class="hilite">Three</li>
    <li>Four</li>
  </ul>
  ​
  <ul>
    <li>Five</li>
    <li>Six</li>
    <li>Seven</li>
  </ul>
  ​
  <ul>
    <li>Eight</li>
    <li class="hilite">Nine</li>
    <li>Ten</li>
    <li class="hilite">Eleven</li>
  </ul>
  ​
  <p>Unique siblings: <b></b></p>
  ​
  <script>
  var len = $( ".hilite" ).siblings()
    .css( "color", "red" )
    .length;
  $( "b" ).text( len );
  </script>
  ​
  </body>
  </html>
  ```
    * @example ​ ````Find all siblings with a class &quot;selected&quot; of each div.
  ```html
  <!doctype html>
  <html lang="en">
  <head>
    <meta charset="utf-8">
    <title>siblings demo</title>
    <script src="https://code.jquery.com/jquery-3.3.1.js"></script>
  </head>
  <body>
  ​
  <div><span>Hello</span></div>
  <p class="selected">Hello Again</p>
  <p>And Again</p>
  ​
  <script>
  $( "p" ).siblings( ".selected" ).css( "background", "yellow" );
  </script>
  ​
  </body>
  </html>
  ```
    */
  def siblings(): this.type = js.native
  def siblings(selector: Selector): this.type = js.native
  
  /**
    * Reduce the set of matched elements to a subset specified by a range of indices.
    * @param start An integer indicating the 0-based position at which the elements begin to be selected. If negative,
    *              it indicates an offset from the end of the set.
    * @param end An integer indicating the 0-based position at which the elements stop being selected. If negative,
    *            it indicates an offset from the end of the set. If omitted, the range continues until the end of the set.
    * @see \`{@link https://api.jquery.com/slice/ }\`
    * @since 1.1.4
    * @example ​ ````Turns divs yellow based on a random slice.
  ```html
  <!doctype html>
  <html lang="en">
  <head>
    <meta charset="utf-8">
    <title>slice demo</title>
    <style>
    div {
    width: 40px;
    height: 40px;
    margin: 10px;
    float: left;
    border: 2px solid blue;
    }
    span {
    color: red;
    font-weight: bold;
    }
    button {
    margin: 5px;
    }
    </style>
    <script src="https://code.jquery.com/jquery-3.3.1.js"></script>
  </head>
  <body>
  ​
  <p><button>Turn slice yellow</button>
    <span>Click the button!</span></p>
    <div></div>
    <div></div>
    <div></div>
    <div></div>
    <div></div>
    <div></div>
    <div></div>
    <div></div>
    <div></div>
    ​
  <script>
  function colorEm() {
    var $div = $( "div" );
    var start = Math.floor( Math.random() * $div.length );
    var end = Math.floor( Math.random() * ( $div.length - start ) ) +
    start + 1;
    if ( end === $div.length ) {
    end = undefined;
    }
    $div.css( "background", "" );
    if ( end ) {
    $div.slice( start, end ).css( "background", "yellow" );
    } else {
    $div.slice( start ).css( "background", "yellow" );
    }
    $( "span" ).text( "$( 'div' ).slice( " + start +
    (end ? ", " + end : "") +
    ").css( 'background', 'yellow' );" );
  }
  ​
  $( "button" ).click( colorEm );
  </script>
  ​
  </body>
  </html>
  ```
    * @example ​ ````Selects all paragraphs, then slices the selection to include only the first element.
  ```javascript
  $( "p" ).slice( 0, 1 ).wrapInner( "<b></b>" );
  ```
    * @example ​ ````Selects all paragraphs, then slices the selection to include only the first and second element.
  ```javascript
  $( "p" ).slice( 0, 2 ).wrapInner( "<b></b>" );
  ```
    * @example ​ ````Selects all paragraphs, then slices the selection to include only the second element.
  ```javascript
  $( "p" ).slice( 1, 2 ).wrapInner( "<b></b>" );
  ```
    * @example ​ ````Selects all paragraphs, then slices the selection to include only the second and third element.
  ```javascript
  $( "p" ).slice( 1 ).wrapInner( "<b></b>" );
  ```
    * @example ​ ````Selects all paragraphs, then slices the selection to include only the third element.
  ```javascript
  $( "p" ).slice( -1 ).wrapInner( "<b></b>" );
  ```
    */
  def slice(start: Double): this.type = js.native
  def slice(start: Double, end: Double): this.type = js.native
  
  /**
    * Display the matched elements with a sliding motion.
    * @param duration_easing_complete_options _&#x40;param_ `duration_easing_complete_options`
    * <br>
    * * `duration` — A string or number determining how long the animation will run. <br>
    * * `easing` — A string indicating which easing function to use for the transition. <br>
    * * `complete` — A function to call once the animation is complete, called once per matched element. <br>
    * * `options` — A map of additional options to pass to the method.
    * @see \`{@link https://api.jquery.com/slideDown/ }\`
    * @since 1.0
    * @since 1.4.3
    * @example ​ ````Animates all divs to slide down and show themselves over 600 milliseconds.
  ```html
  <!doctype html>
  <html lang="en">
  <head>
    <meta charset="utf-8">
    <title>slideDown demo</title>
    <style>
    div {
    background: #de9a44;
    margin: 3px;
    width: 80px;
    height: 40px;
    display: none;
    float: left;
    }
    </style>
    <script src="https://code.jquery.com/jquery-3.3.1.js"></script>
  </head>
  <body>
  ​
  Click me!
  <div></div>
  <div></div>
  <div></div>
  ​
  <script>
  $( document.body ).click(function () {
    if ( $( "div:first" ).is( ":hidden" ) ) {
    $( "div" ).slideDown( "slow" );
    } else {
    $( "div" ).hide();
    }
  });
  </script>
  ​
  </body>
  </html>
  ```
    */
  def slideDown(): this.type = js.native
  def slideDown(duration_easing_complete_options: String): this.type = js.native
  def slideDown(duration_easing_complete_options: js.ThisFunction0[/* this */ TElement, Unit]): this.type = js.native
  def slideDown(duration_easing_complete_options: Duration): this.type = js.native
  def slideDown(duration_easing_complete_options: EffectsOptions[TElement]): this.type = js.native
  def slideDown(duration_easing: String, complete: js.ThisFunction0[/* this */ TElement, Unit]): this.type = js.native
  /**
    * Display the matched elements with a sliding motion.
    * @param duration_easing _&#x40;param_ `duration_easing`
    * <br>
    * * `duration` — A string or number determining how long the animation will run. <br>
    * * `easing` — A string indicating which easing function to use for the transition.
    * @param complete A function to call once the animation is complete, called once per matched element.
    * @see \`{@link https://api.jquery.com/slideDown/ }\`
    * @since 1.0
    * @since 1.4.3
    * @example ​ ````Animates all inputs to slide down, completing the animation within 1000 milliseconds. Once the animation is done, the input look is changed especially if it is the middle input which gets the focus.
  ```html
  <!doctype html>
  <html lang="en">
  <head>
    <meta charset="utf-8">
    <title>slideDown demo</title>
    <style>
    div {
    background: #cfd;
    margin: 3px;
    width: 50px;
    text-align: center;
    float: left;
    cursor: pointer;
    border: 2px outset black;
    font-weight: bolder;
    }
    input {
    display: none;
    width: 120px;
    float: left;
    margin: 10px;
    }
    </style>
    <script src="https://code.jquery.com/jquery-3.3.1.js"></script>
  </head>
  <body>
  ​
  <div>Push!</div>
  <input type="text">
  <input type="text" class="middle">
  <input type="text">
    ​
  <script>
  $( "div" ).click(function() {
    $( this ).css({
    borderStyle: "inset",
    cursor: "wait"
    });
    $( "input" ).slideDown( 1000, function() {
    $( this )
    .css( "border", "2px red inset" )
    .filter( ".middle" )
    .css( "background", "yellow" )
    .focus();
    $( "div" ).css( "visibility", "hidden" );
    });
  });
  ​
  </script>
  ​
  </body>
  </html>
  ```
    */
  def slideDown(duration_easing: Duration, complete: js.ThisFunction0[/* this */ TElement, Unit]): this.type = js.native
  /**
    * Display the matched elements with a sliding motion.
    * @param duration A string or number determining how long the animation will run.
    * @param easing A string indicating which easing function to use for the transition.
    * @param complete A function to call once the animation is complete, called once per matched element.
    * @see \`{@link https://api.jquery.com/slideDown/ }\`
    * @since 1.4.3
    */
  def slideDown(duration: Duration, easing: String): this.type = js.native
  def slideDown(duration: Duration, easing: String, complete: js.ThisFunction0[/* this */ TElement, Unit]): this.type = js.native
  
  /**
    * Display or hide the matched elements with a sliding motion.
    * @param duration_easing_complete_options _&#x40;param_ `duration_easing_complete_options`
    * <br>
    * * `duration` — A string or number determining how long the animation will run. <br>
    * * `easing` — A string indicating which easing function to use for the transition. <br>
    * * `complete` — A function to call once the animation is complete, called once per matched element. <br>
    * * `options` — A map of additional options to pass to the method.
    * @see \`{@link https://api.jquery.com/slideToggle/ }\`
    * @since 1.0
    * @since 1.4.3
    * @example ​ ````Animates all paragraphs to slide up or down, completing the animation within 600 milliseconds.
  ```html
  <!doctype html>
  <html lang="en">
  <head>
    <meta charset="utf-8">
    <title>slideToggle demo</title>
    <style>
    p {
    width: 400px;
    }
    </style>
    <script src="https://code.jquery.com/jquery-3.3.1.js"></script>
  </head>
  <body>
  ​
  <button>Toggle</button>
  <p>
    This is the paragraph to end all paragraphs.  You
    should feel <em>lucky</em> to have seen such a paragraph in
    your life.  Congratulations!
  </p>
  ​
  <script>
  $( "button" ).click(function() {
    $( "p" ).slideToggle( "slow" );
  });
  </script>
  ​
  </body>
  </html>
  ```
    */
  def slideToggle(): this.type = js.native
  def slideToggle(duration_easing_complete_options: String): this.type = js.native
  def slideToggle(duration_easing_complete_options: js.ThisFunction0[/* this */ TElement, Unit]): this.type = js.native
  def slideToggle(duration_easing_complete_options: Duration): this.type = js.native
  def slideToggle(duration_easing_complete_options: EffectsOptions[TElement]): this.type = js.native
  def slideToggle(duration_easing: String, complete: js.ThisFunction0[/* this */ TElement, Unit]): this.type = js.native
  /**
    * Display or hide the matched elements with a sliding motion.
    * @param duration_easing _&#x40;param_ `duration_easing`
    * <br>
    * * `duration` — A string or number determining how long the animation will run. <br>
    * * `easing` — A string indicating which easing function to use for the transition.
    * @param complete A function to call once the animation is complete, called once per matched element.
    * @see \`{@link https://api.jquery.com/slideToggle/ }\`
    * @since 1.0
    * @since 1.4.3
    * @example ​ ````Animates divs between dividers with a toggle that makes some appear and some disappear.
  ```html
  <!doctype html>
  <html lang="en">
  <head>
    <meta charset="utf-8">
    <title>slideToggle demo</title>
    <style>
    div {
    background: #b977d1;
    margin: 3px;
    width: 60px;
    height: 60px;
    float: left;
    }
    div.still {
    background: #345;
    width: 5px;
    }
    div.hider {
    display: none;
    }
    span {
    color: red;
    }
    p {
    clear: left;
    }
    </style>
    <script src="https://code.jquery.com/jquery-3.3.1.js"></script>
  </head>
  <body>
  ​
  <div></div>
  <div class="still"></div>
  <div style="display:none;">
  </div><div class="still"></div>
  <div></div>
  <div class="still"></div>
  <div class="hider"></div>
  <div class="still"></div>
  <div class="hider"></div>
  <div class="still"></div>
  <div></div>
  <p><button id="aa">Toggle</button> There have been <span>0</span> toggled divs.</p>
  ​
  <script>
  $( "#aa" ).click(function() {
    $( "div:not(.still)" ).slideToggle( "slow", function() {
    var n = parseInt( $( "span" ).text(), 10 );
    $( "span" ).text( n + 1 );
    });
  });
  </script>
  ​
  </body>
  </html>
  ```
    */
  def slideToggle(duration_easing: Duration, complete: js.ThisFunction0[/* this */ TElement, Unit]): this.type = js.native
  /**
    * Display or hide the matched elements with a sliding motion.
    * @param duration A string or number determining how long the animation will run.
    * @param easing A string indicating which easing function to use for the transition.
    * @param complete A function to call once the animation is complete, called once per matched element.
    * @see \`{@link https://api.jquery.com/slideToggle/ }\`
    * @since 1.4.3
    */
  def slideToggle(duration: Duration, easing: String): this.type = js.native
  def slideToggle(duration: Duration, easing: String, complete: js.ThisFunction0[/* this */ TElement, Unit]): this.type = js.native
  
  /**
    * Hide the matched elements with a sliding motion.
    * @param duration_easing_complete_options _&#x40;param_ `duration_easing_complete_options`
    * <br>
    * * `duration` — A string or number determining how long the animation will run. <br>
    * * `easing` — A string indicating which easing function to use for the transition. <br>
    * * `complete` — A function to call once the animation is complete, called once per matched element. <br>
    * * `options` — A map of additional options to pass to the method.
    * @see \`{@link https://api.jquery.com/slideUp/ }\`
    * @since 1.0
    * @since 1.4.3
    * @example ​ ````Animates all divs to slide up, completing the animation within 400 milliseconds.
  ```html
  <!doctype html>
  <html lang="en">
  <head>
    <meta charset="utf-8">
    <title>slideUp demo</title>
    <style>
    div {
    background: #3d9a44;
    margin: 3px;
    width: 80px;
    height: 40px;
    float: left;
    }
    </style>
    <script src="https://code.jquery.com/jquery-3.3.1.js"></script>
  </head>
  <body>
  ​
  Click me!
  <div></div>
  <div></div>
  <div></div>
  <div></div>
  <div></div>
  ​
  <script>
  $( document.body ).click(function() {
    if ( $( "div:first" ).is( ":hidden" ) ) {
    $( "div" ).show( "slow" );
    } else {
    $( "div" ).slideUp();
    }
  });
  </script>
  ​
  </body>
  </html>
  ```
    */
  def slideUp(): this.type = js.native
  def slideUp(duration_easing_complete_options: String): this.type = js.native
  def slideUp(duration_easing_complete_options: js.ThisFunction0[/* this */ TElement, Unit]): this.type = js.native
  def slideUp(duration_easing_complete_options: Duration): this.type = js.native
  def slideUp(duration_easing_complete_options: EffectsOptions[TElement]): this.type = js.native
  def slideUp(duration_easing: String, complete: js.ThisFunction0[/* this */ TElement, Unit]): this.type = js.native
  /**
    * Hide the matched elements with a sliding motion.
    * @param duration_easing _&#x40;param_ `duration_easing`
    * <br>
    * * `duration` — A string or number determining how long the animation will run. <br>
    * * `easing` — A string indicating which easing function to use for the transition.
    * @param complete A function to call once the animation is complete, called once per matched element.
    * @see \`{@link https://api.jquery.com/slideUp/ }\`
    * @since 1.0
    * @since 1.4.3
    * @example ​ ````Animates the parent paragraph to slide up, completing the animation within 200 milliseconds. Once the animation is done, it displays an alert.
  ```html
  <!doctype html>
  <html lang="en">
  <head>
    <meta charset="utf-8">
    <title>slideUp demo</title>
    <style>
    div {
    margin: 2px;
    }
    </style>
    <script src="https://code.jquery.com/jquery-3.3.1.js"></script>
  </head>
  <body>
  ​
  <div>
    <button>Hide One</button>
    <input type="text" value="One">
  </div>
  ​
  <div>
    <button>Hide Two</button>
    <input type="text" value="Two">
  </div>
  ​
  <div>
    <button>Hide Three</button>
    <input type="text" value="Three">
  </div>
  ​
  <div id="msg"></div>
  ​
  <script>
  $( "button" ).click(function() {
    $( this ).parent().slideUp( "slow", function() {
    $( "#msg" ).text( $( "button", this ).text() + " has completed." );
    });
  });
  </script>
  ​
  </body>
  </html>
  ```
    */
  def slideUp(duration_easing: Duration, complete: js.ThisFunction0[/* this */ TElement, Unit]): this.type = js.native
  /**
    * Hide the matched elements with a sliding motion.
    * @param duration A string or number determining how long the animation will run.
    * @param easing A string indicating which easing function to use for the transition.
    * @param complete A function to call once the animation is complete, called once per matched element.
    * @see \`{@link https://api.jquery.com/slideUp/ }\`
    * @since 1.4.3
    */
  def slideUp(duration: Duration, easing: String): this.type = js.native
  def slideUp(duration: Duration, easing: String, complete: js.ThisFunction0[/* this */ TElement, Unit]): this.type = js.native
  
  /**
    * Stop the currently-running animation on the matched elements.
    * @param clearQueue A Boolean indicating whether to remove queued animation as well. Defaults to false.
    * @param jumpToEnd A Boolean indicating whether to complete the current animation immediately. Defaults to false.
    * @see \`{@link https://api.jquery.com/stop/ }\`
    * @since 1.2
    * @example ​ ````Click the Go button once to start the animation, then click the STOP button to stop it where it&#39;s currently positioned.  Another option is to click several buttons to queue them up and see that stop just kills the currently playing one.
  ```html
  <!doctype html>
  <html lang="en">
  <head>
    <meta charset="utf-8">
    <title>stop demo</title>
    <style>
    div {
    position: absolute;
    background-color: #abc;
    left: 0px;
    top: 30px;
    width: 60px;
    height: 60px;
    margin: 5px;
    }
    </style>
    <script src="https://code.jquery.com/jquery-3.3.1.js"></script>
  </head>
  <body>
  ​
  <button id="go">Go</button>
  <button id="stop">STOP!</button>
  <button id="back">Back</button>
  <div class="block"></div>
  ​
  <script>
  // Start animation
  $( "#go" ).click(function() {
    $( ".block" ).animate({ left: "+=100px" }, 2000 );
  });
  ​
  // Stop animation when button is clicked
  $( "#stop" ).click(function() {
    $( ".block" ).stop();
  });
  ​
  // Start animation in the opposite direction
  $( "#back" ).click(function() {
    $( ".block" ).animate({ left: "-=100px" }, 2000 );
  });
  </script>
  ​
  </body>
  </html>
  ```
    * @example ​ ````Click the slideToggle button to start the animation, then click again before the animation is completed. The animation will toggle the other direction from the saved starting point.
  ```html
  <!doctype html>
  <html lang="en">
  <head>
    <meta charset="utf-8">
    <title>stop demo</title>
    <style>
    .block {
    background-color: #abc;
    border: 2px solid black;
    width: 200px;
    height: 80px;
    margin: 10px;
    }
    </style>
    <script src="https://code.jquery.com/jquery-3.3.1.js"></script>
  </head>
  <body>
  ​
  <button id="toggle">slideToggle</button>
  <div class="block"></div>
  ​
  <script>
  var $block = $( ".block" );
  ​
  // Toggle a sliding animation animation
  $( "#toggle" ).on( "click", function() {
    $block.stop().slideToggle( 1000 );
  });
  </script>
  ​
  </body>
  </html>
  ```
    */
  def stop(): this.type = js.native
  def stop(clearQueue: js.UndefOr[scala.Nothing], jumpToEnd: Boolean): this.type = js.native
  def stop(clearQueue: Boolean): this.type = js.native
  def stop(clearQueue: Boolean, jumpToEnd: Boolean): this.type = js.native
  /**
    * Stop the currently-running animation on the matched elements.
    * @param queue The name of the queue in which to stop animations.
    * @param clearQueue A Boolean indicating whether to remove queued animation as well. Defaults to false.
    * @param jumpToEnd A Boolean indicating whether to complete the current animation immediately. Defaults to false.
    * @see \`{@link https://api.jquery.com/stop/ }\`
    * @since 1.7
    */
  def stop(queue: String): this.type = js.native
  def stop(queue: String, clearQueue: js.UndefOr[scala.Nothing], jumpToEnd: Boolean): this.type = js.native
  def stop(queue: String, clearQueue: Boolean): this.type = js.native
  def stop(queue: String, clearQueue: Boolean, jumpToEnd: Boolean): this.type = js.native
  
  /**
    * Bind an event handler to the "submit" JavaScript event, or trigger that event on an element.
    * @param handler A function to execute each time the event is triggered.
    * @see \`{@link https://api.jquery.com/submit/ }\`
    * @since 1.0
    * @deprecated ​ Deprecated since 3.3. Use \`{@link on }\` or \`{@link trigger }\`.
    *
    * **Cause**: The `.on()` and `.trigger()` methods can set an event handler or generate an event for any event type, and should be used instead of the shortcut methods. This message also applies to the other event shorthands, including: blur, focus, focusin, focusout, resize, scroll, dblclick, mousedown, mouseup, mousemove, mouseover, mouseout, mouseenter, mouseleave, change, select, submit, keydown, keypress, keyup, and contextmenu.
    *
    * **Solution**: Instead of `.click(fn)` use `.on("click", fn)`. Instead of `.click()` use `.trigger("click")`.
    * @example ​ ````If you&#39;d like to prevent forms from being submitted unless a flag variable is set, try:
  ```html
  <!doctype html>
  <html lang="en">
  <head>
    <meta charset="utf-8">
    <title>submit demo</title>
    <style>
    p {
    margin: 0;
    color: blue;
    }
    div,p {
    margin-left: 10px;
    }
    span {
    color: red;
    }
    </style>
    <script src="https://code.jquery.com/jquery-3.3.1.js"></script>
  </head>
  <body>
  ​
  <p>Type 'correct' to validate.</p>
  <form action="javascript:alert( 'success!' );">
    <div>
    <input type="text">
    <input type="submit">
    </div>
  </form>
  <span></span>
  ​
  <script>
  $( "form" ).submit(function( event ) {
    if ( $( "input:first" ).val() === "correct" ) {
    $( "span" ).text( "Validated..." ).show();
    return;
    }
  ​
    $( "span" ).text( "Not valid!" ).show().fadeOut( 1000 );
    event.preventDefault();
  });
  </script>
  ​
  </body>
  </html>
  ```
    * @example ​ ````If you&#39;d like to prevent forms from being submitted unless a flag variable is set, try:
  ```javascript
  $( "form" ).submit(function() {
    return this.some_flag_variable;
  });
  ```
    * @example ​ ````To trigger the submit event on the first form on the page, try:
  ```javascript
  $( "form:first" ).submit();
  ```
    */
  def submit(): this.type = js.native
  @JSName("submit")
  def submit_false(handler: `false`): this.type = js.native
  @JSName("submit")
  def submit_submit(handler: TypeEventHandler[TElement, Null, TElement, TElement, submit]): this.type = js.native
  /**
    * Bind an event handler to the "submit" JavaScript event, or trigger that event on an element.
    * @param eventData An object containing data that will be passed to the event handler.
    * @param handler A function to execute each time the event is triggered.
    * @see \`{@link https://api.jquery.com/submit/ }\`
    * @since 1.4.3
    * @deprecated ​ Deprecated since 3.3. Use \`{@link on }\` or \`{@link trigger }\`.
    *
    * **Cause**: The `.on()` and `.trigger()` methods can set an event handler or generate an event for any event type, and should be used instead of the shortcut methods. This message also applies to the other event shorthands, including: blur, focus, focusin, focusout, resize, scroll, dblclick, mousedown, mouseup, mousemove, mouseover, mouseout, mouseenter, mouseleave, change, select, submit, keydown, keypress, keyup, and contextmenu.
    *
    * **Solution**: Instead of `.click(fn)` use `.on("click", fn)`. Instead of `.click()` use `.trigger("click")`.
    */
  @JSName("submit")
  def submit_submit[TData](eventData: TData, handler: TypeEventHandler[TElement, TData, TElement, TElement, submit]): this.type = js.native
  
  /**
    * Get the combined text contents of each element in the set of matched elements, including their descendants.
    * @see \`{@link https://api.jquery.com/text/ }\`
    * @since 1.0
    * @example ​ ````Find the text in the first paragraph (stripping out the html), then set the html of the last paragraph to show it is just text (the red bold is gone).
  ```html
  <!doctype html>
  <html lang="en">
  <head>
    <meta charset="utf-8">
    <title>text demo</title>
    <style>
    p {
    color: blue;
    margin: 8px;
    }
    b {
    color: red;
    }
    </style>
    <script src="https://code.jquery.com/jquery-3.3.1.js"></script>
  </head>
  <body>
  ​
  <p><b>Test</b> Paragraph.</p>
  <p></p>
  ​
  <script>
  var str = $( "p:first" ).text();
  $( "p:last" ).html( str );
  </script>
  ​
  </body>
  </html>
  ```
    */
  def text(): String = js.native
  /**
    * Set the content of each element in the set of matched elements to the specified text.
    * @param text_function _&#x40;param_ `text_function`
    * <br>
    * * `text` — The text to set as the content of each matched element. When Number or Boolean is supplied, it will
    *            be converted to a String representation. <br>
    * * `function` — A function returning the text content to set. Receives the index position of the element in the set
    *                and the old text value as arguments.
    * @see \`{@link https://api.jquery.com/text/ }\`
    * @since 1.0
    * @since 1.4
    * @example ​ ````Add text to the paragraph (notice the bold tag is escaped).
  ```html
  <!doctype html>
  <html lang="en">
  <head>
    <meta charset="utf-8">
    <title>text demo</title>
    <style>
    p {
    color: blue;
    margin: 8px;
    }
    </style>
    <script src="https://code.jquery.com/jquery-3.3.1.js"></script>
  </head>
  <body>
  ​
  <p>Test Paragraph.</p>
  ​
  <script>
  $( "p" ).text( "<b>Some</b> new text." );
  </script>
  ​
  </body>
  </html>
  ```
    */
  def text(text_function: String): this.type = js.native
  def text(
    text_function: js.ThisFunction2[/* this */ TElement, /* index */ Double, /* text */ String, String | Double | Boolean]
  ): this.type = js.native
  def text(text_function: Boolean): this.type = js.native
  def text(text_function: Double): this.type = js.native
  
  /**
    * Retrieve all the elements contained in the jQuery set, as an array.
    * @see \`{@link https://api.jquery.com/toArray/ }\`
    * @since 1.4
    * @example ​ ````Select all divs in the document and return the DOM Elements as an Array; then use the built-in reverse() method to reverse that array.
  ```html
  <!doctype html>
  <html lang="en">
  <head>
    <meta charset="utf-8">
    <title>toArray demo</title>
    <style>
    span {
    color: red;
    }
    </style>
    <script src="https://code.jquery.com/jquery-3.3.1.js"></script>
  </head>
  <body>
  ​
  Reversed - <span></span>
  ​
  <div>One</div>
  <div>Two</div>
  <div>Three</div>​
  <script>
  function disp( divs ) {
    var a = [];
    for ( var i = 0; i < divs.length; i++ ) {
    a.push( divs[ i ].innerHTML );
    }
    $( "span" ).text( a.join( " " ) );
  }
  ​
  disp( $( "div" ).toArray().reverse() );
  </script>
  ​
  </body>
  </html>
  ```
    */
  def toArray(): js.Array[TElement] = js.native
  
  /**
    * Display or hide the matched elements.
    * @param duration_complete_options_display _&#x40;param_ `duration_complete_options_display`
    * <br>
    * * `duration` — A string or number determining how long the animation will run. <br>
    * * `complete` — A function to call once the animation is complete, called once per matched element. <br>
    * * `options` — A map of additional options to pass to the method. <br>
    * * `display` — Use true to show the element or false to hide it.
    * @see \`{@link https://api.jquery.com/toggle/ }\`
    * @since 1.0
    * @since 1.3
    * @example ​ ````Toggles all paragraphs.
  ```html
  <!doctype html>
  <html lang="en">
  <head>
    <meta charset="utf-8">
    <title>toggle demo</title>
    <script src="https://code.jquery.com/jquery-3.3.1.js"></script>
  </head>
  <body>
  ​
  <button>Toggle</button>
  <p>Hello</p>
  <p style="display: none">Good Bye</p>
  ​
  <script>
  $( "button" ).click(function() {
    $( "p" ).toggle();
  });
  </script>
  ​
  </body>
  </html>
  ```
    * @example ​ ````Animates all paragraphs to be shown if they are hidden and hidden if they are visible, completing the animation within 600 milliseconds.
  ```html
  <!doctype html>
  <html lang="en">
  <head>
    <meta charset="utf-8">
    <title>toggle demo</title>
    <style>
    p {
    background: #dad;
    font-weight: bold;
    font-size: 16px;
    }
    </style>
    <script src="https://code.jquery.com/jquery-3.3.1.js"></script>
  </head>
  <body>
  ​
  <button>Toggle 'em</button>
  <p>Hiya</p>
  <p>Such interesting text, eh?</p>
  ​
  <script>
  $( "button" ).click(function() {
    $( "p" ).toggle( "slow" );
  });
  </script>
  ​
  </body>
  </html>
  ```
    * @example ​ ````Shows all paragraphs, then hides them all, back and forth.
  ```html
  <!doctype html>
  <html lang="en">
  <head>
    <meta charset="utf-8">
    <title>toggle demo</title>
    <script src="https://code.jquery.com/jquery-3.3.1.js"></script>
  </head>
  <body>
  ​
  <button>Toggle</button>
  <p>Hello</p>
  <p style="display: none">Good Bye</p>
  ​
  <script>
  var flip = 0;
  $( "button" ).click(function() {
    $( "p" ).toggle( flip++ % 2 === 0 );
  });
  </script>
  ​
  </body>
  </html>
  ```
    */
  def toggle(): this.type = js.native
  def toggle(duration_complete_options_display: js.ThisFunction0[/* this */ TElement, Unit]): this.type = js.native
  def toggle(duration_complete_options_display: Boolean): this.type = js.native
  def toggle(duration_complete_options_display: Duration): this.type = js.native
  def toggle(duration_complete_options_display: EffectsOptions[TElement]): this.type = js.native
  /**
    * Display or hide the matched elements.
    * @param duration A string or number determining how long the animation will run.
    * @param complete A function to call once the animation is complete, called once per matched element.
    * @see \`{@link https://api.jquery.com/toggle/ }\`
    * @since 1.0
    */
  def toggle(duration: Duration, complete: js.ThisFunction0[/* this */ TElement, Unit]): this.type = js.native
  /**
    * Display or hide the matched elements.
    * @param duration A string or number determining how long the animation will run.
    * @param easing A string indicating which easing function to use for the transition.
    * @param complete A function to call once the animation is complete, called once per matched element.
    * @see \`{@link https://api.jquery.com/toggle/ }\`
    * @since 1.4.3
    */
  def toggle(duration: Duration, easing: String): this.type = js.native
  def toggle(duration: Duration, easing: String, complete: js.ThisFunction0[/* this */ TElement, Unit]): this.type = js.native
  
  /**
    * Add or remove one or more classes from each element in the set of matched elements, depending on either the class's presence or the value of the state argument.
    * @param state A boolean value to determine whether the class should be added or removed.
    * @see \`{@link https://api.jquery.com/toggleClass/ }\`
    * @since 1.4
    * @deprecated ​ Deprecated since 3.0. See \`{@link https://github.com/jquery/jquery/pull/2618 }\`.
    *
    * **Cause**: Calling `.toggleClass()` with no arguments, or with a single Boolean `true` or `false` argument, has been deprecated. Its behavior was poorly documented, but essentially the method saved away the current class value in a data item when the class was removed and restored the saved value when it was toggled back. If you do not believe you are specificially trying to use this form of the method, it is possible you are accidentally doing so via an inadvertent undefined value, as `.toggleClass( undefined )` toggles all classes.
    *
    * **Solution**: If this functionality is still needed, save the current full `.attr( "class" )` value in a data item and restore it when required.
    */
  def toggleClass(): this.type = js.native
  def toggleClass(state: Boolean): this.type = js.native
  def toggleClass[TState /* <: Boolean */](
    className_function: js.ThisFunction3[
      /* this */ TElement, 
      /* index */ Double, 
      /* className */ String, 
      /* state */ TState, 
      String
    ]
  ): this.type = js.native
  def toggleClass[TState /* <: Boolean */](
    className_function: js.ThisFunction3[
      /* this */ TElement, 
      /* index */ Double, 
      /* className */ String, 
      /* state */ TState, 
      String
    ],
    state: TState
  ): this.type = js.native
  /**
    * Add or remove one or more classes from each element in the set of matched elements, depending on either the class's presence or the value of the state argument.
    * @param className_function _&#x40;param_ `className_function`
    * <br>
    * * `className` — One or more class names (separated by spaces) to be toggled for each element in the matched set. <br>
    * * `function` — A function that returns class names to be toggled in the class attribute of each element in the
    *                matched set. Receives the index position of the element in the set, the old class value, and the state as arguments.
    * @param state A Boolean (not just truthy/falsy) value to determine whether the class should be added or removed.
    * @see \`{@link https://api.jquery.com/toggleClass/ }\`
    * @since 1.0
    * @since 1.3
    * @since 1.4
    * @since 3.3
    * @example ​ ````Toggle the class &#39;highlight&#39; when a paragraph is clicked.
  ```html
  <!doctype html>
  <html lang="en">
  <head>
    <meta charset="utf-8">
    <title>toggleClass demo</title>
    <style>
    p {
    margin: 4px;
    font-size: 16px;
    font-weight: bolder;
    cursor: pointer;
    }
    .blue {
    color: blue;
    }
    .highlight {
    background: yellow;
    }
    </style>
    <script src="https://code.jquery.com/jquery-3.3.1.js"></script>
  </head>
  <body>
  ​
  <p class="blue">Click to toggle</p>
  <p class="blue highlight">highlight</p>
  <p class="blue">on these</p>
  <p class="blue">paragraphs</p>
  ​
  <script>
  $( "p" ).click(function() {
    $( this ).toggleClass( "highlight" );
  });
  </script>
  ​
  </body>
  </html>
  ```
    * @example ​ ````Add the &quot;highlight&quot; class to the clicked paragraph on every third click of that paragraph, remove it every first and second click.
  ```html
  <!doctype html>
  <html lang="en">
  <head>
    <meta charset="utf-8">
    <title>toggleClass demo</title>
    <style>
    p {
    margin: 4px;
    font-size: 16px;
    font-weight: bolder;
    cursor: pointer;
    }
    .blue {
    color: blue;
    }
    .highlight {
    background: red;
    }
    </style>
    <script src="https://code.jquery.com/jquery-3.3.1.js"></script>
  </head>
  <body>
  ​
  <p class="blue">Click to toggle (<span>clicks: 0</span>)</p>
  <p class="blue highlight">highlight (<span>clicks: 0</span>)</p>
  <p class="blue">on these (<span>clicks: 0</span>)</p>
  <p class="blue">paragraphs (<span>clicks: 0</span>)</p>
  ​
  <script>
  var count = 0;
  $( "p" ).each(function() {
    var $thisParagraph = $( this );
    var count = 0;
    $thisParagraph.click(function() {
    count++;
    $thisParagraph.find( "span" ).text( "clicks: " + count );
    $thisParagraph.toggleClass( "highlight", count % 3 === 0 );
    });
  });
  </script>
  ​
  </body>
  </html>
  ```
    * @example ​ ````Toggle the class name(s) indicated on the buttons for each div.
  ```html
  <!doctype html>
  <html lang="en">
  <head>
    <meta charset="utf-8">
    <title>toggleClass demo</title>
    <style>
    .wrap > div {
    float: left;
    width: 100px;
    margin: 1em 1em 0 0;
    padding-left: 3px;
    border: 1px solid #abc;
    }
    div.a {
    background-color: aqua;
    }
    div.b {
    background-color: burlywood;
    }
    div.c {
    background-color: cornsilk;
    }
    </style>
    <script src="https://code.jquery.com/jquery-3.3.1.js"></script>
  </head>
  <body>
  ​
  <div class="buttons">
    <button>toggle</button>
    <button class="a">toggle a</button>
    <button class="a b">toggle a b</button>
    <button class="a b c">toggle a b c</button>
    <a href="#">reset</a>
  </div>
  <div class="wrap">
    <div></div>
    <div class="b"></div>
    <div class="a b"></div>
    <div class="a c"></div>
  </div>
  ​
  <script>
  var cls = [ "", "a", "a b", "a b c" ];
  var divs = $( "div.wrap" ).children();
  var appendClass = function() {
    divs.append(function() {
    return "<div>" + ( this.className || "none" ) + "</div>";
    });
  };
  ​
  appendClass();
  ​
  $( "button" ).on( "click", function() {
    var tc = this.className || undefined;
    divs.toggleClass( tc );
    appendClass();
  });
  ​
  $( "a" ).on( "click", function( event ) {
    event.preventDefault();
    divs.empty().each(function( i ) {
    this.className = cls[ i ];
    });
    appendClass();
  });
  </script>
  ​
  </body>
  </html>
  ```
    */
  def toggleClass[TState /* <: Boolean */](className_function: TypeOrArray[String]): this.type = js.native
  def toggleClass[TState /* <: Boolean */](className_function: TypeOrArray[String], state: TState): this.type = js.native
  
  /**
    * Execute all handlers and behaviors attached to the matched elements for the given event type.
    * @param eventType_event _&#x40;param_ `eventType_event`
    * <br>
    * * `eventType` — A string containing a JavaScript event type, such as `click` or `submit`. <br>
    * * `event` — A \`{@link https://api.jquery.com/category/events/event-object/ jQuery.Event}\` object.
    * @param extraParameters Additional parameters to pass along to the event handler.
    * @see \`{@link https://api.jquery.com/trigger/ }\`
    * @since 1.0
    * @since 1.3
    * @example ​ ````Clicks to button #2 also trigger a click for button #1.
  ```html
  <!doctype html>
  <html lang="en">
  <head>
    <meta charset="utf-8">
    <title>trigger demo</title>
    <style>
    button {
    margin: 10px;
    }
    div {
    color: blue;
    font-weight: bold;
    }
    span {
    color: red;
    }
    </style>
    <script src="https://code.jquery.com/jquery-3.3.1.js"></script>
  </head>
  <body>
  ​
  <button>Button #1</button>
  <button>Button #2</button>
  <div><span>0</span> button #1 clicks.</div>
  <div><span>0</span> button #2 clicks.</div>
  ​
  <script>
  $( "button:first" ).click(function() {
    update( $( "span:first" ) );
  });
  ​
  $( "button:last" ).click(function() {
    $( "button:first" ).trigger( "click" );
    update( $( "span:last" ) );
  });
  ​
  function update( j ) {
    var n = parseInt( j.text(), 10 );
    j.text( n + 1 );
  }
  </script>
  ​
  </body>
  </html>
  ```
    * @example ​ ````To submit the first form without using the submit() function, try:
  ```javascript
  $( "form:first" ).trigger( "submit" );
  ```
    * @example ​ ````To submit the first form without using the submit() function, try:
  ```javascript
  var event = jQuery.Event( "submit" );
  $( "form:first" ).trigger( event );
  if ( event.isDefaultPrevented() ) {
    // Perform an action...
  }
  ```
    * @example ​ ````To pass arbitrary data to an event:
  ```javascript
  $( "p" )
    .click(function( event, a, b ) {
    // When a normal click fires, a and b are undefined
    // for a trigger like below a refers to "foo" and b refers to "bar"
    })
    .trigger( "click", [ "foo", "bar" ] );
  ```
    * @example ​ ````To pass arbitrary data through an event object:
  ```javascript
  var event = jQuery.Event( "logged" );
  event.user = "foo";
  event.pass = "bar";
  $( "body" ).trigger( event );
  ```
    * @example ​ ````Alternative way to pass data through an event object:
  ```javascript
  $( "body" ).trigger({
    type:"logged",
    user:"foo",
    pass:"bar"
  });
  ```
    */
  def trigger(eventType_event: String): this.type = js.native
  def trigger(eventType_event: String, extraParameters: String): this.type = js.native
  def trigger(eventType_event: String, extraParameters: js.Array[_]): this.type = js.native
  def trigger(eventType_event: String, extraParameters: Boolean): this.type = js.native
  def trigger(eventType_event: String, extraParameters: Double): this.type = js.native
  def trigger(eventType_event: String, extraParameters: PlainObject[_]): this.type = js.native
  def trigger(eventType_event: typingsSlinky.jquery.JQuery.Event): this.type = js.native
  def trigger(eventType_event: typingsSlinky.jquery.JQuery.Event, extraParameters: String): this.type = js.native
  def trigger(eventType_event: typingsSlinky.jquery.JQuery.Event, extraParameters: js.Array[_]): this.type = js.native
  def trigger(eventType_event: typingsSlinky.jquery.JQuery.Event, extraParameters: Boolean): this.type = js.native
  def trigger(eventType_event: typingsSlinky.jquery.JQuery.Event, extraParameters: Double): this.type = js.native
  def trigger(eventType_event: typingsSlinky.jquery.JQuery.Event, extraParameters: PlainObject[_]): this.type = js.native
  
  /**
    * Execute all handlers attached to an element for an event.
    * @param eventType_event _&#x40;param_ `eventType_event`
    * <br>
    * * `eventType` — A string containing a JavaScript event type, such as `click` or `submit`. <br>
    * * `event` — A \`{@link https://api.jquery.com/category/events/event-object/ jQuery.Event}\` object.
    * @param extraParameters Additional parameters to pass along to the event handler.
    * @see \`{@link https://api.jquery.com/triggerHandler/ }\`
    * @since 1.2
    * @since 1.3
    * @example ​ ````If you called .triggerHandler() on a focus event - the browser&#39;s default focus action would not be triggered, only the event handlers bound to the focus event.
  ```html
  <!doctype html>
  <html lang="en">
  <head>
    <meta charset="utf-8">
    <title>triggerHandler demo</title>
    <script src="https://code.jquery.com/jquery-3.3.1.js"></script>
  </head>
  <body>
  ​
  <button id="old">.trigger( "focus" )</button>
  <button id="new">.triggerHandler( "focus" )</button><br><br>
  ​
  <input type="text" value="To Be Focused">
  ​
  <script>
  $( "#old" ).click(function() {
    $( "input" ).trigger( "focus" );
  });
  $( "#new" ).click(function() {
    $( "input" ).triggerHandler( "focus" );
  });
  $( "input" ).focus(function() {
    $( "<span>Focused!</span>" ).appendTo( "body" ).fadeOut( 1000 );
  });
  </script>
  ​
  </body>
  </html>
  ```
    */
  def triggerHandler(eventType_event: String): js.Any = js.native
  def triggerHandler(eventType_event: String, extraParameters: String): js.Any = js.native
  def triggerHandler(eventType_event: String, extraParameters: js.Array[_]): js.Any = js.native
  def triggerHandler(eventType_event: String, extraParameters: Boolean): js.Any = js.native
  def triggerHandler(eventType_event: String, extraParameters: Double): js.Any = js.native
  def triggerHandler(eventType_event: String, extraParameters: PlainObject[_]): js.Any = js.native
  def triggerHandler(eventType_event: typingsSlinky.jquery.JQuery.Event): js.Any = js.native
  def triggerHandler(eventType_event: typingsSlinky.jquery.JQuery.Event, extraParameters: String): js.Any = js.native
  def triggerHandler(eventType_event: typingsSlinky.jquery.JQuery.Event, extraParameters: js.Array[_]): js.Any = js.native
  def triggerHandler(eventType_event: typingsSlinky.jquery.JQuery.Event, extraParameters: Boolean): js.Any = js.native
  def triggerHandler(eventType_event: typingsSlinky.jquery.JQuery.Event, extraParameters: Double): js.Any = js.native
  def triggerHandler(eventType_event: typingsSlinky.jquery.JQuery.Event, extraParameters: PlainObject[_]): js.Any = js.native
  
  /**
    * Remove a previously-attached event handler from the elements.
    * @param event A string containing one or more DOM event types, such as "click" or "submit," or custom event names.
    *              A jQuery.Event object.
    * @see \`{@link https://api.jquery.com/unbind/ }\`
    * @since 1.0
    * @deprecated ​ Deprecated since 3.0. Use \`{@link off }\`.
    *
    * **Cause**: These event binding methods have been deprecated in favor of the `.on()` and `.off()` methods which can handle both delegated and direct event binding. Although the older methods are still present in jQuery 3.0, they may be removed as early as the next major-version update.
    *
    * **Solution**: Change the method call to use `.on()` or `.off()`, the documentation for the old methods include specific instructions. In general, the `.bind()` and `.unbind()` methods can be renamed directly to `.on()` and `.off()` respectively since the argument orders are identical.
    * @example ​ ````To unbind all events from all paragraphs, write:
  ```javascript
  $( "p" ).unbind();
  ```
    * @example ​ ````To unbind all click events from all paragraphs, write:
  ```javascript
  $( "p" ).unbind( "click" );
  ```
    */
  def unbind(): this.type = js.native
  def unbind(event: String): this.type = js.native
  def unbind(event: TriggeredEvent[TElement, _, _, _]): this.type = js.native
  /**
    * Remove a previously-attached event handler from the elements.
    * @param event A string containing one or more DOM event types, such as "click" or "submit," or custom event names.
    * @param handler A function to execute each time the event is triggered.
    * @see \`{@link https://api.jquery.com/unbind/ }\`
    * @since 1.0
    * @since 1.4.3
    * @deprecated ​ Deprecated since 3.0. Use \`{@link off }\`.
    *
    * **Cause**: These event binding methods have been deprecated in favor of the `.on()` and `.off()` methods which can handle both delegated and direct event binding. Although the older methods are still present in jQuery 3.0, they may be removed as early as the next major-version update.
    *
    * **Solution**: Change the method call to use `.on()` or `.off()`, the documentation for the old methods include specific instructions. In general, the `.bind()` and `.unbind()` methods can be renamed directly to `.on()` and `.off()` respectively since the argument orders are identical.
    * @example ​ ````Can bind and unbind events to the colored button.
  ```html
  <!doctype html>
  <html lang="en">
  <head>
    <meta charset="utf-8">
    <title>unbind demo</title>
    <style>
    button {
    margin: 5px;
    }
    button#theone {
    color: red;
    background: yellow;
    }
    </style>
    <script src="https://code.jquery.com/jquery-3.3.1.js"></script>
  </head>
  <body>
  ​
  <button id="theone">Does nothing...</button>
  <button id="bind">Bind Click</button>
  <button id="unbind">Unbind Click</button>
  <div style="display:none;">Click!</div>
  ​
  <script>
  function aClick() {
    $( "div" ).show().fadeOut( "slow" );
  }
  $( "#bind" ).click(function() {
    $( "#theone" )
    .bind( "click", aClick )
    .text( "Can Click!" );
  });
  $( "#unbind" ).click(function() {
    $( "#theone" )
    .unbind( "click", aClick )
    .text( "Does nothing..." );
  });
  </script>
  ​
  </body>
  </html>
  ```
    * @example ​ ````To unbind just one previously bound handler, pass the function in as the second argument:
  ```javascript
  var foo = function() {
    // Code to handle some kind of event
  };
  ​
  $( "p" ).bind( "click", foo ); // ... Now foo will be called when paragraphs are clicked ...
  ​
  $( "p" ).unbind( "click", foo ); // ... foo will no longer be called.
  ```
    */
  def unbind[TType /* <: String */](event: TType, handler: TypeEventHandler[TElement, _, TElement, TElement, TType]): this.type = js.native
  @JSName("unbind")
  def unbind_false[TType /* <: String */](event: TType, handler: `false`): this.type = js.native
  
  /**
    * Remove a handler from the event for all elements which match the current selector, based upon a specific set of root elements.
    * @param namespace A selector which will be used to filter the event results.
    * @see \`{@link https://api.jquery.com/undelegate/ }\`
    * @since 1.4.2
    * @since 1.6
    * @deprecated ​ Deprecated since 3.0. Use \`{@link off }\`.
    *
    * **Cause**: These event binding methods have been deprecated in favor of the `.on()` and `.off()` methods which can handle both delegated and direct event binding. Although the older methods are still present in jQuery 3.0, they may be removed as early as the next major-version update.
    *
    * **Solution**: Change the method call to use `.on()` or `.off()`, the documentation for the old methods include specific instructions. In general, the `.bind()` and `.unbind()` methods can be renamed directly to `.on()` and `.off()` respectively since the argument orders are identical.
    * @example ​ ````To unbind all delegated events from all paragraphs, write:
  ```javascript
  $( "p" ).undelegate();
  ```
    * @example ​ ````To unbind all delegated click events from all paragraphs, write:
  ```javascript
  $( "p" ).undelegate( "click" );
  ```
    * @example ​ ````To unbind all delegated events by their namespace:
  ```javascript
  var foo = function() {
    // Code to handle some kind of event
  };
  ​
  // Delegate events under the ".whatever" namespace
  $( "form" ).delegate( ":button", "click.whatever", foo );
  ​
  $( "form" ).delegate( "input[type='text'] ", "keypress.whatever", foo );
  ​
  // Unbind all events delegated under the ".whatever" namespace
  $( "form" ).undelegate( ".whatever" );
  ```
    */
  def undelegate(): this.type = js.native
  def undelegate(namespace: String): this.type = js.native
  /**
    * Remove a handler from the event for all elements which match the current selector, based upon a specific set of root elements.
    * @param selector A selector which will be used to filter the event results.
    * @param eventType_events _&#x40;param_ `eventType_events`
    * <br>
    * * `eventType` — A string containing a JavaScript event type, such as "click" or "keydown" <br>
    * * `events` — An object of one or more event types and previously bound functions to unbind from them.
    * @see \`{@link https://api.jquery.com/undelegate/ }\`
    * @since 1.4.2
    * @since 1.4.3
    * @deprecated ​ Deprecated since 3.0. Use \`{@link off }\`.
    *
    * **Cause**: These event binding methods have been deprecated in favor of the `.on()` and `.off()` methods which can handle both delegated and direct event binding. Although the older methods are still present in jQuery 3.0, they may be removed as early as the next major-version update.
    *
    * **Solution**: Change the method call to use `.on()` or `.off()`, the documentation for the old methods include specific instructions. In general, the `.bind()` and `.unbind()` methods can be renamed directly to `.on()` and `.off()` respectively since the argument orders are identical.
    */
  def undelegate(selector: Selector, eventType_events: String): this.type = js.native
  def undelegate(selector: Selector, eventType_events: TypeEventHandlers[TElement, _, _, _]): this.type = js.native
  /**
    * Remove a handler from the event for all elements which match the current selector, based upon a specific set of root elements.
    * @param selector A selector which will be used to filter the event results.
    * @param eventType A string containing a JavaScript event type, such as "click" or "keydown"
    * @param handler A function to execute each time the event is triggered.
    * @see \`{@link https://api.jquery.com/undelegate/ }\`
    * @since 1.4.2
    * @deprecated ​ Deprecated since 3.0. Use \`{@link off }\`.
    *
    * **Cause**: These event binding methods have been deprecated in favor of the `.on()` and `.off()` methods which can handle both delegated and direct event binding. Although the older methods are still present in jQuery 3.0, they may be removed as early as the next major-version update.
    *
    * **Solution**: Change the method call to use `.on()` or `.off()`, the documentation for the old methods include specific instructions. In general, the `.bind()` and `.unbind()` methods can be renamed directly to `.on()` and `.off()` respectively since the argument orders are identical.
    * @example ​ ````Can bind and unbind events to the colored button.
  ```html
  <!doctype html>
  <html lang="en">
  <head>
    <meta charset="utf-8">
    <title>undelegate demo</title>
    <style>
    button {
    margin: 5px;
    }
    button#theone {
    color: red;
    background: yellow;
    }
    </style>
    <script src="https://code.jquery.com/jquery-3.3.1.js"></script>
  </head>
  <body>
  ​
  <button id="theone">Does nothing...</button>
  <button id="bind">Bind Click</button>
  <button id="unbind">Unbind Click</button>
  <div style="display:none;">Click!</div>
  ​
  <script>
  function aClick() {
    $( "div" ).show().fadeOut( "slow" );
  }
  $( "#bind" ).click(function() {
    $( "body" )
    .delegate( "#theone", "click", aClick )
    .find( "#theone" ).text( "Can Click!" );
  });
  $( "#unbind" ).click(function() {
    $( "body" )
    .undelegate( "#theone", "click", aClick )
    .find( "#theone" ).text( "Does nothing..." );
  });
  </script>
  ​
  </body>
  </html>
  ```
    * @example ​ ````To undelegate just one previously bound handler, pass the function in as the third argument:
  ```javascript
  var foo = function () {
    // Code to handle some kind of event
  };
  ​
  // ... Now foo will be called when paragraphs are clicked ...
  $( "body" ).delegate( "p", "click", foo );
  ​
  // ... foo will no longer be called.
  $( "body" ).undelegate( "p", "click", foo );
  ```
    */
  def undelegate[TType /* <: String */](selector: Selector, eventType: TType, handler: TypeEventHandler[TElement, _, _, _, TType]): this.type = js.native
  @JSName("undelegate")
  def undelegate_false[TType /* <: String */](selector: Selector, eventType: TType, handler: `false`): this.type = js.native
  
  /**
    * Remove the parents of the set of matched elements from the DOM, leaving the matched elements in their place.
    * @param selector A selector to check the parent element against. If an element's parent does not match the selector,
    *                 the element won't be unwrapped.
    * @see \`{@link https://api.jquery.com/unwrap/ }\`
    * @since 1.4
    * @since 3.0
    * @example ​ ````Wrap/unwrap a div around each of the paragraphs.
  ```html
  <!doctype html>
  <html lang="en">
  <head>
    <meta charset="utf-8">
    <title>unwrap demo</title>
    <style>
    div {
    border: 2px solid blue;
    }
    p {
    background: yellow;
    margin: 4px;
    }
    </style>
    <script src="https://code.jquery.com/jquery-3.3.1.js"></script>
  </head>
  <body>
  ​<button>wrap/unwrap</button>
  <p>Hello</p>
  <p>cruel</p>
  <p>World</p>​
  <script>
  var pTags = $( "p" );
  $( "button" ).click(function() {
    if ( pTags.parent().is( "div" ) ) {
    pTags.unwrap();
    } else {
    pTags.wrap( "<div></div>" );
    }
  });
  </script>
  ​
  </body>
  </html>
  ```
    */
  def unwrap(): this.type = js.native
  def unwrap(selector: String): this.type = js.native
  
  /**
    * Get the current value of the first element in the set of matched elements.
    * @see \`{@link https://api.jquery.com/val/ }\`
    * @since 1.0
    * @example ​ ````Get the single value from a single select and an array of values from a multiple select and display their values.
  ```html
  <!doctype html>
  <html lang="en">
  <head>
    <meta charset="utf-8">
    <title>val demo</title>
    <style>
    p {
    color: red;
    margin: 4px;
    }
    b {
    color: blue;
    }
    </style>
    <script src="https://code.jquery.com/jquery-3.3.1.js"></script>
  </head>
  <body>
  ​
  <p></p>
  ​
  <select id="single">
    <option>Single</option>
    <option>Single2</option>
  </select>
  ​
  <select id="multiple" multiple="multiple">
    <option selected="selected">Multiple</option>
    <option>Multiple2</option>
    <option selected="selected">Multiple3</option>
  </select>
  ​
  <script>
  function displayVals() {
    var singleValues = $( "#single" ).val();
    var multipleValues = $( "#multiple" ).val() || [];
    // When using jQuery 3:
    // var multipleValues = $( "#multiple" ).val();
    $( "p" ).html( "<b>Single:</b> " + singleValues +
    " <b>Multiple:</b> " + multipleValues.join( ", " ) );
  }
  ​
  $( "select" ).change( displayVals );
  displayVals();
  </script>
  ​
  </body>
  </html>
  ```
    * @example ​ ````Find the value of an input box.
  ```html
  <!doctype html>
  <html lang="en">
  <head>
    <meta charset="utf-8">
    <title>val demo</title>
    <style>
    p {
    color: blue;
    margin: 8px;
    }
    </style>
    <script src="https://code.jquery.com/jquery-3.3.1.js"></script>
  </head>
  <body>
  ​
  <input type="text" value="some text">
  <p></p>
  ​
  <script>
  $( "input" )
    .keyup(function() {
    var value = $( this ).val();
    $( "p" ).text( value );
    })
    .keyup();
  </script>
  ​
  </body>
  </html>
  ```
    */
  def `val`(): js.UndefOr[String | Double | js.Array[String]] = js.native
  /**
    * Set the value of each element in the set of matched elements.
    * @param value_function _&#x40;param_ `value_function`
    * <br>
    * * `value` — A string of text, a number, or an array of strings corresponding to the value of each matched
    *             element to set as selected/checked. <br>
    * * `function` — A function returning the value to set. `this` is the current element. Receives the index position of
    *                the element in the set and the old value as arguments.
    * @see \`{@link https://api.jquery.com/val/ }\`
    * @since 1.0
    * @since 1.4
    * @example ​ ````Set the value of an input box.
  ```html
  <!doctype html>
  <html lang="en">
  <head>
    <meta charset="utf-8">
    <title>val demo</title>
    <style>
    button {
    margin: 4px;
    cursor: pointer;
    }
    input {
    margin: 4px;
    color: blue;
    }
    </style>
    <script src="https://code.jquery.com/jquery-3.3.1.js"></script>
  </head>
  <body>
  ​
  <div>
    <button>Feed</button>
    <button>the</button>
    <button>Input</button>
  </div>
  <input type="text" value="click a button">
  ​
  <script>
  $( "button" ).click(function() {
    var text = $( this ).text();
    $( "input" ).val( text );
  });
  </script>
  ​
  </body>
  </html>
  ```
    * @example ​ ````Use the function argument to modify the value of an input box.
  ```html
  <!doctype html>
  <html lang="en">
  <head>
    <meta charset="utf-8">
    <title>val demo</title>
    <script src="https://code.jquery.com/jquery-3.3.1.js"></script>
  </head>
  <body>
  ​
  <p>Type something and then click or tab out of the input.</p>
  <input type="text" value="type something">
  ​
  <script>
  $( "input" ).on( "blur", function() {
    $( this ).val(function( i, val ) {
    return val.toUpperCase();
    });
  });
  </script>
  ​
  </body>
  </html>
  ```
    * @example ​ ````Set a single select, a multiple select, checkboxes and a radio button .
  ```html
  <!doctype html>
  <html lang="en">
  <head>
    <meta charset="utf-8">
    <title>val demo</title>
    <style>
    body {
    color: blue;
    }
    </style>
    <script src="https://code.jquery.com/jquery-3.3.1.js"></script>
  </head>
  <body>
  ​
  <select id="single">
    <option>Single</option>
    <option>Single2</option>
  </select>
  ​
  <select id="multiple" multiple="multiple">
    <option selected="selected">Multiple</option>
    <option>Multiple2</option>
    <option selected="selected">Multiple3</option>
  </select>
  ​
  <br>
  <input type="checkbox" name="checkboxname" value="check1"> check1
  <input type="checkbox" name="checkboxname" value="check2"> check2
  <input type="radio" name="r" value="radio1"> radio1
  <input type="radio" name="r" value="radio2"> radio2
  ​
  <script>
  $( "#single" ).val( "Single2" );
  $( "#multiple" ).val([ "Multiple2", "Multiple3" ]);
  $( "input").val([ "check1", "check2", "radio1" ]);
  </script>
  ​
  </body>
  </html>
  ```
    */
  def `val`(value_function: String): this.type = js.native
  def `val`(value_function: js.Array[String]): this.type = js.native
  def `val`(
    value_function: js.ThisFunction2[/* this */ TElement, /* index */ Double, /* value */ String, String]
  ): this.type = js.native
  def `val`(value_function: Double): this.type = js.native
  
  /**
    * Get the current computed width for the first element in the set of matched elements.
    * @see \`{@link https://api.jquery.com/width/ }\`
    * @since 1.0
    * @example ​ ````Show various widths.  Note the values are from the iframe so might be smaller than you expected.  The yellow highlight shows the iframe body.
  ```html
  <!doctype html>
  <html lang="en">
  <head>
    <meta charset="utf-8">
    <title>width demo</title>
    <style>
    body {
    background: yellow;
    }
    button {
    font-size: 12px;
    margin: 2px;
    }
    p {
    width: 150px;
    border: 1px red solid;
    }
    div {
    color: red;
    font-weight: bold;
    }
    </style>
    <script src="https://code.jquery.com/jquery-3.3.1.js"></script>
  </head>
  <body>
  ​
  <button id="getp">Get Paragraph Width</button>
  <button id="getd">Get Document Width</button>
  <button id="getw">Get Window Width</button>
  <div>&nbsp;</div>
  <p>
    Sample paragraph to test width
  </p>
  ​
  <script>
  function showWidth( ele, w ) {
    $( "div" ).text( "The width for the " + ele + " is " + w + "px." );
  }
  $( "#getp" ).click(function() {
    showWidth( "paragraph", $( "p" ).width() );
  });
  $( "#getd" ).click(function() {
    showWidth( "document", $( document ).width() );
  });
  $("#getw").click(function() {
    showWidth( "window", $( window ).width() );
  });
  </script>
  ​
  </body>
  </html>
  ```
    */
  def width(): js.UndefOr[Double] = js.native
  /**
    * Set the CSS width of each element in the set of matched elements.
    * @param value_function _&#x40;param_ `value_function`
    * <br>
    * * `value` — An integer representing the number of pixels, or an integer along with an optional unit of measure
    *             appended (as a string). <br>
    * * `function` — A function returning the width to set. Receives the index position of the element in the set and the
    *                old width as arguments. Within the function, `this` refers to the current element in the set.
    * @see \`{@link https://api.jquery.com/width/ }\`
    * @since 1.0
    * @since 1.4.1
    * @example ​ ````Change the width of each div the first time it is clicked (and change its color).
  ```html
  <!doctype html>
  <html lang="en">
  <head>
    <meta charset="utf-8">
    <title>width demo</title>
    <style>
    div {
    width: 70px;
    height: 50px;
    float: left;
    margin: 5px;
    background: red;
    cursor: pointer;
    }
    .mod {
    background: blue;
    cursor: default;
    }
    </style>
    <script src="https://code.jquery.com/jquery-3.3.1.js"></script>
  </head>
  <body>
  ​
  <div>d</div>
  <div>d</div>
  <div>d</div>
  <div>d</div>
  <div>d</div>
  ​
  <script>
  var modWidth = 50;
  $( "div" ).one( "click", function() {
    $( this ).width( modWidth ).addClass( "mod" );
    modWidth -= 8;
  });
  </script>
  ​
  </body>
  </html>
  ```
    */
  def width(value_function: String): this.type = js.native
  def width(
    value_function: js.ThisFunction2[/* this */ TElement, /* index */ Double, /* value */ Double, String | Double]
  ): this.type = js.native
  def width(value_function: Double): this.type = js.native
  
  /**
    * Wrap an HTML structure around each element in the set of matched elements.
    * @param wrappingElement_function _&#x40;param_ `wrappingElement_function`
    * <br>
    * * `wrappingElement` — A selector, element, HTML string, or jQuery object specifying the structure to wrap around the
    *                       matched elements. When you pass a jQuery collection containing more than one element, or a selector
    *                       matching more than one element, the first element will be used. <br>
    * * `function` — A callback function returning the HTML content or jQuery object to wrap around the matched elements.
    *                Receives the index position of the element in the set as an argument. Within the function, `this`
    *                refers to the current element in the set.
    * @see \`{@link https://api.jquery.com/wrap/ }\`
    * @since 1.0
    * @since 1.4
    * @example ​ ````Wrap a new div around all of the paragraphs.
  ```html
  <!doctype html>
  <html lang="en">
  <head>
    <meta charset="utf-8">
    <title>wrap demo</title>
    <style>
    div {
    border: 2px solid blue;
    }
    p {
    background: yellow;
    margin: 4px;
    }
    </style>
    <script src="https://code.jquery.com/jquery-3.3.1.js"></script>
  </head>
  <body>
  ​
  <p>Hello</p>
  <p>cruel</p>
  <p>World</p>
  ​
  <script>
  $( "p" ).wrap( "<div></div>" );
  </script>
  ​
  </body>
  </html>
  ```
    * @example ​ ````Wraps a newly created tree of objects around the spans.  Notice anything in between the spans gets left out like the &lt;strong&gt; (red text) in this example.  Even the white space between spans is left out.  Click View Source to see the original html.&gt;
  ```html
  <!doctype html>
  <html lang="en">
  <head>
    <meta charset="utf-8">
    <title>wrap demo</title>
    <style>
    div {
    border: 2px blue solid;
    margin: 2px;
    padding: 2px;
    }
    p {
    background: yellow;
    margin: 2px;
    padding: 2px;
    }
    strong {
    color: red;
    }
    </style>
    <script src="https://code.jquery.com/jquery-3.3.1.js"></script>
  </head>
  <body>
  ​
  <span>Span Text</span>
  <strong>What about me?</strong>
  <span>Another One</span>
  ​
  <script>
  $( "span" ).wrap( "<div><div><p><em><b></b></em></p></div></div>" );
  </script>
  ​
  </body>
  </html>
  ```
    * @example ​ ````Wrap a new div around all of the paragraphs.
  ```html
  <!doctype html>
  <html lang="en">
  <head>
    <meta charset="utf-8">
    <title>wrap demo</title>
    <style>
    div {
    border: 2px solid blue;
    }
    p {
    background: yellow;
    margin: 4px;
    }
    </style>
    <script src="https://code.jquery.com/jquery-3.3.1.js"></script>
  </head>
  <body>
  ​
  <p>Hello</p>
  <p>cruel</p>
  <p>World</p>
  ​
  <script>
  $( "p" ).wrap( document.createElement( "div" ) );
  </script>
  ​
  </body>
  </html>
  ```
    * @example ​ ````Wrap a jQuery object double depth div around all of the paragraphs.  Notice it doesn&#39;t move the object but just clones it to wrap around its target.
  ```html
  <!doctype html>
  <html lang="en">
  <head>
    <meta charset="utf-8">
    <title>wrap demo</title>
    <style>
    div {
    border: 2px solid blue;
    margin: 2px;
    padding: 2px;
    }
    .doublediv {
    border-color: red;
    }
    p {
    background: yellow;
    margin: 4px;
    font-size: 14px;
    }
    </style>
    <script src="https://code.jquery.com/jquery-3.3.1.js"></script>
  </head>
  <body>
  ​
  <p>Hello</p>
  <p>cruel</p>
  <p>World</p>
  <div class="doublediv"><div></div></div>
  ​
  <script>
  $( "p" ).wrap( $( ".doublediv" ) );
  </script>
  ​
  </body>
  </html>
  ```
    */
  def wrap(wrappingElement_function: Selector | htmlString): this.type = js.native
  def wrap(
    wrappingElement_function: js.ThisFunction1[/* this */ TElement, /* index */ Double, String | JQuery[HTMLElement]]
  ): this.type = js.native
  def wrap(wrappingElement_function: Element): this.type = js.native
  def wrap(wrappingElement_function: JQuery[HTMLElement]): this.type = js.native
  
  /**
    * Wrap an HTML structure around all elements in the set of matched elements.
    * @param wrappingElement_function _&#x40;param_ `wrappingElement_function`
    * <br>
    * * `wrappingElement` — A selector, element, HTML string, or jQuery object specifying the structure to wrap around the matched elements. <br>
    * * `function` — A callback function returning the HTML content or jQuery object to wrap around all the matched
    *                elements. Within the function, `this` refers to the first element in the set. **Prior to jQuery
    *                3.0**, the callback was incorrectly called for every element in the set and received the index
    *                position of the element in the set as an argument.
    * @see \`{@link https://api.jquery.com/wrapAll/ }\`
    * @since 1.2
    * @since 1.4
    * @example ​ ````Wrap a new div around all of the paragraphs.
  ```html
  <!doctype html>
  <html lang="en">
  <head>
    <meta charset="utf-8">
    <title>wrapAll demo</title>
    <style>
    div {
    border: 2px solid blue;
    }
    p {
    background: yellow;
    margin: 4px;
    }
    </style>
    <script src="https://code.jquery.com/jquery-3.3.1.js"></script>
  </head>
  <body>
  ​
  <p>Hello</p>
  <p>cruel</p>
  <p>World</p>
  ​
  <script>
  $( "p" ).wrapAll( "<div></div>" );
  </script>
  ​
  </body>
  </html>
  ```
    * @example ​ ````Wraps a newly created tree of objects around the spans.  Notice anything in between the spans gets left out like the &lt;strong&gt; (red text) in this example.  Even the white space between spans is left out.  Click View Source to see the original html.
  ```html
  <!doctype html>
  <html lang="en">
  <head>
    <meta charset="utf-8">
    <title>wrapAll demo</title>
    <style>
    div {
    border: 2px blue solid;
    margin: 2px;
    padding: 2px;
    }
    p {
    background: yellow;
    margin: 2px;
    padding: 2px;
    }
    strong {
    color: red;
    }
    </style>
    <script src="https://code.jquery.com/jquery-3.3.1.js"></script>
  </head>
  <body>
  ​
  <span>Span Text</span>
  <strong>What about me?</strong>
  <span>Another One</span>
  ​
  <script>
  $( "span").wrapAll( "<div><div><p><em><b></b></em></p></div></div>" );
  </script>
  ​
  </body>
  </html>
  ```
    * @example ​ ````Wrap a new div around all of the paragraphs.
  ```html
  <!doctype html>
  <html lang="en">
  <head>
    <meta charset="utf-8">
    <title>wrapAll demo</title>
    <style>
    div {
    border: 2px solid blue;
    }
    p {
    background: yellow;
    margin: 4px;
    }
    </style>
    <script src="https://code.jquery.com/jquery-3.3.1.js"></script>
  </head>
  <body>
  ​
  <p>Hello</p>
  <p>cruel</p>
  <p>World</p>
  ​
  <script>
  $( "p" ).wrapAll( document.createElement( "div" ) );
  </script>
  ​
  </body>
  </html>
  ```
    * @example ​ ````Wrap a jQuery object double depth div around all of the paragraphs.  Notice it doesn&#39;t move the object but just clones it to wrap around its target.
  ```html
  <!doctype html>
  <html lang="en">
  <head>
    <meta charset="utf-8">
    <title>wrapAll demo</title>
    <style>
    div {
    border: 2px solid blue;
    margin: 2px;
    padding: 2px;
    }
    .doublediv {
    border-color: red;
    }
    p {
    background: yellow;
    margin: 4px;
    font-size: 14px;
    }
    </style>
    <script src="https://code.jquery.com/jquery-3.3.1.js"></script>
  </head>
  <body>
  ​
  <p>Hello</p>
  <p>cruel</p>
  <p>World</p>
  <div class="doublediv"><div></div></div>
  ​
  <script>
  $( "p" ).wrapAll( $( ".doublediv" ) );
  </script>
  ​
  </body>
  </html>
  ```
    */
  def wrapAll(wrappingElement_function: Selector | htmlString): this.type = js.native
  def wrapAll(wrappingElement_function: js.ThisFunction0[/* this */ TElement, String | JQuery[HTMLElement]]): this.type = js.native
  def wrapAll(wrappingElement_function: Element): this.type = js.native
  def wrapAll(wrappingElement_function: JQuery[HTMLElement]): this.type = js.native
  
  /**
    * Wrap an HTML structure around the content of each element in the set of matched elements.
    * @param wrappingElement_function _&#x40;param_ `wrappingElement_function`
    * <br>
    * * `wrappingElement` — An HTML snippet, selector expression, jQuery object, or DOM element specifying the structure to wrap
    *                       around the content of the matched elements. <br>
    * * `function` — A callback function which generates a structure to wrap around the content of the matched elements.
    *                Receives the index position of the element in the set as an argument. Within the function, `this`
    *                refers to the current element in the set.
    * @see \`{@link https://api.jquery.com/wrapInner/ }\`
    * @since 1.2
    * @since 1.4
    * @example ​ ````Selects all paragraphs and wraps a bold tag around each of its contents.
  ```html
  <!doctype html>
  <html lang="en">
  <head>
    <meta charset="utf-8">
    <title>wrapInner demo</title>
    <style>
    p {
    background: #bbf;
    }
    </style>
    <script src="https://code.jquery.com/jquery-3.3.1.js"></script>
  </head>
  <body>
  ​
  <p>Hello</p>
  <p>cruel</p>
  <p>World</p>
  ​
  <script>
  $( "p" ).wrapInner( "<b></b>" );
  </script>
  ​
  </body>
  </html>
  ```
    * @example ​ ````Wraps a newly created tree of objects around the inside of the body.
  ```html
  <!doctype html>
  <html lang="en">
  <head>
    <meta charset="utf-8">
    <title>wrapInner demo</title>
    <style>
    div {
    border: 2px green solid;
    margin: 2px;
    padding: 2px;
    }
    p {
    background: yellow;
    margin: 2px;
    padding: 2px;
    }
    </style>
    <script src="https://code.jquery.com/jquery-3.3.1.js"></script>
  </head>
  <body>
  ​
  Plain old text, or is it?
  ​
  <script>
  $( "body" ).wrapInner( "<div><div><p><em><b></b></em></p></div></div>" );
  </script>
  ​
  </body>
  </html>
  ```
    * @example ​ ````Selects all paragraphs and wraps a bold tag around each of its contents.
  ```html
  <!doctype html>
  <html lang="en">
  <head>
    <meta charset="utf-8">
    <title>wrapInner demo</title>
    <style>
    p {
    background: #9f9;
    }
    </style>
    <script src="https://code.jquery.com/jquery-3.3.1.js"></script>
  </head>
  <body>
  ​
  <p>Hello</p>
  <p>cruel</p>
  <p>World</p>
  ​
  <script>
  $( "p" ).wrapInner( document.createElement( "b" ) );
  </script>
  ​
  </body>
  </html>
  ```
    * @example ​ ````Selects all paragraphs and wraps a jQuery object around each of its contents.
  ```html
  <!doctype html>
  <html lang="en">
  <head>
    <meta charset="utf-8">
    <title>wrapInner demo</title>
    <style>
    p {
    background: #9f9;
    }
    .red {
    color: red;
    }
    </style>
    <script src="https://code.jquery.com/jquery-3.3.1.js"></script>
  </head>
  <body>
  ​
  <p>Hello</p>
  <p>cruel</p>
  <p>World</p>
  ​
  <script>
  $( "p" ).wrapInner( $( "<span class='red'></span>" ) );
  </script>
  ​
  </body>
  </html>
  ```
    */
  def wrapInner(wrappingElement_function: Selector | htmlString): this.type = js.native
  def wrapInner(
    wrappingElement_function: js.ThisFunction1[/* this */ TElement, /* index */ Double, String | JQuery[HTMLElement] | Element]
  ): this.type = js.native
  def wrapInner(wrappingElement_function: Element): this.type = js.native
  def wrapInner(wrappingElement_function: JQuery[HTMLElement]): this.type = js.native
}
object JQuery {
  
  object Ajax {
    
    /**
      * @see \`{@link https://api.jquery.com/jquery.ajax/#jQuery-ajax-settings }\`
      */
    @js.native
    trait AjaxSettingsBase[TContext] extends StObject {
      
      /**
        * A set of key/value pairs that map a given dataType to its MIME type, which gets sent in the Accept request header. This header tells the server what kind of response it will accept in return.
        */
      var accepts: js.UndefOr[PlainObject[String]] = js.native
      
      /**
        * By default, all requests are sent asynchronously (i.e. this is set to true by default). If you need synchronous requests, set this option to false. Cross-domain requests and dataType: "jsonp" requests do not support synchronous operation. Note that synchronous requests may temporarily lock the browser, disabling any actions while the request is active. As of jQuery 1.8, the use of async: false with jqXHR ($.Deferred) is deprecated; you must use the success/error/complete callback options instead of the corresponding methods of the jqXHR object such as jqXHR.done().
        */
      var async: js.UndefOr[Boolean] = js.native
      
      /**
        * A pre-request callback function that can be used to modify the jqXHR (in jQuery 1.4.x, XMLHTTPRequest) object before it is sent. Use this to set custom headers, etc. The jqXHR and settings objects are passed as arguments. This is an Ajax Event. Returning false in the beforeSend function will cancel the request. As of jQuery 1.5, the beforeSend option will be called regardless of the type of request.
        */
      var beforeSend: js.UndefOr[
            js.ThisFunction2[/* this */ TContext, /* jqXHR */ jqXHR[_], /* settings */ this.type, `false` | Unit]
          ] = js.native
      
      /**
        * If set to false, it will force requested pages not to be cached by the browser. Note: Setting cache to false will only work correctly with HEAD and GET requests. It works by appending "_={timestamp}" to the GET parameters. The parameter is not needed for other types of requests, except in IE8 when a POST is made to a URL that has already been requested by a GET.
        */
      var cache: js.UndefOr[Boolean] = js.native
      
      /**
        * A function to be called when the request finishes (after success and error callbacks are executed). The function gets passed two arguments: The jqXHR (in jQuery 1.4.x, XMLHTTPRequest) object and a string categorizing the status of the request ("success", "notmodified", "nocontent", "error", "timeout", "abort", or "parsererror"). As of jQuery 1.5, the complete setting can accept an array of functions. Each function will be called in turn. This is an Ajax Event.
        */
      var complete: js.UndefOr[TypeOrArray[CompleteCallback[TContext]]] = js.native
      
      /**
        * When sending data to the server, use this content type. Default is "application/x-www-form-urlencoded; charset=UTF-8", which is fine for most cases. If you explicitly pass in a content-type to $.ajax(), then it is always sent to the server (even if no data is sent). As of jQuery 1.6 you can pass false to tell jQuery to not set any content type header. Note: The W3C XMLHttpRequest specification dictates that the charset is always UTF-8; specifying another charset will not force the browser to change the encoding. Note: For cross-domain requests, setting the content type to anything other than application/x-www-form-urlencoded, multipart/form-data, or text/plain will trigger the browser to send a preflight OPTIONS request to the server.
        */
      var contentType: js.UndefOr[String | `false`] = js.native
      
      /**
        * An object of string/regular-expression pairs that determine how jQuery will parse the response, given its content type.
        */
      var contents: js.UndefOr[PlainObject[js.RegExp]] = js.native
      
      /**
        * This object will be the context of all Ajax-related callbacks. By default, the context is an object that represents the Ajax settings used in the call ($.ajaxSettings merged with the settings passed to $.ajax).
        */
      var context: js.UndefOr[TContext] = js.native
      
      /**
        * An object containing dataType-to-dataType converters. Each converter's value is a function that returns the transformed value of the response.
        */
      var converters: js.UndefOr[PlainObject[(js.Function1[/* value */ _, _]) | `true`]] = js.native
      
      /**
        * If you wish to force a crossDomain request (such as JSONP) on the same domain, set the value of crossDomain to true. This allows, for example, server-side redirection to another domain.
        */
      var crossDomain: js.UndefOr[Boolean] = js.native
      
      /**
        * Data to be sent to the server. It is converted to a query string, if not already a string. It's appended to the url for GET-requests. See processData option to prevent this automatic processing. Object must be Key/Value pairs. If value is an Array, jQuery serializes multiple values with same key based on the value of the traditional setting (described below).
        */
      var data: js.UndefOr[PlainObject[_] | String] = js.native
      
      /**
        * A function to be used to handle the raw response data of XMLHttpRequest. This is a pre-filtering function to sanitize the response. You should return the sanitized data. The function accepts two arguments: The raw data returned from the server and the 'dataType' parameter.
        */
      var dataFilter: js.UndefOr[js.Function2[/* data */ String, /* type */ String, _]] = js.native
      
      /**
        * The type of data that you're expecting back from the server. If none is specified, jQuery will try to infer it based on the MIME type of the response (an XML MIME type will yield XML, in 1.4 JSON will yield a JavaScript object, in 1.4 script will execute the script, and anything else will be returned as a string). The available types (and the result passed as the first argument to your success callback) are:
        *
        * "xml": Returns a XML document that can be processed via jQuery.
        *
        * "html": Returns HTML as plain text; included script tags are evaluated when inserted in the DOM.
        *
        * "script": Evaluates the response as JavaScript and returns it as plain text. Disables caching by appending a query string parameter, _=[TIMESTAMP], to the URL unless the cache option is set to true. Note: This will turn POSTs into GETs for remote-domain requests.
        *
        * "json": Evaluates the response as JSON and returns a JavaScript object. Cross-domain "json" requests are converted to "jsonp" unless the request includes jsonp: false in its request options. The JSON data is parsed in a strict manner; any malformed JSON is rejected and a parse error is thrown. As of jQuery 1.9, an empty response is also rejected; the server should return a response of null or {} instead. (See json.org for more information on proper JSON formatting.)
        *
        * "jsonp": Loads in a JSON block using JSONP. Adds an extra "?callback=?" to the end of your URL to specify the callback. Disables caching by appending a query string parameter, "_=[TIMESTAMP]", to the URL unless the cache option is set to true.
        *
        * "text": A plain text string.
        *
        * multiple, space-separated values: As of jQuery 1.5, jQuery can convert a dataType from what it received in the Content-Type header to what you require. For example, if you want a text response to be treated as XML, use "text xml" for the dataType. You can also make a JSONP request, have it received as text, and interpreted by jQuery as XML: "jsonp text xml". Similarly, a shorthand string such as "jsonp xml" will first attempt to convert from jsonp to xml, and, failing that, convert from jsonp to text, and then from text to xml.
        */
      var dataType: js.UndefOr[xml | html | script | json | jsonp | text | String] = js.native
      
      /**
        * The MIME type of content that is used to submit the form to the server. Possible values are:
        *
        * "application/x-www-form-urlencoded": The initial default type.
        *
        * "multipart/form-data": The type that allows file <input> element(s) to upload file data.
        *
        * "text/plain": A type introduced in HTML5.
        */
      var enctype: js.UndefOr[
            `applicationSlashx-www-form-urlencoded` | `multipartSlashform-data` | textSlashplain
          ] = js.native
      
      /**
        * A function to be called if the request fails. The function receives three arguments: The jqXHR (in jQuery 1.4.x, XMLHttpRequest) object, a string describing the type of error that occurred and an optional exception object, if one occurred. Possible values for the second argument (besides null) are "timeout", "error", "abort", and "parsererror". When an HTTP error occurs, errorThrown receives the textual portion of the HTTP status, such as "Not Found" or "Internal Server Error." As of jQuery 1.5, the error setting can accept an array of functions. Each function will be called in turn. Note: This handler is not called for cross-domain script and cross-domain JSONP requests. This is an Ajax Event.
        */
      var error: js.UndefOr[TypeOrArray[ErrorCallback[TContext]]] = js.native
      
      /**
        * Whether to trigger global Ajax event handlers for this request. The default is true. Set to false to prevent the global handlers like ajaxStart or ajaxStop from being triggered. This can be used to control various Ajax Events.
        */
      var global: js.UndefOr[Boolean] = js.native
      
      /**
        * An object of additional header key/value pairs to send along with requests using the XMLHttpRequest transport. The header X-Requested-With: XMLHttpRequest is always added, but its default XMLHttpRequest value can be changed here. Values in the headers setting can also be overwritten from within the beforeSend function.
        */
      var headers: js.UndefOr[PlainObject[js.UndefOr[String | Null]]] = js.native
      
      /**
        * Allow the request to be successful only if the response has changed since the last request. This is done by checking the Last-Modified header. Default value is false, ignoring the header. In jQuery 1.4 this technique also checks the 'etag' specified by the server to catch unmodified data.
        */
      var ifModified: js.UndefOr[Boolean] = js.native
      
      /**
        * Allow the current environment to be recognized as "local," (e.g. the filesystem), even if jQuery does not recognize it as such by default. The following protocols are currently recognized as local: file, *-extension, and widget. If the isLocal setting needs modification, it is recommended to do so once in the $.ajaxSetup() method.
        */
      var isLocal: js.UndefOr[Boolean] = js.native
      
      /**
        * Override the callback function name in a JSONP request. This value will be used instead of 'callback' in the 'callback=?' part of the query string in the url. So {jsonp:'onJSONPLoad'} would result in 'onJSONPLoad=?' passed to the server. As of jQuery 1.5, setting the jsonp option to false prevents jQuery from adding the "?callback" string to the URL or attempting to use "=?" for transformation. In this case, you should also explicitly set the jsonpCallback setting. For example, { jsonp: false, jsonpCallback: "callbackName" }. If you don't trust the target of your Ajax requests, consider setting the jsonp property to false for security reasons.
        */
      var jsonp: js.UndefOr[String | `false`] = js.native
      
      /**
        * Specify the callback function name for a JSONP request. This value will be used instead of the random name automatically generated by jQuery. It is preferable to let jQuery generate a unique name as it'll make it easier to manage the requests and provide callbacks and error handling. You may want to specify the callback when you want to enable better browser caching of GET requests. As of jQuery 1.5, you can also use a function for this setting, in which case the value of jsonpCallback is set to the return value of that function.
        */
      var jsonpCallback: js.UndefOr[String | (js.ThisFunction0[/* this */ TContext, String])] = js.native
      
      /**
        * The HTTP method to use for the request (e.g. "POST", "GET", "PUT").
        */
      var method: js.UndefOr[String] = js.native
      
      /**
        * A mime type to override the XHR mime type.
        */
      var mimeType: js.UndefOr[String] = js.native
      
      /**
        * A password to be used with XMLHttpRequest in response to an HTTP access authentication request.
        */
      var password: js.UndefOr[String] = js.native
      
      /**
        * By default, data passed in to the data option as an object (technically, anything other than a string) will be processed and transformed into a query string, fitting to the default content-type "application/x-www-form-urlencoded". If you want to send a DOMDocument, or other non-processed data, set this option to false.
        */
      var processData: js.UndefOr[Boolean] = js.native
      
      /**
        * Only applies when the "script" transport is used (e.g., cross-domain requests with "jsonp" or "script" dataType and "GET" type). Sets the charset attribute on the script tag used in the request. Used when the character set on the local page is not the same as the one on the remote script.
        */
      var scriptCharset: js.UndefOr[String] = js.native
      
      /**
        * An object of numeric HTTP codes and functions to be called when the response has the corresponding code.
        *
        * If the request is successful, the status code functions take the same parameters as the success callback; if it results in an error (including 3xx redirect), they take the same parameters as the error callback.
        */
      var statusCode: js.UndefOr[StatusCodeCallbacks[TContext]] = js.native
      
      /**
        * A function to be called if the request succeeds. The function gets passed three arguments: The data returned from the server, formatted according to the dataType parameter or the dataFilter callback function, if specified; a string describing the status; and the jqXHR (in jQuery 1.4.x, XMLHttpRequest) object. As of jQuery 1.5, the success setting can accept an array of functions. Each function will be called in turn. This is an Ajax Event.
        */
      var success: js.UndefOr[TypeOrArray[SuccessCallback[TContext]]] = js.native
      
      /**
        * Set a timeout (in milliseconds) for the request. A value of 0 means there will be no timeout. This will override any global timeout set with $.ajaxSetup(). The timeout period starts at the point the $.ajax call is made; if several other requests are in progress and the browser has no connections available, it is possible for a request to time out before it can be sent. In jQuery 1.4.x and below, the XMLHttpRequest object will be in an invalid state if the request times out; accessing any object members may throw an exception. In Firefox 3.0+ only, script and JSONP requests cannot be cancelled by a timeout; the script will run even if it arrives after the timeout period.
        */
      var timeout: js.UndefOr[Double] = js.native
      
      /**
        * Set this to true if you wish to use the traditional style of param serialization.
        */
      var traditional: js.UndefOr[Boolean] = js.native
      
      /**
        * An alias for method. You should use type if you're using versions of jQuery prior to 1.9.0.
        */
      var `type`: js.UndefOr[String] = js.native
      
      /**
        * A username to be used with XMLHttpRequest in response to an HTTP access authentication request.
        */
      var username: js.UndefOr[String] = js.native
      
      // ActiveXObject requires "lib": ["scripthost"] which consumers would also require
      /**
        * Callback for creating the XMLHttpRequest object. Defaults to the ActiveXObject when available (IE), the XMLHttpRequest otherwise. Override to provide your own implementation for XMLHttpRequest or enhancements to the factory.
        */
      var xhr: js.UndefOr[js.Function0[XMLHttpRequest]] = js.native
      
      /**
        * An object of fieldName-fieldValue pairs to set on the native XHR object.
        *
        * In jQuery 1.5, the withCredentials property was not propagated to the native XHR and thus CORS requests requiring it would ignore this flag. For this reason, we recommend using jQuery 1.5.1+ should you require the use of it.
        */
      var xhrFields: js.UndefOr[XHRFields] = js.native
    }
    object AjaxSettingsBase {
      
      @scala.inline
      def apply[TContext](): AjaxSettingsBase[TContext] = {
        val __obj = js.Dynamic.literal()
        __obj.asInstanceOf[AjaxSettingsBase[TContext]]
      }
      
      @scala.inline
      implicit class AjaxSettingsBaseMutableBuilder[Self <: AjaxSettingsBase[_], TContext] (val x: Self with AjaxSettingsBase[TContext]) extends AnyVal {
        
        @scala.inline
        def setAccepts(value: PlainObject[String]): Self = StObject.set(x, "accepts", value.asInstanceOf[js.Any])
        
        @scala.inline
        def setAcceptsUndefined: Self = StObject.set(x, "accepts", js.undefined)
        
        @scala.inline
        def setAsync(value: Boolean): Self = StObject.set(x, "async", value.asInstanceOf[js.Any])
        
        @scala.inline
        def setAsyncUndefined: Self = StObject.set(x, "async", js.undefined)
        
        @scala.inline
        def setBeforeSend(
          value: js.ThisFunction2[/* this */ TContext, /* jqXHR */ jqXHR[_], AjaxSettingsBase[TContext], `false` | Unit]
        ): Self = StObject.set(x, "beforeSend", value.asInstanceOf[js.Any])
        
        @scala.inline
        def setBeforeSendUndefined: Self = StObject.set(x, "beforeSend", js.undefined)
        
        @scala.inline
        def setCache(value: Boolean): Self = StObject.set(x, "cache", value.asInstanceOf[js.Any])
        
        @scala.inline
        def setCacheUndefined: Self = StObject.set(x, "cache", js.undefined)
        
        @scala.inline
        def setComplete(value: TypeOrArray[CompleteCallback[TContext]]): Self = StObject.set(x, "complete", value.asInstanceOf[js.Any])
        
        @scala.inline
        def setCompleteUndefined: Self = StObject.set(x, "complete", js.undefined)
        
        @scala.inline
        def setCompleteVarargs(value: CompleteCallback[TContext]*): Self = StObject.set(x, "complete", js.Array(value :_*))
        
        @scala.inline
        def setContentType(value: String | `false`): Self = StObject.set(x, "contentType", value.asInstanceOf[js.Any])
        
        @scala.inline
        def setContentTypeUndefined: Self = StObject.set(x, "contentType", js.undefined)
        
        @scala.inline
        def setContents(value: PlainObject[js.RegExp]): Self = StObject.set(x, "contents", value.asInstanceOf[js.Any])
        
        @scala.inline
        def setContentsUndefined: Self = StObject.set(x, "contents", js.undefined)
        
        @scala.inline
        def setContext(value: TContext): Self = StObject.set(x, "context", value.asInstanceOf[js.Any])
        
        @scala.inline
        def setContextUndefined: Self = StObject.set(x, "context", js.undefined)
        
        @scala.inline
        def setConverters(value: PlainObject[(js.Function1[/* value */ _, _]) | `true`]): Self = StObject.set(x, "converters", value.asInstanceOf[js.Any])
        
        @scala.inline
        def setConvertersUndefined: Self = StObject.set(x, "converters", js.undefined)
        
        @scala.inline
        def setCrossDomain(value: Boolean): Self = StObject.set(x, "crossDomain", value.asInstanceOf[js.Any])
        
        @scala.inline
        def setCrossDomainUndefined: Self = StObject.set(x, "crossDomain", js.undefined)
        
        @scala.inline
        def setData(value: PlainObject[_] | String): Self = StObject.set(x, "data", value.asInstanceOf[js.Any])
        
        @scala.inline
        def setDataFilter(value: (/* data */ String, /* type */ String) => _): Self = StObject.set(x, "dataFilter", js.Any.fromFunction2(value))
        
        @scala.inline
        def setDataFilterUndefined: Self = StObject.set(x, "dataFilter", js.undefined)
        
        @scala.inline
        def setDataType(value: xml | html | script | json | jsonp | text | String): Self = StObject.set(x, "dataType", value.asInstanceOf[js.Any])
        
        @scala.inline
        def setDataTypeUndefined: Self = StObject.set(x, "dataType", js.undefined)
        
        @scala.inline
        def setDataUndefined: Self = StObject.set(x, "data", js.undefined)
        
        @scala.inline
        def setEnctype(value: `applicationSlashx-www-form-urlencoded` | `multipartSlashform-data` | textSlashplain): Self = StObject.set(x, "enctype", value.asInstanceOf[js.Any])
        
        @scala.inline
        def setEnctypeUndefined: Self = StObject.set(x, "enctype", js.undefined)
        
        @scala.inline
        def setError(value: TypeOrArray[ErrorCallback[TContext]]): Self = StObject.set(x, "error", value.asInstanceOf[js.Any])
        
        @scala.inline
        def setErrorUndefined: Self = StObject.set(x, "error", js.undefined)
        
        @scala.inline
        def setErrorVarargs(value: ErrorCallback[TContext]*): Self = StObject.set(x, "error", js.Array(value :_*))
        
        @scala.inline
        def setGlobal(value: Boolean): Self = StObject.set(x, "global", value.asInstanceOf[js.Any])
        
        @scala.inline
        def setGlobalUndefined: Self = StObject.set(x, "global", js.undefined)
        
        @scala.inline
        def setHeaders(value: PlainObject[js.UndefOr[String | Null]]): Self = StObject.set(x, "headers", value.asInstanceOf[js.Any])
        
        @scala.inline
        def setHeadersUndefined: Self = StObject.set(x, "headers", js.undefined)
        
        @scala.inline
        def setIfModified(value: Boolean): Self = StObject.set(x, "ifModified", value.asInstanceOf[js.Any])
        
        @scala.inline
        def setIfModifiedUndefined: Self = StObject.set(x, "ifModified", js.undefined)
        
        @scala.inline
        def setIsLocal(value: Boolean): Self = StObject.set(x, "isLocal", value.asInstanceOf[js.Any])
        
        @scala.inline
        def setIsLocalUndefined: Self = StObject.set(x, "isLocal", js.undefined)
        
        @scala.inline
        def setJsonp(value: String | `false`): Self = StObject.set(x, "jsonp", value.asInstanceOf[js.Any])
        
        @scala.inline
        def setJsonpCallback(value: String | (js.ThisFunction0[/* this */ TContext, String])): Self = StObject.set(x, "jsonpCallback", value.asInstanceOf[js.Any])
        
        @scala.inline
        def setJsonpCallbackUndefined: Self = StObject.set(x, "jsonpCallback", js.undefined)
        
        @scala.inline
        def setJsonpUndefined: Self = StObject.set(x, "jsonp", js.undefined)
        
        @scala.inline
        def setMethod(value: String): Self = StObject.set(x, "method", value.asInstanceOf[js.Any])
        
        @scala.inline
        def setMethodUndefined: Self = StObject.set(x, "method", js.undefined)
        
        @scala.inline
        def setMimeType(value: String): Self = StObject.set(x, "mimeType", value.asInstanceOf[js.Any])
        
        @scala.inline
        def setMimeTypeUndefined: Self = StObject.set(x, "mimeType", js.undefined)
        
        @scala.inline
        def setPassword(value: String): Self = StObject.set(x, "password", value.asInstanceOf[js.Any])
        
        @scala.inline
        def setPasswordUndefined: Self = StObject.set(x, "password", js.undefined)
        
        @scala.inline
        def setProcessData(value: Boolean): Self = StObject.set(x, "processData", value.asInstanceOf[js.Any])
        
        @scala.inline
        def setProcessDataUndefined: Self = StObject.set(x, "processData", js.undefined)
        
        @scala.inline
        def setScriptCharset(value: String): Self = StObject.set(x, "scriptCharset", value.asInstanceOf[js.Any])
        
        @scala.inline
        def setScriptCharsetUndefined: Self = StObject.set(x, "scriptCharset", js.undefined)
        
        @scala.inline
        def setStatusCode(value: StatusCodeCallbacks[TContext]): Self = StObject.set(x, "statusCode", value.asInstanceOf[js.Any])
        
        @scala.inline
        def setStatusCodeUndefined: Self = StObject.set(x, "statusCode", js.undefined)
        
        @scala.inline
        def setSuccess(value: TypeOrArray[SuccessCallback[TContext]]): Self = StObject.set(x, "success", value.asInstanceOf[js.Any])
        
        @scala.inline
        def setSuccessUndefined: Self = StObject.set(x, "success", js.undefined)
        
        @scala.inline
        def setSuccessVarargs(value: SuccessCallback[TContext]*): Self = StObject.set(x, "success", js.Array(value :_*))
        
        @scala.inline
        def setTimeout(value: Double): Self = StObject.set(x, "timeout", value.asInstanceOf[js.Any])
        
        @scala.inline
        def setTimeoutUndefined: Self = StObject.set(x, "timeout", js.undefined)
        
        @scala.inline
        def setTraditional(value: Boolean): Self = StObject.set(x, "traditional", value.asInstanceOf[js.Any])
        
        @scala.inline
        def setTraditionalUndefined: Self = StObject.set(x, "traditional", js.undefined)
        
        @scala.inline
        def setType(value: String): Self = StObject.set(x, "type", value.asInstanceOf[js.Any])
        
        @scala.inline
        def setTypeUndefined: Self = StObject.set(x, "type", js.undefined)
        
        @scala.inline
        def setUsername(value: String): Self = StObject.set(x, "username", value.asInstanceOf[js.Any])
        
        @scala.inline
        def setUsernameUndefined: Self = StObject.set(x, "username", js.undefined)
        
        @scala.inline
        def setXhr(value: () => XMLHttpRequest): Self = StObject.set(x, "xhr", js.Any.fromFunction0(value))
        
        @scala.inline
        def setXhrFields(value: XHRFields): Self = StObject.set(x, "xhrFields", value.asInstanceOf[js.Any])
        
        @scala.inline
        def setXhrFieldsUndefined: Self = StObject.set(x, "xhrFields", js.undefined)
        
        @scala.inline
        def setXhrUndefined: Self = StObject.set(x, "xhr", js.undefined)
      }
    }
    
    type CompleteCallback[TContext] = js.ThisFunction2[/* this */ TContext, /* jqXHR */ jqXHR[js.Any], /* textStatus */ TextStatus, Unit]
    
    type ErrorCallback[TContext] = js.ThisFunction3[
        /* this */ TContext, 
        /* jqXHR */ jqXHR[js.Any], 
        /* textStatus */ ErrorTextStatus, 
        /* errorThrown */ String, 
        Unit
      ]
    
    /* Rewritten from type alias, can be one of: 
      - typingsSlinky.jquery.jqueryStrings.timeout
      - typingsSlinky.jquery.jqueryStrings.error
      - typingsSlinky.jquery.jqueryStrings.abort
      - typingsSlinky.jquery.jqueryStrings.parsererror
    */
    trait ErrorTextStatus extends StObject
    object ErrorTextStatus {
      
      @scala.inline
      def abort: typingsSlinky.jquery.jqueryStrings.abort = "abort".asInstanceOf[typingsSlinky.jquery.jqueryStrings.abort]
      
      @scala.inline
      def error: typingsSlinky.jquery.jqueryStrings.error = "error".asInstanceOf[typingsSlinky.jquery.jqueryStrings.error]
      
      @scala.inline
      def parsererror: typingsSlinky.jquery.jqueryStrings.parsererror = "parsererror".asInstanceOf[typingsSlinky.jquery.jqueryStrings.parsererror]
      
      @scala.inline
      def timeout: typingsSlinky.jquery.jqueryStrings.timeout = "timeout".asInstanceOf[typingsSlinky.jquery.jqueryStrings.timeout]
    }
    
    // region StatusCodeCallbacks
    // #region StatusCodeCallbacks
    @js.native
    trait StatusCodeCallbacks[TContext] extends // Status codes not listed require type annotations when defining the callback
    /* index */ NumberDictionary[SuccessCallback[TContext] | ErrorCallback[TContext]] {
      
      // region Success Status Codes
      // #region Success Status Codes
      // jQuery treats 2xx and 304 status codes as a success
      var `200`: js.UndefOr[SuccessCallback[TContext]] = js.native
      
      var `201`: js.UndefOr[SuccessCallback[TContext]] = js.native
      
      var `202`: js.UndefOr[SuccessCallback[TContext]] = js.native
      
      var `203`: js.UndefOr[SuccessCallback[TContext]] = js.native
      
      var `204`: js.UndefOr[SuccessCallback[TContext]] = js.native
      
      var `205`: js.UndefOr[SuccessCallback[TContext]] = js.native
      
      var `206`: js.UndefOr[SuccessCallback[TContext]] = js.native
      
      var `207`: js.UndefOr[SuccessCallback[TContext]] = js.native
      
      var `208`: js.UndefOr[SuccessCallback[TContext]] = js.native
      
      var `209`: js.UndefOr[SuccessCallback[TContext]] = js.native
      
      var `210`: js.UndefOr[SuccessCallback[TContext]] = js.native
      
      var `211`: js.UndefOr[SuccessCallback[TContext]] = js.native
      
      var `212`: js.UndefOr[SuccessCallback[TContext]] = js.native
      
      var `213`: js.UndefOr[SuccessCallback[TContext]] = js.native
      
      var `214`: js.UndefOr[SuccessCallback[TContext]] = js.native
      
      var `215`: js.UndefOr[SuccessCallback[TContext]] = js.native
      
      var `216`: js.UndefOr[SuccessCallback[TContext]] = js.native
      
      var `217`: js.UndefOr[SuccessCallback[TContext]] = js.native
      
      var `218`: js.UndefOr[SuccessCallback[TContext]] = js.native
      
      var `219`: js.UndefOr[SuccessCallback[TContext]] = js.native
      
      var `220`: js.UndefOr[SuccessCallback[TContext]] = js.native
      
      var `221`: js.UndefOr[SuccessCallback[TContext]] = js.native
      
      var `222`: js.UndefOr[SuccessCallback[TContext]] = js.native
      
      var `223`: js.UndefOr[SuccessCallback[TContext]] = js.native
      
      var `224`: js.UndefOr[SuccessCallback[TContext]] = js.native
      
      var `225`: js.UndefOr[SuccessCallback[TContext]] = js.native
      
      var `226`: js.UndefOr[SuccessCallback[TContext]] = js.native
      
      var `227`: js.UndefOr[SuccessCallback[TContext]] = js.native
      
      var `228`: js.UndefOr[SuccessCallback[TContext]] = js.native
      
      var `229`: js.UndefOr[SuccessCallback[TContext]] = js.native
      
      var `230`: js.UndefOr[SuccessCallback[TContext]] = js.native
      
      var `231`: js.UndefOr[SuccessCallback[TContext]] = js.native
      
      var `232`: js.UndefOr[SuccessCallback[TContext]] = js.native
      
      var `233`: js.UndefOr[SuccessCallback[TContext]] = js.native
      
      var `234`: js.UndefOr[SuccessCallback[TContext]] = js.native
      
      var `235`: js.UndefOr[SuccessCallback[TContext]] = js.native
      
      var `236`: js.UndefOr[SuccessCallback[TContext]] = js.native
      
      var `237`: js.UndefOr[SuccessCallback[TContext]] = js.native
      
      var `238`: js.UndefOr[SuccessCallback[TContext]] = js.native
      
      var `239`: js.UndefOr[SuccessCallback[TContext]] = js.native
      
      var `240`: js.UndefOr[SuccessCallback[TContext]] = js.native
      
      var `241`: js.UndefOr[SuccessCallback[TContext]] = js.native
      
      var `242`: js.UndefOr[SuccessCallback[TContext]] = js.native
      
      var `243`: js.UndefOr[SuccessCallback[TContext]] = js.native
      
      var `244`: js.UndefOr[SuccessCallback[TContext]] = js.native
      
      var `245`: js.UndefOr[SuccessCallback[TContext]] = js.native
      
      var `246`: js.UndefOr[SuccessCallback[TContext]] = js.native
      
      var `247`: js.UndefOr[SuccessCallback[TContext]] = js.native
      
      var `248`: js.UndefOr[SuccessCallback[TContext]] = js.native
      
      var `249`: js.UndefOr[SuccessCallback[TContext]] = js.native
      
      var `250`: js.UndefOr[SuccessCallback[TContext]] = js.native
      
      var `251`: js.UndefOr[SuccessCallback[TContext]] = js.native
      
      var `252`: js.UndefOr[SuccessCallback[TContext]] = js.native
      
      var `253`: js.UndefOr[SuccessCallback[TContext]] = js.native
      
      var `254`: js.UndefOr[SuccessCallback[TContext]] = js.native
      
      var `255`: js.UndefOr[SuccessCallback[TContext]] = js.native
      
      var `256`: js.UndefOr[SuccessCallback[TContext]] = js.native
      
      var `257`: js.UndefOr[SuccessCallback[TContext]] = js.native
      
      var `258`: js.UndefOr[SuccessCallback[TContext]] = js.native
      
      var `259`: js.UndefOr[SuccessCallback[TContext]] = js.native
      
      var `260`: js.UndefOr[SuccessCallback[TContext]] = js.native
      
      var `261`: js.UndefOr[SuccessCallback[TContext]] = js.native
      
      var `262`: js.UndefOr[SuccessCallback[TContext]] = js.native
      
      var `263`: js.UndefOr[SuccessCallback[TContext]] = js.native
      
      var `264`: js.UndefOr[SuccessCallback[TContext]] = js.native
      
      var `265`: js.UndefOr[SuccessCallback[TContext]] = js.native
      
      var `266`: js.UndefOr[SuccessCallback[TContext]] = js.native
      
      var `267`: js.UndefOr[SuccessCallback[TContext]] = js.native
      
      var `268`: js.UndefOr[SuccessCallback[TContext]] = js.native
      
      var `269`: js.UndefOr[SuccessCallback[TContext]] = js.native
      
      var `270`: js.UndefOr[SuccessCallback[TContext]] = js.native
      
      var `271`: js.UndefOr[SuccessCallback[TContext]] = js.native
      
      var `272`: js.UndefOr[SuccessCallback[TContext]] = js.native
      
      var `273`: js.UndefOr[SuccessCallback[TContext]] = js.native
      
      var `274`: js.UndefOr[SuccessCallback[TContext]] = js.native
      
      var `275`: js.UndefOr[SuccessCallback[TContext]] = js.native
      
      var `276`: js.UndefOr[SuccessCallback[TContext]] = js.native
      
      var `277`: js.UndefOr[SuccessCallback[TContext]] = js.native
      
      var `278`: js.UndefOr[SuccessCallback[TContext]] = js.native
      
      var `279`: js.UndefOr[SuccessCallback[TContext]] = js.native
      
      var `280`: js.UndefOr[SuccessCallback[TContext]] = js.native
      
      var `281`: js.UndefOr[SuccessCallback[TContext]] = js.native
      
      var `282`: js.UndefOr[SuccessCallback[TContext]] = js.native
      
      var `283`: js.UndefOr[SuccessCallback[TContext]] = js.native
      
      var `284`: js.UndefOr[SuccessCallback[TContext]] = js.native
      
      var `285`: js.UndefOr[SuccessCallback[TContext]] = js.native
      
      var `286`: js.UndefOr[SuccessCallback[TContext]] = js.native
      
      var `287`: js.UndefOr[SuccessCallback[TContext]] = js.native
      
      var `288`: js.UndefOr[SuccessCallback[TContext]] = js.native
      
      var `289`: js.UndefOr[SuccessCallback[TContext]] = js.native
      
      var `290`: js.UndefOr[SuccessCallback[TContext]] = js.native
      
      var `291`: js.UndefOr[SuccessCallback[TContext]] = js.native
      
      var `292`: js.UndefOr[SuccessCallback[TContext]] = js.native
      
      var `293`: js.UndefOr[SuccessCallback[TContext]] = js.native
      
      var `294`: js.UndefOr[SuccessCallback[TContext]] = js.native
      
      var `295`: js.UndefOr[SuccessCallback[TContext]] = js.native
      
      var `296`: js.UndefOr[SuccessCallback[TContext]] = js.native
      
      var `297`: js.UndefOr[SuccessCallback[TContext]] = js.native
      
      var `298`: js.UndefOr[SuccessCallback[TContext]] = js.native
      
      var `299`: js.UndefOr[SuccessCallback[TContext]] = js.native
      
      // #endregion
      // region Error Status Codes
      // #region Error Status Codes
      var `300`: js.UndefOr[ErrorCallback[TContext]] = js.native
      
      var `301`: js.UndefOr[ErrorCallback[TContext]] = js.native
      
      var `302`: js.UndefOr[ErrorCallback[TContext]] = js.native
      
      var `303`: js.UndefOr[ErrorCallback[TContext]] = js.native
      
      var `304`: js.UndefOr[SuccessCallback[TContext]] = js.native
      
      var `305`: js.UndefOr[ErrorCallback[TContext]] = js.native
      
      var `306`: js.UndefOr[ErrorCallback[TContext]] = js.native
      
      var `307`: js.UndefOr[ErrorCallback[TContext]] = js.native
      
      var `308`: js.UndefOr[ErrorCallback[TContext]] = js.native
      
      var `309`: js.UndefOr[ErrorCallback[TContext]] = js.native
      
      var `310`: js.UndefOr[ErrorCallback[TContext]] = js.native
      
      var `311`: js.UndefOr[ErrorCallback[TContext]] = js.native
      
      var `312`: js.UndefOr[ErrorCallback[TContext]] = js.native
      
      var `313`: js.UndefOr[ErrorCallback[TContext]] = js.native
      
      var `314`: js.UndefOr[ErrorCallback[TContext]] = js.native
      
      var `315`: js.UndefOr[ErrorCallback[TContext]] = js.native
      
      var `316`: js.UndefOr[ErrorCallback[TContext]] = js.native
      
      var `317`: js.UndefOr[ErrorCallback[TContext]] = js.native
      
      var `318`: js.UndefOr[ErrorCallback[TContext]] = js.native
      
      var `319`: js.UndefOr[ErrorCallback[TContext]] = js.native
      
      var `320`: js.UndefOr[ErrorCallback[TContext]] = js.native
      
      var `321`: js.UndefOr[ErrorCallback[TContext]] = js.native
      
      var `322`: js.UndefOr[ErrorCallback[TContext]] = js.native
      
      var `323`: js.UndefOr[ErrorCallback[TContext]] = js.native
      
      var `324`: js.UndefOr[ErrorCallback[TContext]] = js.native
      
      var `325`: js.UndefOr[ErrorCallback[TContext]] = js.native
      
      var `326`: js.UndefOr[ErrorCallback[TContext]] = js.native
      
      var `327`: js.UndefOr[ErrorCallback[TContext]] = js.native
      
      var `328`: js.UndefOr[ErrorCallback[TContext]] = js.native
      
      var `329`: js.UndefOr[ErrorCallback[TContext]] = js.native
      
      var `330`: js.UndefOr[ErrorCallback[TContext]] = js.native
      
      var `331`: js.UndefOr[ErrorCallback[TContext]] = js.native
      
      var `332`: js.UndefOr[ErrorCallback[TContext]] = js.native
      
      var `333`: js.UndefOr[ErrorCallback[TContext]] = js.native
      
      var `334`: js.UndefOr[ErrorCallback[TContext]] = js.native
      
      var `335`: js.UndefOr[ErrorCallback[TContext]] = js.native
      
      var `336`: js.UndefOr[ErrorCallback[TContext]] = js.native
      
      var `337`: js.UndefOr[ErrorCallback[TContext]] = js.native
      
      var `338`: js.UndefOr[ErrorCallback[TContext]] = js.native
      
      var `339`: js.UndefOr[ErrorCallback[TContext]] = js.native
      
      var `340`: js.UndefOr[ErrorCallback[TContext]] = js.native
      
      var `341`: js.UndefOr[ErrorCallback[TContext]] = js.native
      
      var `342`: js.UndefOr[ErrorCallback[TContext]] = js.native
      
      var `343`: js.UndefOr[ErrorCallback[TContext]] = js.native
      
      var `344`: js.UndefOr[ErrorCallback[TContext]] = js.native
      
      var `345`: js.UndefOr[ErrorCallback[TContext]] = js.native
      
      var `346`: js.UndefOr[ErrorCallback[TContext]] = js.native
      
      var `347`: js.UndefOr[ErrorCallback[TContext]] = js.native
      
      var `348`: js.UndefOr[ErrorCallback[TContext]] = js.native
      
      var `349`: js.UndefOr[ErrorCallback[TContext]] = js.native
      
      var `350`: js.UndefOr[ErrorCallback[TContext]] = js.native
      
      var `351`: js.UndefOr[ErrorCallback[TContext]] = js.native
      
      var `352`: js.UndefOr[ErrorCallback[TContext]] = js.native
      
      var `353`: js.UndefOr[ErrorCallback[TContext]] = js.native
      
      var `354`: js.UndefOr[ErrorCallback[TContext]] = js.native
      
      var `355`: js.UndefOr[ErrorCallback[TContext]] = js.native
      
      var `356`: js.UndefOr[ErrorCallback[TContext]] = js.native
      
      var `357`: js.UndefOr[ErrorCallback[TContext]] = js.native
      
      var `358`: js.UndefOr[ErrorCallback[TContext]] = js.native
      
      var `359`: js.UndefOr[ErrorCallback[TContext]] = js.native
      
      var `360`: js.UndefOr[ErrorCallback[TContext]] = js.native
      
      var `361`: js.UndefOr[ErrorCallback[TContext]] = js.native
      
      var `362`: js.UndefOr[ErrorCallback[TContext]] = js.native
      
      var `363`: js.UndefOr[ErrorCallback[TContext]] = js.native
      
      var `364`: js.UndefOr[ErrorCallback[TContext]] = js.native
      
      var `365`: js.UndefOr[ErrorCallback[TContext]] = js.native
      
      var `366`: js.UndefOr[ErrorCallback[TContext]] = js.native
      
      var `367`: js.UndefOr[ErrorCallback[TContext]] = js.native
      
      var `368`: js.UndefOr[ErrorCallback[TContext]] = js.native
      
      var `369`: js.UndefOr[ErrorCallback[TContext]] = js.native
      
      var `370`: js.UndefOr[ErrorCallback[TContext]] = js.native
      
      var `371`: js.UndefOr[ErrorCallback[TContext]] = js.native
      
      var `372`: js.UndefOr[ErrorCallback[TContext]] = js.native
      
      var `373`: js.UndefOr[ErrorCallback[TContext]] = js.native
      
      var `374`: js.UndefOr[ErrorCallback[TContext]] = js.native
      
      var `375`: js.UndefOr[ErrorCallback[TContext]] = js.native
      
      var `376`: js.UndefOr[ErrorCallback[TContext]] = js.native
      
      var `377`: js.UndefOr[ErrorCallback[TContext]] = js.native
      
      var `378`: js.UndefOr[ErrorCallback[TContext]] = js.native
      
      var `379`: js.UndefOr[ErrorCallback[TContext]] = js.native
      
      var `380`: js.UndefOr[ErrorCallback[TContext]] = js.native
      
      var `381`: js.UndefOr[ErrorCallback[TContext]] = js.native
      
      var `382`: js.UndefOr[ErrorCallback[TContext]] = js.native
      
      var `383`: js.UndefOr[ErrorCallback[TContext]] = js.native
      
      var `384`: js.UndefOr[ErrorCallback[TContext]] = js.native
      
      var `385`: js.UndefOr[ErrorCallback[TContext]] = js.native
      
      var `386`: js.UndefOr[ErrorCallback[TContext]] = js.native
      
      var `387`: js.UndefOr[ErrorCallback[TContext]] = js.native
      
      var `388`: js.UndefOr[ErrorCallback[TContext]] = js.native
      
      var `389`: js.UndefOr[ErrorCallback[TContext]] = js.native
      
      var `390`: js.UndefOr[ErrorCallback[TContext]] = js.native
      
      var `391`: js.UndefOr[ErrorCallback[TContext]] = js.native
      
      var `392`: js.UndefOr[ErrorCallback[TContext]] = js.native
      
      var `393`: js.UndefOr[ErrorCallback[TContext]] = js.native
      
      var `394`: js.UndefOr[ErrorCallback[TContext]] = js.native
      
      var `395`: js.UndefOr[ErrorCallback[TContext]] = js.native
      
      var `396`: js.UndefOr[ErrorCallback[TContext]] = js.native
      
      var `397`: js.UndefOr[ErrorCallback[TContext]] = js.native
      
      var `398`: js.UndefOr[ErrorCallback[TContext]] = js.native
      
      var `399`: js.UndefOr[ErrorCallback[TContext]] = js.native
      
      var `400`: js.UndefOr[ErrorCallback[TContext]] = js.native
      
      var `401`: js.UndefOr[ErrorCallback[TContext]] = js.native
      
      var `402`: js.UndefOr[ErrorCallback[TContext]] = js.native
      
      var `403`: js.UndefOr[ErrorCallback[TContext]] = js.native
      
      var `404`: js.UndefOr[ErrorCallback[TContext]] = js.native
      
      var `405`: js.UndefOr[ErrorCallback[TContext]] = js.native
      
      var `406`: js.UndefOr[ErrorCallback[TContext]] = js.native
      
      var `407`: js.UndefOr[ErrorCallback[TContext]] = js.native
      
      var `408`: js.UndefOr[ErrorCallback[TContext]] = js.native
      
      var `409`: js.UndefOr[ErrorCallback[TContext]] = js.native
      
      var `410`: js.UndefOr[ErrorCallback[TContext]] = js.native
      
      var `411`: js.UndefOr[ErrorCallback[TContext]] = js.native
      
      var `412`: js.UndefOr[ErrorCallback[TContext]] = js.native
      
      var `413`: js.UndefOr[ErrorCallback[TContext]] = js.native
      
      var `414`: js.UndefOr[ErrorCallback[TContext]] = js.native
      
      var `415`: js.UndefOr[ErrorCallback[TContext]] = js.native
      
      var `416`: js.UndefOr[ErrorCallback[TContext]] = js.native
      
      var `417`: js.UndefOr[ErrorCallback[TContext]] = js.native
      
      var `418`: js.UndefOr[ErrorCallback[TContext]] = js.native
      
      var `419`: js.UndefOr[ErrorCallback[TContext]] = js.native
      
      var `420`: js.UndefOr[ErrorCallback[TContext]] = js.native
      
      var `421`: js.UndefOr[ErrorCallback[TContext]] = js.native
      
      var `422`: js.UndefOr[ErrorCallback[TContext]] = js.native
      
      var `423`: js.UndefOr[ErrorCallback[TContext]] = js.native
      
      var `424`: js.UndefOr[ErrorCallback[TContext]] = js.native
      
      var `425`: js.UndefOr[ErrorCallback[TContext]] = js.native
      
      var `426`: js.UndefOr[ErrorCallback[TContext]] = js.native
      
      var `427`: js.UndefOr[ErrorCallback[TContext]] = js.native
      
      var `428`: js.UndefOr[ErrorCallback[TContext]] = js.native
      
      var `429`: js.UndefOr[ErrorCallback[TContext]] = js.native
      
      var `430`: js.UndefOr[ErrorCallback[TContext]] = js.native
      
      var `431`: js.UndefOr[ErrorCallback[TContext]] = js.native
      
      var `432`: js.UndefOr[ErrorCallback[TContext]] = js.native
      
      var `433`: js.UndefOr[ErrorCallback[TContext]] = js.native
      
      var `434`: js.UndefOr[ErrorCallback[TContext]] = js.native
      
      var `435`: js.UndefOr[ErrorCallback[TContext]] = js.native
      
      var `436`: js.UndefOr[ErrorCallback[TContext]] = js.native
      
      var `437`: js.UndefOr[ErrorCallback[TContext]] = js.native
      
      var `438`: js.UndefOr[ErrorCallback[TContext]] = js.native
      
      var `439`: js.UndefOr[ErrorCallback[TContext]] = js.native
      
      var `440`: js.UndefOr[ErrorCallback[TContext]] = js.native
      
      var `441`: js.UndefOr[ErrorCallback[TContext]] = js.native
      
      var `442`: js.UndefOr[ErrorCallback[TContext]] = js.native
      
      var `443`: js.UndefOr[ErrorCallback[TContext]] = js.native
      
      var `444`: js.UndefOr[ErrorCallback[TContext]] = js.native
      
      var `445`: js.UndefOr[ErrorCallback[TContext]] = js.native
      
      var `446`: js.UndefOr[ErrorCallback[TContext]] = js.native
      
      var `447`: js.UndefOr[ErrorCallback[TContext]] = js.native
      
      var `448`: js.UndefOr[ErrorCallback[TContext]] = js.native
      
      var `449`: js.UndefOr[ErrorCallback[TContext]] = js.native
      
      var `450`: js.UndefOr[ErrorCallback[TContext]] = js.native
      
      var `451`: js.UndefOr[ErrorCallback[TContext]] = js.native
      
      var `452`: js.UndefOr[ErrorCallback[TContext]] = js.native
      
      var `453`: js.UndefOr[ErrorCallback[TContext]] = js.native
      
      var `454`: js.UndefOr[ErrorCallback[TContext]] = js.native
      
      var `455`: js.UndefOr[ErrorCallback[TContext]] = js.native
      
      var `456`: js.UndefOr[ErrorCallback[TContext]] = js.native
      
      var `457`: js.UndefOr[ErrorCallback[TContext]] = js.native
      
      var `458`: js.UndefOr[ErrorCallback[TContext]] = js.native
      
      var `459`: js.UndefOr[ErrorCallback[TContext]] = js.native
      
      var `460`: js.UndefOr[ErrorCallback[TContext]] = js.native
      
      var `461`: js.UndefOr[ErrorCallback[TContext]] = js.native
      
      var `462`: js.UndefOr[ErrorCallback[TContext]] = js.native
      
      var `463`: js.UndefOr[ErrorCallback[TContext]] = js.native
      
      var `464`: js.UndefOr[ErrorCallback[TContext]] = js.native
      
      var `465`: js.UndefOr[ErrorCallback[TContext]] = js.native
      
      var `466`: js.UndefOr[ErrorCallback[TContext]] = js.native
      
      var `467`: js.UndefOr[ErrorCallback[TContext]] = js.native
      
      var `468`: js.UndefOr[ErrorCallback[TContext]] = js.native
      
      var `469`: js.UndefOr[ErrorCallback[TContext]] = js.native
      
      var `470`: js.UndefOr[ErrorCallback[TContext]] = js.native
      
      var `471`: js.UndefOr[ErrorCallback[TContext]] = js.native
      
      var `472`: js.UndefOr[ErrorCallback[TContext]] = js.native
      
      var `473`: js.UndefOr[ErrorCallback[TContext]] = js.native
      
      var `474`: js.UndefOr[ErrorCallback[TContext]] = js.native
      
      var `475`: js.UndefOr[ErrorCallback[TContext]] = js.native
      
      var `476`: js.UndefOr[ErrorCallback[TContext]] = js.native
      
      var `477`: js.UndefOr[ErrorCallback[TContext]] = js.native
      
      var `478`: js.UndefOr[ErrorCallback[TContext]] = js.native
      
      var `479`: js.UndefOr[ErrorCallback[TContext]] = js.native
      
      var `480`: js.UndefOr[ErrorCallback[TContext]] = js.native
      
      var `481`: js.UndefOr[ErrorCallback[TContext]] = js.native
      
      var `482`: js.UndefOr[ErrorCallback[TContext]] = js.native
      
      var `483`: js.UndefOr[ErrorCallback[TContext]] = js.native
      
      var `484`: js.UndefOr[ErrorCallback[TContext]] = js.native
      
      var `485`: js.UndefOr[ErrorCallback[TContext]] = js.native
      
      var `486`: js.UndefOr[ErrorCallback[TContext]] = js.native
      
      var `487`: js.UndefOr[ErrorCallback[TContext]] = js.native
      
      var `488`: js.UndefOr[ErrorCallback[TContext]] = js.native
      
      var `489`: js.UndefOr[ErrorCallback[TContext]] = js.native
      
      var `490`: js.UndefOr[ErrorCallback[TContext]] = js.native
      
      var `491`: js.UndefOr[ErrorCallback[TContext]] = js.native
      
      var `492`: js.UndefOr[ErrorCallback[TContext]] = js.native
      
      var `493`: js.UndefOr[ErrorCallback[TContext]] = js.native
      
      var `494`: js.UndefOr[ErrorCallback[TContext]] = js.native
      
      var `495`: js.UndefOr[ErrorCallback[TContext]] = js.native
      
      var `496`: js.UndefOr[ErrorCallback[TContext]] = js.native
      
      var `497`: js.UndefOr[ErrorCallback[TContext]] = js.native
      
      var `498`: js.UndefOr[ErrorCallback[TContext]] = js.native
      
      var `499`: js.UndefOr[ErrorCallback[TContext]] = js.native
      
      var `500`: js.UndefOr[ErrorCallback[TContext]] = js.native
      
      var `501`: js.UndefOr[ErrorCallback[TContext]] = js.native
      
      var `502`: js.UndefOr[ErrorCallback[TContext]] = js.native
      
      var `503`: js.UndefOr[ErrorCallback[TContext]] = js.native
      
      var `504`: js.UndefOr[ErrorCallback[TContext]] = js.native
      
      var `505`: js.UndefOr[ErrorCallback[TContext]] = js.native
      
      var `506`: js.UndefOr[ErrorCallback[TContext]] = js.native
      
      var `507`: js.UndefOr[ErrorCallback[TContext]] = js.native
      
      var `508`: js.UndefOr[ErrorCallback[TContext]] = js.native
      
      var `509`: js.UndefOr[ErrorCallback[TContext]] = js.native
      
      var `510`: js.UndefOr[ErrorCallback[TContext]] = js.native
      
      var `511`: js.UndefOr[ErrorCallback[TContext]] = js.native
      
      var `512`: js.UndefOr[ErrorCallback[TContext]] = js.native
      
      var `513`: js.UndefOr[ErrorCallback[TContext]] = js.native
      
      var `514`: js.UndefOr[ErrorCallback[TContext]] = js.native
      
      var `515`: js.UndefOr[ErrorCallback[TContext]] = js.native
      
      var `516`: js.UndefOr[ErrorCallback[TContext]] = js.native
      
      var `517`: js.UndefOr[ErrorCallback[TContext]] = js.native
      
      var `518`: js.UndefOr[ErrorCallback[TContext]] = js.native
      
      var `519`: js.UndefOr[ErrorCallback[TContext]] = js.native
      
      var `520`: js.UndefOr[ErrorCallback[TContext]] = js.native
      
      var `521`: js.UndefOr[ErrorCallback[TContext]] = js.native
      
      var `522`: js.UndefOr[ErrorCallback[TContext]] = js.native
      
      var `523`: js.UndefOr[ErrorCallback[TContext]] = js.native
      
      var `524`: js.UndefOr[ErrorCallback[TContext]] = js.native
      
      var `525`: js.UndefOr[ErrorCallback[TContext]] = js.native
      
      var `526`: js.UndefOr[ErrorCallback[TContext]] = js.native
      
      var `527`: js.UndefOr[ErrorCallback[TContext]] = js.native
      
      var `528`: js.UndefOr[ErrorCallback[TContext]] = js.native
      
      var `529`: js.UndefOr[ErrorCallback[TContext]] = js.native
      
      var `530`: js.UndefOr[ErrorCallback[TContext]] = js.native
      
      var `531`: js.UndefOr[ErrorCallback[TContext]] = js.native
      
      var `532`: js.UndefOr[ErrorCallback[TContext]] = js.native
      
      var `533`: js.UndefOr[ErrorCallback[TContext]] = js.native
      
      var `534`: js.UndefOr[ErrorCallback[TContext]] = js.native
      
      var `535`: js.UndefOr[ErrorCallback[TContext]] = js.native
      
      var `536`: js.UndefOr[ErrorCallback[TContext]] = js.native
      
      var `537`: js.UndefOr[ErrorCallback[TContext]] = js.native
      
      var `538`: js.UndefOr[ErrorCallback[TContext]] = js.native
      
      var `539`: js.UndefOr[ErrorCallback[TContext]] = js.native
      
      var `540`: js.UndefOr[ErrorCallback[TContext]] = js.native
      
      var `541`: js.UndefOr[ErrorCallback[TContext]] = js.native
      
      var `542`: js.UndefOr[ErrorCallback[TContext]] = js.native
      
      var `543`: js.UndefOr[ErrorCallback[TContext]] = js.native
      
      var `544`: js.UndefOr[ErrorCallback[TContext]] = js.native
      
      var `545`: js.UndefOr[ErrorCallback[TContext]] = js.native
      
      var `546`: js.UndefOr[ErrorCallback[TContext]] = js.native
      
      var `547`: js.UndefOr[ErrorCallback[TContext]] = js.native
      
      var `548`: js.UndefOr[ErrorCallback[TContext]] = js.native
      
      var `549`: js.UndefOr[ErrorCallback[TContext]] = js.native
      
      var `550`: js.UndefOr[ErrorCallback[TContext]] = js.native
      
      var `551`: js.UndefOr[ErrorCallback[TContext]] = js.native
      
      var `552`: js.UndefOr[ErrorCallback[TContext]] = js.native
      
      var `553`: js.UndefOr[ErrorCallback[TContext]] = js.native
      
      var `554`: js.UndefOr[ErrorCallback[TContext]] = js.native
      
      var `555`: js.UndefOr[ErrorCallback[TContext]] = js.native
      
      var `556`: js.UndefOr[ErrorCallback[TContext]] = js.native
      
      var `557`: js.UndefOr[ErrorCallback[TContext]] = js.native
      
      var `558`: js.UndefOr[ErrorCallback[TContext]] = js.native
      
      var `559`: js.UndefOr[ErrorCallback[TContext]] = js.native
      
      var `560`: js.UndefOr[ErrorCallback[TContext]] = js.native
      
      var `561`: js.UndefOr[ErrorCallback[TContext]] = js.native
      
      var `562`: js.UndefOr[ErrorCallback[TContext]] = js.native
      
      var `563`: js.UndefOr[ErrorCallback[TContext]] = js.native
      
      var `564`: js.UndefOr[ErrorCallback[TContext]] = js.native
      
      var `565`: js.UndefOr[ErrorCallback[TContext]] = js.native
      
      var `566`: js.UndefOr[ErrorCallback[TContext]] = js.native
      
      var `567`: js.UndefOr[ErrorCallback[TContext]] = js.native
      
      var `568`: js.UndefOr[ErrorCallback[TContext]] = js.native
      
      var `569`: js.UndefOr[ErrorCallback[TContext]] = js.native
      
      var `570`: js.UndefOr[ErrorCallback[TContext]] = js.native
      
      var `571`: js.UndefOr[ErrorCallback[TContext]] = js.native
      
      var `572`: js.UndefOr[ErrorCallback[TContext]] = js.native
      
      var `573`: js.UndefOr[ErrorCallback[TContext]] = js.native
      
      var `574`: js.UndefOr[ErrorCallback[TContext]] = js.native
      
      var `575`: js.UndefOr[ErrorCallback[TContext]] = js.native
      
      var `576`: js.UndefOr[ErrorCallback[TContext]] = js.native
      
      var `577`: js.UndefOr[ErrorCallback[TContext]] = js.native
      
      var `578`: js.UndefOr[ErrorCallback[TContext]] = js.native
      
      var `579`: js.UndefOr[ErrorCallback[TContext]] = js.native
      
      var `580`: js.UndefOr[ErrorCallback[TContext]] = js.native
      
      var `581`: js.UndefOr[ErrorCallback[TContext]] = js.native
      
      var `582`: js.UndefOr[ErrorCallback[TContext]] = js.native
      
      var `583`: js.UndefOr[ErrorCallback[TContext]] = js.native
      
      var `584`: js.UndefOr[ErrorCallback[TContext]] = js.native
      
      var `585`: js.UndefOr[ErrorCallback[TContext]] = js.native
      
      var `586`: js.UndefOr[ErrorCallback[TContext]] = js.native
      
      var `587`: js.UndefOr[ErrorCallback[TContext]] = js.native
      
      var `588`: js.UndefOr[ErrorCallback[TContext]] = js.native
      
      var `589`: js.UndefOr[ErrorCallback[TContext]] = js.native
      
      var `590`: js.UndefOr[ErrorCallback[TContext]] = js.native
      
      var `591`: js.UndefOr[ErrorCallback[TContext]] = js.native
      
      var `592`: js.UndefOr[ErrorCallback[TContext]] = js.native
      
      var `593`: js.UndefOr[ErrorCallback[TContext]] = js.native
      
      var `594`: js.UndefOr[ErrorCallback[TContext]] = js.native
      
      var `595`: js.UndefOr[ErrorCallback[TContext]] = js.native
      
      var `596`: js.UndefOr[ErrorCallback[TContext]] = js.native
      
      var `597`: js.UndefOr[ErrorCallback[TContext]] = js.native
      
      var `598`: js.UndefOr[ErrorCallback[TContext]] = js.native
      
      var `599`: js.UndefOr[ErrorCallback[TContext]] = js.native
    }
    object StatusCodeCallbacks {
      
      @scala.inline
      def apply[TContext](): StatusCodeCallbacks[TContext] = {
        val __obj = js.Dynamic.literal()
        __obj.asInstanceOf[StatusCodeCallbacks[TContext]]
      }
      
      @scala.inline
      implicit class StatusCodeCallbacksMutableBuilder[Self <: StatusCodeCallbacks[_], TContext] (val x: Self with StatusCodeCallbacks[TContext]) extends AnyVal {
        
        @scala.inline
        def set200(value: SuccessCallback[TContext]): Self = StObject.set(x, "200", value.asInstanceOf[js.Any])
        
        @scala.inline
        def set200Undefined: Self = StObject.set(x, "200", js.undefined)
        
        @scala.inline
        def set201(value: SuccessCallback[TContext]): Self = StObject.set(x, "201", value.asInstanceOf[js.Any])
        
        @scala.inline
        def set201Undefined: Self = StObject.set(x, "201", js.undefined)
        
        @scala.inline
        def set202(value: SuccessCallback[TContext]): Self = StObject.set(x, "202", value.asInstanceOf[js.Any])
        
        @scala.inline
        def set202Undefined: Self = StObject.set(x, "202", js.undefined)
        
        @scala.inline
        def set203(value: SuccessCallback[TContext]): Self = StObject.set(x, "203", value.asInstanceOf[js.Any])
        
        @scala.inline
        def set203Undefined: Self = StObject.set(x, "203", js.undefined)
        
        @scala.inline
        def set204(value: SuccessCallback[TContext]): Self = StObject.set(x, "204", value.asInstanceOf[js.Any])
        
        @scala.inline
        def set204Undefined: Self = StObject.set(x, "204", js.undefined)
        
        @scala.inline
        def set205(value: SuccessCallback[TContext]): Self = StObject.set(x, "205", value.asInstanceOf[js.Any])
        
        @scala.inline
        def set205Undefined: Self = StObject.set(x, "205", js.undefined)
        
        @scala.inline
        def set206(value: SuccessCallback[TContext]): Self = StObject.set(x, "206", value.asInstanceOf[js.Any])
        
        @scala.inline
        def set206Undefined: Self = StObject.set(x, "206", js.undefined)
        
        @scala.inline
        def set207(value: SuccessCallback[TContext]): Self = StObject.set(x, "207", value.asInstanceOf[js.Any])
        
        @scala.inline
        def set207Undefined: Self = StObject.set(x, "207", js.undefined)
        
        @scala.inline
        def set208(value: SuccessCallback[TContext]): Self = StObject.set(x, "208", value.asInstanceOf[js.Any])
        
        @scala.inline
        def set208Undefined: Self = StObject.set(x, "208", js.undefined)
        
        @scala.inline
        def set209(value: SuccessCallback[TContext]): Self = StObject.set(x, "209", value.asInstanceOf[js.Any])
        
        @scala.inline
        def set209Undefined: Self = StObject.set(x, "209", js.undefined)
        
        @scala.inline
        def set210(value: SuccessCallback[TContext]): Self = StObject.set(x, "210", value.asInstanceOf[js.Any])
        
        @scala.inline
        def set210Undefined: Self = StObject.set(x, "210", js.undefined)
        
        @scala.inline
        def set211(value: SuccessCallback[TContext]): Self = StObject.set(x, "211", value.asInstanceOf[js.Any])
        
        @scala.inline
        def set211Undefined: Self = StObject.set(x, "211", js.undefined)
        
        @scala.inline
        def set212(value: SuccessCallback[TContext]): Self = StObject.set(x, "212", value.asInstanceOf[js.Any])
        
        @scala.inline
        def set212Undefined: Self = StObject.set(x, "212", js.undefined)
        
        @scala.inline
        def set213(value: SuccessCallback[TContext]): Self = StObject.set(x, "213", value.asInstanceOf[js.Any])
        
        @scala.inline
        def set213Undefined: Self = StObject.set(x, "213", js.undefined)
        
        @scala.inline
        def set214(value: SuccessCallback[TContext]): Self = StObject.set(x, "214", value.asInstanceOf[js.Any])
        
        @scala.inline
        def set214Undefined: Self = StObject.set(x, "214", js.undefined)
        
        @scala.inline
        def set215(value: SuccessCallback[TContext]): Self = StObject.set(x, "215", value.asInstanceOf[js.Any])
        
        @scala.inline
        def set215Undefined: Self = StObject.set(x, "215", js.undefined)
        
        @scala.inline
        def set216(value: SuccessCallback[TContext]): Self = StObject.set(x, "216", value.asInstanceOf[js.Any])
        
        @scala.inline
        def set216Undefined: Self = StObject.set(x, "216", js.undefined)
        
        @scala.inline
        def set217(value: SuccessCallback[TContext]): Self = StObject.set(x, "217", value.asInstanceOf[js.Any])
        
        @scala.inline
        def set217Undefined: Self = StObject.set(x, "217", js.undefined)
        
        @scala.inline
        def set218(value: SuccessCallback[TContext]): Self = StObject.set(x, "218", value.asInstanceOf[js.Any])
        
        @scala.inline
        def set218Undefined: Self = StObject.set(x, "218", js.undefined)
        
        @scala.inline
        def set219(value: SuccessCallback[TContext]): Self = StObject.set(x, "219", value.asInstanceOf[js.Any])
        
        @scala.inline
        def set219Undefined: Self = StObject.set(x, "219", js.undefined)
        
        @scala.inline
        def set220(value: SuccessCallback[TContext]): Self = StObject.set(x, "220", value.asInstanceOf[js.Any])
        
        @scala.inline
        def set220Undefined: Self = StObject.set(x, "220", js.undefined)
        
        @scala.inline
        def set221(value: SuccessCallback[TContext]): Self = StObject.set(x, "221", value.asInstanceOf[js.Any])
        
        @scala.inline
        def set221Undefined: Self = StObject.set(x, "221", js.undefined)
        
        @scala.inline
        def set222(value: SuccessCallback[TContext]): Self = StObject.set(x, "222", value.asInstanceOf[js.Any])
        
        @scala.inline
        def set222Undefined: Self = StObject.set(x, "222", js.undefined)
        
        @scala.inline
        def set223(value: SuccessCallback[TContext]): Self = StObject.set(x, "223", value.asInstanceOf[js.Any])
        
        @scala.inline
        def set223Undefined: Self = StObject.set(x, "223", js.undefined)
        
        @scala.inline
        def set224(value: SuccessCallback[TContext]): Self = StObject.set(x, "224", value.asInstanceOf[js.Any])
        
        @scala.inline
        def set224Undefined: Self = StObject.set(x, "224", js.undefined)
        
        @scala.inline
        def set225(value: SuccessCallback[TContext]): Self = StObject.set(x, "225", value.asInstanceOf[js.Any])
        
        @scala.inline
        def set225Undefined: Self = StObject.set(x, "225", js.undefined)
        
        @scala.inline
        def set226(value: SuccessCallback[TContext]): Self = StObject.set(x, "226", value.asInstanceOf[js.Any])
        
        @scala.inline
        def set226Undefined: Self = StObject.set(x, "226", js.undefined)
        
        @scala.inline
        def set227(value: SuccessCallback[TContext]): Self = StObject.set(x, "227", value.asInstanceOf[js.Any])
        
        @scala.inline
        def set227Undefined: Self = StObject.set(x, "227", js.undefined)
        
        @scala.inline
        def set228(value: SuccessCallback[TContext]): Self = StObject.set(x, "228", value.asInstanceOf[js.Any])
        
        @scala.inline
        def set228Undefined: Self = StObject.set(x, "228", js.undefined)
        
        @scala.inline
        def set229(value: SuccessCallback[TContext]): Self = StObject.set(x, "229", value.asInstanceOf[js.Any])
        
        @scala.inline
        def set229Undefined: Self = StObject.set(x, "229", js.undefined)
        
        @scala.inline
        def set230(value: SuccessCallback[TContext]): Self = StObject.set(x, "230", value.asInstanceOf[js.Any])
        
        @scala.inline
        def set230Undefined: Self = StObject.set(x, "230", js.undefined)
        
        @scala.inline
        def set231(value: SuccessCallback[TContext]): Self = StObject.set(x, "231", value.asInstanceOf[js.Any])
        
        @scala.inline
        def set231Undefined: Self = StObject.set(x, "231", js.undefined)
        
        @scala.inline
        def set232(value: SuccessCallback[TContext]): Self = StObject.set(x, "232", value.asInstanceOf[js.Any])
        
        @scala.inline
        def set232Undefined: Self = StObject.set(x, "232", js.undefined)
        
        @scala.inline
        def set233(value: SuccessCallback[TContext]): Self = StObject.set(x, "233", value.asInstanceOf[js.Any])
        
        @scala.inline
        def set233Undefined: Self = StObject.set(x, "233", js.undefined)
        
        @scala.inline
        def set234(value: SuccessCallback[TContext]): Self = StObject.set(x, "234", value.asInstanceOf[js.Any])
        
        @scala.inline
        def set234Undefined: Self = StObject.set(x, "234", js.undefined)
        
        @scala.inline
        def set235(value: SuccessCallback[TContext]): Self = StObject.set(x, "235", value.asInstanceOf[js.Any])
        
        @scala.inline
        def set235Undefined: Self = StObject.set(x, "235", js.undefined)
        
        @scala.inline
        def set236(value: SuccessCallback[TContext]): Self = StObject.set(x, "236", value.asInstanceOf[js.Any])
        
        @scala.inline
        def set236Undefined: Self = StObject.set(x, "236", js.undefined)
        
        @scala.inline
        def set237(value: SuccessCallback[TContext]): Self = StObject.set(x, "237", value.asInstanceOf[js.Any])
        
        @scala.inline
        def set237Undefined: Self = StObject.set(x, "237", js.undefined)
        
        @scala.inline
        def set238(value: SuccessCallback[TContext]): Self = StObject.set(x, "238", value.asInstanceOf[js.Any])
        
        @scala.inline
        def set238Undefined: Self = StObject.set(x, "238", js.undefined)
        
        @scala.inline
        def set239(value: SuccessCallback[TContext]): Self = StObject.set(x, "239", value.asInstanceOf[js.Any])
        
        @scala.inline
        def set239Undefined: Self = StObject.set(x, "239", js.undefined)
        
        @scala.inline
        def set240(value: SuccessCallback[TContext]): Self = StObject.set(x, "240", value.asInstanceOf[js.Any])
        
        @scala.inline
        def set240Undefined: Self = StObject.set(x, "240", js.undefined)
        
        @scala.inline
        def set241(value: SuccessCallback[TContext]): Self = StObject.set(x, "241", value.asInstanceOf[js.Any])
        
        @scala.inline
        def set241Undefined: Self = StObject.set(x, "241", js.undefined)
        
        @scala.inline
        def set242(value: SuccessCallback[TContext]): Self = StObject.set(x, "242", value.asInstanceOf[js.Any])
        
        @scala.inline
        def set242Undefined: Self = StObject.set(x, "242", js.undefined)
        
        @scala.inline
        def set243(value: SuccessCallback[TContext]): Self = StObject.set(x, "243", value.asInstanceOf[js.Any])
        
        @scala.inline
        def set243Undefined: Self = StObject.set(x, "243", js.undefined)
        
        @scala.inline
        def set244(value: SuccessCallback[TContext]): Self = StObject.set(x, "244", value.asInstanceOf[js.Any])
        
        @scala.inline
        def set244Undefined: Self = StObject.set(x, "244", js.undefined)
        
        @scala.inline
        def set245(value: SuccessCallback[TContext]): Self = StObject.set(x, "245", value.asInstanceOf[js.Any])
        
        @scala.inline
        def set245Undefined: Self = StObject.set(x, "245", js.undefined)
        
        @scala.inline
        def set246(value: SuccessCallback[TContext]): Self = StObject.set(x, "246", value.asInstanceOf[js.Any])
        
        @scala.inline
        def set246Undefined: Self = StObject.set(x, "246", js.undefined)
        
        @scala.inline
        def set247(value: SuccessCallback[TContext]): Self = StObject.set(x, "247", value.asInstanceOf[js.Any])
        
        @scala.inline
        def set247Undefined: Self = StObject.set(x, "247", js.undefined)
        
        @scala.inline
        def set248(value: SuccessCallback[TContext]): Self = StObject.set(x, "248", value.asInstanceOf[js.Any])
        
        @scala.inline
        def set248Undefined: Self = StObject.set(x, "248", js.undefined)
        
        @scala.inline
        def set249(value: SuccessCallback[TContext]): Self = StObject.set(x, "249", value.asInstanceOf[js.Any])
        
        @scala.inline
        def set249Undefined: Self = StObject.set(x, "249", js.undefined)
        
        @scala.inline
        def set250(value: SuccessCallback[TContext]): Self = StObject.set(x, "250", value.asInstanceOf[js.Any])
        
        @scala.inline
        def set250Undefined: Self = StObject.set(x, "250", js.undefined)
        
        @scala.inline
        def set251(value: SuccessCallback[TContext]): Self = StObject.set(x, "251", value.asInstanceOf[js.Any])
        
        @scala.inline
        def set251Undefined: Self = StObject.set(x, "251", js.undefined)
        
        @scala.inline
        def set252(value: SuccessCallback[TContext]): Self = StObject.set(x, "252", value.asInstanceOf[js.Any])
        
        @scala.inline
        def set252Undefined: Self = StObject.set(x, "252", js.undefined)
        
        @scala.inline
        def set253(value: SuccessCallback[TContext]): Self = StObject.set(x, "253", value.asInstanceOf[js.Any])
        
        @scala.inline
        def set253Undefined: Self = StObject.set(x, "253", js.undefined)
        
        @scala.inline
        def set254(value: SuccessCallback[TContext]): Self = StObject.set(x, "254", value.asInstanceOf[js.Any])
        
        @scala.inline
        def set254Undefined: Self = StObject.set(x, "254", js.undefined)
        
        @scala.inline
        def set255(value: SuccessCallback[TContext]): Self = StObject.set(x, "255", value.asInstanceOf[js.Any])
        
        @scala.inline
        def set255Undefined: Self = StObject.set(x, "255", js.undefined)
        
        @scala.inline
        def set256(value: SuccessCallback[TContext]): Self = StObject.set(x, "256", value.asInstanceOf[js.Any])
        
        @scala.inline
        def set256Undefined: Self = StObject.set(x, "256", js.undefined)
        
        @scala.inline
        def set257(value: SuccessCallback[TContext]): Self = StObject.set(x, "257", value.asInstanceOf[js.Any])
        
        @scala.inline
        def set257Undefined: Self = StObject.set(x, "257", js.undefined)
        
        @scala.inline
        def set258(value: SuccessCallback[TContext]): Self = StObject.set(x, "258", value.asInstanceOf[js.Any])
        
        @scala.inline
        def set258Undefined: Self = StObject.set(x, "258", js.undefined)
        
        @scala.inline
        def set259(value: SuccessCallback[TContext]): Self = StObject.set(x, "259", value.asInstanceOf[js.Any])
        
        @scala.inline
        def set259Undefined: Self = StObject.set(x, "259", js.undefined)
        
        @scala.inline
        def set260(value: SuccessCallback[TContext]): Self = StObject.set(x, "260", value.asInstanceOf[js.Any])
        
        @scala.inline
        def set260Undefined: Self = StObject.set(x, "260", js.undefined)
        
        @scala.inline
        def set261(value: SuccessCallback[TContext]): Self = StObject.set(x, "261", value.asInstanceOf[js.Any])
        
        @scala.inline
        def set261Undefined: Self = StObject.set(x, "261", js.undefined)
        
        @scala.inline
        def set262(value: SuccessCallback[TContext]): Self = StObject.set(x, "262", value.asInstanceOf[js.Any])
        
        @scala.inline
        def set262Undefined: Self = StObject.set(x, "262", js.undefined)
        
        @scala.inline
        def set263(value: SuccessCallback[TContext]): Self = StObject.set(x, "263", value.asInstanceOf[js.Any])
        
        @scala.inline
        def set263Undefined: Self = StObject.set(x, "263", js.undefined)
        
        @scala.inline
        def set264(value: SuccessCallback[TContext]): Self = StObject.set(x, "264", value.asInstanceOf[js.Any])
        
        @scala.inline
        def set264Undefined: Self = StObject.set(x, "264", js.undefined)
        
        @scala.inline
        def set265(value: SuccessCallback[TContext]): Self = StObject.set(x, "265", value.asInstanceOf[js.Any])
        
        @scala.inline
        def set265Undefined: Self = StObject.set(x, "265", js.undefined)
        
        @scala.inline
        def set266(value: SuccessCallback[TContext]): Self = StObject.set(x, "266", value.asInstanceOf[js.Any])
        
        @scala.inline
        def set266Undefined: Self = StObject.set(x, "266", js.undefined)
        
        @scala.inline
        def set267(value: SuccessCallback[TContext]): Self = StObject.set(x, "267", value.asInstanceOf[js.Any])
        
        @scala.inline
        def set267Undefined: Self = StObject.set(x, "267", js.undefined)
        
        @scala.inline
        def set268(value: SuccessCallback[TContext]): Self = StObject.set(x, "268", value.asInstanceOf[js.Any])
        
        @scala.inline
        def set268Undefined: Self = StObject.set(x, "268", js.undefined)
        
        @scala.inline
        def set269(value: SuccessCallback[TContext]): Self = StObject.set(x, "269", value.asInstanceOf[js.Any])
        
        @scala.inline
        def set269Undefined: Self = StObject.set(x, "269", js.undefined)
        
        @scala.inline
        def set270(value: SuccessCallback[TContext]): Self = StObject.set(x, "270", value.asInstanceOf[js.Any])
        
        @scala.inline
        def set270Undefined: Self = StObject.set(x, "270", js.undefined)
        
        @scala.inline
        def set271(value: SuccessCallback[TContext]): Self = StObject.set(x, "271", value.asInstanceOf[js.Any])
        
        @scala.inline
        def set271Undefined: Self = StObject.set(x, "271", js.undefined)
        
        @scala.inline
        def set272(value: SuccessCallback[TContext]): Self = StObject.set(x, "272", value.asInstanceOf[js.Any])
        
        @scala.inline
        def set272Undefined: Self = StObject.set(x, "272", js.undefined)
        
        @scala.inline
        def set273(value: SuccessCallback[TContext]): Self = StObject.set(x, "273", value.asInstanceOf[js.Any])
        
        @scala.inline
        def set273Undefined: Self = StObject.set(x, "273", js.undefined)
        
        @scala.inline
        def set274(value: SuccessCallback[TContext]): Self = StObject.set(x, "274", value.asInstanceOf[js.Any])
        
        @scala.inline
        def set274Undefined: Self = StObject.set(x, "274", js.undefined)
        
        @scala.inline
        def set275(value: SuccessCallback[TContext]): Self = StObject.set(x, "275", value.asInstanceOf[js.Any])
        
        @scala.inline
        def set275Undefined: Self = StObject.set(x, "275", js.undefined)
        
        @scala.inline
        def set276(value: SuccessCallback[TContext]): Self = StObject.set(x, "276", value.asInstanceOf[js.Any])
        
        @scala.inline
        def set276Undefined: Self = StObject.set(x, "276", js.undefined)
        
        @scala.inline
        def set277(value: SuccessCallback[TContext]): Self = StObject.set(x, "277", value.asInstanceOf[js.Any])
        
        @scala.inline
        def set277Undefined: Self = StObject.set(x, "277", js.undefined)
        
        @scala.inline
        def set278(value: SuccessCallback[TContext]): Self = StObject.set(x, "278", value.asInstanceOf[js.Any])
        
        @scala.inline
        def set278Undefined: Self = StObject.set(x, "278", js.undefined)
        
        @scala.inline
        def set279(value: SuccessCallback[TContext]): Self = StObject.set(x, "279", value.asInstanceOf[js.Any])
        
        @scala.inline
        def set279Undefined: Self = StObject.set(x, "279", js.undefined)
        
        @scala.inline
        def set280(value: SuccessCallback[TContext]): Self = StObject.set(x, "280", value.asInstanceOf[js.Any])
        
        @scala.inline
        def set280Undefined: Self = StObject.set(x, "280", js.undefined)
        
        @scala.inline
        def set281(value: SuccessCallback[TContext]): Self = StObject.set(x, "281", value.asInstanceOf[js.Any])
        
        @scala.inline
        def set281Undefined: Self = StObject.set(x, "281", js.undefined)
        
        @scala.inline
        def set282(value: SuccessCallback[TContext]): Self = StObject.set(x, "282", value.asInstanceOf[js.Any])
        
        @scala.inline
        def set282Undefined: Self = StObject.set(x, "282", js.undefined)
        
        @scala.inline
        def set283(value: SuccessCallback[TContext]): Self = StObject.set(x, "283", value.asInstanceOf[js.Any])
        
        @scala.inline
        def set283Undefined: Self = StObject.set(x, "283", js.undefined)
        
        @scala.inline
        def set284(value: SuccessCallback[TContext]): Self = StObject.set(x, "284", value.asInstanceOf[js.Any])
        
        @scala.inline
        def set284Undefined: Self = StObject.set(x, "284", js.undefined)
        
        @scala.inline
        def set285(value: SuccessCallback[TContext]): Self = StObject.set(x, "285", value.asInstanceOf[js.Any])
        
        @scala.inline
        def set285Undefined: Self = StObject.set(x, "285", js.undefined)
        
        @scala.inline
        def set286(value: SuccessCallback[TContext]): Self = StObject.set(x, "286", value.asInstanceOf[js.Any])
        
        @scala.inline
        def set286Undefined: Self = StObject.set(x, "286", js.undefined)
        
        @scala.inline
        def set287(value: SuccessCallback[TContext]): Self = StObject.set(x, "287", value.asInstanceOf[js.Any])
        
        @scala.inline
        def set287Undefined: Self = StObject.set(x, "287", js.undefined)
        
        @scala.inline
        def set288(value: SuccessCallback[TContext]): Self = StObject.set(x, "288", value.asInstanceOf[js.Any])
        
        @scala.inline
        def set288Undefined: Self = StObject.set(x, "288", js.undefined)
        
        @scala.inline
        def set289(value: SuccessCallback[TContext]): Self = StObject.set(x, "289", value.asInstanceOf[js.Any])
        
        @scala.inline
        def set289Undefined: Self = StObject.set(x, "289", js.undefined)
        
        @scala.inline
        def set290(value: SuccessCallback[TContext]): Self = StObject.set(x, "290", value.asInstanceOf[js.Any])
        
        @scala.inline
        def set290Undefined: Self = StObject.set(x, "290", js.undefined)
        
        @scala.inline
        def set291(value: SuccessCallback[TContext]): Self = StObject.set(x, "291", value.asInstanceOf[js.Any])
        
        @scala.inline
        def set291Undefined: Self = StObject.set(x, "291", js.undefined)
        
        @scala.inline
        def set292(value: SuccessCallback[TContext]): Self = StObject.set(x, "292", value.asInstanceOf[js.Any])
        
        @scala.inline
        def set292Undefined: Self = StObject.set(x, "292", js.undefined)
        
        @scala.inline
        def set293(value: SuccessCallback[TContext]): Self = StObject.set(x, "293", value.asInstanceOf[js.Any])
        
        @scala.inline
        def set293Undefined: Self = StObject.set(x, "293", js.undefined)
        
        @scala.inline
        def set294(value: SuccessCallback[TContext]): Self = StObject.set(x, "294", value.asInstanceOf[js.Any])
        
        @scala.inline
        def set294Undefined: Self = StObject.set(x, "294", js.undefined)
        
        @scala.inline
        def set295(value: SuccessCallback[TContext]): Self = StObject.set(x, "295", value.asInstanceOf[js.Any])
        
        @scala.inline
        def set295Undefined: Self = StObject.set(x, "295", js.undefined)
        
        @scala.inline
        def set296(value: SuccessCallback[TContext]): Self = StObject.set(x, "296", value.asInstanceOf[js.Any])
        
        @scala.inline
        def set296Undefined: Self = StObject.set(x, "296", js.undefined)
        
        @scala.inline
        def set297(value: SuccessCallback[TContext]): Self = StObject.set(x, "297", value.asInstanceOf[js.Any])
        
        @scala.inline
        def set297Undefined: Self = StObject.set(x, "297", js.undefined)
        
        @scala.inline
        def set298(value: SuccessCallback[TContext]): Self = StObject.set(x, "298", value.asInstanceOf[js.Any])
        
        @scala.inline
        def set298Undefined: Self = StObject.set(x, "298", js.undefined)
        
        @scala.inline
        def set299(value: SuccessCallback[TContext]): Self = StObject.set(x, "299", value.asInstanceOf[js.Any])
        
        @scala.inline
        def set299Undefined: Self = StObject.set(x, "299", js.undefined)
        
        @scala.inline
        def set300(value: ErrorCallback[TContext]): Self = StObject.set(x, "300", value.asInstanceOf[js.Any])
        
        @scala.inline
        def set300Undefined: Self = StObject.set(x, "300", js.undefined)
        
        @scala.inline
        def set301(value: ErrorCallback[TContext]): Self = StObject.set(x, "301", value.asInstanceOf[js.Any])
        
        @scala.inline
        def set301Undefined: Self = StObject.set(x, "301", js.undefined)
        
        @scala.inline
        def set302(value: ErrorCallback[TContext]): Self = StObject.set(x, "302", value.asInstanceOf[js.Any])
        
        @scala.inline
        def set302Undefined: Self = StObject.set(x, "302", js.undefined)
        
        @scala.inline
        def set303(value: ErrorCallback[TContext]): Self = StObject.set(x, "303", value.asInstanceOf[js.Any])
        
        @scala.inline
        def set303Undefined: Self = StObject.set(x, "303", js.undefined)
        
        @scala.inline
        def set304(value: SuccessCallback[TContext]): Self = StObject.set(x, "304", value.asInstanceOf[js.Any])
        
        @scala.inline
        def set304Undefined: Self = StObject.set(x, "304", js.undefined)
        
        @scala.inline
        def set305(value: ErrorCallback[TContext]): Self = StObject.set(x, "305", value.asInstanceOf[js.Any])
        
        @scala.inline
        def set305Undefined: Self = StObject.set(x, "305", js.undefined)
        
        @scala.inline
        def set306(value: ErrorCallback[TContext]): Self = StObject.set(x, "306", value.asInstanceOf[js.Any])
        
        @scala.inline
        def set306Undefined: Self = StObject.set(x, "306", js.undefined)
        
        @scala.inline
        def set307(value: ErrorCallback[TContext]): Self = StObject.set(x, "307", value.asInstanceOf[js.Any])
        
        @scala.inline
        def set307Undefined: Self = StObject.set(x, "307", js.undefined)
        
        @scala.inline
        def set308(value: ErrorCallback[TContext]): Self = StObject.set(x, "308", value.asInstanceOf[js.Any])
        
        @scala.inline
        def set308Undefined: Self = StObject.set(x, "308", js.undefined)
        
        @scala.inline
        def set309(value: ErrorCallback[TContext]): Self = StObject.set(x, "309", value.asInstanceOf[js.Any])
        
        @scala.inline
        def set309Undefined: Self = StObject.set(x, "309", js.undefined)
        
        @scala.inline
        def set310(value: ErrorCallback[TContext]): Self = StObject.set(x, "310", value.asInstanceOf[js.Any])
        
        @scala.inline
        def set310Undefined: Self = StObject.set(x, "310", js.undefined)
        
        @scala.inline
        def set311(value: ErrorCallback[TContext]): Self = StObject.set(x, "311", value.asInstanceOf[js.Any])
        
        @scala.inline
        def set311Undefined: Self = StObject.set(x, "311", js.undefined)
        
        @scala.inline
        def set312(value: ErrorCallback[TContext]): Self = StObject.set(x, "312", value.asInstanceOf[js.Any])
        
        @scala.inline
        def set312Undefined: Self = StObject.set(x, "312", js.undefined)
        
        @scala.inline
        def set313(value: ErrorCallback[TContext]): Self = StObject.set(x, "313", value.asInstanceOf[js.Any])
        
        @scala.inline
        def set313Undefined: Self = StObject.set(x, "313", js.undefined)
        
        @scala.inline
        def set314(value: ErrorCallback[TContext]): Self = StObject.set(x, "314", value.asInstanceOf[js.Any])
        
        @scala.inline
        def set314Undefined: Self = StObject.set(x, "314", js.undefined)
        
        @scala.inline
        def set315(value: ErrorCallback[TContext]): Self = StObject.set(x, "315", value.asInstanceOf[js.Any])
        
        @scala.inline
        def set315Undefined: Self = StObject.set(x, "315", js.undefined)
        
        @scala.inline
        def set316(value: ErrorCallback[TContext]): Self = StObject.set(x, "316", value.asInstanceOf[js.Any])
        
        @scala.inline
        def set316Undefined: Self = StObject.set(x, "316", js.undefined)
        
        @scala.inline
        def set317(value: ErrorCallback[TContext]): Self = StObject.set(x, "317", value.asInstanceOf[js.Any])
        
        @scala.inline
        def set317Undefined: Self = StObject.set(x, "317", js.undefined)
        
        @scala.inline
        def set318(value: ErrorCallback[TContext]): Self = StObject.set(x, "318", value.asInstanceOf[js.Any])
        
        @scala.inline
        def set318Undefined: Self = StObject.set(x, "318", js.undefined)
        
        @scala.inline
        def set319(value: ErrorCallback[TContext]): Self = StObject.set(x, "319", value.asInstanceOf[js.Any])
        
        @scala.inline
        def set319Undefined: Self = StObject.set(x, "319", js.undefined)
        
        @scala.inline
        def set320(value: ErrorCallback[TContext]): Self = StObject.set(x, "320", value.asInstanceOf[js.Any])
        
        @scala.inline
        def set320Undefined: Self = StObject.set(x, "320", js.undefined)
        
        @scala.inline
        def set321(value: ErrorCallback[TContext]): Self = StObject.set(x, "321", value.asInstanceOf[js.Any])
        
        @scala.inline
        def set321Undefined: Self = StObject.set(x, "321", js.undefined)
        
        @scala.inline
        def set322(value: ErrorCallback[TContext]): Self = StObject.set(x, "322", value.asInstanceOf[js.Any])
        
        @scala.inline
        def set322Undefined: Self = StObject.set(x, "322", js.undefined)
        
        @scala.inline
        def set323(value: ErrorCallback[TContext]): Self = StObject.set(x, "323", value.asInstanceOf[js.Any])
        
        @scala.inline
        def set323Undefined: Self = StObject.set(x, "323", js.undefined)
        
        @scala.inline
        def set324(value: ErrorCallback[TContext]): Self = StObject.set(x, "324", value.asInstanceOf[js.Any])
        
        @scala.inline
        def set324Undefined: Self = StObject.set(x, "324", js.undefined)
        
        @scala.inline
        def set325(value: ErrorCallback[TContext]): Self = StObject.set(x, "325", value.asInstanceOf[js.Any])
        
        @scala.inline
        def set325Undefined: Self = StObject.set(x, "325", js.undefined)
        
        @scala.inline
        def set326(value: ErrorCallback[TContext]): Self = StObject.set(x, "326", value.asInstanceOf[js.Any])
        
        @scala.inline
        def set326Undefined: Self = StObject.set(x, "326", js.undefined)
        
        @scala.inline
        def set327(value: ErrorCallback[TContext]): Self = StObject.set(x, "327", value.asInstanceOf[js.Any])
        
        @scala.inline
        def set327Undefined: Self = StObject.set(x, "327", js.undefined)
        
        @scala.inline
        def set328(value: ErrorCallback[TContext]): Self = StObject.set(x, "328", value.asInstanceOf[js.Any])
        
        @scala.inline
        def set328Undefined: Self = StObject.set(x, "328", js.undefined)
        
        @scala.inline
        def set329(value: ErrorCallback[TContext]): Self = StObject.set(x, "329", value.asInstanceOf[js.Any])
        
        @scala.inline
        def set329Undefined: Self = StObject.set(x, "329", js.undefined)
        
        @scala.inline
        def set330(value: ErrorCallback[TContext]): Self = StObject.set(x, "330", value.asInstanceOf[js.Any])
        
        @scala.inline
        def set330Undefined: Self = StObject.set(x, "330", js.undefined)
        
        @scala.inline
        def set331(value: ErrorCallback[TContext]): Self = StObject.set(x, "331", value.asInstanceOf[js.Any])
        
        @scala.inline
        def set331Undefined: Self = StObject.set(x, "331", js.undefined)
        
        @scala.inline
        def set332(value: ErrorCallback[TContext]): Self = StObject.set(x, "332", value.asInstanceOf[js.Any])
        
        @scala.inline
        def set332Undefined: Self = StObject.set(x, "332", js.undefined)
        
        @scala.inline
        def set333(value: ErrorCallback[TContext]): Self = StObject.set(x, "333", value.asInstanceOf[js.Any])
        
        @scala.inline
        def set333Undefined: Self = StObject.set(x, "333", js.undefined)
        
        @scala.inline
        def set334(value: ErrorCallback[TContext]): Self = StObject.set(x, "334", value.asInstanceOf[js.Any])
        
        @scala.inline
        def set334Undefined: Self = StObject.set(x, "334", js.undefined)
        
        @scala.inline
        def set335(value: ErrorCallback[TContext]): Self = StObject.set(x, "335", value.asInstanceOf[js.Any])
        
        @scala.inline
        def set335Undefined: Self = StObject.set(x, "335", js.undefined)
        
        @scala.inline
        def set336(value: ErrorCallback[TContext]): Self = StObject.set(x, "336", value.asInstanceOf[js.Any])
        
        @scala.inline
        def set336Undefined: Self = StObject.set(x, "336", js.undefined)
        
        @scala.inline
        def set337(value: ErrorCallback[TContext]): Self = StObject.set(x, "337", value.asInstanceOf[js.Any])
        
        @scala.inline
        def set337Undefined: Self = StObject.set(x, "337", js.undefined)
        
        @scala.inline
        def set338(value: ErrorCallback[TContext]): Self = StObject.set(x, "338", value.asInstanceOf[js.Any])
        
        @scala.inline
        def set338Undefined: Self = StObject.set(x, "338", js.undefined)
        
        @scala.inline
        def set339(value: ErrorCallback[TContext]): Self = StObject.set(x, "339", value.asInstanceOf[js.Any])
        
        @scala.inline
        def set339Undefined: Self = StObject.set(x, "339", js.undefined)
        
        @scala.inline
        def set340(value: ErrorCallback[TContext]): Self = StObject.set(x, "340", value.asInstanceOf[js.Any])
        
        @scala.inline
        def set340Undefined: Self = StObject.set(x, "340", js.undefined)
        
        @scala.inline
        def set341(value: ErrorCallback[TContext]): Self = StObject.set(x, "341", value.asInstanceOf[js.Any])
        
        @scala.inline
        def set341Undefined: Self = StObject.set(x, "341", js.undefined)
        
        @scala.inline
        def set342(value: ErrorCallback[TContext]): Self = StObject.set(x, "342", value.asInstanceOf[js.Any])
        
        @scala.inline
        def set342Undefined: Self = StObject.set(x, "342", js.undefined)
        
        @scala.inline
        def set343(value: ErrorCallback[TContext]): Self = StObject.set(x, "343", value.asInstanceOf[js.Any])
        
        @scala.inline
        def set343Undefined: Self = StObject.set(x, "343", js.undefined)
        
        @scala.inline
        def set344(value: ErrorCallback[TContext]): Self = StObject.set(x, "344", value.asInstanceOf[js.Any])
        
        @scala.inline
        def set344Undefined: Self = StObject.set(x, "344", js.undefined)
        
        @scala.inline
        def set345(value: ErrorCallback[TContext]): Self = StObject.set(x, "345", value.asInstanceOf[js.Any])
        
        @scala.inline
        def set345Undefined: Self = StObject.set(x, "345", js.undefined)
        
        @scala.inline
        def set346(value: ErrorCallback[TContext]): Self = StObject.set(x, "346", value.asInstanceOf[js.Any])
        
        @scala.inline
        def set346Undefined: Self = StObject.set(x, "346", js.undefined)
        
        @scala.inline
        def set347(value: ErrorCallback[TContext]): Self = StObject.set(x, "347", value.asInstanceOf[js.Any])
        
        @scala.inline
        def set347Undefined: Self = StObject.set(x, "347", js.undefined)
        
        @scala.inline
        def set348(value: ErrorCallback[TContext]): Self = StObject.set(x, "348", value.asInstanceOf[js.Any])
        
        @scala.inline
        def set348Undefined: Self = StObject.set(x, "348", js.undefined)
        
        @scala.inline
        def set349(value: ErrorCallback[TContext]): Self = StObject.set(x, "349", value.asInstanceOf[js.Any])
        
        @scala.inline
        def set349Undefined: Self = StObject.set(x, "349", js.undefined)
        
        @scala.inline
        def set350(value: ErrorCallback[TContext]): Self = StObject.set(x, "350", value.asInstanceOf[js.Any])
        
        @scala.inline
        def set350Undefined: Self = StObject.set(x, "350", js.undefined)
        
        @scala.inline
        def set351(value: ErrorCallback[TContext]): Self = StObject.set(x, "351", value.asInstanceOf[js.Any])
        
        @scala.inline
        def set351Undefined: Self = StObject.set(x, "351", js.undefined)
        
        @scala.inline
        def set352(value: ErrorCallback[TContext]): Self = StObject.set(x, "352", value.asInstanceOf[js.Any])
        
        @scala.inline
        def set352Undefined: Self = StObject.set(x, "352", js.undefined)
        
        @scala.inline
        def set353(value: ErrorCallback[TContext]): Self = StObject.set(x, "353", value.asInstanceOf[js.Any])
        
        @scala.inline
        def set353Undefined: Self = StObject.set(x, "353", js.undefined)
        
        @scala.inline
        def set354(value: ErrorCallback[TContext]): Self = StObject.set(x, "354", value.asInstanceOf[js.Any])
        
        @scala.inline
        def set354Undefined: Self = StObject.set(x, "354", js.undefined)
        
        @scala.inline
        def set355(value: ErrorCallback[TContext]): Self = StObject.set(x, "355", value.asInstanceOf[js.Any])
        
        @scala.inline
        def set355Undefined: Self = StObject.set(x, "355", js.undefined)
        
        @scala.inline
        def set356(value: ErrorCallback[TContext]): Self = StObject.set(x, "356", value.asInstanceOf[js.Any])
        
        @scala.inline
        def set356Undefined: Self = StObject.set(x, "356", js.undefined)
        
        @scala.inline
        def set357(value: ErrorCallback[TContext]): Self = StObject.set(x, "357", value.asInstanceOf[js.Any])
        
        @scala.inline
        def set357Undefined: Self = StObject.set(x, "357", js.undefined)
        
        @scala.inline
        def set358(value: ErrorCallback[TContext]): Self = StObject.set(x, "358", value.asInstanceOf[js.Any])
        
        @scala.inline
        def set358Undefined: Self = StObject.set(x, "358", js.undefined)
        
        @scala.inline
        def set359(value: ErrorCallback[TContext]): Self = StObject.set(x, "359", value.asInstanceOf[js.Any])
        
        @scala.inline
        def set359Undefined: Self = StObject.set(x, "359", js.undefined)
        
        @scala.inline
        def set360(value: ErrorCallback[TContext]): Self = StObject.set(x, "360", value.asInstanceOf[js.Any])
        
        @scala.inline
        def set360Undefined: Self = StObject.set(x, "360", js.undefined)
        
        @scala.inline
        def set361(value: ErrorCallback[TContext]): Self = StObject.set(x, "361", value.asInstanceOf[js.Any])
        
        @scala.inline
        def set361Undefined: Self = StObject.set(x, "361", js.undefined)
        
        @scala.inline
        def set362(value: ErrorCallback[TContext]): Self = StObject.set(x, "362", value.asInstanceOf[js.Any])
        
        @scala.inline
        def set362Undefined: Self = StObject.set(x, "362", js.undefined)
        
        @scala.inline
        def set363(value: ErrorCallback[TContext]): Self = StObject.set(x, "363", value.asInstanceOf[js.Any])
        
        @scala.inline
        def set363Undefined: Self = StObject.set(x, "363", js.undefined)
        
        @scala.inline
        def set364(value: ErrorCallback[TContext]): Self = StObject.set(x, "364", value.asInstanceOf[js.Any])
        
        @scala.inline
        def set364Undefined: Self = StObject.set(x, "364", js.undefined)
        
        @scala.inline
        def set365(value: ErrorCallback[TContext]): Self = StObject.set(x, "365", value.asInstanceOf[js.Any])
        
        @scala.inline
        def set365Undefined: Self = StObject.set(x, "365", js.undefined)
        
        @scala.inline
        def set366(value: ErrorCallback[TContext]): Self = StObject.set(x, "366", value.asInstanceOf[js.Any])
        
        @scala.inline
        def set366Undefined: Self = StObject.set(x, "366", js.undefined)
        
        @scala.inline
        def set367(value: ErrorCallback[TContext]): Self = StObject.set(x, "367", value.asInstanceOf[js.Any])
        
        @scala.inline
        def set367Undefined: Self = StObject.set(x, "367", js.undefined)
        
        @scala.inline
        def set368(value: ErrorCallback[TContext]): Self = StObject.set(x, "368", value.asInstanceOf[js.Any])
        
        @scala.inline
        def set368Undefined: Self = StObject.set(x, "368", js.undefined)
        
        @scala.inline
        def set369(value: ErrorCallback[TContext]): Self = StObject.set(x, "369", value.asInstanceOf[js.Any])
        
        @scala.inline
        def set369Undefined: Self = StObject.set(x, "369", js.undefined)
        
        @scala.inline
        def set370(value: ErrorCallback[TContext]): Self = StObject.set(x, "370", value.asInstanceOf[js.Any])
        
        @scala.inline
        def set370Undefined: Self = StObject.set(x, "370", js.undefined)
        
        @scala.inline
        def set371(value: ErrorCallback[TContext]): Self = StObject.set(x, "371", value.asInstanceOf[js.Any])
        
        @scala.inline
        def set371Undefined: Self = StObject.set(x, "371", js.undefined)
        
        @scala.inline
        def set372(value: ErrorCallback[TContext]): Self = StObject.set(x, "372", value.asInstanceOf[js.Any])
        
        @scala.inline
        def set372Undefined: Self = StObject.set(x, "372", js.undefined)
        
        @scala.inline
        def set373(value: ErrorCallback[TContext]): Self = StObject.set(x, "373", value.asInstanceOf[js.Any])
        
        @scala.inline
        def set373Undefined: Self = StObject.set(x, "373", js.undefined)
        
        @scala.inline
        def set374(value: ErrorCallback[TContext]): Self = StObject.set(x, "374", value.asInstanceOf[js.Any])
        
        @scala.inline
        def set374Undefined: Self = StObject.set(x, "374", js.undefined)
        
        @scala.inline
        def set375(value: ErrorCallback[TContext]): Self = StObject.set(x, "375", value.asInstanceOf[js.Any])
        
        @scala.inline
        def set375Undefined: Self = StObject.set(x, "375", js.undefined)
        
        @scala.inline
        def set376(value: ErrorCallback[TContext]): Self = StObject.set(x, "376", value.asInstanceOf[js.Any])
        
        @scala.inline
        def set376Undefined: Self = StObject.set(x, "376", js.undefined)
        
        @scala.inline
        def set377(value: ErrorCallback[TContext]): Self = StObject.set(x, "377", value.asInstanceOf[js.Any])
        
        @scala.inline
        def set377Undefined: Self = StObject.set(x, "377", js.undefined)
        
        @scala.inline
        def set378(value: ErrorCallback[TContext]): Self = StObject.set(x, "378", value.asInstanceOf[js.Any])
        
        @scala.inline
        def set378Undefined: Self = StObject.set(x, "378", js.undefined)
        
        @scala.inline
        def set379(value: ErrorCallback[TContext]): Self = StObject.set(x, "379", value.asInstanceOf[js.Any])
        
        @scala.inline
        def set379Undefined: Self = StObject.set(x, "379", js.undefined)
        
        @scala.inline
        def set380(value: ErrorCallback[TContext]): Self = StObject.set(x, "380", value.asInstanceOf[js.Any])
        
        @scala.inline
        def set380Undefined: Self = StObject.set(x, "380", js.undefined)
        
        @scala.inline
        def set381(value: ErrorCallback[TContext]): Self = StObject.set(x, "381", value.asInstanceOf[js.Any])
        
        @scala.inline
        def set381Undefined: Self = StObject.set(x, "381", js.undefined)
        
        @scala.inline
        def set382(value: ErrorCallback[TContext]): Self = StObject.set(x, "382", value.asInstanceOf[js.Any])
        
        @scala.inline
        def set382Undefined: Self = StObject.set(x, "382", js.undefined)
        
        @scala.inline
        def set383(value: ErrorCallback[TContext]): Self = StObject.set(x, "383", value.asInstanceOf[js.Any])
        
        @scala.inline
        def set383Undefined: Self = StObject.set(x, "383", js.undefined)
        
        @scala.inline
        def set384(value: ErrorCallback[TContext]): Self = StObject.set(x, "384", value.asInstanceOf[js.Any])
        
        @scala.inline
        def set384Undefined: Self = StObject.set(x, "384", js.undefined)
        
        @scala.inline
        def set385(value: ErrorCallback[TContext]): Self = StObject.set(x, "385", value.asInstanceOf[js.Any])
        
        @scala.inline
        def set385Undefined: Self = StObject.set(x, "385", js.undefined)
        
        @scala.inline
        def set386(value: ErrorCallback[TContext]): Self = StObject.set(x, "386", value.asInstanceOf[js.Any])
        
        @scala.inline
        def set386Undefined: Self = StObject.set(x, "386", js.undefined)
        
        @scala.inline
        def set387(value: ErrorCallback[TContext]): Self = StObject.set(x, "387", value.asInstanceOf[js.Any])
        
        @scala.inline
        def set387Undefined: Self = StObject.set(x, "387", js.undefined)
        
        @scala.inline
        def set388(value: ErrorCallback[TContext]): Self = StObject.set(x, "388", value.asInstanceOf[js.Any])
        
        @scala.inline
        def set388Undefined: Self = StObject.set(x, "388", js.undefined)
        
        @scala.inline
        def set389(value: ErrorCallback[TContext]): Self = StObject.set(x, "389", value.asInstanceOf[js.Any])
        
        @scala.inline
        def set389Undefined: Self = StObject.set(x, "389", js.undefined)
        
        @scala.inline
        def set390(value: ErrorCallback[TContext]): Self = StObject.set(x, "390", value.asInstanceOf[js.Any])
        
        @scala.inline
        def set390Undefined: Self = StObject.set(x, "390", js.undefined)
        
        @scala.inline
        def set391(value: ErrorCallback[TContext]): Self = StObject.set(x, "391", value.asInstanceOf[js.Any])
        
        @scala.inline
        def set391Undefined: Self = StObject.set(x, "391", js.undefined)
        
        @scala.inline
        def set392(value: ErrorCallback[TContext]): Self = StObject.set(x, "392", value.asInstanceOf[js.Any])
        
        @scala.inline
        def set392Undefined: Self = StObject.set(x, "392", js.undefined)
        
        @scala.inline
        def set393(value: ErrorCallback[TContext]): Self = StObject.set(x, "393", value.asInstanceOf[js.Any])
        
        @scala.inline
        def set393Undefined: Self = StObject.set(x, "393", js.undefined)
        
        @scala.inline
        def set394(value: ErrorCallback[TContext]): Self = StObject.set(x, "394", value.asInstanceOf[js.Any])
        
        @scala.inline
        def set394Undefined: Self = StObject.set(x, "394", js.undefined)
        
        @scala.inline
        def set395(value: ErrorCallback[TContext]): Self = StObject.set(x, "395", value.asInstanceOf[js.Any])
        
        @scala.inline
        def set395Undefined: Self = StObject.set(x, "395", js.undefined)
        
        @scala.inline
        def set396(value: ErrorCallback[TContext]): Self = StObject.set(x, "396", value.asInstanceOf[js.Any])
        
        @scala.inline
        def set396Undefined: Self = StObject.set(x, "396", js.undefined)
        
        @scala.inline
        def set397(value: ErrorCallback[TContext]): Self = StObject.set(x, "397", value.asInstanceOf[js.Any])
        
        @scala.inline
        def set397Undefined: Self = StObject.set(x, "397", js.undefined)
        
        @scala.inline
        def set398(value: ErrorCallback[TContext]): Self = StObject.set(x, "398", value.asInstanceOf[js.Any])
        
        @scala.inline
        def set398Undefined: Self = StObject.set(x, "398", js.undefined)
        
        @scala.inline
        def set399(value: ErrorCallback[TContext]): Self = StObject.set(x, "399", value.asInstanceOf[js.Any])
        
        @scala.inline
        def set399Undefined: Self = StObject.set(x, "399", js.undefined)
        
        @scala.inline
        def set400(value: ErrorCallback[TContext]): Self = StObject.set(x, "400", value.asInstanceOf[js.Any])
        
        @scala.inline
        def set400Undefined: Self = StObject.set(x, "400", js.undefined)
        
        @scala.inline
        def set401(value: ErrorCallback[TContext]): Self = StObject.set(x, "401", value.asInstanceOf[js.Any])
        
        @scala.inline
        def set401Undefined: Self = StObject.set(x, "401", js.undefined)
        
        @scala.inline
        def set402(value: ErrorCallback[TContext]): Self = StObject.set(x, "402", value.asInstanceOf[js.Any])
        
        @scala.inline
        def set402Undefined: Self = StObject.set(x, "402", js.undefined)
        
        @scala.inline
        def set403(value: ErrorCallback[TContext]): Self = StObject.set(x, "403", value.asInstanceOf[js.Any])
        
        @scala.inline
        def set403Undefined: Self = StObject.set(x, "403", js.undefined)
        
        @scala.inline
        def set404(value: ErrorCallback[TContext]): Self = StObject.set(x, "404", value.asInstanceOf[js.Any])
        
        @scala.inline
        def set404Undefined: Self = StObject.set(x, "404", js.undefined)
        
        @scala.inline
        def set405(value: ErrorCallback[TContext]): Self = StObject.set(x, "405", value.asInstanceOf[js.Any])
        
        @scala.inline
        def set405Undefined: Self = StObject.set(x, "405", js.undefined)
        
        @scala.inline
        def set406(value: ErrorCallback[TContext]): Self = StObject.set(x, "406", value.asInstanceOf[js.Any])
        
        @scala.inline
        def set406Undefined: Self = StObject.set(x, "406", js.undefined)
        
        @scala.inline
        def set407(value: ErrorCallback[TContext]): Self = StObject.set(x, "407", value.asInstanceOf[js.Any])
        
        @scala.inline
        def set407Undefined: Self = StObject.set(x, "407", js.undefined)
        
        @scala.inline
        def set408(value: ErrorCallback[TContext]): Self = StObject.set(x, "408", value.asInstanceOf[js.Any])
        
        @scala.inline
        def set408Undefined: Self = StObject.set(x, "408", js.undefined)
        
        @scala.inline
        def set409(value: ErrorCallback[TContext]): Self = StObject.set(x, "409", value.asInstanceOf[js.Any])
        
        @scala.inline
        def set409Undefined: Self = StObject.set(x, "409", js.undefined)
        
        @scala.inline
        def set410(value: ErrorCallback[TContext]): Self = StObject.set(x, "410", value.asInstanceOf[js.Any])
        
        @scala.inline
        def set410Undefined: Self = StObject.set(x, "410", js.undefined)
        
        @scala.inline
        def set411(value: ErrorCallback[TContext]): Self = StObject.set(x, "411", value.asInstanceOf[js.Any])
        
        @scala.inline
        def set411Undefined: Self = StObject.set(x, "411", js.undefined)
        
        @scala.inline
        def set412(value: ErrorCallback[TContext]): Self = StObject.set(x, "412", value.asInstanceOf[js.Any])
        
        @scala.inline
        def set412Undefined: Self = StObject.set(x, "412", js.undefined)
        
        @scala.inline
        def set413(value: ErrorCallback[TContext]): Self = StObject.set(x, "413", value.asInstanceOf[js.Any])
        
        @scala.inline
        def set413Undefined: Self = StObject.set(x, "413", js.undefined)
        
        @scala.inline
        def set414(value: ErrorCallback[TContext]): Self = StObject.set(x, "414", value.asInstanceOf[js.Any])
        
        @scala.inline
        def set414Undefined: Self = StObject.set(x, "414", js.undefined)
        
        @scala.inline
        def set415(value: ErrorCallback[TContext]): Self = StObject.set(x, "415", value.asInstanceOf[js.Any])
        
        @scala.inline
        def set415Undefined: Self = StObject.set(x, "415", js.undefined)
        
        @scala.inline
        def set416(value: ErrorCallback[TContext]): Self = StObject.set(x, "416", value.asInstanceOf[js.Any])
        
        @scala.inline
        def set416Undefined: Self = StObject.set(x, "416", js.undefined)
        
        @scala.inline
        def set417(value: ErrorCallback[TContext]): Self = StObject.set(x, "417", value.asInstanceOf[js.Any])
        
        @scala.inline
        def set417Undefined: Self = StObject.set(x, "417", js.undefined)
        
        @scala.inline
        def set418(value: ErrorCallback[TContext]): Self = StObject.set(x, "418", value.asInstanceOf[js.Any])
        
        @scala.inline
        def set418Undefined: Self = StObject.set(x, "418", js.undefined)
        
        @scala.inline
        def set419(value: ErrorCallback[TContext]): Self = StObject.set(x, "419", value.asInstanceOf[js.Any])
        
        @scala.inline
        def set419Undefined: Self = StObject.set(x, "419", js.undefined)
        
        @scala.inline
        def set420(value: ErrorCallback[TContext]): Self = StObject.set(x, "420", value.asInstanceOf[js.Any])
        
        @scala.inline
        def set420Undefined: Self = StObject.set(x, "420", js.undefined)
        
        @scala.inline
        def set421(value: ErrorCallback[TContext]): Self = StObject.set(x, "421", value.asInstanceOf[js.Any])
        
        @scala.inline
        def set421Undefined: Self = StObject.set(x, "421", js.undefined)
        
        @scala.inline
        def set422(value: ErrorCallback[TContext]): Self = StObject.set(x, "422", value.asInstanceOf[js.Any])
        
        @scala.inline
        def set422Undefined: Self = StObject.set(x, "422", js.undefined)
        
        @scala.inline
        def set423(value: ErrorCallback[TContext]): Self = StObject.set(x, "423", value.asInstanceOf[js.Any])
        
        @scala.inline
        def set423Undefined: Self = StObject.set(x, "423", js.undefined)
        
        @scala.inline
        def set424(value: ErrorCallback[TContext]): Self = StObject.set(x, "424", value.asInstanceOf[js.Any])
        
        @scala.inline
        def set424Undefined: Self = StObject.set(x, "424", js.undefined)
        
        @scala.inline
        def set425(value: ErrorCallback[TContext]): Self = StObject.set(x, "425", value.asInstanceOf[js.Any])
        
        @scala.inline
        def set425Undefined: Self = StObject.set(x, "425", js.undefined)
        
        @scala.inline
        def set426(value: ErrorCallback[TContext]): Self = StObject.set(x, "426", value.asInstanceOf[js.Any])
        
        @scala.inline
        def set426Undefined: Self = StObject.set(x, "426", js.undefined)
        
        @scala.inline
        def set427(value: ErrorCallback[TContext]): Self = StObject.set(x, "427", value.asInstanceOf[js.Any])
        
        @scala.inline
        def set427Undefined: Self = StObject.set(x, "427", js.undefined)
        
        @scala.inline
        def set428(value: ErrorCallback[TContext]): Self = StObject.set(x, "428", value.asInstanceOf[js.Any])
        
        @scala.inline
        def set428Undefined: Self = StObject.set(x, "428", js.undefined)
        
        @scala.inline
        def set429(value: ErrorCallback[TContext]): Self = StObject.set(x, "429", value.asInstanceOf[js.Any])
        
        @scala.inline
        def set429Undefined: Self = StObject.set(x, "429", js.undefined)
        
        @scala.inline
        def set430(value: ErrorCallback[TContext]): Self = StObject.set(x, "430", value.asInstanceOf[js.Any])
        
        @scala.inline
        def set430Undefined: Self = StObject.set(x, "430", js.undefined)
        
        @scala.inline
        def set431(value: ErrorCallback[TContext]): Self = StObject.set(x, "431", value.asInstanceOf[js.Any])
        
        @scala.inline
        def set431Undefined: Self = StObject.set(x, "431", js.undefined)
        
        @scala.inline
        def set432(value: ErrorCallback[TContext]): Self = StObject.set(x, "432", value.asInstanceOf[js.Any])
        
        @scala.inline
        def set432Undefined: Self = StObject.set(x, "432", js.undefined)
        
        @scala.inline
        def set433(value: ErrorCallback[TContext]): Self = StObject.set(x, "433", value.asInstanceOf[js.Any])
        
        @scala.inline
        def set433Undefined: Self = StObject.set(x, "433", js.undefined)
        
        @scala.inline
        def set434(value: ErrorCallback[TContext]): Self = StObject.set(x, "434", value.asInstanceOf[js.Any])
        
        @scala.inline
        def set434Undefined: Self = StObject.set(x, "434", js.undefined)
        
        @scala.inline
        def set435(value: ErrorCallback[TContext]): Self = StObject.set(x, "435", value.asInstanceOf[js.Any])
        
        @scala.inline
        def set435Undefined: Self = StObject.set(x, "435", js.undefined)
        
        @scala.inline
        def set436(value: ErrorCallback[TContext]): Self = StObject.set(x, "436", value.asInstanceOf[js.Any])
        
        @scala.inline
        def set436Undefined: Self = StObject.set(x, "436", js.undefined)
        
        @scala.inline
        def set437(value: ErrorCallback[TContext]): Self = StObject.set(x, "437", value.asInstanceOf[js.Any])
        
        @scala.inline
        def set437Undefined: Self = StObject.set(x, "437", js.undefined)
        
        @scala.inline
        def set438(value: ErrorCallback[TContext]): Self = StObject.set(x, "438", value.asInstanceOf[js.Any])
        
        @scala.inline
        def set438Undefined: Self = StObject.set(x, "438", js.undefined)
        
        @scala.inline
        def set439(value: ErrorCallback[TContext]): Self = StObject.set(x, "439", value.asInstanceOf[js.Any])
        
        @scala.inline
        def set439Undefined: Self = StObject.set(x, "439", js.undefined)
        
        @scala.inline
        def set440(value: ErrorCallback[TContext]): Self = StObject.set(x, "440", value.asInstanceOf[js.Any])
        
        @scala.inline
        def set440Undefined: Self = StObject.set(x, "440", js.undefined)
        
        @scala.inline
        def set441(value: ErrorCallback[TContext]): Self = StObject.set(x, "441", value.asInstanceOf[js.Any])
        
        @scala.inline
        def set441Undefined: Self = StObject.set(x, "441", js.undefined)
        
        @scala.inline
        def set442(value: ErrorCallback[TContext]): Self = StObject.set(x, "442", value.asInstanceOf[js.Any])
        
        @scala.inline
        def set442Undefined: Self = StObject.set(x, "442", js.undefined)
        
        @scala.inline
        def set443(value: ErrorCallback[TContext]): Self = StObject.set(x, "443", value.asInstanceOf[js.Any])
        
        @scala.inline
        def set443Undefined: Self = StObject.set(x, "443", js.undefined)
        
        @scala.inline
        def set444(value: ErrorCallback[TContext]): Self = StObject.set(x, "444", value.asInstanceOf[js.Any])
        
        @scala.inline
        def set444Undefined: Self = StObject.set(x, "444", js.undefined)
        
        @scala.inline
        def set445(value: ErrorCallback[TContext]): Self = StObject.set(x, "445", value.asInstanceOf[js.Any])
        
        @scala.inline
        def set445Undefined: Self = StObject.set(x, "445", js.undefined)
        
        @scala.inline
        def set446(value: ErrorCallback[TContext]): Self = StObject.set(x, "446", value.asInstanceOf[js.Any])
        
        @scala.inline
        def set446Undefined: Self = StObject.set(x, "446", js.undefined)
        
        @scala.inline
        def set447(value: ErrorCallback[TContext]): Self = StObject.set(x, "447", value.asInstanceOf[js.Any])
        
        @scala.inline
        def set447Undefined: Self = StObject.set(x, "447", js.undefined)
        
        @scala.inline
        def set448(value: ErrorCallback[TContext]): Self = StObject.set(x, "448", value.asInstanceOf[js.Any])
        
        @scala.inline
        def set448Undefined: Self = StObject.set(x, "448", js.undefined)
        
        @scala.inline
        def set449(value: ErrorCallback[TContext]): Self = StObject.set(x, "449", value.asInstanceOf[js.Any])
        
        @scala.inline
        def set449Undefined: Self = StObject.set(x, "449", js.undefined)
        
        @scala.inline
        def set450(value: ErrorCallback[TContext]): Self = StObject.set(x, "450", value.asInstanceOf[js.Any])
        
        @scala.inline
        def set450Undefined: Self = StObject.set(x, "450", js.undefined)
        
        @scala.inline
        def set451(value: ErrorCallback[TContext]): Self = StObject.set(x, "451", value.asInstanceOf[js.Any])
        
        @scala.inline
        def set451Undefined: Self = StObject.set(x, "451", js.undefined)
        
        @scala.inline
        def set452(value: ErrorCallback[TContext]): Self = StObject.set(x, "452", value.asInstanceOf[js.Any])
        
        @scala.inline
        def set452Undefined: Self = StObject.set(x, "452", js.undefined)
        
        @scala.inline
        def set453(value: ErrorCallback[TContext]): Self = StObject.set(x, "453", value.asInstanceOf[js.Any])
        
        @scala.inline
        def set453Undefined: Self = StObject.set(x, "453", js.undefined)
        
        @scala.inline
        def set454(value: ErrorCallback[TContext]): Self = StObject.set(x, "454", value.asInstanceOf[js.Any])
        
        @scala.inline
        def set454Undefined: Self = StObject.set(x, "454", js.undefined)
        
        @scala.inline
        def set455(value: ErrorCallback[TContext]): Self = StObject.set(x, "455", value.asInstanceOf[js.Any])
        
        @scala.inline
        def set455Undefined: Self = StObject.set(x, "455", js.undefined)
        
        @scala.inline
        def set456(value: ErrorCallback[TContext]): Self = StObject.set(x, "456", value.asInstanceOf[js.Any])
        
        @scala.inline
        def set456Undefined: Self = StObject.set(x, "456", js.undefined)
        
        @scala.inline
        def set457(value: ErrorCallback[TContext]): Self = StObject.set(x, "457", value.asInstanceOf[js.Any])
        
        @scala.inline
        def set457Undefined: Self = StObject.set(x, "457", js.undefined)
        
        @scala.inline
        def set458(value: ErrorCallback[TContext]): Self = StObject.set(x, "458", value.asInstanceOf[js.Any])
        
        @scala.inline
        def set458Undefined: Self = StObject.set(x, "458", js.undefined)
        
        @scala.inline
        def set459(value: ErrorCallback[TContext]): Self = StObject.set(x, "459", value.asInstanceOf[js.Any])
        
        @scala.inline
        def set459Undefined: Self = StObject.set(x, "459", js.undefined)
        
        @scala.inline
        def set460(value: ErrorCallback[TContext]): Self = StObject.set(x, "460", value.asInstanceOf[js.Any])
        
        @scala.inline
        def set460Undefined: Self = StObject.set(x, "460", js.undefined)
        
        @scala.inline
        def set461(value: ErrorCallback[TContext]): Self = StObject.set(x, "461", value.asInstanceOf[js.Any])
        
        @scala.inline
        def set461Undefined: Self = StObject.set(x, "461", js.undefined)
        
        @scala.inline
        def set462(value: ErrorCallback[TContext]): Self = StObject.set(x, "462", value.asInstanceOf[js.Any])
        
        @scala.inline
        def set462Undefined: Self = StObject.set(x, "462", js.undefined)
        
        @scala.inline
        def set463(value: ErrorCallback[TContext]): Self = StObject.set(x, "463", value.asInstanceOf[js.Any])
        
        @scala.inline
        def set463Undefined: Self = StObject.set(x, "463", js.undefined)
        
        @scala.inline
        def set464(value: ErrorCallback[TContext]): Self = StObject.set(x, "464", value.asInstanceOf[js.Any])
        
        @scala.inline
        def set464Undefined: Self = StObject.set(x, "464", js.undefined)
        
        @scala.inline
        def set465(value: ErrorCallback[TContext]): Self = StObject.set(x, "465", value.asInstanceOf[js.Any])
        
        @scala.inline
        def set465Undefined: Self = StObject.set(x, "465", js.undefined)
        
        @scala.inline
        def set466(value: ErrorCallback[TContext]): Self = StObject.set(x, "466", value.asInstanceOf[js.Any])
        
        @scala.inline
        def set466Undefined: Self = StObject.set(x, "466", js.undefined)
        
        @scala.inline
        def set467(value: ErrorCallback[TContext]): Self = StObject.set(x, "467", value.asInstanceOf[js.Any])
        
        @scala.inline
        def set467Undefined: Self = StObject.set(x, "467", js.undefined)
        
        @scala.inline
        def set468(value: ErrorCallback[TContext]): Self = StObject.set(x, "468", value.asInstanceOf[js.Any])
        
        @scala.inline
        def set468Undefined: Self = StObject.set(x, "468", js.undefined)
        
        @scala.inline
        def set469(value: ErrorCallback[TContext]): Self = StObject.set(x, "469", value.asInstanceOf[js.Any])
        
        @scala.inline
        def set469Undefined: Self = StObject.set(x, "469", js.undefined)
        
        @scala.inline
        def set470(value: ErrorCallback[TContext]): Self = StObject.set(x, "470", value.asInstanceOf[js.Any])
        
        @scala.inline
        def set470Undefined: Self = StObject.set(x, "470", js.undefined)
        
        @scala.inline
        def set471(value: ErrorCallback[TContext]): Self = StObject.set(x, "471", value.asInstanceOf[js.Any])
        
        @scala.inline
        def set471Undefined: Self = StObject.set(x, "471", js.undefined)
        
        @scala.inline
        def set472(value: ErrorCallback[TContext]): Self = StObject.set(x, "472", value.asInstanceOf[js.Any])
        
        @scala.inline
        def set472Undefined: Self = StObject.set(x, "472", js.undefined)
        
        @scala.inline
        def set473(value: ErrorCallback[TContext]): Self = StObject.set(x, "473", value.asInstanceOf[js.Any])
        
        @scala.inline
        def set473Undefined: Self = StObject.set(x, "473", js.undefined)
        
        @scala.inline
        def set474(value: ErrorCallback[TContext]): Self = StObject.set(x, "474", value.asInstanceOf[js.Any])
        
        @scala.inline
        def set474Undefined: Self = StObject.set(x, "474", js.undefined)
        
        @scala.inline
        def set475(value: ErrorCallback[TContext]): Self = StObject.set(x, "475", value.asInstanceOf[js.Any])
        
        @scala.inline
        def set475Undefined: Self = StObject.set(x, "475", js.undefined)
        
        @scala.inline
        def set476(value: ErrorCallback[TContext]): Self = StObject.set(x, "476", value.asInstanceOf[js.Any])
        
        @scala.inline
        def set476Undefined: Self = StObject.set(x, "476", js.undefined)
        
        @scala.inline
        def set477(value: ErrorCallback[TContext]): Self = StObject.set(x, "477", value.asInstanceOf[js.Any])
        
        @scala.inline
        def set477Undefined: Self = StObject.set(x, "477", js.undefined)
        
        @scala.inline
        def set478(value: ErrorCallback[TContext]): Self = StObject.set(x, "478", value.asInstanceOf[js.Any])
        
        @scala.inline
        def set478Undefined: Self = StObject.set(x, "478", js.undefined)
        
        @scala.inline
        def set479(value: ErrorCallback[TContext]): Self = StObject.set(x, "479", value.asInstanceOf[js.Any])
        
        @scala.inline
        def set479Undefined: Self = StObject.set(x, "479", js.undefined)
        
        @scala.inline
        def set480(value: ErrorCallback[TContext]): Self = StObject.set(x, "480", value.asInstanceOf[js.Any])
        
        @scala.inline
        def set480Undefined: Self = StObject.set(x, "480", js.undefined)
        
        @scala.inline
        def set481(value: ErrorCallback[TContext]): Self = StObject.set(x, "481", value.asInstanceOf[js.Any])
        
        @scala.inline
        def set481Undefined: Self = StObject.set(x, "481", js.undefined)
        
        @scala.inline
        def set482(value: ErrorCallback[TContext]): Self = StObject.set(x, "482", value.asInstanceOf[js.Any])
        
        @scala.inline
        def set482Undefined: Self = StObject.set(x, "482", js.undefined)
        
        @scala.inline
        def set483(value: ErrorCallback[TContext]): Self = StObject.set(x, "483", value.asInstanceOf[js.Any])
        
        @scala.inline
        def set483Undefined: Self = StObject.set(x, "483", js.undefined)
        
        @scala.inline
        def set484(value: ErrorCallback[TContext]): Self = StObject.set(x, "484", value.asInstanceOf[js.Any])
        
        @scala.inline
        def set484Undefined: Self = StObject.set(x, "484", js.undefined)
        
        @scala.inline
        def set485(value: ErrorCallback[TContext]): Self = StObject.set(x, "485", value.asInstanceOf[js.Any])
        
        @scala.inline
        def set485Undefined: Self = StObject.set(x, "485", js.undefined)
        
        @scala.inline
        def set486(value: ErrorCallback[TContext]): Self = StObject.set(x, "486", value.asInstanceOf[js.Any])
        
        @scala.inline
        def set486Undefined: Self = StObject.set(x, "486", js.undefined)
        
        @scala.inline
        def set487(value: ErrorCallback[TContext]): Self = StObject.set(x, "487", value.asInstanceOf[js.Any])
        
        @scala.inline
        def set487Undefined: Self = StObject.set(x, "487", js.undefined)
        
        @scala.inline
        def set488(value: ErrorCallback[TContext]): Self = StObject.set(x, "488", value.asInstanceOf[js.Any])
        
        @scala.inline
        def set488Undefined: Self = StObject.set(x, "488", js.undefined)
        
        @scala.inline
        def set489(value: ErrorCallback[TContext]): Self = StObject.set(x, "489", value.asInstanceOf[js.Any])
        
        @scala.inline
        def set489Undefined: Self = StObject.set(x, "489", js.undefined)
        
        @scala.inline
        def set490(value: ErrorCallback[TContext]): Self = StObject.set(x, "490", value.asInstanceOf[js.Any])
        
        @scala.inline
        def set490Undefined: Self = StObject.set(x, "490", js.undefined)
        
        @scala.inline
        def set491(value: ErrorCallback[TContext]): Self = StObject.set(x, "491", value.asInstanceOf[js.Any])
        
        @scala.inline
        def set491Undefined: Self = StObject.set(x, "491", js.undefined)
        
        @scala.inline
        def set492(value: ErrorCallback[TContext]): Self = StObject.set(x, "492", value.asInstanceOf[js.Any])
        
        @scala.inline
        def set492Undefined: Self = StObject.set(x, "492", js.undefined)
        
        @scala.inline
        def set493(value: ErrorCallback[TContext]): Self = StObject.set(x, "493", value.asInstanceOf[js.Any])
        
        @scala.inline
        def set493Undefined: Self = StObject.set(x, "493", js.undefined)
        
        @scala.inline
        def set494(value: ErrorCallback[TContext]): Self = StObject.set(x, "494", value.asInstanceOf[js.Any])
        
        @scala.inline
        def set494Undefined: Self = StObject.set(x, "494", js.undefined)
        
        @scala.inline
        def set495(value: ErrorCallback[TContext]): Self = StObject.set(x, "495", value.asInstanceOf[js.Any])
        
        @scala.inline
        def set495Undefined: Self = StObject.set(x, "495", js.undefined)
        
        @scala.inline
        def set496(value: ErrorCallback[TContext]): Self = StObject.set(x, "496", value.asInstanceOf[js.Any])
        
        @scala.inline
        def set496Undefined: Self = StObject.set(x, "496", js.undefined)
        
        @scala.inline
        def set497(value: ErrorCallback[TContext]): Self = StObject.set(x, "497", value.asInstanceOf[js.Any])
        
        @scala.inline
        def set497Undefined: Self = StObject.set(x, "497", js.undefined)
        
        @scala.inline
        def set498(value: ErrorCallback[TContext]): Self = StObject.set(x, "498", value.asInstanceOf[js.Any])
        
        @scala.inline
        def set498Undefined: Self = StObject.set(x, "498", js.undefined)
        
        @scala.inline
        def set499(value: ErrorCallback[TContext]): Self = StObject.set(x, "499", value.asInstanceOf[js.Any])
        
        @scala.inline
        def set499Undefined: Self = StObject.set(x, "499", js.undefined)
        
        @scala.inline
        def set500(value: ErrorCallback[TContext]): Self = StObject.set(x, "500", value.asInstanceOf[js.Any])
        
        @scala.inline
        def set500Undefined: Self = StObject.set(x, "500", js.undefined)
        
        @scala.inline
        def set501(value: ErrorCallback[TContext]): Self = StObject.set(x, "501", value.asInstanceOf[js.Any])
        
        @scala.inline
        def set501Undefined: Self = StObject.set(x, "501", js.undefined)
        
        @scala.inline
        def set502(value: ErrorCallback[TContext]): Self = StObject.set(x, "502", value.asInstanceOf[js.Any])
        
        @scala.inline
        def set502Undefined: Self = StObject.set(x, "502", js.undefined)
        
        @scala.inline
        def set503(value: ErrorCallback[TContext]): Self = StObject.set(x, "503", value.asInstanceOf[js.Any])
        
        @scala.inline
        def set503Undefined: Self = StObject.set(x, "503", js.undefined)
        
        @scala.inline
        def set504(value: ErrorCallback[TContext]): Self = StObject.set(x, "504", value.asInstanceOf[js.Any])
        
        @scala.inline
        def set504Undefined: Self = StObject.set(x, "504", js.undefined)
        
        @scala.inline
        def set505(value: ErrorCallback[TContext]): Self = StObject.set(x, "505", value.asInstanceOf[js.Any])
        
        @scala.inline
        def set505Undefined: Self = StObject.set(x, "505", js.undefined)
        
        @scala.inline
        def set506(value: ErrorCallback[TContext]): Self = StObject.set(x, "506", value.asInstanceOf[js.Any])
        
        @scala.inline
        def set506Undefined: Self = StObject.set(x, "506", js.undefined)
        
        @scala.inline
        def set507(value: ErrorCallback[TContext]): Self = StObject.set(x, "507", value.asInstanceOf[js.Any])
        
        @scala.inline
        def set507Undefined: Self = StObject.set(x, "507", js.undefined)
        
        @scala.inline
        def set508(value: ErrorCallback[TContext]): Self = StObject.set(x, "508", value.asInstanceOf[js.Any])
        
        @scala.inline
        def set508Undefined: Self = StObject.set(x, "508", js.undefined)
        
        @scala.inline
        def set509(value: ErrorCallback[TContext]): Self = StObject.set(x, "509", value.asInstanceOf[js.Any])
        
        @scala.inline
        def set509Undefined: Self = StObject.set(x, "509", js.undefined)
        
        @scala.inline
        def set510(value: ErrorCallback[TContext]): Self = StObject.set(x, "510", value.asInstanceOf[js.Any])
        
        @scala.inline
        def set510Undefined: Self = StObject.set(x, "510", js.undefined)
        
        @scala.inline
        def set511(value: ErrorCallback[TContext]): Self = StObject.set(x, "511", value.asInstanceOf[js.Any])
        
        @scala.inline
        def set511Undefined: Self = StObject.set(x, "511", js.undefined)
        
        @scala.inline
        def set512(value: ErrorCallback[TContext]): Self = StObject.set(x, "512", value.asInstanceOf[js.Any])
        
        @scala.inline
        def set512Undefined: Self = StObject.set(x, "512", js.undefined)
        
        @scala.inline
        def set513(value: ErrorCallback[TContext]): Self = StObject.set(x, "513", value.asInstanceOf[js.Any])
        
        @scala.inline
        def set513Undefined: Self = StObject.set(x, "513", js.undefined)
        
        @scala.inline
        def set514(value: ErrorCallback[TContext]): Self = StObject.set(x, "514", value.asInstanceOf[js.Any])
        
        @scala.inline
        def set514Undefined: Self = StObject.set(x, "514", js.undefined)
        
        @scala.inline
        def set515(value: ErrorCallback[TContext]): Self = StObject.set(x, "515", value.asInstanceOf[js.Any])
        
        @scala.inline
        def set515Undefined: Self = StObject.set(x, "515", js.undefined)
        
        @scala.inline
        def set516(value: ErrorCallback[TContext]): Self = StObject.set(x, "516", value.asInstanceOf[js.Any])
        
        @scala.inline
        def set516Undefined: Self = StObject.set(x, "516", js.undefined)
        
        @scala.inline
        def set517(value: ErrorCallback[TContext]): Self = StObject.set(x, "517", value.asInstanceOf[js.Any])
        
        @scala.inline
        def set517Undefined: Self = StObject.set(x, "517", js.undefined)
        
        @scala.inline
        def set518(value: ErrorCallback[TContext]): Self = StObject.set(x, "518", value.asInstanceOf[js.Any])
        
        @scala.inline
        def set518Undefined: Self = StObject.set(x, "518", js.undefined)
        
        @scala.inline
        def set519(value: ErrorCallback[TContext]): Self = StObject.set(x, "519", value.asInstanceOf[js.Any])
        
        @scala.inline
        def set519Undefined: Self = StObject.set(x, "519", js.undefined)
        
        @scala.inline
        def set520(value: ErrorCallback[TContext]): Self = StObject.set(x, "520", value.asInstanceOf[js.Any])
        
        @scala.inline
        def set520Undefined: Self = StObject.set(x, "520", js.undefined)
        
        @scala.inline
        def set521(value: ErrorCallback[TContext]): Self = StObject.set(x, "521", value.asInstanceOf[js.Any])
        
        @scala.inline
        def set521Undefined: Self = StObject.set(x, "521", js.undefined)
        
        @scala.inline
        def set522(value: ErrorCallback[TContext]): Self = StObject.set(x, "522", value.asInstanceOf[js.Any])
        
        @scala.inline
        def set522Undefined: Self = StObject.set(x, "522", js.undefined)
        
        @scala.inline
        def set523(value: ErrorCallback[TContext]): Self = StObject.set(x, "523", value.asInstanceOf[js.Any])
        
        @scala.inline
        def set523Undefined: Self = StObject.set(x, "523", js.undefined)
        
        @scala.inline
        def set524(value: ErrorCallback[TContext]): Self = StObject.set(x, "524", value.asInstanceOf[js.Any])
        
        @scala.inline
        def set524Undefined: Self = StObject.set(x, "524", js.undefined)
        
        @scala.inline
        def set525(value: ErrorCallback[TContext]): Self = StObject.set(x, "525", value.asInstanceOf[js.Any])
        
        @scala.inline
        def set525Undefined: Self = StObject.set(x, "525", js.undefined)
        
        @scala.inline
        def set526(value: ErrorCallback[TContext]): Self = StObject.set(x, "526", value.asInstanceOf[js.Any])
        
        @scala.inline
        def set526Undefined: Self = StObject.set(x, "526", js.undefined)
        
        @scala.inline
        def set527(value: ErrorCallback[TContext]): Self = StObject.set(x, "527", value.asInstanceOf[js.Any])
        
        @scala.inline
        def set527Undefined: Self = StObject.set(x, "527", js.undefined)
        
        @scala.inline
        def set528(value: ErrorCallback[TContext]): Self = StObject.set(x, "528", value.asInstanceOf[js.Any])
        
        @scala.inline
        def set528Undefined: Self = StObject.set(x, "528", js.undefined)
        
        @scala.inline
        def set529(value: ErrorCallback[TContext]): Self = StObject.set(x, "529", value.asInstanceOf[js.Any])
        
        @scala.inline
        def set529Undefined: Self = StObject.set(x, "529", js.undefined)
        
        @scala.inline
        def set530(value: ErrorCallback[TContext]): Self = StObject.set(x, "530", value.asInstanceOf[js.Any])
        
        @scala.inline
        def set530Undefined: Self = StObject.set(x, "530", js.undefined)
        
        @scala.inline
        def set531(value: ErrorCallback[TContext]): Self = StObject.set(x, "531", value.asInstanceOf[js.Any])
        
        @scala.inline
        def set531Undefined: Self = StObject.set(x, "531", js.undefined)
        
        @scala.inline
        def set532(value: ErrorCallback[TContext]): Self = StObject.set(x, "532", value.asInstanceOf[js.Any])
        
        @scala.inline
        def set532Undefined: Self = StObject.set(x, "532", js.undefined)
        
        @scala.inline
        def set533(value: ErrorCallback[TContext]): Self = StObject.set(x, "533", value.asInstanceOf[js.Any])
        
        @scala.inline
        def set533Undefined: Self = StObject.set(x, "533", js.undefined)
        
        @scala.inline
        def set534(value: ErrorCallback[TContext]): Self = StObject.set(x, "534", value.asInstanceOf[js.Any])
        
        @scala.inline
        def set534Undefined: Self = StObject.set(x, "534", js.undefined)
        
        @scala.inline
        def set535(value: ErrorCallback[TContext]): Self = StObject.set(x, "535", value.asInstanceOf[js.Any])
        
        @scala.inline
        def set535Undefined: Self = StObject.set(x, "535", js.undefined)
        
        @scala.inline
        def set536(value: ErrorCallback[TContext]): Self = StObject.set(x, "536", value.asInstanceOf[js.Any])
        
        @scala.inline
        def set536Undefined: Self = StObject.set(x, "536", js.undefined)
        
        @scala.inline
        def set537(value: ErrorCallback[TContext]): Self = StObject.set(x, "537", value.asInstanceOf[js.Any])
        
        @scala.inline
        def set537Undefined: Self = StObject.set(x, "537", js.undefined)
        
        @scala.inline
        def set538(value: ErrorCallback[TContext]): Self = StObject.set(x, "538", value.asInstanceOf[js.Any])
        
        @scala.inline
        def set538Undefined: Self = StObject.set(x, "538", js.undefined)
        
        @scala.inline
        def set539(value: ErrorCallback[TContext]): Self = StObject.set(x, "539", value.asInstanceOf[js.Any])
        
        @scala.inline
        def set539Undefined: Self = StObject.set(x, "539", js.undefined)
        
        @scala.inline
        def set540(value: ErrorCallback[TContext]): Self = StObject.set(x, "540", value.asInstanceOf[js.Any])
        
        @scala.inline
        def set540Undefined: Self = StObject.set(x, "540", js.undefined)
        
        @scala.inline
        def set541(value: ErrorCallback[TContext]): Self = StObject.set(x, "541", value.asInstanceOf[js.Any])
        
        @scala.inline
        def set541Undefined: Self = StObject.set(x, "541", js.undefined)
        
        @scala.inline
        def set542(value: ErrorCallback[TContext]): Self = StObject.set(x, "542", value.asInstanceOf[js.Any])
        
        @scala.inline
        def set542Undefined: Self = StObject.set(x, "542", js.undefined)
        
        @scala.inline
        def set543(value: ErrorCallback[TContext]): Self = StObject.set(x, "543", value.asInstanceOf[js.Any])
        
        @scala.inline
        def set543Undefined: Self = StObject.set(x, "543", js.undefined)
        
        @scala.inline
        def set544(value: ErrorCallback[TContext]): Self = StObject.set(x, "544", value.asInstanceOf[js.Any])
        
        @scala.inline
        def set544Undefined: Self = StObject.set(x, "544", js.undefined)
        
        @scala.inline
        def set545(value: ErrorCallback[TContext]): Self = StObject.set(x, "545", value.asInstanceOf[js.Any])
        
        @scala.inline
        def set545Undefined: Self = StObject.set(x, "545", js.undefined)
        
        @scala.inline
        def set546(value: ErrorCallback[TContext]): Self = StObject.set(x, "546", value.asInstanceOf[js.Any])
        
        @scala.inline
        def set546Undefined: Self = StObject.set(x, "546", js.undefined)
        
        @scala.inline
        def set547(value: ErrorCallback[TContext]): Self = StObject.set(x, "547", value.asInstanceOf[js.Any])
        
        @scala.inline
        def set547Undefined: Self = StObject.set(x, "547", js.undefined)
        
        @scala.inline
        def set548(value: ErrorCallback[TContext]): Self = StObject.set(x, "548", value.asInstanceOf[js.Any])
        
        @scala.inline
        def set548Undefined: Self = StObject.set(x, "548", js.undefined)
        
        @scala.inline
        def set549(value: ErrorCallback[TContext]): Self = StObject.set(x, "549", value.asInstanceOf[js.Any])
        
        @scala.inline
        def set549Undefined: Self = StObject.set(x, "549", js.undefined)
        
        @scala.inline
        def set550(value: ErrorCallback[TContext]): Self = StObject.set(x, "550", value.asInstanceOf[js.Any])
        
        @scala.inline
        def set550Undefined: Self = StObject.set(x, "550", js.undefined)
        
        @scala.inline
        def set551(value: ErrorCallback[TContext]): Self = StObject.set(x, "551", value.asInstanceOf[js.Any])
        
        @scala.inline
        def set551Undefined: Self = StObject.set(x, "551", js.undefined)
        
        @scala.inline
        def set552(value: ErrorCallback[TContext]): Self = StObject.set(x, "552", value.asInstanceOf[js.Any])
        
        @scala.inline
        def set552Undefined: Self = StObject.set(x, "552", js.undefined)
        
        @scala.inline
        def set553(value: ErrorCallback[TContext]): Self = StObject.set(x, "553", value.asInstanceOf[js.Any])
        
        @scala.inline
        def set553Undefined: Self = StObject.set(x, "553", js.undefined)
        
        @scala.inline
        def set554(value: ErrorCallback[TContext]): Self = StObject.set(x, "554", value.asInstanceOf[js.Any])
        
        @scala.inline
        def set554Undefined: Self = StObject.set(x, "554", js.undefined)
        
        @scala.inline
        def set555(value: ErrorCallback[TContext]): Self = StObject.set(x, "555", value.asInstanceOf[js.Any])
        
        @scala.inline
        def set555Undefined: Self = StObject.set(x, "555", js.undefined)
        
        @scala.inline
        def set556(value: ErrorCallback[TContext]): Self = StObject.set(x, "556", value.asInstanceOf[js.Any])
        
        @scala.inline
        def set556Undefined: Self = StObject.set(x, "556", js.undefined)
        
        @scala.inline
        def set557(value: ErrorCallback[TContext]): Self = StObject.set(x, "557", value.asInstanceOf[js.Any])
        
        @scala.inline
        def set557Undefined: Self = StObject.set(x, "557", js.undefined)
        
        @scala.inline
        def set558(value: ErrorCallback[TContext]): Self = StObject.set(x, "558", value.asInstanceOf[js.Any])
        
        @scala.inline
        def set558Undefined: Self = StObject.set(x, "558", js.undefined)
        
        @scala.inline
        def set559(value: ErrorCallback[TContext]): Self = StObject.set(x, "559", value.asInstanceOf[js.Any])
        
        @scala.inline
        def set559Undefined: Self = StObject.set(x, "559", js.undefined)
        
        @scala.inline
        def set560(value: ErrorCallback[TContext]): Self = StObject.set(x, "560", value.asInstanceOf[js.Any])
        
        @scala.inline
        def set560Undefined: Self = StObject.set(x, "560", js.undefined)
        
        @scala.inline
        def set561(value: ErrorCallback[TContext]): Self = StObject.set(x, "561", value.asInstanceOf[js.Any])
        
        @scala.inline
        def set561Undefined: Self = StObject.set(x, "561", js.undefined)
        
        @scala.inline
        def set562(value: ErrorCallback[TContext]): Self = StObject.set(x, "562", value.asInstanceOf[js.Any])
        
        @scala.inline
        def set562Undefined: Self = StObject.set(x, "562", js.undefined)
        
        @scala.inline
        def set563(value: ErrorCallback[TContext]): Self = StObject.set(x, "563", value.asInstanceOf[js.Any])
        
        @scala.inline
        def set563Undefined: Self = StObject.set(x, "563", js.undefined)
        
        @scala.inline
        def set564(value: ErrorCallback[TContext]): Self = StObject.set(x, "564", value.asInstanceOf[js.Any])
        
        @scala.inline
        def set564Undefined: Self = StObject.set(x, "564", js.undefined)
        
        @scala.inline
        def set565(value: ErrorCallback[TContext]): Self = StObject.set(x, "565", value.asInstanceOf[js.Any])
        
        @scala.inline
        def set565Undefined: Self = StObject.set(x, "565", js.undefined)
        
        @scala.inline
        def set566(value: ErrorCallback[TContext]): Self = StObject.set(x, "566", value.asInstanceOf[js.Any])
        
        @scala.inline
        def set566Undefined: Self = StObject.set(x, "566", js.undefined)
        
        @scala.inline
        def set567(value: ErrorCallback[TContext]): Self = StObject.set(x, "567", value.asInstanceOf[js.Any])
        
        @scala.inline
        def set567Undefined: Self = StObject.set(x, "567", js.undefined)
        
        @scala.inline
        def set568(value: ErrorCallback[TContext]): Self = StObject.set(x, "568", value.asInstanceOf[js.Any])
        
        @scala.inline
        def set568Undefined: Self = StObject.set(x, "568", js.undefined)
        
        @scala.inline
        def set569(value: ErrorCallback[TContext]): Self = StObject.set(x, "569", value.asInstanceOf[js.Any])
        
        @scala.inline
        def set569Undefined: Self = StObject.set(x, "569", js.undefined)
        
        @scala.inline
        def set570(value: ErrorCallback[TContext]): Self = StObject.set(x, "570", value.asInstanceOf[js.Any])
        
        @scala.inline
        def set570Undefined: Self = StObject.set(x, "570", js.undefined)
        
        @scala.inline
        def set571(value: ErrorCallback[TContext]): Self = StObject.set(x, "571", value.asInstanceOf[js.Any])
        
        @scala.inline
        def set571Undefined: Self = StObject.set(x, "571", js.undefined)
        
        @scala.inline
        def set572(value: ErrorCallback[TContext]): Self = StObject.set(x, "572", value.asInstanceOf[js.Any])
        
        @scala.inline
        def set572Undefined: Self = StObject.set(x, "572", js.undefined)
        
        @scala.inline
        def set573(value: ErrorCallback[TContext]): Self = StObject.set(x, "573", value.asInstanceOf[js.Any])
        
        @scala.inline
        def set573Undefined: Self = StObject.set(x, "573", js.undefined)
        
        @scala.inline
        def set574(value: ErrorCallback[TContext]): Self = StObject.set(x, "574", value.asInstanceOf[js.Any])
        
        @scala.inline
        def set574Undefined: Self = StObject.set(x, "574", js.undefined)
        
        @scala.inline
        def set575(value: ErrorCallback[TContext]): Self = StObject.set(x, "575", value.asInstanceOf[js.Any])
        
        @scala.inline
        def set575Undefined: Self = StObject.set(x, "575", js.undefined)
        
        @scala.inline
        def set576(value: ErrorCallback[TContext]): Self = StObject.set(x, "576", value.asInstanceOf[js.Any])
        
        @scala.inline
        def set576Undefined: Self = StObject.set(x, "576", js.undefined)
        
        @scala.inline
        def set577(value: ErrorCallback[TContext]): Self = StObject.set(x, "577", value.asInstanceOf[js.Any])
        
        @scala.inline
        def set577Undefined: Self = StObject.set(x, "577", js.undefined)
        
        @scala.inline
        def set578(value: ErrorCallback[TContext]): Self = StObject.set(x, "578", value.asInstanceOf[js.Any])
        
        @scala.inline
        def set578Undefined: Self = StObject.set(x, "578", js.undefined)
        
        @scala.inline
        def set579(value: ErrorCallback[TContext]): Self = StObject.set(x, "579", value.asInstanceOf[js.Any])
        
        @scala.inline
        def set579Undefined: Self = StObject.set(x, "579", js.undefined)
        
        @scala.inline
        def set580(value: ErrorCallback[TContext]): Self = StObject.set(x, "580", value.asInstanceOf[js.Any])
        
        @scala.inline
        def set580Undefined: Self = StObject.set(x, "580", js.undefined)
        
        @scala.inline
        def set581(value: ErrorCallback[TContext]): Self = StObject.set(x, "581", value.asInstanceOf[js.Any])
        
        @scala.inline
        def set581Undefined: Self = StObject.set(x, "581", js.undefined)
        
        @scala.inline
        def set582(value: ErrorCallback[TContext]): Self = StObject.set(x, "582", value.asInstanceOf[js.Any])
        
        @scala.inline
        def set582Undefined: Self = StObject.set(x, "582", js.undefined)
        
        @scala.inline
        def set583(value: ErrorCallback[TContext]): Self = StObject.set(x, "583", value.asInstanceOf[js.Any])
        
        @scala.inline
        def set583Undefined: Self = StObject.set(x, "583", js.undefined)
        
        @scala.inline
        def set584(value: ErrorCallback[TContext]): Self = StObject.set(x, "584", value.asInstanceOf[js.Any])
        
        @scala.inline
        def set584Undefined: Self = StObject.set(x, "584", js.undefined)
        
        @scala.inline
        def set585(value: ErrorCallback[TContext]): Self = StObject.set(x, "585", value.asInstanceOf[js.Any])
        
        @scala.inline
        def set585Undefined: Self = StObject.set(x, "585", js.undefined)
        
        @scala.inline
        def set586(value: ErrorCallback[TContext]): Self = StObject.set(x, "586", value.asInstanceOf[js.Any])
        
        @scala.inline
        def set586Undefined: Self = StObject.set(x, "586", js.undefined)
        
        @scala.inline
        def set587(value: ErrorCallback[TContext]): Self = StObject.set(x, "587", value.asInstanceOf[js.Any])
        
        @scala.inline
        def set587Undefined: Self = StObject.set(x, "587", js.undefined)
        
        @scala.inline
        def set588(value: ErrorCallback[TContext]): Self = StObject.set(x, "588", value.asInstanceOf[js.Any])
        
        @scala.inline
        def set588Undefined: Self = StObject.set(x, "588", js.undefined)
        
        @scala.inline
        def set589(value: ErrorCallback[TContext]): Self = StObject.set(x, "589", value.asInstanceOf[js.Any])
        
        @scala.inline
        def set589Undefined: Self = StObject.set(x, "589", js.undefined)
        
        @scala.inline
        def set590(value: ErrorCallback[TContext]): Self = StObject.set(x, "590", value.asInstanceOf[js.Any])
        
        @scala.inline
        def set590Undefined: Self = StObject.set(x, "590", js.undefined)
        
        @scala.inline
        def set591(value: ErrorCallback[TContext]): Self = StObject.set(x, "591", value.asInstanceOf[js.Any])
        
        @scala.inline
        def set591Undefined: Self = StObject.set(x, "591", js.undefined)
        
        @scala.inline
        def set592(value: ErrorCallback[TContext]): Self = StObject.set(x, "592", value.asInstanceOf[js.Any])
        
        @scala.inline
        def set592Undefined: Self = StObject.set(x, "592", js.undefined)
        
        @scala.inline
        def set593(value: ErrorCallback[TContext]): Self = StObject.set(x, "593", value.asInstanceOf[js.Any])
        
        @scala.inline
        def set593Undefined: Self = StObject.set(x, "593", js.undefined)
        
        @scala.inline
        def set594(value: ErrorCallback[TContext]): Self = StObject.set(x, "594", value.asInstanceOf[js.Any])
        
        @scala.inline
        def set594Undefined: Self = StObject.set(x, "594", js.undefined)
        
        @scala.inline
        def set595(value: ErrorCallback[TContext]): Self = StObject.set(x, "595", value.asInstanceOf[js.Any])
        
        @scala.inline
        def set595Undefined: Self = StObject.set(x, "595", js.undefined)
        
        @scala.inline
        def set596(value: ErrorCallback[TContext]): Self = StObject.set(x, "596", value.asInstanceOf[js.Any])
        
        @scala.inline
        def set596Undefined: Self = StObject.set(x, "596", js.undefined)
        
        @scala.inline
        def set597(value: ErrorCallback[TContext]): Self = StObject.set(x, "597", value.asInstanceOf[js.Any])
        
        @scala.inline
        def set597Undefined: Self = StObject.set(x, "597", js.undefined)
        
        @scala.inline
        def set598(value: ErrorCallback[TContext]): Self = StObject.set(x, "598", value.asInstanceOf[js.Any])
        
        @scala.inline
        def set598Undefined: Self = StObject.set(x, "598", js.undefined)
        
        @scala.inline
        def set599(value: ErrorCallback[TContext]): Self = StObject.set(x, "599", value.asInstanceOf[js.Any])
        
        @scala.inline
        def set599Undefined: Self = StObject.set(x, "599", js.undefined)
      }
    }
    
    type SuccessCallback[TContext] = js.ThisFunction3[
        /* this */ TContext, 
        /* data */ js.Any, 
        /* textStatus */ SuccessTextStatus, 
        /* jqXHR */ jqXHR[js.Any], 
        Unit
      ]
    
    /* Rewritten from type alias, can be one of: 
      - typingsSlinky.jquery.jqueryStrings.success
      - typingsSlinky.jquery.jqueryStrings.notmodified
      - typingsSlinky.jquery.jqueryStrings.nocontent
    */
    trait SuccessTextStatus extends StObject
    object SuccessTextStatus {
      
      @scala.inline
      def nocontent: typingsSlinky.jquery.jqueryStrings.nocontent = "nocontent".asInstanceOf[typingsSlinky.jquery.jqueryStrings.nocontent]
      
      @scala.inline
      def notmodified: typingsSlinky.jquery.jqueryStrings.notmodified = "notmodified".asInstanceOf[typingsSlinky.jquery.jqueryStrings.notmodified]
      
      @scala.inline
      def success: typingsSlinky.jquery.jqueryStrings.success = "success".asInstanceOf[typingsSlinky.jquery.jqueryStrings.success]
    }
    
    /* Rewritten from type alias, can be one of: 
      - typingsSlinky.jquery.jqueryStrings.success
      - typingsSlinky.jquery.jqueryStrings.notmodified
      - typingsSlinky.jquery.jqueryStrings.nocontent
      - typingsSlinky.jquery.jqueryStrings.timeout
      - typingsSlinky.jquery.jqueryStrings.error
      - typingsSlinky.jquery.jqueryStrings.abort
      - typingsSlinky.jquery.jqueryStrings.parsererror
    */
    trait TextStatus extends StObject
    object TextStatus {
      
      @scala.inline
      def abort: typingsSlinky.jquery.jqueryStrings.abort = "abort".asInstanceOf[typingsSlinky.jquery.jqueryStrings.abort]
      
      @scala.inline
      def error: typingsSlinky.jquery.jqueryStrings.error = "error".asInstanceOf[typingsSlinky.jquery.jqueryStrings.error]
      
      @scala.inline
      def nocontent: typingsSlinky.jquery.jqueryStrings.nocontent = "nocontent".asInstanceOf[typingsSlinky.jquery.jqueryStrings.nocontent]
      
      @scala.inline
      def notmodified: typingsSlinky.jquery.jqueryStrings.notmodified = "notmodified".asInstanceOf[typingsSlinky.jquery.jqueryStrings.notmodified]
      
      @scala.inline
      def parsererror: typingsSlinky.jquery.jqueryStrings.parsererror = "parsererror".asInstanceOf[typingsSlinky.jquery.jqueryStrings.parsererror]
      
      @scala.inline
      def success: typingsSlinky.jquery.jqueryStrings.success = "success".asInstanceOf[typingsSlinky.jquery.jqueryStrings.success]
      
      @scala.inline
      def timeout: typingsSlinky.jquery.jqueryStrings.timeout = "timeout".asInstanceOf[typingsSlinky.jquery.jqueryStrings.timeout]
    }
    
    // #endregion
    // Writable properties on XMLHttpRequest
    /* Inlined parent std.Partial<std.Pick<std.XMLHttpRequest, 'onreadystatechange' | 'responseType' | 'timeout' | 'withCredentials'>> */
    @js.native
    trait XHRFields extends StObject {
      
      var msCaching: js.UndefOr[String] = js.native
      
      var onreadystatechange: js.UndefOr[
            (js.ThisFunction1[/* this */ this.type, /* ev */ org.scalajs.dom.raw.Event, _]) | Null
          ] = js.native
      
      var responseType: js.UndefOr[XMLHttpRequestResponseType] = js.native
      
      var timeout: js.UndefOr[Double] = js.native
      
      var withCredentials: js.UndefOr[Boolean] = js.native
    }
    object XHRFields {
      
      @scala.inline
      def apply(): XHRFields = {
        val __obj = js.Dynamic.literal()
        __obj.asInstanceOf[XHRFields]
      }
      
      @scala.inline
      implicit class XHRFieldsMutableBuilder[Self <: XHRFields] (val x: Self) extends AnyVal {
        
        @scala.inline
        def setMsCaching(value: String): Self = StObject.set(x, "msCaching", value.asInstanceOf[js.Any])
        
        @scala.inline
        def setMsCachingUndefined: Self = StObject.set(x, "msCaching", js.undefined)
        
        @scala.inline
        def setOnreadystatechange(value: js.ThisFunction1[XHRFields, /* ev */ org.scalajs.dom.raw.Event, _]): Self = StObject.set(x, "onreadystatechange", value.asInstanceOf[js.Any])
        
        @scala.inline
        def setOnreadystatechangeNull: Self = StObject.set(x, "onreadystatechange", null)
        
        @scala.inline
        def setOnreadystatechangeUndefined: Self = StObject.set(x, "onreadystatechange", js.undefined)
        
        @scala.inline
        def setResponseType(value: XMLHttpRequestResponseType): Self = StObject.set(x, "responseType", value.asInstanceOf[js.Any])
        
        @scala.inline
        def setResponseTypeUndefined: Self = StObject.set(x, "responseType", js.undefined)
        
        @scala.inline
        def setTimeout(value: Double): Self = StObject.set(x, "timeout", value.asInstanceOf[js.Any])
        
        @scala.inline
        def setTimeoutUndefined: Self = StObject.set(x, "timeout", js.undefined)
        
        @scala.inline
        def setWithCredentials(value: Boolean): Self = StObject.set(x, "withCredentials", value.asInstanceOf[js.Any])
        
        @scala.inline
        def setWithCredentialsUndefined: Self = StObject.set(x, "withCredentials", js.undefined)
      }
    }
  }
  
  // region Ajax
  // #region Ajax
  @js.native
  trait AjaxSettings[TContext] extends AjaxSettingsBase[TContext] {
    
    /**
      * A string containing the URL to which the request is sent.
      */
    var url: js.UndefOr[String] = js.native
  }
  object AjaxSettings {
    
    @scala.inline
    def apply[TContext](): AjaxSettings[TContext] = {
      val __obj = js.Dynamic.literal()
      __obj.asInstanceOf[AjaxSettings[TContext]]
    }
    
    @scala.inline
    implicit class AjaxSettingsMutableBuilder[Self <: AjaxSettings[_], TContext] (val x: Self with AjaxSettings[TContext]) extends AnyVal {
      
      @scala.inline
      def setUrl(value: String): Self = StObject.set(x, "url", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setUrlUndefined: Self = StObject.set(x, "url", js.undefined)
    }
  }
  
  /**
    * The promise will be resolved when the animation reaches its end, and rejected when terminated early. The context of callbacks attached to the promise will be the element, and the arguments will be the `Animation` object and a boolean `jumpedToEnd` which when true means the animation was stopped with `gotoEnd`, when `undefined` the animation completed naturally.
    * @see \`{@link https://gist.github.com/gnarf/54829d408993526fe475#animation-factory }\`
    * @since 1.8
    */
  @js.native
  trait Animation[TElement]
    extends PromiseBase[
          Animation[TElement], 
          Animation[TElement], 
          Animation[TElement], 
          js.UndefOr[`true`], 
          `false`, 
          Double, 
          scala.Nothing, 
          scala.Nothing, 
          Double, 
          scala.Nothing, 
          scala.Nothing, 
          scala.Nothing
        ] {
    
    /**
      * @see \`{@link https://gist.github.com/gnarf/54829d408993526fe475#animation-factory }\`
      * @since 1.8
      */
    def createTween(propName: String, finalValue: Double): Tween[TElement] = js.native
    
    /**
      * The duration specified in ms
      * @see \`{@link https://gist.github.com/gnarf/54829d408993526fe475#animation-factory }\`
      * @since 1.8
      */
    var duration: Double = js.native
    
    /**
      * The element being animatied
      * @see \`{@link https://gist.github.com/gnarf/54829d408993526fe475#animation-factory }\`
      * @since 1.8
      */
    var elem: TElement = js.native
    
    /**
      * The animation options
      * @see \`{@link https://gist.github.com/gnarf/54829d408993526fe475#animation-factory }\`
      * @since 1.8
      */
    var opts: EffectsOptions[TElement] = js.native
    
    /**
      * The original options before being filtered
      * @see \`{@link https://gist.github.com/gnarf/54829d408993526fe475#animation-factory }\`
      * @since 1.8
      */
    var originalOpts: EffectsOptions[TElement] = js.native
    
    /**
      * The original properties before being filtered
      * @see \`{@link https://gist.github.com/gnarf/54829d408993526fe475#animation-factory }\`
      * @since 1.8
      */
    var originalProps: PlainObject[_] = js.native
    
    /**
      * The final value of each property animating
      * @see \`{@link https://gist.github.com/gnarf/54829d408993526fe475#animation-factory }\`
      * @since 1.8
      */
    var props: PlainObject[_] = js.native
    
    /**
      * The numeric value of `new Date()` when the animation began
      * @see \`{@link https://gist.github.com/gnarf/54829d408993526fe475#animation-factory }\`
      * @since 1.8
      */
    var startTime: Double = js.native
    
    /**
      * Stops the animation early, optionally going to the end.
      * @see \`{@link https://gist.github.com/gnarf/54829d408993526fe475#animation-factory }\`
      * @since 1.8
      */
    def stop(gotoEnd: Boolean): this.type = js.native
    
    /**
      * The animations tweens.
      * @see \`{@link https://gist.github.com/gnarf/54829d408993526fe475#animation-factory }\`
      * @since 1.8
      */
    var tweens: js.Array[Tween[TElement]] = js.native
  }
  
  /**
    * @deprecated ​ Deprecated since 1.8. Use \`{@link Tween.propHooks jQuery.Tween.propHooks}\`.
    *
    * `jQuery.fx.step` functions are being replaced by `jQuery.Tween.propHooks` and may eventually be removed, but are still supported via the default tween propHook.
    */
  type AnimationHook[TElement] = js.Function1[/* fx */ Tween[TElement], Unit]
  
  // region Animation
  // #region Animation
  /**
    * @see \`{@link https://gist.github.com/gnarf/54829d408993526fe475#animation-factory }\`
    * @since 1.8
    */
  @js.native
  trait AnimationStatic extends StObject {
    
    /**
      * @see \`{@link https://gist.github.com/gnarf/54829d408993526fe475#animation-factory }\`
      * @since 1.8
      */
    def apply[TElement](element: TElement, props: PlainObject[_], opts: EffectsOptions[TElement]): Animation[TElement] = js.native
    
    /**
      * During the initial setup, `jQuery.Animation` will call any callbacks that have been registered through `jQuery.Animation.prefilter( function( element, props, opts ) )`.
      * @param callback The prefilter will have `this` set to an animation object, and you can modify any of the `props` or
      *                 `opts` however you need. The prefilter _may_ return its own promise which also implements `stop()`,
      *                 in which case, processing of prefilters stops. If the prefilter is not trying to override the animation
      *                 entirely, it should return `undefined` or some other falsy value.
      * @see \`{@link https://gist.github.com/gnarf/54829d408993526fe475#prefilters }\`
      * @since 1.8
      */
    def prefilter[TElement](
      callback: js.ThisFunction3[
          /* this */ Animation[TElement], 
          /* element */ TElement, 
          /* props */ PlainObject[_], 
          /* opts */ EffectsOptions[TElement], 
          Animation[TElement] | Falsy | Unit
        ]
    ): Unit = js.native
    def prefilter[TElement](
      callback: js.ThisFunction3[
          /* this */ Animation[TElement], 
          /* element */ TElement, 
          /* props */ PlainObject[_], 
          /* opts */ EffectsOptions[TElement], 
          Animation[TElement] | Falsy | Unit
        ],
      prepend: Boolean
    ): Unit = js.native
    
    /**
      * A "Tweener" is a function responsible for creating a tween object, and you might want to override these if you want to implement complex values ( like a clip/transform array matrix ) in a single property.
      *
      * You can override the default process for creating a tween in order to provide your own tween object by using `jQuery.Animation.tweener( props, callback( prop, value ) )`.
      * @param props A space separated list of properties to be passed to your tweener, or `"*"` if it should be called
      *              for all properties.
      * @param callback The callback will be called with `this` being an `Animation` object. The tweener function will
      *                 generally start with `var tween = this.createTween( prop, value );`, but doesn't nessecarily need to
      *                 use the `jQuery.Tween()` factory.
      * @see \`{@link https://gist.github.com/gnarf/54829d408993526fe475#tweeners }\`
      * @since 1.8
      */
    def tweener(props: String, callback: Tweener[_]): Unit = js.native
  }
  
  @js.native
  trait BlurEvent[TDelegateTarget, TData, TCurrentTarget, TTarget] extends FocusEventBase[TDelegateTarget, TData, TCurrentTarget, TTarget] {
    
    @JSName("type")
    var type_BlurEvent: blur = js.native
  }
  object BlurEvent {
    
    @scala.inline
    def apply[TDelegateTarget, TData, TCurrentTarget, TTarget](
      bubbles: Boolean,
      cancelable: Boolean,
      currentTarget: TCurrentTarget,
      data: TData,
      delegateTarget: TDelegateTarget,
      detail: Double,
      eventPhase: Double,
      isDefaultPrevented: () => Boolean,
      isImmediatePropagationStopped: () => Boolean,
      isPropagationStopped: () => Boolean,
      preventDefault: () => Unit,
      stopImmediatePropagation: () => Unit,
      stopPropagation: () => Unit,
      target: TTarget,
      timeStamp: Double,
      `type`: blur,
      view: Window
    ): BlurEvent[TDelegateTarget, TData, TCurrentTarget, TTarget] = {
      val __obj = js.Dynamic.literal(bubbles = bubbles.asInstanceOf[js.Any], cancelable = cancelable.asInstanceOf[js.Any], currentTarget = currentTarget.asInstanceOf[js.Any], data = data.asInstanceOf[js.Any], delegateTarget = delegateTarget.asInstanceOf[js.Any], detail = detail.asInstanceOf[js.Any], eventPhase = eventPhase.asInstanceOf[js.Any], isDefaultPrevented = js.Any.fromFunction0(isDefaultPrevented), isImmediatePropagationStopped = js.Any.fromFunction0(isImmediatePropagationStopped), isPropagationStopped = js.Any.fromFunction0(isPropagationStopped), preventDefault = js.Any.fromFunction0(preventDefault), stopImmediatePropagation = js.Any.fromFunction0(stopImmediatePropagation), stopPropagation = js.Any.fromFunction0(stopPropagation), target = target.asInstanceOf[js.Any], timeStamp = timeStamp.asInstanceOf[js.Any], view = view.asInstanceOf[js.Any])
      __obj.updateDynamic("type")(`type`.asInstanceOf[js.Any])
      __obj.asInstanceOf[BlurEvent[TDelegateTarget, TData, TCurrentTarget, TTarget]]
    }
    
    @scala.inline
    implicit class BlurEventMutableBuilder[Self <: BlurEvent[_, _, _, _], TDelegateTarget, TData, TCurrentTarget, TTarget] (val x: Self with (BlurEvent[TDelegateTarget, TData, TCurrentTarget, TTarget])) extends AnyVal {
      
      @scala.inline
      def setType(value: blur): Self = StObject.set(x, "type", value.asInstanceOf[js.Any])
    }
  }
  
  // #endregion
  // region CSS hooks
  // #region CSS hooks
  // Workaround for TypeScript 2.3 which does not have support for weak types handling.
  type CSSHook[TElement] = Partial[_CSSHook[TElement]] with (Pick[_CSSHook[TElement], get | set])
  
  type CSSHooks = // Set to HTMLElement to minimize breaks but should probably be Element.
  StringDictionary[CSSHook[HTMLElement]]
  
  // tslint:disable-next-line:ban-types
  @js.native
  trait Callbacks[T /* <: js.Function */] extends StObject {
    
    /**
      * Add a callback or a collection of callbacks to a callback list.
      * @param callback A function, or array of functions, that are to be added to the callback list.
      * @param callbacks A function, or array of functions, that are to be added to the callback list.
      * @see \`{@link https://api.jquery.com/callbacks.add/ }\`
      * @since 1.7
      * @example ​ ````Use callbacks.add() to add new callbacks to a callback list:
    ```javascript
    // A sample logging function to be added to a callbacks list
    var foo = function( value ) {
      console.log( "foo: " + value );
    };
    ​
    // Another function to also be added to the list
    var bar = function( value ) {
      console.log( "bar: " + value );
    };
    ​
    var callbacks = $.Callbacks();
    ​
    // Add the function "foo" to the list
    callbacks.add( foo );
    ​
    // Fire the items on the list
    callbacks.fire( "hello" );
    // Outputs: "foo: hello"
    ​
    // Add the function "bar" to the list
    callbacks.add( bar );
    ​
    // Fire the items on the list again
    callbacks.fire( "world" );
    ​
    // Outputs:
    // "foo: world"
    // "bar: world"
    ```
      */
    def add(callback: TypeOrArray[T], callbacks: TypeOrArray[T]*): this.type = js.native
    
    /**
      * Disable a callback list from doing anything more.
      * @see \`{@link https://api.jquery.com/callbacks.disable/ }\`
      * @since 1.7
      * @example ​ ````Use callbacks.disable() to disable further calls to a callback list:
    ```javascript
    // A sample logging function to be added to a callbacks list
    var foo = function( value ) {
      console.log( value );
    };
    ​
    var callbacks = $.Callbacks();
    ​
    // Add the above function to the list
    callbacks.add( foo );
    ​
    // Fire the items on the list
    callbacks.fire( "foo" );
    // Outputs: foo
    ​
    // Disable further calls being possible
    callbacks.disable();
    ​
    // Attempt to fire with "foobar" as an argument
    callbacks.fire( "foobar" );
    // foobar isn't output
    ```
      */
    def disable(): this.type = js.native
    
    /**
      * Determine if the callbacks list has been disabled.
      * @see \`{@link https://api.jquery.com/callbacks.disabled/ }\`
      * @since 1.7
      * @example ​ ````Use callbacks.disabled() to determine if the callbacks list has been disabled:
    ```javascript
    // A sample logging function to be added to a callbacks list
    var foo = function( value ) {
      console.log( "foo:" + value );
    };
    ​
    var callbacks = $.Callbacks();
    ​
    // Add the logging function to the callback list
    callbacks.add( foo );
    ​
    // Fire the items on the list, passing an argument
    callbacks.fire( "hello" );
    // Outputs "foo: hello"
    ​
    // Disable the callbacks list
    callbacks.disable();
    ​
    // Test the disabled state of the list
    console.log ( callbacks.disabled() );
    // Outputs: true
    ```
      */
    def disabled(): Boolean = js.native
    
    /**
      * Remove all of the callbacks from a list.
      * @see \`{@link https://api.jquery.com/callbacks.empty/ }\`
      * @since 1.7
      * @example ​ ````Use callbacks.empty() to empty a list of callbacks:
    ```javascript
    // A sample logging function to be added to a callbacks list
    var foo = function( value1, value2 ) {
      console.log( "foo: " + value1 + "," + value2 );
    };
    ​
    // Another function to also be added to the list
    var bar = function( value1, value2 ) {
      console.log( "bar: " + value1 + "," + value2 );
    };
    ​
    var callbacks = $.Callbacks();
    ​
    // Add the two functions
    callbacks.add( foo );
    callbacks.add( bar );
    ​
    // Empty the callbacks list
    callbacks.empty();
    ​
    // Check to ensure all callbacks have been removed
    console.log( callbacks.has( foo ) );
    // false
    console.log( callbacks.has( bar ) );
    // false
    ```
      */
    def empty(): this.type = js.native
    
    /**
      * Call all of the callbacks with the given arguments.
      * @param args The argument or list of arguments to pass back to the callback list.
      * @see \`{@link https://api.jquery.com/callbacks.fire/ }\`
      * @since 1.7
      * @example ​ ````Use callbacks.fire() to invoke the callbacks in a list with any arguments that have been passed:
    ```javascript
    // A sample logging function to be added to a callbacks list
    var foo = function( value ) {
      console.log( "foo:" + value );
    };
    ​
    var callbacks = $.Callbacks();
    ​
    // Add the function "foo" to the list
    callbacks.add( foo );
    ​
    // Fire the items on the list
    callbacks.fire( "hello" ); // Outputs: "foo: hello"
    callbacks.fire( "world" ); // Outputs: "foo: world"
    ​
    // Add another function to the list
    var bar = function( value ){
      console.log( "bar:" + value );
    };
    ​
    // Add this function to the list
    callbacks.add( bar );
    ​
    // Fire the items on the list again
    callbacks.fire( "hello again" );
    // Outputs:
    // "foo: hello again"
    // "bar: hello again"
    ```
      */
    def fire(args: js.Any*): this.type = js.native
    
    /**
      * Call all callbacks in a list with the given context and arguments.
      * @param context A reference to the context in which the callbacks in the list should be fired.
      * @param args An argument, or array of arguments, to pass to the callbacks in the list.
      * @see \`{@link https://api.jquery.com/callbacks.fireWith/ }\`
      * @since 1.7
      * @example ​ ````Use callbacks.fireWith() to fire a list of callbacks with a specific context and an array of arguments:
    ```javascript
    // A sample logging function to be added to a callbacks list
    var log = function( value1, value2 ) {
      console.log( "Received: " + value1 + "," + value2 );
    };
    ​
    var callbacks = $.Callbacks();
    ​
    // Add the log method to the callbacks list
    callbacks.add( log );
    ​
    // Fire the callbacks on the list using the context "window"
    // and an arguments array
    ​
    callbacks.fireWith( window, [ "foo","bar" ] );
    // Outputs: "Received: foo, bar"
    ```
      */
    def fireWith(context: js.Object): this.type = js.native
    def fireWith(context: js.Object, args: ArrayLike[_]): this.type = js.native
    
    /**
      * Determine if the callbacks have already been called at least once.
      * @see \`{@link https://api.jquery.com/callbacks.fired/ }\`
      * @since 1.7
      * @example ​ ````Use callbacks.fired() to determine if the callbacks in a list have been called at least once:
    ```javascript
    // A sample logging function to be added to a callbacks list
    var foo = function( value ) {
      console.log( "foo:" + value );
    };
    ​
    var callbacks = $.Callbacks();
    ​
    // Add the function "foo" to the list
    callbacks.add( foo );
    ​
    // Fire the items on the list
    callbacks.fire( "hello" ); // Outputs: "foo: hello"
    callbacks.fire( "world" ); // Outputs: "foo: world"
    ​
    // Test to establish if the callbacks have been called
    console.log( callbacks.fired() );
    ```
      */
    def fired(): Boolean = js.native
    
    /**
      * Determine whether or not the list has any callbacks attached. If a callback is provided as an argument, determine whether it is in a list.
      * @param callback The callback to search for.
      * @see \`{@link https://api.jquery.com/callbacks.has/ }\`
      * @since 1.7
      * @example ​ ````Use callbacks.has() to check if a callback list contains a specific callback:
    ```javascript
    // A sample logging function to be added to a callbacks list
    var foo = function( value1, value2 ) {
      console.log( "Received: " + value1 + "," + value2 );
    };
    ​
    // A second function which will not be added to the list
    var bar = function( value1, value2 ) {
      console.log( "foobar" );
    };
    ​
    var callbacks = $.Callbacks();
    ​
    // Add the log method to the callbacks list
    callbacks.add( foo );
    ​
    // Determine which callbacks are in the list
    console.log( callbacks.has( foo ) );
    // true
    console.log( callbacks.has( bar ) );
    // false
    ```
      */
    def has(): Boolean = js.native
    def has(callback: T): Boolean = js.native
    
    /**
      * Lock a callback list in its current state.
      * @see \`{@link https://api.jquery.com/callbacks.lock/ }\`
      * @since 1.7
      * @example ​ ````Use callbacks.lock() to lock a callback list to avoid further changes being made to the list state:
    ```javascript
    // A sample logging function to be added to a callbacks list
    var foo = function( value ) {
      console.log( "foo:" + value );
    };
    ​
    var callbacks = $.Callbacks();
    ​
    // Add the logging function to the callback list
    callbacks.add( foo );
    ​
    // Fire the items on the list, passing an argument
    callbacks.fire( "hello" );
    // Outputs "foo: hello"
    ​
    // Lock the callbacks list
    callbacks.lock();
    ​
    // Try firing the items again
    callbacks.fire( "world" );
    ​
    // As the list was locked, no items were called,
    // so "world" isn't logged
    ```
      * @example ​ ````Use callbacks.lock() to lock a callback list with &quot;memory,&quot; and then resume using the list:
    ```html
    <!doctype html>
    <html lang="en">
    <head>
      <meta charset="utf-8">
      <title>callbacks.lock demo</title>
      <script src="https://code.jquery.com/jquery-3.3.1.js"></script>
    </head>
    <body>
    ​
    <div id="log"></div>
    ​
    <script>
    // Simple function for logging results
    var log = function( value ) {
      $( "#log" ).append( "<p>" + value + "</p>" );
    };
    ​
    // Two sample functions to be added to a callbacks list
    var foo = function( value ) {
      log( "foo: " + value );
    };
    var bar = function( value ) {
      log( "bar: " + value );
    };
    ​
    // Create the callbacks object with the "memory" flag
    var callbacks = $.Callbacks( "memory" );
    ​
    // Add the foo logging function to the callback list
    callbacks.add( foo );
    ​
    // Fire the items on the list, passing an argument
    callbacks.fire( "hello" );
    // Outputs "foo: hello"
    ​
    // Lock the callbacks list
    callbacks.lock();
    ​
    // Try firing the items again
    callbacks.fire( "world" );
    // As the list was locked, no items were called,
    // so "foo: world" isn't logged
    ​
    // Add the foo function to the callback list again
    callbacks.add( foo );
    ​
    // Try firing the items again
    callbacks.fire( "silentArgument" );
    // Outputs "foo: hello" because the argument value was stored in memory
    ​
    // Add the bar function to the callback list
    callbacks.add( bar );
    ​
    callbacks.fire( "youHadMeAtHello" );
    // Outputs "bar: hello" because the list is still locked,
    // and the argument value is still stored in memory
    </script>
    ​
    </body>
    </html>
    ```
      */
    def lock(): this.type = js.native
    
    /**
      * Determine if the callbacks list has been locked.
      * @see \`{@link https://api.jquery.com/callbacks.locked/ }\`
      * @since 1.7
      * @example ​ ````Use callbacks.locked() to determine the lock-state of a callback list:
    ```javascript
    // A sample logging function to be added to a callbacks list
    var foo = function( value ) {
      console.log( "foo: " + value );
    };
    ​
    var callbacks = $.Callbacks();
    ​
    // Add the logging function to the callback list
    callbacks.add( foo );
    ​
    // Fire the items on the list, passing an argument
    callbacks.fire( "hello" );
    // Outputs "foo: hello"
    ​
    // Lock the callbacks list
    callbacks.lock();
    ​
    // Test the lock-state of the list
    console.log ( callbacks.locked() );
    // true
    ```
      */
    def locked(): Boolean = js.native
    
    /**
      * Remove a callback or a collection of callbacks from a callback list.
      * @param callbacks A function, or array of functions, that are to be removed from the callback list.
      * @see \`{@link https://api.jquery.com/callbacks.remove/ }\`
      * @since 1.7
      * @example ​ ````Use callbacks.remove() to remove callbacks from a callback list:
    ```javascript
    // A sample logging function to be added to a callbacks list
    var foo = function( value ) {
      console.log( "foo: " + value );
    };
    ​
    var callbacks = $.Callbacks();
    ​
    // Add the function "foo" to the list
    callbacks.add( foo );
    ​
    // Fire the items on the list
    callbacks.fire( "hello" );
    // Outputs: "foo: hello"
    ​
    // Remove "foo" from the callback list
    callbacks.remove( foo );
    ​
    // Fire the items on the list again
    callbacks.fire( "world" );
    ​
    // Nothing output as "foo" is no longer in the list
    ```
      */
    def remove(callbacks: T*): this.type = js.native
  }
  
  // #endregion
  // region Callbacks
  // #region Callbacks
  type CallbacksStatic = js.Function1[/* flags */ js.UndefOr[String], Callbacks[js.Function]]
  
  @js.native
  trait ChangeEvent[TDelegateTarget, TData, TCurrentTarget, TTarget] extends EventBase[TDelegateTarget, TData, TCurrentTarget, TTarget] {
    
    @JSName("type")
    var type_ChangeEvent: change = js.native
  }
  object ChangeEvent {
    
    @scala.inline
    def apply[TDelegateTarget, TData, TCurrentTarget, TTarget](
      bubbles: Boolean,
      cancelable: Boolean,
      currentTarget: TCurrentTarget,
      data: TData,
      delegateTarget: TDelegateTarget,
      eventPhase: Double,
      isDefaultPrevented: () => Boolean,
      isImmediatePropagationStopped: () => Boolean,
      isPropagationStopped: () => Boolean,
      preventDefault: () => Unit,
      stopImmediatePropagation: () => Unit,
      stopPropagation: () => Unit,
      target: TTarget,
      timeStamp: Double,
      `type`: change
    ): ChangeEvent[TDelegateTarget, TData, TCurrentTarget, TTarget] = {
      val __obj = js.Dynamic.literal(bubbles = bubbles.asInstanceOf[js.Any], cancelable = cancelable.asInstanceOf[js.Any], currentTarget = currentTarget.asInstanceOf[js.Any], data = data.asInstanceOf[js.Any], delegateTarget = delegateTarget.asInstanceOf[js.Any], eventPhase = eventPhase.asInstanceOf[js.Any], isDefaultPrevented = js.Any.fromFunction0(isDefaultPrevented), isImmediatePropagationStopped = js.Any.fromFunction0(isImmediatePropagationStopped), isPropagationStopped = js.Any.fromFunction0(isPropagationStopped), preventDefault = js.Any.fromFunction0(preventDefault), stopImmediatePropagation = js.Any.fromFunction0(stopImmediatePropagation), stopPropagation = js.Any.fromFunction0(stopPropagation), target = target.asInstanceOf[js.Any], timeStamp = timeStamp.asInstanceOf[js.Any])
      __obj.updateDynamic("type")(`type`.asInstanceOf[js.Any])
      __obj.asInstanceOf[ChangeEvent[TDelegateTarget, TData, TCurrentTarget, TTarget]]
    }
    
    @scala.inline
    implicit class ChangeEventMutableBuilder[Self <: ChangeEvent[_, _, _, _], TDelegateTarget, TData, TCurrentTarget, TTarget] (val x: Self with (ChangeEvent[TDelegateTarget, TData, TCurrentTarget, TTarget])) extends AnyVal {
      
      @scala.inline
      def setType(value: change): Self = StObject.set(x, "type", value.asInstanceOf[js.Any])
    }
  }
  
  @js.native
  trait ClickEvent[TDelegateTarget, TData, TCurrentTarget, TTarget] extends MouseEventBase[TDelegateTarget, TData, TCurrentTarget, TTarget] {
    
    /**
      * The other DOM element involved in the event, if any.
      * @see \`{@link https://api.jquery.com/event.relatedTarget/ }\`
      * @since 1.1.4
      * @example ​ ````On mouseout of anchors, alert the element type being entered.
      ```javascript
      $( "a" ).mouseout(function( event ) {
      alert( event.relatedTarget.nodeName ); // "DIV"
      });
      ```
      */
    @JSName("relatedTarget")
    var relatedTarget_ClickEvent: js.UndefOr[Null] = js.native
    
    @JSName("type")
    var type_ClickEvent: click = js.native
  }
  object ClickEvent {
    
    @scala.inline
    def apply[TDelegateTarget, TData, TCurrentTarget, TTarget](
      altKey: Boolean,
      bubbles: Boolean,
      button: Double,
      buttons: Double,
      cancelable: Boolean,
      clientX: Double,
      clientY: Double,
      ctrlKey: Boolean,
      currentTarget: TCurrentTarget,
      data: TData,
      delegateTarget: TDelegateTarget,
      detail: Double,
      eventPhase: Double,
      isDefaultPrevented: () => Boolean,
      isImmediatePropagationStopped: () => Boolean,
      isPropagationStopped: () => Boolean,
      metaKey: Boolean,
      offsetX: Double,
      offsetY: Double,
      pageX: Double,
      pageY: Double,
      preventDefault: () => Unit,
      screenX: Double,
      screenY: Double,
      shiftKey: Boolean,
      stopImmediatePropagation: () => Unit,
      stopPropagation: () => Unit,
      target: TTarget,
      timeStamp: Double,
      toElement: Element,
      `type`: click,
      view: Window,
      which: Double
    ): ClickEvent[TDelegateTarget, TData, TCurrentTarget, TTarget] = {
      val __obj = js.Dynamic.literal(altKey = altKey.asInstanceOf[js.Any], bubbles = bubbles.asInstanceOf[js.Any], button = button.asInstanceOf[js.Any], buttons = buttons.asInstanceOf[js.Any], cancelable = cancelable.asInstanceOf[js.Any], clientX = clientX.asInstanceOf[js.Any], clientY = clientY.asInstanceOf[js.Any], ctrlKey = ctrlKey.asInstanceOf[js.Any], currentTarget = currentTarget.asInstanceOf[js.Any], data = data.asInstanceOf[js.Any], delegateTarget = delegateTarget.asInstanceOf[js.Any], detail = detail.asInstanceOf[js.Any], eventPhase = eventPhase.asInstanceOf[js.Any], isDefaultPrevented = js.Any.fromFunction0(isDefaultPrevented), isImmediatePropagationStopped = js.Any.fromFunction0(isImmediatePropagationStopped), isPropagationStopped = js.Any.fromFunction0(isPropagationStopped), metaKey = metaKey.asInstanceOf[js.Any], offsetX = offsetX.asInstanceOf[js.Any], offsetY = offsetY.asInstanceOf[js.Any], pageX = pageX.asInstanceOf[js.Any], pageY = pageY.asInstanceOf[js.Any], preventDefault = js.Any.fromFunction0(preventDefault), screenX = screenX.asInstanceOf[js.Any], screenY = screenY.asInstanceOf[js.Any], shiftKey = shiftKey.asInstanceOf[js.Any], stopImmediatePropagation = js.Any.fromFunction0(stopImmediatePropagation), stopPropagation = js.Any.fromFunction0(stopPropagation), target = target.asInstanceOf[js.Any], timeStamp = timeStamp.asInstanceOf[js.Any], toElement = toElement.asInstanceOf[js.Any], view = view.asInstanceOf[js.Any], which = which.asInstanceOf[js.Any])
      __obj.updateDynamic("type")(`type`.asInstanceOf[js.Any])
      __obj.asInstanceOf[ClickEvent[TDelegateTarget, TData, TCurrentTarget, TTarget]]
    }
    
    @scala.inline
    implicit class ClickEventMutableBuilder[Self <: ClickEvent[_, _, _, _], TDelegateTarget, TData, TCurrentTarget, TTarget] (val x: Self with (ClickEvent[TDelegateTarget, TData, TCurrentTarget, TTarget])) extends AnyVal {
      
      @scala.inline
      def setType(value: click): Self = StObject.set(x, "type", value.asInstanceOf[js.Any])
    }
  }
  
  @js.native
  trait ContextMenuEvent[TDelegateTarget, TData, TCurrentTarget, TTarget] extends MouseEventBase[TDelegateTarget, TData, TCurrentTarget, TTarget] {
    
    /**
      * The other DOM element involved in the event, if any.
      * @see \`{@link https://api.jquery.com/event.relatedTarget/ }\`
      * @since 1.1.4
      * @example ​ ````On mouseout of anchors, alert the element type being entered.
      ```javascript
      $( "a" ).mouseout(function( event ) {
      alert( event.relatedTarget.nodeName ); // "DIV"
      });
      ```
      */
    @JSName("relatedTarget")
    var relatedTarget_ContextMenuEvent: js.UndefOr[Null] = js.native
    
    @JSName("type")
    var type_ContextMenuEvent: contextmenu = js.native
  }
  object ContextMenuEvent {
    
    @scala.inline
    def apply[TDelegateTarget, TData, TCurrentTarget, TTarget](
      altKey: Boolean,
      bubbles: Boolean,
      button: Double,
      buttons: Double,
      cancelable: Boolean,
      clientX: Double,
      clientY: Double,
      ctrlKey: Boolean,
      currentTarget: TCurrentTarget,
      data: TData,
      delegateTarget: TDelegateTarget,
      detail: Double,
      eventPhase: Double,
      isDefaultPrevented: () => Boolean,
      isImmediatePropagationStopped: () => Boolean,
      isPropagationStopped: () => Boolean,
      metaKey: Boolean,
      offsetX: Double,
      offsetY: Double,
      pageX: Double,
      pageY: Double,
      preventDefault: () => Unit,
      screenX: Double,
      screenY: Double,
      shiftKey: Boolean,
      stopImmediatePropagation: () => Unit,
      stopPropagation: () => Unit,
      target: TTarget,
      timeStamp: Double,
      toElement: Element,
      `type`: contextmenu,
      view: Window,
      which: Double
    ): ContextMenuEvent[TDelegateTarget, TData, TCurrentTarget, TTarget] = {
      val __obj = js.Dynamic.literal(altKey = altKey.asInstanceOf[js.Any], bubbles = bubbles.asInstanceOf[js.Any], button = button.asInstanceOf[js.Any], buttons = buttons.asInstanceOf[js.Any], cancelable = cancelable.asInstanceOf[js.Any], clientX = clientX.asInstanceOf[js.Any], clientY = clientY.asInstanceOf[js.Any], ctrlKey = ctrlKey.asInstanceOf[js.Any], currentTarget = currentTarget.asInstanceOf[js.Any], data = data.asInstanceOf[js.Any], delegateTarget = delegateTarget.asInstanceOf[js.Any], detail = detail.asInstanceOf[js.Any], eventPhase = eventPhase.asInstanceOf[js.Any], isDefaultPrevented = js.Any.fromFunction0(isDefaultPrevented), isImmediatePropagationStopped = js.Any.fromFunction0(isImmediatePropagationStopped), isPropagationStopped = js.Any.fromFunction0(isPropagationStopped), metaKey = metaKey.asInstanceOf[js.Any], offsetX = offsetX.asInstanceOf[js.Any], offsetY = offsetY.asInstanceOf[js.Any], pageX = pageX.asInstanceOf[js.Any], pageY = pageY.asInstanceOf[js.Any], preventDefault = js.Any.fromFunction0(preventDefault), screenX = screenX.asInstanceOf[js.Any], screenY = screenY.asInstanceOf[js.Any], shiftKey = shiftKey.asInstanceOf[js.Any], stopImmediatePropagation = js.Any.fromFunction0(stopImmediatePropagation), stopPropagation = js.Any.fromFunction0(stopPropagation), target = target.asInstanceOf[js.Any], timeStamp = timeStamp.asInstanceOf[js.Any], toElement = toElement.asInstanceOf[js.Any], view = view.asInstanceOf[js.Any], which = which.asInstanceOf[js.Any])
      __obj.updateDynamic("type")(`type`.asInstanceOf[js.Any])
      __obj.asInstanceOf[ContextMenuEvent[TDelegateTarget, TData, TCurrentTarget, TTarget]]
    }
    
    @scala.inline
    implicit class ContextMenuEventMutableBuilder[Self <: ContextMenuEvent[_, _, _, _], TDelegateTarget, TData, TCurrentTarget, TTarget] (val x: Self with (ContextMenuEvent[TDelegateTarget, TData, TCurrentTarget, TTarget])) extends AnyVal {
      
      @scala.inline
      def setType(value: contextmenu): Self = StObject.set(x, "type", value.asInstanceOf[js.Any])
    }
  }
  
  // region Coordinates
  // #region Coordinates
  @js.native
  trait Coordinates extends StObject {
    
    var left: Double = js.native
    
    var top: Double = js.native
  }
  object Coordinates {
    
    @scala.inline
    def apply(left: Double, top: Double): Coordinates = {
      val __obj = js.Dynamic.literal(left = left.asInstanceOf[js.Any], top = top.asInstanceOf[js.Any])
      __obj.asInstanceOf[Coordinates]
    }
    
    @scala.inline
    implicit class CoordinatesMutableBuilder[Self <: Coordinates] (val x: Self) extends AnyVal {
      
      @scala.inline
      def setLeft(value: Double): Self = StObject.set(x, "left", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setTop(value: Double): Self = StObject.set(x, "top", value.asInstanceOf[js.Any])
    }
  }
  
  // Workaround for TypeScript 2.3 which does not have support for weak types handling.
  /* Rewritten from type alias, can be one of: 
    - typingsSlinky.jquery.anon.PickCoordinatesleft
    - typingsSlinky.jquery.anon.PickCoordinatestop
    - org.scalablytyped.runtime.StringDictionary[scala.Nothing]
  */
  type CoordinatesPartial = _CoordinatesPartial | StringDictionary[scala.Nothing]
  
  @js.native
  trait Deferred[TR, TJ, TN] extends StObject {
    
    /**
      * Add handlers to be called when the Deferred object is either resolved or rejected.
      * @param alwaysCallback A function, or array of functions, that is called when the Deferred is resolved or rejected.
      * @param alwaysCallbacks Optional additional functions, or arrays of functions, that are called when the Deferred is resolved or rejected.
      * @see \`{@link https://api.jquery.com/deferred.always/ }\`
      * @since 1.6
      * @example ​ ````Since the jQuery.get() method returns a jqXHR object, which is derived from a Deferred object, we can attach a callback for both success and error using the deferred.always() method.
    ```javascript
    $.get( "test.php" ).always(function() {
      alert( "$.get completed with success or error callback arguments" );
    });
    ```
      */
    def always(alwaysCallback: TypeOrArray[Callback[TR | TJ]], alwaysCallbacks: (TypeOrArray[Callback[TR | TJ]])*): this.type = js.native
    
    // #endregion
    /**
      * Add handlers to be called when the Deferred object is rejected.
      * @param failFilter A function that is called when the Deferred is rejected.
      * @see \`{@link https://api.jquery.com/deferred.catch/ }\`
      * @since 3.0
      * @example ​ ````Since the jQuery.get method returns a jqXHR object, which is derived from a Deferred object, we can rejection handlers using the .catch method.
    ```javascript
    $.get( "test.php" )
      .then( function() {
      alert( "$.get succeeded" );
      } )
      .catch( function() {
      alert( "$.get failed!" );
      } );
    ```
      */
    def `catch`[ARF, AJF, ANF, BRF, BJF, BNF, CRF, CJF, CNF, RRF, RJF, RNF](): PromiseBase[ARF, AJF, ANF, BRF, BJF, BNF, CRF, CJF, CNF, RRF, RJF, RNF] = js.native
    def `catch`[ARF, AJF, ANF, BRF, BJF, BNF, CRF, CJF, CNF, RRF, RJF, RNF](
      failFilter: js.Function1[
          /* repeated */ TJ, 
          (PromiseBase[ARF, AJF, ANF, BRF, BJF, BNF, CRF, CJF, CNF, RRF, RJF, RNF]) | Thenable[ARF] | ARF
        ]
    ): PromiseBase[ARF, AJF, ANF, BRF, BJF, BNF, CRF, CJF, CNF, RRF, RJF, RNF] = js.native
    
    /**
      * Add handlers to be called when the Deferred object is resolved.
      * @param doneCallback A function, or array of functions, that are called when the Deferred is resolved.
      * @param doneCallbacks Optional additional functions, or arrays of functions, that are called when the Deferred is resolved.
      * @see \`{@link https://api.jquery.com/deferred.done/ }\`
      * @since 1.5
      * @example ​ ````Since the jQuery.get method returns a jqXHR object, which is derived from a Deferred object, we can attach a success callback using the .done() method.
    ```javascript
    $.get( "test.php" ).done(function() {
      alert( "$.get succeeded" );
    });
    ```
      * @example ​ ````Resolve a Deferred object when the user clicks a button, triggering a number of callback functions:
    ```html
    <!doctype html>
    <html lang="en">
    <head>
      <meta charset="utf-8">
      <title>deferred.done demo</title>
      <script src="https://code.jquery.com/jquery-3.3.1.js"></script>
    </head>
    <body>
    ​
    <button>Go</button>
    <p>Ready...</p>
    ​
    <script>
    // 3 functions to call when the Deferred object is resolved
    function fn1() {
      $( "p" ).append( " 1 " );
    }
    function fn2() {
      $( "p" ).append( " 2 " );
    }
    function fn3( n ) {
      $( "p" ).append( n + " 3 " + n );
    }
    ​
    // Create a deferred object
    var dfd = $.Deferred();
    ​
    // Add handlers to be called when dfd is resolved
    dfd
    // .done() can take any number of functions or arrays of functions
      .done( [ fn1, fn2 ], fn3, [ fn2, fn1 ] )
    // We can chain done methods, too
      .done(function( n ) {
      $( "p" ).append( n + " we're done." );
      });
    ​
    // Resolve the Deferred object when the button is clicked
    $( "button" ).on( "click", function() {
      dfd.resolve( "and" );
    });
    </script>
    ​
    </body>
    </html>
    ```
      */
    def done(doneCallback: TypeOrArray[Callback[TR]], doneCallbacks: TypeOrArray[Callback[TR]]*): this.type = js.native
    
    /**
      * Add handlers to be called when the Deferred object is rejected.
      * @param failCallback A function, or array of functions, that are called when the Deferred is rejected.
      * @param failCallbacks Optional additional functions, or arrays of functions, that are called when the Deferred is rejected.
      * @see \`{@link https://api.jquery.com/deferred.fail/ }\`
      * @since 1.5
      * @example ​ ````Since the jQuery.get method returns a jqXHR object, which is derived from a Deferred, you can attach a success and failure callback using the deferred.done() and deferred.fail() methods.
    ```javascript
    $.get( "test.php" )
      .done(function() {
      alert( "$.get succeeded" );
      })
      .fail(function() {
      alert( "$.get failed!" );
      });
    ```
      */
    def fail(failCallback: TypeOrArray[Callback[TJ]], failCallbacks: TypeOrArray[Callback[TJ]]*): this.type = js.native
    
    /**
      * Call the progressCallbacks on a Deferred object with the given args.
      * @param args Optional arguments that are passed to the progressCallbacks.
      * @see \`{@link https://api.jquery.com/deferred.notify/ }\`
      * @since 1.7
      */
    def notify(args: TN*): this.type = js.native
    
    /**
      * Call the progressCallbacks on a Deferred object with the given context and args.
      * @param context Context passed to the progressCallbacks as the this object.
      * @param args An optional array of arguments that are passed to the progressCallbacks.
      * @see \`{@link https://api.jquery.com/deferred.notifyWith/ }\`
      * @since 1.7
      */
    def notifyWith(context: js.Object): this.type = js.native
    def notifyWith(context: js.Object, args: ArrayLike[TN]): this.type = js.native
    
    /**
      * Utility method to filter and/or chain Deferreds.
      * @param doneFilter An optional function that is called when the Deferred is resolved.
      * @param failFilter An optional function that is called when the Deferred is rejected.
      * @param progressFilter An optional function that is called when progress notifications are sent to the Deferred.
      * @see \`{@link https://api.jquery.com/deferred.pipe/ }\`
      * @since 1.6
      * @since 1.7
      * @deprecated ​ Deprecated since 1.8. Use \`{@link then }\`.
      *
      * **Cause**: The `.pipe()` method on a `jQuery.Deferred` object was deprecated as of jQuery 1.8, when the `.then()` method was changed to perform the same function.
      *
      * **Solution**: In most cases it is sufficient to change all occurrences of `.pipe()` to `.then()`. Ensure that you aren't relying on context/state propagation (e.g., using `this`) or synchronous callback invocation, which were dropped from `.then()` for Promises/A+ interoperability as of jQuery 3.0.
      * @example ​ ````Chain tasks:
    ```javascript
    var request = $.ajax( url, { dataType: "json" } ),
      chained = request.pipe(function( data ) {
      return $.ajax( url2, { data: { user: data.userId } } );
      });
    ​
    chained.done(function( data ) {
      // data retrieved from url2 as provided by the first request
    });
    ```
      */
    def pipe[ARP, AJP, ANP, BRP, BJP, BNP, CRP, CJP, CNP, RRP, RJP, RNP](): PromiseBase[ARP, AJP, ANP, BRP, BJP, BNP, CRP, CJP, CNP, RRP, RJP, RNP] = js.native
    /**
      * Utility method to filter and/or chain Deferreds.
      * @param doneFilter An optional function that is called when the Deferred is resolved.
      * @param failFilter An optional function that is called when the Deferred is rejected.
      * @param progressFilter An optional function that is called when progress notifications are sent to the Deferred.
      * @see \`{@link https://api.jquery.com/deferred.pipe/ }\`
      * @since 1.6
      * @since 1.7
      * @deprecated ​ Deprecated since 1.8. Use \`{@link then }\`.
      *
      * **Cause**: The `.pipe()` method on a `jQuery.Deferred` object was deprecated as of jQuery 1.8, when the `.then()` method was changed to perform the same function.
      *
      * **Solution**: In most cases it is sufficient to change all occurrences of `.pipe()` to `.then()`. Ensure that you aren't relying on context/state propagation (e.g., using `this`) or synchronous callback invocation, which were dropped from `.then()` for Promises/A+ interoperability as of jQuery 3.0.
      * @example ​ ````Filter resolve value:
    ```javascript
    var defer = $.Deferred(),
      filtered = defer.pipe(function( value ) {
      return value * 2;
      });
    ​
    defer.resolve( 5 );
    filtered.done(function( value ) {
      alert( "Value is ( 2*5 = ) 10: " + value );
    });
    ```
      * @example ​ ````Chain tasks:
    ```javascript
    var request = $.ajax( url, { dataType: "json" } ),
      chained = request.pipe(function( data ) {
      return $.ajax( url2, { data: { user: data.userId } } );
      });
    ​
    chained.done(function( data ) {
      // data retrieved from url2 as provided by the first request
    });
    ```
      */
    def pipe[ARD, AJD, AND, BRD, BJD, BND, CRD, CJD, CND, RRD, RJD, RND](
      doneFilter: js.Function1[
          /* repeated */ TR, 
          (PromiseBase[ARD, AJD, AND, BRD, BJD, BND, CRD, CJD, CND, RRD, RJD, RND]) | Thenable[ARD] | ARD
        ]
    ): PromiseBase[ARD, AJD, AND, BRD, BJD, BND, CRD, CJD, CND, RRD, RJD, RND] = js.native
    /**
      * Utility method to filter and/or chain Deferreds.
      * @param doneFilter An optional function that is called when the Deferred is resolved.
      * @param failFilter An optional function that is called when the Deferred is rejected.
      * @param progressFilter An optional function that is called when progress notifications are sent to the Deferred.
      * @see \`{@link https://api.jquery.com/deferred.pipe/ }\`
      * @since 1.6
      * @since 1.7
      * @deprecated ​ Deprecated since 1.8. Use \`{@link then }\`.
      *
      * **Cause**: The `.pipe()` method on a `jQuery.Deferred` object was deprecated as of jQuery 1.8, when the `.then()` method was changed to perform the same function.
      *
      * **Solution**: In most cases it is sufficient to change all occurrences of `.pipe()` to `.then()`. Ensure that you aren't relying on context/state propagation (e.g., using `this`) or synchronous callback invocation, which were dropped from `.then()` for Promises/A+ interoperability as of jQuery 3.0.
      * @example ​ ````Filter reject value:
    ```javascript
    var defer = $.Deferred(),
      filtered = defer.pipe( null, function( value ) {
      return value * 3;
      });
    ​
    defer.reject( 6 );
    filtered.fail(function( value ) {
      alert( "Value is ( 3*6 = ) 18: " + value );
    });
    ```
      * @example ​ ````Chain tasks:
    ```javascript
    var request = $.ajax( url, { dataType: "json" } ),
      chained = request.pipe(function( data ) {
      return $.ajax( url2, { data: { user: data.userId } } );
      });
    ​
    chained.done(function( data ) {
      // data retrieved from url2 as provided by the first request
    });
    ```
      */
    def pipe[ARF, AJF, ANF, BRF, BJF, BNF, CRF, CJF, CNF, RRF, RJF, RNF](
      doneFilter: Null,
      failFilter: js.Function1[
          /* repeated */ TJ, 
          (PromiseBase[ARF, AJF, ANF, BRF, BJF, BNF, CRF, CJF, CNF, RRF, RJF, RNF]) | Thenable[AJF] | AJF
        ]
    ): PromiseBase[ARF, AJF, ANF, BRF, BJF, BNF, CRF, CJF, CNF, RRF, RJF, RNF] = js.native
    def pipe[ARP, AJP, ANP, BRP, BJP, BNP, CRP, CJP, CNP, RRP, RJP, RNP](
      doneFilter: Null,
      failFilter: Null,
      progressFilter: js.Function1[
          /* repeated */ TN, 
          (PromiseBase[ARP, AJP, ANP, BRP, BJP, BNP, CRP, CJP, CNP, RRP, RJP, RNP]) | Thenable[ANP] | ANP
        ]
    ): PromiseBase[ARP, AJP, ANP, BRP, BJP, BNP, CRP, CJP, CNP, RRP, RJP, RNP] = js.native
    /**
      * Utility method to filter and/or chain Deferreds.
      * @param doneFilter An optional function that is called when the Deferred is resolved.
      * @param failFilter An optional function that is called when the Deferred is rejected.
      * @param progressFilter An optional function that is called when progress notifications are sent to the Deferred.
      * @see \`{@link https://api.jquery.com/deferred.pipe/ }\`
      * @since 1.6
      * @since 1.7
      * @deprecated ​ Deprecated since 1.8. Use \`{@link then }\`.
      *
      * **Cause**: The `.pipe()` method on a `jQuery.Deferred` object was deprecated as of jQuery 1.8, when the `.then()` method was changed to perform the same function.
      *
      * **Solution**: In most cases it is sufficient to change all occurrences of `.pipe()` to `.then()`. Ensure that you aren't relying on context/state propagation (e.g., using `this`) or synchronous callback invocation, which were dropped from `.then()` for Promises/A+ interoperability as of jQuery 3.0.
      * @example ​ ````Filter resolve value:
    ```javascript
    var defer = $.Deferred(),
      filtered = defer.pipe(function( value ) {
      return value * 2;
      });
    ​
    defer.resolve( 5 );
    filtered.done(function( value ) {
      alert( "Value is ( 2*5 = ) 10: " + value );
    });
    ```
      * @example ​ ````Filter reject value:
    ```javascript
    var defer = $.Deferred(),
      filtered = defer.pipe( null, function( value ) {
      return value * 3;
      });
    ​
    defer.reject( 6 );
    filtered.fail(function( value ) {
      alert( "Value is ( 3*6 = ) 18: " + value );
    });
    ```
      * @example ​ ````Chain tasks:
    ```javascript
    var request = $.ajax( url, { dataType: "json" } ),
      chained = request.pipe(function( data ) {
      return $.ajax( url2, { data: { user: data.userId } } );
      });
    ​
    chained.done(function( data ) {
      // data retrieved from url2 as provided by the first request
    });
    ```
      */
    def pipe[ARD, AJD, AND, BRD, BJD, BND, CRD, CJD, CND, RRD, RJD, RND, ARF, AJF, ANF, BRF, BJF, BNF, CRF, CJF, CNF, RRF, RJF, RNF](
      doneFilter: js.Function1[
          /* repeated */ TR, 
          (PromiseBase[ARD, AJD, AND, BRD, BJD, BND, CRD, CJD, CND, RRD, RJD, RND]) | Thenable[ARD] | ARD
        ],
      failFilter: js.Function1[
          /* repeated */ TJ, 
          (PromiseBase[ARF, AJF, ANF, BRF, BJF, BNF, CRF, CJF, CNF, RRF, RJF, RNF]) | Thenable[AJF] | AJF
        ]
    ): PromiseBase[
        ARD | ARF, 
        AJD | AJF, 
        AND | ANF, 
        BRD | BRF, 
        BJD | BJF, 
        BND | BNF, 
        CRD | CRF, 
        CJD | CJF, 
        CND | CNF, 
        RRD | RRF, 
        RJD | RJF, 
        RND | RNF
      ] = js.native
    /**
      * Utility method to filter and/or chain Deferreds.
      * @param doneFilter An optional function that is called when the Deferred is resolved.
      * @param failFilter An optional function that is called when the Deferred is rejected.
      * @param progressFilter An optional function that is called when progress notifications are sent to the Deferred.
      * @see \`{@link https://api.jquery.com/deferred.pipe/ }\`
      * @since 1.6
      * @since 1.7
      * @deprecated ​ Deprecated since 1.8. Use \`{@link then }\`.
      *
      * **Cause**: The `.pipe()` method on a `jQuery.Deferred` object was deprecated as of jQuery 1.8, when the `.then()` method was changed to perform the same function.
      *
      * **Solution**: In most cases it is sufficient to change all occurrences of `.pipe()` to `.then()`. Ensure that you aren't relying on context/state propagation (e.g., using `this`) or synchronous callback invocation, which were dropped from `.then()` for Promises/A+ interoperability as of jQuery 3.0.
      * @example ​ ````Filter resolve value:
    ```javascript
    var defer = $.Deferred(),
      filtered = defer.pipe(function( value ) {
      return value * 2;
      });
    ​
    defer.resolve( 5 );
    filtered.done(function( value ) {
      alert( "Value is ( 2*5 = ) 10: " + value );
    });
    ```
      * @example ​ ````Chain tasks:
    ```javascript
    var request = $.ajax( url, { dataType: "json" } ),
      chained = request.pipe(function( data ) {
      return $.ajax( url2, { data: { user: data.userId } } );
      });
    ​
    chained.done(function( data ) {
      // data retrieved from url2 as provided by the first request
    });
    ```
      */
    def pipe[ARD, AJD, AND, BRD, BJD, BND, CRD, CJD, CND, RRD, RJD, RND, ARP, AJP, ANP, BRP, BJP, BNP, CRP, CJP, CNP, RRP, RJP, RNP](
      doneFilter: js.Function1[
          /* repeated */ TR, 
          (PromiseBase[ARD, AJD, AND, BRD, BJD, BND, CRD, CJD, CND, RRD, RJD, RND]) | Thenable[ARD] | ARD
        ],
      failFilter: Null,
      progressFilter: js.Function1[
          /* repeated */ TN, 
          (PromiseBase[ARP, AJP, ANP, BRP, BJP, BNP, CRP, CJP, CNP, RRP, RJP, RNP]) | Thenable[ANP] | ANP
        ]
    ): PromiseBase[
        ARD | ARP, 
        AJD | AJP, 
        AND | ANP, 
        BRD | BRP, 
        BJD | BJP, 
        BND | BNP, 
        CRD | CRP, 
        CJD | CJP, 
        CND | CNP, 
        RRD | RRP, 
        RJD | RJP, 
        RND | RNP
      ] = js.native
    /**
      * Utility method to filter and/or chain Deferreds.
      * @param doneFilter An optional function that is called when the Deferred is resolved.
      * @param failFilter An optional function that is called when the Deferred is rejected.
      * @param progressFilter An optional function that is called when progress notifications are sent to the Deferred.
      * @see \`{@link https://api.jquery.com/deferred.pipe/ }\`
      * @since 1.6
      * @since 1.7
      * @deprecated ​ Deprecated since 1.8. Use \`{@link then }\`.
      *
      * **Cause**: The `.pipe()` method on a `jQuery.Deferred` object was deprecated as of jQuery 1.8, when the `.then()` method was changed to perform the same function.
      *
      * **Solution**: In most cases it is sufficient to change all occurrences of `.pipe()` to `.then()`. Ensure that you aren't relying on context/state propagation (e.g., using `this`) or synchronous callback invocation, which were dropped from `.then()` for Promises/A+ interoperability as of jQuery 3.0.
      * @example ​ ````Filter reject value:
    ```javascript
    var defer = $.Deferred(),
      filtered = defer.pipe( null, function( value ) {
      return value * 3;
      });
    ​
    defer.reject( 6 );
    filtered.fail(function( value ) {
      alert( "Value is ( 3*6 = ) 18: " + value );
    });
    ```
      * @example ​ ````Chain tasks:
    ```javascript
    var request = $.ajax( url, { dataType: "json" } ),
      chained = request.pipe(function( data ) {
      return $.ajax( url2, { data: { user: data.userId } } );
      });
    ​
    chained.done(function( data ) {
      // data retrieved from url2 as provided by the first request
    });
    ```
      */
    def pipe[ARF, AJF, ANF, BRF, BJF, BNF, CRF, CJF, CNF, RRF, RJF, RNF, ARP, AJP, ANP, BRP, BJP, BNP, CRP, CJP, CNP, RRP, RJP, RNP](
      doneFilter: Null,
      failFilter: js.Function1[
          /* repeated */ TJ, 
          (PromiseBase[ARF, AJF, ANF, BRF, BJF, BNF, CRF, CJF, CNF, RRF, RJF, RNF]) | Thenable[AJF] | AJF
        ],
      progressFilter: js.Function1[
          /* repeated */ TN, 
          (PromiseBase[ARP, AJP, ANP, BRP, BJP, BNP, CRP, CJP, CNP, RRP, RJP, RNP]) | Thenable[ANP] | ANP
        ]
    ): PromiseBase[
        ARF | ARP, 
        AJF | AJP, 
        ANF | ANP, 
        BRF | BRP, 
        BJF | BJP, 
        BNF | BNP, 
        CRF | CRP, 
        CJF | CJP, 
        CNF | CNP, 
        RRF | RRP, 
        RJF | RJP, 
        RNF | RNP
      ] = js.native
    // region pipe
    // #region pipe
    /**
      * Utility method to filter and/or chain Deferreds.
      * @param doneFilter An optional function that is called when the Deferred is resolved.
      * @param failFilter An optional function that is called when the Deferred is rejected.
      * @param progressFilter An optional function that is called when progress notifications are sent to the Deferred.
      * @see \`{@link https://api.jquery.com/deferred.pipe/ }\`
      * @since 1.6
      * @since 1.7
      * @deprecated ​ Deprecated since 1.8. Use \`{@link then }\`.
      *
      * **Cause**: The `.pipe()` method on a `jQuery.Deferred` object was deprecated as of jQuery 1.8, when the `.then()` method was changed to perform the same function.
      *
      * **Solution**: In most cases it is sufficient to change all occurrences of `.pipe()` to `.then()`. Ensure that you aren't relying on context/state propagation (e.g., using `this`) or synchronous callback invocation, which were dropped from `.then()` for Promises/A+ interoperability as of jQuery 3.0.
      * @example ​ ````Filter resolve value:
    ```javascript
    var defer = $.Deferred(),
      filtered = defer.pipe(function( value ) {
      return value * 2;
      });
    ​
    defer.resolve( 5 );
    filtered.done(function( value ) {
      alert( "Value is ( 2*5 = ) 10: " + value );
    });
    ```
      * @example ​ ````Filter reject value:
    ```javascript
    var defer = $.Deferred(),
      filtered = defer.pipe( null, function( value ) {
      return value * 3;
      });
    ​
    defer.reject( 6 );
    filtered.fail(function( value ) {
      alert( "Value is ( 3*6 = ) 18: " + value );
    });
    ```
      * @example ​ ````Chain tasks:
    ```javascript
    var request = $.ajax( url, { dataType: "json" } ),
      chained = request.pipe(function( data ) {
      return $.ajax( url2, { data: { user: data.userId } } );
      });
    ​
    chained.done(function( data ) {
      // data retrieved from url2 as provided by the first request
    });
    ```
      */
    def pipe[ARD, AJD, AND, BRD, BJD, BND, CRD, CJD, CND, RRD, RJD, RND, ARF, AJF, ANF, BRF, BJF, BNF, CRF, CJF, CNF, RRF, RJF, RNF, ARP, AJP, ANP, BRP, BJP, BNP, CRP, CJP, CNP, RRP, RJP, RNP](
      doneFilter: js.Function1[
          /* repeated */ TR, 
          (PromiseBase[ARD, AJD, AND, BRD, BJD, BND, CRD, CJD, CND, RRD, RJD, RND]) | Thenable[ARD] | ARD
        ],
      failFilter: js.Function1[
          /* repeated */ TJ, 
          (PromiseBase[ARF, AJF, ANF, BRF, BJF, BNF, CRF, CJF, CNF, RRF, RJF, RNF]) | Thenable[AJF] | AJF
        ],
      progressFilter: js.Function1[
          /* repeated */ TN, 
          (PromiseBase[ARP, AJP, ANP, BRP, BJP, BNP, CRP, CJP, CNP, RRP, RJP, RNP]) | Thenable[ANP] | ANP
        ]
    ): PromiseBase[
        ARD | ARF | ARP, 
        AJD | AJF | AJP, 
        AND | ANF | ANP, 
        BRD | BRF | BRP, 
        BJD | BJF | BJP, 
        BND | BNF | BNP, 
        CRD | CRF | CRP, 
        CJD | CJF | CJP, 
        CND | CNF | CNP, 
        RRD | RRF | RRP, 
        RJD | RJF | RJP, 
        RND | RNF | RNP
      ] = js.native
    
    /**
      * Add handlers to be called when the Deferred object generates progress notifications.
      * @param progressCallback A function, or array of functions, to be called when the Deferred generates progress notifications.
      * @param progressCallbacks Optional additional functions, or arrays of functions, to be called when the Deferred generates
      *                          progress notifications.
      * @see \`{@link https://api.jquery.com/deferred.progress/ }\`
      * @since 1.7
      */
    def progress(progressCallback: TypeOrArray[Callback[TN]], progressCallbacks: TypeOrArray[Callback[TN]]*): this.type = js.native
    
    /**
      * Return a Deferred's Promise object.
      * @see \`{@link https://api.jquery.com/deferred.promise/ }\`
      * @since 1.5
      * @example ​ ````Create a Deferred and set two timer-based functions to either resolve or reject the Deferred after a random interval. Whichever one fires first &quot;wins&quot; and will call one of the callbacks. The second timeout has no effect since the Deferred is already complete (in a resolved or rejected state) from the first timeout action. Also set a timer-based progress notification function, and call a progress handler that adds &quot;working...&quot; to the document body.
    ```javascript
    function asyncEvent() {
      var dfd = jQuery.Deferred();
    ​
      // Resolve after a random interval
      setTimeout(function() {
      dfd.resolve( "hurray" );
      }, Math.floor( 400 + Math.random() * 2000 ) );
    ​
      // Reject after a random interval
      setTimeout(function() {
      dfd.reject( "sorry" );
      }, Math.floor( 400 + Math.random() * 2000 ) );
    ​
      // Show a "working..." message every half-second
      setTimeout(function working() {
      if ( dfd.state() === "pending" ) {
      dfd.notify( "working... " );
      setTimeout( working, 500 );
      }
      }, 1 );
    ​
      // Return the Promise so caller can't change the Deferred
      return dfd.promise();
    }
    ​
    // Attach a done, fail, and progress handler for the asyncEvent
    $.when( asyncEvent() ).then(
      function( status ) {
      alert( status + ", things are going well" );
      },
      function( status ) {
      alert( status + ", you fail this time" );
      },
      function( status ) {
      $( "body" ).append( status );
      }
    );
    ```
      */
    def promise(): Promise[TR, TJ, TN] = js.native
    /**
      * Return a Deferred's Promise object.
      * @param target Object onto which the promise methods have to be attached
      * @see \`{@link https://api.jquery.com/deferred.promise/ }\`
      * @since 1.5
      * @example ​ ````Use the target argument to promote an existing object to a Promise:
    ```javascript
    // Existing object
    var obj = {
      hello: function( name ) {
      alert( "Hello " + name );
      }
      },
      // Create a Deferred
      defer = $.Deferred();
    ​
    // Set object as a promise
    defer.promise( obj );
    ​
    // Resolve the deferred
    defer.resolve( "John" );
    ​
    // Use the object as a Promise
    obj.done(function( name ) {
      obj.hello( name ); // Will alert "Hello John"
    }).hello( "Karl" ); // Will alert "Hello Karl"
    ```
      */
    def promise[TTarget /* <: js.Object */](target: TTarget): (Promise[TR, TJ, TN]) with TTarget = js.native
    
    /**
      * Reject a Deferred object and call any failCallbacks with the given args.
      * @param args Optional arguments that are passed to the failCallbacks.
      * @see \`{@link https://api.jquery.com/deferred.reject/ }\`
      * @since 1.5
      */
    def reject(args: TJ*): this.type = js.native
    
    /**
      * Reject a Deferred object and call any failCallbacks with the given context and args.
      * @param context Context passed to the failCallbacks as the this object.
      * @param args An optional array of arguments that are passed to the failCallbacks.
      * @see \`{@link https://api.jquery.com/deferred.rejectWith/ }\`
      * @since 1.5
      */
    def rejectWith(context: js.Object): this.type = js.native
    def rejectWith(context: js.Object, args: ArrayLike[TJ]): this.type = js.native
    
    /**
      * Resolve a Deferred object and call any doneCallbacks with the given args.
      * @param args Optional arguments that are passed to the doneCallbacks.
      * @see \`{@link https://api.jquery.com/deferred.resolve/ }\`
      * @since 1.5
      */
    def resolve(args: TR*): this.type = js.native
    
    /**
      * Resolve a Deferred object and call any doneCallbacks with the given context and args.
      * @param context Context passed to the doneCallbacks as the this object.
      * @param args An optional array of arguments that are passed to the doneCallbacks.
      * @see \`{@link https://api.jquery.com/deferred.resolveWith/ }\`
      * @since 1.5
      */
    def resolveWith(context: js.Object): this.type = js.native
    def resolveWith(context: js.Object, args: ArrayLike[TR]): this.type = js.native
    
    /**
      * Determine the current state of a Deferred object.
      * @see \`{@link https://api.jquery.com/deferred.state/ }\`
      * @since 1.7
      */
    def state(): pending | resolved | rejected = js.native
    
    /**
      * Add handlers to be called when the Deferred object is resolved, rejected, or still in progress.
      * @param doneFilter A function that is called when the Deferred is resolved.
      * @param failFilter An optional function that is called when the Deferred is rejected.
      * @param progressFilter An optional function that is called when progress notifications are sent to the Deferred.
      * @see \`{@link https://api.jquery.com/deferred.then/ }\`
      * @since 1.8
      * @example ​ ````Chain tasks:
    ```javascript
    var request = $.ajax( url, { dataType: "json" } ),
      chained = request.then(function( data ) {
      return $.ajax( url2, { data: { user: data.userId } } );
      });
    ​
    chained.done(function( data ) {
      // data retrieved from url2 as provided by the first request
    });
    ```
      */
    def `then`[ARP, AJP, ANP, BRP, BJP, BNP, CRP, CJP, CNP, RRP, RJP, RNP](): PromiseBase[ARP, AJP, ANP, BRP, BJP, BNP, CRP, CJP, CNP, RRP, RJP, RNP] = js.native
    /**
      * Add handlers to be called when the Deferred object is resolved, rejected, or still in progress.
      * @param doneFilter An optional function that is called when the Deferred is resolved.
      * @param failFilter An optional function that is called when the Deferred is rejected.
      * @param progressFilter An optional function that is called when progress notifications are sent to the Deferred.
      * @see \`{@link https://api.jquery.com/deferred.then/ }\`
      * @since 1.8
      * @example ​ ````Filter the resolve value:
    ```html
    <!doctype html>
    <html lang="en">
    <head>
      <meta charset="utf-8">
      <title>deferred.then demo</title>
      <script src="https://code.jquery.com/jquery-3.3.1.js"></script>
    </head>
    <body>
    ​
    <button>Filter Resolve</button>
    <p></p>
    ​
    <script>
    var filterResolve = function() {
      var defer = $.Deferred(),
      filtered = defer.then(function( value ) {
      return value * 2;
      });
    ​
      defer.resolve( 5 );
      filtered.done(function( value ) {
      $( "p" ).html( "Value is ( 2*5 = ) 10: " + value );
      });
    };
    ​
    $( "button" ).on( "click", filterResolve );
    </script>
    ​
    </body>
    </html>
    ```
      * @example ​ ````Chain tasks:
    ```javascript
    var request = $.ajax( url, { dataType: "json" } ),
      chained = request.then(function( data ) {
      return $.ajax( url2, { data: { user: data.userId } } );
      });
    ​
    chained.done(function( data ) {
      // data retrieved from url2 as provided by the first request
    });
    ```
      */
    def `then`[ARD, AJD, AND, BRD, BJD, BND, CRD, CJD, CND, RRD, RJD, RND](
      doneFilter: js.Function1[
          /* repeated */ TR, 
          (PromiseBase[ARD, AJD, AND, BRD, BJD, BND, CRD, CJD, CND, RRD, RJD, RND]) | Thenable[ARD] | ARD
        ]
    ): PromiseBase[ARD, AJD, AND, BRD, BJD, BND, CRD, CJD, CND, RRD, RJD, RND] = js.native
    /**
      * Add handlers to be called when the Deferred object is resolved, rejected, or still in progress.
      * @param doneFilter An optional function that is called when the Deferred is resolved.
      * @param failFilter An optional function that is called when the Deferred is rejected.
      * @param progressFilter An optional function that is called when progress notifications are sent to the Deferred.
      * @see \`{@link https://api.jquery.com/deferred.then/ }\`
      * @since 1.8
      * @example ​ ````Filter reject value:
    ```javascript
    var defer = $.Deferred(),
      filtered = defer.then( null, function( value ) {
      return value * 3;
      });
    ​
    defer.reject( 6 );
    filtered.fail(function( value ) {
      alert( "Value is ( 3*6 = ) 18: " + value );
    });
    ```
      * @example ​ ````Chain tasks:
    ```javascript
    var request = $.ajax( url, { dataType: "json" } ),
      chained = request.then(function( data ) {
      return $.ajax( url2, { data: { user: data.userId } } );
      });
    ​
    chained.done(function( data ) {
      // data retrieved from url2 as provided by the first request
    });
    ```
      */
    def `then`[ARF, AJF, ANF, BRF, BJF, BNF, CRF, CJF, CNF, RRF, RJF, RNF](
      doneFilter: Null,
      failFilter: js.Function1[
          /* repeated */ TJ, 
          (PromiseBase[ARF, AJF, ANF, BRF, BJF, BNF, CRF, CJF, CNF, RRF, RJF, RNF]) | Thenable[ARF] | ARF
        ]
    ): PromiseBase[ARF, AJF, ANF, BRF, BJF, BNF, CRF, CJF, CNF, RRF, RJF, RNF] = js.native
    def `then`[ARP, AJP, ANP, BRP, BJP, BNP, CRP, CJP, CNP, RRP, RJP, RNP](
      doneFilter: Null,
      failFilter: Null,
      progressFilter: js.Function1[
          /* repeated */ TN, 
          (PromiseBase[ARP, AJP, ANP, BRP, BJP, BNP, CRP, CJP, CNP, RRP, RJP, RNP]) | Thenable[ANP] | ANP
        ]
    ): PromiseBase[ARP, AJP, ANP, BRP, BJP, BNP, CRP, CJP, CNP, RRP, RJP, RNP] = js.native
    /**
      * Add handlers to be called when the Deferred object is resolved, rejected, or still in progress.
      * @param doneFilter An optional function that is called when the Deferred is resolved.
      * @param failFilter An optional function that is called when the Deferred is rejected.
      * @param progressFilter An optional function that is called when progress notifications are sent to the Deferred.
      * @see \`{@link https://api.jquery.com/deferred.then/ }\`
      * @since 1.8
      * @example ​ ````Since the jQuery.get method returns a jqXHR object, which is derived from a Deferred object, we can attach handlers using the .then method.
    ```javascript
    $.get( "test.php" ).then(
      function() {
      alert( "$.get succeeded" );
      }, function() {
      alert( "$.get failed!" );
      }
    );
    ```
      * @example ​ ````Filter the resolve value:
    ```html
    <!doctype html>
    <html lang="en">
    <head>
      <meta charset="utf-8">
      <title>deferred.then demo</title>
      <script src="https://code.jquery.com/jquery-3.3.1.js"></script>
    </head>
    <body>
    ​
    <button>Filter Resolve</button>
    <p></p>
    ​
    <script>
    var filterResolve = function() {
      var defer = $.Deferred(),
      filtered = defer.then(function( value ) {
      return value * 2;
      });
    ​
      defer.resolve( 5 );
      filtered.done(function( value ) {
      $( "p" ).html( "Value is ( 2*5 = ) 10: " + value );
      });
    };
    ​
    $( "button" ).on( "click", filterResolve );
    </script>
    ​
    </body>
    </html>
    ```
      * @example ​ ````Filter reject value:
    ```javascript
    var defer = $.Deferred(),
      filtered = defer.then( null, function( value ) {
      return value * 3;
      });
    ​
    defer.reject( 6 );
    filtered.fail(function( value ) {
      alert( "Value is ( 3*6 = ) 18: " + value );
    });
    ```
      * @example ​ ````Chain tasks:
    ```javascript
    var request = $.ajax( url, { dataType: "json" } ),
      chained = request.then(function( data ) {
      return $.ajax( url2, { data: { user: data.userId } } );
      });
    ​
    chained.done(function( data ) {
      // data retrieved from url2 as provided by the first request
    });
    ```
      */
    def `then`[ARD, AJD, AND, BRD, BJD, BND, CRD, CJD, CND, RRD, RJD, RND, ARF, AJF, ANF, BRF, BJF, BNF, CRF, CJF, CNF, RRF, RJF, RNF](
      doneFilter: js.Function1[
          /* repeated */ TR, 
          (PromiseBase[ARD, AJD, AND, BRD, BJD, BND, CRD, CJD, CND, RRD, RJD, RND]) | Thenable[ARD] | ARD
        ],
      failFilter: js.Function1[
          /* repeated */ TJ, 
          (PromiseBase[ARF, AJF, ANF, BRF, BJF, BNF, CRF, CJF, CNF, RRF, RJF, RNF]) | Thenable[ARF] | ARF
        ]
    ): PromiseBase[
        ARD | ARF, 
        AJD | AJF, 
        AND | ANF, 
        BRD | BRF, 
        BJD | BJF, 
        BND | BNF, 
        CRD | CRF, 
        CJD | CJF, 
        CND | CNF, 
        RRD | RRF, 
        RJD | RJF, 
        RND | RNF
      ] = js.native
    /**
      * Add handlers to be called when the Deferred object is resolved, rejected, or still in progress.
      * @param doneFilter A function that is called when the Deferred is resolved.
      * @param failFilter An optional function that is called when the Deferred is rejected.
      * @param progressFilter An optional function that is called when progress notifications are sent to the Deferred.
      * @see \`{@link https://api.jquery.com/deferred.then/ }\`
      * @since 1.8
      * @example ​ ````Filter the resolve value:
    ```html
    <!doctype html>
    <html lang="en">
    <head>
      <meta charset="utf-8">
      <title>deferred.then demo</title>
      <script src="https://code.jquery.com/jquery-3.3.1.js"></script>
    </head>
    <body>
    ​
    <button>Filter Resolve</button>
    <p></p>
    ​
    <script>
    var filterResolve = function() {
      var defer = $.Deferred(),
      filtered = defer.then(function( value ) {
      return value * 2;
      });
    ​
      defer.resolve( 5 );
      filtered.done(function( value ) {
      $( "p" ).html( "Value is ( 2*5 = ) 10: " + value );
      });
    };
    ​
    $( "button" ).on( "click", filterResolve );
    </script>
    ​
    </body>
    </html>
    ```
      * @example ​ ````Chain tasks:
    ```javascript
    var request = $.ajax( url, { dataType: "json" } ),
      chained = request.then(function( data ) {
      return $.ajax( url2, { data: { user: data.userId } } );
      });
    ​
    chained.done(function( data ) {
      // data retrieved from url2 as provided by the first request
    });
    ```
      */
    def `then`[ARD, AJD, AND, BRD, BJD, BND, CRD, CJD, CND, RRD, RJD, RND, ARP, AJP, ANP, BRP, BJP, BNP, CRP, CJP, CNP, RRP, RJP, RNP](
      doneFilter: js.Function1[
          /* repeated */ TR, 
          (PromiseBase[ARD, AJD, AND, BRD, BJD, BND, CRD, CJD, CND, RRD, RJD, RND]) | Thenable[ARD] | ARD
        ],
      failFilter: Null,
      progressFilter: js.Function1[
          /* repeated */ TN, 
          (PromiseBase[ARP, AJP, ANP, BRP, BJP, BNP, CRP, CJP, CNP, RRP, RJP, RNP]) | Thenable[ANP] | ANP
        ]
    ): PromiseBase[
        ARD | ARP, 
        AJD | AJP, 
        AND | ANP, 
        BRD | BRP, 
        BJD | BJP, 
        BND | BNP, 
        CRD | CRP, 
        CJD | CJP, 
        CND | CNP, 
        RRD | RRP, 
        RJD | RJP, 
        RND | RNP
      ] = js.native
    /**
      * Add handlers to be called when the Deferred object is resolved, rejected, or still in progress.
      * @param doneFilter A function that is called when the Deferred is resolved.
      * @param failFilter An optional function that is called when the Deferred is rejected.
      * @param progressFilter An optional function that is called when progress notifications are sent to the Deferred.
      * @see \`{@link https://api.jquery.com/deferred.then/ }\`
      * @since 1.8
      * @example ​ ````Filter reject value:
    ```javascript
    var defer = $.Deferred(),
      filtered = defer.then( null, function( value ) {
      return value * 3;
      });
    ​
    defer.reject( 6 );
    filtered.fail(function( value ) {
      alert( "Value is ( 3*6 = ) 18: " + value );
    });
    ```
      * @example ​ ````Chain tasks:
    ```javascript
    var request = $.ajax( url, { dataType: "json" } ),
      chained = request.then(function( data ) {
      return $.ajax( url2, { data: { user: data.userId } } );
      });
    ​
    chained.done(function( data ) {
      // data retrieved from url2 as provided by the first request
    });
    ```
      */
    def `then`[ARF, AJF, ANF, BRF, BJF, BNF, CRF, CJF, CNF, RRF, RJF, RNF, ARP, AJP, ANP, BRP, BJP, BNP, CRP, CJP, CNP, RRP, RJP, RNP](
      doneFilter: Null,
      failFilter: js.Function1[
          /* repeated */ TJ, 
          (PromiseBase[ARF, AJF, ANF, BRF, BJF, BNF, CRF, CJF, CNF, RRF, RJF, RNF]) | Thenable[ARF] | ARF
        ],
      progressFilter: js.Function1[
          /* repeated */ TN, 
          (PromiseBase[ARP, AJP, ANP, BRP, BJP, BNP, CRP, CJP, CNP, RRP, RJP, RNP]) | Thenable[ANP] | ANP
        ]
    ): PromiseBase[
        ARF | ARP, 
        AJF | AJP, 
        ANF | ANP, 
        BRF | BRP, 
        BJF | BJP, 
        BNF | BNP, 
        CRF | CRP, 
        CJF | CJP, 
        CNF | CNP, 
        RRF | RRP, 
        RJF | RJP, 
        RNF | RNP
      ] = js.native
    // #endregion
    // region then
    // #region then
    /**
      * Add handlers to be called when the Deferred object is resolved, rejected, or still in progress.
      * @param doneFilter A function that is called when the Deferred is resolved.
      * @param failFilter An optional function that is called when the Deferred is rejected.
      * @param progressFilter An optional function that is called when progress notifications are sent to the Deferred.
      * @see \`{@link https://api.jquery.com/deferred.then/ }\`
      * @since 1.8
      * @example ​ ````Since the jQuery.get method returns a jqXHR object, which is derived from a Deferred object, we can attach handlers using the .then method.
    ```javascript
    $.get( "test.php" ).then(
      function() {
      alert( "$.get succeeded" );
      }, function() {
      alert( "$.get failed!" );
      }
    );
    ```
      * @example ​ ````Filter the resolve value:
    ```html
    <!doctype html>
    <html lang="en">
    <head>
      <meta charset="utf-8">
      <title>deferred.then demo</title>
      <script src="https://code.jquery.com/jquery-3.3.1.js"></script>
    </head>
    <body>
    ​
    <button>Filter Resolve</button>
    <p></p>
    ​
    <script>
    var filterResolve = function() {
      var defer = $.Deferred(),
      filtered = defer.then(function( value ) {
      return value * 2;
      });
    ​
      defer.resolve( 5 );
      filtered.done(function( value ) {
      $( "p" ).html( "Value is ( 2*5 = ) 10: " + value );
      });
    };
    ​
    $( "button" ).on( "click", filterResolve );
    </script>
    ​
    </body>
    </html>
    ```
      * @example ​ ````Filter reject value:
    ```javascript
    var defer = $.Deferred(),
      filtered = defer.then( null, function( value ) {
      return value * 3;
      });
    ​
    defer.reject( 6 );
    filtered.fail(function( value ) {
      alert( "Value is ( 3*6 = ) 18: " + value );
    });
    ```
      * @example ​ ````Chain tasks:
    ```javascript
    var request = $.ajax( url, { dataType: "json" } ),
      chained = request.then(function( data ) {
      return $.ajax( url2, { data: { user: data.userId } } );
      });
    ​
    chained.done(function( data ) {
      // data retrieved from url2 as provided by the first request
    });
    ```
      */
    def `then`[ARD, AJD, AND, BRD, BJD, BND, CRD, CJD, CND, RRD, RJD, RND, ARF, AJF, ANF, BRF, BJF, BNF, CRF, CJF, CNF, RRF, RJF, RNF, ARP, AJP, ANP, BRP, BJP, BNP, CRP, CJP, CNP, RRP, RJP, RNP](
      doneFilter: js.Function1[
          /* repeated */ TR, 
          (PromiseBase[ARD, AJD, AND, BRD, BJD, BND, CRD, CJD, CND, RRD, RJD, RND]) | Thenable[ARD] | ARD
        ],
      failFilter: js.Function1[
          /* repeated */ TJ, 
          (PromiseBase[ARF, AJF, ANF, BRF, BJF, BNF, CRF, CJF, CNF, RRF, RJF, RNF]) | Thenable[ARF] | ARF
        ],
      progressFilter: js.Function1[
          /* repeated */ TN, 
          (PromiseBase[ARP, AJP, ANP, BRP, BJP, BNP, CRP, CJP, CNP, RRP, RJP, RNP]) | Thenable[ANP] | ANP
        ]
    ): PromiseBase[
        ARD | ARF | ARP, 
        AJD | AJF | AJP, 
        AND | ANF | ANP, 
        BRD | BRF | BRP, 
        BJD | BJF | BJP, 
        BND | BNF | BNP, 
        CRD | CRF | CRP, 
        CJD | CJF | CJP, 
        CND | CNF | CNP, 
        RRD | RRF | RRP, 
        RJD | RJF | RJP, 
        RND | RNF | RNP
      ] = js.native
  }
  object Deferred {
    
    /**
      * @deprecated ​ Deprecated. Use \`{@link Callback }\`.
      */
    type AlwaysCallback[TResolve, TReject] = Callback[TResolve | TReject]
    
    type Callback[T] = js.Function1[/* repeated */ T, Unit]
    
    type Callback3[T, U, V] = CallbackBase[T, U, V, scala.Nothing]
    
    type CallbackBase[T, U, V, R] = js.Function4[/* t */ T, /* u */ U, /* v */ V, /* repeated */ R, Unit]
    
    /**
      * @deprecated ​ Deprecated. Use \`{@link Callback }\`.
      */
    type DoneCallback[TResolve] = Callback[TResolve]
    
    /**
      * @deprecated ​ Deprecated. Use \`{@link Callback }\`.
      */
    type FailCallback[TReject] = Callback[TReject]
    
    /**
      * @deprecated ​ Deprecated. Use \`{@link Callback }\`.
      */
    type ProgressCallback[TNotify] = Callback[TNotify]
  }
  
  @js.native
  trait DeferredStatic extends StObject {
    
    /**
      * A factory function that returns a chainable utility object with methods to register multiple callbacks into callback queues, invoke callback queues, and relay the success or failure state of any synchronous or asynchronous function.
      * @param beforeStart A function that is called just before the constructor returns.
      * @see \`{@link https://api.jquery.com/jQuery.Deferred/ }\`
      * @since 1.5
      */
    def apply[TR, TJ, TN](): Deferred[TR, TJ, TN] = js.native
    def apply[TR, TJ, TN](
      beforeStart: js.ThisFunction1[/* this */ Deferred[TR, TJ, TN], /* deferred */ Deferred[TR, TJ, TN], Unit]
    ): Deferred[TR, TJ, TN] = js.native
    
    // https://jquery.com/upgrade-guide/3.0/#callback-exit
    var exceptionHook: js.Any = js.native
  }
  
  @js.native
  trait DoubleClickEvent[TDelegateTarget, TData, TCurrentTarget, TTarget] extends MouseEventBase[TDelegateTarget, TData, TCurrentTarget, TTarget] {
    
    /**
      * The other DOM element involved in the event, if any.
      * @see \`{@link https://api.jquery.com/event.relatedTarget/ }\`
      * @since 1.1.4
      * @example ​ ````On mouseout of anchors, alert the element type being entered.
      ```javascript
      $( "a" ).mouseout(function( event ) {
      alert( event.relatedTarget.nodeName ); // "DIV"
      });
      ```
      */
    @JSName("relatedTarget")
    var relatedTarget_DoubleClickEvent: js.UndefOr[Null] = js.native
    
    @JSName("type")
    var type_DoubleClickEvent: dblclick = js.native
  }
  object DoubleClickEvent {
    
    @scala.inline
    def apply[TDelegateTarget, TData, TCurrentTarget, TTarget](
      altKey: Boolean,
      bubbles: Boolean,
      button: Double,
      buttons: Double,
      cancelable: Boolean,
      clientX: Double,
      clientY: Double,
      ctrlKey: Boolean,
      currentTarget: TCurrentTarget,
      data: TData,
      delegateTarget: TDelegateTarget,
      detail: Double,
      eventPhase: Double,
      isDefaultPrevented: () => Boolean,
      isImmediatePropagationStopped: () => Boolean,
      isPropagationStopped: () => Boolean,
      metaKey: Boolean,
      offsetX: Double,
      offsetY: Double,
      pageX: Double,
      pageY: Double,
      preventDefault: () => Unit,
      screenX: Double,
      screenY: Double,
      shiftKey: Boolean,
      stopImmediatePropagation: () => Unit,
      stopPropagation: () => Unit,
      target: TTarget,
      timeStamp: Double,
      toElement: Element,
      `type`: dblclick,
      view: Window,
      which: Double
    ): DoubleClickEvent[TDelegateTarget, TData, TCurrentTarget, TTarget] = {
      val __obj = js.Dynamic.literal(altKey = altKey.asInstanceOf[js.Any], bubbles = bubbles.asInstanceOf[js.Any], button = button.asInstanceOf[js.Any], buttons = buttons.asInstanceOf[js.Any], cancelable = cancelable.asInstanceOf[js.Any], clientX = clientX.asInstanceOf[js.Any], clientY = clientY.asInstanceOf[js.Any], ctrlKey = ctrlKey.asInstanceOf[js.Any], currentTarget = currentTarget.asInstanceOf[js.Any], data = data.asInstanceOf[js.Any], delegateTarget = delegateTarget.asInstanceOf[js.Any], detail = detail.asInstanceOf[js.Any], eventPhase = eventPhase.asInstanceOf[js.Any], isDefaultPrevented = js.Any.fromFunction0(isDefaultPrevented), isImmediatePropagationStopped = js.Any.fromFunction0(isImmediatePropagationStopped), isPropagationStopped = js.Any.fromFunction0(isPropagationStopped), metaKey = metaKey.asInstanceOf[js.Any], offsetX = offsetX.asInstanceOf[js.Any], offsetY = offsetY.asInstanceOf[js.Any], pageX = pageX.asInstanceOf[js.Any], pageY = pageY.asInstanceOf[js.Any], preventDefault = js.Any.fromFunction0(preventDefault), screenX = screenX.asInstanceOf[js.Any], screenY = screenY.asInstanceOf[js.Any], shiftKey = shiftKey.asInstanceOf[js.Any], stopImmediatePropagation = js.Any.fromFunction0(stopImmediatePropagation), stopPropagation = js.Any.fromFunction0(stopPropagation), target = target.asInstanceOf[js.Any], timeStamp = timeStamp.asInstanceOf[js.Any], toElement = toElement.asInstanceOf[js.Any], view = view.asInstanceOf[js.Any], which = which.asInstanceOf[js.Any])
      __obj.updateDynamic("type")(`type`.asInstanceOf[js.Any])
      __obj.asInstanceOf[DoubleClickEvent[TDelegateTarget, TData, TCurrentTarget, TTarget]]
    }
    
    @scala.inline
    implicit class DoubleClickEventMutableBuilder[Self <: DoubleClickEvent[_, _, _, _], TDelegateTarget, TData, TCurrentTarget, TTarget] (val x: Self with (DoubleClickEvent[TDelegateTarget, TData, TCurrentTarget, TTarget])) extends AnyVal {
      
      @scala.inline
      def setType(value: dblclick): Self = StObject.set(x, "type", value.asInstanceOf[js.Any])
    }
  }
  
  @js.native
  trait DragEndEvent[TDelegateTarget, TData, TCurrentTarget, TTarget] extends DragEventBase[TDelegateTarget, TData, TCurrentTarget, TTarget] {
    
    @JSName("type")
    var type_DragEndEvent: dragend = js.native
  }
  object DragEndEvent {
    
    @scala.inline
    def apply[TDelegateTarget, TData, TCurrentTarget, TTarget](
      bubbles: Boolean,
      cancelable: Boolean,
      currentTarget: TCurrentTarget,
      data: TData,
      delegateTarget: TDelegateTarget,
      detail: Double,
      eventPhase: Double,
      isDefaultPrevented: () => Boolean,
      isImmediatePropagationStopped: () => Boolean,
      isPropagationStopped: () => Boolean,
      preventDefault: () => Unit,
      stopImmediatePropagation: () => Unit,
      stopPropagation: () => Unit,
      target: TTarget,
      timeStamp: Double,
      `type`: dragend,
      view: Window
    ): DragEndEvent[TDelegateTarget, TData, TCurrentTarget, TTarget] = {
      val __obj = js.Dynamic.literal(bubbles = bubbles.asInstanceOf[js.Any], cancelable = cancelable.asInstanceOf[js.Any], currentTarget = currentTarget.asInstanceOf[js.Any], data = data.asInstanceOf[js.Any], delegateTarget = delegateTarget.asInstanceOf[js.Any], detail = detail.asInstanceOf[js.Any], eventPhase = eventPhase.asInstanceOf[js.Any], isDefaultPrevented = js.Any.fromFunction0(isDefaultPrevented), isImmediatePropagationStopped = js.Any.fromFunction0(isImmediatePropagationStopped), isPropagationStopped = js.Any.fromFunction0(isPropagationStopped), preventDefault = js.Any.fromFunction0(preventDefault), stopImmediatePropagation = js.Any.fromFunction0(stopImmediatePropagation), stopPropagation = js.Any.fromFunction0(stopPropagation), target = target.asInstanceOf[js.Any], timeStamp = timeStamp.asInstanceOf[js.Any], view = view.asInstanceOf[js.Any])
      __obj.updateDynamic("type")(`type`.asInstanceOf[js.Any])
      __obj.asInstanceOf[DragEndEvent[TDelegateTarget, TData, TCurrentTarget, TTarget]]
    }
    
    @scala.inline
    implicit class DragEndEventMutableBuilder[Self <: DragEndEvent[_, _, _, _], TDelegateTarget, TData, TCurrentTarget, TTarget] (val x: Self with (DragEndEvent[TDelegateTarget, TData, TCurrentTarget, TTarget])) extends AnyVal {
      
      @scala.inline
      def setType(value: dragend): Self = StObject.set(x, "type", value.asInstanceOf[js.Any])
    }
  }
  
  @js.native
  trait DragEnterEvent[TDelegateTarget, TData, TCurrentTarget, TTarget] extends DragEventBase[TDelegateTarget, TData, TCurrentTarget, TTarget] {
    
    @JSName("type")
    var type_DragEnterEvent: dragenter = js.native
  }
  object DragEnterEvent {
    
    @scala.inline
    def apply[TDelegateTarget, TData, TCurrentTarget, TTarget](
      bubbles: Boolean,
      cancelable: Boolean,
      currentTarget: TCurrentTarget,
      data: TData,
      delegateTarget: TDelegateTarget,
      detail: Double,
      eventPhase: Double,
      isDefaultPrevented: () => Boolean,
      isImmediatePropagationStopped: () => Boolean,
      isPropagationStopped: () => Boolean,
      preventDefault: () => Unit,
      stopImmediatePropagation: () => Unit,
      stopPropagation: () => Unit,
      target: TTarget,
      timeStamp: Double,
      `type`: dragenter,
      view: Window
    ): DragEnterEvent[TDelegateTarget, TData, TCurrentTarget, TTarget] = {
      val __obj = js.Dynamic.literal(bubbles = bubbles.asInstanceOf[js.Any], cancelable = cancelable.asInstanceOf[js.Any], currentTarget = currentTarget.asInstanceOf[js.Any], data = data.asInstanceOf[js.Any], delegateTarget = delegateTarget.asInstanceOf[js.Any], detail = detail.asInstanceOf[js.Any], eventPhase = eventPhase.asInstanceOf[js.Any], isDefaultPrevented = js.Any.fromFunction0(isDefaultPrevented), isImmediatePropagationStopped = js.Any.fromFunction0(isImmediatePropagationStopped), isPropagationStopped = js.Any.fromFunction0(isPropagationStopped), preventDefault = js.Any.fromFunction0(preventDefault), stopImmediatePropagation = js.Any.fromFunction0(stopImmediatePropagation), stopPropagation = js.Any.fromFunction0(stopPropagation), target = target.asInstanceOf[js.Any], timeStamp = timeStamp.asInstanceOf[js.Any], view = view.asInstanceOf[js.Any])
      __obj.updateDynamic("type")(`type`.asInstanceOf[js.Any])
      __obj.asInstanceOf[DragEnterEvent[TDelegateTarget, TData, TCurrentTarget, TTarget]]
    }
    
    @scala.inline
    implicit class DragEnterEventMutableBuilder[Self <: DragEnterEvent[_, _, _, _], TDelegateTarget, TData, TCurrentTarget, TTarget] (val x: Self with (DragEnterEvent[TDelegateTarget, TData, TCurrentTarget, TTarget])) extends AnyVal {
      
      @scala.inline
      def setType(value: dragenter): Self = StObject.set(x, "type", value.asInstanceOf[js.Any])
    }
  }
  
  @js.native
  trait DragEvent[TDelegateTarget, TData, TCurrentTarget, TTarget] extends DragEventBase[TDelegateTarget, TData, TCurrentTarget, TTarget] {
    
    @JSName("type")
    var type_DragEvent: drag = js.native
  }
  object DragEvent {
    
    @scala.inline
    def apply[TDelegateTarget, TData, TCurrentTarget, TTarget](
      bubbles: Boolean,
      cancelable: Boolean,
      currentTarget: TCurrentTarget,
      data: TData,
      delegateTarget: TDelegateTarget,
      detail: Double,
      eventPhase: Double,
      isDefaultPrevented: () => Boolean,
      isImmediatePropagationStopped: () => Boolean,
      isPropagationStopped: () => Boolean,
      preventDefault: () => Unit,
      stopImmediatePropagation: () => Unit,
      stopPropagation: () => Unit,
      target: TTarget,
      timeStamp: Double,
      `type`: drag,
      view: Window
    ): typingsSlinky.jquery.JQuery.DragEvent[TDelegateTarget, TData, TCurrentTarget, TTarget] = {
      val __obj = js.Dynamic.literal(bubbles = bubbles.asInstanceOf[js.Any], cancelable = cancelable.asInstanceOf[js.Any], currentTarget = currentTarget.asInstanceOf[js.Any], data = data.asInstanceOf[js.Any], delegateTarget = delegateTarget.asInstanceOf[js.Any], detail = detail.asInstanceOf[js.Any], eventPhase = eventPhase.asInstanceOf[js.Any], isDefaultPrevented = js.Any.fromFunction0(isDefaultPrevented), isImmediatePropagationStopped = js.Any.fromFunction0(isImmediatePropagationStopped), isPropagationStopped = js.Any.fromFunction0(isPropagationStopped), preventDefault = js.Any.fromFunction0(preventDefault), stopImmediatePropagation = js.Any.fromFunction0(stopImmediatePropagation), stopPropagation = js.Any.fromFunction0(stopPropagation), target = target.asInstanceOf[js.Any], timeStamp = timeStamp.asInstanceOf[js.Any], view = view.asInstanceOf[js.Any])
      __obj.updateDynamic("type")(`type`.asInstanceOf[js.Any])
      __obj.asInstanceOf[typingsSlinky.jquery.JQuery.DragEvent[TDelegateTarget, TData, TCurrentTarget, TTarget]]
    }
    
    @scala.inline
    implicit class DragEventMutableBuilder[Self <: typingsSlinky.jquery.JQuery.DragEvent[_, _, _, _], TDelegateTarget, TData, TCurrentTarget, TTarget] (val x: Self with (typingsSlinky.jquery.JQuery.DragEvent[TDelegateTarget, TData, TCurrentTarget, TTarget])) extends AnyVal {
      
      @scala.inline
      def setType(value: drag): Self = StObject.set(x, "type", value.asInstanceOf[js.Any])
    }
  }
  
  // region DragEvent
  // #region DragEvent
  @js.native
  trait DragEventBase[TDelegateTarget, TData, TCurrentTarget, TTarget] extends UIEventBase[TDelegateTarget, TData, TCurrentTarget, TTarget] {
    
    @JSName("originalEvent")
    var originalEvent_DragEventBase: js.UndefOr[org.scalajs.dom.raw.DragEvent] = js.native
  }
  object DragEventBase {
    
    @scala.inline
    def apply[TDelegateTarget, TData, TCurrentTarget, TTarget](
      bubbles: Boolean,
      cancelable: Boolean,
      currentTarget: TCurrentTarget,
      data: TData,
      delegateTarget: TDelegateTarget,
      detail: Double,
      eventPhase: Double,
      isDefaultPrevented: () => Boolean,
      isImmediatePropagationStopped: () => Boolean,
      isPropagationStopped: () => Boolean,
      preventDefault: () => Unit,
      stopImmediatePropagation: () => Unit,
      stopPropagation: () => Unit,
      target: TTarget,
      timeStamp: Double,
      `type`: String,
      view: Window
    ): DragEventBase[TDelegateTarget, TData, TCurrentTarget, TTarget] = {
      val __obj = js.Dynamic.literal(bubbles = bubbles.asInstanceOf[js.Any], cancelable = cancelable.asInstanceOf[js.Any], currentTarget = currentTarget.asInstanceOf[js.Any], data = data.asInstanceOf[js.Any], delegateTarget = delegateTarget.asInstanceOf[js.Any], detail = detail.asInstanceOf[js.Any], eventPhase = eventPhase.asInstanceOf[js.Any], isDefaultPrevented = js.Any.fromFunction0(isDefaultPrevented), isImmediatePropagationStopped = js.Any.fromFunction0(isImmediatePropagationStopped), isPropagationStopped = js.Any.fromFunction0(isPropagationStopped), preventDefault = js.Any.fromFunction0(preventDefault), stopImmediatePropagation = js.Any.fromFunction0(stopImmediatePropagation), stopPropagation = js.Any.fromFunction0(stopPropagation), target = target.asInstanceOf[js.Any], timeStamp = timeStamp.asInstanceOf[js.Any], view = view.asInstanceOf[js.Any])
      __obj.updateDynamic("type")(`type`.asInstanceOf[js.Any])
      __obj.asInstanceOf[DragEventBase[TDelegateTarget, TData, TCurrentTarget, TTarget]]
    }
    
    @scala.inline
    implicit class DragEventBaseMutableBuilder[Self <: DragEventBase[_, _, _, _], TDelegateTarget, TData, TCurrentTarget, TTarget] (val x: Self with (DragEventBase[TDelegateTarget, TData, TCurrentTarget, TTarget])) extends AnyVal {
      
      @scala.inline
      def setOriginalEvent(value: org.scalajs.dom.raw.DragEvent): Self = StObject.set(x, "originalEvent", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setOriginalEventUndefined: Self = StObject.set(x, "originalEvent", js.undefined)
    }
  }
  
  @js.native
  trait DragExitEvent[TDelegateTarget, TData, TCurrentTarget, TTarget] extends DragEventBase[TDelegateTarget, TData, TCurrentTarget, TTarget] {
    
    @JSName("type")
    var type_DragExitEvent: dragexit = js.native
  }
  object DragExitEvent {
    
    @scala.inline
    def apply[TDelegateTarget, TData, TCurrentTarget, TTarget](
      bubbles: Boolean,
      cancelable: Boolean,
      currentTarget: TCurrentTarget,
      data: TData,
      delegateTarget: TDelegateTarget,
      detail: Double,
      eventPhase: Double,
      isDefaultPrevented: () => Boolean,
      isImmediatePropagationStopped: () => Boolean,
      isPropagationStopped: () => Boolean,
      preventDefault: () => Unit,
      stopImmediatePropagation: () => Unit,
      stopPropagation: () => Unit,
      target: TTarget,
      timeStamp: Double,
      `type`: dragexit,
      view: Window
    ): DragExitEvent[TDelegateTarget, TData, TCurrentTarget, TTarget] = {
      val __obj = js.Dynamic.literal(bubbles = bubbles.asInstanceOf[js.Any], cancelable = cancelable.asInstanceOf[js.Any], currentTarget = currentTarget.asInstanceOf[js.Any], data = data.asInstanceOf[js.Any], delegateTarget = delegateTarget.asInstanceOf[js.Any], detail = detail.asInstanceOf[js.Any], eventPhase = eventPhase.asInstanceOf[js.Any], isDefaultPrevented = js.Any.fromFunction0(isDefaultPrevented), isImmediatePropagationStopped = js.Any.fromFunction0(isImmediatePropagationStopped), isPropagationStopped = js.Any.fromFunction0(isPropagationStopped), preventDefault = js.Any.fromFunction0(preventDefault), stopImmediatePropagation = js.Any.fromFunction0(stopImmediatePropagation), stopPropagation = js.Any.fromFunction0(stopPropagation), target = target.asInstanceOf[js.Any], timeStamp = timeStamp.asInstanceOf[js.Any], view = view.asInstanceOf[js.Any])
      __obj.updateDynamic("type")(`type`.asInstanceOf[js.Any])
      __obj.asInstanceOf[DragExitEvent[TDelegateTarget, TData, TCurrentTarget, TTarget]]
    }
    
    @scala.inline
    implicit class DragExitEventMutableBuilder[Self <: DragExitEvent[_, _, _, _], TDelegateTarget, TData, TCurrentTarget, TTarget] (val x: Self with (DragExitEvent[TDelegateTarget, TData, TCurrentTarget, TTarget])) extends AnyVal {
      
      @scala.inline
      def setType(value: dragexit): Self = StObject.set(x, "type", value.asInstanceOf[js.Any])
    }
  }
  
  @js.native
  trait DragLeaveEvent[TDelegateTarget, TData, TCurrentTarget, TTarget] extends DragEventBase[TDelegateTarget, TData, TCurrentTarget, TTarget] {
    
    @JSName("type")
    var type_DragLeaveEvent: dragleave = js.native
  }
  object DragLeaveEvent {
    
    @scala.inline
    def apply[TDelegateTarget, TData, TCurrentTarget, TTarget](
      bubbles: Boolean,
      cancelable: Boolean,
      currentTarget: TCurrentTarget,
      data: TData,
      delegateTarget: TDelegateTarget,
      detail: Double,
      eventPhase: Double,
      isDefaultPrevented: () => Boolean,
      isImmediatePropagationStopped: () => Boolean,
      isPropagationStopped: () => Boolean,
      preventDefault: () => Unit,
      stopImmediatePropagation: () => Unit,
      stopPropagation: () => Unit,
      target: TTarget,
      timeStamp: Double,
      `type`: dragleave,
      view: Window
    ): DragLeaveEvent[TDelegateTarget, TData, TCurrentTarget, TTarget] = {
      val __obj = js.Dynamic.literal(bubbles = bubbles.asInstanceOf[js.Any], cancelable = cancelable.asInstanceOf[js.Any], currentTarget = currentTarget.asInstanceOf[js.Any], data = data.asInstanceOf[js.Any], delegateTarget = delegateTarget.asInstanceOf[js.Any], detail = detail.asInstanceOf[js.Any], eventPhase = eventPhase.asInstanceOf[js.Any], isDefaultPrevented = js.Any.fromFunction0(isDefaultPrevented), isImmediatePropagationStopped = js.Any.fromFunction0(isImmediatePropagationStopped), isPropagationStopped = js.Any.fromFunction0(isPropagationStopped), preventDefault = js.Any.fromFunction0(preventDefault), stopImmediatePropagation = js.Any.fromFunction0(stopImmediatePropagation), stopPropagation = js.Any.fromFunction0(stopPropagation), target = target.asInstanceOf[js.Any], timeStamp = timeStamp.asInstanceOf[js.Any], view = view.asInstanceOf[js.Any])
      __obj.updateDynamic("type")(`type`.asInstanceOf[js.Any])
      __obj.asInstanceOf[DragLeaveEvent[TDelegateTarget, TData, TCurrentTarget, TTarget]]
    }
    
    @scala.inline
    implicit class DragLeaveEventMutableBuilder[Self <: DragLeaveEvent[_, _, _, _], TDelegateTarget, TData, TCurrentTarget, TTarget] (val x: Self with (DragLeaveEvent[TDelegateTarget, TData, TCurrentTarget, TTarget])) extends AnyVal {
      
      @scala.inline
      def setType(value: dragleave): Self = StObject.set(x, "type", value.asInstanceOf[js.Any])
    }
  }
  
  @js.native
  trait DragOverEvent[TDelegateTarget, TData, TCurrentTarget, TTarget] extends DragEventBase[TDelegateTarget, TData, TCurrentTarget, TTarget] {
    
    @JSName("type")
    var type_DragOverEvent: dragover = js.native
  }
  object DragOverEvent {
    
    @scala.inline
    def apply[TDelegateTarget, TData, TCurrentTarget, TTarget](
      bubbles: Boolean,
      cancelable: Boolean,
      currentTarget: TCurrentTarget,
      data: TData,
      delegateTarget: TDelegateTarget,
      detail: Double,
      eventPhase: Double,
      isDefaultPrevented: () => Boolean,
      isImmediatePropagationStopped: () => Boolean,
      isPropagationStopped: () => Boolean,
      preventDefault: () => Unit,
      stopImmediatePropagation: () => Unit,
      stopPropagation: () => Unit,
      target: TTarget,
      timeStamp: Double,
      `type`: dragover,
      view: Window
    ): DragOverEvent[TDelegateTarget, TData, TCurrentTarget, TTarget] = {
      val __obj = js.Dynamic.literal(bubbles = bubbles.asInstanceOf[js.Any], cancelable = cancelable.asInstanceOf[js.Any], currentTarget = currentTarget.asInstanceOf[js.Any], data = data.asInstanceOf[js.Any], delegateTarget = delegateTarget.asInstanceOf[js.Any], detail = detail.asInstanceOf[js.Any], eventPhase = eventPhase.asInstanceOf[js.Any], isDefaultPrevented = js.Any.fromFunction0(isDefaultPrevented), isImmediatePropagationStopped = js.Any.fromFunction0(isImmediatePropagationStopped), isPropagationStopped = js.Any.fromFunction0(isPropagationStopped), preventDefault = js.Any.fromFunction0(preventDefault), stopImmediatePropagation = js.Any.fromFunction0(stopImmediatePropagation), stopPropagation = js.Any.fromFunction0(stopPropagation), target = target.asInstanceOf[js.Any], timeStamp = timeStamp.asInstanceOf[js.Any], view = view.asInstanceOf[js.Any])
      __obj.updateDynamic("type")(`type`.asInstanceOf[js.Any])
      __obj.asInstanceOf[DragOverEvent[TDelegateTarget, TData, TCurrentTarget, TTarget]]
    }
    
    @scala.inline
    implicit class DragOverEventMutableBuilder[Self <: DragOverEvent[_, _, _, _], TDelegateTarget, TData, TCurrentTarget, TTarget] (val x: Self with (DragOverEvent[TDelegateTarget, TData, TCurrentTarget, TTarget])) extends AnyVal {
      
      @scala.inline
      def setType(value: dragover): Self = StObject.set(x, "type", value.asInstanceOf[js.Any])
    }
  }
  
  @js.native
  trait DragStartEvent[TDelegateTarget, TData, TCurrentTarget, TTarget] extends DragEventBase[TDelegateTarget, TData, TCurrentTarget, TTarget] {
    
    @JSName("type")
    var type_DragStartEvent: dragstart = js.native
  }
  object DragStartEvent {
    
    @scala.inline
    def apply[TDelegateTarget, TData, TCurrentTarget, TTarget](
      bubbles: Boolean,
      cancelable: Boolean,
      currentTarget: TCurrentTarget,
      data: TData,
      delegateTarget: TDelegateTarget,
      detail: Double,
      eventPhase: Double,
      isDefaultPrevented: () => Boolean,
      isImmediatePropagationStopped: () => Boolean,
      isPropagationStopped: () => Boolean,
      preventDefault: () => Unit,
      stopImmediatePropagation: () => Unit,
      stopPropagation: () => Unit,
      target: TTarget,
      timeStamp: Double,
      `type`: dragstart,
      view: Window
    ): DragStartEvent[TDelegateTarget, TData, TCurrentTarget, TTarget] = {
      val __obj = js.Dynamic.literal(bubbles = bubbles.asInstanceOf[js.Any], cancelable = cancelable.asInstanceOf[js.Any], currentTarget = currentTarget.asInstanceOf[js.Any], data = data.asInstanceOf[js.Any], delegateTarget = delegateTarget.asInstanceOf[js.Any], detail = detail.asInstanceOf[js.Any], eventPhase = eventPhase.asInstanceOf[js.Any], isDefaultPrevented = js.Any.fromFunction0(isDefaultPrevented), isImmediatePropagationStopped = js.Any.fromFunction0(isImmediatePropagationStopped), isPropagationStopped = js.Any.fromFunction0(isPropagationStopped), preventDefault = js.Any.fromFunction0(preventDefault), stopImmediatePropagation = js.Any.fromFunction0(stopImmediatePropagation), stopPropagation = js.Any.fromFunction0(stopPropagation), target = target.asInstanceOf[js.Any], timeStamp = timeStamp.asInstanceOf[js.Any], view = view.asInstanceOf[js.Any])
      __obj.updateDynamic("type")(`type`.asInstanceOf[js.Any])
      __obj.asInstanceOf[DragStartEvent[TDelegateTarget, TData, TCurrentTarget, TTarget]]
    }
    
    @scala.inline
    implicit class DragStartEventMutableBuilder[Self <: DragStartEvent[_, _, _, _], TDelegateTarget, TData, TCurrentTarget, TTarget] (val x: Self with (DragStartEvent[TDelegateTarget, TData, TCurrentTarget, TTarget])) extends AnyVal {
      
      @scala.inline
      def setType(value: dragstart): Self = StObject.set(x, "type", value.asInstanceOf[js.Any])
    }
  }
  
  @js.native
  trait DropEvent[TDelegateTarget, TData, TCurrentTarget, TTarget] extends DragEventBase[TDelegateTarget, TData, TCurrentTarget, TTarget] {
    
    @JSName("type")
    var type_DropEvent: drop = js.native
  }
  object DropEvent {
    
    @scala.inline
    def apply[TDelegateTarget, TData, TCurrentTarget, TTarget](
      bubbles: Boolean,
      cancelable: Boolean,
      currentTarget: TCurrentTarget,
      data: TData,
      delegateTarget: TDelegateTarget,
      detail: Double,
      eventPhase: Double,
      isDefaultPrevented: () => Boolean,
      isImmediatePropagationStopped: () => Boolean,
      isPropagationStopped: () => Boolean,
      preventDefault: () => Unit,
      stopImmediatePropagation: () => Unit,
      stopPropagation: () => Unit,
      target: TTarget,
      timeStamp: Double,
      `type`: drop,
      view: Window
    ): DropEvent[TDelegateTarget, TData, TCurrentTarget, TTarget] = {
      val __obj = js.Dynamic.literal(bubbles = bubbles.asInstanceOf[js.Any], cancelable = cancelable.asInstanceOf[js.Any], currentTarget = currentTarget.asInstanceOf[js.Any], data = data.asInstanceOf[js.Any], delegateTarget = delegateTarget.asInstanceOf[js.Any], detail = detail.asInstanceOf[js.Any], eventPhase = eventPhase.asInstanceOf[js.Any], isDefaultPrevented = js.Any.fromFunction0(isDefaultPrevented), isImmediatePropagationStopped = js.Any.fromFunction0(isImmediatePropagationStopped), isPropagationStopped = js.Any.fromFunction0(isPropagationStopped), preventDefault = js.Any.fromFunction0(preventDefault), stopImmediatePropagation = js.Any.fromFunction0(stopImmediatePropagation), stopPropagation = js.Any.fromFunction0(stopPropagation), target = target.asInstanceOf[js.Any], timeStamp = timeStamp.asInstanceOf[js.Any], view = view.asInstanceOf[js.Any])
      __obj.updateDynamic("type")(`type`.asInstanceOf[js.Any])
      __obj.asInstanceOf[DropEvent[TDelegateTarget, TData, TCurrentTarget, TTarget]]
    }
    
    @scala.inline
    implicit class DropEventMutableBuilder[Self <: DropEvent[_, _, _, _], TDelegateTarget, TData, TCurrentTarget, TTarget] (val x: Self with (DropEvent[TDelegateTarget, TData, TCurrentTarget, TTarget])) extends AnyVal {
      
      @scala.inline
      def setType(value: drop): Self = StObject.set(x, "type", value.asInstanceOf[js.Any])
    }
  }
  
  // #endregion
  // region Effects
  // #region Effects
  /* Rewritten from type alias, can be one of: 
    - scala.Double
    - typingsSlinky.jquery.jqueryStrings.fast
    - typingsSlinky.jquery.jqueryStrings.slow
  */
  type Duration = _Duration | Double
  
  // #endregion
  // region Easing
  // #region Easing
  type EasingMethod = js.Function1[/* percent */ Double, Double]
  
  type Easings = StringDictionary[EasingMethod]
  
  // #endregion
  // region Effects (fx)
  // #region Effects (fx)
  @js.native
  trait Effects extends StObject {
    
    /**
      * The rate (in milliseconds) at which animations fire.
      * @see \`{@link https://api.jquery.com/jQuery.fx.interval/ }\`
      * @since 1.4.3
      * @deprecated ​ Deprecated since 3.0. See \`{@link https://api.jquery.com/jQuery.fx.interval/ }\`.
      *
      * **Cause**: As of jQuery 3.0 the `jQuery.fx.interval` property can be used to change the animation interval only on browsers that do not support the `window.requestAnimationFrame()` method. That is currently only Internet Explorer 9 and the Android Browser. Once support is dropped for these browsers, the property will serve no purpose and it will be removed.
      *
      * **Solution**: Find and remove code that changes or uses `jQuery.fx.interval`. If the value is being used by code in your page or a plugin, the code may be making assumptions that are no longer valid. The default value of `jQuery.fx.interval` is `13` (milliseconds), which could be used instead of accessing this property.
      * @example ​ ````Cause all animations to run with less frames.
    ```html
    <!doctype html>
    <html lang="en">
    <head>
      <meta charset="utf-8">
      <title>jQuery.fx.interval demo</title>
      <style>
      div {
      width: 50px;
      height: 30px;
      margin: 5px;
      float: left;
      background: green;
      }
      </style>
      <script src="https://code.jquery.com/jquery-3.3.1.js"></script>
    </head>
    <body>
    ​
    <p><input type="button" value="Run"></p>
    <div></div>
    ​
    <script>
    jQuery.fx.interval = 100;
    $( "input" ).click(function() {
      $( "div" ).toggle( 3000 );
    });
    </script>
    </body>
    </html>
    ```
      */
    var interval: Double = js.native
    
    /**
      * Globally disable all animations.
      * @see \`{@link https://api.jquery.com/jQuery.fx.off/ }\`
      * @since 1.3
      * @example ​ ````Toggle animation on and off
    ```html
    <!doctype html>
    <html lang="en">
    <head>
      <meta charset="utf-8">
      <title>jQuery.fx.off demo</title>
      <style>
      div {
      width: 50px;
      height: 30px;
      margin: 5px;
      float: left;
      background: green;
      }
      </style>
      <script src="https://code.jquery.com/jquery-3.3.1.js"></script>
    </head>
    <body>
    ​
    <input type="button" value="Run">
    <button>Toggle fx</button>
    <div></div>
    ​
    <script>
    var toggleFx = function() {
      $.fx.off = !$.fx.off;
    };
    toggleFx();
    $( "button" ).click( toggleFx );
    $( "input" ).click(function() {
      $( "div" ).toggle( "slow" );
    });
    </script>
    </body>
    </html>
    ```
      */
    var off: Boolean = js.native
    
    /**
      * @deprecated ​ Deprecated since 1.8. Use \`{@link Tween.propHooks jQuery.Tween.propHooks}\`.
      *
      * `jQuery.fx.step` functions are being replaced by `jQuery.Tween.propHooks` and may eventually be removed, but are still supported via the default tween propHook.
      */
    var step: PlainObject[AnimationHook[Node]] = js.native
    
    /**
      * _overridable_ Clears up the `setInterval`
      * @see \`{@link https://gist.github.com/gnarf/54829d408993526fe475#plugging-in-a-different-timer-loop }\`
      * @since 1.8
      */
    def stop(): Unit = js.native
    
    /**
      * Calls `.run()` on each object in the `jQuery.timers` array, removing it from the array if `.run()` returns a falsy value. Calls `jQuery.fx.stop()` whenever there are no timers remaining.
      * @see \`{@link https://gist.github.com/gnarf/54829d408993526fe475#plugging-in-a-different-timer-loop }\`
      * @since 1.8
      */
    def tick(): Unit = js.native
    
    /**
      * _overridable_ Creates a `setInterval` if one doesn't already exist, and pushes `tickFunction` to the `jQuery.timers` array. `tickFunction` should also have `anim`, `elem`, and `queue` properties that reference the animation object, animated element, and queue option to facilitate `jQuery.fn.stop()`
      *
      * By overriding `fx.timer` and `fx.stop` you should be able to implement any animation tick behaviour you desire. (like using `requestAnimationFrame` instead of `setTimeout`.)
      *
      * There is an example of overriding the timer loop in \`{@link https://github.com/gnarf37/jquery-requestAnimationFrame jquery.requestAnimationFrame}\`
      * @see \`{@link https://gist.github.com/gnarf/54829d408993526fe475#plugging-in-a-different-timer-loop }\`
      * @since 1.8
      */
    def timer(tickFunction: TickFunction[_]): Unit = js.native
  }
  object Effects {
    
    @scala.inline
    def apply(
      interval: Double,
      off: Boolean,
      step: PlainObject[AnimationHook[Node]],
      stop: () => Unit,
      tick: () => Unit,
      timer: TickFunction[_] => Unit
    ): Effects = {
      val __obj = js.Dynamic.literal(interval = interval.asInstanceOf[js.Any], off = off.asInstanceOf[js.Any], step = step.asInstanceOf[js.Any], stop = js.Any.fromFunction0(stop), tick = js.Any.fromFunction0(tick), timer = js.Any.fromFunction1(timer))
      __obj.asInstanceOf[Effects]
    }
    
    @scala.inline
    implicit class EffectsMutableBuilder[Self <: Effects] (val x: Self) extends AnyVal {
      
      @scala.inline
      def setInterval(value: Double): Self = StObject.set(x, "interval", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setOff(value: Boolean): Self = StObject.set(x, "off", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setStep(value: PlainObject[AnimationHook[Node]]): Self = StObject.set(x, "step", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setStop(value: () => Unit): Self = StObject.set(x, "stop", js.Any.fromFunction0(value))
      
      @scala.inline
      def setTick(value: () => Unit): Self = StObject.set(x, "tick", js.Any.fromFunction0(value))
      
      @scala.inline
      def setTimer(value: TickFunction[_] => Unit): Self = StObject.set(x, "timer", js.Any.fromFunction1(value))
    }
  }
  
  /**
    * @see \`{@link https://api.jquery.com/animate/#animate-properties-options }\`
    */
  @js.native
  trait EffectsOptions[TElement]
    extends PlainObject[js.Any] {
    
    /**
      * A function to be called when the animation on an element completes or stops without completing (its Promise object is either resolved or rejected).
      */
    var always: js.UndefOr[
        js.ThisFunction2[
          /* this */ TElement, 
          /* animation */ Animation[TElement], 
          /* jumpedToEnd */ Boolean, 
          Unit
        ]
      ] = js.native
    
    /**
      * A function that is called once the animation on an element is complete.
      */
    var complete: js.UndefOr[js.ThisFunction0[/* this */ TElement, Unit]] = js.native
    
    /**
      * A function to be called when the animation on an element completes (its Promise object is resolved).
      */
    var done: js.UndefOr[
        js.ThisFunction2[
          /* this */ TElement, 
          /* animation */ Animation[TElement], 
          /* jumpedToEnd */ Boolean, 
          Unit
        ]
      ] = js.native
    
    /**
      * A string or number determining how long the animation will run.
      */
    var duration: js.UndefOr[Duration] = js.native
    
    /**
      * A string indicating which easing function to use for the transition.
      */
    var easing: js.UndefOr[String] = js.native
    
    /**
      * A function to be called when the animation on an element fails to complete (its Promise object is rejected).
      */
    var fail: js.UndefOr[
        js.ThisFunction2[
          /* this */ TElement, 
          /* animation */ Animation[TElement], 
          /* jumpedToEnd */ Boolean, 
          Unit
        ]
      ] = js.native
    
    /**
      * A function to be called after each step of the animation, only once per animated element regardless of the number of animated properties.
      */
    var progress: js.UndefOr[
        js.ThisFunction3[
          /* this */ TElement, 
          /* animation */ Animation[TElement], 
          /* progress */ Double, 
          /* remainingMs */ Double, 
          Unit
        ]
      ] = js.native
    
    /**
      * A Boolean indicating whether to place the animation in the effects queue. If false, the animation will begin immediately. As of jQuery 1.7, the queue option can also accept a string, in which case the animation is added to the queue represented by that string. When a custom queue name is used the animation does not automatically start; you must call .dequeue("queuename") to start it.
      */
    var queue: js.UndefOr[Boolean | String] = js.native
    
    /**
      * An object containing one or more of the CSS properties defined by the properties argument and their corresponding easing functions.
      */
    var specialEasing: js.UndefOr[PlainObject[String]] = js.native
    
    /**
      * A function to call when the animation on an element begins.
      */
    var start: js.UndefOr[js.ThisFunction1[/* this */ TElement, /* animation */ Animation[TElement], Unit]] = js.native
    
    /**
      * A function to be called for each animated property of each animated element. This function provides an opportunity to modify the Tween object to change the value of the property before it is set.
      */
    var step: js.UndefOr[
        js.ThisFunction2[/* this */ TElement, /* now */ Double, /* tween */ Tween[TElement], Unit]
      ] = js.native
  }
  object EffectsOptions {
    
    @scala.inline
    def apply[TElement](): EffectsOptions[TElement] = {
      val __obj = js.Dynamic.literal()
      __obj.asInstanceOf[EffectsOptions[TElement]]
    }
    
    @scala.inline
    implicit class EffectsOptionsMutableBuilder[Self <: EffectsOptions[_], TElement] (val x: Self with EffectsOptions[TElement]) extends AnyVal {
      
      @scala.inline
      def setAlways(
        value: js.ThisFunction2[
              /* this */ TElement, 
              /* animation */ Animation[TElement], 
              /* jumpedToEnd */ Boolean, 
              Unit
            ]
      ): Self = StObject.set(x, "always", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setAlwaysUndefined: Self = StObject.set(x, "always", js.undefined)
      
      @scala.inline
      def setComplete(value: js.ThisFunction0[/* this */ TElement, Unit]): Self = StObject.set(x, "complete", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setCompleteUndefined: Self = StObject.set(x, "complete", js.undefined)
      
      @scala.inline
      def setDone(
        value: js.ThisFunction2[
              /* this */ TElement, 
              /* animation */ Animation[TElement], 
              /* jumpedToEnd */ Boolean, 
              Unit
            ]
      ): Self = StObject.set(x, "done", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setDoneUndefined: Self = StObject.set(x, "done", js.undefined)
      
      @scala.inline
      def setDuration(value: Duration): Self = StObject.set(x, "duration", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setDurationUndefined: Self = StObject.set(x, "duration", js.undefined)
      
      @scala.inline
      def setEasing(value: String): Self = StObject.set(x, "easing", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setEasingUndefined: Self = StObject.set(x, "easing", js.undefined)
      
      @scala.inline
      def setFail(
        value: js.ThisFunction2[
              /* this */ TElement, 
              /* animation */ Animation[TElement], 
              /* jumpedToEnd */ Boolean, 
              Unit
            ]
      ): Self = StObject.set(x, "fail", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setFailUndefined: Self = StObject.set(x, "fail", js.undefined)
      
      @scala.inline
      def setProgress(
        value: js.ThisFunction3[
              /* this */ TElement, 
              /* animation */ Animation[TElement], 
              /* progress */ Double, 
              /* remainingMs */ Double, 
              Unit
            ]
      ): Self = StObject.set(x, "progress", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setProgressUndefined: Self = StObject.set(x, "progress", js.undefined)
      
      @scala.inline
      def setQueue(value: Boolean | String): Self = StObject.set(x, "queue", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setQueueUndefined: Self = StObject.set(x, "queue", js.undefined)
      
      @scala.inline
      def setSpecialEasing(value: PlainObject[String]): Self = StObject.set(x, "specialEasing", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setSpecialEasingUndefined: Self = StObject.set(x, "specialEasing", js.undefined)
      
      @scala.inline
      def setStart(value: js.ThisFunction1[/* this */ TElement, /* animation */ Animation[TElement], Unit]): Self = StObject.set(x, "start", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setStartUndefined: Self = StObject.set(x, "start", js.undefined)
      
      @scala.inline
      def setStep(value: js.ThisFunction2[/* this */ TElement, /* now */ Double, /* tween */ Tween[TElement], Unit]): Self = StObject.set(x, "step", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setStepUndefined: Self = StObject.set(x, "step", js.undefined)
    }
  }
  
  /**
    * jQuery's event system normalizes the event object according to W3C standards. The event object is guaranteed to be passed to the event handler (no checks for window.event required). It normalizes the target, relatedTarget, which, metaKey and pageX/Y properties and provides both stopPropagation() and preventDefault() methods.
    *
    * Those properties are all documented, and accompanied by examples, on the \`{@link http://api.jquery.com/category/events/event-object/ Event object}\` page.
    *
    * The standard events in the Document Object Model are: `blur`, `focus`, `load`, `resize`, `scroll`, `unload`, `beforeunload`, `click`, `dblclick`, `mousedown`, `mouseup`, `mousemove`, `mouseover`, `mouseout`, `mouseenter`, `mouseleave`, `change`, `select`, `submit`, `keydown`, `keypress`, and `keyup`. Since the DOM event names have predefined meanings for some elements, using them for other purposes is not recommended. jQuery's event model can trigger an event by any name on an element, and it is propagated up the DOM tree to which that element belongs, if any.
    * @see \`{@link https://api.jquery.com/category/events/event-object/ }\`
    * @see \`{@link TriggeredEvent }\`
    */
  @js.native
  trait Event extends StObject {
    
    // MouseEvent, KeyboardEvent, TouchEvent
    var altKey: js.UndefOr[Boolean] = js.native
    
    // region Copied properties
    // #region Copied properties
    // Event
    var bubbles: js.UndefOr[Boolean] = js.native
    
    // MouseEvent
    var button: js.UndefOr[Double] = js.native
    
    var buttons: js.UndefOr[Double] = js.native
    
    var cancelable: js.UndefOr[Boolean] = js.native
    
    // TouchEvent
    var changedTouches: js.UndefOr[TouchList] = js.native
    
    // KeyboardEvent
    /** @deprecated */
    var char: js.UndefOr[String] = js.native
    
    /** @deprecated */
    var charCode: js.UndefOr[Double] = js.native
    
    var clientX: js.UndefOr[Double] = js.native
    
    var clientY: js.UndefOr[Double] = js.native
    
    var ctrlKey: js.UndefOr[Boolean] = js.native
    
    // UIEvent
    var detail: js.UndefOr[Double] = js.native
    
    var eventPhase: js.UndefOr[Double] = js.native
    
    /**
      * Returns whether event.preventDefault() was ever called on this event object.
      * @see \`{@link https://api.jquery.com/event.isDefaultPrevented/ }\`
      * @since 1.3
      * @example ​ ````Checks whether event.preventDefault() was called.
    ```javascript
    $( "a" ).click(function( event ) {
      alert( event.isDefaultPrevented() ); // false
      event.preventDefault();
      alert( event.isDefaultPrevented() ); // true
    });
    ```
      */
    def isDefaultPrevented(): Boolean = js.native
    
    /**
      * Returns whether event.stopImmediatePropagation() was ever called on this event object.
      * @see \`{@link https://api.jquery.com/event.isImmediatePropagationStopped/ }\`
      * @since 1.3
      * @example ​ ````Checks whether event.stopImmediatePropagation() was called.
    ```html
    <!doctype html>
    <html lang="en">
    <head>
      <meta charset="utf-8">
      <title>event.isImmediatePropagationStopped demo</title>
      <script src="https://code.jquery.com/jquery-3.3.1.js"></script>
    </head>
    <body>
    ​
    <button>click me</button>
    <div id="stop-log"></div>
      ​
    <script>
    function immediatePropStopped( event ) {
      var msg = "";
      if ( event.isImmediatePropagationStopped() ) {
      msg = "called";
      } else {
      msg = "not called";
      }
      $( "#stop-log" ).append( "<div>" + msg + "</div>" );
    }
    ​
    $( "button" ).click(function( event ) {
      immediatePropStopped( event );
      event.stopImmediatePropagation();
      immediatePropStopped( event );
    });
    </script>
    ​
    </body>
    </html>
    ```
      */
    def isImmediatePropagationStopped(): Boolean = js.native
    
    /**
      * Returns whether event.stopPropagation() was ever called on this event object.
      * @see \`{@link https://api.jquery.com/event.isPropagationStopped/ }\`
      * @since 1.3
      * @example ​ ````Checks whether event.stopPropagation() was called
    ```html
    <!doctype html>
    <html lang="en">
    <head>
      <meta charset="utf-8">
      <title>event.isPropagationStopped demo</title>
      <script src="https://code.jquery.com/jquery-3.3.1.js"></script>
    </head>
    <body>
    ​
    <button>click me</button>
    <div id="stop-log"></div>
      ​
    <script>
    function propStopped( event ) {
      var msg = "";
      if ( event.isPropagationStopped() ) {
      msg = "called";
      } else {
      msg = "not called";
      }
      $( "#stop-log" ).append( "<div>" + msg + "</div>" );
    }
    ​
    $( "button" ).click(function(event) {
      propStopped( event );
      event.stopPropagation();
      propStopped( event );
    });
    </script>
    ​
    </body>
    </html>
    ```
      */
    def isPropagationStopped(): Boolean = js.native
    
    var key: js.UndefOr[String] = js.native
    
    /** @deprecated */
    var keyCode: js.UndefOr[Double] = js.native
    
    /**
      * Indicates whether the META key was pressed when the event fired.
      * @see \`{@link https://api.jquery.com/event.metaKey/ }\`
      * @since 1.0.4
      * @example ​ ````Determine whether the META key was pressed when the event fired.
    ```html
    <!doctype html>
    <html lang="en">
    <head>
      <meta charset="utf-8">
      <title>event.metaKey demo</title>
      <style>
      body {
      background-color: #eef;
      }
      div {
      padding: 20px;
      }
      </style>
      <script src="https://code.jquery.com/jquery-3.3.1.js"></script>
    </head>
    <body>
    ​
    <button value="Test" name="Test" id="checkMetaKey">Click me!</button>
    <div id="display"></div>
    ​
    <script>
    $( "#checkMetaKey" ).click(function( event ) {
      $( "#display" ).text( event.metaKey );
    });
    </script>
    ​
    </body>
    </html>
    ```
      */
    var metaKey: js.UndefOr[Boolean] = js.native
    
    var offsetX: js.UndefOr[Double] = js.native
    
    var offsetY: js.UndefOr[Double] = js.native
    
    /**
      * The mouse position relative to the left edge of the document.
      * @see \`{@link https://api.jquery.com/event.pageX/ }\`
      * @since 1.0.4
      * @example ​ ````Show the mouse position relative to the left and top edges of the document (within this iframe).
    ```html
    <!doctype html>
    <html lang="en">
    <head>
      <meta charset="utf-8">
      <title>event.pageX demo</title>
      <style>
      body {
      background-color: #eef;
      }
      div {
      padding: 20px;
      }
      </style>
      <script src="https://code.jquery.com/jquery-3.3.1.js"></script>
    </head>
    <body>
    ​
    <div id="log"></div>
    ​
    <script>
    $( document ).on( "mousemove", function( event ) {
      $( "#log" ).text( "pageX: " + event.pageX + ", pageY: " + event.pageY );
    });
    </script>
    ​
    </body>
    </html>
    ```
      */
    var pageX: js.UndefOr[Double] = js.native
    
    /**
      * The mouse position relative to the top edge of the document.
      * @see \`{@link https://api.jquery.com/event.pageY/ }\`
      * @since 1.0.4
      * @example ​ ````Show the mouse position relative to the left and top edges of the document (within this iframe).
    ```html
    <!doctype html>
    <html lang="en">
    <head>
      <meta charset="utf-8">
      <title>event.pageY demo</title>
      <style>
      body {
      background-color: #eef;
      }
      div {
      padding: 20px;
      }
      </style>
      <script src="https://code.jquery.com/jquery-3.3.1.js"></script>
    </head>
    <body>
    ​
    <div id="log"></div>
    ​
    <script>
    $( document ).on( "mousemove", function( event ) {
      $( "#log" ).text( "pageX: " + event.pageX + ", pageY: " + event.pageY );
    });
    </script>
    ​
    </body>
    </html>
    ```
      */
    var pageY: js.UndefOr[Double] = js.native
    
    // PointerEvent
    var pointerId: js.UndefOr[Double] = js.native
    
    var pointerType: js.UndefOr[String] = js.native
    
    /**
      * If this method is called, the default action of the event will not be triggered.
      * @see \`{@link https://api.jquery.com/event.preventDefault/ }\`
      * @since 1.0
      * @example ​ ````Cancel the default action (navigation) of the click.
    ```html
    <!doctype html>
    <html lang="en">
    <head>
      <meta charset="utf-8">
      <title>event.preventDefault demo</title>
      <script src="https://code.jquery.com/jquery-3.3.1.js"></script>
    </head>
    <body>
    ​
    <a href="https://jquery.com">default click action is prevented</a>
    <div id="log"></div>
    ​
    <script>
    $( "a" ).click(function( event ) {
      event.preventDefault();
      $( "<div>" )
      .append( "default " + event.type + " prevented" )
      .appendTo( "#log" );
    });
    </script>
    ​
    </body>
    </html>
    ```
      */
    def preventDefault(): Unit = js.native
    
    var screenX: js.UndefOr[Double] = js.native
    
    var screenY: js.UndefOr[Double] = js.native
    
    var shiftKey: js.UndefOr[Boolean] = js.native
    
    /**
      * Keeps the rest of the handlers from being executed and prevents the event from bubbling up the DOM tree.
      * @see \`{@link https://api.jquery.com/event.stopImmediatePropagation/ }\`
      * @since 1.3
      * @example ​ ````Prevents other event handlers from being called.
    ```html
    <!doctype html>
    <html lang="en">
    <head>
      <meta charset="utf-8">
      <title>event.stopImmediatePropagation demo</title>
      <style>
      p {
      height: 30px;
      width: 150px;
      background-color: #ccf;
      }
      div {
      height: 30px;
      width: 150px;
      background-color: #cfc;
      }
      </style>
      <script src="https://code.jquery.com/jquery-3.3.1.js"></script>
    </head>
    <body>
    ​
    <p>paragraph</p>
    <div>division</div>
    ​
    <script>
    $( "p" ).click(function( event ) {
      event.stopImmediatePropagation();
    });
    $( "p" ).click(function( event ) {
      // This function won't be executed
      $( this ).css( "background-color", "#f00" );
    });
    $( "div" ).click(function( event ) {
      // This function will be executed
      $( this ).css( "background-color", "#f00" );
    });
    </script>
    ​
    </body>
    </html>
    ```
      */
    def stopImmediatePropagation(): Unit = js.native
    
    /**
      * Prevents the event from bubbling up the DOM tree, preventing any parent handlers from being notified of the event.
      * @see \`{@link https://api.jquery.com/event.stopPropagation/ }\`
      * @since 1.0
      * @example ​ ````Kill the bubbling on the click event.
    ```javascript
    $( "p" ).click(function( event ) {
      event.stopPropagation();
      // Do something
    });
    ```
      */
    def stopPropagation(): Unit = js.native
    
    var targetTouches: js.UndefOr[TouchList] = js.native
    
    // #endregion
    /**
      * The difference in milliseconds between the time the browser created the event and January 1, 1970.
      * @see \`{@link https://api.jquery.com/event.timeStamp/ }\`
      * @since 1.2.6
      * @example ​ ````Display the time since the click handler last executed.
    ```html
    <!doctype html>
    <html lang="en">
    <head>
      <meta charset="utf-8">
      <title>event.timeStamp demo</title>
      <style>
      div {
      height: 100px;
      width: 300px;
      margin: 10px;
      background-color: #ffd;
      overflow: auto;
      }
      </style>
      <script src="https://code.jquery.com/jquery-3.3.1.js"></script>
    </head>
    <body>
    ​
    <div>Click.</div>
    ​
    <script>
    var last, diff;
    $( "div" ).click(function( event ) {
      if ( last ) {
      diff = event.timeStamp - last;
      $( "div" ).append( "time since last event: " + diff + "<br>" );
      } else {
      $( "div" ).append( "Click again.<br>" );
      }
      last = event.timeStamp;
    });
    </script>
    ​
    </body>
    </html>
    ```
      */
    var timeStamp: Double = js.native
    
    /** @deprecated */
    var toElement: js.UndefOr[Element] = js.native
    
    var touches: js.UndefOr[TouchList] = js.native
    
    /**
      * Describes the nature of the event.
      * @see \`{@link https://api.jquery.com/event.type/ }\`
      * @since 1.0
      * @example ​ ````On all anchor clicks, alert the event type.
    ```javascript
    $( "a" ).click(function( event ) {
      alert( event.type ); // "click"
    });
    ```
      */
    var `type`: String = js.native
    
    var view: js.UndefOr[Window] = js.native
    
    // MouseEvent, KeyboardEvent
    /**
      * For key or mouse events, this property indicates the specific key or button that was pressed.
      * @see \`{@link https://api.jquery.com/event.which/ }\`
      * @since 1.1.3
      * @example ​ ````Log which key was depressed.
    ```html
    <!doctype html>
    <html lang="en">
    <head>
      <meta charset="utf-8">
      <title>event.which demo</title>
      <script src="https://code.jquery.com/jquery-3.3.1.js"></script>
    </head>
    <body>
    ​
    <input id="whichkey" value="type something">
    <div id="log"></div>
    ​
    <script>
    $( "#whichkey" ).on( "keydown", function( event ) {
      $( "#log" ).html( event.type + ": " +  event.which );
    });
    </script>
    ​
    </body>
    </html>
    ```
      * @example ​ ````Log which mouse button was depressed.
    ```html
    <!doctype html>
    <html lang="en">
    <head>
      <meta charset="utf-8">
      <title>event.which demo</title>
      <script src="https://code.jquery.com/jquery-3.3.1.js"></script>
    </head>
    <body>
    ​
    <input id="whichkey" value="click here">
    <div id="log"></div>
    ​
    <script>
    $( "#whichkey" ).on( "mousedown", function( event ) {
      $( "#log" ).html( event.type + ": " +  event.which );
    });
    </script>
    ​
    </body>
    </html>
    ```
      */
    var which: js.UndefOr[Double] = js.native
  }
  object Event {
    
    @scala.inline
    def apply(
      isDefaultPrevented: () => Boolean,
      isImmediatePropagationStopped: () => Boolean,
      isPropagationStopped: () => Boolean,
      preventDefault: () => Unit,
      stopImmediatePropagation: () => Unit,
      stopPropagation: () => Unit,
      timeStamp: Double,
      `type`: String
    ): typingsSlinky.jquery.JQuery.Event = {
      val __obj = js.Dynamic.literal(isDefaultPrevented = js.Any.fromFunction0(isDefaultPrevented), isImmediatePropagationStopped = js.Any.fromFunction0(isImmediatePropagationStopped), isPropagationStopped = js.Any.fromFunction0(isPropagationStopped), preventDefault = js.Any.fromFunction0(preventDefault), stopImmediatePropagation = js.Any.fromFunction0(stopImmediatePropagation), stopPropagation = js.Any.fromFunction0(stopPropagation), timeStamp = timeStamp.asInstanceOf[js.Any])
      __obj.updateDynamic("type")(`type`.asInstanceOf[js.Any])
      __obj.asInstanceOf[typingsSlinky.jquery.JQuery.Event]
    }
    
    @scala.inline
    implicit class EventMutableBuilder[Self <: typingsSlinky.jquery.JQuery.Event] (val x: Self) extends AnyVal {
      
      @scala.inline
      def setAltKey(value: Boolean): Self = StObject.set(x, "altKey", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setAltKeyUndefined: Self = StObject.set(x, "altKey", js.undefined)
      
      @scala.inline
      def setBubbles(value: Boolean): Self = StObject.set(x, "bubbles", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setBubblesUndefined: Self = StObject.set(x, "bubbles", js.undefined)
      
      @scala.inline
      def setButton(value: Double): Self = StObject.set(x, "button", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setButtonUndefined: Self = StObject.set(x, "button", js.undefined)
      
      @scala.inline
      def setButtons(value: Double): Self = StObject.set(x, "buttons", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setButtonsUndefined: Self = StObject.set(x, "buttons", js.undefined)
      
      @scala.inline
      def setCancelable(value: Boolean): Self = StObject.set(x, "cancelable", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setCancelableUndefined: Self = StObject.set(x, "cancelable", js.undefined)
      
      @scala.inline
      def setChangedTouches(value: TouchList): Self = StObject.set(x, "changedTouches", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setChangedTouchesUndefined: Self = StObject.set(x, "changedTouches", js.undefined)
      
      @scala.inline
      def setChar(value: String): Self = StObject.set(x, "char", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setCharCode(value: Double): Self = StObject.set(x, "charCode", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setCharCodeUndefined: Self = StObject.set(x, "charCode", js.undefined)
      
      @scala.inline
      def setCharUndefined: Self = StObject.set(x, "char", js.undefined)
      
      @scala.inline
      def setClientX(value: Double): Self = StObject.set(x, "clientX", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setClientXUndefined: Self = StObject.set(x, "clientX", js.undefined)
      
      @scala.inline
      def setClientY(value: Double): Self = StObject.set(x, "clientY", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setClientYUndefined: Self = StObject.set(x, "clientY", js.undefined)
      
      @scala.inline
      def setCtrlKey(value: Boolean): Self = StObject.set(x, "ctrlKey", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setCtrlKeyUndefined: Self = StObject.set(x, "ctrlKey", js.undefined)
      
      @scala.inline
      def setDetail(value: Double): Self = StObject.set(x, "detail", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setDetailUndefined: Self = StObject.set(x, "detail", js.undefined)
      
      @scala.inline
      def setEventPhase(value: Double): Self = StObject.set(x, "eventPhase", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setEventPhaseUndefined: Self = StObject.set(x, "eventPhase", js.undefined)
      
      @scala.inline
      def setIsDefaultPrevented(value: () => Boolean): Self = StObject.set(x, "isDefaultPrevented", js.Any.fromFunction0(value))
      
      @scala.inline
      def setIsImmediatePropagationStopped(value: () => Boolean): Self = StObject.set(x, "isImmediatePropagationStopped", js.Any.fromFunction0(value))
      
      @scala.inline
      def setIsPropagationStopped(value: () => Boolean): Self = StObject.set(x, "isPropagationStopped", js.Any.fromFunction0(value))
      
      @scala.inline
      def setKey(value: String): Self = StObject.set(x, "key", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setKeyCode(value: Double): Self = StObject.set(x, "keyCode", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setKeyCodeUndefined: Self = StObject.set(x, "keyCode", js.undefined)
      
      @scala.inline
      def setKeyUndefined: Self = StObject.set(x, "key", js.undefined)
      
      @scala.inline
      def setMetaKey(value: Boolean): Self = StObject.set(x, "metaKey", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setMetaKeyUndefined: Self = StObject.set(x, "metaKey", js.undefined)
      
      @scala.inline
      def setOffsetX(value: Double): Self = StObject.set(x, "offsetX", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setOffsetXUndefined: Self = StObject.set(x, "offsetX", js.undefined)
      
      @scala.inline
      def setOffsetY(value: Double): Self = StObject.set(x, "offsetY", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setOffsetYUndefined: Self = StObject.set(x, "offsetY", js.undefined)
      
      @scala.inline
      def setPageX(value: Double): Self = StObject.set(x, "pageX", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setPageXUndefined: Self = StObject.set(x, "pageX", js.undefined)
      
      @scala.inline
      def setPageY(value: Double): Self = StObject.set(x, "pageY", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setPageYUndefined: Self = StObject.set(x, "pageY", js.undefined)
      
      @scala.inline
      def setPointerId(value: Double): Self = StObject.set(x, "pointerId", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setPointerIdUndefined: Self = StObject.set(x, "pointerId", js.undefined)
      
      @scala.inline
      def setPointerType(value: String): Self = StObject.set(x, "pointerType", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setPointerTypeUndefined: Self = StObject.set(x, "pointerType", js.undefined)
      
      @scala.inline
      def setPreventDefault(value: () => Unit): Self = StObject.set(x, "preventDefault", js.Any.fromFunction0(value))
      
      @scala.inline
      def setScreenX(value: Double): Self = StObject.set(x, "screenX", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setScreenXUndefined: Self = StObject.set(x, "screenX", js.undefined)
      
      @scala.inline
      def setScreenY(value: Double): Self = StObject.set(x, "screenY", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setScreenYUndefined: Self = StObject.set(x, "screenY", js.undefined)
      
      @scala.inline
      def setShiftKey(value: Boolean): Self = StObject.set(x, "shiftKey", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setShiftKeyUndefined: Self = StObject.set(x, "shiftKey", js.undefined)
      
      @scala.inline
      def setStopImmediatePropagation(value: () => Unit): Self = StObject.set(x, "stopImmediatePropagation", js.Any.fromFunction0(value))
      
      @scala.inline
      def setStopPropagation(value: () => Unit): Self = StObject.set(x, "stopPropagation", js.Any.fromFunction0(value))
      
      @scala.inline
      def setTargetTouches(value: TouchList): Self = StObject.set(x, "targetTouches", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setTargetTouchesUndefined: Self = StObject.set(x, "targetTouches", js.undefined)
      
      @scala.inline
      def setTimeStamp(value: Double): Self = StObject.set(x, "timeStamp", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setToElement(value: Element): Self = StObject.set(x, "toElement", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setToElementUndefined: Self = StObject.set(x, "toElement", js.undefined)
      
      @scala.inline
      def setTouches(value: TouchList): Self = StObject.set(x, "touches", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setTouchesUndefined: Self = StObject.set(x, "touches", js.undefined)
      
      @scala.inline
      def setType(value: String): Self = StObject.set(x, "type", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setView(value: Window): Self = StObject.set(x, "view", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setViewUndefined: Self = StObject.set(x, "view", js.undefined)
      
      @scala.inline
      def setWhich(value: Double): Self = StObject.set(x, "which", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setWhichUndefined: Self = StObject.set(x, "which", js.undefined)
    }
  }
  
  // region Event
  // #region Event
  @js.native
  trait EventBase[TDelegateTarget, TData, TCurrentTarget, TTarget] extends TriggeredEvent[TDelegateTarget, TData, TCurrentTarget, TTarget] {
    
    // MouseEvent, KeyboardEvent, TouchEvent
    @JSName("altKey")
    var altKey_EventBase: js.UndefOr[scala.Nothing] = js.native
    
    // Event
    @JSName("bubbles")
    var bubbles_EventBase: Boolean = js.native
    
    // MouseEvent
    @JSName("button")
    var button_EventBase: js.UndefOr[scala.Nothing] = js.native
    
    @JSName("buttons")
    var buttons_EventBase: js.UndefOr[scala.Nothing] = js.native
    
    @JSName("cancelable")
    var cancelable_EventBase: Boolean = js.native
    
    // TouchEvent
    @JSName("changedTouches")
    var changedTouches_EventBase: js.UndefOr[scala.Nothing] = js.native
    
    /** @deprecated */
    @JSName("charCode")
    var charCode_EventBase: js.UndefOr[scala.Nothing] = js.native
    
    // KeyboardEvent
    /** @deprecated */
    @JSName("char")
    var char_EventBase: js.UndefOr[scala.Nothing] = js.native
    
    @JSName("clientX")
    var clientX_EventBase: js.UndefOr[scala.Nothing] = js.native
    
    @JSName("clientY")
    var clientY_EventBase: js.UndefOr[scala.Nothing] = js.native
    
    @JSName("ctrlKey")
    var ctrlKey_EventBase: js.UndefOr[scala.Nothing] = js.native
    
    // UIEvent
    @JSName("detail")
    var detail_EventBase: js.UndefOr[scala.Nothing] = js.native
    
    @JSName("eventPhase")
    var eventPhase_EventBase: Double = js.native
    
    /** @deprecated */
    @JSName("keyCode")
    var keyCode_EventBase: js.UndefOr[scala.Nothing] = js.native
    
    @JSName("key")
    var key_EventBase: js.UndefOr[scala.Nothing] = js.native
    
    /**
      * Indicates whether the META key was pressed when the event fired.
      * @see \`{@link https://api.jquery.com/event.metaKey/ }\`
      * @since 1.0.4
      * @example ​ ````Determine whether the META key was pressed when the event fired.
    ```html
    <!doctype html>
    <html lang="en">
    <head>
      <meta charset="utf-8">
      <title>event.metaKey demo</title>
      <style>
      body {
      background-color: #eef;
      }
      div {
      padding: 20px;
      }
      </style>
      <script src="https://code.jquery.com/jquery-3.3.1.js"></script>
    </head>
    <body>
    ​
    <button value="Test" name="Test" id="checkMetaKey">Click me!</button>
    <div id="display"></div>
    ​
    <script>
    $( "#checkMetaKey" ).click(function( event ) {
      $( "#display" ).text( event.metaKey );
    });
    </script>
    ​
    </body>
    </html>
    ```
      */
    @JSName("metaKey")
    var metaKey_EventBase: js.UndefOr[scala.Nothing] = js.native
    
    @JSName("offsetX")
    var offsetX_EventBase: js.UndefOr[scala.Nothing] = js.native
    
    @JSName("offsetY")
    var offsetY_EventBase: js.UndefOr[scala.Nothing] = js.native
    
    /**
      * The mouse position relative to the left edge of the document.
      * @see \`{@link https://api.jquery.com/event.pageX/ }\`
      * @since 1.0.4
      * @example ​ ````Show the mouse position relative to the left and top edges of the document (within this iframe).
    ```html
    <!doctype html>
    <html lang="en">
    <head>
      <meta charset="utf-8">
      <title>event.pageX demo</title>
      <style>
      body {
      background-color: #eef;
      }
      div {
      padding: 20px;
      }
      </style>
      <script src="https://code.jquery.com/jquery-3.3.1.js"></script>
    </head>
    <body>
    ​
    <div id="log"></div>
    ​
    <script>
    $( document ).on( "mousemove", function( event ) {
      $( "#log" ).text( "pageX: " + event.pageX + ", pageY: " + event.pageY );
    });
    </script>
    ​
    </body>
    </html>
    ```
      */
    @JSName("pageX")
    var pageX_EventBase: js.UndefOr[scala.Nothing] = js.native
    
    /**
      * The mouse position relative to the top edge of the document.
      * @see \`{@link https://api.jquery.com/event.pageY/ }\`
      * @since 1.0.4
      * @example ​ ````Show the mouse position relative to the left and top edges of the document (within this iframe).
    ```html
    <!doctype html>
    <html lang="en">
    <head>
      <meta charset="utf-8">
      <title>event.pageY demo</title>
      <style>
      body {
      background-color: #eef;
      }
      div {
      padding: 20px;
      }
      </style>
      <script src="https://code.jquery.com/jquery-3.3.1.js"></script>
    </head>
    <body>
    ​
    <div id="log"></div>
    ​
    <script>
    $( document ).on( "mousemove", function( event ) {
      $( "#log" ).text( "pageX: " + event.pageX + ", pageY: " + event.pageY );
    });
    </script>
    ​
    </body>
    </html>
    ```
      */
    @JSName("pageY")
    var pageY_EventBase: js.UndefOr[scala.Nothing] = js.native
    
    // PointerEvent
    @JSName("pointerId")
    var pointerId_EventBase: js.UndefOr[scala.Nothing] = js.native
    
    @JSName("pointerType")
    var pointerType_EventBase: js.UndefOr[scala.Nothing] = js.native
    
    /**
      * The other DOM element involved in the event, if any.
      * @see \`{@link https://api.jquery.com/event.relatedTarget/ }\`
      * @since 1.1.4
      * @example ​ ````On mouseout of anchors, alert the element type being entered.
    ```javascript
    $( "a" ).mouseout(function( event ) {
      alert( event.relatedTarget.nodeName ); // "DIV"
    });
    ```
      */
    var relatedTarget: js.UndefOr[scala.Nothing] = js.native
    
    @JSName("screenX")
    var screenX_EventBase: js.UndefOr[scala.Nothing] = js.native
    
    @JSName("screenY")
    var screenY_EventBase: js.UndefOr[scala.Nothing] = js.native
    
    @JSName("shiftKey")
    var shiftKey_EventBase: js.UndefOr[scala.Nothing] = js.native
    
    @JSName("targetTouches")
    var targetTouches_EventBase: js.UndefOr[scala.Nothing] = js.native
    
    /** @deprecated */
    @JSName("toElement")
    var toElement_EventBase: js.UndefOr[scala.Nothing] = js.native
    
    @JSName("touches")
    var touches_EventBase: js.UndefOr[scala.Nothing] = js.native
    
    @JSName("view")
    var view_EventBase: js.UndefOr[scala.Nothing] = js.native
    
    // MouseEvent, KeyboardEvent
    /**
      * For key or mouse events, this property indicates the specific key or button that was pressed.
      * @see \`{@link https://api.jquery.com/event.which/ }\`
      * @since 1.1.3
      * @deprecated ​ Deprecated since 3.3. See \`{@link https://github.com/jquery/api.jquery.com/issues/821 }\`.
      * @example ​ ````Log which key was depressed.
    ```html
    <!doctype html>
    <html lang="en">
    <head>
      <meta charset="utf-8">
      <title>event.which demo</title>
      <script src="https://code.jquery.com/jquery-3.3.1.js"></script>
    </head>
    <body>
    ​
    <input id="whichkey" value="type something">
    <div id="log"></div>
    ​
    <script>
    $( "#whichkey" ).on( "keydown", function( event ) {
      $( "#log" ).html( event.type + ": " +  event.which );
    });
    </script>
    ​
    </body>
    </html>
    ```
      * @example ​ ````Log which mouse button was depressed.
    ```html
    <!doctype html>
    <html lang="en">
    <head>
      <meta charset="utf-8">
      <title>event.which demo</title>
      <script src="https://code.jquery.com/jquery-3.3.1.js"></script>
    </head>
    <body>
    ​
    <input id="whichkey" value="click here">
    <div id="log"></div>
    ​
    <script>
    $( "#whichkey" ).on( "mousedown", function( event ) {
      $( "#log" ).html( event.type + ": " +  event.which );
    });
    </script>
    ​
    </body>
    </html>
    ```
      */
    @JSName("which")
    var which_EventBase: js.UndefOr[scala.Nothing] = js.native
  }
  object EventBase {
    
    @scala.inline
    def apply[TDelegateTarget, TData, TCurrentTarget, TTarget](
      bubbles: Boolean,
      cancelable: Boolean,
      currentTarget: TCurrentTarget,
      data: TData,
      delegateTarget: TDelegateTarget,
      eventPhase: Double,
      isDefaultPrevented: () => Boolean,
      isImmediatePropagationStopped: () => Boolean,
      isPropagationStopped: () => Boolean,
      preventDefault: () => Unit,
      stopImmediatePropagation: () => Unit,
      stopPropagation: () => Unit,
      target: TTarget,
      timeStamp: Double,
      `type`: String
    ): EventBase[TDelegateTarget, TData, TCurrentTarget, TTarget] = {
      val __obj = js.Dynamic.literal(bubbles = bubbles.asInstanceOf[js.Any], cancelable = cancelable.asInstanceOf[js.Any], currentTarget = currentTarget.asInstanceOf[js.Any], data = data.asInstanceOf[js.Any], delegateTarget = delegateTarget.asInstanceOf[js.Any], eventPhase = eventPhase.asInstanceOf[js.Any], isDefaultPrevented = js.Any.fromFunction0(isDefaultPrevented), isImmediatePropagationStopped = js.Any.fromFunction0(isImmediatePropagationStopped), isPropagationStopped = js.Any.fromFunction0(isPropagationStopped), preventDefault = js.Any.fromFunction0(preventDefault), stopImmediatePropagation = js.Any.fromFunction0(stopImmediatePropagation), stopPropagation = js.Any.fromFunction0(stopPropagation), target = target.asInstanceOf[js.Any], timeStamp = timeStamp.asInstanceOf[js.Any])
      __obj.updateDynamic("type")(`type`.asInstanceOf[js.Any])
      __obj.asInstanceOf[EventBase[TDelegateTarget, TData, TCurrentTarget, TTarget]]
    }
    
    @scala.inline
    implicit class EventBaseMutableBuilder[Self <: EventBase[_, _, _, _], TDelegateTarget, TData, TCurrentTarget, TTarget] (val x: Self with (EventBase[TDelegateTarget, TData, TCurrentTarget, TTarget])) extends AnyVal {
      
      @scala.inline
      def setBubbles(value: Boolean): Self = StObject.set(x, "bubbles", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setCancelable(value: Boolean): Self = StObject.set(x, "cancelable", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setEventPhase(value: Double): Self = StObject.set(x, "eventPhase", value.asInstanceOf[js.Any])
    }
  }
  
  // region Event extensions
  // #region Event extensions
  @js.native
  trait EventExtensions extends StObject {
    
    /**
      * The jQuery special event hooks are a set of per-event-name functions and properties that allow code to control the behavior of event processing within jQuery. The mechanism is similar to `fixHooks` in that the special event information is stored in `jQuery.event.special.NAME`, where `NAME` is the name of the special event. Event names are case sensitive.
      *
      * As with `fixHooks`, the special event hooks design assumes it will be very rare that two unrelated pieces of code want to process the same event name. Special event authors who need to modify events with existing hooks will need to take precautions to avoid introducing unwanted side-effects by clobbering those hooks.
      * @see \`{@link https://learn.jquery.com/events/event-extensions/#special-event-hooks }\`
      */
    var special: SpecialEventHooks = js.native
  }
  object EventExtensions {
    
    @scala.inline
    def apply(special: SpecialEventHooks): EventExtensions = {
      val __obj = js.Dynamic.literal(special = special.asInstanceOf[js.Any])
      __obj.asInstanceOf[EventExtensions]
    }
    
    @scala.inline
    implicit class EventExtensionsMutableBuilder[Self <: EventExtensions] (val x: Self) extends AnyVal {
      
      @scala.inline
      def setSpecial(value: SpecialEventHooks): Self = StObject.set(x, "special", value.asInstanceOf[js.Any])
    }
  }
  
  type EventHandler[TCurrentTarget, TData] = EventHandlerBase[TCurrentTarget, TriggeredEvent[TCurrentTarget, TData, js.Any, js.Any]]
  
  // Extra parameters can be passed from trigger()
  type EventHandlerBase[TContext, T] = js.ThisFunction2[/* this */ TContext, /* t */ T, /* repeated */ js.Any, js.Any]
  
  // #endregion
  // #endregion
  // region Events
  // #region Events
  // region Event
  // #region Event
  // This should be a class but doesn't work correctly under the JQuery namespace. Event should be an inner class of jQuery.
  /**
    * jQuery's event system normalizes the event object according to W3C standards. The event object is guaranteed to be passed to the event handler (no checks for window.event required). It normalizes the target, relatedTarget, which, metaKey and pageX/Y properties and provides both stopPropagation() and preventDefault() methods.
    *
    * Those properties are all documented, and accompanied by examples, on the \`{@link http://api.jquery.com/category/events/event-object/ Event object}\` page.
    *
    * The standard events in the Document Object Model are: `blur`, `focus`, `load`, `resize`, `scroll`, `unload`, `beforeunload`, `click`, `dblclick`, `mousedown`, `mouseup`, `mousemove`, `mouseover`, `mouseout`, `mouseenter`, `mouseleave`, `change`, `select`, `submit`, `keydown`, `keypress`, and `keyup`. Since the DOM event names have predefined meanings for some elements, using them for other purposes is not recommended. jQuery's event model can trigger an event by any name on an element, and it is propagated up the DOM tree to which that element belongs, if any.
    * @see \`{@link https://api.jquery.com/category/events/event-object/ }\`
    */
  @js.native
  trait EventStatic
    extends /**
    * The jQuery.Event constructor is exposed and can be used when calling trigger. The new operator is optional.
    *
    * Check \`{@link https://api.jquery.com/trigger/ trigger}\`'s documentation to see how to combine it with your own event object.
    * @see \`{@link https://api.jquery.com/category/events/event-object/ }\`
    * @since 1.6
    * @example
  ```javascript
  //Create a new jQuery.Event object without the "new" operator.
  var e = jQuery.Event( "click" );
  ​
  // trigger an artificial click event
  jQuery( "body" ).trigger( e );
  ```
    * @example
  ```javascript
  // Create a new jQuery.Event object with specified event properties.
  var e = jQuery.Event( "keydown", { keyCode: 64 } );
  ​
  // trigger an artificial keydown event with keyCode 64
  jQuery( "body" ).trigger( e );
  ```
    */
  Instantiable1[/* event */ String, typingsSlinky.jquery.JQuery.Event with js.Object]
       with Instantiable2[
          /* event */ String, 
          /* properties */ js.Object, 
          typingsSlinky.jquery.JQuery.Event with js.Object
        ] {
    
    /**
      * The jQuery.Event constructor is exposed and can be used when calling trigger. The new operator is optional.
      *
      * Check \`{@link https://api.jquery.com/trigger/ trigger}\`'s documentation to see how to combine it with your own event object.
      * @see \`{@link https://api.jquery.com/category/events/event-object/ }\`
      * @since 1.6
      * @example
    ```javascript
    //Create a new jQuery.Event object without the "new" operator.
    var e = jQuery.Event( "click" );
    ​
    // trigger an artificial click event
    jQuery( "body" ).trigger( e );
    ```
      * @example
    ```javascript
    // Create a new jQuery.Event object with specified event properties.
    var e = jQuery.Event( "keydown", { keyCode: 64 } );
    ​
    // trigger an artificial keydown event with keyCode 64
    jQuery( "body" ).trigger( e );
    ```
      */
    def apply[T /* <: js.Object */](event: String): typingsSlinky.jquery.JQuery.Event with T = js.native
    def apply[T /* <: js.Object */](event: String, properties: T): typingsSlinky.jquery.JQuery.Event with T = js.native
  }
  
  // #endregion
  /* Rewritten from type alias, can be one of: 
    - typingsSlinky.jquery.jqueryBooleans.`false`
    - scala.Null
    - js.UndefOr[scala.Nothing]
    - typingsSlinky.jquery.jqueryNumbers.`0`
    - typingsSlinky.jquery.jqueryStrings._empty
    - typingsSlinky.std.HTMLAllCollection
  */
  type Falsy = js.UndefOr[_Falsy | Null | HTMLAllCollection]
  
  @js.native
  trait FocusEvent[TDelegateTarget, TData, TCurrentTarget, TTarget] extends FocusEventBase[TDelegateTarget, TData, TCurrentTarget, TTarget] {
    
    @JSName("type")
    var type_FocusEvent: focus = js.native
  }
  object FocusEvent {
    
    @scala.inline
    def apply[TDelegateTarget, TData, TCurrentTarget, TTarget](
      bubbles: Boolean,
      cancelable: Boolean,
      currentTarget: TCurrentTarget,
      data: TData,
      delegateTarget: TDelegateTarget,
      detail: Double,
      eventPhase: Double,
      isDefaultPrevented: () => Boolean,
      isImmediatePropagationStopped: () => Boolean,
      isPropagationStopped: () => Boolean,
      preventDefault: () => Unit,
      stopImmediatePropagation: () => Unit,
      stopPropagation: () => Unit,
      target: TTarget,
      timeStamp: Double,
      `type`: focus,
      view: Window
    ): typingsSlinky.jquery.JQuery.FocusEvent[TDelegateTarget, TData, TCurrentTarget, TTarget] = {
      val __obj = js.Dynamic.literal(bubbles = bubbles.asInstanceOf[js.Any], cancelable = cancelable.asInstanceOf[js.Any], currentTarget = currentTarget.asInstanceOf[js.Any], data = data.asInstanceOf[js.Any], delegateTarget = delegateTarget.asInstanceOf[js.Any], detail = detail.asInstanceOf[js.Any], eventPhase = eventPhase.asInstanceOf[js.Any], isDefaultPrevented = js.Any.fromFunction0(isDefaultPrevented), isImmediatePropagationStopped = js.Any.fromFunction0(isImmediatePropagationStopped), isPropagationStopped = js.Any.fromFunction0(isPropagationStopped), preventDefault = js.Any.fromFunction0(preventDefault), stopImmediatePropagation = js.Any.fromFunction0(stopImmediatePropagation), stopPropagation = js.Any.fromFunction0(stopPropagation), target = target.asInstanceOf[js.Any], timeStamp = timeStamp.asInstanceOf[js.Any], view = view.asInstanceOf[js.Any])
      __obj.updateDynamic("type")(`type`.asInstanceOf[js.Any])
      __obj.asInstanceOf[typingsSlinky.jquery.JQuery.FocusEvent[TDelegateTarget, TData, TCurrentTarget, TTarget]]
    }
    
    @scala.inline
    implicit class FocusEventMutableBuilder[Self <: typingsSlinky.jquery.JQuery.FocusEvent[_, _, _, _], TDelegateTarget, TData, TCurrentTarget, TTarget] (val x: Self with (typingsSlinky.jquery.JQuery.FocusEvent[TDelegateTarget, TData, TCurrentTarget, TTarget])) extends AnyVal {
      
      @scala.inline
      def setType(value: focus): Self = StObject.set(x, "type", value.asInstanceOf[js.Any])
    }
  }
  
  // #endregion
  // region FocusEvent
  // #region FocusEvent
  @js.native
  trait FocusEventBase[TDelegateTarget, TData, TCurrentTarget, TTarget] extends UIEventBase[TDelegateTarget, TData, TCurrentTarget, TTarget] {
    
    // MouseEvent, KeyboardEvent, TouchEvent
    @JSName("altKey")
    var altKey_FocusEventBase: js.UndefOr[scala.Nothing] = js.native
    
    // MouseEvent
    @JSName("button")
    var button_FocusEventBase: js.UndefOr[scala.Nothing] = js.native
    
    @JSName("buttons")
    var buttons_FocusEventBase: js.UndefOr[scala.Nothing] = js.native
    
    // TouchEvent
    @JSName("changedTouches")
    var changedTouches_FocusEventBase: js.UndefOr[scala.Nothing] = js.native
    
    /** @deprecated */
    @JSName("charCode")
    var charCode_FocusEventBase: js.UndefOr[scala.Nothing] = js.native
    
    // KeyboardEvent
    /** @deprecated */
    @JSName("char")
    var char_FocusEventBase: js.UndefOr[scala.Nothing] = js.native
    
    @JSName("clientX")
    var clientX_FocusEventBase: js.UndefOr[scala.Nothing] = js.native
    
    @JSName("clientY")
    var clientY_FocusEventBase: js.UndefOr[scala.Nothing] = js.native
    
    @JSName("ctrlKey")
    var ctrlKey_FocusEventBase: js.UndefOr[scala.Nothing] = js.native
    
    /** @deprecated */
    @JSName("keyCode")
    var keyCode_FocusEventBase: js.UndefOr[scala.Nothing] = js.native
    
    @JSName("key")
    var key_FocusEventBase: js.UndefOr[scala.Nothing] = js.native
    
    /**
      * Indicates whether the META key was pressed when the event fired.
      * @see \`{@link https://api.jquery.com/event.metaKey/ }\`
      * @since 1.0.4
      * @example ​ ````Determine whether the META key was pressed when the event fired.
    ```html
    <!doctype html>
    <html lang="en">
    <head>
      <meta charset="utf-8">
      <title>event.metaKey demo</title>
      <style>
      body {
      background-color: #eef;
      }
      div {
      padding: 20px;
      }
      </style>
      <script src="https://code.jquery.com/jquery-3.3.1.js"></script>
    </head>
    <body>
    ​
    <button value="Test" name="Test" id="checkMetaKey">Click me!</button>
    <div id="display"></div>
    ​
    <script>
    $( "#checkMetaKey" ).click(function( event ) {
      $( "#display" ).text( event.metaKey );
    });
    </script>
    ​
    </body>
    </html>
    ```
      */
    @JSName("metaKey")
    var metaKey_FocusEventBase: js.UndefOr[scala.Nothing] = js.native
    
    @JSName("offsetX")
    var offsetX_FocusEventBase: js.UndefOr[scala.Nothing] = js.native
    
    @JSName("offsetY")
    var offsetY_FocusEventBase: js.UndefOr[scala.Nothing] = js.native
    
    @JSName("originalEvent")
    var originalEvent_FocusEventBase: js.UndefOr[org.scalajs.dom.raw.FocusEvent] = js.native
    
    /**
      * The mouse position relative to the left edge of the document.
      * @see \`{@link https://api.jquery.com/event.pageX/ }\`
      * @since 1.0.4
      * @example ​ ````Show the mouse position relative to the left and top edges of the document (within this iframe).
    ```html
    <!doctype html>
    <html lang="en">
    <head>
      <meta charset="utf-8">
      <title>event.pageX demo</title>
      <style>
      body {
      background-color: #eef;
      }
      div {
      padding: 20px;
      }
      </style>
      <script src="https://code.jquery.com/jquery-3.3.1.js"></script>
    </head>
    <body>
    ​
    <div id="log"></div>
    ​
    <script>
    $( document ).on( "mousemove", function( event ) {
      $( "#log" ).text( "pageX: " + event.pageX + ", pageY: " + event.pageY );
    });
    </script>
    ​
    </body>
    </html>
    ```
      */
    @JSName("pageX")
    var pageX_FocusEventBase: js.UndefOr[scala.Nothing] = js.native
    
    /**
      * The mouse position relative to the top edge of the document.
      * @see \`{@link https://api.jquery.com/event.pageY/ }\`
      * @since 1.0.4
      * @example ​ ````Show the mouse position relative to the left and top edges of the document (within this iframe).
    ```html
    <!doctype html>
    <html lang="en">
    <head>
      <meta charset="utf-8">
      <title>event.pageY demo</title>
      <style>
      body {
      background-color: #eef;
      }
      div {
      padding: 20px;
      }
      </style>
      <script src="https://code.jquery.com/jquery-3.3.1.js"></script>
    </head>
    <body>
    ​
    <div id="log"></div>
    ​
    <script>
    $( document ).on( "mousemove", function( event ) {
      $( "#log" ).text( "pageX: " + event.pageX + ", pageY: " + event.pageY );
    });
    </script>
    ​
    </body>
    </html>
    ```
      */
    @JSName("pageY")
    var pageY_FocusEventBase: js.UndefOr[scala.Nothing] = js.native
    
    // PointerEvent
    @JSName("pointerId")
    var pointerId_FocusEventBase: js.UndefOr[scala.Nothing] = js.native
    
    @JSName("pointerType")
    var pointerType_FocusEventBase: js.UndefOr[scala.Nothing] = js.native
    
    /**
      * The other DOM element involved in the event, if any.
      * @see \`{@link https://api.jquery.com/event.relatedTarget/ }\`
      * @since 1.1.4
      * @example ​ ````On mouseout of anchors, alert the element type being entered.
    ```javascript
    $( "a" ).mouseout(function( event ) {
      alert( event.relatedTarget.nodeName ); // "DIV"
    });
    ```
      */
    var relatedTarget: js.UndefOr[EventTarget | Null] = js.native
    
    @JSName("screenX")
    var screenX_FocusEventBase: js.UndefOr[scala.Nothing] = js.native
    
    @JSName("screenY")
    var screenY_FocusEventBase: js.UndefOr[scala.Nothing] = js.native
    
    @JSName("shiftKey")
    var shiftKey_FocusEventBase: js.UndefOr[scala.Nothing] = js.native
    
    @JSName("targetTouches")
    var targetTouches_FocusEventBase: js.UndefOr[scala.Nothing] = js.native
    
    /** @deprecated */
    @JSName("toElement")
    var toElement_FocusEventBase: js.UndefOr[scala.Nothing] = js.native
    
    @JSName("touches")
    var touches_FocusEventBase: js.UndefOr[scala.Nothing] = js.native
    
    // MouseEvent, KeyboardEvent
    /**
      * For key or mouse events, this property indicates the specific key or button that was pressed.
      * @see \`{@link https://api.jquery.com/event.which/ }\`
      * @since 1.1.3
      * @deprecated ​ Deprecated since 3.3. See \`{@link https://github.com/jquery/api.jquery.com/issues/821 }\`.
      * @example ​ ````Log which key was depressed.
    ```html
    <!doctype html>
    <html lang="en">
    <head>
      <meta charset="utf-8">
      <title>event.which demo</title>
      <script src="https://code.jquery.com/jquery-3.3.1.js"></script>
    </head>
    <body>
    ​
    <input id="whichkey" value="type something">
    <div id="log"></div>
    ​
    <script>
    $( "#whichkey" ).on( "keydown", function( event ) {
      $( "#log" ).html( event.type + ": " +  event.which );
    });
    </script>
    ​
    </body>
    </html>
    ```
      * @example ​ ````Log which mouse button was depressed.
    ```html
    <!doctype html>
    <html lang="en">
    <head>
      <meta charset="utf-8">
      <title>event.which demo</title>
      <script src="https://code.jquery.com/jquery-3.3.1.js"></script>
    </head>
    <body>
    ​
    <input id="whichkey" value="click here">
    <div id="log"></div>
    ​
    <script>
    $( "#whichkey" ).on( "mousedown", function( event ) {
      $( "#log" ).html( event.type + ": " +  event.which );
    });
    </script>
    ​
    </body>
    </html>
    ```
      */
    @JSName("which")
    var which_FocusEventBase: js.UndefOr[scala.Nothing] = js.native
  }
  object FocusEventBase {
    
    @scala.inline
    def apply[TDelegateTarget, TData, TCurrentTarget, TTarget](
      bubbles: Boolean,
      cancelable: Boolean,
      currentTarget: TCurrentTarget,
      data: TData,
      delegateTarget: TDelegateTarget,
      detail: Double,
      eventPhase: Double,
      isDefaultPrevented: () => Boolean,
      isImmediatePropagationStopped: () => Boolean,
      isPropagationStopped: () => Boolean,
      preventDefault: () => Unit,
      stopImmediatePropagation: () => Unit,
      stopPropagation: () => Unit,
      target: TTarget,
      timeStamp: Double,
      `type`: String,
      view: Window
    ): FocusEventBase[TDelegateTarget, TData, TCurrentTarget, TTarget] = {
      val __obj = js.Dynamic.literal(bubbles = bubbles.asInstanceOf[js.Any], cancelable = cancelable.asInstanceOf[js.Any], currentTarget = currentTarget.asInstanceOf[js.Any], data = data.asInstanceOf[js.Any], delegateTarget = delegateTarget.asInstanceOf[js.Any], detail = detail.asInstanceOf[js.Any], eventPhase = eventPhase.asInstanceOf[js.Any], isDefaultPrevented = js.Any.fromFunction0(isDefaultPrevented), isImmediatePropagationStopped = js.Any.fromFunction0(isImmediatePropagationStopped), isPropagationStopped = js.Any.fromFunction0(isPropagationStopped), preventDefault = js.Any.fromFunction0(preventDefault), stopImmediatePropagation = js.Any.fromFunction0(stopImmediatePropagation), stopPropagation = js.Any.fromFunction0(stopPropagation), target = target.asInstanceOf[js.Any], timeStamp = timeStamp.asInstanceOf[js.Any], view = view.asInstanceOf[js.Any])
      __obj.updateDynamic("type")(`type`.asInstanceOf[js.Any])
      __obj.asInstanceOf[FocusEventBase[TDelegateTarget, TData, TCurrentTarget, TTarget]]
    }
    
    @scala.inline
    implicit class FocusEventBaseMutableBuilder[Self <: FocusEventBase[_, _, _, _], TDelegateTarget, TData, TCurrentTarget, TTarget] (val x: Self with (FocusEventBase[TDelegateTarget, TData, TCurrentTarget, TTarget])) extends AnyVal {
      
      @scala.inline
      def setOriginalEvent(value: org.scalajs.dom.raw.FocusEvent): Self = StObject.set(x, "originalEvent", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setOriginalEventUndefined: Self = StObject.set(x, "originalEvent", js.undefined)
      
      @scala.inline
      def setRelatedTarget(value: EventTarget): Self = StObject.set(x, "relatedTarget", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setRelatedTargetNull: Self = StObject.set(x, "relatedTarget", null)
      
      @scala.inline
      def setRelatedTargetUndefined: Self = StObject.set(x, "relatedTarget", js.undefined)
    }
  }
  
  @js.native
  trait FocusInEvent[TDelegateTarget, TData, TCurrentTarget, TTarget] extends FocusEventBase[TDelegateTarget, TData, TCurrentTarget, TTarget] {
    
    @JSName("type")
    var type_FocusInEvent: focusin = js.native
  }
  object FocusInEvent {
    
    @scala.inline
    def apply[TDelegateTarget, TData, TCurrentTarget, TTarget](
      bubbles: Boolean,
      cancelable: Boolean,
      currentTarget: TCurrentTarget,
      data: TData,
      delegateTarget: TDelegateTarget,
      detail: Double,
      eventPhase: Double,
      isDefaultPrevented: () => Boolean,
      isImmediatePropagationStopped: () => Boolean,
      isPropagationStopped: () => Boolean,
      preventDefault: () => Unit,
      stopImmediatePropagation: () => Unit,
      stopPropagation: () => Unit,
      target: TTarget,
      timeStamp: Double,
      `type`: focusin,
      view: Window
    ): FocusInEvent[TDelegateTarget, TData, TCurrentTarget, TTarget] = {
      val __obj = js.Dynamic.literal(bubbles = bubbles.asInstanceOf[js.Any], cancelable = cancelable.asInstanceOf[js.Any], currentTarget = currentTarget.asInstanceOf[js.Any], data = data.asInstanceOf[js.Any], delegateTarget = delegateTarget.asInstanceOf[js.Any], detail = detail.asInstanceOf[js.Any], eventPhase = eventPhase.asInstanceOf[js.Any], isDefaultPrevented = js.Any.fromFunction0(isDefaultPrevented), isImmediatePropagationStopped = js.Any.fromFunction0(isImmediatePropagationStopped), isPropagationStopped = js.Any.fromFunction0(isPropagationStopped), preventDefault = js.Any.fromFunction0(preventDefault), stopImmediatePropagation = js.Any.fromFunction0(stopImmediatePropagation), stopPropagation = js.Any.fromFunction0(stopPropagation), target = target.asInstanceOf[js.Any], timeStamp = timeStamp.asInstanceOf[js.Any], view = view.asInstanceOf[js.Any])
      __obj.updateDynamic("type")(`type`.asInstanceOf[js.Any])
      __obj.asInstanceOf[FocusInEvent[TDelegateTarget, TData, TCurrentTarget, TTarget]]
    }
    
    @scala.inline
    implicit class FocusInEventMutableBuilder[Self <: FocusInEvent[_, _, _, _], TDelegateTarget, TData, TCurrentTarget, TTarget] (val x: Self with (FocusInEvent[TDelegateTarget, TData, TCurrentTarget, TTarget])) extends AnyVal {
      
      @scala.inline
      def setType(value: focusin): Self = StObject.set(x, "type", value.asInstanceOf[js.Any])
    }
  }
  
  @js.native
  trait FocusOutEvent[TDelegateTarget, TData, TCurrentTarget, TTarget] extends FocusEventBase[TDelegateTarget, TData, TCurrentTarget, TTarget] {
    
    @JSName("type")
    var type_FocusOutEvent: focusout = js.native
  }
  object FocusOutEvent {
    
    @scala.inline
    def apply[TDelegateTarget, TData, TCurrentTarget, TTarget](
      bubbles: Boolean,
      cancelable: Boolean,
      currentTarget: TCurrentTarget,
      data: TData,
      delegateTarget: TDelegateTarget,
      detail: Double,
      eventPhase: Double,
      isDefaultPrevented: () => Boolean,
      isImmediatePropagationStopped: () => Boolean,
      isPropagationStopped: () => Boolean,
      preventDefault: () => Unit,
      stopImmediatePropagation: () => Unit,
      stopPropagation: () => Unit,
      target: TTarget,
      timeStamp: Double,
      `type`: focusout,
      view: Window
    ): FocusOutEvent[TDelegateTarget, TData, TCurrentTarget, TTarget] = {
      val __obj = js.Dynamic.literal(bubbles = bubbles.asInstanceOf[js.Any], cancelable = cancelable.asInstanceOf[js.Any], currentTarget = currentTarget.asInstanceOf[js.Any], data = data.asInstanceOf[js.Any], delegateTarget = delegateTarget.asInstanceOf[js.Any], detail = detail.asInstanceOf[js.Any], eventPhase = eventPhase.asInstanceOf[js.Any], isDefaultPrevented = js.Any.fromFunction0(isDefaultPrevented), isImmediatePropagationStopped = js.Any.fromFunction0(isImmediatePropagationStopped), isPropagationStopped = js.Any.fromFunction0(isPropagationStopped), preventDefault = js.Any.fromFunction0(preventDefault), stopImmediatePropagation = js.Any.fromFunction0(stopImmediatePropagation), stopPropagation = js.Any.fromFunction0(stopPropagation), target = target.asInstanceOf[js.Any], timeStamp = timeStamp.asInstanceOf[js.Any], view = view.asInstanceOf[js.Any])
      __obj.updateDynamic("type")(`type`.asInstanceOf[js.Any])
      __obj.asInstanceOf[FocusOutEvent[TDelegateTarget, TData, TCurrentTarget, TTarget]]
    }
    
    @scala.inline
    implicit class FocusOutEventMutableBuilder[Self <: FocusOutEvent[_, _, _, _], TDelegateTarget, TData, TCurrentTarget, TTarget] (val x: Self with (FocusOutEvent[TDelegateTarget, TData, TCurrentTarget, TTarget])) extends AnyVal {
      
      @scala.inline
      def setType(value: focusout): Self = StObject.set(x, "type", value.asInstanceOf[js.Any])
    }
  }
  
  /**
    * Many of the special event hook functions below are passed a `handleObj` object that provides more information about the event, how it was attached, and its current state. This object and its contents should be treated as read-only data, and only the properties below are documented for use by special event handlers.
    * @see \`{@link https://learn.jquery.com/events/event-extensions/#the-handleobj-object }\`
    */
  @js.native
  trait HandleObject[TTarget, TData] extends StObject {
    
    /**
      * The data, if any, passed to jQuery during event binding, e.g. `{ myData: 42 }`. If the data argument was omitted or `undefined`, this property is `undefined` as well.
      */
    val data: TData = js.native
    
    /**
      * Event handler function passed to jQuery during event binding. If `false` was passed during event binding, the handler refers to a single shared function that simply returns `false`.
      */
    def handler(t: TriggeredEvent[TTarget, TData, _, _], args: js.Any*): js.Any = js.native
    
    /**
      * Namespace(s), if any, provided when the event was attached, such as `"myPlugin"`. When multiple namespaces are given, they are separated by periods and sorted in ascending alphabetical order. If no namespaces are provided, this property is an empty string.
      */
    val namespace: String = js.native
    
    /**
      * The original type name regardless of whether it was mapped via `bindType` or `delegateType`. So when a "pushy" event is mapped to "click" its `origType` would be "pushy".
      */
    val origType: String = js.native
    
    /**
      * For delegated events, this is the selector used to filter descendant elements and determine if the handler should be called. For directly bound events, this property is `null`.
      */
    val selector: js.UndefOr[String | Null] = js.native
    
    /**
      * The type of event, such as `"click"`. When special event mapping is used via `bindType` or `delegateType`, this will be the mapped type.
      */
    val `type`: String = js.native
  }
  object HandleObject {
    
    @scala.inline
    def apply[TTarget, TData](
      data: TData,
      handler: (TriggeredEvent[TTarget, TData, _, _], /* repeated */ js.Any) => js.Any,
      namespace: String,
      origType: String,
      `type`: String
    ): HandleObject[TTarget, TData] = {
      val __obj = js.Dynamic.literal(data = data.asInstanceOf[js.Any], handler = js.Any.fromFunction2(handler), namespace = namespace.asInstanceOf[js.Any], origType = origType.asInstanceOf[js.Any])
      __obj.updateDynamic("type")(`type`.asInstanceOf[js.Any])
      __obj.asInstanceOf[HandleObject[TTarget, TData]]
    }
    
    @scala.inline
    implicit class HandleObjectMutableBuilder[Self <: HandleObject[_, _], TTarget, TData] (val x: Self with (HandleObject[TTarget, TData])) extends AnyVal {
      
      @scala.inline
      def setData(value: TData): Self = StObject.set(x, "data", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setHandler(value: (TriggeredEvent[TTarget, TData, _, _], /* repeated */ js.Any) => js.Any): Self = StObject.set(x, "handler", js.Any.fromFunction2(value))
      
      @scala.inline
      def setNamespace(value: String): Self = StObject.set(x, "namespace", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setOrigType(value: String): Self = StObject.set(x, "origType", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setSelector(value: String): Self = StObject.set(x, "selector", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setSelectorNull: Self = StObject.set(x, "selector", null)
      
      @scala.inline
      def setSelectorUndefined: Self = StObject.set(x, "selector", js.undefined)
      
      @scala.inline
      def setType(value: String): Self = StObject.set(x, "type", value.asInstanceOf[js.Any])
    }
  }
  
  @js.native
  trait KeyDownEvent[TDelegateTarget, TData, TCurrentTarget, TTarget] extends KeyboardEventBase[TDelegateTarget, TData, TCurrentTarget, TTarget] {
    
    @JSName("type")
    var type_KeyDownEvent: keydown = js.native
  }
  object KeyDownEvent {
    
    @scala.inline
    def apply[TDelegateTarget, TData, TCurrentTarget, TTarget](
      altKey: Boolean,
      bubbles: Boolean,
      cancelable: Boolean,
      charCode: Double,
      code: String,
      ctrlKey: Boolean,
      currentTarget: TCurrentTarget,
      data: TData,
      delegateTarget: TDelegateTarget,
      detail: Double,
      eventPhase: Double,
      isDefaultPrevented: () => Boolean,
      isImmediatePropagationStopped: () => Boolean,
      isPropagationStopped: () => Boolean,
      key: String,
      keyCode: Double,
      metaKey: Boolean,
      preventDefault: () => Unit,
      shiftKey: Boolean,
      stopImmediatePropagation: () => Unit,
      stopPropagation: () => Unit,
      target: TTarget,
      timeStamp: Double,
      `type`: keydown,
      view: Window,
      which: Double
    ): KeyDownEvent[TDelegateTarget, TData, TCurrentTarget, TTarget] = {
      val __obj = js.Dynamic.literal(altKey = altKey.asInstanceOf[js.Any], bubbles = bubbles.asInstanceOf[js.Any], cancelable = cancelable.asInstanceOf[js.Any], charCode = charCode.asInstanceOf[js.Any], code = code.asInstanceOf[js.Any], ctrlKey = ctrlKey.asInstanceOf[js.Any], currentTarget = currentTarget.asInstanceOf[js.Any], data = data.asInstanceOf[js.Any], delegateTarget = delegateTarget.asInstanceOf[js.Any], detail = detail.asInstanceOf[js.Any], eventPhase = eventPhase.asInstanceOf[js.Any], isDefaultPrevented = js.Any.fromFunction0(isDefaultPrevented), isImmediatePropagationStopped = js.Any.fromFunction0(isImmediatePropagationStopped), isPropagationStopped = js.Any.fromFunction0(isPropagationStopped), key = key.asInstanceOf[js.Any], keyCode = keyCode.asInstanceOf[js.Any], metaKey = metaKey.asInstanceOf[js.Any], preventDefault = js.Any.fromFunction0(preventDefault), shiftKey = shiftKey.asInstanceOf[js.Any], stopImmediatePropagation = js.Any.fromFunction0(stopImmediatePropagation), stopPropagation = js.Any.fromFunction0(stopPropagation), target = target.asInstanceOf[js.Any], timeStamp = timeStamp.asInstanceOf[js.Any], view = view.asInstanceOf[js.Any], which = which.asInstanceOf[js.Any])
      __obj.updateDynamic("type")(`type`.asInstanceOf[js.Any])
      __obj.asInstanceOf[KeyDownEvent[TDelegateTarget, TData, TCurrentTarget, TTarget]]
    }
    
    @scala.inline
    implicit class KeyDownEventMutableBuilder[Self <: KeyDownEvent[_, _, _, _], TDelegateTarget, TData, TCurrentTarget, TTarget] (val x: Self with (KeyDownEvent[TDelegateTarget, TData, TCurrentTarget, TTarget])) extends AnyVal {
      
      @scala.inline
      def setType(value: keydown): Self = StObject.set(x, "type", value.asInstanceOf[js.Any])
    }
  }
  
  @js.native
  trait KeyPressEvent[TDelegateTarget, TData, TCurrentTarget, TTarget] extends KeyboardEventBase[TDelegateTarget, TData, TCurrentTarget, TTarget] {
    
    @JSName("type")
    var type_KeyPressEvent: keypress = js.native
  }
  object KeyPressEvent {
    
    @scala.inline
    def apply[TDelegateTarget, TData, TCurrentTarget, TTarget](
      altKey: Boolean,
      bubbles: Boolean,
      cancelable: Boolean,
      charCode: Double,
      code: String,
      ctrlKey: Boolean,
      currentTarget: TCurrentTarget,
      data: TData,
      delegateTarget: TDelegateTarget,
      detail: Double,
      eventPhase: Double,
      isDefaultPrevented: () => Boolean,
      isImmediatePropagationStopped: () => Boolean,
      isPropagationStopped: () => Boolean,
      key: String,
      keyCode: Double,
      metaKey: Boolean,
      preventDefault: () => Unit,
      shiftKey: Boolean,
      stopImmediatePropagation: () => Unit,
      stopPropagation: () => Unit,
      target: TTarget,
      timeStamp: Double,
      `type`: keypress,
      view: Window,
      which: Double
    ): KeyPressEvent[TDelegateTarget, TData, TCurrentTarget, TTarget] = {
      val __obj = js.Dynamic.literal(altKey = altKey.asInstanceOf[js.Any], bubbles = bubbles.asInstanceOf[js.Any], cancelable = cancelable.asInstanceOf[js.Any], charCode = charCode.asInstanceOf[js.Any], code = code.asInstanceOf[js.Any], ctrlKey = ctrlKey.asInstanceOf[js.Any], currentTarget = currentTarget.asInstanceOf[js.Any], data = data.asInstanceOf[js.Any], delegateTarget = delegateTarget.asInstanceOf[js.Any], detail = detail.asInstanceOf[js.Any], eventPhase = eventPhase.asInstanceOf[js.Any], isDefaultPrevented = js.Any.fromFunction0(isDefaultPrevented), isImmediatePropagationStopped = js.Any.fromFunction0(isImmediatePropagationStopped), isPropagationStopped = js.Any.fromFunction0(isPropagationStopped), key = key.asInstanceOf[js.Any], keyCode = keyCode.asInstanceOf[js.Any], metaKey = metaKey.asInstanceOf[js.Any], preventDefault = js.Any.fromFunction0(preventDefault), shiftKey = shiftKey.asInstanceOf[js.Any], stopImmediatePropagation = js.Any.fromFunction0(stopImmediatePropagation), stopPropagation = js.Any.fromFunction0(stopPropagation), target = target.asInstanceOf[js.Any], timeStamp = timeStamp.asInstanceOf[js.Any], view = view.asInstanceOf[js.Any], which = which.asInstanceOf[js.Any])
      __obj.updateDynamic("type")(`type`.asInstanceOf[js.Any])
      __obj.asInstanceOf[KeyPressEvent[TDelegateTarget, TData, TCurrentTarget, TTarget]]
    }
    
    @scala.inline
    implicit class KeyPressEventMutableBuilder[Self <: KeyPressEvent[_, _, _, _], TDelegateTarget, TData, TCurrentTarget, TTarget] (val x: Self with (KeyPressEvent[TDelegateTarget, TData, TCurrentTarget, TTarget])) extends AnyVal {
      
      @scala.inline
      def setType(value: keypress): Self = StObject.set(x, "type", value.asInstanceOf[js.Any])
    }
  }
  
  @js.native
  trait KeyUpEvent[TDelegateTarget, TData, TCurrentTarget, TTarget] extends KeyboardEventBase[TDelegateTarget, TData, TCurrentTarget, TTarget] {
    
    @JSName("type")
    var type_KeyUpEvent: keyup = js.native
  }
  object KeyUpEvent {
    
    @scala.inline
    def apply[TDelegateTarget, TData, TCurrentTarget, TTarget](
      altKey: Boolean,
      bubbles: Boolean,
      cancelable: Boolean,
      charCode: Double,
      code: String,
      ctrlKey: Boolean,
      currentTarget: TCurrentTarget,
      data: TData,
      delegateTarget: TDelegateTarget,
      detail: Double,
      eventPhase: Double,
      isDefaultPrevented: () => Boolean,
      isImmediatePropagationStopped: () => Boolean,
      isPropagationStopped: () => Boolean,
      key: String,
      keyCode: Double,
      metaKey: Boolean,
      preventDefault: () => Unit,
      shiftKey: Boolean,
      stopImmediatePropagation: () => Unit,
      stopPropagation: () => Unit,
      target: TTarget,
      timeStamp: Double,
      `type`: keyup,
      view: Window,
      which: Double
    ): KeyUpEvent[TDelegateTarget, TData, TCurrentTarget, TTarget] = {
      val __obj = js.Dynamic.literal(altKey = altKey.asInstanceOf[js.Any], bubbles = bubbles.asInstanceOf[js.Any], cancelable = cancelable.asInstanceOf[js.Any], charCode = charCode.asInstanceOf[js.Any], code = code.asInstanceOf[js.Any], ctrlKey = ctrlKey.asInstanceOf[js.Any], currentTarget = currentTarget.asInstanceOf[js.Any], data = data.asInstanceOf[js.Any], delegateTarget = delegateTarget.asInstanceOf[js.Any], detail = detail.asInstanceOf[js.Any], eventPhase = eventPhase.asInstanceOf[js.Any], isDefaultPrevented = js.Any.fromFunction0(isDefaultPrevented), isImmediatePropagationStopped = js.Any.fromFunction0(isImmediatePropagationStopped), isPropagationStopped = js.Any.fromFunction0(isPropagationStopped), key = key.asInstanceOf[js.Any], keyCode = keyCode.asInstanceOf[js.Any], metaKey = metaKey.asInstanceOf[js.Any], preventDefault = js.Any.fromFunction0(preventDefault), shiftKey = shiftKey.asInstanceOf[js.Any], stopImmediatePropagation = js.Any.fromFunction0(stopImmediatePropagation), stopPropagation = js.Any.fromFunction0(stopPropagation), target = target.asInstanceOf[js.Any], timeStamp = timeStamp.asInstanceOf[js.Any], view = view.asInstanceOf[js.Any], which = which.asInstanceOf[js.Any])
      __obj.updateDynamic("type")(`type`.asInstanceOf[js.Any])
      __obj.asInstanceOf[KeyUpEvent[TDelegateTarget, TData, TCurrentTarget, TTarget]]
    }
    
    @scala.inline
    implicit class KeyUpEventMutableBuilder[Self <: KeyUpEvent[_, _, _, _], TDelegateTarget, TData, TCurrentTarget, TTarget] (val x: Self with (KeyUpEvent[TDelegateTarget, TData, TCurrentTarget, TTarget])) extends AnyVal {
      
      @scala.inline
      def setType(value: keyup): Self = StObject.set(x, "type", value.asInstanceOf[js.Any])
    }
  }
  
  // #endregion
  // #endregion
  // region KeyboardEvent
  // #region KeyboardEvent
  @js.native
  trait KeyboardEventBase[TDelegateTarget, TData, TCurrentTarget, TTarget] extends UIEventBase[TDelegateTarget, TData, TCurrentTarget, TTarget] {
    
    // MouseEvent, KeyboardEvent, TouchEvent
    @JSName("altKey")
    var altKey_KeyboardEventBase: Boolean = js.native
    
    // MouseEvent
    @JSName("button")
    var button_KeyboardEventBase: js.UndefOr[scala.Nothing] = js.native
    
    @JSName("buttons")
    var buttons_KeyboardEventBase: js.UndefOr[scala.Nothing] = js.native
    
    // TouchEvent
    @JSName("changedTouches")
    var changedTouches_KeyboardEventBase: js.UndefOr[scala.Nothing] = js.native
    
    /** @deprecated */
    @JSName("charCode")
    var charCode_KeyboardEventBase: Double = js.native
    
    @JSName("clientX")
    var clientX_KeyboardEventBase: js.UndefOr[scala.Nothing] = js.native
    
    @JSName("clientY")
    var clientY_KeyboardEventBase: js.UndefOr[scala.Nothing] = js.native
    
    var code: String = js.native
    
    @JSName("ctrlKey")
    var ctrlKey_KeyboardEventBase: Boolean = js.native
    
    /** @deprecated */
    @JSName("keyCode")
    var keyCode_KeyboardEventBase: Double = js.native
    
    @JSName("key")
    var key_KeyboardEventBase: String = js.native
    
    /**
      * Indicates whether the META key was pressed when the event fired.
      * @see \`{@link https://api.jquery.com/event.metaKey/ }\`
      * @since 1.0.4
      * @example ​ ````Determine whether the META key was pressed when the event fired.
    ```html
    <!doctype html>
    <html lang="en">
    <head>
      <meta charset="utf-8">
      <title>event.metaKey demo</title>
      <style>
      body {
      background-color: #eef;
      }
      div {
      padding: 20px;
      }
      </style>
      <script src="https://code.jquery.com/jquery-3.3.1.js"></script>
    </head>
    <body>
    ​
    <button value="Test" name="Test" id="checkMetaKey">Click me!</button>
    <div id="display"></div>
    ​
    <script>
    $( "#checkMetaKey" ).click(function( event ) {
      $( "#display" ).text( event.metaKey );
    });
    </script>
    ​
    </body>
    </html>
    ```
      */
    @JSName("metaKey")
    var metaKey_KeyboardEventBase: Boolean = js.native
    
    @JSName("offsetX")
    var offsetX_KeyboardEventBase: js.UndefOr[scala.Nothing] = js.native
    
    @JSName("offsetY")
    var offsetY_KeyboardEventBase: js.UndefOr[scala.Nothing] = js.native
    
    @JSName("originalEvent")
    var originalEvent_KeyboardEventBase: js.UndefOr[org.scalajs.dom.raw.KeyboardEvent] = js.native
    
    /**
      * The mouse position relative to the left edge of the document.
      * @see \`{@link https://api.jquery.com/event.pageX/ }\`
      * @since 1.0.4
      * @example ​ ````Show the mouse position relative to the left and top edges of the document (within this iframe).
    ```html
    <!doctype html>
    <html lang="en">
    <head>
      <meta charset="utf-8">
      <title>event.pageX demo</title>
      <style>
      body {
      background-color: #eef;
      }
      div {
      padding: 20px;
      }
      </style>
      <script src="https://code.jquery.com/jquery-3.3.1.js"></script>
    </head>
    <body>
    ​
    <div id="log"></div>
    ​
    <script>
    $( document ).on( "mousemove", function( event ) {
      $( "#log" ).text( "pageX: " + event.pageX + ", pageY: " + event.pageY );
    });
    </script>
    ​
    </body>
    </html>
    ```
      */
    @JSName("pageX")
    var pageX_KeyboardEventBase: js.UndefOr[scala.Nothing] = js.native
    
    /**
      * The mouse position relative to the top edge of the document.
      * @see \`{@link https://api.jquery.com/event.pageY/ }\`
      * @since 1.0.4
      * @example ​ ````Show the mouse position relative to the left and top edges of the document (within this iframe).
    ```html
    <!doctype html>
    <html lang="en">
    <head>
      <meta charset="utf-8">
      <title>event.pageY demo</title>
      <style>
      body {
      background-color: #eef;
      }
      div {
      padding: 20px;
      }
      </style>
      <script src="https://code.jquery.com/jquery-3.3.1.js"></script>
    </head>
    <body>
    ​
    <div id="log"></div>
    ​
    <script>
    $( document ).on( "mousemove", function( event ) {
      $( "#log" ).text( "pageX: " + event.pageX + ", pageY: " + event.pageY );
    });
    </script>
    ​
    </body>
    </html>
    ```
      */
    @JSName("pageY")
    var pageY_KeyboardEventBase: js.UndefOr[scala.Nothing] = js.native
    
    // PointerEvent
    @JSName("pointerId")
    var pointerId_KeyboardEventBase: js.UndefOr[scala.Nothing] = js.native
    
    @JSName("pointerType")
    var pointerType_KeyboardEventBase: js.UndefOr[scala.Nothing] = js.native
    
    /**
      * The other DOM element involved in the event, if any.
      * @see \`{@link https://api.jquery.com/event.relatedTarget/ }\`
      * @since 1.1.4
      * @example ​ ````On mouseout of anchors, alert the element type being entered.
    ```javascript
    $( "a" ).mouseout(function( event ) {
      alert( event.relatedTarget.nodeName ); // "DIV"
    });
    ```
      */
    var relatedTarget: js.UndefOr[scala.Nothing] = js.native
    
    @JSName("screenX")
    var screenX_KeyboardEventBase: js.UndefOr[scala.Nothing] = js.native
    
    @JSName("screenY")
    var screenY_KeyboardEventBase: js.UndefOr[scala.Nothing] = js.native
    
    @JSName("shiftKey")
    var shiftKey_KeyboardEventBase: Boolean = js.native
    
    @JSName("targetTouches")
    var targetTouches_KeyboardEventBase: js.UndefOr[scala.Nothing] = js.native
    
    /** @deprecated */
    @JSName("toElement")
    var toElement_KeyboardEventBase: js.UndefOr[scala.Nothing] = js.native
    
    @JSName("touches")
    var touches_KeyboardEventBase: js.UndefOr[scala.Nothing] = js.native
    
    // MouseEvent, KeyboardEvent
    /**
      * For key or mouse events, this property indicates the specific key or button that was pressed.
      * @see \`{@link https://api.jquery.com/event.which/ }\`
      * @since 1.1.3
      * @deprecated ​ Deprecated since 3.3. See \`{@link https://github.com/jquery/api.jquery.com/issues/821 }\`.
      * @example ​ ````Log which key was depressed.
    ```html
    <!doctype html>
    <html lang="en">
    <head>
      <meta charset="utf-8">
      <title>event.which demo</title>
      <script src="https://code.jquery.com/jquery-3.3.1.js"></script>
    </head>
    <body>
    ​
    <input id="whichkey" value="type something">
    <div id="log"></div>
    ​
    <script>
    $( "#whichkey" ).on( "keydown", function( event ) {
      $( "#log" ).html( event.type + ": " +  event.which );
    });
    </script>
    ​
    </body>
    </html>
    ```
      * @example ​ ````Log which mouse button was depressed.
    ```html
    <!doctype html>
    <html lang="en">
    <head>
      <meta charset="utf-8">
      <title>event.which demo</title>
      <script src="https://code.jquery.com/jquery-3.3.1.js"></script>
    </head>
    <body>
    ​
    <input id="whichkey" value="click here">
    <div id="log"></div>
    ​
    <script>
    $( "#whichkey" ).on( "mousedown", function( event ) {
      $( "#log" ).html( event.type + ": " +  event.which );
    });
    </script>
    ​
    </body>
    </html>
    ```
      */
    @JSName("which")
    var which_KeyboardEventBase: Double = js.native
  }
  object KeyboardEventBase {
    
    @scala.inline
    def apply[TDelegateTarget, TData, TCurrentTarget, TTarget](
      altKey: Boolean,
      bubbles: Boolean,
      cancelable: Boolean,
      charCode: Double,
      code: String,
      ctrlKey: Boolean,
      currentTarget: TCurrentTarget,
      data: TData,
      delegateTarget: TDelegateTarget,
      detail: Double,
      eventPhase: Double,
      isDefaultPrevented: () => Boolean,
      isImmediatePropagationStopped: () => Boolean,
      isPropagationStopped: () => Boolean,
      key: String,
      keyCode: Double,
      metaKey: Boolean,
      preventDefault: () => Unit,
      shiftKey: Boolean,
      stopImmediatePropagation: () => Unit,
      stopPropagation: () => Unit,
      target: TTarget,
      timeStamp: Double,
      `type`: String,
      view: Window,
      which: Double
    ): KeyboardEventBase[TDelegateTarget, TData, TCurrentTarget, TTarget] = {
      val __obj = js.Dynamic.literal(altKey = altKey.asInstanceOf[js.Any], bubbles = bubbles.asInstanceOf[js.Any], cancelable = cancelable.asInstanceOf[js.Any], charCode = charCode.asInstanceOf[js.Any], code = code.asInstanceOf[js.Any], ctrlKey = ctrlKey.asInstanceOf[js.Any], currentTarget = currentTarget.asInstanceOf[js.Any], data = data.asInstanceOf[js.Any], delegateTarget = delegateTarget.asInstanceOf[js.Any], detail = detail.asInstanceOf[js.Any], eventPhase = eventPhase.asInstanceOf[js.Any], isDefaultPrevented = js.Any.fromFunction0(isDefaultPrevented), isImmediatePropagationStopped = js.Any.fromFunction0(isImmediatePropagationStopped), isPropagationStopped = js.Any.fromFunction0(isPropagationStopped), key = key.asInstanceOf[js.Any], keyCode = keyCode.asInstanceOf[js.Any], metaKey = metaKey.asInstanceOf[js.Any], preventDefault = js.Any.fromFunction0(preventDefault), shiftKey = shiftKey.asInstanceOf[js.Any], stopImmediatePropagation = js.Any.fromFunction0(stopImmediatePropagation), stopPropagation = js.Any.fromFunction0(stopPropagation), target = target.asInstanceOf[js.Any], timeStamp = timeStamp.asInstanceOf[js.Any], view = view.asInstanceOf[js.Any], which = which.asInstanceOf[js.Any])
      __obj.updateDynamic("type")(`type`.asInstanceOf[js.Any])
      __obj.asInstanceOf[KeyboardEventBase[TDelegateTarget, TData, TCurrentTarget, TTarget]]
    }
    
    @scala.inline
    implicit class KeyboardEventBaseMutableBuilder[Self <: KeyboardEventBase[_, _, _, _], TDelegateTarget, TData, TCurrentTarget, TTarget] (val x: Self with (KeyboardEventBase[TDelegateTarget, TData, TCurrentTarget, TTarget])) extends AnyVal {
      
      @scala.inline
      def setAltKey(value: Boolean): Self = StObject.set(x, "altKey", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setCharCode(value: Double): Self = StObject.set(x, "charCode", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setCode(value: String): Self = StObject.set(x, "code", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setCtrlKey(value: Boolean): Self = StObject.set(x, "ctrlKey", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setKey(value: String): Self = StObject.set(x, "key", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setKeyCode(value: Double): Self = StObject.set(x, "keyCode", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setMetaKey(value: Boolean): Self = StObject.set(x, "metaKey", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setOriginalEvent(value: org.scalajs.dom.raw.KeyboardEvent): Self = StObject.set(x, "originalEvent", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setOriginalEventUndefined: Self = StObject.set(x, "originalEvent", js.undefined)
      
      @scala.inline
      def setShiftKey(value: Boolean): Self = StObject.set(x, "shiftKey", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setWhich(value: Double): Self = StObject.set(x, "which", value.asInstanceOf[js.Any])
    }
  }
  
  @js.native
  trait MouseDownEvent[TDelegateTarget, TData, TCurrentTarget, TTarget] extends MouseEventBase[TDelegateTarget, TData, TCurrentTarget, TTarget] {
    
    /**
      * The other DOM element involved in the event, if any.
      * @see \`{@link https://api.jquery.com/event.relatedTarget/ }\`
      * @since 1.1.4
      * @example ​ ````On mouseout of anchors, alert the element type being entered.
      ```javascript
      $( "a" ).mouseout(function( event ) {
      alert( event.relatedTarget.nodeName ); // "DIV"
      });
      ```
      */
    @JSName("relatedTarget")
    var relatedTarget_MouseDownEvent: js.UndefOr[Null] = js.native
    
    @JSName("type")
    var type_MouseDownEvent: mousedown = js.native
  }
  object MouseDownEvent {
    
    @scala.inline
    def apply[TDelegateTarget, TData, TCurrentTarget, TTarget](
      altKey: Boolean,
      bubbles: Boolean,
      button: Double,
      buttons: Double,
      cancelable: Boolean,
      clientX: Double,
      clientY: Double,
      ctrlKey: Boolean,
      currentTarget: TCurrentTarget,
      data: TData,
      delegateTarget: TDelegateTarget,
      detail: Double,
      eventPhase: Double,
      isDefaultPrevented: () => Boolean,
      isImmediatePropagationStopped: () => Boolean,
      isPropagationStopped: () => Boolean,
      metaKey: Boolean,
      offsetX: Double,
      offsetY: Double,
      pageX: Double,
      pageY: Double,
      preventDefault: () => Unit,
      screenX: Double,
      screenY: Double,
      shiftKey: Boolean,
      stopImmediatePropagation: () => Unit,
      stopPropagation: () => Unit,
      target: TTarget,
      timeStamp: Double,
      toElement: Element,
      `type`: mousedown,
      view: Window,
      which: Double
    ): MouseDownEvent[TDelegateTarget, TData, TCurrentTarget, TTarget] = {
      val __obj = js.Dynamic.literal(altKey = altKey.asInstanceOf[js.Any], bubbles = bubbles.asInstanceOf[js.Any], button = button.asInstanceOf[js.Any], buttons = buttons.asInstanceOf[js.Any], cancelable = cancelable.asInstanceOf[js.Any], clientX = clientX.asInstanceOf[js.Any], clientY = clientY.asInstanceOf[js.Any], ctrlKey = ctrlKey.asInstanceOf[js.Any], currentTarget = currentTarget.asInstanceOf[js.Any], data = data.asInstanceOf[js.Any], delegateTarget = delegateTarget.asInstanceOf[js.Any], detail = detail.asInstanceOf[js.Any], eventPhase = eventPhase.asInstanceOf[js.Any], isDefaultPrevented = js.Any.fromFunction0(isDefaultPrevented), isImmediatePropagationStopped = js.Any.fromFunction0(isImmediatePropagationStopped), isPropagationStopped = js.Any.fromFunction0(isPropagationStopped), metaKey = metaKey.asInstanceOf[js.Any], offsetX = offsetX.asInstanceOf[js.Any], offsetY = offsetY.asInstanceOf[js.Any], pageX = pageX.asInstanceOf[js.Any], pageY = pageY.asInstanceOf[js.Any], preventDefault = js.Any.fromFunction0(preventDefault), screenX = screenX.asInstanceOf[js.Any], screenY = screenY.asInstanceOf[js.Any], shiftKey = shiftKey.asInstanceOf[js.Any], stopImmediatePropagation = js.Any.fromFunction0(stopImmediatePropagation), stopPropagation = js.Any.fromFunction0(stopPropagation), target = target.asInstanceOf[js.Any], timeStamp = timeStamp.asInstanceOf[js.Any], toElement = toElement.asInstanceOf[js.Any], view = view.asInstanceOf[js.Any], which = which.asInstanceOf[js.Any])
      __obj.updateDynamic("type")(`type`.asInstanceOf[js.Any])
      __obj.asInstanceOf[MouseDownEvent[TDelegateTarget, TData, TCurrentTarget, TTarget]]
    }
    
    @scala.inline
    implicit class MouseDownEventMutableBuilder[Self <: MouseDownEvent[_, _, _, _], TDelegateTarget, TData, TCurrentTarget, TTarget] (val x: Self with (MouseDownEvent[TDelegateTarget, TData, TCurrentTarget, TTarget])) extends AnyVal {
      
      @scala.inline
      def setType(value: mousedown): Self = StObject.set(x, "type", value.asInstanceOf[js.Any])
    }
  }
  
  @js.native
  trait MouseEnterEvent[TDelegateTarget, TData, TCurrentTarget, TTarget] extends MouseEventBase[TDelegateTarget, TData, TCurrentTarget, TTarget] {
    
    // Special handling by jQuery.
    @JSName("type")
    var type_MouseEnterEvent: mouseover = js.native
  }
  object MouseEnterEvent {
    
    @scala.inline
    def apply[TDelegateTarget, TData, TCurrentTarget, TTarget](
      altKey: Boolean,
      bubbles: Boolean,
      button: Double,
      buttons: Double,
      cancelable: Boolean,
      clientX: Double,
      clientY: Double,
      ctrlKey: Boolean,
      currentTarget: TCurrentTarget,
      data: TData,
      delegateTarget: TDelegateTarget,
      detail: Double,
      eventPhase: Double,
      isDefaultPrevented: () => Boolean,
      isImmediatePropagationStopped: () => Boolean,
      isPropagationStopped: () => Boolean,
      metaKey: Boolean,
      offsetX: Double,
      offsetY: Double,
      pageX: Double,
      pageY: Double,
      preventDefault: () => Unit,
      screenX: Double,
      screenY: Double,
      shiftKey: Boolean,
      stopImmediatePropagation: () => Unit,
      stopPropagation: () => Unit,
      target: TTarget,
      timeStamp: Double,
      toElement: Element,
      `type`: mouseover,
      view: Window,
      which: Double
    ): MouseEnterEvent[TDelegateTarget, TData, TCurrentTarget, TTarget] = {
      val __obj = js.Dynamic.literal(altKey = altKey.asInstanceOf[js.Any], bubbles = bubbles.asInstanceOf[js.Any], button = button.asInstanceOf[js.Any], buttons = buttons.asInstanceOf[js.Any], cancelable = cancelable.asInstanceOf[js.Any], clientX = clientX.asInstanceOf[js.Any], clientY = clientY.asInstanceOf[js.Any], ctrlKey = ctrlKey.asInstanceOf[js.Any], currentTarget = currentTarget.asInstanceOf[js.Any], data = data.asInstanceOf[js.Any], delegateTarget = delegateTarget.asInstanceOf[js.Any], detail = detail.asInstanceOf[js.Any], eventPhase = eventPhase.asInstanceOf[js.Any], isDefaultPrevented = js.Any.fromFunction0(isDefaultPrevented), isImmediatePropagationStopped = js.Any.fromFunction0(isImmediatePropagationStopped), isPropagationStopped = js.Any.fromFunction0(isPropagationStopped), metaKey = metaKey.asInstanceOf[js.Any], offsetX = offsetX.asInstanceOf[js.Any], offsetY = offsetY.asInstanceOf[js.Any], pageX = pageX.asInstanceOf[js.Any], pageY = pageY.asInstanceOf[js.Any], preventDefault = js.Any.fromFunction0(preventDefault), screenX = screenX.asInstanceOf[js.Any], screenY = screenY.asInstanceOf[js.Any], shiftKey = shiftKey.asInstanceOf[js.Any], stopImmediatePropagation = js.Any.fromFunction0(stopImmediatePropagation), stopPropagation = js.Any.fromFunction0(stopPropagation), target = target.asInstanceOf[js.Any], timeStamp = timeStamp.asInstanceOf[js.Any], toElement = toElement.asInstanceOf[js.Any], view = view.asInstanceOf[js.Any], which = which.asInstanceOf[js.Any])
      __obj.updateDynamic("type")(`type`.asInstanceOf[js.Any])
      __obj.asInstanceOf[MouseEnterEvent[TDelegateTarget, TData, TCurrentTarget, TTarget]]
    }
    
    @scala.inline
    implicit class MouseEnterEventMutableBuilder[Self <: MouseEnterEvent[_, _, _, _], TDelegateTarget, TData, TCurrentTarget, TTarget] (val x: Self with (MouseEnterEvent[TDelegateTarget, TData, TCurrentTarget, TTarget])) extends AnyVal {
      
      @scala.inline
      def setType(value: mouseover): Self = StObject.set(x, "type", value.asInstanceOf[js.Any])
    }
  }
  
  // region MouseEvent
  // #region MouseEvent
  @js.native
  trait MouseEventBase[TDelegateTarget, TData, TCurrentTarget, TTarget] extends UIEventBase[TDelegateTarget, TData, TCurrentTarget, TTarget] {
    
    // MouseEvent, KeyboardEvent, TouchEvent
    @JSName("altKey")
    var altKey_MouseEventBase: Boolean = js.native
    
    // MouseEvent
    @JSName("button")
    var button_MouseEventBase: Double = js.native
    
    @JSName("buttons")
    var buttons_MouseEventBase: Double = js.native
    
    // TouchEvent
    @JSName("changedTouches")
    var changedTouches_MouseEventBase: js.UndefOr[scala.Nothing] = js.native
    
    /** @deprecated */
    @JSName("charCode")
    var charCode_MouseEventBase: js.UndefOr[scala.Nothing] = js.native
    
    // KeyboardEvent
    /** @deprecated */
    @JSName("char")
    var char_MouseEventBase: js.UndefOr[scala.Nothing] = js.native
    
    @JSName("clientX")
    var clientX_MouseEventBase: Double = js.native
    
    @JSName("clientY")
    var clientY_MouseEventBase: Double = js.native
    
    @JSName("ctrlKey")
    var ctrlKey_MouseEventBase: Boolean = js.native
    
    /** @deprecated */
    @JSName("keyCode")
    var keyCode_MouseEventBase: js.UndefOr[scala.Nothing] = js.native
    
    @JSName("key")
    var key_MouseEventBase: js.UndefOr[scala.Nothing] = js.native
    
    /**
      * Indicates whether the META key was pressed when the event fired.
      * @see \`{@link https://api.jquery.com/event.metaKey/ }\`
      * @since 1.0.4
      * @example ​ ````Determine whether the META key was pressed when the event fired.
    ```html
    <!doctype html>
    <html lang="en">
    <head>
      <meta charset="utf-8">
      <title>event.metaKey demo</title>
      <style>
      body {
      background-color: #eef;
      }
      div {
      padding: 20px;
      }
      </style>
      <script src="https://code.jquery.com/jquery-3.3.1.js"></script>
    </head>
    <body>
    ​
    <button value="Test" name="Test" id="checkMetaKey">Click me!</button>
    <div id="display"></div>
    ​
    <script>
    $( "#checkMetaKey" ).click(function( event ) {
      $( "#display" ).text( event.metaKey );
    });
    </script>
    ​
    </body>
    </html>
    ```
      */
    @JSName("metaKey")
    var metaKey_MouseEventBase: Boolean = js.native
    
    @JSName("offsetX")
    var offsetX_MouseEventBase: Double = js.native
    
    @JSName("offsetY")
    var offsetY_MouseEventBase: Double = js.native
    
    @JSName("originalEvent")
    var originalEvent_MouseEventBase: js.UndefOr[org.scalajs.dom.raw.MouseEvent] = js.native
    
    /**
      * The mouse position relative to the left edge of the document.
      * @see \`{@link https://api.jquery.com/event.pageX/ }\`
      * @since 1.0.4
      * @example ​ ````Show the mouse position relative to the left and top edges of the document (within this iframe).
    ```html
    <!doctype html>
    <html lang="en">
    <head>
      <meta charset="utf-8">
      <title>event.pageX demo</title>
      <style>
      body {
      background-color: #eef;
      }
      div {
      padding: 20px;
      }
      </style>
      <script src="https://code.jquery.com/jquery-3.3.1.js"></script>
    </head>
    <body>
    ​
    <div id="log"></div>
    ​
    <script>
    $( document ).on( "mousemove", function( event ) {
      $( "#log" ).text( "pageX: " + event.pageX + ", pageY: " + event.pageY );
    });
    </script>
    ​
    </body>
    </html>
    ```
      */
    @JSName("pageX")
    var pageX_MouseEventBase: Double = js.native
    
    /**
      * The mouse position relative to the top edge of the document.
      * @see \`{@link https://api.jquery.com/event.pageY/ }\`
      * @since 1.0.4
      * @example ​ ````Show the mouse position relative to the left and top edges of the document (within this iframe).
    ```html
    <!doctype html>
    <html lang="en">
    <head>
      <meta charset="utf-8">
      <title>event.pageY demo</title>
      <style>
      body {
      background-color: #eef;
      }
      div {
      padding: 20px;
      }
      </style>
      <script src="https://code.jquery.com/jquery-3.3.1.js"></script>
    </head>
    <body>
    ​
    <div id="log"></div>
    ​
    <script>
    $( document ).on( "mousemove", function( event ) {
      $( "#log" ).text( "pageX: " + event.pageX + ", pageY: " + event.pageY );
    });
    </script>
    ​
    </body>
    </html>
    ```
      */
    @JSName("pageY")
    var pageY_MouseEventBase: Double = js.native
    
    // PointerEvent
    @JSName("pointerId")
    var pointerId_MouseEventBase: js.UndefOr[scala.Nothing] = js.native
    
    @JSName("pointerType")
    var pointerType_MouseEventBase: js.UndefOr[scala.Nothing] = js.native
    
    /**
      * The other DOM element involved in the event, if any.
      * @see \`{@link https://api.jquery.com/event.relatedTarget/ }\`
      * @since 1.1.4
      * @example ​ ````On mouseout of anchors, alert the element type being entered.
    ```javascript
    $( "a" ).mouseout(function( event ) {
      alert( event.relatedTarget.nodeName ); // "DIV"
    });
    ```
      */
    var relatedTarget: js.UndefOr[EventTarget | Null] = js.native
    
    @JSName("screenX")
    var screenX_MouseEventBase: Double = js.native
    
    @JSName("screenY")
    var screenY_MouseEventBase: Double = js.native
    
    @JSName("shiftKey")
    var shiftKey_MouseEventBase: Boolean = js.native
    
    @JSName("targetTouches")
    var targetTouches_MouseEventBase: js.UndefOr[scala.Nothing] = js.native
    
    /** @deprecated */
    @JSName("toElement")
    var toElement_MouseEventBase: Element = js.native
    
    @JSName("touches")
    var touches_MouseEventBase: js.UndefOr[scala.Nothing] = js.native
    
    // MouseEvent, KeyboardEvent
    /**
      * For key or mouse events, this property indicates the specific key or button that was pressed.
      * @see \`{@link https://api.jquery.com/event.which/ }\`
      * @since 1.1.3
      * @deprecated ​ Deprecated since 3.3. See \`{@link https://github.com/jquery/api.jquery.com/issues/821 }\`.
      * @example ​ ````Log which key was depressed.
    ```html
    <!doctype html>
    <html lang="en">
    <head>
      <meta charset="utf-8">
      <title>event.which demo</title>
      <script src="https://code.jquery.com/jquery-3.3.1.js"></script>
    </head>
    <body>
    ​
    <input id="whichkey" value="type something">
    <div id="log"></div>
    ​
    <script>
    $( "#whichkey" ).on( "keydown", function( event ) {
      $( "#log" ).html( event.type + ": " +  event.which );
    });
    </script>
    ​
    </body>
    </html>
    ```
      * @example ​ ````Log which mouse button was depressed.
    ```html
    <!doctype html>
    <html lang="en">
    <head>
      <meta charset="utf-8">
      <title>event.which demo</title>
      <script src="https://code.jquery.com/jquery-3.3.1.js"></script>
    </head>
    <body>
    ​
    <input id="whichkey" value="click here">
    <div id="log"></div>
    ​
    <script>
    $( "#whichkey" ).on( "mousedown", function( event ) {
      $( "#log" ).html( event.type + ": " +  event.which );
    });
    </script>
    ​
    </body>
    </html>
    ```
      */
    @JSName("which")
    var which_MouseEventBase: Double = js.native
  }
  object MouseEventBase {
    
    @scala.inline
    def apply[TDelegateTarget, TData, TCurrentTarget, TTarget](
      altKey: Boolean,
      bubbles: Boolean,
      button: Double,
      buttons: Double,
      cancelable: Boolean,
      clientX: Double,
      clientY: Double,
      ctrlKey: Boolean,
      currentTarget: TCurrentTarget,
      data: TData,
      delegateTarget: TDelegateTarget,
      detail: Double,
      eventPhase: Double,
      isDefaultPrevented: () => Boolean,
      isImmediatePropagationStopped: () => Boolean,
      isPropagationStopped: () => Boolean,
      metaKey: Boolean,
      offsetX: Double,
      offsetY: Double,
      pageX: Double,
      pageY: Double,
      preventDefault: () => Unit,
      screenX: Double,
      screenY: Double,
      shiftKey: Boolean,
      stopImmediatePropagation: () => Unit,
      stopPropagation: () => Unit,
      target: TTarget,
      timeStamp: Double,
      toElement: Element,
      `type`: String,
      view: Window,
      which: Double
    ): MouseEventBase[TDelegateTarget, TData, TCurrentTarget, TTarget] = {
      val __obj = js.Dynamic.literal(altKey = altKey.asInstanceOf[js.Any], bubbles = bubbles.asInstanceOf[js.Any], button = button.asInstanceOf[js.Any], buttons = buttons.asInstanceOf[js.Any], cancelable = cancelable.asInstanceOf[js.Any], clientX = clientX.asInstanceOf[js.Any], clientY = clientY.asInstanceOf[js.Any], ctrlKey = ctrlKey.asInstanceOf[js.Any], currentTarget = currentTarget.asInstanceOf[js.Any], data = data.asInstanceOf[js.Any], delegateTarget = delegateTarget.asInstanceOf[js.Any], detail = detail.asInstanceOf[js.Any], eventPhase = eventPhase.asInstanceOf[js.Any], isDefaultPrevented = js.Any.fromFunction0(isDefaultPrevented), isImmediatePropagationStopped = js.Any.fromFunction0(isImmediatePropagationStopped), isPropagationStopped = js.Any.fromFunction0(isPropagationStopped), metaKey = metaKey.asInstanceOf[js.Any], offsetX = offsetX.asInstanceOf[js.Any], offsetY = offsetY.asInstanceOf[js.Any], pageX = pageX.asInstanceOf[js.Any], pageY = pageY.asInstanceOf[js.Any], preventDefault = js.Any.fromFunction0(preventDefault), screenX = screenX.asInstanceOf[js.Any], screenY = screenY.asInstanceOf[js.Any], shiftKey = shiftKey.asInstanceOf[js.Any], stopImmediatePropagation = js.Any.fromFunction0(stopImmediatePropagation), stopPropagation = js.Any.fromFunction0(stopPropagation), target = target.asInstanceOf[js.Any], timeStamp = timeStamp.asInstanceOf[js.Any], toElement = toElement.asInstanceOf[js.Any], view = view.asInstanceOf[js.Any], which = which.asInstanceOf[js.Any])
      __obj.updateDynamic("type")(`type`.asInstanceOf[js.Any])
      __obj.asInstanceOf[MouseEventBase[TDelegateTarget, TData, TCurrentTarget, TTarget]]
    }
    
    @scala.inline
    implicit class MouseEventBaseMutableBuilder[Self <: MouseEventBase[_, _, _, _], TDelegateTarget, TData, TCurrentTarget, TTarget] (val x: Self with (MouseEventBase[TDelegateTarget, TData, TCurrentTarget, TTarget])) extends AnyVal {
      
      @scala.inline
      def setAltKey(value: Boolean): Self = StObject.set(x, "altKey", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setButton(value: Double): Self = StObject.set(x, "button", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setButtons(value: Double): Self = StObject.set(x, "buttons", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setClientX(value: Double): Self = StObject.set(x, "clientX", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setClientY(value: Double): Self = StObject.set(x, "clientY", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setCtrlKey(value: Boolean): Self = StObject.set(x, "ctrlKey", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setMetaKey(value: Boolean): Self = StObject.set(x, "metaKey", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setOffsetX(value: Double): Self = StObject.set(x, "offsetX", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setOffsetY(value: Double): Self = StObject.set(x, "offsetY", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setOriginalEvent(value: org.scalajs.dom.raw.MouseEvent): Self = StObject.set(x, "originalEvent", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setOriginalEventUndefined: Self = StObject.set(x, "originalEvent", js.undefined)
      
      @scala.inline
      def setPageX(value: Double): Self = StObject.set(x, "pageX", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setPageY(value: Double): Self = StObject.set(x, "pageY", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setRelatedTarget(value: EventTarget): Self = StObject.set(x, "relatedTarget", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setRelatedTargetNull: Self = StObject.set(x, "relatedTarget", null)
      
      @scala.inline
      def setRelatedTargetUndefined: Self = StObject.set(x, "relatedTarget", js.undefined)
      
      @scala.inline
      def setScreenX(value: Double): Self = StObject.set(x, "screenX", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setScreenY(value: Double): Self = StObject.set(x, "screenY", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setShiftKey(value: Boolean): Self = StObject.set(x, "shiftKey", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setToElement(value: Element): Self = StObject.set(x, "toElement", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setWhich(value: Double): Self = StObject.set(x, "which", value.asInstanceOf[js.Any])
    }
  }
  
  @js.native
  trait MouseLeaveEvent[TDelegateTarget, TData, TCurrentTarget, TTarget] extends MouseEventBase[TDelegateTarget, TData, TCurrentTarget, TTarget] {
    
    // Special handling by jQuery.
    @JSName("type")
    var type_MouseLeaveEvent: mouseout = js.native
  }
  object MouseLeaveEvent {
    
    @scala.inline
    def apply[TDelegateTarget, TData, TCurrentTarget, TTarget](
      altKey: Boolean,
      bubbles: Boolean,
      button: Double,
      buttons: Double,
      cancelable: Boolean,
      clientX: Double,
      clientY: Double,
      ctrlKey: Boolean,
      currentTarget: TCurrentTarget,
      data: TData,
      delegateTarget: TDelegateTarget,
      detail: Double,
      eventPhase: Double,
      isDefaultPrevented: () => Boolean,
      isImmediatePropagationStopped: () => Boolean,
      isPropagationStopped: () => Boolean,
      metaKey: Boolean,
      offsetX: Double,
      offsetY: Double,
      pageX: Double,
      pageY: Double,
      preventDefault: () => Unit,
      screenX: Double,
      screenY: Double,
      shiftKey: Boolean,
      stopImmediatePropagation: () => Unit,
      stopPropagation: () => Unit,
      target: TTarget,
      timeStamp: Double,
      toElement: Element,
      `type`: mouseout,
      view: Window,
      which: Double
    ): MouseLeaveEvent[TDelegateTarget, TData, TCurrentTarget, TTarget] = {
      val __obj = js.Dynamic.literal(altKey = altKey.asInstanceOf[js.Any], bubbles = bubbles.asInstanceOf[js.Any], button = button.asInstanceOf[js.Any], buttons = buttons.asInstanceOf[js.Any], cancelable = cancelable.asInstanceOf[js.Any], clientX = clientX.asInstanceOf[js.Any], clientY = clientY.asInstanceOf[js.Any], ctrlKey = ctrlKey.asInstanceOf[js.Any], currentTarget = currentTarget.asInstanceOf[js.Any], data = data.asInstanceOf[js.Any], delegateTarget = delegateTarget.asInstanceOf[js.Any], detail = detail.asInstanceOf[js.Any], eventPhase = eventPhase.asInstanceOf[js.Any], isDefaultPrevented = js.Any.fromFunction0(isDefaultPrevented), isImmediatePropagationStopped = js.Any.fromFunction0(isImmediatePropagationStopped), isPropagationStopped = js.Any.fromFunction0(isPropagationStopped), metaKey = metaKey.asInstanceOf[js.Any], offsetX = offsetX.asInstanceOf[js.Any], offsetY = offsetY.asInstanceOf[js.Any], pageX = pageX.asInstanceOf[js.Any], pageY = pageY.asInstanceOf[js.Any], preventDefault = js.Any.fromFunction0(preventDefault), screenX = screenX.asInstanceOf[js.Any], screenY = screenY.asInstanceOf[js.Any], shiftKey = shiftKey.asInstanceOf[js.Any], stopImmediatePropagation = js.Any.fromFunction0(stopImmediatePropagation), stopPropagation = js.Any.fromFunction0(stopPropagation), target = target.asInstanceOf[js.Any], timeStamp = timeStamp.asInstanceOf[js.Any], toElement = toElement.asInstanceOf[js.Any], view = view.asInstanceOf[js.Any], which = which.asInstanceOf[js.Any])
      __obj.updateDynamic("type")(`type`.asInstanceOf[js.Any])
      __obj.asInstanceOf[MouseLeaveEvent[TDelegateTarget, TData, TCurrentTarget, TTarget]]
    }
    
    @scala.inline
    implicit class MouseLeaveEventMutableBuilder[Self <: MouseLeaveEvent[_, _, _, _], TDelegateTarget, TData, TCurrentTarget, TTarget] (val x: Self with (MouseLeaveEvent[TDelegateTarget, TData, TCurrentTarget, TTarget])) extends AnyVal {
      
      @scala.inline
      def setType(value: mouseout): Self = StObject.set(x, "type", value.asInstanceOf[js.Any])
    }
  }
  
  @js.native
  trait MouseMoveEvent[TDelegateTarget, TData, TCurrentTarget, TTarget] extends MouseEventBase[TDelegateTarget, TData, TCurrentTarget, TTarget] {
    
    /**
      * The other DOM element involved in the event, if any.
      * @see \`{@link https://api.jquery.com/event.relatedTarget/ }\`
      * @since 1.1.4
      * @example ​ ````On mouseout of anchors, alert the element type being entered.
      ```javascript
      $( "a" ).mouseout(function( event ) {
      alert( event.relatedTarget.nodeName ); // "DIV"
      });
      ```
      */
    @JSName("relatedTarget")
    var relatedTarget_MouseMoveEvent: js.UndefOr[Null] = js.native
    
    @JSName("type")
    var type_MouseMoveEvent: mousemove = js.native
  }
  object MouseMoveEvent {
    
    @scala.inline
    def apply[TDelegateTarget, TData, TCurrentTarget, TTarget](
      altKey: Boolean,
      bubbles: Boolean,
      button: Double,
      buttons: Double,
      cancelable: Boolean,
      clientX: Double,
      clientY: Double,
      ctrlKey: Boolean,
      currentTarget: TCurrentTarget,
      data: TData,
      delegateTarget: TDelegateTarget,
      detail: Double,
      eventPhase: Double,
      isDefaultPrevented: () => Boolean,
      isImmediatePropagationStopped: () => Boolean,
      isPropagationStopped: () => Boolean,
      metaKey: Boolean,
      offsetX: Double,
      offsetY: Double,
      pageX: Double,
      pageY: Double,
      preventDefault: () => Unit,
      screenX: Double,
      screenY: Double,
      shiftKey: Boolean,
      stopImmediatePropagation: () => Unit,
      stopPropagation: () => Unit,
      target: TTarget,
      timeStamp: Double,
      toElement: Element,
      `type`: mousemove,
      view: Window,
      which: Double
    ): MouseMoveEvent[TDelegateTarget, TData, TCurrentTarget, TTarget] = {
      val __obj = js.Dynamic.literal(altKey = altKey.asInstanceOf[js.Any], bubbles = bubbles.asInstanceOf[js.Any], button = button.asInstanceOf[js.Any], buttons = buttons.asInstanceOf[js.Any], cancelable = cancelable.asInstanceOf[js.Any], clientX = clientX.asInstanceOf[js.Any], clientY = clientY.asInstanceOf[js.Any], ctrlKey = ctrlKey.asInstanceOf[js.Any], currentTarget = currentTarget.asInstanceOf[js.Any], data = data.asInstanceOf[js.Any], delegateTarget = delegateTarget.asInstanceOf[js.Any], detail = detail.asInstanceOf[js.Any], eventPhase = eventPhase.asInstanceOf[js.Any], isDefaultPrevented = js.Any.fromFunction0(isDefaultPrevented), isImmediatePropagationStopped = js.Any.fromFunction0(isImmediatePropagationStopped), isPropagationStopped = js.Any.fromFunction0(isPropagationStopped), metaKey = metaKey.asInstanceOf[js.Any], offsetX = offsetX.asInstanceOf[js.Any], offsetY = offsetY.asInstanceOf[js.Any], pageX = pageX.asInstanceOf[js.Any], pageY = pageY.asInstanceOf[js.Any], preventDefault = js.Any.fromFunction0(preventDefault), screenX = screenX.asInstanceOf[js.Any], screenY = screenY.asInstanceOf[js.Any], shiftKey = shiftKey.asInstanceOf[js.Any], stopImmediatePropagation = js.Any.fromFunction0(stopImmediatePropagation), stopPropagation = js.Any.fromFunction0(stopPropagation), target = target.asInstanceOf[js.Any], timeStamp = timeStamp.asInstanceOf[js.Any], toElement = toElement.asInstanceOf[js.Any], view = view.asInstanceOf[js.Any], which = which.asInstanceOf[js.Any])
      __obj.updateDynamic("type")(`type`.asInstanceOf[js.Any])
      __obj.asInstanceOf[MouseMoveEvent[TDelegateTarget, TData, TCurrentTarget, TTarget]]
    }
    
    @scala.inline
    implicit class MouseMoveEventMutableBuilder[Self <: MouseMoveEvent[_, _, _, _], TDelegateTarget, TData, TCurrentTarget, TTarget] (val x: Self with (MouseMoveEvent[TDelegateTarget, TData, TCurrentTarget, TTarget])) extends AnyVal {
      
      @scala.inline
      def setType(value: mousemove): Self = StObject.set(x, "type", value.asInstanceOf[js.Any])
    }
  }
  
  @js.native
  trait MouseOutEvent[TDelegateTarget, TData, TCurrentTarget, TTarget] extends MouseEventBase[TDelegateTarget, TData, TCurrentTarget, TTarget] {
    
    @JSName("type")
    var type_MouseOutEvent: mouseout = js.native
  }
  object MouseOutEvent {
    
    @scala.inline
    def apply[TDelegateTarget, TData, TCurrentTarget, TTarget](
      altKey: Boolean,
      bubbles: Boolean,
      button: Double,
      buttons: Double,
      cancelable: Boolean,
      clientX: Double,
      clientY: Double,
      ctrlKey: Boolean,
      currentTarget: TCurrentTarget,
      data: TData,
      delegateTarget: TDelegateTarget,
      detail: Double,
      eventPhase: Double,
      isDefaultPrevented: () => Boolean,
      isImmediatePropagationStopped: () => Boolean,
      isPropagationStopped: () => Boolean,
      metaKey: Boolean,
      offsetX: Double,
      offsetY: Double,
      pageX: Double,
      pageY: Double,
      preventDefault: () => Unit,
      screenX: Double,
      screenY: Double,
      shiftKey: Boolean,
      stopImmediatePropagation: () => Unit,
      stopPropagation: () => Unit,
      target: TTarget,
      timeStamp: Double,
      toElement: Element,
      `type`: mouseout,
      view: Window,
      which: Double
    ): MouseOutEvent[TDelegateTarget, TData, TCurrentTarget, TTarget] = {
      val __obj = js.Dynamic.literal(altKey = altKey.asInstanceOf[js.Any], bubbles = bubbles.asInstanceOf[js.Any], button = button.asInstanceOf[js.Any], buttons = buttons.asInstanceOf[js.Any], cancelable = cancelable.asInstanceOf[js.Any], clientX = clientX.asInstanceOf[js.Any], clientY = clientY.asInstanceOf[js.Any], ctrlKey = ctrlKey.asInstanceOf[js.Any], currentTarget = currentTarget.asInstanceOf[js.Any], data = data.asInstanceOf[js.Any], delegateTarget = delegateTarget.asInstanceOf[js.Any], detail = detail.asInstanceOf[js.Any], eventPhase = eventPhase.asInstanceOf[js.Any], isDefaultPrevented = js.Any.fromFunction0(isDefaultPrevented), isImmediatePropagationStopped = js.Any.fromFunction0(isImmediatePropagationStopped), isPropagationStopped = js.Any.fromFunction0(isPropagationStopped), metaKey = metaKey.asInstanceOf[js.Any], offsetX = offsetX.asInstanceOf[js.Any], offsetY = offsetY.asInstanceOf[js.Any], pageX = pageX.asInstanceOf[js.Any], pageY = pageY.asInstanceOf[js.Any], preventDefault = js.Any.fromFunction0(preventDefault), screenX = screenX.asInstanceOf[js.Any], screenY = screenY.asInstanceOf[js.Any], shiftKey = shiftKey.asInstanceOf[js.Any], stopImmediatePropagation = js.Any.fromFunction0(stopImmediatePropagation), stopPropagation = js.Any.fromFunction0(stopPropagation), target = target.asInstanceOf[js.Any], timeStamp = timeStamp.asInstanceOf[js.Any], toElement = toElement.asInstanceOf[js.Any], view = view.asInstanceOf[js.Any], which = which.asInstanceOf[js.Any])
      __obj.updateDynamic("type")(`type`.asInstanceOf[js.Any])
      __obj.asInstanceOf[MouseOutEvent[TDelegateTarget, TData, TCurrentTarget, TTarget]]
    }
    
    @scala.inline
    implicit class MouseOutEventMutableBuilder[Self <: MouseOutEvent[_, _, _, _], TDelegateTarget, TData, TCurrentTarget, TTarget] (val x: Self with (MouseOutEvent[TDelegateTarget, TData, TCurrentTarget, TTarget])) extends AnyVal {
      
      @scala.inline
      def setType(value: mouseout): Self = StObject.set(x, "type", value.asInstanceOf[js.Any])
    }
  }
  
  @js.native
  trait MouseOverEvent[TDelegateTarget, TData, TCurrentTarget, TTarget] extends MouseEventBase[TDelegateTarget, TData, TCurrentTarget, TTarget] {
    
    @JSName("type")
    var type_MouseOverEvent: mouseover = js.native
  }
  object MouseOverEvent {
    
    @scala.inline
    def apply[TDelegateTarget, TData, TCurrentTarget, TTarget](
      altKey: Boolean,
      bubbles: Boolean,
      button: Double,
      buttons: Double,
      cancelable: Boolean,
      clientX: Double,
      clientY: Double,
      ctrlKey: Boolean,
      currentTarget: TCurrentTarget,
      data: TData,
      delegateTarget: TDelegateTarget,
      detail: Double,
      eventPhase: Double,
      isDefaultPrevented: () => Boolean,
      isImmediatePropagationStopped: () => Boolean,
      isPropagationStopped: () => Boolean,
      metaKey: Boolean,
      offsetX: Double,
      offsetY: Double,
      pageX: Double,
      pageY: Double,
      preventDefault: () => Unit,
      screenX: Double,
      screenY: Double,
      shiftKey: Boolean,
      stopImmediatePropagation: () => Unit,
      stopPropagation: () => Unit,
      target: TTarget,
      timeStamp: Double,
      toElement: Element,
      `type`: mouseover,
      view: Window,
      which: Double
    ): MouseOverEvent[TDelegateTarget, TData, TCurrentTarget, TTarget] = {
      val __obj = js.Dynamic.literal(altKey = altKey.asInstanceOf[js.Any], bubbles = bubbles.asInstanceOf[js.Any], button = button.asInstanceOf[js.Any], buttons = buttons.asInstanceOf[js.Any], cancelable = cancelable.asInstanceOf[js.Any], clientX = clientX.asInstanceOf[js.Any], clientY = clientY.asInstanceOf[js.Any], ctrlKey = ctrlKey.asInstanceOf[js.Any], currentTarget = currentTarget.asInstanceOf[js.Any], data = data.asInstanceOf[js.Any], delegateTarget = delegateTarget.asInstanceOf[js.Any], detail = detail.asInstanceOf[js.Any], eventPhase = eventPhase.asInstanceOf[js.Any], isDefaultPrevented = js.Any.fromFunction0(isDefaultPrevented), isImmediatePropagationStopped = js.Any.fromFunction0(isImmediatePropagationStopped), isPropagationStopped = js.Any.fromFunction0(isPropagationStopped), metaKey = metaKey.asInstanceOf[js.Any], offsetX = offsetX.asInstanceOf[js.Any], offsetY = offsetY.asInstanceOf[js.Any], pageX = pageX.asInstanceOf[js.Any], pageY = pageY.asInstanceOf[js.Any], preventDefault = js.Any.fromFunction0(preventDefault), screenX = screenX.asInstanceOf[js.Any], screenY = screenY.asInstanceOf[js.Any], shiftKey = shiftKey.asInstanceOf[js.Any], stopImmediatePropagation = js.Any.fromFunction0(stopImmediatePropagation), stopPropagation = js.Any.fromFunction0(stopPropagation), target = target.asInstanceOf[js.Any], timeStamp = timeStamp.asInstanceOf[js.Any], toElement = toElement.asInstanceOf[js.Any], view = view.asInstanceOf[js.Any], which = which.asInstanceOf[js.Any])
      __obj.updateDynamic("type")(`type`.asInstanceOf[js.Any])
      __obj.asInstanceOf[MouseOverEvent[TDelegateTarget, TData, TCurrentTarget, TTarget]]
    }
    
    @scala.inline
    implicit class MouseOverEventMutableBuilder[Self <: MouseOverEvent[_, _, _, _], TDelegateTarget, TData, TCurrentTarget, TTarget] (val x: Self with (MouseOverEvent[TDelegateTarget, TData, TCurrentTarget, TTarget])) extends AnyVal {
      
      @scala.inline
      def setType(value: mouseover): Self = StObject.set(x, "type", value.asInstanceOf[js.Any])
    }
  }
  
  @js.native
  trait MouseUpEvent[TDelegateTarget, TData, TCurrentTarget, TTarget] extends MouseEventBase[TDelegateTarget, TData, TCurrentTarget, TTarget] {
    
    /**
      * The other DOM element involved in the event, if any.
      * @see \`{@link https://api.jquery.com/event.relatedTarget/ }\`
      * @since 1.1.4
      * @example ​ ````On mouseout of anchors, alert the element type being entered.
      ```javascript
      $( "a" ).mouseout(function( event ) {
      alert( event.relatedTarget.nodeName ); // "DIV"
      });
      ```
      */
    @JSName("relatedTarget")
    var relatedTarget_MouseUpEvent: js.UndefOr[Null] = js.native
    
    @JSName("type")
    var type_MouseUpEvent: mouseup = js.native
  }
  object MouseUpEvent {
    
    @scala.inline
    def apply[TDelegateTarget, TData, TCurrentTarget, TTarget](
      altKey: Boolean,
      bubbles: Boolean,
      button: Double,
      buttons: Double,
      cancelable: Boolean,
      clientX: Double,
      clientY: Double,
      ctrlKey: Boolean,
      currentTarget: TCurrentTarget,
      data: TData,
      delegateTarget: TDelegateTarget,
      detail: Double,
      eventPhase: Double,
      isDefaultPrevented: () => Boolean,
      isImmediatePropagationStopped: () => Boolean,
      isPropagationStopped: () => Boolean,
      metaKey: Boolean,
      offsetX: Double,
      offsetY: Double,
      pageX: Double,
      pageY: Double,
      preventDefault: () => Unit,
      screenX: Double,
      screenY: Double,
      shiftKey: Boolean,
      stopImmediatePropagation: () => Unit,
      stopPropagation: () => Unit,
      target: TTarget,
      timeStamp: Double,
      toElement: Element,
      `type`: mouseup,
      view: Window,
      which: Double
    ): MouseUpEvent[TDelegateTarget, TData, TCurrentTarget, TTarget] = {
      val __obj = js.Dynamic.literal(altKey = altKey.asInstanceOf[js.Any], bubbles = bubbles.asInstanceOf[js.Any], button = button.asInstanceOf[js.Any], buttons = buttons.asInstanceOf[js.Any], cancelable = cancelable.asInstanceOf[js.Any], clientX = clientX.asInstanceOf[js.Any], clientY = clientY.asInstanceOf[js.Any], ctrlKey = ctrlKey.asInstanceOf[js.Any], currentTarget = currentTarget.asInstanceOf[js.Any], data = data.asInstanceOf[js.Any], delegateTarget = delegateTarget.asInstanceOf[js.Any], detail = detail.asInstanceOf[js.Any], eventPhase = eventPhase.asInstanceOf[js.Any], isDefaultPrevented = js.Any.fromFunction0(isDefaultPrevented), isImmediatePropagationStopped = js.Any.fromFunction0(isImmediatePropagationStopped), isPropagationStopped = js.Any.fromFunction0(isPropagationStopped), metaKey = metaKey.asInstanceOf[js.Any], offsetX = offsetX.asInstanceOf[js.Any], offsetY = offsetY.asInstanceOf[js.Any], pageX = pageX.asInstanceOf[js.Any], pageY = pageY.asInstanceOf[js.Any], preventDefault = js.Any.fromFunction0(preventDefault), screenX = screenX.asInstanceOf[js.Any], screenY = screenY.asInstanceOf[js.Any], shiftKey = shiftKey.asInstanceOf[js.Any], stopImmediatePropagation = js.Any.fromFunction0(stopImmediatePropagation), stopPropagation = js.Any.fromFunction0(stopPropagation), target = target.asInstanceOf[js.Any], timeStamp = timeStamp.asInstanceOf[js.Any], toElement = toElement.asInstanceOf[js.Any], view = view.asInstanceOf[js.Any], which = which.asInstanceOf[js.Any])
      __obj.updateDynamic("type")(`type`.asInstanceOf[js.Any])
      __obj.asInstanceOf[MouseUpEvent[TDelegateTarget, TData, TCurrentTarget, TTarget]]
    }
    
    @scala.inline
    implicit class MouseUpEventMutableBuilder[Self <: MouseUpEvent[_, _, _, _], TDelegateTarget, TData, TCurrentTarget, TTarget] (val x: Self with (MouseUpEvent[TDelegateTarget, TData, TCurrentTarget, TTarget])) extends AnyVal {
      
      @scala.inline
      def setType(value: mouseup): Self = StObject.set(x, "type", value.asInstanceOf[js.Any])
    }
  }
  
  // #endregion
  // #endregion
  // #endregion
  @js.native
  trait NameValuePair extends StObject {
    
    var name: String = js.native
    
    var value: String = js.native
  }
  object NameValuePair {
    
    @scala.inline
    def apply(name: String, value: String): NameValuePair = {
      val __obj = js.Dynamic.literal(name = name.asInstanceOf[js.Any], value = value.asInstanceOf[js.Any])
      __obj.asInstanceOf[NameValuePair]
    }
    
    @scala.inline
    implicit class NameValuePairMutableBuilder[Self <: NameValuePair] (val x: Self) extends AnyVal {
      
      @scala.inline
      def setName(value: String): Self = StObject.set(x, "name", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setValue(value: String): Self = StObject.set(x, "value", value.asInstanceOf[js.Any])
    }
  }
  
  type Node = Element | Text | Comment | Document | DocumentFragment
  
  /**
    * The PlainObject type is a JavaScript object containing zero or more key-value pairs. The plain object is, in other words, an Object object. It is designated "plain" in jQuery documentation to distinguish it from other kinds of JavaScript objects: for example, null, user-defined arrays, and host objects such as document, all of which have a typeof value of "object."
    *
    * **Note**: The type declaration of PlainObject is imprecise. It includes host objects and user-defined arrays which do not match jQuery's definition.
    */
  type PlainObject[T] = StringDictionary[T]
  
  /**
    * This object provides a subset of the methods of the Deferred object (then, done, fail, always, pipe, progress, state and promise) to prevent users from changing the state of the Deferred.
    * @see \`{@link https://api.jquery.com/Types/#Promise }\`
    */
  type Promise[TR, TJ, TN] = PromiseBase[TR, TJ, TN, TR, TJ, TN, TR, TJ, TN, TR, TJ, TN]
  
  /**
    * This object provides a subset of the methods of the Deferred object (then, done, fail, always, pipe, progress, state and promise) to prevent users from changing the state of the Deferred.
    * @see \`{@link https://api.jquery.com/Types/#Promise }\`
    */
  type Promise2[TR, TJ, TN, UR, UJ, UN] = PromiseBase[
    TR, 
    TJ, 
    TN, 
    UR, 
    UJ, 
    UN, 
    scala.Nothing, 
    scala.Nothing, 
    scala.Nothing, 
    scala.Nothing, 
    scala.Nothing, 
    scala.Nothing
  ]
  
  /**
    * This object provides a subset of the methods of the Deferred object (then, done, fail, always, pipe, progress, state and promise) to prevent users from changing the state of the Deferred.
    * @see \`{@link https://api.jquery.com/Types/#Promise }\`
    */
  type Promise3[TR, TJ, TN, UR, UJ, UN, VR, VJ, VN] = PromiseBase[TR, TJ, TN, UR, UJ, UN, VR, VJ, VN, scala.Nothing, scala.Nothing, scala.Nothing]
  
  // Type parameter guide
  // --------------------
  // Each type parameter represents a parameter in one of the three possible callbacks.
  //
  // The first letter indicates which position the parameter is in.
  //
  // T = A = 1st position
  // U = B = 2nd position
  // V = C = 3rd position
  // S = R = rest position
  //
  // The second letter indicates which whether it is a [R]esolve, Re[J]ect, or [N]otify value.
  //
  // The third letter indicates whether the value is returned in the [D]one filter, [F]ail filter, or [P]rogress filter.
  /**
    * This object provides a subset of the methods of the Deferred object (then, done, fail, always, pipe, progress, state and promise) to prevent users from changing the state of the Deferred.
    * @see \`{@link https://api.jquery.com/Types/#Promise }\`
    */
  @js.native
  trait PromiseBase[TR, TJ, TN, UR, UJ, UN, VR, VJ, VN, SR, SJ, SN] extends StObject {
    
    /**
      * Add handlers to be called when the Deferred object is either resolved or rejected.
      * @param alwaysCallback A function, or array of functions, that is called when the Deferred is resolved or rejected.
      * @param alwaysCallbacks Optional additional functions, or arrays of functions, that are called when the Deferred is resolved or rejected.
      * @see \`{@link https://api.jquery.com/deferred.always/ }\`
      * @since 1.6
      * @example ​ ````Since the jQuery.get() method returns a jqXHR object, which is derived from a Deferred object, we can attach a callback for both success and error using the deferred.always() method.
    ```javascript
    $.get( "test.php" ).always(function() {
      alert( "$.get completed with success or error callback arguments" );
    });
    ```
      */
    def always(
      alwaysCallback: TypeOrArray[CallbackBase[TR | TJ, UR | UJ, VR | VJ, SR | SJ]],
      alwaysCallbacks: (TypeOrArray[CallbackBase[TR | TJ, UR | UJ, VR | VJ, SR | SJ]])*
    ): this.type = js.native
    
    // #endregion
    /**
      * Add handlers to be called when the Deferred object is rejected.
      * @param failFilter A function that is called when the Deferred is rejected.
      * @see \`{@link https://api.jquery.com/deferred.catch/ }\`
      * @since 3.0
      * @example ​ ````Since the jQuery.get method returns a jqXHR object, which is derived from a Deferred object, we can rejection handlers using the .catch method.
    ```javascript
    $.get( "test.php" )
      .then( function() {
      alert( "$.get succeeded" );
      } )
      .catch( function() {
      alert( "$.get failed!" );
      } );
    ```
      */
    def `catch`[ARF, AJF, ANF, BRF, BJF, BNF, CRF, CJF, CNF, RRF, RJF, RNF](): PromiseBase[ARF, AJF, ANF, BRF, BJF, BNF, CRF, CJF, CNF, RRF, RJF, RNF] = js.native
    def `catch`[ARF, AJF, ANF, BRF, BJF, BNF, CRF, CJF, CNF, RRF, RJF, RNF](
      failFilter: js.Function4[
          /* t */ TJ, 
          /* u */ UJ, 
          /* v */ VJ, 
          /* repeated */ SJ, 
          (PromiseBase[ARF, AJF, ANF, BRF, BJF, BNF, CRF, CJF, CNF, RRF, RJF, RNF]) | Thenable[ARF] | ARF
        ]
    ): PromiseBase[ARF, AJF, ANF, BRF, BJF, BNF, CRF, CJF, CNF, RRF, RJF, RNF] = js.native
    
    /**
      * Add handlers to be called when the Deferred object is resolved.
      * @param doneCallback A function, or array of functions, that are called when the Deferred is resolved.
      * @param doneCallbacks Optional additional functions, or arrays of functions, that are called when the Deferred is resolved.
      * @see \`{@link https://api.jquery.com/deferred.done/ }\`
      * @since 1.5
      * @example ​ ````Since the jQuery.get method returns a jqXHR object, which is derived from a Deferred object, we can attach a success callback using the .done() method.
    ```javascript
    $.get( "test.php" ).done(function() {
      alert( "$.get succeeded" );
    });
    ```
      * @example ​ ````Resolve a Deferred object when the user clicks a button, triggering a number of callback functions:
    ```html
    <!doctype html>
    <html lang="en">
    <head>
      <meta charset="utf-8">
      <title>deferred.done demo</title>
      <script src="https://code.jquery.com/jquery-3.3.1.js"></script>
    </head>
    <body>
    ​
    <button>Go</button>
    <p>Ready...</p>
    ​
    <script>
    // 3 functions to call when the Deferred object is resolved
    function fn1() {
      $( "p" ).append( " 1 " );
    }
    function fn2() {
      $( "p" ).append( " 2 " );
    }
    function fn3( n ) {
      $( "p" ).append( n + " 3 " + n );
    }
    ​
    // Create a deferred object
    var dfd = $.Deferred();
    ​
    // Add handlers to be called when dfd is resolved
    dfd
    // .done() can take any number of functions or arrays of functions
      .done( [ fn1, fn2 ], fn3, [ fn2, fn1 ] )
    // We can chain done methods, too
      .done(function( n ) {
      $( "p" ).append( n + " we're done." );
      });
    ​
    // Resolve the Deferred object when the button is clicked
    $( "button" ).on( "click", function() {
      dfd.resolve( "and" );
    });
    </script>
    ​
    </body>
    </html>
    ```
      */
    def done(
      doneCallback: TypeOrArray[CallbackBase[TR, UR, VR, SR]],
      doneCallbacks: (TypeOrArray[CallbackBase[TR, UR, VR, SR]])*
    ): this.type = js.native
    
    /**
      * Add handlers to be called when the Deferred object is rejected.
      * @param failCallback A function, or array of functions, that are called when the Deferred is rejected.
      * @param failCallbacks Optional additional functions, or arrays of functions, that are called when the Deferred is rejected.
      * @see \`{@link https://api.jquery.com/deferred.fail/ }\`
      * @since 1.5
      * @example ​ ````Since the jQuery.get method returns a jqXHR object, which is derived from a Deferred, you can attach a success and failure callback using the deferred.done() and deferred.fail() methods.
    ```javascript
    $.get( "test.php" )
      .done(function() {
      alert( "$.get succeeded" );
      })
      .fail(function() {
      alert( "$.get failed!" );
      });
    ```
      */
    def fail(
      failCallback: TypeOrArray[CallbackBase[TJ, UJ, VJ, SJ]],
      failCallbacks: (TypeOrArray[CallbackBase[TJ, UJ, VJ, SJ]])*
    ): this.type = js.native
    
    /**
      * Utility method to filter and/or chain Deferreds.
      * @param doneFilter An optional function that is called when the Deferred is resolved.
      * @param failFilter An optional function that is called when the Deferred is rejected.
      * @param progressFilter An optional function that is called when progress notifications are sent to the Deferred.
      * @see \`{@link https://api.jquery.com/deferred.pipe/ }\`
      * @since 1.6
      * @since 1.7
      * @deprecated ​ Deprecated since 1.8. Use \`{@link then }\`.
      *
      * **Cause**: The `.pipe()` method on a `jQuery.Deferred` object was deprecated as of jQuery 1.8, when the `.then()` method was changed to perform the same function.
      *
      * **Solution**: In most cases it is sufficient to change all occurrences of `.pipe()` to `.then()`. Ensure that you aren't relying on context/state propagation (e.g., using `this`) or synchronous callback invocation, which were dropped from `.then()` for Promises/A+ interoperability as of jQuery 3.0.
      * @example ​ ````Chain tasks:
    ```javascript
    var request = $.ajax( url, { dataType: "json" } ),
      chained = request.pipe(function( data ) {
      return $.ajax( url2, { data: { user: data.userId } } );
      });
    ​
    chained.done(function( data ) {
      // data retrieved from url2 as provided by the first request
    });
    ```
      */
    def pipe[ARP, AJP, ANP, BRP, BJP, BNP, CRP, CJP, CNP, RRP, RJP, RNP](): PromiseBase[ARP, AJP, ANP, BRP, BJP, BNP, CRP, CJP, CNP, RRP, RJP, RNP] = js.native
    /**
      * Utility method to filter and/or chain Deferreds.
      * @param doneFilter An optional function that is called when the Deferred is resolved.
      * @param failFilter An optional function that is called when the Deferred is rejected.
      * @param progressFilter An optional function that is called when progress notifications are sent to the Deferred.
      * @see \`{@link https://api.jquery.com/deferred.pipe/ }\`
      * @since 1.6
      * @since 1.7
      * @deprecated ​ Deprecated since 1.8. Use \`{@link then }\`.
      *
      * **Cause**: The `.pipe()` method on a `jQuery.Deferred` object was deprecated as of jQuery 1.8, when the `.then()` method was changed to perform the same function.
      *
      * **Solution**: In most cases it is sufficient to change all occurrences of `.pipe()` to `.then()`. Ensure that you aren't relying on context/state propagation (e.g., using `this`) or synchronous callback invocation, which were dropped from `.then()` for Promises/A+ interoperability as of jQuery 3.0.
      * @example ​ ````Filter resolve value:
    ```javascript
    var defer = $.Deferred(),
      filtered = defer.pipe(function( value ) {
      return value * 2;
      });
    ​
    defer.resolve( 5 );
    filtered.done(function( value ) {
      alert( "Value is ( 2*5 = ) 10: " + value );
    });
    ```
      * @example ​ ````Chain tasks:
    ```javascript
    var request = $.ajax( url, { dataType: "json" } ),
      chained = request.pipe(function( data ) {
      return $.ajax( url2, { data: { user: data.userId } } );
      });
    ​
    chained.done(function( data ) {
      // data retrieved from url2 as provided by the first request
    });
    ```
      */
    def pipe[ARD, AJD, AND, BRD, BJD, BND, CRD, CJD, CND, RRD, RJD, RND](
      doneFilter: js.Function4[
          /* t */ TR, 
          /* u */ UR, 
          /* v */ VR, 
          /* repeated */ SR, 
          (PromiseBase[ARD, AJD, AND, BRD, BJD, BND, CRD, CJD, CND, RRD, RJD, RND]) | Thenable[ARD] | ARD
        ]
    ): PromiseBase[ARD, AJD, AND, BRD, BJD, BND, CRD, CJD, CND, RRD, RJD, RND] = js.native
    /**
      * Utility method to filter and/or chain Deferreds.
      * @param doneFilter An optional function that is called when the Deferred is resolved.
      * @param failFilter An optional function that is called when the Deferred is rejected.
      * @param progressFilter An optional function that is called when progress notifications are sent to the Deferred.
      * @see \`{@link https://api.jquery.com/deferred.pipe/ }\`
      * @since 1.6
      * @since 1.7
      * @deprecated ​ Deprecated since 1.8. Use \`{@link then }\`.
      *
      * **Cause**: The `.pipe()` method on a `jQuery.Deferred` object was deprecated as of jQuery 1.8, when the `.then()` method was changed to perform the same function.
      *
      * **Solution**: In most cases it is sufficient to change all occurrences of `.pipe()` to `.then()`. Ensure that you aren't relying on context/state propagation (e.g., using `this`) or synchronous callback invocation, which were dropped from `.then()` for Promises/A+ interoperability as of jQuery 3.0.
      * @example ​ ````Filter reject value:
    ```javascript
    var defer = $.Deferred(),
      filtered = defer.pipe( null, function( value ) {
      return value * 3;
      });
    ​
    defer.reject( 6 );
    filtered.fail(function( value ) {
      alert( "Value is ( 3*6 = ) 18: " + value );
    });
    ```
      * @example ​ ````Chain tasks:
    ```javascript
    var request = $.ajax( url, { dataType: "json" } ),
      chained = request.pipe(function( data ) {
      return $.ajax( url2, { data: { user: data.userId } } );
      });
    ​
    chained.done(function( data ) {
      // data retrieved from url2 as provided by the first request
    });
    ```
      */
    def pipe[ARF, AJF, ANF, BRF, BJF, BNF, CRF, CJF, CNF, RRF, RJF, RNF](
      doneFilter: Null,
      failFilter: js.Function4[
          /* t */ TJ, 
          /* u */ UJ, 
          /* v */ VJ, 
          /* repeated */ SJ, 
          (PromiseBase[ARF, AJF, ANF, BRF, BJF, BNF, CRF, CJF, CNF, RRF, RJF, RNF]) | Thenable[AJF] | AJF
        ]
    ): PromiseBase[ARF, AJF, ANF, BRF, BJF, BNF, CRF, CJF, CNF, RRF, RJF, RNF] = js.native
    def pipe[ARP, AJP, ANP, BRP, BJP, BNP, CRP, CJP, CNP, RRP, RJP, RNP](
      doneFilter: Null,
      failFilter: Null,
      progressFilter: js.Function4[
          /* t */ TN, 
          /* u */ UN, 
          /* v */ VN, 
          /* repeated */ SN, 
          (PromiseBase[ARP, AJP, ANP, BRP, BJP, BNP, CRP, CJP, CNP, RRP, RJP, RNP]) | Thenable[ANP] | ANP
        ]
    ): PromiseBase[ARP, AJP, ANP, BRP, BJP, BNP, CRP, CJP, CNP, RRP, RJP, RNP] = js.native
    /**
      * Utility method to filter and/or chain Deferreds.
      * @param doneFilter An optional function that is called when the Deferred is resolved.
      * @param failFilter An optional function that is called when the Deferred is rejected.
      * @param progressFilter An optional function that is called when progress notifications are sent to the Deferred.
      * @see \`{@link https://api.jquery.com/deferred.pipe/ }\`
      * @since 1.6
      * @since 1.7
      * @deprecated ​ Deprecated since 1.8. Use \`{@link then }\`.
      *
      * **Cause**: The `.pipe()` method on a `jQuery.Deferred` object was deprecated as of jQuery 1.8, when the `.then()` method was changed to perform the same function.
      *
      * **Solution**: In most cases it is sufficient to change all occurrences of `.pipe()` to `.then()`. Ensure that you aren't relying on context/state propagation (e.g., using `this`) or synchronous callback invocation, which were dropped from `.then()` for Promises/A+ interoperability as of jQuery 3.0.
      * @example ​ ````Filter resolve value:
    ```javascript
    var defer = $.Deferred(),
      filtered = defer.pipe(function( value ) {
      return value * 2;
      });
    ​
    defer.resolve( 5 );
    filtered.done(function( value ) {
      alert( "Value is ( 2*5 = ) 10: " + value );
    });
    ```
      * @example ​ ````Filter reject value:
    ```javascript
    var defer = $.Deferred(),
      filtered = defer.pipe( null, function( value ) {
      return value * 3;
      });
    ​
    defer.reject( 6 );
    filtered.fail(function( value ) {
      alert( "Value is ( 3*6 = ) 18: " + value );
    });
    ```
      * @example ​ ````Chain tasks:
    ```javascript
    var request = $.ajax( url, { dataType: "json" } ),
      chained = request.pipe(function( data ) {
      return $.ajax( url2, { data: { user: data.userId } } );
      });
    ​
    chained.done(function( data ) {
      // data retrieved from url2 as provided by the first request
    });
    ```
      */
    def pipe[ARD, AJD, AND, BRD, BJD, BND, CRD, CJD, CND, RRD, RJD, RND, ARF, AJF, ANF, BRF, BJF, BNF, CRF, CJF, CNF, RRF, RJF, RNF](
      doneFilter: js.Function4[
          /* t */ TR, 
          /* u */ UR, 
          /* v */ VR, 
          /* repeated */ SR, 
          (PromiseBase[ARD, AJD, AND, BRD, BJD, BND, CRD, CJD, CND, RRD, RJD, RND]) | Thenable[ARD] | ARD
        ],
      failFilter: js.Function4[
          /* t */ TJ, 
          /* u */ UJ, 
          /* v */ VJ, 
          /* repeated */ SJ, 
          (PromiseBase[ARF, AJF, ANF, BRF, BJF, BNF, CRF, CJF, CNF, RRF, RJF, RNF]) | Thenable[AJF] | AJF
        ]
    ): PromiseBase[
        ARD | ARF, 
        AJD | AJF, 
        AND | ANF, 
        BRD | BRF, 
        BJD | BJF, 
        BND | BNF, 
        CRD | CRF, 
        CJD | CJF, 
        CND | CNF, 
        RRD | RRF, 
        RJD | RJF, 
        RND | RNF
      ] = js.native
    /**
      * Utility method to filter and/or chain Deferreds.
      * @param doneFilter An optional function that is called when the Deferred is resolved.
      * @param failFilter An optional function that is called when the Deferred is rejected.
      * @param progressFilter An optional function that is called when progress notifications are sent to the Deferred.
      * @see \`{@link https://api.jquery.com/deferred.pipe/ }\`
      * @since 1.6
      * @since 1.7
      * @deprecated ​ Deprecated since 1.8. Use \`{@link then }\`.
      *
      * **Cause**: The `.pipe()` method on a `jQuery.Deferred` object was deprecated as of jQuery 1.8, when the `.then()` method was changed to perform the same function.
      *
      * **Solution**: In most cases it is sufficient to change all occurrences of `.pipe()` to `.then()`. Ensure that you aren't relying on context/state propagation (e.g., using `this`) or synchronous callback invocation, which were dropped from `.then()` for Promises/A+ interoperability as of jQuery 3.0.
      * @example ​ ````Filter resolve value:
    ```javascript
    var defer = $.Deferred(),
      filtered = defer.pipe(function( value ) {
      return value * 2;
      });
    ​
    defer.resolve( 5 );
    filtered.done(function( value ) {
      alert( "Value is ( 2*5 = ) 10: " + value );
    });
    ```
      * @example ​ ````Chain tasks:
    ```javascript
    var request = $.ajax( url, { dataType: "json" } ),
      chained = request.pipe(function( data ) {
      return $.ajax( url2, { data: { user: data.userId } } );
      });
    ​
    chained.done(function( data ) {
      // data retrieved from url2 as provided by the first request
    });
    ```
      */
    def pipe[ARD, AJD, AND, BRD, BJD, BND, CRD, CJD, CND, RRD, RJD, RND, ARP, AJP, ANP, BRP, BJP, BNP, CRP, CJP, CNP, RRP, RJP, RNP](
      doneFilter: js.Function4[
          /* t */ TR, 
          /* u */ UR, 
          /* v */ VR, 
          /* repeated */ SR, 
          (PromiseBase[ARD, AJD, AND, BRD, BJD, BND, CRD, CJD, CND, RRD, RJD, RND]) | Thenable[ARD] | ARD
        ],
      failFilter: Null,
      progressFilter: js.Function4[
          /* t */ TN, 
          /* u */ UN, 
          /* v */ VN, 
          /* repeated */ SN, 
          (PromiseBase[ARP, AJP, ANP, BRP, BJP, BNP, CRP, CJP, CNP, RRP, RJP, RNP]) | Thenable[ANP] | ANP
        ]
    ): PromiseBase[
        ARD | ARP, 
        AJD | AJP, 
        AND | ANP, 
        BRD | BRP, 
        BJD | BJP, 
        BND | BNP, 
        CRD | CRP, 
        CJD | CJP, 
        CND | CNP, 
        RRD | RRP, 
        RJD | RJP, 
        RND | RNP
      ] = js.native
    /**
      * Utility method to filter and/or chain Deferreds.
      * @param doneFilter An optional function that is called when the Deferred is resolved.
      * @param failFilter An optional function that is called when the Deferred is rejected.
      * @param progressFilter An optional function that is called when progress notifications are sent to the Deferred.
      * @see \`{@link https://api.jquery.com/deferred.pipe/ }\`
      * @since 1.6
      * @since 1.7
      * @deprecated ​ Deprecated since 1.8. Use \`{@link then }\`.
      *
      * **Cause**: The `.pipe()` method on a `jQuery.Deferred` object was deprecated as of jQuery 1.8, when the `.then()` method was changed to perform the same function.
      *
      * **Solution**: In most cases it is sufficient to change all occurrences of `.pipe()` to `.then()`. Ensure that you aren't relying on context/state propagation (e.g., using `this`) or synchronous callback invocation, which were dropped from `.then()` for Promises/A+ interoperability as of jQuery 3.0.
      * @example ​ ````Filter reject value:
    ```javascript
    var defer = $.Deferred(),
      filtered = defer.pipe( null, function( value ) {
      return value * 3;
      });
    ​
    defer.reject( 6 );
    filtered.fail(function( value ) {
      alert( "Value is ( 3*6 = ) 18: " + value );
    });
    ```
      * @example ​ ````Chain tasks:
    ```javascript
    var request = $.ajax( url, { dataType: "json" } ),
      chained = request.pipe(function( data ) {
      return $.ajax( url2, { data: { user: data.userId } } );
      });
    ​
    chained.done(function( data ) {
      // data retrieved from url2 as provided by the first request
    });
    ```
      */
    def pipe[ARF, AJF, ANF, BRF, BJF, BNF, CRF, CJF, CNF, RRF, RJF, RNF, ARP, AJP, ANP, BRP, BJP, BNP, CRP, CJP, CNP, RRP, RJP, RNP](
      doneFilter: Null,
      failFilter: js.Function4[
          /* t */ TJ, 
          /* u */ UJ, 
          /* v */ VJ, 
          /* repeated */ SJ, 
          (PromiseBase[ARF, AJF, ANF, BRF, BJF, BNF, CRF, CJF, CNF, RRF, RJF, RNF]) | Thenable[AJF] | AJF
        ],
      progressFilter: js.Function4[
          /* t */ TN, 
          /* u */ UN, 
          /* v */ VN, 
          /* repeated */ SN, 
          (PromiseBase[ARP, AJP, ANP, BRP, BJP, BNP, CRP, CJP, CNP, RRP, RJP, RNP]) | Thenable[ANP] | ANP
        ]
    ): PromiseBase[
        ARF | ARP, 
        AJF | AJP, 
        ANF | ANP, 
        BRF | BRP, 
        BJF | BJP, 
        BNF | BNP, 
        CRF | CRP, 
        CJF | CJP, 
        CNF | CNP, 
        RRF | RRP, 
        RJF | RJP, 
        RNF | RNP
      ] = js.native
    // region pipe
    // #region pipe
    /**
      * Utility method to filter and/or chain Deferreds.
      * @param doneFilter An optional function that is called when the Deferred is resolved.
      * @param failFilter An optional function that is called when the Deferred is rejected.
      * @param progressFilter An optional function that is called when progress notifications are sent to the Deferred.
      * @see \`{@link https://api.jquery.com/deferred.pipe/ }\`
      * @since 1.6
      * @since 1.7
      * @deprecated ​ Deprecated since 1.8. Use \`{@link then }\`.
      *
      * **Cause**: The `.pipe()` method on a `jQuery.Deferred` object was deprecated as of jQuery 1.8, when the `.then()` method was changed to perform the same function.
      *
      * **Solution**: In most cases it is sufficient to change all occurrences of `.pipe()` to `.then()`. Ensure that you aren't relying on context/state propagation (e.g., using `this`) or synchronous callback invocation, which were dropped from `.then()` for Promises/A+ interoperability as of jQuery 3.0.
      * @example ​ ````Filter resolve value:
    ```javascript
    var defer = $.Deferred(),
      filtered = defer.pipe(function( value ) {
      return value * 2;
      });
    ​
    defer.resolve( 5 );
    filtered.done(function( value ) {
      alert( "Value is ( 2*5 = ) 10: " + value );
    });
    ```
      * @example ​ ````Filter reject value:
    ```javascript
    var defer = $.Deferred(),
      filtered = defer.pipe( null, function( value ) {
      return value * 3;
      });
    ​
    defer.reject( 6 );
    filtered.fail(function( value ) {
      alert( "Value is ( 3*6 = ) 18: " + value );
    });
    ```
      * @example ​ ````Chain tasks:
    ```javascript
    var request = $.ajax( url, { dataType: "json" } ),
      chained = request.pipe(function( data ) {
      return $.ajax( url2, { data: { user: data.userId } } );
      });
    ​
    chained.done(function( data ) {
      // data retrieved from url2 as provided by the first request
    });
    ```
      */
    def pipe[ARD, AJD, AND, BRD, BJD, BND, CRD, CJD, CND, RRD, RJD, RND, ARF, AJF, ANF, BRF, BJF, BNF, CRF, CJF, CNF, RRF, RJF, RNF, ARP, AJP, ANP, BRP, BJP, BNP, CRP, CJP, CNP, RRP, RJP, RNP](
      doneFilter: js.Function4[
          /* t */ TR, 
          /* u */ UR, 
          /* v */ VR, 
          /* repeated */ SR, 
          (PromiseBase[ARD, AJD, AND, BRD, BJD, BND, CRD, CJD, CND, RRD, RJD, RND]) | Thenable[ARD] | ARD
        ],
      failFilter: js.Function4[
          /* t */ TJ, 
          /* u */ UJ, 
          /* v */ VJ, 
          /* repeated */ SJ, 
          (PromiseBase[ARF, AJF, ANF, BRF, BJF, BNF, CRF, CJF, CNF, RRF, RJF, RNF]) | Thenable[AJF] | AJF
        ],
      progressFilter: js.Function4[
          /* t */ TN, 
          /* u */ UN, 
          /* v */ VN, 
          /* repeated */ SN, 
          (PromiseBase[ARP, AJP, ANP, BRP, BJP, BNP, CRP, CJP, CNP, RRP, RJP, RNP]) | Thenable[ANP] | ANP
        ]
    ): PromiseBase[
        ARD | ARF | ARP, 
        AJD | AJF | AJP, 
        AND | ANF | ANP, 
        BRD | BRF | BRP, 
        BJD | BJF | BJP, 
        BND | BNF | BNP, 
        CRD | CRF | CRP, 
        CJD | CJF | CJP, 
        CND | CNF | CNP, 
        RRD | RRF | RRP, 
        RJD | RJF | RJP, 
        RND | RNF | RNP
      ] = js.native
    
    /**
      * Add handlers to be called when the Deferred object generates progress notifications.
      * @param progressCallback A function, or array of functions, to be called when the Deferred generates progress notifications.
      * @param progressCallbacks Optional additional functions, or arrays of functions, to be called when the Deferred generates
      *                          progress notifications.
      * @see \`{@link https://api.jquery.com/deferred.progress/ }\`
      * @since 1.7
      */
    def progress(
      progressCallback: TypeOrArray[CallbackBase[TN, UN, VN, SN]],
      progressCallbacks: (TypeOrArray[CallbackBase[TN, UN, VN, SN]])*
    ): this.type = js.native
    
    /**
      * Return a Deferred's Promise object.
      * @see \`{@link https://api.jquery.com/deferred.promise/ }\`
      * @since 1.5
      * @example ​ ````Use the target argument to promote an existing object to a Promise:
    ```javascript
    // Existing object
    var obj = {
      hello: function( name ) {
      alert( "Hello " + name );
      }
      },
      // Create a Deferred
      defer = $.Deferred();
    ​
    // Set object as a promise
    defer.promise( obj );
    ​
    // Resolve the deferred
    defer.resolve( "John" );
    ​
    // Use the object as a Promise
    obj.done(function( name ) {
      obj.hello( name ); // Will alert "Hello John"
    }).hello( "Karl" ); // Will alert "Hello Karl"
    ```
      */
    def promise(): this.type = js.native
    /**
      * Return a Deferred's Promise object.
      * @param target Object onto which the promise methods have to be attached
      * @see \`{@link https://api.jquery.com/deferred.promise/ }\`
      * @since 1.5
      * @example ​ ````Create a Deferred and set two timer-based functions to either resolve or reject the Deferred after a random interval. Whichever one fires first &quot;wins&quot; and will call one of the callbacks. The second timeout has no effect since the Deferred is already complete (in a resolved or rejected state) from the first timeout action. Also set a timer-based progress notification function, and call a progress handler that adds &quot;working...&quot; to the document body.
    ```javascript
    function asyncEvent() {
      var dfd = jQuery.Deferred();
    ​
      // Resolve after a random interval
      setTimeout(function() {
      dfd.resolve( "hurray" );
      }, Math.floor( 400 + Math.random() * 2000 ) );
    ​
      // Reject after a random interval
      setTimeout(function() {
      dfd.reject( "sorry" );
      }, Math.floor( 400 + Math.random() * 2000 ) );
    ​
      // Show a "working..." message every half-second
      setTimeout(function working() {
      if ( dfd.state() === "pending" ) {
      dfd.notify( "working... " );
      setTimeout( working, 500 );
      }
      }, 1 );
    ​
      // Return the Promise so caller can't change the Deferred
      return dfd.promise();
    }
    ​
    // Attach a done, fail, and progress handler for the asyncEvent
    $.when( asyncEvent() ).then(
      function( status ) {
      alert( status + ", things are going well" );
      },
      function( status ) {
      alert( status + ", you fail this time" );
      },
      function( status ) {
      $( "body" ).append( status );
      }
    );
    ```
      */
    def promise[TTarget /* <: js.Object */](target: TTarget): this.type with TTarget = js.native
    
    /**
      * Determine the current state of a Deferred object.
      * @see \`{@link https://api.jquery.com/deferred.state/ }\`
      * @since 1.7
      */
    def state(): pending | resolved | rejected = js.native
    
    /**
      * Add handlers to be called when the Deferred object is resolved, rejected, or still in progress.
      * @param doneFilter An optional function that is called when the Deferred is resolved.
      * @param failFilter An optional function that is called when the Deferred is rejected.
      * @param progressFilter An optional function that is called when progress notifications are sent to the Deferred.
      * @see \`{@link https://api.jquery.com/deferred.then/ }\`
      * @since 1.8
      * @example ​ ````Chain tasks:
    ```javascript
    var request = $.ajax( url, { dataType: "json" } ),
      chained = request.then(function( data ) {
      return $.ajax( url2, { data: { user: data.userId } } );
      });
    ​
    chained.done(function( data ) {
      // data retrieved from url2 as provided by the first request
    });
    ```
      */
    def `then`[ARP, AJP, ANP, BRP, BJP, BNP, CRP, CJP, CNP, RRP, RJP, RNP](): PromiseBase[ARP, AJP, ANP, BRP, BJP, BNP, CRP, CJP, CNP, RRP, RJP, RNP] = js.native
    /**
      * Add handlers to be called when the Deferred object is resolved, rejected, or still in progress.
      * @param doneFilter An optional function that is called when the Deferred is resolved.
      * @param failFilter An optional function that is called when the Deferred is rejected.
      * @param progressFilter An optional function that is called when progress notifications are sent to the Deferred.
      * @see \`{@link https://api.jquery.com/deferred.then/ }\`
      * @since 1.8
      * @example ​ ````Filter the resolve value:
    ```html
    <!doctype html>
    <html lang="en">
    <head>
      <meta charset="utf-8">
      <title>deferred.then demo</title>
      <script src="https://code.jquery.com/jquery-3.3.1.js"></script>
    </head>
    <body>
    ​
    <button>Filter Resolve</button>
    <p></p>
    ​
    <script>
    var filterResolve = function() {
      var defer = $.Deferred(),
      filtered = defer.then(function( value ) {
      return value * 2;
      });
    ​
      defer.resolve( 5 );
      filtered.done(function( value ) {
      $( "p" ).html( "Value is ( 2*5 = ) 10: " + value );
      });
    };
    ​
    $( "button" ).on( "click", filterResolve );
    </script>
    ​
    </body>
    </html>
    ```
      * @example ​ ````Chain tasks:
    ```javascript
    var request = $.ajax( url, { dataType: "json" } ),
      chained = request.then(function( data ) {
      return $.ajax( url2, { data: { user: data.userId } } );
      });
    ​
    chained.done(function( data ) {
      // data retrieved from url2 as provided by the first request
    });
    ```
      */
    def `then`[ARD, AJD, AND, BRD, BJD, BND, CRD, CJD, CND, RRD, RJD, RND](
      doneFilter: js.Function4[
          /* t */ TR, 
          /* u */ UR, 
          /* v */ VR, 
          /* repeated */ SR, 
          (PromiseBase[ARD, AJD, AND, BRD, BJD, BND, CRD, CJD, CND, RRD, RJD, RND]) | Thenable[ARD] | ARD
        ]
    ): PromiseBase[ARD, AJD, AND, BRD, BJD, BND, CRD, CJD, CND, RRD, RJD, RND] = js.native
    /**
      * Add handlers to be called when the Deferred object is resolved, rejected, or still in progress.
      * @param doneFilter An optional function that is called when the Deferred is resolved.
      * @param failFilter An optional function that is called when the Deferred is rejected.
      * @param progressFilter An optional function that is called when progress notifications are sent to the Deferred.
      * @see \`{@link https://api.jquery.com/deferred.then/ }\`
      * @since 1.8
      * @example ​ ````Filter reject value:
    ```javascript
    var defer = $.Deferred(),
      filtered = defer.then( null, function( value ) {
      return value * 3;
      });
    ​
    defer.reject( 6 );
    filtered.fail(function( value ) {
      alert( "Value is ( 3*6 = ) 18: " + value );
    });
    ```
      * @example ​ ````Chain tasks:
    ```javascript
    var request = $.ajax( url, { dataType: "json" } ),
      chained = request.then(function( data ) {
      return $.ajax( url2, { data: { user: data.userId } } );
      });
    ​
    chained.done(function( data ) {
      // data retrieved from url2 as provided by the first request
    });
    ```
      */
    def `then`[ARF, AJF, ANF, BRF, BJF, BNF, CRF, CJF, CNF, RRF, RJF, RNF](
      doneFilter: Null,
      failFilter: js.Function4[
          /* t */ TJ, 
          /* u */ UJ, 
          /* v */ VJ, 
          /* repeated */ SJ, 
          (PromiseBase[ARF, AJF, ANF, BRF, BJF, BNF, CRF, CJF, CNF, RRF, RJF, RNF]) | Thenable[ARF] | ARF
        ]
    ): PromiseBase[ARF, AJF, ANF, BRF, BJF, BNF, CRF, CJF, CNF, RRF, RJF, RNF] = js.native
    def `then`[ARP, AJP, ANP, BRP, BJP, BNP, CRP, CJP, CNP, RRP, RJP, RNP](
      doneFilter: Null,
      failFilter: Null,
      progressFilter: js.Function4[
          /* t */ TN, 
          /* u */ UN, 
          /* v */ VN, 
          /* repeated */ SN, 
          (PromiseBase[ARP, AJP, ANP, BRP, BJP, BNP, CRP, CJP, CNP, RRP, RJP, RNP]) | Thenable[ANP] | ANP
        ]
    ): PromiseBase[ARP, AJP, ANP, BRP, BJP, BNP, CRP, CJP, CNP, RRP, RJP, RNP] = js.native
    /**
      * Add handlers to be called when the Deferred object is resolved, rejected, or still in progress.
      * @param doneFilter An optional function that is called when the Deferred is resolved.
      * @param failFilter An optional function that is called when the Deferred is rejected.
      * @param progressFilter An optional function that is called when progress notifications are sent to the Deferred.
      * @see \`{@link https://api.jquery.com/deferred.then/ }\`
      * @since 1.8
      * @example ​ ````Since the jQuery.get method returns a jqXHR object, which is derived from a Deferred object, we can attach handlers using the .then method.
    ```javascript
    $.get( "test.php" ).then(
      function() {
      alert( "$.get succeeded" );
      }, function() {
      alert( "$.get failed!" );
      }
    );
    ```
      * @example ​ ````Filter the resolve value:
    ```html
    <!doctype html>
    <html lang="en">
    <head>
      <meta charset="utf-8">
      <title>deferred.then demo</title>
      <script src="https://code.jquery.com/jquery-3.3.1.js"></script>
    </head>
    <body>
    ​
    <button>Filter Resolve</button>
    <p></p>
    ​
    <script>
    var filterResolve = function() {
      var defer = $.Deferred(),
      filtered = defer.then(function( value ) {
      return value * 2;
      });
    ​
      defer.resolve( 5 );
      filtered.done(function( value ) {
      $( "p" ).html( "Value is ( 2*5 = ) 10: " + value );
      });
    };
    ​
    $( "button" ).on( "click", filterResolve );
    </script>
    ​
    </body>
    </html>
    ```
      * @example ​ ````Filter reject value:
    ```javascript
    var defer = $.Deferred(),
      filtered = defer.then( null, function( value ) {
      return value * 3;
      });
    ​
    defer.reject( 6 );
    filtered.fail(function( value ) {
      alert( "Value is ( 3*6 = ) 18: " + value );
    });
    ```
      * @example ​ ````Chain tasks:
    ```javascript
    var request = $.ajax( url, { dataType: "json" } ),
      chained = request.then(function( data ) {
      return $.ajax( url2, { data: { user: data.userId } } );
      });
    ​
    chained.done(function( data ) {
      // data retrieved from url2 as provided by the first request
    });
    ```
      */
    def `then`[ARD, AJD, AND, BRD, BJD, BND, CRD, CJD, CND, RRD, RJD, RND, ARF, AJF, ANF, BRF, BJF, BNF, CRF, CJF, CNF, RRF, RJF, RNF](
      doneFilter: js.Function4[
          /* t */ TR, 
          /* u */ UR, 
          /* v */ VR, 
          /* repeated */ SR, 
          (PromiseBase[ARD, AJD, AND, BRD, BJD, BND, CRD, CJD, CND, RRD, RJD, RND]) | Thenable[ARD] | ARD
        ],
      failFilter: js.Function4[
          /* t */ TJ, 
          /* u */ UJ, 
          /* v */ VJ, 
          /* repeated */ SJ, 
          (PromiseBase[ARF, AJF, ANF, BRF, BJF, BNF, CRF, CJF, CNF, RRF, RJF, RNF]) | Thenable[ARF] | ARF
        ]
    ): PromiseBase[
        ARD | ARF, 
        AJD | AJF, 
        AND | ANF, 
        BRD | BRF, 
        BJD | BJF, 
        BND | BNF, 
        CRD | CRF, 
        CJD | CJF, 
        CND | CNF, 
        RRD | RRF, 
        RJD | RJF, 
        RND | RNF
      ] = js.native
    /**
      * Add handlers to be called when the Deferred object is resolved, rejected, or still in progress.
      * @param doneFilter An optional function that is called when the Deferred is resolved.
      * @param failFilter An optional function that is called when the Deferred is rejected.
      * @param progressFilter An optional function that is called when progress notifications are sent to the Deferred.
      * @see \`{@link https://api.jquery.com/deferred.then/ }\`
      * @since 1.8
      * @example ​ ````Filter the resolve value:
    ```html
    <!doctype html>
    <html lang="en">
    <head>
      <meta charset="utf-8">
      <title>deferred.then demo</title>
      <script src="https://code.jquery.com/jquery-3.3.1.js"></script>
    </head>
    <body>
    ​
    <button>Filter Resolve</button>
    <p></p>
    ​
    <script>
    var filterResolve = function() {
      var defer = $.Deferred(),
      filtered = defer.then(function( value ) {
      return value * 2;
      });
    ​
      defer.resolve( 5 );
      filtered.done(function( value ) {
      $( "p" ).html( "Value is ( 2*5 = ) 10: " + value );
      });
    };
    ​
    $( "button" ).on( "click", filterResolve );
    </script>
    ​
    </body>
    </html>
    ```
      * @example ​ ````Chain tasks:
    ```javascript
    var request = $.ajax( url, { dataType: "json" } ),
      chained = request.then(function( data ) {
      return $.ajax( url2, { data: { user: data.userId } } );
      });
    ​
    chained.done(function( data ) {
      // data retrieved from url2 as provided by the first request
    });
    ```
      */
    def `then`[ARD, AJD, AND, BRD, BJD, BND, CRD, CJD, CND, RRD, RJD, RND, ARP, AJP, ANP, BRP, BJP, BNP, CRP, CJP, CNP, RRP, RJP, RNP](
      doneFilter: js.Function4[
          /* t */ TR, 
          /* u */ UR, 
          /* v */ VR, 
          /* repeated */ SR, 
          (PromiseBase[ARD, AJD, AND, BRD, BJD, BND, CRD, CJD, CND, RRD, RJD, RND]) | Thenable[ARD] | ARD
        ],
      failFilter: Null,
      progressFilter: js.Function4[
          /* t */ TN, 
          /* u */ UN, 
          /* v */ VN, 
          /* repeated */ SN, 
          (PromiseBase[ARP, AJP, ANP, BRP, BJP, BNP, CRP, CJP, CNP, RRP, RJP, RNP]) | Thenable[ANP] | ANP
        ]
    ): PromiseBase[
        ARD | ARP, 
        AJD | AJP, 
        AND | ANP, 
        BRD | BRP, 
        BJD | BJP, 
        BND | BNP, 
        CRD | CRP, 
        CJD | CJP, 
        CND | CNP, 
        RRD | RRP, 
        RJD | RJP, 
        RND | RNP
      ] = js.native
    /**
      * Add handlers to be called when the Deferred object is resolved, rejected, or still in progress.
      * @param doneFilter An optional function that is called when the Deferred is resolved.
      * @param failFilter An optional function that is called when the Deferred is rejected.
      * @param progressFilter An optional function that is called when progress notifications are sent to the Deferred.
      * @see \`{@link https://api.jquery.com/deferred.then/ }\`
      * @since 1.8
      * @example ​ ````Filter reject value:
    ```javascript
    var defer = $.Deferred(),
      filtered = defer.then( null, function( value ) {
      return value * 3;
      });
    ​
    defer.reject( 6 );
    filtered.fail(function( value ) {
      alert( "Value is ( 3*6 = ) 18: " + value );
    });
    ```
      * @example ​ ````Chain tasks:
    ```javascript
    var request = $.ajax( url, { dataType: "json" } ),
      chained = request.then(function( data ) {
      return $.ajax( url2, { data: { user: data.userId } } );
      });
    ​
    chained.done(function( data ) {
      // data retrieved from url2 as provided by the first request
    });
    ```
      */
    def `then`[ARF, AJF, ANF, BRF, BJF, BNF, CRF, CJF, CNF, RRF, RJF, RNF, ARP, AJP, ANP, BRP, BJP, BNP, CRP, CJP, CNP, RRP, RJP, RNP](
      doneFilter: Null,
      failFilter: js.Function4[
          /* t */ TJ, 
          /* u */ UJ, 
          /* v */ VJ, 
          /* repeated */ SJ, 
          (PromiseBase[ARF, AJF, ANF, BRF, BJF, BNF, CRF, CJF, CNF, RRF, RJF, RNF]) | Thenable[ARF] | ARF
        ],
      progressFilter: js.Function4[
          /* t */ TN, 
          /* u */ UN, 
          /* v */ VN, 
          /* repeated */ SN, 
          (PromiseBase[ARP, AJP, ANP, BRP, BJP, BNP, CRP, CJP, CNP, RRP, RJP, RNP]) | Thenable[ANP] | ANP
        ]
    ): PromiseBase[
        ARF | ARP, 
        AJF | AJP, 
        ANF | ANP, 
        BRF | BRP, 
        BJF | BJP, 
        BNF | BNP, 
        CRF | CRP, 
        CJF | CJP, 
        CNF | CNP, 
        RRF | RRP, 
        RJF | RJP, 
        RNF | RNP
      ] = js.native
    // #endregion
    // region then
    // #region then
    /**
      * Add handlers to be called when the Deferred object is resolved, rejected, or still in progress.
      * @param doneFilter An optional function that is called when the Deferred is resolved.
      * @param failFilter An optional function that is called when the Deferred is rejected.
      * @param progressFilter An optional function that is called when progress notifications are sent to the Deferred.
      * @see \`{@link https://api.jquery.com/deferred.then/ }\`
      * @since 1.8
      * @example ​ ````Since the jQuery.get method returns a jqXHR object, which is derived from a Deferred object, we can attach handlers using the .then method.
    ```javascript
    $.get( "test.php" ).then(
      function() {
      alert( "$.get succeeded" );
      }, function() {
      alert( "$.get failed!" );
      }
    );
    ```
      * @example ​ ````Filter the resolve value:
    ```html
    <!doctype html>
    <html lang="en">
    <head>
      <meta charset="utf-8">
      <title>deferred.then demo</title>
      <script src="https://code.jquery.com/jquery-3.3.1.js"></script>
    </head>
    <body>
    ​
    <button>Filter Resolve</button>
    <p></p>
    ​
    <script>
    var filterResolve = function() {
      var defer = $.Deferred(),
      filtered = defer.then(function( value ) {
      return value * 2;
      });
    ​
      defer.resolve( 5 );
      filtered.done(function( value ) {
      $( "p" ).html( "Value is ( 2*5 = ) 10: " + value );
      });
    };
    ​
    $( "button" ).on( "click", filterResolve );
    </script>
    ​
    </body>
    </html>
    ```
      * @example ​ ````Filter reject value:
    ```javascript
    var defer = $.Deferred(),
      filtered = defer.then( null, function( value ) {
      return value * 3;
      });
    ​
    defer.reject( 6 );
    filtered.fail(function( value ) {
      alert( "Value is ( 3*6 = ) 18: " + value );
    });
    ```
      * @example ​ ````Chain tasks:
    ```javascript
    var request = $.ajax( url, { dataType: "json" } ),
      chained = request.then(function( data ) {
      return $.ajax( url2, { data: { user: data.userId } } );
      });
    ​
    chained.done(function( data ) {
      // data retrieved from url2 as provided by the first request
    });
    ```
      */
    def `then`[ARD, AJD, AND, BRD, BJD, BND, CRD, CJD, CND, RRD, RJD, RND, ARF, AJF, ANF, BRF, BJF, BNF, CRF, CJF, CNF, RRF, RJF, RNF, ARP, AJP, ANP, BRP, BJP, BNP, CRP, CJP, CNP, RRP, RJP, RNP](
      doneFilter: js.Function4[
          /* t */ TR, 
          /* u */ UR, 
          /* v */ VR, 
          /* repeated */ SR, 
          (PromiseBase[ARD, AJD, AND, BRD, BJD, BND, CRD, CJD, CND, RRD, RJD, RND]) | Thenable[ARD] | ARD
        ],
      failFilter: js.Function4[
          /* t */ TJ, 
          /* u */ UJ, 
          /* v */ VJ, 
          /* repeated */ SJ, 
          (PromiseBase[ARF, AJF, ANF, BRF, BJF, BNF, CRF, CJF, CNF, RRF, RJF, RNF]) | Thenable[ARF] | ARF
        ],
      progressFilter: js.Function4[
          /* t */ TN, 
          /* u */ UN, 
          /* v */ VN, 
          /* repeated */ SN, 
          (PromiseBase[ARP, AJP, ANP, BRP, BJP, BNP, CRP, CJP, CNP, RRP, RJP, RNP]) | Thenable[ANP] | ANP
        ]
    ): PromiseBase[
        ARD | ARF | ARP, 
        AJD | AJF | AJP, 
        AND | ANF | ANP, 
        BRD | BRF | BRP, 
        BJD | BJF | BJP, 
        BND | BNF | BNP, 
        CRD | CRF | CRP, 
        CJD | CJF | CJP, 
        CND | CNF | CNP, 
        RRD | RRF | RRP, 
        RJD | RJF | RJP, 
        RND | RNF | RNP
      ] = js.native
  }
  
  /**
    * @see \`{@link https://gist.github.com/gnarf/54829d408993526fe475#tween-hooks }\`
    * @since 1.8
    */
  // Workaround for TypeScript 2.3 which does not have support for weak types handling.
  /* Rewritten from type alias, can be one of: 
    - typingsSlinky.jquery.anon.Get[TElement]
    - typingsSlinky.jquery.anon.Set[TElement]
    - org.scalablytyped.runtime.StringDictionary[scala.Nothing]
  */
  type PropHook[TElement] = _PropHook[TElement] | StringDictionary[scala.Nothing]
  
  /**
    * @see \`{@link https://gist.github.com/gnarf/54829d408993526fe475#tween-hooks }\`
    * @since 1.8
    */
  type PropHooks = StringDictionary[PropHook[Node]]
  
  // #endregion
  // region Queue
  // #region Queue
  // TODO: Is the first element always a string or is that specific to the 'fx' queue?
  /* Inlined {  0 :string} & std.Array<jquery.JQuery.QueueFunction<TElement>> */
  @js.native
  trait Queue[TElement] extends /* n */ NumberDictionary[QueueFunction[TElement]] {
    
    var `0`: String = js.native
    
    /**
      * Combines two or more arrays.
      * @param items Additional items to add to the end of array1.
      */
    def concat(items: (js.Array[QueueFunction[TElement]] | QueueFunction[TElement])*): js.Array[QueueFunction[TElement]] = js.native
    
    /**
      * Returns the this object after copying a section of the array identified by start and end
      * to the same array starting at position target
      * @param target If target is negative, it is treated as length+target where length is the
      * length of the array.
      * @param start If start is negative, it is treated as length+start. If end is negative, it
      * is treated as length+end.
      * @param end If not specified, length of the this object is used as its default value.
      */
    def copyWithin(target: Double, start: Double): this.type = js.native
    def copyWithin(target: Double, start: Double, end: Double): this.type = js.native
    
    /**
      * Returns an iterable of key, value pairs for every entry in the array
      */
    def entries(): IterableIterator[js.Tuple2[Double, QueueFunction[TElement]]] = js.native
    
    /**
      * Determines whether all the members of an array satisfy the specified test.
      * @param predicate A function that accepts up to three arguments. The every method calls
      * the predicate function for each element in the array until the predicate returns a value
      * which is coercible to the Boolean value false, or until the end of the array.
      * @param thisArg An object to which the this keyword can refer in the predicate function.
      * If thisArg is omitted, undefined is used as the this value.
      */
    def every(
      predicate: js.Function3[
          /* value */ QueueFunction[TElement], 
          /* index */ Double, 
          /* array */ js.Array[QueueFunction[TElement]], 
          _
        ]
    ): Boolean = js.native
    def every(
      predicate: js.Function3[
          /* value */ QueueFunction[TElement], 
          /* index */ Double, 
          /* array */ js.Array[QueueFunction[TElement]], 
          _
        ],
      thisArg: js.Any
    ): Boolean = js.native
    /**
      * Determines whether all the members of an array satisfy the specified test.
      * @param predicate A function that accepts up to three arguments. The every method calls
      * the predicate function for each element in the array until the predicate returns a value
      * which is coercible to the Boolean value false, or until the end of the array.
      * @param thisArg An object to which the this keyword can refer in the predicate function.
      * If thisArg is omitted, undefined is used as the this value.
      */
    @JSName("every")
    def every_S_QueueFunctionTElement[S /* <: QueueFunction[TElement] */](
      predicate: js.Function3[
          /* value */ QueueFunction[TElement], 
          /* index */ Double, 
          /* array */ js.Array[QueueFunction[TElement]], 
          /* is S */ Boolean
        ]
    ): /* is std.Array<S> */ Boolean = js.native
    @JSName("every")
    def every_S_QueueFunctionTElement[S /* <: QueueFunction[TElement] */](
      predicate: js.Function3[
          /* value */ QueueFunction[TElement], 
          /* index */ Double, 
          /* array */ js.Array[QueueFunction[TElement]], 
          /* is S */ Boolean
        ],
      thisArg: js.Any
    ): /* is std.Array<S> */ Boolean = js.native
    
    /**
      * Returns the this object after filling the section identified by start and end with value
      * @param value value to fill array section with
      * @param start index to start filling the array at. If start is negative, it is treated as
      * length+start where length is the length of the array.
      * @param end index to stop filling the array at. If end is negative, it is treated as
      * length+end.
      */
    def fill(value: QueueFunction[TElement]): this.type = js.native
    def fill(value: QueueFunction[TElement], start: js.UndefOr[scala.Nothing], end: Double): this.type = js.native
    def fill(value: QueueFunction[TElement], start: Double): this.type = js.native
    def fill(value: QueueFunction[TElement], start: Double, end: Double): this.type = js.native
    
    /**
      * Returns the elements of an array that meet the condition specified in a callback function.
      * @param predicate A function that accepts up to three arguments. The filter method calls the predicate function one time for each element in the array.
      * @param thisArg An object to which the this keyword can refer in the predicate function. If thisArg is omitted, undefined is used as the this value.
      */
    def filter(
      predicate: js.Function3[
          /* value */ QueueFunction[TElement], 
          /* index */ Double, 
          /* array */ js.Array[QueueFunction[TElement]], 
          _
        ]
    ): js.Array[QueueFunction[TElement]] = js.native
    def filter(
      predicate: js.Function3[
          /* value */ QueueFunction[TElement], 
          /* index */ Double, 
          /* array */ js.Array[QueueFunction[TElement]], 
          _
        ],
      thisArg: js.Any
    ): js.Array[QueueFunction[TElement]] = js.native
    /**
      * Returns the elements of an array that meet the condition specified in a callback function.
      * @param predicate A function that accepts up to three arguments. The filter method calls the predicate function one time for each element in the array.
      * @param thisArg An object to which the this keyword can refer in the predicate function. If thisArg is omitted, undefined is used as the this value.
      */
    @JSName("filter")
    def filter_S_QueueFunctionTElement[S /* <: QueueFunction[TElement] */](
      predicate: js.Function3[
          /* value */ QueueFunction[TElement], 
          /* index */ Double, 
          /* array */ js.Array[QueueFunction[TElement]], 
          /* is S */ Boolean
        ]
    ): js.Array[S] = js.native
    @JSName("filter")
    def filter_S_QueueFunctionTElement[S /* <: QueueFunction[TElement] */](
      predicate: js.Function3[
          /* value */ QueueFunction[TElement], 
          /* index */ Double, 
          /* array */ js.Array[QueueFunction[TElement]], 
          /* is S */ Boolean
        ],
      thisArg: js.Any
    ): js.Array[S] = js.native
    
    def find(
      predicate: js.Function3[
          /* value */ QueueFunction[TElement], 
          /* index */ Double, 
          /* obj */ js.Array[QueueFunction[TElement]], 
          _
        ]
    ): js.UndefOr[QueueFunction[TElement]] = js.native
    def find(
      predicate: js.Function3[
          /* value */ QueueFunction[TElement], 
          /* index */ Double, 
          /* obj */ js.Array[QueueFunction[TElement]], 
          _
        ],
      thisArg: js.Any
    ): js.UndefOr[QueueFunction[TElement]] = js.native
    /**
      * Returns the value of the first element in the array where predicate is true, and undefined
      * otherwise.
      * @param predicate find calls predicate once for each element of the array, in ascending
      * order, until it finds one where predicate returns true. If such an element is found, find
      * immediately returns that element value. Otherwise, find returns undefined.
      * @param thisArg If provided, it will be used as the this value for each invocation of
      * predicate. If it is not provided, undefined is used instead.
      */
    def find[S /* <: QueueFunction[TElement] */](
      predicate: js.ThisFunction3[
          /* this */ Unit, 
          /* value */ QueueFunction[TElement], 
          /* index */ Double, 
          /* obj */ js.Array[QueueFunction[TElement]], 
          /* is S */ Boolean
        ]
    ): js.UndefOr[S] = js.native
    def find[S /* <: QueueFunction[TElement] */](
      predicate: js.ThisFunction3[
          /* this */ Unit, 
          /* value */ QueueFunction[TElement], 
          /* index */ Double, 
          /* obj */ js.Array[QueueFunction[TElement]], 
          /* is S */ Boolean
        ],
      thisArg: js.Any
    ): js.UndefOr[S] = js.native
    
    /**
      * Returns the index of the first element in the array where predicate is true, and -1
      * otherwise.
      * @param predicate find calls predicate once for each element of the array, in ascending
      * order, until it finds one where predicate returns true. If such an element is found,
      * findIndex immediately returns that element index. Otherwise, findIndex returns -1.
      * @param thisArg If provided, it will be used as the this value for each invocation of
      * predicate. If it is not provided, undefined is used instead.
      */
    def findIndex(
      predicate: js.Function3[
          /* value */ QueueFunction[TElement], 
          /* index */ Double, 
          /* obj */ js.Array[QueueFunction[TElement]], 
          _
        ]
    ): Double = js.native
    def findIndex(
      predicate: js.Function3[
          /* value */ QueueFunction[TElement], 
          /* index */ Double, 
          /* obj */ js.Array[QueueFunction[TElement]], 
          _
        ],
      thisArg: js.Any
    ): Double = js.native
    
    /**
      * Returns a new array with all sub-array elements concatenated into it recursively up to the
      * specified depth.
      *
      * @param depth The maximum recursion depth
      */
    def flat[A, D /* <: Double */](): js.Array[FlatArray[A, D]] = js.native
    def flat[A, D /* <: Double */](depth: D): js.Array[FlatArray[A, D]] = js.native
    
    /**
      * Calls a defined callback function on each element of an array. Then, flattens the result into
      * a new array.
      * This is identical to a map followed by flat with depth 1.
      *
      * @param callback A function that accepts up to three arguments. The flatMap method calls the
      * callback function one time for each element in the array.
      * @param thisArg An object to which the this keyword can refer in the callback function. If
      * thisArg is omitted, undefined is used as the this value.
      */
    def flatMap[U, This](
      callback: js.ThisFunction3[
          /* this */ This, 
          /* value */ QueueFunction[TElement], 
          /* index */ Double, 
          /* array */ js.Array[QueueFunction[TElement]], 
          U | js.Array[U]
        ]
    ): js.Array[U] = js.native
    def flatMap[U, This](
      callback: js.ThisFunction3[
          /* this */ This, 
          /* value */ QueueFunction[TElement], 
          /* index */ Double, 
          /* array */ js.Array[QueueFunction[TElement]], 
          U | js.Array[U]
        ],
      thisArg: This
    ): js.Array[U] = js.native
    
    /**
      * Performs the specified action for each element in an array.
      * @param callbackfn  A function that accepts up to three arguments. forEach calls the callbackfn function one time for each element in the array.
      * @param thisArg  An object to which the this keyword can refer in the callbackfn function. If thisArg is omitted, undefined is used as the this value.
      */
    def forEach(
      callbackfn: js.Function3[
          /* value */ QueueFunction[TElement], 
          /* index */ Double, 
          /* array */ js.Array[QueueFunction[TElement]], 
          Unit
        ]
    ): Unit = js.native
    def forEach(
      callbackfn: js.Function3[
          /* value */ QueueFunction[TElement], 
          /* index */ Double, 
          /* array */ js.Array[QueueFunction[TElement]], 
          Unit
        ],
      thisArg: js.Any
    ): Unit = js.native
    
    /**
      * Determines whether an array includes a certain element, returning true or false as appropriate.
      * @param searchElement The element to search for.
      * @param fromIndex The position in this array at which to begin searching for searchElement.
      */
    def includes(searchElement: QueueFunction[TElement]): Boolean = js.native
    def includes(searchElement: QueueFunction[TElement], fromIndex: Double): Boolean = js.native
    
    /**
      * Returns the index of the first occurrence of a value in an array.
      * @param searchElement The value to locate in the array.
      * @param fromIndex The array index at which to begin the search. If fromIndex is omitted, the search starts at index 0.
      */
    def indexOf(searchElement: QueueFunction[TElement]): Double = js.native
    def indexOf(searchElement: QueueFunction[TElement], fromIndex: Double): Double = js.native
    
    /** Iterator */
    @JSName(js.Symbol.iterator)
    var iterator: js.Function0[IterableIterator[QueueFunction[TElement]]] = js.native
    
    /**
      * Adds all the elements of an array separated by the specified separator string.
      * @param separator A string used to separate one element of an array from the next in the resulting String. If omitted, the array elements are separated with a comma.
      */
    def join(): String = js.native
    def join(separator: String): String = js.native
    
    /**
      * Returns an iterable of keys in the array
      */
    def keys(): IterableIterator[Double] = js.native
    
    /**
      * Returns the index of the last occurrence of a specified value in an array.
      * @param searchElement The value to locate in the array.
      * @param fromIndex The array index at which to begin the search. If fromIndex is omitted, the search starts at the last index in the array.
      */
    def lastIndexOf(searchElement: QueueFunction[TElement]): Double = js.native
    def lastIndexOf(searchElement: QueueFunction[TElement], fromIndex: Double): Double = js.native
    
    /**
      * Gets or sets the length of the array. This is a number one higher than the highest element defined in an array.
      */
    var length: Double = js.native
    
    /**
      * Calls a defined callback function on each element of an array, and returns an array that contains the results.
      * @param callbackfn A function that accepts up to three arguments. The map method calls the callbackfn function one time for each element in the array.
      * @param thisArg An object to which the this keyword can refer in the callbackfn function. If thisArg is omitted, undefined is used as the this value.
      */
    def map[U](
      callbackfn: js.Function3[
          /* value */ QueueFunction[TElement], 
          /* index */ Double, 
          /* array */ js.Array[QueueFunction[TElement]], 
          U
        ]
    ): js.Array[U] = js.native
    def map[U](
      callbackfn: js.Function3[
          /* value */ QueueFunction[TElement], 
          /* index */ Double, 
          /* array */ js.Array[QueueFunction[TElement]], 
          U
        ],
      thisArg: js.Any
    ): js.Array[U] = js.native
    
    /**
      * Removes the last element from an array and returns it.
      */
    def pop(): js.UndefOr[QueueFunction[TElement]] = js.native
    
    /**
      * Appends new elements to an array, and returns the new length of the array.
      * @param items New elements of the Array.
      */
    def push(items: QueueFunction[TElement]*): Double = js.native
    
    /**
      * Calls the specified callback function for all the elements in an array. The return value of the callback function is the accumulated result, and is provided as an argument in the next call to the callback function.
      * @param callbackfn A function that accepts up to four arguments. The reduce method calls the callbackfn function one time for each element in the array.
      * @param initialValue If initialValue is specified, it is used as the initial value to start the accumulation. The first call to the callbackfn function provides this value as an argument instead of an array value.
      */
    def reduce(
      callbackfn: js.Function4[
          /* previousValue */ QueueFunction[TElement], 
          /* currentValue */ QueueFunction[TElement], 
          /* currentIndex */ Double, 
          /* array */ js.Array[QueueFunction[TElement]], 
          QueueFunction[TElement]
        ]
    ): QueueFunction[TElement] = js.native
    def reduce(
      callbackfn: js.Function4[
          /* previousValue */ QueueFunction[TElement], 
          /* currentValue */ QueueFunction[TElement], 
          /* currentIndex */ Double, 
          /* array */ js.Array[QueueFunction[TElement]], 
          QueueFunction[TElement]
        ],
      initialValue: QueueFunction[TElement]
    ): QueueFunction[TElement] = js.native
    /**
      * Calls the specified callback function for all the elements in an array. The return value of the callback function is the accumulated result, and is provided as an argument in the next call to the callback function.
      * @param callbackfn A function that accepts up to four arguments. The reduce method calls the callbackfn function one time for each element in the array.
      * @param initialValue If initialValue is specified, it is used as the initial value to start the accumulation. The first call to the callbackfn function provides this value as an argument instead of an array value.
      */
    def reduce[U](
      callbackfn: js.Function4[
          /* previousValue */ U, 
          /* currentValue */ QueueFunction[TElement], 
          /* currentIndex */ Double, 
          /* array */ js.Array[QueueFunction[TElement]], 
          U
        ],
      initialValue: U
    ): U = js.native
    
    /**
      * Calls the specified callback function for all the elements in an array, in descending order. The return value of the callback function is the accumulated result, and is provided as an argument in the next call to the callback function.
      * @param callbackfn A function that accepts up to four arguments. The reduceRight method calls the callbackfn function one time for each element in the array.
      * @param initialValue If initialValue is specified, it is used as the initial value to start the accumulation. The first call to the callbackfn function provides this value as an argument instead of an array value.
      */
    def reduceRight(
      callbackfn: js.Function4[
          /* previousValue */ QueueFunction[TElement], 
          /* currentValue */ QueueFunction[TElement], 
          /* currentIndex */ Double, 
          /* array */ js.Array[QueueFunction[TElement]], 
          QueueFunction[TElement]
        ]
    ): QueueFunction[TElement] = js.native
    def reduceRight(
      callbackfn: js.Function4[
          /* previousValue */ QueueFunction[TElement], 
          /* currentValue */ QueueFunction[TElement], 
          /* currentIndex */ Double, 
          /* array */ js.Array[QueueFunction[TElement]], 
          QueueFunction[TElement]
        ],
      initialValue: QueueFunction[TElement]
    ): QueueFunction[TElement] = js.native
    /**
      * Calls the specified callback function for all the elements in an array, in descending order. The return value of the callback function is the accumulated result, and is provided as an argument in the next call to the callback function.
      * @param callbackfn A function that accepts up to four arguments. The reduceRight method calls the callbackfn function one time for each element in the array.
      * @param initialValue If initialValue is specified, it is used as the initial value to start the accumulation. The first call to the callbackfn function provides this value as an argument instead of an array value.
      */
    def reduceRight[U](
      callbackfn: js.Function4[
          /* previousValue */ U, 
          /* currentValue */ QueueFunction[TElement], 
          /* currentIndex */ Double, 
          /* array */ js.Array[QueueFunction[TElement]], 
          U
        ],
      initialValue: U
    ): U = js.native
    
    /**
      * Reverses the elements in an Array.
      */
    def reverse(): js.Array[QueueFunction[TElement]] = js.native
    
    /**
      * Removes the first element from an array and returns it.
      */
    def shift(): js.UndefOr[QueueFunction[TElement]] = js.native
    
    /**
      * Returns a section of an array.
      * @param start The beginning of the specified portion of the array.
      * @param end The end of the specified portion of the array. This is exclusive of the element at the index 'end'.
      */
    def slice(): js.Array[QueueFunction[TElement]] = js.native
    def slice(start: js.UndefOr[scala.Nothing], end: Double): js.Array[QueueFunction[TElement]] = js.native
    def slice(start: Double): js.Array[QueueFunction[TElement]] = js.native
    def slice(start: Double, end: Double): js.Array[QueueFunction[TElement]] = js.native
    
    /**
      * Determines whether the specified callback function returns true for any element of an array.
      * @param predicate A function that accepts up to three arguments. The some method calls
      * the predicate function for each element in the array until the predicate returns a value
      * which is coercible to the Boolean value true, or until the end of the array.
      * @param thisArg An object to which the this keyword can refer in the predicate function.
      * If thisArg is omitted, undefined is used as the this value.
      */
    def some(
      predicate: js.Function3[
          /* value */ QueueFunction[TElement], 
          /* index */ Double, 
          /* array */ js.Array[QueueFunction[TElement]], 
          _
        ]
    ): Boolean = js.native
    def some(
      predicate: js.Function3[
          /* value */ QueueFunction[TElement], 
          /* index */ Double, 
          /* array */ js.Array[QueueFunction[TElement]], 
          _
        ],
      thisArg: js.Any
    ): Boolean = js.native
    
    /**
      * Sorts an array.
      * @param compareFn Function used to determine the order of the elements. It is expected to return
      * a negative value if first argument is less than second argument, zero if they're equal and a positive
      * value otherwise. If omitted, the elements are sorted in ascending, ASCII character order.
      * ```ts
      * [11,2,22,1].sort((a, b) => a - b)
      * ```
      */
    def sort(): this.type = js.native
    def sort(compareFn: js.Function2[/* a */ QueueFunction[TElement], /* b */ QueueFunction[TElement], Double]): this.type = js.native
    
    /**
      * Removes elements from an array and, if necessary, inserts new elements in their place, returning the deleted elements.
      * @param start The zero-based location in the array from which to start removing elements.
      * @param deleteCount The number of elements to remove.
      */
    def splice(start: Double): js.Array[QueueFunction[TElement]] = js.native
    def splice(start: Double, deleteCount: Double): js.Array[QueueFunction[TElement]] = js.native
    /**
      * Removes elements from an array and, if necessary, inserts new elements in their place, returning the deleted elements.
      * @param start The zero-based location in the array from which to start removing elements.
      * @param deleteCount The number of elements to remove.
      * @param items Elements to insert into the array in place of the deleted elements.
      */
    def splice(start: Double, deleteCount: Double, items: QueueFunction[TElement]*): js.Array[QueueFunction[TElement]] = js.native
    
    /**
      * Returns an object whose properties have the value 'true'
      * when they will be absent when used in a 'with' statement.
      */
    @JSName(js.Symbol.unscopables)
    var unscopables: js.Function0[CopyWithin] = js.native
    
    /**
      * Inserts new elements at the start of an array.
      * @param items  Elements to insert at the start of the Array.
      */
    def unshift(items: QueueFunction[TElement]*): Double = js.native
    
    /**
      * Returns an iterable of values in the array
      */
    def values(): IterableIterator[QueueFunction[TElement]] = js.native
  }
  
  type QueueFunction[TElement] = js.ThisFunction1[/* this */ TElement, /* next */ js.Function0[Unit], Unit]
  
  @js.native
  trait ResizeEvent[TDelegateTarget, TData, TCurrentTarget, TTarget] extends EventBase[TDelegateTarget, TData, TCurrentTarget, TTarget] {
    
    @JSName("type")
    var type_ResizeEvent: resize = js.native
  }
  object ResizeEvent {
    
    @scala.inline
    def apply[TDelegateTarget, TData, TCurrentTarget, TTarget](
      bubbles: Boolean,
      cancelable: Boolean,
      currentTarget: TCurrentTarget,
      data: TData,
      delegateTarget: TDelegateTarget,
      eventPhase: Double,
      isDefaultPrevented: () => Boolean,
      isImmediatePropagationStopped: () => Boolean,
      isPropagationStopped: () => Boolean,
      preventDefault: () => Unit,
      stopImmediatePropagation: () => Unit,
      stopPropagation: () => Unit,
      target: TTarget,
      timeStamp: Double,
      `type`: resize
    ): ResizeEvent[TDelegateTarget, TData, TCurrentTarget, TTarget] = {
      val __obj = js.Dynamic.literal(bubbles = bubbles.asInstanceOf[js.Any], cancelable = cancelable.asInstanceOf[js.Any], currentTarget = currentTarget.asInstanceOf[js.Any], data = data.asInstanceOf[js.Any], delegateTarget = delegateTarget.asInstanceOf[js.Any], eventPhase = eventPhase.asInstanceOf[js.Any], isDefaultPrevented = js.Any.fromFunction0(isDefaultPrevented), isImmediatePropagationStopped = js.Any.fromFunction0(isImmediatePropagationStopped), isPropagationStopped = js.Any.fromFunction0(isPropagationStopped), preventDefault = js.Any.fromFunction0(preventDefault), stopImmediatePropagation = js.Any.fromFunction0(stopImmediatePropagation), stopPropagation = js.Any.fromFunction0(stopPropagation), target = target.asInstanceOf[js.Any], timeStamp = timeStamp.asInstanceOf[js.Any])
      __obj.updateDynamic("type")(`type`.asInstanceOf[js.Any])
      __obj.asInstanceOf[ResizeEvent[TDelegateTarget, TData, TCurrentTarget, TTarget]]
    }
    
    @scala.inline
    implicit class ResizeEventMutableBuilder[Self <: ResizeEvent[_, _, _, _], TDelegateTarget, TData, TCurrentTarget, TTarget] (val x: Self with (ResizeEvent[TDelegateTarget, TData, TCurrentTarget, TTarget])) extends AnyVal {
      
      @scala.inline
      def setType(value: resize): Self = StObject.set(x, "type", value.asInstanceOf[js.Any])
    }
  }
  
  @js.native
  trait ScrollEvent[TDelegateTarget, TData, TCurrentTarget, TTarget] extends EventBase[TDelegateTarget, TData, TCurrentTarget, TTarget] {
    
    @JSName("type")
    var type_ScrollEvent: scroll = js.native
  }
  object ScrollEvent {
    
    @scala.inline
    def apply[TDelegateTarget, TData, TCurrentTarget, TTarget](
      bubbles: Boolean,
      cancelable: Boolean,
      currentTarget: TCurrentTarget,
      data: TData,
      delegateTarget: TDelegateTarget,
      eventPhase: Double,
      isDefaultPrevented: () => Boolean,
      isImmediatePropagationStopped: () => Boolean,
      isPropagationStopped: () => Boolean,
      preventDefault: () => Unit,
      stopImmediatePropagation: () => Unit,
      stopPropagation: () => Unit,
      target: TTarget,
      timeStamp: Double,
      `type`: scroll
    ): ScrollEvent[TDelegateTarget, TData, TCurrentTarget, TTarget] = {
      val __obj = js.Dynamic.literal(bubbles = bubbles.asInstanceOf[js.Any], cancelable = cancelable.asInstanceOf[js.Any], currentTarget = currentTarget.asInstanceOf[js.Any], data = data.asInstanceOf[js.Any], delegateTarget = delegateTarget.asInstanceOf[js.Any], eventPhase = eventPhase.asInstanceOf[js.Any], isDefaultPrevented = js.Any.fromFunction0(isDefaultPrevented), isImmediatePropagationStopped = js.Any.fromFunction0(isImmediatePropagationStopped), isPropagationStopped = js.Any.fromFunction0(isPropagationStopped), preventDefault = js.Any.fromFunction0(preventDefault), stopImmediatePropagation = js.Any.fromFunction0(stopImmediatePropagation), stopPropagation = js.Any.fromFunction0(stopPropagation), target = target.asInstanceOf[js.Any], timeStamp = timeStamp.asInstanceOf[js.Any])
      __obj.updateDynamic("type")(`type`.asInstanceOf[js.Any])
      __obj.asInstanceOf[ScrollEvent[TDelegateTarget, TData, TCurrentTarget, TTarget]]
    }
    
    @scala.inline
    implicit class ScrollEventMutableBuilder[Self <: ScrollEvent[_, _, _, _], TDelegateTarget, TData, TCurrentTarget, TTarget] (val x: Self with (ScrollEvent[TDelegateTarget, TData, TCurrentTarget, TTarget])) extends AnyVal {
      
      @scala.inline
      def setType(value: scroll): Self = StObject.set(x, "type", value.asInstanceOf[js.Any])
    }
  }
  
  @js.native
  trait SelectEvent[TDelegateTarget, TData, TCurrentTarget, TTarget] extends EventBase[TDelegateTarget, TData, TCurrentTarget, TTarget] {
    
    @JSName("type")
    var type_SelectEvent: select = js.native
  }
  object SelectEvent {
    
    @scala.inline
    def apply[TDelegateTarget, TData, TCurrentTarget, TTarget](
      bubbles: Boolean,
      cancelable: Boolean,
      currentTarget: TCurrentTarget,
      data: TData,
      delegateTarget: TDelegateTarget,
      eventPhase: Double,
      isDefaultPrevented: () => Boolean,
      isImmediatePropagationStopped: () => Boolean,
      isPropagationStopped: () => Boolean,
      preventDefault: () => Unit,
      stopImmediatePropagation: () => Unit,
      stopPropagation: () => Unit,
      target: TTarget,
      timeStamp: Double,
      `type`: select
    ): SelectEvent[TDelegateTarget, TData, TCurrentTarget, TTarget] = {
      val __obj = js.Dynamic.literal(bubbles = bubbles.asInstanceOf[js.Any], cancelable = cancelable.asInstanceOf[js.Any], currentTarget = currentTarget.asInstanceOf[js.Any], data = data.asInstanceOf[js.Any], delegateTarget = delegateTarget.asInstanceOf[js.Any], eventPhase = eventPhase.asInstanceOf[js.Any], isDefaultPrevented = js.Any.fromFunction0(isDefaultPrevented), isImmediatePropagationStopped = js.Any.fromFunction0(isImmediatePropagationStopped), isPropagationStopped = js.Any.fromFunction0(isPropagationStopped), preventDefault = js.Any.fromFunction0(preventDefault), stopImmediatePropagation = js.Any.fromFunction0(stopImmediatePropagation), stopPropagation = js.Any.fromFunction0(stopPropagation), target = target.asInstanceOf[js.Any], timeStamp = timeStamp.asInstanceOf[js.Any])
      __obj.updateDynamic("type")(`type`.asInstanceOf[js.Any])
      __obj.asInstanceOf[SelectEvent[TDelegateTarget, TData, TCurrentTarget, TTarget]]
    }
    
    @scala.inline
    implicit class SelectEventMutableBuilder[Self <: SelectEvent[_, _, _, _], TDelegateTarget, TData, TCurrentTarget, TTarget] (val x: Self with (SelectEvent[TDelegateTarget, TData, TCurrentTarget, TTarget])) extends AnyVal {
      
      @scala.inline
      def setType(value: select): Self = StObject.set(x, "type", value.asInstanceOf[js.Any])
    }
  }
  
  /**
    * A selector is used in jQuery to select DOM elements from a DOM document. That document is, in most cases, the DOM document present in all browsers, but can also be an XML document received via Ajax.
    */
  type Selector = String
  
  @js.native
  trait Selectors
    extends typingsSlinky.sizzle.mod.Selectors {
    
    /**
      * @deprecated ​ Deprecated since 3.0. Use \`{@link Selectors#pseudos }\`.
      *
      * **Cause**: The standard way to add new custom selectors through jQuery is `jQuery.expr.pseudos`. These two other aliases are deprecated, although they still work as of jQuery 3.0.
      *
      * **Solution**: Rename any of the older usage to `jQuery.expr.pseudos`. The functionality is identical.
      */
    @JSName(":")
    var Colon: PseudoFunctions = js.native
  }
  object Selectors {
    
    @scala.inline
    def apply(
      Colon: PseudoFunctions,
      attrHandle: AttrHandleFunctions,
      cacheLength: Double,
      createPseudo: CreatePseudoFunction => PseudoFunction,
      filter: FilterFunctions,
      find: FindFunctions,
      `match`: Matches,
      preFilter: PreFilterFunctions,
      pseudos: PseudoFunctions,
      setFilters: SetFilterFunctions
    ): Selectors = {
      val __obj = js.Dynamic.literal(attrHandle = attrHandle.asInstanceOf[js.Any], cacheLength = cacheLength.asInstanceOf[js.Any], createPseudo = js.Any.fromFunction1(createPseudo), filter = filter.asInstanceOf[js.Any], find = find.asInstanceOf[js.Any], preFilter = preFilter.asInstanceOf[js.Any], pseudos = pseudos.asInstanceOf[js.Any], setFilters = setFilters.asInstanceOf[js.Any])
      __obj.updateDynamic(":")(Colon.asInstanceOf[js.Any])
      __obj.updateDynamic("match")(`match`.asInstanceOf[js.Any])
      __obj.asInstanceOf[Selectors]
    }
    
    @scala.inline
    implicit class SelectorsMutableBuilder[Self <: Selectors] (val x: Self) extends AnyVal {
      
      @scala.inline
      def setColon(value: PseudoFunctions): Self = StObject.set(x, ":", value.asInstanceOf[js.Any])
    }
  }
  
  // region Special event hooks
  // #region Special event hooks
  /**
    * The jQuery special event hooks are a set of per-event-name functions and properties that allow code to control the behavior of event processing within jQuery. The mechanism is similar to `fixHooks` in that the special event information is stored in `jQuery.event.special.NAME`, where `NAME` is the name of the special event. Event names are case sensitive.
    *
    * As with `fixHooks`, the special event hooks design assumes it will be very rare that two unrelated pieces of code want to process the same event name. Special event authors who need to modify events with existing hooks will need to take precautions to avoid introducing unwanted side-effects by clobbering those hooks.
    * @see \`{@link https://learn.jquery.com/events/event-extensions/#special-event-hooks }\`
    */
  // Workaround for TypeScript 2.3 which does not have support for weak types handling.
  /* Rewritten from type alias, can be one of: 
    - typingsSlinky.jquery.anon.NoBubble
    - typingsSlinky.jquery.anon.BindType
    - typingsSlinky.jquery.anon.DelegateType
    - typingsSlinky.jquery.anon.Setup[TTarget, TData]
    - typingsSlinky.jquery.anon.Teardown[TTarget]
    - typingsSlinky.jquery.anon.Add[TTarget, TData]
    - typingsSlinky.jquery.anon.Remove[TTarget, TData]
    - typingsSlinky.jquery.anon.Trigger[TTarget, TData]
    - typingsSlinky.jquery.anon.Default[TTarget, TData]
    - typingsSlinky.jquery.anon.Handle[TTarget, TData]
    - typingsSlinky.jquery.anon.PreDispatch[TTarget]
    - typingsSlinky.jquery.anon.PostDispatch[TTarget]
    - org.scalablytyped.runtime.StringDictionary[scala.Nothing]
  */
  type SpecialEventHook[TTarget, TData] = (_SpecialEventHook[TTarget, TData]) | StringDictionary[scala.Nothing]
  
  type SpecialEventHooks = StringDictionary[SpecialEventHook[EventTarget, js.Any]]
  
  // #endregion
  // region Speed
  // #region Speed
  // Workaround for TypeScript 2.3 which does not have support for weak types handling.
  /* Rewritten from type alias, can be one of: 
    - typingsSlinky.jquery.anon.Duration
    - typingsSlinky.jquery.anon.Easing
    - typingsSlinky.jquery.anon.Complete[TElement]
    - org.scalablytyped.runtime.StringDictionary[scala.Nothing]
  */
  type SpeedSettings[TElement] = _SpeedSettings[TElement] | StringDictionary[scala.Nothing]
  
  @js.native
  trait SubmitEvent[TDelegateTarget, TData, TCurrentTarget, TTarget] extends EventBase[TDelegateTarget, TData, TCurrentTarget, TTarget] {
    
    @JSName("type")
    var type_SubmitEvent: submit = js.native
  }
  object SubmitEvent {
    
    @scala.inline
    def apply[TDelegateTarget, TData, TCurrentTarget, TTarget](
      bubbles: Boolean,
      cancelable: Boolean,
      currentTarget: TCurrentTarget,
      data: TData,
      delegateTarget: TDelegateTarget,
      eventPhase: Double,
      isDefaultPrevented: () => Boolean,
      isImmediatePropagationStopped: () => Boolean,
      isPropagationStopped: () => Boolean,
      preventDefault: () => Unit,
      stopImmediatePropagation: () => Unit,
      stopPropagation: () => Unit,
      target: TTarget,
      timeStamp: Double,
      `type`: submit
    ): SubmitEvent[TDelegateTarget, TData, TCurrentTarget, TTarget] = {
      val __obj = js.Dynamic.literal(bubbles = bubbles.asInstanceOf[js.Any], cancelable = cancelable.asInstanceOf[js.Any], currentTarget = currentTarget.asInstanceOf[js.Any], data = data.asInstanceOf[js.Any], delegateTarget = delegateTarget.asInstanceOf[js.Any], eventPhase = eventPhase.asInstanceOf[js.Any], isDefaultPrevented = js.Any.fromFunction0(isDefaultPrevented), isImmediatePropagationStopped = js.Any.fromFunction0(isImmediatePropagationStopped), isPropagationStopped = js.Any.fromFunction0(isPropagationStopped), preventDefault = js.Any.fromFunction0(preventDefault), stopImmediatePropagation = js.Any.fromFunction0(stopImmediatePropagation), stopPropagation = js.Any.fromFunction0(stopPropagation), target = target.asInstanceOf[js.Any], timeStamp = timeStamp.asInstanceOf[js.Any])
      __obj.updateDynamic("type")(`type`.asInstanceOf[js.Any])
      __obj.asInstanceOf[SubmitEvent[TDelegateTarget, TData, TCurrentTarget, TTarget]]
    }
    
    @scala.inline
    implicit class SubmitEventMutableBuilder[Self <: SubmitEvent[_, _, _, _], TDelegateTarget, TData, TCurrentTarget, TTarget] (val x: Self with (SubmitEvent[TDelegateTarget, TData, TCurrentTarget, TTarget])) extends AnyVal {
      
      @scala.inline
      def setType(value: submit): Self = StObject.set(x, "type", value.asInstanceOf[js.Any])
    }
  }
  
  // #endregion
  // region Deferred
  // #region Deferred
  /**
    * Any object that has a then method.
    */
  type Thenable[T] = js.Thenable[T]
  
  @js.native
  trait TickFunction[TElement] extends StObject {
    
    def apply(): js.Any = js.native
    
    var anim: Animation[TElement] = js.native
    
    var elem: TElement = js.native
    
    var queue: Boolean | String = js.native
  }
  
  @js.native
  trait TouchCancelEvent[TDelegateTarget, TData, TCurrentTarget, TTarget] extends TouchEventBase[TDelegateTarget, TData, TCurrentTarget, TTarget] {
    
    @JSName("type")
    var type_TouchCancelEvent: touchcancel = js.native
  }
  object TouchCancelEvent {
    
    @scala.inline
    def apply[TDelegateTarget, TData, TCurrentTarget, TTarget](
      altKey: Boolean,
      bubbles: Boolean,
      cancelable: Boolean,
      changedTouches: TouchList,
      ctrlKey: Boolean,
      currentTarget: TCurrentTarget,
      data: TData,
      delegateTarget: TDelegateTarget,
      detail: Double,
      eventPhase: Double,
      isDefaultPrevented: () => Boolean,
      isImmediatePropagationStopped: () => Boolean,
      isPropagationStopped: () => Boolean,
      metaKey: Boolean,
      preventDefault: () => Unit,
      shiftKey: Boolean,
      stopImmediatePropagation: () => Unit,
      stopPropagation: () => Unit,
      target: TTarget,
      targetTouches: TouchList,
      timeStamp: Double,
      touches: TouchList,
      `type`: touchcancel,
      view: Window
    ): TouchCancelEvent[TDelegateTarget, TData, TCurrentTarget, TTarget] = {
      val __obj = js.Dynamic.literal(altKey = altKey.asInstanceOf[js.Any], bubbles = bubbles.asInstanceOf[js.Any], cancelable = cancelable.asInstanceOf[js.Any], changedTouches = changedTouches.asInstanceOf[js.Any], ctrlKey = ctrlKey.asInstanceOf[js.Any], currentTarget = currentTarget.asInstanceOf[js.Any], data = data.asInstanceOf[js.Any], delegateTarget = delegateTarget.asInstanceOf[js.Any], detail = detail.asInstanceOf[js.Any], eventPhase = eventPhase.asInstanceOf[js.Any], isDefaultPrevented = js.Any.fromFunction0(isDefaultPrevented), isImmediatePropagationStopped = js.Any.fromFunction0(isImmediatePropagationStopped), isPropagationStopped = js.Any.fromFunction0(isPropagationStopped), metaKey = metaKey.asInstanceOf[js.Any], preventDefault = js.Any.fromFunction0(preventDefault), shiftKey = shiftKey.asInstanceOf[js.Any], stopImmediatePropagation = js.Any.fromFunction0(stopImmediatePropagation), stopPropagation = js.Any.fromFunction0(stopPropagation), target = target.asInstanceOf[js.Any], targetTouches = targetTouches.asInstanceOf[js.Any], timeStamp = timeStamp.asInstanceOf[js.Any], touches = touches.asInstanceOf[js.Any], view = view.asInstanceOf[js.Any])
      __obj.updateDynamic("type")(`type`.asInstanceOf[js.Any])
      __obj.asInstanceOf[TouchCancelEvent[TDelegateTarget, TData, TCurrentTarget, TTarget]]
    }
    
    @scala.inline
    implicit class TouchCancelEventMutableBuilder[Self <: TouchCancelEvent[_, _, _, _], TDelegateTarget, TData, TCurrentTarget, TTarget] (val x: Self with (TouchCancelEvent[TDelegateTarget, TData, TCurrentTarget, TTarget])) extends AnyVal {
      
      @scala.inline
      def setType(value: touchcancel): Self = StObject.set(x, "type", value.asInstanceOf[js.Any])
    }
  }
  
  @js.native
  trait TouchEndEvent[TDelegateTarget, TData, TCurrentTarget, TTarget] extends TouchEventBase[TDelegateTarget, TData, TCurrentTarget, TTarget] {
    
    @JSName("type")
    var type_TouchEndEvent: touchend = js.native
  }
  object TouchEndEvent {
    
    @scala.inline
    def apply[TDelegateTarget, TData, TCurrentTarget, TTarget](
      altKey: Boolean,
      bubbles: Boolean,
      cancelable: Boolean,
      changedTouches: TouchList,
      ctrlKey: Boolean,
      currentTarget: TCurrentTarget,
      data: TData,
      delegateTarget: TDelegateTarget,
      detail: Double,
      eventPhase: Double,
      isDefaultPrevented: () => Boolean,
      isImmediatePropagationStopped: () => Boolean,
      isPropagationStopped: () => Boolean,
      metaKey: Boolean,
      preventDefault: () => Unit,
      shiftKey: Boolean,
      stopImmediatePropagation: () => Unit,
      stopPropagation: () => Unit,
      target: TTarget,
      targetTouches: TouchList,
      timeStamp: Double,
      touches: TouchList,
      `type`: touchend,
      view: Window
    ): TouchEndEvent[TDelegateTarget, TData, TCurrentTarget, TTarget] = {
      val __obj = js.Dynamic.literal(altKey = altKey.asInstanceOf[js.Any], bubbles = bubbles.asInstanceOf[js.Any], cancelable = cancelable.asInstanceOf[js.Any], changedTouches = changedTouches.asInstanceOf[js.Any], ctrlKey = ctrlKey.asInstanceOf[js.Any], currentTarget = currentTarget.asInstanceOf[js.Any], data = data.asInstanceOf[js.Any], delegateTarget = delegateTarget.asInstanceOf[js.Any], detail = detail.asInstanceOf[js.Any], eventPhase = eventPhase.asInstanceOf[js.Any], isDefaultPrevented = js.Any.fromFunction0(isDefaultPrevented), isImmediatePropagationStopped = js.Any.fromFunction0(isImmediatePropagationStopped), isPropagationStopped = js.Any.fromFunction0(isPropagationStopped), metaKey = metaKey.asInstanceOf[js.Any], preventDefault = js.Any.fromFunction0(preventDefault), shiftKey = shiftKey.asInstanceOf[js.Any], stopImmediatePropagation = js.Any.fromFunction0(stopImmediatePropagation), stopPropagation = js.Any.fromFunction0(stopPropagation), target = target.asInstanceOf[js.Any], targetTouches = targetTouches.asInstanceOf[js.Any], timeStamp = timeStamp.asInstanceOf[js.Any], touches = touches.asInstanceOf[js.Any], view = view.asInstanceOf[js.Any])
      __obj.updateDynamic("type")(`type`.asInstanceOf[js.Any])
      __obj.asInstanceOf[TouchEndEvent[TDelegateTarget, TData, TCurrentTarget, TTarget]]
    }
    
    @scala.inline
    implicit class TouchEndEventMutableBuilder[Self <: TouchEndEvent[_, _, _, _], TDelegateTarget, TData, TCurrentTarget, TTarget] (val x: Self with (TouchEndEvent[TDelegateTarget, TData, TCurrentTarget, TTarget])) extends AnyVal {
      
      @scala.inline
      def setType(value: touchend): Self = StObject.set(x, "type", value.asInstanceOf[js.Any])
    }
  }
  
  // #endregion
  // region TouchEvent
  // #region TouchEvent
  @js.native
  trait TouchEventBase[TDelegateTarget, TData, TCurrentTarget, TTarget] extends UIEventBase[TDelegateTarget, TData, TCurrentTarget, TTarget] {
    
    // MouseEvent, KeyboardEvent, TouchEvent
    @JSName("altKey")
    var altKey_TouchEventBase: Boolean = js.native
    
    // MouseEvent
    @JSName("button")
    var button_TouchEventBase: js.UndefOr[scala.Nothing] = js.native
    
    @JSName("buttons")
    var buttons_TouchEventBase: js.UndefOr[scala.Nothing] = js.native
    
    // TouchEvent
    @JSName("changedTouches")
    var changedTouches_TouchEventBase: TouchList = js.native
    
    /** @deprecated */
    @JSName("charCode")
    var charCode_TouchEventBase: js.UndefOr[scala.Nothing] = js.native
    
    // KeyboardEvent
    /** @deprecated */
    @JSName("char")
    var char_TouchEventBase: js.UndefOr[scala.Nothing] = js.native
    
    @JSName("clientX")
    var clientX_TouchEventBase: js.UndefOr[scala.Nothing] = js.native
    
    @JSName("clientY")
    var clientY_TouchEventBase: js.UndefOr[scala.Nothing] = js.native
    
    @JSName("ctrlKey")
    var ctrlKey_TouchEventBase: Boolean = js.native
    
    /** @deprecated */
    @JSName("keyCode")
    var keyCode_TouchEventBase: js.UndefOr[scala.Nothing] = js.native
    
    @JSName("key")
    var key_TouchEventBase: js.UndefOr[scala.Nothing] = js.native
    
    /**
      * Indicates whether the META key was pressed when the event fired.
      * @see \`{@link https://api.jquery.com/event.metaKey/ }\`
      * @since 1.0.4
      * @example ​ ````Determine whether the META key was pressed when the event fired.
    ```html
    <!doctype html>
    <html lang="en">
    <head>
      <meta charset="utf-8">
      <title>event.metaKey demo</title>
      <style>
      body {
      background-color: #eef;
      }
      div {
      padding: 20px;
      }
      </style>
      <script src="https://code.jquery.com/jquery-3.3.1.js"></script>
    </head>
    <body>
    ​
    <button value="Test" name="Test" id="checkMetaKey">Click me!</button>
    <div id="display"></div>
    ​
    <script>
    $( "#checkMetaKey" ).click(function( event ) {
      $( "#display" ).text( event.metaKey );
    });
    </script>
    ​
    </body>
    </html>
    ```
      */
    @JSName("metaKey")
    var metaKey_TouchEventBase: Boolean = js.native
    
    @JSName("offsetX")
    var offsetX_TouchEventBase: js.UndefOr[scala.Nothing] = js.native
    
    @JSName("offsetY")
    var offsetY_TouchEventBase: js.UndefOr[scala.Nothing] = js.native
    
    @JSName("originalEvent")
    var originalEvent_TouchEventBase: js.UndefOr[org.scalajs.dom.raw.TouchEvent] = js.native
    
    /**
      * The mouse position relative to the left edge of the document.
      * @see \`{@link https://api.jquery.com/event.pageX/ }\`
      * @since 1.0.4
      * @example ​ ````Show the mouse position relative to the left and top edges of the document (within this iframe).
    ```html
    <!doctype html>
    <html lang="en">
    <head>
      <meta charset="utf-8">
      <title>event.pageX demo</title>
      <style>
      body {
      background-color: #eef;
      }
      div {
      padding: 20px;
      }
      </style>
      <script src="https://code.jquery.com/jquery-3.3.1.js"></script>
    </head>
    <body>
    ​
    <div id="log"></div>
    ​
    <script>
    $( document ).on( "mousemove", function( event ) {
      $( "#log" ).text( "pageX: " + event.pageX + ", pageY: " + event.pageY );
    });
    </script>
    ​
    </body>
    </html>
    ```
      */
    @JSName("pageX")
    var pageX_TouchEventBase: js.UndefOr[scala.Nothing] = js.native
    
    /**
      * The mouse position relative to the top edge of the document.
      * @see \`{@link https://api.jquery.com/event.pageY/ }\`
      * @since 1.0.4
      * @example ​ ````Show the mouse position relative to the left and top edges of the document (within this iframe).
    ```html
    <!doctype html>
    <html lang="en">
    <head>
      <meta charset="utf-8">
      <title>event.pageY demo</title>
      <style>
      body {
      background-color: #eef;
      }
      div {
      padding: 20px;
      }
      </style>
      <script src="https://code.jquery.com/jquery-3.3.1.js"></script>
    </head>
    <body>
    ​
    <div id="log"></div>
    ​
    <script>
    $( document ).on( "mousemove", function( event ) {
      $( "#log" ).text( "pageX: " + event.pageX + ", pageY: " + event.pageY );
    });
    </script>
    ​
    </body>
    </html>
    ```
      */
    @JSName("pageY")
    var pageY_TouchEventBase: js.UndefOr[scala.Nothing] = js.native
    
    // PointerEvent
    @JSName("pointerId")
    var pointerId_TouchEventBase: js.UndefOr[scala.Nothing] = js.native
    
    @JSName("pointerType")
    var pointerType_TouchEventBase: js.UndefOr[scala.Nothing] = js.native
    
    /**
      * The other DOM element involved in the event, if any.
      * @see \`{@link https://api.jquery.com/event.relatedTarget/ }\`
      * @since 1.1.4
      * @example ​ ````On mouseout of anchors, alert the element type being entered.
    ```javascript
    $( "a" ).mouseout(function( event ) {
      alert( event.relatedTarget.nodeName ); // "DIV"
    });
    ```
      */
    var relatedTarget: js.UndefOr[scala.Nothing] = js.native
    
    @JSName("screenX")
    var screenX_TouchEventBase: js.UndefOr[scala.Nothing] = js.native
    
    @JSName("screenY")
    var screenY_TouchEventBase: js.UndefOr[scala.Nothing] = js.native
    
    @JSName("shiftKey")
    var shiftKey_TouchEventBase: Boolean = js.native
    
    @JSName("targetTouches")
    var targetTouches_TouchEventBase: TouchList = js.native
    
    /** @deprecated */
    @JSName("toElement")
    var toElement_TouchEventBase: js.UndefOr[scala.Nothing] = js.native
    
    @JSName("touches")
    var touches_TouchEventBase: TouchList = js.native
    
    // MouseEvent, KeyboardEvent
    /**
      * For key or mouse events, this property indicates the specific key or button that was pressed.
      * @see \`{@link https://api.jquery.com/event.which/ }\`
      * @since 1.1.3
      * @deprecated ​ Deprecated since 3.3. See \`{@link https://github.com/jquery/api.jquery.com/issues/821 }\`.
      * @example ​ ````Log which key was depressed.
    ```html
    <!doctype html>
    <html lang="en">
    <head>
      <meta charset="utf-8">
      <title>event.which demo</title>
      <script src="https://code.jquery.com/jquery-3.3.1.js"></script>
    </head>
    <body>
    ​
    <input id="whichkey" value="type something">
    <div id="log"></div>
    ​
    <script>
    $( "#whichkey" ).on( "keydown", function( event ) {
      $( "#log" ).html( event.type + ": " +  event.which );
    });
    </script>
    ​
    </body>
    </html>
    ```
      * @example ​ ````Log which mouse button was depressed.
    ```html
    <!doctype html>
    <html lang="en">
    <head>
      <meta charset="utf-8">
      <title>event.which demo</title>
      <script src="https://code.jquery.com/jquery-3.3.1.js"></script>
    </head>
    <body>
    ​
    <input id="whichkey" value="click here">
    <div id="log"></div>
    ​
    <script>
    $( "#whichkey" ).on( "mousedown", function( event ) {
      $( "#log" ).html( event.type + ": " +  event.which );
    });
    </script>
    ​
    </body>
    </html>
    ```
      */
    @JSName("which")
    var which_TouchEventBase: js.UndefOr[scala.Nothing] = js.native
  }
  object TouchEventBase {
    
    @scala.inline
    def apply[TDelegateTarget, TData, TCurrentTarget, TTarget](
      altKey: Boolean,
      bubbles: Boolean,
      cancelable: Boolean,
      changedTouches: TouchList,
      ctrlKey: Boolean,
      currentTarget: TCurrentTarget,
      data: TData,
      delegateTarget: TDelegateTarget,
      detail: Double,
      eventPhase: Double,
      isDefaultPrevented: () => Boolean,
      isImmediatePropagationStopped: () => Boolean,
      isPropagationStopped: () => Boolean,
      metaKey: Boolean,
      preventDefault: () => Unit,
      shiftKey: Boolean,
      stopImmediatePropagation: () => Unit,
      stopPropagation: () => Unit,
      target: TTarget,
      targetTouches: TouchList,
      timeStamp: Double,
      touches: TouchList,
      `type`: String,
      view: Window
    ): TouchEventBase[TDelegateTarget, TData, TCurrentTarget, TTarget] = {
      val __obj = js.Dynamic.literal(altKey = altKey.asInstanceOf[js.Any], bubbles = bubbles.asInstanceOf[js.Any], cancelable = cancelable.asInstanceOf[js.Any], changedTouches = changedTouches.asInstanceOf[js.Any], ctrlKey = ctrlKey.asInstanceOf[js.Any], currentTarget = currentTarget.asInstanceOf[js.Any], data = data.asInstanceOf[js.Any], delegateTarget = delegateTarget.asInstanceOf[js.Any], detail = detail.asInstanceOf[js.Any], eventPhase = eventPhase.asInstanceOf[js.Any], isDefaultPrevented = js.Any.fromFunction0(isDefaultPrevented), isImmediatePropagationStopped = js.Any.fromFunction0(isImmediatePropagationStopped), isPropagationStopped = js.Any.fromFunction0(isPropagationStopped), metaKey = metaKey.asInstanceOf[js.Any], preventDefault = js.Any.fromFunction0(preventDefault), shiftKey = shiftKey.asInstanceOf[js.Any], stopImmediatePropagation = js.Any.fromFunction0(stopImmediatePropagation), stopPropagation = js.Any.fromFunction0(stopPropagation), target = target.asInstanceOf[js.Any], targetTouches = targetTouches.asInstanceOf[js.Any], timeStamp = timeStamp.asInstanceOf[js.Any], touches = touches.asInstanceOf[js.Any], view = view.asInstanceOf[js.Any])
      __obj.updateDynamic("type")(`type`.asInstanceOf[js.Any])
      __obj.asInstanceOf[TouchEventBase[TDelegateTarget, TData, TCurrentTarget, TTarget]]
    }
    
    @scala.inline
    implicit class TouchEventBaseMutableBuilder[Self <: TouchEventBase[_, _, _, _], TDelegateTarget, TData, TCurrentTarget, TTarget] (val x: Self with (TouchEventBase[TDelegateTarget, TData, TCurrentTarget, TTarget])) extends AnyVal {
      
      @scala.inline
      def setAltKey(value: Boolean): Self = StObject.set(x, "altKey", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setChangedTouches(value: TouchList): Self = StObject.set(x, "changedTouches", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setCtrlKey(value: Boolean): Self = StObject.set(x, "ctrlKey", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setMetaKey(value: Boolean): Self = StObject.set(x, "metaKey", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setOriginalEvent(value: org.scalajs.dom.raw.TouchEvent): Self = StObject.set(x, "originalEvent", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setOriginalEventUndefined: Self = StObject.set(x, "originalEvent", js.undefined)
      
      @scala.inline
      def setShiftKey(value: Boolean): Self = StObject.set(x, "shiftKey", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setTargetTouches(value: TouchList): Self = StObject.set(x, "targetTouches", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setTouches(value: TouchList): Self = StObject.set(x, "touches", value.asInstanceOf[js.Any])
    }
  }
  
  @js.native
  trait TouchMoveEvent[TDelegateTarget, TData, TCurrentTarget, TTarget] extends TouchEventBase[TDelegateTarget, TData, TCurrentTarget, TTarget] {
    
    @JSName("type")
    var type_TouchMoveEvent: touchmove = js.native
  }
  object TouchMoveEvent {
    
    @scala.inline
    def apply[TDelegateTarget, TData, TCurrentTarget, TTarget](
      altKey: Boolean,
      bubbles: Boolean,
      cancelable: Boolean,
      changedTouches: TouchList,
      ctrlKey: Boolean,
      currentTarget: TCurrentTarget,
      data: TData,
      delegateTarget: TDelegateTarget,
      detail: Double,
      eventPhase: Double,
      isDefaultPrevented: () => Boolean,
      isImmediatePropagationStopped: () => Boolean,
      isPropagationStopped: () => Boolean,
      metaKey: Boolean,
      preventDefault: () => Unit,
      shiftKey: Boolean,
      stopImmediatePropagation: () => Unit,
      stopPropagation: () => Unit,
      target: TTarget,
      targetTouches: TouchList,
      timeStamp: Double,
      touches: TouchList,
      `type`: touchmove,
      view: Window
    ): TouchMoveEvent[TDelegateTarget, TData, TCurrentTarget, TTarget] = {
      val __obj = js.Dynamic.literal(altKey = altKey.asInstanceOf[js.Any], bubbles = bubbles.asInstanceOf[js.Any], cancelable = cancelable.asInstanceOf[js.Any], changedTouches = changedTouches.asInstanceOf[js.Any], ctrlKey = ctrlKey.asInstanceOf[js.Any], currentTarget = currentTarget.asInstanceOf[js.Any], data = data.asInstanceOf[js.Any], delegateTarget = delegateTarget.asInstanceOf[js.Any], detail = detail.asInstanceOf[js.Any], eventPhase = eventPhase.asInstanceOf[js.Any], isDefaultPrevented = js.Any.fromFunction0(isDefaultPrevented), isImmediatePropagationStopped = js.Any.fromFunction0(isImmediatePropagationStopped), isPropagationStopped = js.Any.fromFunction0(isPropagationStopped), metaKey = metaKey.asInstanceOf[js.Any], preventDefault = js.Any.fromFunction0(preventDefault), shiftKey = shiftKey.asInstanceOf[js.Any], stopImmediatePropagation = js.Any.fromFunction0(stopImmediatePropagation), stopPropagation = js.Any.fromFunction0(stopPropagation), target = target.asInstanceOf[js.Any], targetTouches = targetTouches.asInstanceOf[js.Any], timeStamp = timeStamp.asInstanceOf[js.Any], touches = touches.asInstanceOf[js.Any], view = view.asInstanceOf[js.Any])
      __obj.updateDynamic("type")(`type`.asInstanceOf[js.Any])
      __obj.asInstanceOf[TouchMoveEvent[TDelegateTarget, TData, TCurrentTarget, TTarget]]
    }
    
    @scala.inline
    implicit class TouchMoveEventMutableBuilder[Self <: TouchMoveEvent[_, _, _, _], TDelegateTarget, TData, TCurrentTarget, TTarget] (val x: Self with (TouchMoveEvent[TDelegateTarget, TData, TCurrentTarget, TTarget])) extends AnyVal {
      
      @scala.inline
      def setType(value: touchmove): Self = StObject.set(x, "type", value.asInstanceOf[js.Any])
    }
  }
  
  @js.native
  trait TouchStartEvent[TDelegateTarget, TData, TCurrentTarget, TTarget] extends TouchEventBase[TDelegateTarget, TData, TCurrentTarget, TTarget] {
    
    @JSName("type")
    var type_TouchStartEvent: touchstart = js.native
  }
  object TouchStartEvent {
    
    @scala.inline
    def apply[TDelegateTarget, TData, TCurrentTarget, TTarget](
      altKey: Boolean,
      bubbles: Boolean,
      cancelable: Boolean,
      changedTouches: TouchList,
      ctrlKey: Boolean,
      currentTarget: TCurrentTarget,
      data: TData,
      delegateTarget: TDelegateTarget,
      detail: Double,
      eventPhase: Double,
      isDefaultPrevented: () => Boolean,
      isImmediatePropagationStopped: () => Boolean,
      isPropagationStopped: () => Boolean,
      metaKey: Boolean,
      preventDefault: () => Unit,
      shiftKey: Boolean,
      stopImmediatePropagation: () => Unit,
      stopPropagation: () => Unit,
      target: TTarget,
      targetTouches: TouchList,
      timeStamp: Double,
      touches: TouchList,
      `type`: touchstart,
      view: Window
    ): TouchStartEvent[TDelegateTarget, TData, TCurrentTarget, TTarget] = {
      val __obj = js.Dynamic.literal(altKey = altKey.asInstanceOf[js.Any], bubbles = bubbles.asInstanceOf[js.Any], cancelable = cancelable.asInstanceOf[js.Any], changedTouches = changedTouches.asInstanceOf[js.Any], ctrlKey = ctrlKey.asInstanceOf[js.Any], currentTarget = currentTarget.asInstanceOf[js.Any], data = data.asInstanceOf[js.Any], delegateTarget = delegateTarget.asInstanceOf[js.Any], detail = detail.asInstanceOf[js.Any], eventPhase = eventPhase.asInstanceOf[js.Any], isDefaultPrevented = js.Any.fromFunction0(isDefaultPrevented), isImmediatePropagationStopped = js.Any.fromFunction0(isImmediatePropagationStopped), isPropagationStopped = js.Any.fromFunction0(isPropagationStopped), metaKey = metaKey.asInstanceOf[js.Any], preventDefault = js.Any.fromFunction0(preventDefault), shiftKey = shiftKey.asInstanceOf[js.Any], stopImmediatePropagation = js.Any.fromFunction0(stopImmediatePropagation), stopPropagation = js.Any.fromFunction0(stopPropagation), target = target.asInstanceOf[js.Any], targetTouches = targetTouches.asInstanceOf[js.Any], timeStamp = timeStamp.asInstanceOf[js.Any], touches = touches.asInstanceOf[js.Any], view = view.asInstanceOf[js.Any])
      __obj.updateDynamic("type")(`type`.asInstanceOf[js.Any])
      __obj.asInstanceOf[TouchStartEvent[TDelegateTarget, TData, TCurrentTarget, TTarget]]
    }
    
    @scala.inline
    implicit class TouchStartEventMutableBuilder[Self <: TouchStartEvent[_, _, _, _], TDelegateTarget, TData, TCurrentTarget, TTarget] (val x: Self with (TouchStartEvent[TDelegateTarget, TData, TCurrentTarget, TTarget])) extends AnyVal {
      
      @scala.inline
      def setType(value: touchstart): Self = StObject.set(x, "type", value.asInstanceOf[js.Any])
    }
  }
  
  @js.native
  trait Transport extends StObject {
    
    def abort(): Unit = js.native
    
    def send(headers: PlainObject[_], completeCallback: SuccessCallback): Unit = js.native
  }
  object Transport {
    
    @scala.inline
    def apply(abort: () => Unit, send: (PlainObject[_], SuccessCallback) => Unit): Transport = {
      val __obj = js.Dynamic.literal(abort = js.Any.fromFunction0(abort), send = js.Any.fromFunction2(send))
      __obj.asInstanceOf[Transport]
    }
    
    type SuccessCallback = js.Function4[
        /* status */ Double, 
        /* statusText */ TextStatus, 
        /* responses */ js.UndefOr[PlainObject[js.Any]], 
        /* headers */ js.UndefOr[String], 
        Unit
      ]
    
    @scala.inline
    implicit class TransportMutableBuilder[Self <: Transport] (val x: Self) extends AnyVal {
      
      @scala.inline
      def setAbort(value: () => Unit): Self = StObject.set(x, "abort", js.Any.fromFunction0(value))
      
      @scala.inline
      def setSend(value: (PlainObject[_], SuccessCallback) => Unit): Self = StObject.set(x, "send", js.Any.fromFunction2(value))
    }
  }
  
  // #endregion
  /**
    * Base type for jQuery events that have been triggered (including events triggered on plain objects).
    */
  @js.native
  trait TriggeredEvent[TDelegateTarget, TData, TCurrentTarget, TTarget]
    extends typingsSlinky.jquery.JQuery.Event {
    
    /**
      * The current DOM element within the event bubbling phase.
      * @see \`{@link https://api.jquery.com/event.currentTarget/ }\`
      * @since 1.3
      * @example ​ ````Alert that currentTarget matches the `this` keyword.
    ```javascript
    $( "p" ).click(function( event ) {
      alert( event.currentTarget === this ); // true
    });
    ```
      */
    var currentTarget: TCurrentTarget = js.native
    
    /**
      * An optional object of data passed to an event method when the current executing handler is bound.
      * @see \`{@link https://api.jquery.com/event.data/ }\`
      * @since 1.1
      * @example ​ ````Within a for loop, pass the value of i to the .on() method so that the current iteration&#39;s value is preserved.
    ```html
    <!doctype html>
    <html lang="en">
    <head>
      <meta charset="utf-8">
      <title>event.data demo</title>
      <script src="https://code.jquery.com/jquery-3.3.1.js"></script>
    </head>
    <body>
    ​
    <button> 0 </button>
    <button> 1 </button>
    <button> 2 </button>
    <button> 3 </button>
    <button> 4 </button>
    ​
    <div id="log"></div>
    ​
    <script>
    var logDiv = $( "#log" );
    ​
    for ( var i = 0; i < 5; i++ ) {
      $( "button" ).eq( i ).on( "click", { value: i }, function( event ) {
      var msgs = [
      "button = " + $( this ).index(),
      "event.data.value = " + event.data.value,
      "i = " + i
      ];
      logDiv.append( msgs.join( ", " ) + "<br>" );
      });
    }
    </script>
    ​
    </body>
    </html>
    ```
      */
    var data: TData = js.native
    
    /**
      * The element where the currently-called jQuery event handler was attached.
      * @see \`{@link https://api.jquery.com/event.delegateTarget/ }\`
      * @since 1.7
      * @example ​ ````When a button in any box class is clicked, change the box&#39;s background color to red.
    ```javascript
    $( ".box" ).on( "click", "button", function( event ) {
      $( event.delegateTarget ).css( "background-color", "red" );
    });
    ```
      */
    var delegateTarget: TDelegateTarget = js.native
    
    /**
      * The namespace specified when the event was triggered.
      * @see \`{@link https://api.jquery.com/event.namespace/ }\`
      * @since 1.4.3
      * @example ​ ````Determine the event namespace used.
    ```html
    <!doctype html>
    <html lang="en">
    <head>
      <meta charset="utf-8">
      <title>event.namespace demo</title>
      <script src="https://code.jquery.com/jquery-3.3.1.js"></script>
    </head>
    <body>
    ​
    <button>display event.namespace</button>
    <p></p>
    ​
    <script>
    $( "p" ).on( "test.something", function( event ) {
      alert( event.namespace );
    });
    $( "button" ).click(function( event ) {
      $( "p" ).trigger( "test.something" );
    });
    </script>
    ​
    </body>
    </html>
    ```
      */
    var namespace: js.UndefOr[String] = js.native
    
    var originalEvent: js.UndefOr[org.scalajs.dom.raw.Event] = js.native
    
    /**
      * The last value returned by an event handler that was triggered by this event, unless the value was undefined.
      * @see \`{@link https://api.jquery.com/event.result/ }\`
      * @since 1.3
      * @example ​ ````Display previous handler&#39;s return value
    ```html
    <!doctype html>
    <html lang="en">
    <head>
      <meta charset="utf-8">
      <title>event.result demo</title>
      <script src="https://code.jquery.com/jquery-3.3.1.js"></script>
    </head>
    <body>
    ​
    <button>display event.result</button>
    <p></p>
    ​
    <script>
    $( "button" ).click(function( event ) {
      return "hey";
    });
    $( "button" ).click(function( event ) {
      $( "p" ).html( event.result );
    });
    </script>
    ​
    </body>
    </html>
    ```
      */
    var result: js.UndefOr[js.Any] = js.native
    
    /**
      * The DOM element that initiated the event.
      * @see \`{@link https://api.jquery.com/event.target/ }\`
      * @since 1.0
      * @example ​ ````Display the tag&#39;s name on click
    ```html
    <!doctype html>
    <html lang="en">
    <head>
      <meta charset="utf-8">
      <title>event.target demo</title>
      <style>
      span, strong, p {
      padding: 8px;
      display: block;
      border: 1px solid #999;
      }
      </style>
      <script src="https://code.jquery.com/jquery-3.3.1.js"></script>
    </head>
    <body>
    ​
    <div id="log"></div>
    <div>
      <p>
      <strong><span>click</span></strong>
      </p>
    </div>
    ​
    <script>
    $( "body" ).click(function( event ) {
      $( "#log" ).html( "clicked: " + event.target.nodeName );
    });
    </script>
    ​
    </body>
    </html>
    ```
      * @example ​ ````Implements a simple event delegation: The click handler is added to an unordered list, and the children of its li children are hidden. Clicking one of the li children toggles (see toggle()) their children.
    ```html
    <!doctype html>
    <html lang="en">
    <head>
      <meta charset="utf-8">
      <title>event.target demo</title>
      <script src="https://code.jquery.com/jquery-3.3.1.js"></script>
    </head>
    <body>
    ​
    <ul>
      <li>item 1
      <ul>
      <li>sub item 1-a</li>
      <li>sub item 1-b</li>
      </ul>
      </li>
      <li>item 2
      <ul>
      <li>sub item 2-a</li>
      <li>sub item 2-b</li>
      </ul>
      </li>
    </ul>
    ​
    <script>
    function handler( event ) {
      var target = $( event.target );
      if ( target.is( "li" ) ) {
      target.children().toggle();
      }
    }
    $( "ul" ).click( handler ).find( "ul" ).hide();
    </script>
    ​
    </body>
    </html>
    ```
      */
    var target: TTarget = js.native
  }
  object TriggeredEvent {
    
    @scala.inline
    def apply[TDelegateTarget, TData, TCurrentTarget, TTarget](
      currentTarget: TCurrentTarget,
      data: TData,
      delegateTarget: TDelegateTarget,
      isDefaultPrevented: () => Boolean,
      isImmediatePropagationStopped: () => Boolean,
      isPropagationStopped: () => Boolean,
      preventDefault: () => Unit,
      stopImmediatePropagation: () => Unit,
      stopPropagation: () => Unit,
      target: TTarget,
      timeStamp: Double,
      `type`: String
    ): TriggeredEvent[TDelegateTarget, TData, TCurrentTarget, TTarget] = {
      val __obj = js.Dynamic.literal(currentTarget = currentTarget.asInstanceOf[js.Any], data = data.asInstanceOf[js.Any], delegateTarget = delegateTarget.asInstanceOf[js.Any], isDefaultPrevented = js.Any.fromFunction0(isDefaultPrevented), isImmediatePropagationStopped = js.Any.fromFunction0(isImmediatePropagationStopped), isPropagationStopped = js.Any.fromFunction0(isPropagationStopped), preventDefault = js.Any.fromFunction0(preventDefault), stopImmediatePropagation = js.Any.fromFunction0(stopImmediatePropagation), stopPropagation = js.Any.fromFunction0(stopPropagation), target = target.asInstanceOf[js.Any], timeStamp = timeStamp.asInstanceOf[js.Any])
      __obj.updateDynamic("type")(`type`.asInstanceOf[js.Any])
      __obj.asInstanceOf[TriggeredEvent[TDelegateTarget, TData, TCurrentTarget, TTarget]]
    }
    
    @scala.inline
    implicit class TriggeredEventMutableBuilder[Self <: TriggeredEvent[_, _, _, _], TDelegateTarget, TData, TCurrentTarget, TTarget] (val x: Self with (TriggeredEvent[TDelegateTarget, TData, TCurrentTarget, TTarget])) extends AnyVal {
      
      @scala.inline
      def setCurrentTarget(value: TCurrentTarget): Self = StObject.set(x, "currentTarget", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setData(value: TData): Self = StObject.set(x, "data", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setDelegateTarget(value: TDelegateTarget): Self = StObject.set(x, "delegateTarget", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setNamespace(value: String): Self = StObject.set(x, "namespace", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setNamespaceUndefined: Self = StObject.set(x, "namespace", js.undefined)
      
      @scala.inline
      def setOriginalEvent(value: org.scalajs.dom.raw.Event): Self = StObject.set(x, "originalEvent", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setOriginalEventUndefined: Self = StObject.set(x, "originalEvent", js.undefined)
      
      @scala.inline
      def setResult(value: js.Any): Self = StObject.set(x, "result", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setResultUndefined: Self = StObject.set(x, "result", js.undefined)
      
      @scala.inline
      def setTarget(value: TTarget): Self = StObject.set(x, "target", value.asInstanceOf[js.Any])
    }
  }
  
  /**
    * @see \`{@link https://gist.github.com/gnarf/54829d408993526fe475#tweens }\`
    * @since 1.8
    */
  // This should be a class but doesn't work correctly under the JQuery namespace. Tween should be an inner class of jQuery.
  @js.native
  trait Tween[TElement] extends StObject {
    
    /**
      * Reads the current value for property from the element
      * @see \`{@link https://gist.github.com/gnarf/54829d408993526fe475#tweens }\`
      * @since 1.8
      */
    def cur(): js.Any = js.native
    
    /**
      * The easing used
      * @see \`{@link https://gist.github.com/gnarf/54829d408993526fe475#tweens }\`
      * @since 1.8
      */
    var easing: String = js.native
    
    /**
      * The element being animated
      * @see \`{@link https://gist.github.com/gnarf/54829d408993526fe475#tweens }\`
      * @since 1.8
      */
    var elem: TElement = js.native
    
    /**
      * The ending value of the tween
      * @see \`{@link https://gist.github.com/gnarf/54829d408993526fe475#tweens }\`
      * @since 1.8
      */
    var end: Double = js.native
    
    /**
      * The current value of the tween
      * @see \`{@link https://gist.github.com/gnarf/54829d408993526fe475#tweens }\`
      * @since 1.8
      */
    var now: Double = js.native
    
    /**
      * A reference to the animation options
      * @see \`{@link https://gist.github.com/gnarf/54829d408993526fe475#tweens }\`
      * @since 1.8
      */
    var options: EffectsOptions[TElement] = js.native
    
    // Undocumented. Is this intended to be public?
    var pos: js.UndefOr[Double] = js.native
    
    /**
      * The property being animated
      * @see \`{@link https://gist.github.com/gnarf/54829d408993526fe475#tweens }\`
      * @since 1.8
      */
    var prop: String = js.native
    
    /**
      * Updates the value for the property on the animated elemd.
      * @param progress A number from 0 to 1.
      * @see \`{@link https://gist.github.com/gnarf/54829d408993526fe475#tweens }\`
      * @since 1.8
      */
    def run(progress: Double): this.type = js.native
    
    /**
      * The starting value of the tween
      * @see \`{@link https://gist.github.com/gnarf/54829d408993526fe475#tweens }\`
      * @since 1.8
      */
    var start: Double = js.native
    
    /**
      * The CSS unit for the tween
      * @see \`{@link https://gist.github.com/gnarf/54829d408993526fe475#tweens }\`
      * @since 1.8
      */
    var unit: String = js.native
  }
  object Tween {
    
    @scala.inline
    def apply[TElement](
      cur: () => js.Any,
      easing: String,
      elem: TElement,
      end: Double,
      now: Double,
      options: EffectsOptions[TElement],
      prop: String,
      run: Double => Tween[TElement],
      start: Double,
      unit: String
    ): Tween[TElement] = {
      val __obj = js.Dynamic.literal(cur = js.Any.fromFunction0(cur), easing = easing.asInstanceOf[js.Any], elem = elem.asInstanceOf[js.Any], end = end.asInstanceOf[js.Any], now = now.asInstanceOf[js.Any], options = options.asInstanceOf[js.Any], prop = prop.asInstanceOf[js.Any], run = js.Any.fromFunction1(run), start = start.asInstanceOf[js.Any], unit = unit.asInstanceOf[js.Any])
      __obj.asInstanceOf[Tween[TElement]]
    }
    
    @scala.inline
    implicit class TweenMutableBuilder[Self <: Tween[_], TElement] (val x: Self with Tween[TElement]) extends AnyVal {
      
      @scala.inline
      def setCur(value: () => js.Any): Self = StObject.set(x, "cur", js.Any.fromFunction0(value))
      
      @scala.inline
      def setEasing(value: String): Self = StObject.set(x, "easing", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setElem(value: TElement): Self = StObject.set(x, "elem", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setEnd(value: Double): Self = StObject.set(x, "end", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setNow(value: Double): Self = StObject.set(x, "now", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setOptions(value: EffectsOptions[TElement]): Self = StObject.set(x, "options", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setPos(value: Double): Self = StObject.set(x, "pos", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setPosUndefined: Self = StObject.set(x, "pos", js.undefined)
      
      @scala.inline
      def setProp(value: String): Self = StObject.set(x, "prop", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setRun(value: Double => Tween[TElement]): Self = StObject.set(x, "run", js.Any.fromFunction1(value))
      
      @scala.inline
      def setStart(value: Double): Self = StObject.set(x, "start", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setUnit(value: String): Self = StObject.set(x, "unit", value.asInstanceOf[js.Any])
    }
  }
  
  /**
    * @see \`{@link https://gist.github.com/gnarf/54829d408993526fe475#tweens }\`
    * @since 1.8
    */
  @js.native
  trait TweenStatic extends StObject {
    
    /**
      * @see \`{@link https://gist.github.com/gnarf/54829d408993526fe475#tweens }\`
      * @since 1.8
      */
    def apply[TElement](elem: TElement, options: EffectsOptions[TElement], prop: String, end: Double): Tween[TElement] = js.native
    def apply[TElement](
      elem: TElement,
      options: EffectsOptions[TElement],
      prop: String,
      end: Double,
      easing: js.UndefOr[scala.Nothing],
      unit: String
    ): Tween[TElement] = js.native
    def apply[TElement](elem: TElement, options: EffectsOptions[TElement], prop: String, end: Double, easing: String): Tween[TElement] = js.native
    def apply[TElement](
      elem: TElement,
      options: EffectsOptions[TElement],
      prop: String,
      end: Double,
      easing: String,
      unit: String
    ): Tween[TElement] = js.native
    
    /**
      * `jQuery.Tween.propHooks[ prop ]` is a hook point that replaces `jQuery.fx.step[ prop ]` (which is being deprecated.) These hooks are used by the tween to get and set values on elements.
      * @see \`{@link https://gist.github.com/gnarf/54829d408993526fe475#tween-hooks }\`
      * @since 1.8
      * @example
    ```javascript
    jQuery.Tween.propHooks[ property ] = {
      get: function( tween ) {
      // get tween.prop from tween.elem and return it
      },
      set: function( tween ) {
      // set tween.prop on tween.elem to tween.now + tween.unit
      }
    }
    ```
      */
    var propHooks: PropHooks = js.native
  }
  
  /**
    * A "Tweener" is a function responsible for creating a tween object, and you might want to override these if you want to implement complex values ( like a clip/transform array matrix ) in a single property.
    * @see \`{@link https://gist.github.com/gnarf/54829d408993526fe475#tweeners }\`
    * @since 1.8
    */
  type Tweener[TElement] = js.ThisFunction2[
    /* this */ Animation[TElement], 
    /* propName */ String, 
    /* finalValue */ Double, 
    Tween[TElement]
  ]
  
  type TypeEventHandler[TDelegateTarget, TData, TCurrentTarget, TTarget, TType /* <: /* keyof jquery.JQuery.TypeToTriggeredEventMap<TDelegateTarget, TData, TCurrentTarget, TTarget> */ change | resize | scroll | select | submit | click | contextmenu | dblclick | mousedown | mouseenter | mouseleave | mousemove | mouseout | mouseover | mouseup | drag | dragend | dragenter | dragexit | dragleave | dragover | dragstart | drop | keydown | keypress | keyup | touchcancel | touchend | touchmove | touchstart | blur | focus | focusin | focusout */] = EventHandlerBase[
    TCurrentTarget, 
    /* import warning: importer.ImportType#apply Failed type conversion: jquery.JQuery.TypeToTriggeredEventMap<TDelegateTarget, TData, TCurrentTarget, TTarget>[TType] */ js.Any
  ]
  
  @js.native
  trait TypeEventHandlers[TDelegateTarget, TData, TCurrentTarget, TTarget]
    extends _TypeEventHandlers[TDelegateTarget, TData, TCurrentTarget, TTarget]
       with // No idea why it's necessary to include `object` in the union but otherwise TypeScript complains that
  // derived types of Event are not assignable to Event.
  /* type */ StringDictionary[
          js.UndefOr[
            (TypeEventHandler[TDelegateTarget, TData, TCurrentTarget, TTarget, String]) | `false` | js.Object
          ]
        ]
  object TypeEventHandlers {
    
    @scala.inline
    def apply[TDelegateTarget, TData, TCurrentTarget, TTarget](): TypeEventHandlers[TDelegateTarget, TData, TCurrentTarget, TTarget] = {
      val __obj = js.Dynamic.literal()
      __obj.asInstanceOf[TypeEventHandlers[TDelegateTarget, TData, TCurrentTarget, TTarget]]
    }
  }
  
  type TypeOrArray[T] = T | js.Array[T]
  
  // #endregion
  // #endregion
  @js.native
  trait TypeToTriggeredEventMap[TDelegateTarget, TData, TCurrentTarget, TTarget] extends /* type */ StringDictionary[TriggeredEvent[TDelegateTarget, TData, TCurrentTarget, TTarget]] {
    
    // FocusEvent
    var blur: BlurEvent[TDelegateTarget, TData, TCurrentTarget, TTarget] = js.native
    
    // Event
    var change: ChangeEvent[TDelegateTarget, TData, TCurrentTarget, TTarget] = js.native
    
    // UIEvent
    // MouseEvent
    var click: ClickEvent[TDelegateTarget, TData, TCurrentTarget, TTarget] = js.native
    
    var contextmenu: ContextMenuEvent[TDelegateTarget, TData, TCurrentTarget, TTarget] = js.native
    
    var dblclick: DoubleClickEvent[TDelegateTarget, TData, TCurrentTarget, TTarget] = js.native
    
    // DragEvent
    var drag: typingsSlinky.jquery.JQuery.DragEvent[TDelegateTarget, TData, TCurrentTarget, TTarget] = js.native
    
    var dragend: DragEndEvent[TDelegateTarget, TData, TCurrentTarget, TTarget] = js.native
    
    var dragenter: DragEnterEvent[TDelegateTarget, TData, TCurrentTarget, TTarget] = js.native
    
    var dragexit: DragExitEvent[TDelegateTarget, TData, TCurrentTarget, TTarget] = js.native
    
    var dragleave: DragLeaveEvent[TDelegateTarget, TData, TCurrentTarget, TTarget] = js.native
    
    var dragover: DragOverEvent[TDelegateTarget, TData, TCurrentTarget, TTarget] = js.native
    
    var dragstart: DragStartEvent[TDelegateTarget, TData, TCurrentTarget, TTarget] = js.native
    
    var drop: DropEvent[TDelegateTarget, TData, TCurrentTarget, TTarget] = js.native
    
    var focus: typingsSlinky.jquery.JQuery.FocusEvent[TDelegateTarget, TData, TCurrentTarget, TTarget] = js.native
    
    var focusin: FocusInEvent[TDelegateTarget, TData, TCurrentTarget, TTarget] = js.native
    
    var focusout: FocusOutEvent[TDelegateTarget, TData, TCurrentTarget, TTarget] = js.native
    
    // KeyboardEvent
    var keydown: KeyDownEvent[TDelegateTarget, TData, TCurrentTarget, TTarget] = js.native
    
    var keypress: KeyPressEvent[TDelegateTarget, TData, TCurrentTarget, TTarget] = js.native
    
    var keyup: KeyUpEvent[TDelegateTarget, TData, TCurrentTarget, TTarget] = js.native
    
    var mousedown: MouseDownEvent[TDelegateTarget, TData, TCurrentTarget, TTarget] = js.native
    
    var mouseenter: MouseEnterEvent[TDelegateTarget, TData, TCurrentTarget, TTarget] = js.native
    
    var mouseleave: MouseLeaveEvent[TDelegateTarget, TData, TCurrentTarget, TTarget] = js.native
    
    var mousemove: MouseMoveEvent[TDelegateTarget, TData, TCurrentTarget, TTarget] = js.native
    
    var mouseout: MouseOutEvent[TDelegateTarget, TData, TCurrentTarget, TTarget] = js.native
    
    var mouseover: MouseOverEvent[TDelegateTarget, TData, TCurrentTarget, TTarget] = js.native
    
    var mouseup: MouseUpEvent[TDelegateTarget, TData, TCurrentTarget, TTarget] = js.native
    
    var resize: ResizeEvent[TDelegateTarget, TData, TCurrentTarget, TTarget] = js.native
    
    var scroll: ScrollEvent[TDelegateTarget, TData, TCurrentTarget, TTarget] = js.native
    
    var select: SelectEvent[TDelegateTarget, TData, TCurrentTarget, TTarget] = js.native
    
    var submit: SubmitEvent[TDelegateTarget, TData, TCurrentTarget, TTarget] = js.native
    
    // TouchEvent
    var touchcancel: TouchCancelEvent[TDelegateTarget, TData, TCurrentTarget, TTarget] = js.native
    
    var touchend: TouchEndEvent[TDelegateTarget, TData, TCurrentTarget, TTarget] = js.native
    
    var touchmove: TouchMoveEvent[TDelegateTarget, TData, TCurrentTarget, TTarget] = js.native
    
    var touchstart: TouchStartEvent[TDelegateTarget, TData, TCurrentTarget, TTarget] = js.native
  }
  object TypeToTriggeredEventMap {
    
    @scala.inline
    def apply[TDelegateTarget, TData, TCurrentTarget, TTarget](
      blur: BlurEvent[TDelegateTarget, TData, TCurrentTarget, TTarget],
      change: ChangeEvent[TDelegateTarget, TData, TCurrentTarget, TTarget],
      click: ClickEvent[TDelegateTarget, TData, TCurrentTarget, TTarget],
      contextmenu: ContextMenuEvent[TDelegateTarget, TData, TCurrentTarget, TTarget],
      dblclick: DoubleClickEvent[TDelegateTarget, TData, TCurrentTarget, TTarget],
      drag: typingsSlinky.jquery.JQuery.DragEvent[TDelegateTarget, TData, TCurrentTarget, TTarget],
      dragend: DragEndEvent[TDelegateTarget, TData, TCurrentTarget, TTarget],
      dragenter: DragEnterEvent[TDelegateTarget, TData, TCurrentTarget, TTarget],
      dragexit: DragExitEvent[TDelegateTarget, TData, TCurrentTarget, TTarget],
      dragleave: DragLeaveEvent[TDelegateTarget, TData, TCurrentTarget, TTarget],
      dragover: DragOverEvent[TDelegateTarget, TData, TCurrentTarget, TTarget],
      dragstart: DragStartEvent[TDelegateTarget, TData, TCurrentTarget, TTarget],
      drop: DropEvent[TDelegateTarget, TData, TCurrentTarget, TTarget],
      focus: typingsSlinky.jquery.JQuery.FocusEvent[TDelegateTarget, TData, TCurrentTarget, TTarget],
      focusin: FocusInEvent[TDelegateTarget, TData, TCurrentTarget, TTarget],
      focusout: FocusOutEvent[TDelegateTarget, TData, TCurrentTarget, TTarget],
      keydown: KeyDownEvent[TDelegateTarget, TData, TCurrentTarget, TTarget],
      keypress: KeyPressEvent[TDelegateTarget, TData, TCurrentTarget, TTarget],
      keyup: KeyUpEvent[TDelegateTarget, TData, TCurrentTarget, TTarget],
      mousedown: MouseDownEvent[TDelegateTarget, TData, TCurrentTarget, TTarget],
      mouseenter: MouseEnterEvent[TDelegateTarget, TData, TCurrentTarget, TTarget],
      mouseleave: MouseLeaveEvent[TDelegateTarget, TData, TCurrentTarget, TTarget],
      mousemove: MouseMoveEvent[TDelegateTarget, TData, TCurrentTarget, TTarget],
      mouseout: MouseOutEvent[TDelegateTarget, TData, TCurrentTarget, TTarget],
      mouseover: MouseOverEvent[TDelegateTarget, TData, TCurrentTarget, TTarget],
      mouseup: MouseUpEvent[TDelegateTarget, TData, TCurrentTarget, TTarget],
      resize: ResizeEvent[TDelegateTarget, TData, TCurrentTarget, TTarget],
      scroll: ScrollEvent[TDelegateTarget, TData, TCurrentTarget, TTarget],
      select: SelectEvent[TDelegateTarget, TData, TCurrentTarget, TTarget],
      submit: SubmitEvent[TDelegateTarget, TData, TCurrentTarget, TTarget],
      touchcancel: TouchCancelEvent[TDelegateTarget, TData, TCurrentTarget, TTarget],
      touchend: TouchEndEvent[TDelegateTarget, TData, TCurrentTarget, TTarget],
      touchmove: TouchMoveEvent[TDelegateTarget, TData, TCurrentTarget, TTarget],
      touchstart: TouchStartEvent[TDelegateTarget, TData, TCurrentTarget, TTarget]
    ): TypeToTriggeredEventMap[TDelegateTarget, TData, TCurrentTarget, TTarget] = {
      val __obj = js.Dynamic.literal(blur = blur.asInstanceOf[js.Any], change = change.asInstanceOf[js.Any], click = click.asInstanceOf[js.Any], contextmenu = contextmenu.asInstanceOf[js.Any], dblclick = dblclick.asInstanceOf[js.Any], drag = drag.asInstanceOf[js.Any], dragend = dragend.asInstanceOf[js.Any], dragenter = dragenter.asInstanceOf[js.Any], dragexit = dragexit.asInstanceOf[js.Any], dragleave = dragleave.asInstanceOf[js.Any], dragover = dragover.asInstanceOf[js.Any], dragstart = dragstart.asInstanceOf[js.Any], drop = drop.asInstanceOf[js.Any], focus = focus.asInstanceOf[js.Any], focusin = focusin.asInstanceOf[js.Any], focusout = focusout.asInstanceOf[js.Any], keydown = keydown.asInstanceOf[js.Any], keypress = keypress.asInstanceOf[js.Any], keyup = keyup.asInstanceOf[js.Any], mousedown = mousedown.asInstanceOf[js.Any], mouseenter = mouseenter.asInstanceOf[js.Any], mouseleave = mouseleave.asInstanceOf[js.Any], mousemove = mousemove.asInstanceOf[js.Any], mouseout = mouseout.asInstanceOf[js.Any], mouseover = mouseover.asInstanceOf[js.Any], mouseup = mouseup.asInstanceOf[js.Any], resize = resize.asInstanceOf[js.Any], scroll = scroll.asInstanceOf[js.Any], select = select.asInstanceOf[js.Any], submit = submit.asInstanceOf[js.Any], touchcancel = touchcancel.asInstanceOf[js.Any], touchend = touchend.asInstanceOf[js.Any], touchmove = touchmove.asInstanceOf[js.Any], touchstart = touchstart.asInstanceOf[js.Any])
      __obj.asInstanceOf[TypeToTriggeredEventMap[TDelegateTarget, TData, TCurrentTarget, TTarget]]
    }
    
    @scala.inline
    implicit class TypeToTriggeredEventMapMutableBuilder[Self <: TypeToTriggeredEventMap[_, _, _, _], TDelegateTarget, TData, TCurrentTarget, TTarget] (val x: Self with (TypeToTriggeredEventMap[TDelegateTarget, TData, TCurrentTarget, TTarget])) extends AnyVal {
      
      @scala.inline
      def setBlur(value: BlurEvent[TDelegateTarget, TData, TCurrentTarget, TTarget]): Self = StObject.set(x, "blur", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setChange(value: ChangeEvent[TDelegateTarget, TData, TCurrentTarget, TTarget]): Self = StObject.set(x, "change", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setClick(value: ClickEvent[TDelegateTarget, TData, TCurrentTarget, TTarget]): Self = StObject.set(x, "click", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setContextmenu(value: ContextMenuEvent[TDelegateTarget, TData, TCurrentTarget, TTarget]): Self = StObject.set(x, "contextmenu", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setDblclick(value: DoubleClickEvent[TDelegateTarget, TData, TCurrentTarget, TTarget]): Self = StObject.set(x, "dblclick", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setDrag(value: typingsSlinky.jquery.JQuery.DragEvent[TDelegateTarget, TData, TCurrentTarget, TTarget]): Self = StObject.set(x, "drag", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setDragend(value: DragEndEvent[TDelegateTarget, TData, TCurrentTarget, TTarget]): Self = StObject.set(x, "dragend", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setDragenter(value: DragEnterEvent[TDelegateTarget, TData, TCurrentTarget, TTarget]): Self = StObject.set(x, "dragenter", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setDragexit(value: DragExitEvent[TDelegateTarget, TData, TCurrentTarget, TTarget]): Self = StObject.set(x, "dragexit", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setDragleave(value: DragLeaveEvent[TDelegateTarget, TData, TCurrentTarget, TTarget]): Self = StObject.set(x, "dragleave", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setDragover(value: DragOverEvent[TDelegateTarget, TData, TCurrentTarget, TTarget]): Self = StObject.set(x, "dragover", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setDragstart(value: DragStartEvent[TDelegateTarget, TData, TCurrentTarget, TTarget]): Self = StObject.set(x, "dragstart", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setDrop(value: DropEvent[TDelegateTarget, TData, TCurrentTarget, TTarget]): Self = StObject.set(x, "drop", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setFocus(value: typingsSlinky.jquery.JQuery.FocusEvent[TDelegateTarget, TData, TCurrentTarget, TTarget]): Self = StObject.set(x, "focus", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setFocusin(value: FocusInEvent[TDelegateTarget, TData, TCurrentTarget, TTarget]): Self = StObject.set(x, "focusin", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setFocusout(value: FocusOutEvent[TDelegateTarget, TData, TCurrentTarget, TTarget]): Self = StObject.set(x, "focusout", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setKeydown(value: KeyDownEvent[TDelegateTarget, TData, TCurrentTarget, TTarget]): Self = StObject.set(x, "keydown", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setKeypress(value: KeyPressEvent[TDelegateTarget, TData, TCurrentTarget, TTarget]): Self = StObject.set(x, "keypress", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setKeyup(value: KeyUpEvent[TDelegateTarget, TData, TCurrentTarget, TTarget]): Self = StObject.set(x, "keyup", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setMousedown(value: MouseDownEvent[TDelegateTarget, TData, TCurrentTarget, TTarget]): Self = StObject.set(x, "mousedown", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setMouseenter(value: MouseEnterEvent[TDelegateTarget, TData, TCurrentTarget, TTarget]): Self = StObject.set(x, "mouseenter", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setMouseleave(value: MouseLeaveEvent[TDelegateTarget, TData, TCurrentTarget, TTarget]): Self = StObject.set(x, "mouseleave", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setMousemove(value: MouseMoveEvent[TDelegateTarget, TData, TCurrentTarget, TTarget]): Self = StObject.set(x, "mousemove", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setMouseout(value: MouseOutEvent[TDelegateTarget, TData, TCurrentTarget, TTarget]): Self = StObject.set(x, "mouseout", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setMouseover(value: MouseOverEvent[TDelegateTarget, TData, TCurrentTarget, TTarget]): Self = StObject.set(x, "mouseover", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setMouseup(value: MouseUpEvent[TDelegateTarget, TData, TCurrentTarget, TTarget]): Self = StObject.set(x, "mouseup", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setResize(value: ResizeEvent[TDelegateTarget, TData, TCurrentTarget, TTarget]): Self = StObject.set(x, "resize", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setScroll(value: ScrollEvent[TDelegateTarget, TData, TCurrentTarget, TTarget]): Self = StObject.set(x, "scroll", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setSelect(value: SelectEvent[TDelegateTarget, TData, TCurrentTarget, TTarget]): Self = StObject.set(x, "select", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setSubmit(value: SubmitEvent[TDelegateTarget, TData, TCurrentTarget, TTarget]): Self = StObject.set(x, "submit", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setTouchcancel(value: TouchCancelEvent[TDelegateTarget, TData, TCurrentTarget, TTarget]): Self = StObject.set(x, "touchcancel", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setTouchend(value: TouchEndEvent[TDelegateTarget, TData, TCurrentTarget, TTarget]): Self = StObject.set(x, "touchend", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setTouchmove(value: TouchMoveEvent[TDelegateTarget, TData, TCurrentTarget, TTarget]): Self = StObject.set(x, "touchmove", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setTouchstart(value: TouchStartEvent[TDelegateTarget, TData, TCurrentTarget, TTarget]): Self = StObject.set(x, "touchstart", value.asInstanceOf[js.Any])
    }
  }
  
  // #endregion
  // region UIEvent
  // #region UIEvent
  @js.native
  trait UIEventBase[TDelegateTarget, TData, TCurrentTarget, TTarget] extends TriggeredEvent[TDelegateTarget, TData, TCurrentTarget, TTarget] {
    
    // Event
    @JSName("bubbles")
    var bubbles_UIEventBase: Boolean = js.native
    
    @JSName("cancelable")
    var cancelable_UIEventBase: Boolean = js.native
    
    // UIEvent
    @JSName("detail")
    var detail_UIEventBase: Double = js.native
    
    @JSName("eventPhase")
    var eventPhase_UIEventBase: Double = js.native
    
    @JSName("originalEvent")
    var originalEvent_UIEventBase: js.UndefOr[org.scalajs.dom.raw.UIEvent] = js.native
    
    @JSName("view")
    var view_UIEventBase: Window = js.native
  }
  object UIEventBase {
    
    @scala.inline
    def apply[TDelegateTarget, TData, TCurrentTarget, TTarget](
      bubbles: Boolean,
      cancelable: Boolean,
      currentTarget: TCurrentTarget,
      data: TData,
      delegateTarget: TDelegateTarget,
      detail: Double,
      eventPhase: Double,
      isDefaultPrevented: () => Boolean,
      isImmediatePropagationStopped: () => Boolean,
      isPropagationStopped: () => Boolean,
      preventDefault: () => Unit,
      stopImmediatePropagation: () => Unit,
      stopPropagation: () => Unit,
      target: TTarget,
      timeStamp: Double,
      `type`: String,
      view: Window
    ): UIEventBase[TDelegateTarget, TData, TCurrentTarget, TTarget] = {
      val __obj = js.Dynamic.literal(bubbles = bubbles.asInstanceOf[js.Any], cancelable = cancelable.asInstanceOf[js.Any], currentTarget = currentTarget.asInstanceOf[js.Any], data = data.asInstanceOf[js.Any], delegateTarget = delegateTarget.asInstanceOf[js.Any], detail = detail.asInstanceOf[js.Any], eventPhase = eventPhase.asInstanceOf[js.Any], isDefaultPrevented = js.Any.fromFunction0(isDefaultPrevented), isImmediatePropagationStopped = js.Any.fromFunction0(isImmediatePropagationStopped), isPropagationStopped = js.Any.fromFunction0(isPropagationStopped), preventDefault = js.Any.fromFunction0(preventDefault), stopImmediatePropagation = js.Any.fromFunction0(stopImmediatePropagation), stopPropagation = js.Any.fromFunction0(stopPropagation), target = target.asInstanceOf[js.Any], timeStamp = timeStamp.asInstanceOf[js.Any], view = view.asInstanceOf[js.Any])
      __obj.updateDynamic("type")(`type`.asInstanceOf[js.Any])
      __obj.asInstanceOf[UIEventBase[TDelegateTarget, TData, TCurrentTarget, TTarget]]
    }
    
    @scala.inline
    implicit class UIEventBaseMutableBuilder[Self <: UIEventBase[_, _, _, _], TDelegateTarget, TData, TCurrentTarget, TTarget] (val x: Self with (UIEventBase[TDelegateTarget, TData, TCurrentTarget, TTarget])) extends AnyVal {
      
      @scala.inline
      def setBubbles(value: Boolean): Self = StObject.set(x, "bubbles", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setCancelable(value: Boolean): Self = StObject.set(x, "cancelable", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setDetail(value: Double): Self = StObject.set(x, "detail", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setEventPhase(value: Double): Self = StObject.set(x, "eventPhase", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setOriginalEvent(value: org.scalajs.dom.raw.UIEvent): Self = StObject.set(x, "originalEvent", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setOriginalEventUndefined: Self = StObject.set(x, "originalEvent", js.undefined)
      
      @scala.inline
      def setView(value: Window): Self = StObject.set(x, "view", value.asInstanceOf[js.Any])
    }
  }
  
  @js.native
  trait UrlAjaxSettings[TContext] extends AjaxSettingsBase[TContext] {
    
    /**
      * A string containing the URL to which the request is sent.
      */
    var url: String = js.native
  }
  object UrlAjaxSettings {
    
    @scala.inline
    def apply[TContext](url: String): UrlAjaxSettings[TContext] = {
      val __obj = js.Dynamic.literal(url = url.asInstanceOf[js.Any])
      __obj.asInstanceOf[UrlAjaxSettings[TContext]]
    }
    
    @scala.inline
    implicit class UrlAjaxSettingsMutableBuilder[Self <: UrlAjaxSettings[_], TContext] (val x: Self with UrlAjaxSettings[TContext]) extends AnyVal {
      
      @scala.inline
      def setUrl(value: String): Self = StObject.set(x, "url", value.asInstanceOf[js.Any])
    }
  }
  
  // #endregion
  // region Val hooks
  // #region Val hooks
  // Workaround for TypeScript 2.3 which does not have support for weak types handling.
  /* Rewritten from type alias, can be one of: 
    - typingsSlinky.jquery.anon.`0`[TElement]
    - typingsSlinky.jquery.anon.`1`[TElement]
    - org.scalablytyped.runtime.StringDictionary[scala.Nothing]
  */
  type ValHook[TElement] = _ValHook[TElement] | StringDictionary[scala.Nothing]
  
  type ValHooks = // Set to HTMLElement to minimize breaks but should probably be Element.
  StringDictionary[ValHook[HTMLElement]]
  
  @js.native
  trait _CSSHook[TElement] extends StObject {
    
    def get(elem: TElement, computed: js.Any, extra: js.Any): js.Any = js.native
    
    def set(elem: TElement, value: js.Any): Unit = js.native
  }
  object _CSSHook {
    
    @scala.inline
    def apply[TElement](get: (TElement, js.Any, js.Any) => js.Any, set: (TElement, js.Any) => Unit): _CSSHook[TElement] = {
      val __obj = js.Dynamic.literal(get = js.Any.fromFunction3(get), set = js.Any.fromFunction2(set))
      __obj.asInstanceOf[_CSSHook[TElement]]
    }
    
    @scala.inline
    implicit class _CSSHookMutableBuilder[Self <: _CSSHook[_], TElement] (val x: Self with _CSSHook[TElement]) extends AnyVal {
      
      @scala.inline
      def setGet(value: (TElement, js.Any, js.Any) => js.Any): Self = StObject.set(x, "get", js.Any.fromFunction3(value))
      
      @scala.inline
      def setSet(value: (TElement, js.Any) => Unit): Self = StObject.set(x, "set", js.Any.fromFunction2(value))
    }
  }
  
  trait _CoordinatesPartial extends StObject
  object _CoordinatesPartial {
    
    @scala.inline
    def PickCoordinatesleft(left: Double): typingsSlinky.jquery.anon.PickCoordinatesleft = {
      val __obj = js.Dynamic.literal(left = left.asInstanceOf[js.Any])
      __obj.asInstanceOf[typingsSlinky.jquery.anon.PickCoordinatesleft]
    }
    
    @scala.inline
    def PickCoordinatestop(top: Double): typingsSlinky.jquery.anon.PickCoordinatestop = {
      val __obj = js.Dynamic.literal(top = top.asInstanceOf[js.Any])
      __obj.asInstanceOf[typingsSlinky.jquery.anon.PickCoordinatestop]
    }
  }
  
  trait _Duration extends StObject
  
  trait _Falsy extends StObject
  
  trait _PropHook[TElement] extends StObject
  object _PropHook {
    
    @scala.inline
    def Get[TElement](get: Tween[TElement] => js.Any): typingsSlinky.jquery.anon.Get[TElement] = {
      val __obj = js.Dynamic.literal(get = js.Any.fromFunction1(get))
      __obj.asInstanceOf[typingsSlinky.jquery.anon.Get[TElement]]
    }
    
    @scala.inline
    def Set[TElement](set: Tween[TElement] => Unit): typingsSlinky.jquery.anon.Set[TElement] = {
      val __obj = js.Dynamic.literal(set = js.Any.fromFunction1(set))
      __obj.asInstanceOf[typingsSlinky.jquery.anon.Set[TElement]]
    }
  }
  
  trait _SpecialEventHook[TTarget, TData] extends StObject
  object _SpecialEventHook {
    
    @scala.inline
    def Add[TTarget, TData](add: HandleObject[TTarget, TData] => Unit): typingsSlinky.jquery.anon.Add[TTarget, TData] = {
      val __obj = js.Dynamic.literal(add = js.Any.fromFunction1(add))
      __obj.asInstanceOf[typingsSlinky.jquery.anon.Add[TTarget, TData]]
    }
    
    @scala.inline
    def BindType(bindType: String): typingsSlinky.jquery.anon.BindType = {
      val __obj = js.Dynamic.literal(bindType = bindType.asInstanceOf[js.Any])
      __obj.asInstanceOf[typingsSlinky.jquery.anon.BindType]
    }
    
    @scala.inline
    def Default[TTarget, TData](_default: (TriggeredEvent[TTarget, TData, _, _], TData) => Unit | `false`): typingsSlinky.jquery.anon.Default[TTarget, TData] = {
      val __obj = js.Dynamic.literal(_default = js.Any.fromFunction2(_default))
      __obj.asInstanceOf[typingsSlinky.jquery.anon.Default[TTarget, TData]]
    }
    
    @scala.inline
    def DelegateType(delegateType: String): typingsSlinky.jquery.anon.DelegateType = {
      val __obj = js.Dynamic.literal(delegateType = delegateType.asInstanceOf[js.Any])
      __obj.asInstanceOf[typingsSlinky.jquery.anon.DelegateType]
    }
    
    @scala.inline
    def Handle[TTarget, TData](
      handle: ((TriggeredEvent[TTarget, TData, _, _]) with (HandleObj[TTarget, TData]), /* repeated */ TData) => Unit
    ): typingsSlinky.jquery.anon.Handle[TTarget, TData] = {
      val __obj = js.Dynamic.literal(handle = js.Any.fromFunction2(handle))
      __obj.asInstanceOf[typingsSlinky.jquery.anon.Handle[TTarget, TData]]
    }
    
    @scala.inline
    def NoBubble(noBubble: Boolean): typingsSlinky.jquery.anon.NoBubble = {
      val __obj = js.Dynamic.literal(noBubble = noBubble.asInstanceOf[js.Any])
      __obj.asInstanceOf[typingsSlinky.jquery.anon.NoBubble]
    }
    
    @scala.inline
    def PostDispatch[TTarget](postDispatch: typingsSlinky.jquery.JQuery.Event => Unit): typingsSlinky.jquery.anon.PostDispatch[TTarget] = {
      val __obj = js.Dynamic.literal(postDispatch = js.Any.fromFunction1(postDispatch))
      __obj.asInstanceOf[typingsSlinky.jquery.anon.PostDispatch[TTarget]]
    }
    
    @scala.inline
    def PreDispatch[TTarget](preDispatch: typingsSlinky.jquery.JQuery.Event => `false` | Unit): typingsSlinky.jquery.anon.PreDispatch[TTarget] = {
      val __obj = js.Dynamic.literal(preDispatch = js.Any.fromFunction1(preDispatch))
      __obj.asInstanceOf[typingsSlinky.jquery.anon.PreDispatch[TTarget]]
    }
    
    @scala.inline
    def Remove[TTarget, TData](remove: HandleObject[TTarget, TData] => Unit): typingsSlinky.jquery.anon.Remove[TTarget, TData] = {
      val __obj = js.Dynamic.literal(remove = js.Any.fromFunction1(remove))
      __obj.asInstanceOf[typingsSlinky.jquery.anon.Remove[TTarget, TData]]
    }
    
    @scala.inline
    def Setup[TTarget, TData](setup: (TData, String, EventHandler[TTarget, TData]) => Unit | `false`): typingsSlinky.jquery.anon.Setup[TTarget, TData] = {
      val __obj = js.Dynamic.literal(setup = js.Any.fromFunction3(setup))
      __obj.asInstanceOf[typingsSlinky.jquery.anon.Setup[TTarget, TData]]
    }
    
    @scala.inline
    def Teardown[TTarget](teardown: () => Unit | `false`): typingsSlinky.jquery.anon.Teardown[TTarget] = {
      val __obj = js.Dynamic.literal(teardown = js.Any.fromFunction0(teardown))
      __obj.asInstanceOf[typingsSlinky.jquery.anon.Teardown[TTarget]]
    }
    
    @scala.inline
    def Trigger[TTarget, TData](trigger: (typingsSlinky.jquery.JQuery.Event, TData) => Unit | `false`): typingsSlinky.jquery.anon.Trigger[TTarget, TData] = {
      val __obj = js.Dynamic.literal(trigger = js.Any.fromFunction2(trigger))
      __obj.asInstanceOf[typingsSlinky.jquery.anon.Trigger[TTarget, TData]]
    }
  }
  
  trait _SpeedSettings[TElement] extends StObject
  object _SpeedSettings {
    
    @scala.inline
    def Complete[TElement](complete: () => Unit): typingsSlinky.jquery.anon.Complete[TElement] = {
      val __obj = js.Dynamic.literal(complete = js.Any.fromFunction0(complete))
      __obj.asInstanceOf[typingsSlinky.jquery.anon.Complete[TElement]]
    }
    
    @scala.inline
    def Duration(duration: typingsSlinky.jquery.JQuery.Duration): typingsSlinky.jquery.anon.Duration = {
      val __obj = js.Dynamic.literal(duration = duration.asInstanceOf[js.Any])
      __obj.asInstanceOf[typingsSlinky.jquery.anon.Duration]
    }
    
    @scala.inline
    def Easing(easing: String): typingsSlinky.jquery.anon.Easing = {
      val __obj = js.Dynamic.literal(easing = easing.asInstanceOf[js.Any])
      __obj.asInstanceOf[typingsSlinky.jquery.anon.Easing]
    }
  }
  
  /* Inlined {[ TType in keyof jquery.JQuery.TypeToTriggeredEventMap<TDelegateTarget, TData, TCurrentTarget, TTarget> ]:? jquery.JQuery.TypeEventHandler<TDelegateTarget, TData, TCurrentTarget, TTarget, TType> | false | object} */
  @js.native
  trait _TypeEventHandlers[TDelegateTarget, TData, TCurrentTarget, TTarget] extends StObject {
    
    var blur: js.UndefOr[
        (TypeEventHandler[TDelegateTarget, TData, TCurrentTarget, TTarget, typingsSlinky.jquery.jqueryStrings.blur]) | `false` | js.Object
      ] = js.native
    
    var change: js.UndefOr[
        (TypeEventHandler[
          TDelegateTarget, 
          TData, 
          TCurrentTarget, 
          TTarget, 
          typingsSlinky.jquery.jqueryStrings.change
        ]) | `false` | js.Object
      ] = js.native
    
    var click: js.UndefOr[
        (TypeEventHandler[
          TDelegateTarget, 
          TData, 
          TCurrentTarget, 
          TTarget, 
          typingsSlinky.jquery.jqueryStrings.click
        ]) | `false` | js.Object
      ] = js.native
    
    var contextmenu: js.UndefOr[
        (TypeEventHandler[
          TDelegateTarget, 
          TData, 
          TCurrentTarget, 
          TTarget, 
          typingsSlinky.jquery.jqueryStrings.contextmenu
        ]) | `false` | js.Object
      ] = js.native
    
    var dblclick: js.UndefOr[
        (TypeEventHandler[
          TDelegateTarget, 
          TData, 
          TCurrentTarget, 
          TTarget, 
          typingsSlinky.jquery.jqueryStrings.dblclick
        ]) | `false` | js.Object
      ] = js.native
    
    var drag: js.UndefOr[
        (TypeEventHandler[TDelegateTarget, TData, TCurrentTarget, TTarget, typingsSlinky.jquery.jqueryStrings.drag]) | `false` | js.Object
      ] = js.native
    
    var dragend: js.UndefOr[
        (TypeEventHandler[
          TDelegateTarget, 
          TData, 
          TCurrentTarget, 
          TTarget, 
          typingsSlinky.jquery.jqueryStrings.dragend
        ]) | `false` | js.Object
      ] = js.native
    
    var dragenter: js.UndefOr[
        (TypeEventHandler[
          TDelegateTarget, 
          TData, 
          TCurrentTarget, 
          TTarget, 
          typingsSlinky.jquery.jqueryStrings.dragenter
        ]) | `false` | js.Object
      ] = js.native
    
    var dragexit: js.UndefOr[
        (TypeEventHandler[
          TDelegateTarget, 
          TData, 
          TCurrentTarget, 
          TTarget, 
          typingsSlinky.jquery.jqueryStrings.dragexit
        ]) | `false` | js.Object
      ] = js.native
    
    var dragleave: js.UndefOr[
        (TypeEventHandler[
          TDelegateTarget, 
          TData, 
          TCurrentTarget, 
          TTarget, 
          typingsSlinky.jquery.jqueryStrings.dragleave
        ]) | `false` | js.Object
      ] = js.native
    
    var dragover: js.UndefOr[
        (TypeEventHandler[
          TDelegateTarget, 
          TData, 
          TCurrentTarget, 
          TTarget, 
          typingsSlinky.jquery.jqueryStrings.dragover
        ]) | `false` | js.Object
      ] = js.native
    
    var dragstart: js.UndefOr[
        (TypeEventHandler[
          TDelegateTarget, 
          TData, 
          TCurrentTarget, 
          TTarget, 
          typingsSlinky.jquery.jqueryStrings.dragstart
        ]) | `false` | js.Object
      ] = js.native
    
    var drop: js.UndefOr[
        (TypeEventHandler[TDelegateTarget, TData, TCurrentTarget, TTarget, typingsSlinky.jquery.jqueryStrings.drop]) | `false` | js.Object
      ] = js.native
    
    var focus: js.UndefOr[
        (TypeEventHandler[
          TDelegateTarget, 
          TData, 
          TCurrentTarget, 
          TTarget, 
          typingsSlinky.jquery.jqueryStrings.focus
        ]) | `false` | js.Object
      ] = js.native
    
    var focusin: js.UndefOr[
        (TypeEventHandler[
          TDelegateTarget, 
          TData, 
          TCurrentTarget, 
          TTarget, 
          typingsSlinky.jquery.jqueryStrings.focusin
        ]) | `false` | js.Object
      ] = js.native
    
    var focusout: js.UndefOr[
        (TypeEventHandler[
          TDelegateTarget, 
          TData, 
          TCurrentTarget, 
          TTarget, 
          typingsSlinky.jquery.jqueryStrings.focusout
        ]) | `false` | js.Object
      ] = js.native
    
    var keydown: js.UndefOr[
        (TypeEventHandler[
          TDelegateTarget, 
          TData, 
          TCurrentTarget, 
          TTarget, 
          typingsSlinky.jquery.jqueryStrings.keydown
        ]) | `false` | js.Object
      ] = js.native
    
    var keypress: js.UndefOr[
        (TypeEventHandler[
          TDelegateTarget, 
          TData, 
          TCurrentTarget, 
          TTarget, 
          typingsSlinky.jquery.jqueryStrings.keypress
        ]) | `false` | js.Object
      ] = js.native
    
    var keyup: js.UndefOr[
        (TypeEventHandler[
          TDelegateTarget, 
          TData, 
          TCurrentTarget, 
          TTarget, 
          typingsSlinky.jquery.jqueryStrings.keyup
        ]) | `false` | js.Object
      ] = js.native
    
    var mousedown: js.UndefOr[
        (TypeEventHandler[
          TDelegateTarget, 
          TData, 
          TCurrentTarget, 
          TTarget, 
          typingsSlinky.jquery.jqueryStrings.mousedown
        ]) | `false` | js.Object
      ] = js.native
    
    var mouseenter: js.UndefOr[
        (TypeEventHandler[
          TDelegateTarget, 
          TData, 
          TCurrentTarget, 
          TTarget, 
          typingsSlinky.jquery.jqueryStrings.mouseenter
        ]) | `false` | js.Object
      ] = js.native
    
    var mouseleave: js.UndefOr[
        (TypeEventHandler[
          TDelegateTarget, 
          TData, 
          TCurrentTarget, 
          TTarget, 
          typingsSlinky.jquery.jqueryStrings.mouseleave
        ]) | `false` | js.Object
      ] = js.native
    
    var mousemove: js.UndefOr[
        (TypeEventHandler[
          TDelegateTarget, 
          TData, 
          TCurrentTarget, 
          TTarget, 
          typingsSlinky.jquery.jqueryStrings.mousemove
        ]) | `false` | js.Object
      ] = js.native
    
    var mouseout: js.UndefOr[
        (TypeEventHandler[
          TDelegateTarget, 
          TData, 
          TCurrentTarget, 
          TTarget, 
          typingsSlinky.jquery.jqueryStrings.mouseout
        ]) | `false` | js.Object
      ] = js.native
    
    var mouseover: js.UndefOr[
        (TypeEventHandler[
          TDelegateTarget, 
          TData, 
          TCurrentTarget, 
          TTarget, 
          typingsSlinky.jquery.jqueryStrings.mouseover
        ]) | `false` | js.Object
      ] = js.native
    
    var mouseup: js.UndefOr[
        (TypeEventHandler[
          TDelegateTarget, 
          TData, 
          TCurrentTarget, 
          TTarget, 
          typingsSlinky.jquery.jqueryStrings.mouseup
        ]) | `false` | js.Object
      ] = js.native
    
    var resize: js.UndefOr[
        (TypeEventHandler[
          TDelegateTarget, 
          TData, 
          TCurrentTarget, 
          TTarget, 
          typingsSlinky.jquery.jqueryStrings.resize
        ]) | `false` | js.Object
      ] = js.native
    
    var scroll: js.UndefOr[
        (TypeEventHandler[
          TDelegateTarget, 
          TData, 
          TCurrentTarget, 
          TTarget, 
          typingsSlinky.jquery.jqueryStrings.scroll
        ]) | `false` | js.Object
      ] = js.native
    
    var select: js.UndefOr[
        (TypeEventHandler[
          TDelegateTarget, 
          TData, 
          TCurrentTarget, 
          TTarget, 
          typingsSlinky.jquery.jqueryStrings.select
        ]) | `false` | js.Object
      ] = js.native
    
    var submit: js.UndefOr[
        (TypeEventHandler[
          TDelegateTarget, 
          TData, 
          TCurrentTarget, 
          TTarget, 
          typingsSlinky.jquery.jqueryStrings.submit
        ]) | `false` | js.Object
      ] = js.native
    
    var touchcancel: js.UndefOr[
        (TypeEventHandler[
          TDelegateTarget, 
          TData, 
          TCurrentTarget, 
          TTarget, 
          typingsSlinky.jquery.jqueryStrings.touchcancel
        ]) | `false` | js.Object
      ] = js.native
    
    var touchend: js.UndefOr[
        (TypeEventHandler[
          TDelegateTarget, 
          TData, 
          TCurrentTarget, 
          TTarget, 
          typingsSlinky.jquery.jqueryStrings.touchend
        ]) | `false` | js.Object
      ] = js.native
    
    var touchmove: js.UndefOr[
        (TypeEventHandler[
          TDelegateTarget, 
          TData, 
          TCurrentTarget, 
          TTarget, 
          typingsSlinky.jquery.jqueryStrings.touchmove
        ]) | `false` | js.Object
      ] = js.native
    
    var touchstart: js.UndefOr[
        (TypeEventHandler[
          TDelegateTarget, 
          TData, 
          TCurrentTarget, 
          TTarget, 
          typingsSlinky.jquery.jqueryStrings.touchstart
        ]) | `false` | js.Object
      ] = js.native
  }
  object _TypeEventHandlers {
    
    @scala.inline
    def apply[TDelegateTarget, TData, TCurrentTarget, TTarget](): _TypeEventHandlers[TDelegateTarget, TData, TCurrentTarget, TTarget] = {
      val __obj = js.Dynamic.literal()
      __obj.asInstanceOf[_TypeEventHandlers[TDelegateTarget, TData, TCurrentTarget, TTarget]]
    }
    
    @scala.inline
    implicit class _TypeEventHandlersMutableBuilder[Self <: _TypeEventHandlers[_, _, _, _], TDelegateTarget, TData, TCurrentTarget, TTarget] (val x: Self with (_TypeEventHandlers[TDelegateTarget, TData, TCurrentTarget, TTarget])) extends AnyVal {
      
      @scala.inline
      def setBlur(
        value: (TypeEventHandler[TDelegateTarget, TData, TCurrentTarget, TTarget, blur]) | `false` | js.Object
      ): Self = StObject.set(x, "blur", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setBlurUndefined: Self = StObject.set(x, "blur", js.undefined)
      
      @scala.inline
      def setChange(
        value: (TypeEventHandler[TDelegateTarget, TData, TCurrentTarget, TTarget, change]) | `false` | js.Object
      ): Self = StObject.set(x, "change", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setChangeUndefined: Self = StObject.set(x, "change", js.undefined)
      
      @scala.inline
      def setClick(
        value: (TypeEventHandler[TDelegateTarget, TData, TCurrentTarget, TTarget, click]) | `false` | js.Object
      ): Self = StObject.set(x, "click", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setClickUndefined: Self = StObject.set(x, "click", js.undefined)
      
      @scala.inline
      def setContextmenu(
        value: (TypeEventHandler[TDelegateTarget, TData, TCurrentTarget, TTarget, contextmenu]) | `false` | js.Object
      ): Self = StObject.set(x, "contextmenu", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setContextmenuUndefined: Self = StObject.set(x, "contextmenu", js.undefined)
      
      @scala.inline
      def setDblclick(
        value: (TypeEventHandler[TDelegateTarget, TData, TCurrentTarget, TTarget, dblclick]) | `false` | js.Object
      ): Self = StObject.set(x, "dblclick", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setDblclickUndefined: Self = StObject.set(x, "dblclick", js.undefined)
      
      @scala.inline
      def setDrag(
        value: (TypeEventHandler[TDelegateTarget, TData, TCurrentTarget, TTarget, drag]) | `false` | js.Object
      ): Self = StObject.set(x, "drag", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setDragUndefined: Self = StObject.set(x, "drag", js.undefined)
      
      @scala.inline
      def setDragend(
        value: (TypeEventHandler[TDelegateTarget, TData, TCurrentTarget, TTarget, dragend]) | `false` | js.Object
      ): Self = StObject.set(x, "dragend", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setDragendUndefined: Self = StObject.set(x, "dragend", js.undefined)
      
      @scala.inline
      def setDragenter(
        value: (TypeEventHandler[TDelegateTarget, TData, TCurrentTarget, TTarget, dragenter]) | `false` | js.Object
      ): Self = StObject.set(x, "dragenter", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setDragenterUndefined: Self = StObject.set(x, "dragenter", js.undefined)
      
      @scala.inline
      def setDragexit(
        value: (TypeEventHandler[TDelegateTarget, TData, TCurrentTarget, TTarget, dragexit]) | `false` | js.Object
      ): Self = StObject.set(x, "dragexit", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setDragexitUndefined: Self = StObject.set(x, "dragexit", js.undefined)
      
      @scala.inline
      def setDragleave(
        value: (TypeEventHandler[TDelegateTarget, TData, TCurrentTarget, TTarget, dragleave]) | `false` | js.Object
      ): Self = StObject.set(x, "dragleave", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setDragleaveUndefined: Self = StObject.set(x, "dragleave", js.undefined)
      
      @scala.inline
      def setDragover(
        value: (TypeEventHandler[TDelegateTarget, TData, TCurrentTarget, TTarget, dragover]) | `false` | js.Object
      ): Self = StObject.set(x, "dragover", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setDragoverUndefined: Self = StObject.set(x, "dragover", js.undefined)
      
      @scala.inline
      def setDragstart(
        value: (TypeEventHandler[TDelegateTarget, TData, TCurrentTarget, TTarget, dragstart]) | `false` | js.Object
      ): Self = StObject.set(x, "dragstart", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setDragstartUndefined: Self = StObject.set(x, "dragstart", js.undefined)
      
      @scala.inline
      def setDrop(
        value: (TypeEventHandler[TDelegateTarget, TData, TCurrentTarget, TTarget, drop]) | `false` | js.Object
      ): Self = StObject.set(x, "drop", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setDropUndefined: Self = StObject.set(x, "drop", js.undefined)
      
      @scala.inline
      def setFocus(
        value: (TypeEventHandler[TDelegateTarget, TData, TCurrentTarget, TTarget, focus]) | `false` | js.Object
      ): Self = StObject.set(x, "focus", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setFocusUndefined: Self = StObject.set(x, "focus", js.undefined)
      
      @scala.inline
      def setFocusin(
        value: (TypeEventHandler[TDelegateTarget, TData, TCurrentTarget, TTarget, focusin]) | `false` | js.Object
      ): Self = StObject.set(x, "focusin", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setFocusinUndefined: Self = StObject.set(x, "focusin", js.undefined)
      
      @scala.inline
      def setFocusout(
        value: (TypeEventHandler[TDelegateTarget, TData, TCurrentTarget, TTarget, focusout]) | `false` | js.Object
      ): Self = StObject.set(x, "focusout", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setFocusoutUndefined: Self = StObject.set(x, "focusout", js.undefined)
      
      @scala.inline
      def setKeydown(
        value: (TypeEventHandler[TDelegateTarget, TData, TCurrentTarget, TTarget, keydown]) | `false` | js.Object
      ): Self = StObject.set(x, "keydown", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setKeydownUndefined: Self = StObject.set(x, "keydown", js.undefined)
      
      @scala.inline
      def setKeypress(
        value: (TypeEventHandler[TDelegateTarget, TData, TCurrentTarget, TTarget, keypress]) | `false` | js.Object
      ): Self = StObject.set(x, "keypress", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setKeypressUndefined: Self = StObject.set(x, "keypress", js.undefined)
      
      @scala.inline
      def setKeyup(
        value: (TypeEventHandler[TDelegateTarget, TData, TCurrentTarget, TTarget, keyup]) | `false` | js.Object
      ): Self = StObject.set(x, "keyup", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setKeyupUndefined: Self = StObject.set(x, "keyup", js.undefined)
      
      @scala.inline
      def setMousedown(
        value: (TypeEventHandler[TDelegateTarget, TData, TCurrentTarget, TTarget, mousedown]) | `false` | js.Object
      ): Self = StObject.set(x, "mousedown", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setMousedownUndefined: Self = StObject.set(x, "mousedown", js.undefined)
      
      @scala.inline
      def setMouseenter(
        value: (TypeEventHandler[TDelegateTarget, TData, TCurrentTarget, TTarget, mouseenter]) | `false` | js.Object
      ): Self = StObject.set(x, "mouseenter", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setMouseenterUndefined: Self = StObject.set(x, "mouseenter", js.undefined)
      
      @scala.inline
      def setMouseleave(
        value: (TypeEventHandler[TDelegateTarget, TData, TCurrentTarget, TTarget, mouseleave]) | `false` | js.Object
      ): Self = StObject.set(x, "mouseleave", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setMouseleaveUndefined: Self = StObject.set(x, "mouseleave", js.undefined)
      
      @scala.inline
      def setMousemove(
        value: (TypeEventHandler[TDelegateTarget, TData, TCurrentTarget, TTarget, mousemove]) | `false` | js.Object
      ): Self = StObject.set(x, "mousemove", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setMousemoveUndefined: Self = StObject.set(x, "mousemove", js.undefined)
      
      @scala.inline
      def setMouseout(
        value: (TypeEventHandler[TDelegateTarget, TData, TCurrentTarget, TTarget, mouseout]) | `false` | js.Object
      ): Self = StObject.set(x, "mouseout", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setMouseoutUndefined: Self = StObject.set(x, "mouseout", js.undefined)
      
      @scala.inline
      def setMouseover(
        value: (TypeEventHandler[TDelegateTarget, TData, TCurrentTarget, TTarget, mouseover]) | `false` | js.Object
      ): Self = StObject.set(x, "mouseover", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setMouseoverUndefined: Self = StObject.set(x, "mouseover", js.undefined)
      
      @scala.inline
      def setMouseup(
        value: (TypeEventHandler[TDelegateTarget, TData, TCurrentTarget, TTarget, mouseup]) | `false` | js.Object
      ): Self = StObject.set(x, "mouseup", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setMouseupUndefined: Self = StObject.set(x, "mouseup", js.undefined)
      
      @scala.inline
      def setResize(
        value: (TypeEventHandler[TDelegateTarget, TData, TCurrentTarget, TTarget, resize]) | `false` | js.Object
      ): Self = StObject.set(x, "resize", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setResizeUndefined: Self = StObject.set(x, "resize", js.undefined)
      
      @scala.inline
      def setScroll(
        value: (TypeEventHandler[TDelegateTarget, TData, TCurrentTarget, TTarget, scroll]) | `false` | js.Object
      ): Self = StObject.set(x, "scroll", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setScrollUndefined: Self = StObject.set(x, "scroll", js.undefined)
      
      @scala.inline
      def setSelect(
        value: (TypeEventHandler[TDelegateTarget, TData, TCurrentTarget, TTarget, select]) | `false` | js.Object
      ): Self = StObject.set(x, "select", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setSelectUndefined: Self = StObject.set(x, "select", js.undefined)
      
      @scala.inline
      def setSubmit(
        value: (TypeEventHandler[TDelegateTarget, TData, TCurrentTarget, TTarget, submit]) | `false` | js.Object
      ): Self = StObject.set(x, "submit", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setSubmitUndefined: Self = StObject.set(x, "submit", js.undefined)
      
      @scala.inline
      def setTouchcancel(
        value: (TypeEventHandler[TDelegateTarget, TData, TCurrentTarget, TTarget, touchcancel]) | `false` | js.Object
      ): Self = StObject.set(x, "touchcancel", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setTouchcancelUndefined: Self = StObject.set(x, "touchcancel", js.undefined)
      
      @scala.inline
      def setTouchend(
        value: (TypeEventHandler[TDelegateTarget, TData, TCurrentTarget, TTarget, touchend]) | `false` | js.Object
      ): Self = StObject.set(x, "touchend", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setTouchendUndefined: Self = StObject.set(x, "touchend", js.undefined)
      
      @scala.inline
      def setTouchmove(
        value: (TypeEventHandler[TDelegateTarget, TData, TCurrentTarget, TTarget, touchmove]) | `false` | js.Object
      ): Self = StObject.set(x, "touchmove", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setTouchmoveUndefined: Self = StObject.set(x, "touchmove", js.undefined)
      
      @scala.inline
      def setTouchstart(
        value: (TypeEventHandler[TDelegateTarget, TData, TCurrentTarget, TTarget, touchstart]) | `false` | js.Object
      ): Self = StObject.set(x, "touchstart", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setTouchstartUndefined: Self = StObject.set(x, "touchstart", js.undefined)
    }
  }
  
  trait _ValHook[TElement] extends StObject
  object _ValHook {
    
    @scala.inline
    def `0`[TElement](get: TElement => js.Any): typingsSlinky.jquery.anon.`0`[TElement] = {
      val __obj = js.Dynamic.literal(get = js.Any.fromFunction1(get))
      __obj.asInstanceOf[typingsSlinky.jquery.anon.`0`[TElement]]
    }
    
    @scala.inline
    def `1`[TElement](set: (TElement, js.Any) => js.Any): typingsSlinky.jquery.anon.`1`[TElement] = {
      val __obj = js.Dynamic.literal(set = js.Any.fromFunction2(set))
      __obj.asInstanceOf[typingsSlinky.jquery.anon.`1`[TElement]]
    }
  }
  
  /**
    * A string is designated htmlString in jQuery documentation when it is used to represent one or more DOM elements, typically to be created and inserted in the document. When passed as an argument of the jQuery() function, the string is identified as HTML if it starts with <tag ... >) and is parsed as such until the final > character. Prior to jQuery 1.9, a string was considered to be HTML if it contained <tag ... > anywhere within the string.
    */
  type htmlString = String
  
  /**
    * @see \`{@link https://api.jquery.com/jquery.ajax/#jqXHR }\`
    */
  /* Inlined parent jquery.JQuery.Promise3<TResolve, jquery.JQuery.jqXHR<TResolve>, never, jquery.JQuery.Ajax.SuccessTextStatus, jquery.JQuery.Ajax.ErrorTextStatus, never, jquery.JQuery.jqXHR<TResolve>, string, never> */
  /* Inlined parent std.Pick<std.XMLHttpRequest, 'abort' | 'getAllResponseHeaders' | 'getResponseHeader' | 'overrideMimeType' | 'readyState' | 'responseText' | 'setRequestHeader' | 'status' | 'statusText'> */
  /* Inlined parent std.Partial<std.Pick<std.XMLHttpRequest, 'responseXML'>> */
  @js.native
  trait jqXHR[TResolve] extends StObject {
    
    def abort(): Unit = js.native
    def abort(statusText: String): Unit = js.native
    @JSName("abort")
    var abort_Original: js.Function0[Unit] = js.native
    
    /**
      * Add handlers to be called when the Deferred object is either resolved or rejected.
      * @param alwaysCallback A function, or array of functions, that is called when the Deferred is resolved or rejected.
      * @param alwaysCallbacks Optional additional functions, or arrays of functions, that are called when the Deferred is resolved or rejected.
      * @see \`{@link https://api.jquery.com/deferred.always/ }\`
      * @since 1.6
      * @example ​ ````Since the jQuery.get() method returns a jqXHR object, which is derived from a Deferred object, we can attach a callback for both success and error using the deferred.always() method.
    ```javascript
    $.get( "test.php" ).always(function() {
      alert( "$.get completed with success or error callback arguments" );
    });
    ```
      */
    def always(
      alwaysCallback: TypeOrArray[
          CallbackBase[
            TResolve | jqXHR[TResolve], 
            SuccessTextStatus | ErrorTextStatus, 
            jqXHR[TResolve] | String, 
            scala.Nothing
          ]
        ],
      alwaysCallbacks: (TypeOrArray[
          CallbackBase[
            TResolve | jqXHR[TResolve], 
            SuccessTextStatus | ErrorTextStatus, 
            jqXHR[TResolve] | String, 
            scala.Nothing
          ]
        ])*
    ): this.type = js.native
    
    // #endregion
    /**
      * Add handlers to be called when the Deferred object is rejected.
      * @param failFilter A function that is called when the Deferred is rejected.
      * @see \`{@link https://api.jquery.com/deferred.catch/ }\`
      * @since 3.0
      * @example ​ ````Since the jQuery.get method returns a jqXHR object, which is derived from a Deferred object, we can rejection handlers using the .catch method.
    ```javascript
    $.get( "test.php" )
      .then( function() {
      alert( "$.get succeeded" );
      } )
      .catch( function() {
      alert( "$.get failed!" );
      } );
    ```
      */
    def `catch`[ARF, AJF, ANF, BRF, BJF, BNF, CRF, CJF, CNF, RRF, RJF, RNF](): PromiseBase[ARF, AJF, ANF, BRF, BJF, BNF, CRF, CJF, CNF, RRF, RJF, RNF] = js.native
    def `catch`[ARF, AJF, ANF, BRF, BJF, BNF, CRF, CJF, CNF, RRF, RJF, RNF](
      failFilter: js.Function4[
          /* t */ jqXHR[TResolve], 
          /* u */ ErrorTextStatus, 
          /* v */ String, 
          /* repeated */ scala.Nothing, 
          (PromiseBase[ARF, AJF, ANF, BRF, BJF, BNF, CRF, CJF, CNF, RRF, RJF, RNF]) | Thenable[ARF] | ARF
        ]
    ): PromiseBase[ARF, AJF, ANF, BRF, BJF, BNF, CRF, CJF, CNF, RRF, RJF, RNF] = js.native
    
    /**
      * Add handlers to be called when the Deferred object is resolved.
      * @param doneCallback A function, or array of functions, that are called when the Deferred is resolved.
      * @param doneCallbacks Optional additional functions, or arrays of functions, that are called when the Deferred is resolved.
      * @see \`{@link https://api.jquery.com/deferred.done/ }\`
      * @since 1.5
      * @example ​ ````Since the jQuery.get method returns a jqXHR object, which is derived from a Deferred object, we can attach a success callback using the .done() method.
    ```javascript
    $.get( "test.php" ).done(function() {
      alert( "$.get succeeded" );
    });
    ```
      * @example ​ ````Resolve a Deferred object when the user clicks a button, triggering a number of callback functions:
    ```html
    <!doctype html>
    <html lang="en">
    <head>
      <meta charset="utf-8">
      <title>deferred.done demo</title>
      <script src="https://code.jquery.com/jquery-3.3.1.js"></script>
    </head>
    <body>
    ​
    <button>Go</button>
    <p>Ready...</p>
    ​
    <script>
    // 3 functions to call when the Deferred object is resolved
    function fn1() {
      $( "p" ).append( " 1 " );
    }
    function fn2() {
      $( "p" ).append( " 2 " );
    }
    function fn3( n ) {
      $( "p" ).append( n + " 3 " + n );
    }
    ​
    // Create a deferred object
    var dfd = $.Deferred();
    ​
    // Add handlers to be called when dfd is resolved
    dfd
    // .done() can take any number of functions or arrays of functions
      .done( [ fn1, fn2 ], fn3, [ fn2, fn1 ] )
    // We can chain done methods, too
      .done(function( n ) {
      $( "p" ).append( n + " we're done." );
      });
    ​
    // Resolve the Deferred object when the button is clicked
    $( "button" ).on( "click", function() {
      dfd.resolve( "and" );
    });
    </script>
    ​
    </body>
    </html>
    ```
      */
    def done(
      doneCallback: TypeOrArray[CallbackBase[TResolve, SuccessTextStatus, jqXHR[TResolve], scala.Nothing]],
      doneCallbacks: (TypeOrArray[CallbackBase[TResolve, SuccessTextStatus, jqXHR[TResolve], scala.Nothing]])*
    ): this.type = js.native
    
    /**
      * Add handlers to be called when the Deferred object is rejected.
      * @param failCallback A function, or array of functions, that are called when the Deferred is rejected.
      * @param failCallbacks Optional additional functions, or arrays of functions, that are called when the Deferred is rejected.
      * @see \`{@link https://api.jquery.com/deferred.fail/ }\`
      * @since 1.5
      * @example ​ ````Since the jQuery.get method returns a jqXHR object, which is derived from a Deferred, you can attach a success and failure callback using the deferred.done() and deferred.fail() methods.
    ```javascript
    $.get( "test.php" )
      .done(function() {
      alert( "$.get succeeded" );
      })
      .fail(function() {
      alert( "$.get failed!" );
      });
    ```
      */
    def fail(
      failCallback: TypeOrArray[CallbackBase[jqXHR[TResolve], ErrorTextStatus, String, scala.Nothing]],
      failCallbacks: (TypeOrArray[CallbackBase[jqXHR[TResolve], ErrorTextStatus, String, scala.Nothing]])*
    ): this.type = js.native
    
    def getAllResponseHeaders(): String = js.native
    @JSName("getAllResponseHeaders")
    var getAllResponseHeaders_Original: js.Function0[String] = js.native
    
    def getResponseHeader(name: String): String | Null = js.native
    @JSName("getResponseHeader")
    var getResponseHeader_Original: js.Function1[/* name */ String, String | Null] = js.native
    
    def overrideMimeType(mime: String): Unit = js.native
    @JSName("overrideMimeType")
    var overrideMimeType_Original: js.Function1[/* mime */ String, Unit] = js.native
    
    /**
      * Utility method to filter and/or chain Deferreds.
      * @param doneFilter An optional function that is called when the Deferred is resolved.
      * @param failFilter An optional function that is called when the Deferred is rejected.
      * @param progressFilter An optional function that is called when progress notifications are sent to the Deferred.
      * @see \`{@link https://api.jquery.com/deferred.pipe/ }\`
      * @since 1.6
      * @since 1.7
      * @deprecated ​ Deprecated since 1.8. Use \`{@link then }\`.
      *
      * **Cause**: The `.pipe()` method on a `jQuery.Deferred` object was deprecated as of jQuery 1.8, when the `.then()` method was changed to perform the same function.
      *
      * **Solution**: In most cases it is sufficient to change all occurrences of `.pipe()` to `.then()`. Ensure that you aren't relying on context/state propagation (e.g., using `this`) or synchronous callback invocation, which were dropped from `.then()` for Promises/A+ interoperability as of jQuery 3.0.
      * @example ​ ````Chain tasks:
    ```javascript
    var request = $.ajax( url, { dataType: "json" } ),
      chained = request.pipe(function( data ) {
      return $.ajax( url2, { data: { user: data.userId } } );
      });
    ​
    chained.done(function( data ) {
      // data retrieved from url2 as provided by the first request
    });
    ```
      */
    def pipe[ARP, AJP, ANP, BRP, BJP, BNP, CRP, CJP, CNP, RRP, RJP, RNP](): PromiseBase[ARP, AJP, ANP, BRP, BJP, BNP, CRP, CJP, CNP, RRP, RJP, RNP] = js.native
    /**
      * Utility method to filter and/or chain Deferreds.
      * @param doneFilter An optional function that is called when the Deferred is resolved.
      * @param failFilter An optional function that is called when the Deferred is rejected.
      * @param progressFilter An optional function that is called when progress notifications are sent to the Deferred.
      * @see \`{@link https://api.jquery.com/deferred.pipe/ }\`
      * @since 1.6
      * @since 1.7
      * @deprecated ​ Deprecated since 1.8. Use \`{@link then }\`.
      *
      * **Cause**: The `.pipe()` method on a `jQuery.Deferred` object was deprecated as of jQuery 1.8, when the `.then()` method was changed to perform the same function.
      *
      * **Solution**: In most cases it is sufficient to change all occurrences of `.pipe()` to `.then()`. Ensure that you aren't relying on context/state propagation (e.g., using `this`) or synchronous callback invocation, which were dropped from `.then()` for Promises/A+ interoperability as of jQuery 3.0.
      * @example ​ ````Filter resolve value:
    ```javascript
    var defer = $.Deferred(),
      filtered = defer.pipe(function( value ) {
      return value * 2;
      });
    ​
    defer.resolve( 5 );
    filtered.done(function( value ) {
      alert( "Value is ( 2*5 = ) 10: " + value );
    });
    ```
      * @example ​ ````Chain tasks:
    ```javascript
    var request = $.ajax( url, { dataType: "json" } ),
      chained = request.pipe(function( data ) {
      return $.ajax( url2, { data: { user: data.userId } } );
      });
    ​
    chained.done(function( data ) {
      // data retrieved from url2 as provided by the first request
    });
    ```
      */
    def pipe[ARD, AJD, AND, BRD, BJD, BND, CRD, CJD, CND, RRD, RJD, RND](
      doneFilter: js.Function4[
          /* t */ TResolve, 
          /* u */ SuccessTextStatus, 
          /* v */ jqXHR[TResolve], 
          /* repeated */ scala.Nothing, 
          (PromiseBase[ARD, AJD, AND, BRD, BJD, BND, CRD, CJD, CND, RRD, RJD, RND]) | Thenable[ARD] | ARD
        ]
    ): PromiseBase[ARD, AJD, AND, BRD, BJD, BND, CRD, CJD, CND, RRD, RJD, RND] = js.native
    /**
      * Utility method to filter and/or chain Deferreds.
      * @param doneFilter An optional function that is called when the Deferred is resolved.
      * @param failFilter An optional function that is called when the Deferred is rejected.
      * @param progressFilter An optional function that is called when progress notifications are sent to the Deferred.
      * @see \`{@link https://api.jquery.com/deferred.pipe/ }\`
      * @since 1.6
      * @since 1.7
      * @deprecated ​ Deprecated since 1.8. Use \`{@link then }\`.
      *
      * **Cause**: The `.pipe()` method on a `jQuery.Deferred` object was deprecated as of jQuery 1.8, when the `.then()` method was changed to perform the same function.
      *
      * **Solution**: In most cases it is sufficient to change all occurrences of `.pipe()` to `.then()`. Ensure that you aren't relying on context/state propagation (e.g., using `this`) or synchronous callback invocation, which were dropped from `.then()` for Promises/A+ interoperability as of jQuery 3.0.
      * @example ​ ````Filter reject value:
    ```javascript
    var defer = $.Deferred(),
      filtered = defer.pipe( null, function( value ) {
      return value * 3;
      });
    ​
    defer.reject( 6 );
    filtered.fail(function( value ) {
      alert( "Value is ( 3*6 = ) 18: " + value );
    });
    ```
      * @example ​ ````Chain tasks:
    ```javascript
    var request = $.ajax( url, { dataType: "json" } ),
      chained = request.pipe(function( data ) {
      return $.ajax( url2, { data: { user: data.userId } } );
      });
    ​
    chained.done(function( data ) {
      // data retrieved from url2 as provided by the first request
    });
    ```
      */
    def pipe[ARF, AJF, ANF, BRF, BJF, BNF, CRF, CJF, CNF, RRF, RJF, RNF](
      doneFilter: Null,
      failFilter: js.Function4[
          /* t */ jqXHR[TResolve], 
          /* u */ ErrorTextStatus, 
          /* v */ String, 
          /* repeated */ scala.Nothing, 
          (PromiseBase[ARF, AJF, ANF, BRF, BJF, BNF, CRF, CJF, CNF, RRF, RJF, RNF]) | Thenable[AJF] | AJF
        ]
    ): PromiseBase[ARF, AJF, ANF, BRF, BJF, BNF, CRF, CJF, CNF, RRF, RJF, RNF] = js.native
    def pipe[ARP, AJP, ANP, BRP, BJP, BNP, CRP, CJP, CNP, RRP, RJP, RNP](
      doneFilter: Null,
      failFilter: Null,
      progressFilter: js.Function4[
          /* t */ scala.Nothing, 
          /* u */ scala.Nothing, 
          /* v */ scala.Nothing, 
          /* repeated */ scala.Nothing, 
          (PromiseBase[ARP, AJP, ANP, BRP, BJP, BNP, CRP, CJP, CNP, RRP, RJP, RNP]) | Thenable[ANP] | ANP
        ]
    ): PromiseBase[ARP, AJP, ANP, BRP, BJP, BNP, CRP, CJP, CNP, RRP, RJP, RNP] = js.native
    /**
      * Utility method to filter and/or chain Deferreds.
      * @param doneFilter An optional function that is called when the Deferred is resolved.
      * @param failFilter An optional function that is called when the Deferred is rejected.
      * @param progressFilter An optional function that is called when progress notifications are sent to the Deferred.
      * @see \`{@link https://api.jquery.com/deferred.pipe/ }\`
      * @since 1.6
      * @since 1.7
      * @deprecated ​ Deprecated since 1.8. Use \`{@link then }\`.
      *
      * **Cause**: The `.pipe()` method on a `jQuery.Deferred` object was deprecated as of jQuery 1.8, when the `.then()` method was changed to perform the same function.
      *
      * **Solution**: In most cases it is sufficient to change all occurrences of `.pipe()` to `.then()`. Ensure that you aren't relying on context/state propagation (e.g., using `this`) or synchronous callback invocation, which were dropped from `.then()` for Promises/A+ interoperability as of jQuery 3.0.
      * @example ​ ````Filter resolve value:
    ```javascript
    var defer = $.Deferred(),
      filtered = defer.pipe(function( value ) {
      return value * 2;
      });
    ​
    defer.resolve( 5 );
    filtered.done(function( value ) {
      alert( "Value is ( 2*5 = ) 10: " + value );
    });
    ```
      * @example ​ ````Filter reject value:
    ```javascript
    var defer = $.Deferred(),
      filtered = defer.pipe( null, function( value ) {
      return value * 3;
      });
    ​
    defer.reject( 6 );
    filtered.fail(function( value ) {
      alert( "Value is ( 3*6 = ) 18: " + value );
    });
    ```
      * @example ​ ````Chain tasks:
    ```javascript
    var request = $.ajax( url, { dataType: "json" } ),
      chained = request.pipe(function( data ) {
      return $.ajax( url2, { data: { user: data.userId } } );
      });
    ​
    chained.done(function( data ) {
      // data retrieved from url2 as provided by the first request
    });
    ```
      */
    def pipe[ARD, AJD, AND, BRD, BJD, BND, CRD, CJD, CND, RRD, RJD, RND, ARF, AJF, ANF, BRF, BJF, BNF, CRF, CJF, CNF, RRF, RJF, RNF](
      doneFilter: js.Function4[
          /* t */ TResolve, 
          /* u */ SuccessTextStatus, 
          /* v */ jqXHR[TResolve], 
          /* repeated */ scala.Nothing, 
          (PromiseBase[ARD, AJD, AND, BRD, BJD, BND, CRD, CJD, CND, RRD, RJD, RND]) | Thenable[ARD] | ARD
        ],
      failFilter: js.Function4[
          /* t */ jqXHR[TResolve], 
          /* u */ ErrorTextStatus, 
          /* v */ String, 
          /* repeated */ scala.Nothing, 
          (PromiseBase[ARF, AJF, ANF, BRF, BJF, BNF, CRF, CJF, CNF, RRF, RJF, RNF]) | Thenable[AJF] | AJF
        ]
    ): PromiseBase[
        ARD | ARF, 
        AJD | AJF, 
        AND | ANF, 
        BRD | BRF, 
        BJD | BJF, 
        BND | BNF, 
        CRD | CRF, 
        CJD | CJF, 
        CND | CNF, 
        RRD | RRF, 
        RJD | RJF, 
        RND | RNF
      ] = js.native
    /**
      * Utility method to filter and/or chain Deferreds.
      * @param doneFilter An optional function that is called when the Deferred is resolved.
      * @param failFilter An optional function that is called when the Deferred is rejected.
      * @param progressFilter An optional function that is called when progress notifications are sent to the Deferred.
      * @see \`{@link https://api.jquery.com/deferred.pipe/ }\`
      * @since 1.6
      * @since 1.7
      * @deprecated ​ Deprecated since 1.8. Use \`{@link then }\`.
      *
      * **Cause**: The `.pipe()` method on a `jQuery.Deferred` object was deprecated as of jQuery 1.8, when the `.then()` method was changed to perform the same function.
      *
      * **Solution**: In most cases it is sufficient to change all occurrences of `.pipe()` to `.then()`. Ensure that you aren't relying on context/state propagation (e.g., using `this`) or synchronous callback invocation, which were dropped from `.then()` for Promises/A+ interoperability as of jQuery 3.0.
      * @example ​ ````Filter resolve value:
    ```javascript
    var defer = $.Deferred(),
      filtered = defer.pipe(function( value ) {
      return value * 2;
      });
    ​
    defer.resolve( 5 );
    filtered.done(function( value ) {
      alert( "Value is ( 2*5 = ) 10: " + value );
    });
    ```
      * @example ​ ````Chain tasks:
    ```javascript
    var request = $.ajax( url, { dataType: "json" } ),
      chained = request.pipe(function( data ) {
      return $.ajax( url2, { data: { user: data.userId } } );
      });
    ​
    chained.done(function( data ) {
      // data retrieved from url2 as provided by the first request
    });
    ```
      */
    def pipe[ARD, AJD, AND, BRD, BJD, BND, CRD, CJD, CND, RRD, RJD, RND, ARP, AJP, ANP, BRP, BJP, BNP, CRP, CJP, CNP, RRP, RJP, RNP](
      doneFilter: js.Function4[
          /* t */ TResolve, 
          /* u */ SuccessTextStatus, 
          /* v */ jqXHR[TResolve], 
          /* repeated */ scala.Nothing, 
          (PromiseBase[ARD, AJD, AND, BRD, BJD, BND, CRD, CJD, CND, RRD, RJD, RND]) | Thenable[ARD] | ARD
        ],
      failFilter: Null,
      progressFilter: js.Function4[
          /* t */ scala.Nothing, 
          /* u */ scala.Nothing, 
          /* v */ scala.Nothing, 
          /* repeated */ scala.Nothing, 
          (PromiseBase[ARP, AJP, ANP, BRP, BJP, BNP, CRP, CJP, CNP, RRP, RJP, RNP]) | Thenable[ANP] | ANP
        ]
    ): PromiseBase[
        ARD | ARP, 
        AJD | AJP, 
        AND | ANP, 
        BRD | BRP, 
        BJD | BJP, 
        BND | BNP, 
        CRD | CRP, 
        CJD | CJP, 
        CND | CNP, 
        RRD | RRP, 
        RJD | RJP, 
        RND | RNP
      ] = js.native
    /**
      * Utility method to filter and/or chain Deferreds.
      * @param doneFilter An optional function that is called when the Deferred is resolved.
      * @param failFilter An optional function that is called when the Deferred is rejected.
      * @param progressFilter An optional function that is called when progress notifications are sent to the Deferred.
      * @see \`{@link https://api.jquery.com/deferred.pipe/ }\`
      * @since 1.6
      * @since 1.7
      * @deprecated ​ Deprecated since 1.8. Use \`{@link then }\`.
      *
      * **Cause**: The `.pipe()` method on a `jQuery.Deferred` object was deprecated as of jQuery 1.8, when the `.then()` method was changed to perform the same function.
      *
      * **Solution**: In most cases it is sufficient to change all occurrences of `.pipe()` to `.then()`. Ensure that you aren't relying on context/state propagation (e.g., using `this`) or synchronous callback invocation, which were dropped from `.then()` for Promises/A+ interoperability as of jQuery 3.0.
      * @example ​ ````Filter reject value:
    ```javascript
    var defer = $.Deferred(),
      filtered = defer.pipe( null, function( value ) {
      return value * 3;
      });
    ​
    defer.reject( 6 );
    filtered.fail(function( value ) {
      alert( "Value is ( 3*6 = ) 18: " + value );
    });
    ```
      * @example ​ ````Chain tasks:
    ```javascript
    var request = $.ajax( url, { dataType: "json" } ),
      chained = request.pipe(function( data ) {
      return $.ajax( url2, { data: { user: data.userId } } );
      });
    ​
    chained.done(function( data ) {
      // data retrieved from url2 as provided by the first request
    });
    ```
      */
    def pipe[ARF, AJF, ANF, BRF, BJF, BNF, CRF, CJF, CNF, RRF, RJF, RNF, ARP, AJP, ANP, BRP, BJP, BNP, CRP, CJP, CNP, RRP, RJP, RNP](
      doneFilter: Null,
      failFilter: js.Function4[
          /* t */ jqXHR[TResolve], 
          /* u */ ErrorTextStatus, 
          /* v */ String, 
          /* repeated */ scala.Nothing, 
          (PromiseBase[ARF, AJF, ANF, BRF, BJF, BNF, CRF, CJF, CNF, RRF, RJF, RNF]) | Thenable[AJF] | AJF
        ],
      progressFilter: js.Function4[
          /* t */ scala.Nothing, 
          /* u */ scala.Nothing, 
          /* v */ scala.Nothing, 
          /* repeated */ scala.Nothing, 
          (PromiseBase[ARP, AJP, ANP, BRP, BJP, BNP, CRP, CJP, CNP, RRP, RJP, RNP]) | Thenable[ANP] | ANP
        ]
    ): PromiseBase[
        ARF | ARP, 
        AJF | AJP, 
        ANF | ANP, 
        BRF | BRP, 
        BJF | BJP, 
        BNF | BNP, 
        CRF | CRP, 
        CJF | CJP, 
        CNF | CNP, 
        RRF | RRP, 
        RJF | RJP, 
        RNF | RNP
      ] = js.native
    // region pipe
    // #region pipe
    /**
      * Utility method to filter and/or chain Deferreds.
      * @param doneFilter An optional function that is called when the Deferred is resolved.
      * @param failFilter An optional function that is called when the Deferred is rejected.
      * @param progressFilter An optional function that is called when progress notifications are sent to the Deferred.
      * @see \`{@link https://api.jquery.com/deferred.pipe/ }\`
      * @since 1.6
      * @since 1.7
      * @deprecated ​ Deprecated since 1.8. Use \`{@link then }\`.
      *
      * **Cause**: The `.pipe()` method on a `jQuery.Deferred` object was deprecated as of jQuery 1.8, when the `.then()` method was changed to perform the same function.
      *
      * **Solution**: In most cases it is sufficient to change all occurrences of `.pipe()` to `.then()`. Ensure that you aren't relying on context/state propagation (e.g., using `this`) or synchronous callback invocation, which were dropped from `.then()` for Promises/A+ interoperability as of jQuery 3.0.
      * @example ​ ````Filter resolve value:
    ```javascript
    var defer = $.Deferred(),
      filtered = defer.pipe(function( value ) {
      return value * 2;
      });
    ​
    defer.resolve( 5 );
    filtered.done(function( value ) {
      alert( "Value is ( 2*5 = ) 10: " + value );
    });
    ```
      * @example ​ ````Filter reject value:
    ```javascript
    var defer = $.Deferred(),
      filtered = defer.pipe( null, function( value ) {
      return value * 3;
      });
    ​
    defer.reject( 6 );
    filtered.fail(function( value ) {
      alert( "Value is ( 3*6 = ) 18: " + value );
    });
    ```
      * @example ​ ````Chain tasks:
    ```javascript
    var request = $.ajax( url, { dataType: "json" } ),
      chained = request.pipe(function( data ) {
      return $.ajax( url2, { data: { user: data.userId } } );
      });
    ​
    chained.done(function( data ) {
      // data retrieved from url2 as provided by the first request
    });
    ```
      */
    def pipe[ARD, AJD, AND, BRD, BJD, BND, CRD, CJD, CND, RRD, RJD, RND, ARF, AJF, ANF, BRF, BJF, BNF, CRF, CJF, CNF, RRF, RJF, RNF, ARP, AJP, ANP, BRP, BJP, BNP, CRP, CJP, CNP, RRP, RJP, RNP](
      doneFilter: js.Function4[
          /* t */ TResolve, 
          /* u */ SuccessTextStatus, 
          /* v */ jqXHR[TResolve], 
          /* repeated */ scala.Nothing, 
          (PromiseBase[ARD, AJD, AND, BRD, BJD, BND, CRD, CJD, CND, RRD, RJD, RND]) | Thenable[ARD] | ARD
        ],
      failFilter: js.Function4[
          /* t */ jqXHR[TResolve], 
          /* u */ ErrorTextStatus, 
          /* v */ String, 
          /* repeated */ scala.Nothing, 
          (PromiseBase[ARF, AJF, ANF, BRF, BJF, BNF, CRF, CJF, CNF, RRF, RJF, RNF]) | Thenable[AJF] | AJF
        ],
      progressFilter: js.Function4[
          /* t */ scala.Nothing, 
          /* u */ scala.Nothing, 
          /* v */ scala.Nothing, 
          /* repeated */ scala.Nothing, 
          (PromiseBase[ARP, AJP, ANP, BRP, BJP, BNP, CRP, CJP, CNP, RRP, RJP, RNP]) | Thenable[ANP] | ANP
        ]
    ): PromiseBase[
        ARD | ARF | ARP, 
        AJD | AJF | AJP, 
        AND | ANF | ANP, 
        BRD | BRF | BRP, 
        BJD | BJF | BJP, 
        BND | BNF | BNP, 
        CRD | CRF | CRP, 
        CJD | CJF | CJP, 
        CND | CNF | CNP, 
        RRD | RRF | RRP, 
        RJD | RJF | RJP, 
        RND | RNF | RNP
      ] = js.native
    
    /**
      * Add handlers to be called when the Deferred object generates progress notifications.
      * @param progressCallback A function, or array of functions, to be called when the Deferred generates progress notifications.
      * @param progressCallbacks Optional additional functions, or arrays of functions, to be called when the Deferred generates
      *                          progress notifications.
      * @see \`{@link https://api.jquery.com/deferred.progress/ }\`
      * @since 1.7
      */
    def progress(
      progressCallback: TypeOrArray[CallbackBase[scala.Nothing, scala.Nothing, scala.Nothing, scala.Nothing]],
      progressCallbacks: (TypeOrArray[CallbackBase[scala.Nothing, scala.Nothing, scala.Nothing, scala.Nothing]])*
    ): this.type = js.native
    
    /**
      * Return a Deferred's Promise object.
      * @see \`{@link https://api.jquery.com/deferred.promise/ }\`
      * @since 1.5
      * @example ​ ````Use the target argument to promote an existing object to a Promise:
    ```javascript
    // Existing object
    var obj = {
      hello: function( name ) {
      alert( "Hello " + name );
      }
      },
      // Create a Deferred
      defer = $.Deferred();
    ​
    // Set object as a promise
    defer.promise( obj );
    ​
    // Resolve the deferred
    defer.resolve( "John" );
    ​
    // Use the object as a Promise
    obj.done(function( name ) {
      obj.hello( name ); // Will alert "Hello John"
    }).hello( "Karl" ); // Will alert "Hello Karl"
    ```
      */
    def promise(): this.type = js.native
    /**
      * Return a Deferred's Promise object.
      * @param target Object onto which the promise methods have to be attached
      * @see \`{@link https://api.jquery.com/deferred.promise/ }\`
      * @since 1.5
      * @example ​ ````Create a Deferred and set two timer-based functions to either resolve or reject the Deferred after a random interval. Whichever one fires first &quot;wins&quot; and will call one of the callbacks. The second timeout has no effect since the Deferred is already complete (in a resolved or rejected state) from the first timeout action. Also set a timer-based progress notification function, and call a progress handler that adds &quot;working...&quot; to the document body.
    ```javascript
    function asyncEvent() {
      var dfd = jQuery.Deferred();
    ​
      // Resolve after a random interval
      setTimeout(function() {
      dfd.resolve( "hurray" );
      }, Math.floor( 400 + Math.random() * 2000 ) );
    ​
      // Reject after a random interval
      setTimeout(function() {
      dfd.reject( "sorry" );
      }, Math.floor( 400 + Math.random() * 2000 ) );
    ​
      // Show a "working..." message every half-second
      setTimeout(function working() {
      if ( dfd.state() === "pending" ) {
      dfd.notify( "working... " );
      setTimeout( working, 500 );
      }
      }, 1 );
    ​
      // Return the Promise so caller can't change the Deferred
      return dfd.promise();
    }
    ​
    // Attach a done, fail, and progress handler for the asyncEvent
    $.when( asyncEvent() ).then(
      function( status ) {
      alert( status + ", things are going well" );
      },
      function( status ) {
      alert( status + ", you fail this time" );
      },
      function( status ) {
      $( "body" ).append( status );
      }
    );
    ```
      */
    def promise[TTarget /* <: js.Object */](target: TTarget): this.type with TTarget = js.native
    
    var readyState: Double = js.native
    
    var responseJSON: js.UndefOr[js.Any] = js.native
    
    var responseText: String = js.native
    
    var responseXML: js.UndefOr[Document | Null] = js.native
    
    def setRequestHeader(name: String, value: String): Unit = js.native
    @JSName("setRequestHeader")
    var setRequestHeader_Original: js.Function2[/* name */ String, /* value */ String, Unit] = js.native
    
    /**
      * Determine the current state of a Deferred object.
      * @see \`{@link https://api.jquery.com/deferred.state/ }\`
      * @since 1.7
      */
    def state(): pending | resolved | rejected = js.native
    
    var status: Double = js.native
    
    def statusCode(map: StatusCodeCallbacks[_]): Unit = js.native
    
    var statusText: String = js.native
    
    /**
      * Add handlers to be called when the Deferred object is resolved, rejected, or still in progress.
      * @param doneFilter An optional function that is called when the Deferred is resolved.
      * @param failFilter An optional function that is called when the Deferred is rejected.
      * @param progressFilter An optional function that is called when progress notifications are sent to the Deferred.
      * @see \`{@link https://api.jquery.com/deferred.then/ }\`
      * @since 1.8
      * @example ​ ````Chain tasks:
    ```javascript
    var request = $.ajax( url, { dataType: "json" } ),
      chained = request.then(function( data ) {
      return $.ajax( url2, { data: { user: data.userId } } );
      });
    ​
    chained.done(function( data ) {
      // data retrieved from url2 as provided by the first request
    });
    ```
      */
    def `then`[ARP, AJP, ANP, BRP, BJP, BNP, CRP, CJP, CNP, RRP, RJP, RNP](): PromiseBase[ARP, AJP, ANP, BRP, BJP, BNP, CRP, CJP, CNP, RRP, RJP, RNP] = js.native
    /**
      * Add handlers to be called when the Deferred object is resolved, rejected, or still in progress.
      * @param doneFilter An optional function that is called when the Deferred is resolved.
      * @param failFilter An optional function that is called when the Deferred is rejected.
      * @param progressFilter An optional function that is called when progress notifications are sent to the Deferred.
      * @see \`{@link https://api.jquery.com/deferred.then/ }\`
      * @since 1.8
      * @example ​ ````Filter the resolve value:
    ```html
    <!doctype html>
    <html lang="en">
    <head>
      <meta charset="utf-8">
      <title>deferred.then demo</title>
      <script src="https://code.jquery.com/jquery-3.3.1.js"></script>
    </head>
    <body>
    ​
    <button>Filter Resolve</button>
    <p></p>
    ​
    <script>
    var filterResolve = function() {
      var defer = $.Deferred(),
      filtered = defer.then(function( value ) {
      return value * 2;
      });
    ​
      defer.resolve( 5 );
      filtered.done(function( value ) {
      $( "p" ).html( "Value is ( 2*5 = ) 10: " + value );
      });
    };
    ​
    $( "button" ).on( "click", filterResolve );
    </script>
    ​
    </body>
    </html>
    ```
      * @example ​ ````Chain tasks:
    ```javascript
    var request = $.ajax( url, { dataType: "json" } ),
      chained = request.then(function( data ) {
      return $.ajax( url2, { data: { user: data.userId } } );
      });
    ​
    chained.done(function( data ) {
      // data retrieved from url2 as provided by the first request
    });
    ```
      */
    def `then`[ARD, AJD, AND, BRD, BJD, BND, CRD, CJD, CND, RRD, RJD, RND](
      doneFilter: js.Function4[
          /* t */ TResolve, 
          /* u */ SuccessTextStatus, 
          /* v */ jqXHR[TResolve], 
          /* repeated */ scala.Nothing, 
          (PromiseBase[ARD, AJD, AND, BRD, BJD, BND, CRD, CJD, CND, RRD, RJD, RND]) | Thenable[ARD] | ARD
        ]
    ): PromiseBase[ARD, AJD, AND, BRD, BJD, BND, CRD, CJD, CND, RRD, RJD, RND] = js.native
    /**
      * Add handlers to be called when the Deferred object is resolved, rejected, or still in progress.
      * @param doneFilter An optional function that is called when the Deferred is resolved.
      * @param failFilter An optional function that is called when the Deferred is rejected.
      * @param progressFilter An optional function that is called when progress notifications are sent to the Deferred.
      * @see \`{@link https://api.jquery.com/deferred.then/ }\`
      * @since 1.8
      * @example ​ ````Filter reject value:
    ```javascript
    var defer = $.Deferred(),
      filtered = defer.then( null, function( value ) {
      return value * 3;
      });
    ​
    defer.reject( 6 );
    filtered.fail(function( value ) {
      alert( "Value is ( 3*6 = ) 18: " + value );
    });
    ```
      * @example ​ ````Chain tasks:
    ```javascript
    var request = $.ajax( url, { dataType: "json" } ),
      chained = request.then(function( data ) {
      return $.ajax( url2, { data: { user: data.userId } } );
      });
    ​
    chained.done(function( data ) {
      // data retrieved from url2 as provided by the first request
    });
    ```
      */
    def `then`[ARF, AJF, ANF, BRF, BJF, BNF, CRF, CJF, CNF, RRF, RJF, RNF](
      doneFilter: Null,
      failFilter: js.Function4[
          /* t */ jqXHR[TResolve], 
          /* u */ ErrorTextStatus, 
          /* v */ String, 
          /* repeated */ scala.Nothing, 
          (PromiseBase[ARF, AJF, ANF, BRF, BJF, BNF, CRF, CJF, CNF, RRF, RJF, RNF]) | Thenable[ARF] | ARF
        ]
    ): PromiseBase[ARF, AJF, ANF, BRF, BJF, BNF, CRF, CJF, CNF, RRF, RJF, RNF] = js.native
    def `then`[ARP, AJP, ANP, BRP, BJP, BNP, CRP, CJP, CNP, RRP, RJP, RNP](
      doneFilter: Null,
      failFilter: Null,
      progressFilter: js.Function4[
          /* t */ scala.Nothing, 
          /* u */ scala.Nothing, 
          /* v */ scala.Nothing, 
          /* repeated */ scala.Nothing, 
          (PromiseBase[ARP, AJP, ANP, BRP, BJP, BNP, CRP, CJP, CNP, RRP, RJP, RNP]) | Thenable[ANP] | ANP
        ]
    ): PromiseBase[ARP, AJP, ANP, BRP, BJP, BNP, CRP, CJP, CNP, RRP, RJP, RNP] = js.native
    /**
      * Add handlers to be called when the Deferred object is resolved, rejected, or still in progress.
      * @param doneFilter An optional function that is called when the Deferred is resolved.
      * @param failFilter An optional function that is called when the Deferred is rejected.
      * @param progressFilter An optional function that is called when progress notifications are sent to the Deferred.
      * @see \`{@link https://api.jquery.com/deferred.then/ }\`
      * @since 1.8
      * @example ​ ````Since the jQuery.get method returns a jqXHR object, which is derived from a Deferred object, we can attach handlers using the .then method.
    ```javascript
    $.get( "test.php" ).then(
      function() {
      alert( "$.get succeeded" );
      }, function() {
      alert( "$.get failed!" );
      }
    );
    ```
      * @example ​ ````Filter the resolve value:
    ```html
    <!doctype html>
    <html lang="en">
    <head>
      <meta charset="utf-8">
      <title>deferred.then demo</title>
      <script src="https://code.jquery.com/jquery-3.3.1.js"></script>
    </head>
    <body>
    ​
    <button>Filter Resolve</button>
    <p></p>
    ​
    <script>
    var filterResolve = function() {
      var defer = $.Deferred(),
      filtered = defer.then(function( value ) {
      return value * 2;
      });
    ​
      defer.resolve( 5 );
      filtered.done(function( value ) {
      $( "p" ).html( "Value is ( 2*5 = ) 10: " + value );
      });
    };
    ​
    $( "button" ).on( "click", filterResolve );
    </script>
    ​
    </body>
    </html>
    ```
      * @example ​ ````Filter reject value:
    ```javascript
    var defer = $.Deferred(),
      filtered = defer.then( null, function( value ) {
      return value * 3;
      });
    ​
    defer.reject( 6 );
    filtered.fail(function( value ) {
      alert( "Value is ( 3*6 = ) 18: " + value );
    });
    ```
      * @example ​ ````Chain tasks:
    ```javascript
    var request = $.ajax( url, { dataType: "json" } ),
      chained = request.then(function( data ) {
      return $.ajax( url2, { data: { user: data.userId } } );
      });
    ​
    chained.done(function( data ) {
      // data retrieved from url2 as provided by the first request
    });
    ```
      */
    def `then`[ARD, AJD, AND, BRD, BJD, BND, CRD, CJD, CND, RRD, RJD, RND, ARF, AJF, ANF, BRF, BJF, BNF, CRF, CJF, CNF, RRF, RJF, RNF](
      doneFilter: js.Function4[
          /* t */ TResolve, 
          /* u */ SuccessTextStatus, 
          /* v */ jqXHR[TResolve], 
          /* repeated */ scala.Nothing, 
          (PromiseBase[ARD, AJD, AND, BRD, BJD, BND, CRD, CJD, CND, RRD, RJD, RND]) | Thenable[ARD] | ARD
        ],
      failFilter: js.Function4[
          /* t */ jqXHR[TResolve], 
          /* u */ ErrorTextStatus, 
          /* v */ String, 
          /* repeated */ scala.Nothing, 
          (PromiseBase[ARF, AJF, ANF, BRF, BJF, BNF, CRF, CJF, CNF, RRF, RJF, RNF]) | Thenable[ARF] | ARF
        ]
    ): PromiseBase[
        ARD | ARF, 
        AJD | AJF, 
        AND | ANF, 
        BRD | BRF, 
        BJD | BJF, 
        BND | BNF, 
        CRD | CRF, 
        CJD | CJF, 
        CND | CNF, 
        RRD | RRF, 
        RJD | RJF, 
        RND | RNF
      ] = js.native
    /**
      * Add handlers to be called when the Deferred object is resolved, rejected, or still in progress.
      * @param doneFilter An optional function that is called when the Deferred is resolved.
      * @param failFilter An optional function that is called when the Deferred is rejected.
      * @param progressFilter An optional function that is called when progress notifications are sent to the Deferred.
      * @see \`{@link https://api.jquery.com/deferred.then/ }\`
      * @since 1.8
      * @example ​ ````Filter the resolve value:
    ```html
    <!doctype html>
    <html lang="en">
    <head>
      <meta charset="utf-8">
      <title>deferred.then demo</title>
      <script src="https://code.jquery.com/jquery-3.3.1.js"></script>
    </head>
    <body>
    ​
    <button>Filter Resolve</button>
    <p></p>
    ​
    <script>
    var filterResolve = function() {
      var defer = $.Deferred(),
      filtered = defer.then(function( value ) {
      return value * 2;
      });
    ​
      defer.resolve( 5 );
      filtered.done(function( value ) {
      $( "p" ).html( "Value is ( 2*5 = ) 10: " + value );
      });
    };
    ​
    $( "button" ).on( "click", filterResolve );
    </script>
    ​
    </body>
    </html>
    ```
      * @example ​ ````Chain tasks:
    ```javascript
    var request = $.ajax( url, { dataType: "json" } ),
      chained = request.then(function( data ) {
      return $.ajax( url2, { data: { user: data.userId } } );
      });
    ​
    chained.done(function( data ) {
      // data retrieved from url2 as provided by the first request
    });
    ```
      */
    def `then`[ARD, AJD, AND, BRD, BJD, BND, CRD, CJD, CND, RRD, RJD, RND, ARP, AJP, ANP, BRP, BJP, BNP, CRP, CJP, CNP, RRP, RJP, RNP](
      doneFilter: js.Function4[
          /* t */ TResolve, 
          /* u */ SuccessTextStatus, 
          /* v */ jqXHR[TResolve], 
          /* repeated */ scala.Nothing, 
          (PromiseBase[ARD, AJD, AND, BRD, BJD, BND, CRD, CJD, CND, RRD, RJD, RND]) | Thenable[ARD] | ARD
        ],
      failFilter: Null,
      progressFilter: js.Function4[
          /* t */ scala.Nothing, 
          /* u */ scala.Nothing, 
          /* v */ scala.Nothing, 
          /* repeated */ scala.Nothing, 
          (PromiseBase[ARP, AJP, ANP, BRP, BJP, BNP, CRP, CJP, CNP, RRP, RJP, RNP]) | Thenable[ANP] | ANP
        ]
    ): PromiseBase[
        ARD | ARP, 
        AJD | AJP, 
        AND | ANP, 
        BRD | BRP, 
        BJD | BJP, 
        BND | BNP, 
        CRD | CRP, 
        CJD | CJP, 
        CND | CNP, 
        RRD | RRP, 
        RJD | RJP, 
        RND | RNP
      ] = js.native
    /**
      * Add handlers to be called when the Deferred object is resolved, rejected, or still in progress.
      * @param doneFilter An optional function that is called when the Deferred is resolved.
      * @param failFilter An optional function that is called when the Deferred is rejected.
      * @param progressFilter An optional function that is called when progress notifications are sent to the Deferred.
      * @see \`{@link https://api.jquery.com/deferred.then/ }\`
      * @since 1.8
      * @example ​ ````Filter reject value:
    ```javascript
    var defer = $.Deferred(),
      filtered = defer.then( null, function( value ) {
      return value * 3;
      });
    ​
    defer.reject( 6 );
    filtered.fail(function( value ) {
      alert( "Value is ( 3*6 = ) 18: " + value );
    });
    ```
      * @example ​ ````Chain tasks:
    ```javascript
    var request = $.ajax( url, { dataType: "json" } ),
      chained = request.then(function( data ) {
      return $.ajax( url2, { data: { user: data.userId } } );
      });
    ​
    chained.done(function( data ) {
      // data retrieved from url2 as provided by the first request
    });
    ```
      */
    def `then`[ARF, AJF, ANF, BRF, BJF, BNF, CRF, CJF, CNF, RRF, RJF, RNF, ARP, AJP, ANP, BRP, BJP, BNP, CRP, CJP, CNP, RRP, RJP, RNP](
      doneFilter: Null,
      failFilter: js.Function4[
          /* t */ jqXHR[TResolve], 
          /* u */ ErrorTextStatus, 
          /* v */ String, 
          /* repeated */ scala.Nothing, 
          (PromiseBase[ARF, AJF, ANF, BRF, BJF, BNF, CRF, CJF, CNF, RRF, RJF, RNF]) | Thenable[ARF] | ARF
        ],
      progressFilter: js.Function4[
          /* t */ scala.Nothing, 
          /* u */ scala.Nothing, 
          /* v */ scala.Nothing, 
          /* repeated */ scala.Nothing, 
          (PromiseBase[ARP, AJP, ANP, BRP, BJP, BNP, CRP, CJP, CNP, RRP, RJP, RNP]) | Thenable[ANP] | ANP
        ]
    ): PromiseBase[
        ARF | ARP, 
        AJF | AJP, 
        ANF | ANP, 
        BRF | BRP, 
        BJF | BJP, 
        BNF | BNP, 
        CRF | CRP, 
        CJF | CJP, 
        CNF | CNP, 
        RRF | RRP, 
        RJF | RJP, 
        RNF | RNP
      ] = js.native
    // #endregion
    // region then
    // #region then
    /**
      * Add handlers to be called when the Deferred object is resolved, rejected, or still in progress.
      * @param doneFilter An optional function that is called when the Deferred is resolved.
      * @param failFilter An optional function that is called when the Deferred is rejected.
      * @param progressFilter An optional function that is called when progress notifications are sent to the Deferred.
      * @see \`{@link https://api.jquery.com/deferred.then/ }\`
      * @since 1.8
      * @example ​ ````Since the jQuery.get method returns a jqXHR object, which is derived from a Deferred object, we can attach handlers using the .then method.
    ```javascript
    $.get( "test.php" ).then(
      function() {
      alert( "$.get succeeded" );
      }, function() {
      alert( "$.get failed!" );
      }
    );
    ```
      * @example ​ ````Filter the resolve value:
    ```html
    <!doctype html>
    <html lang="en">
    <head>
      <meta charset="utf-8">
      <title>deferred.then demo</title>
      <script src="https://code.jquery.com/jquery-3.3.1.js"></script>
    </head>
    <body>
    ​
    <button>Filter Resolve</button>
    <p></p>
    ​
    <script>
    var filterResolve = function() {
      var defer = $.Deferred(),
      filtered = defer.then(function( value ) {
      return value * 2;
      });
    ​
      defer.resolve( 5 );
      filtered.done(function( value ) {
      $( "p" ).html( "Value is ( 2*5 = ) 10: " + value );
      });
    };
    ​
    $( "button" ).on( "click", filterResolve );
    </script>
    ​
    </body>
    </html>
    ```
      * @example ​ ````Filter reject value:
    ```javascript
    var defer = $.Deferred(),
      filtered = defer.then( null, function( value ) {
      return value * 3;
      });
    ​
    defer.reject( 6 );
    filtered.fail(function( value ) {
      alert( "Value is ( 3*6 = ) 18: " + value );
    });
    ```
      * @example ​ ````Chain tasks:
    ```javascript
    var request = $.ajax( url, { dataType: "json" } ),
      chained = request.then(function( data ) {
      return $.ajax( url2, { data: { user: data.userId } } );
      });
    ​
    chained.done(function( data ) {
      // data retrieved from url2 as provided by the first request
    });
    ```
      */
    def `then`[ARD, AJD, AND, BRD, BJD, BND, CRD, CJD, CND, RRD, RJD, RND, ARF, AJF, ANF, BRF, BJF, BNF, CRF, CJF, CNF, RRF, RJF, RNF, ARP, AJP, ANP, BRP, BJP, BNP, CRP, CJP, CNP, RRP, RJP, RNP](
      doneFilter: js.Function4[
          /* t */ TResolve, 
          /* u */ SuccessTextStatus, 
          /* v */ jqXHR[TResolve], 
          /* repeated */ scala.Nothing, 
          (PromiseBase[ARD, AJD, AND, BRD, BJD, BND, CRD, CJD, CND, RRD, RJD, RND]) | Thenable[ARD] | ARD
        ],
      failFilter: js.Function4[
          /* t */ jqXHR[TResolve], 
          /* u */ ErrorTextStatus, 
          /* v */ String, 
          /* repeated */ scala.Nothing, 
          (PromiseBase[ARF, AJF, ANF, BRF, BJF, BNF, CRF, CJF, CNF, RRF, RJF, RNF]) | Thenable[ARF] | ARF
        ],
      progressFilter: js.Function4[
          /* t */ scala.Nothing, 
          /* u */ scala.Nothing, 
          /* v */ scala.Nothing, 
          /* repeated */ scala.Nothing, 
          (PromiseBase[ARP, AJP, ANP, BRP, BJP, BNP, CRP, CJP, CNP, RRP, RJP, RNP]) | Thenable[ANP] | ANP
        ]
    ): PromiseBase[
        ARD | ARF | ARP, 
        AJD | AJF | AJP, 
        AND | ANF | ANP, 
        BRD | BRF | BRP, 
        BJD | BJF | BJP, 
        BND | BNF | BNP, 
        CRD | CRF | CRP, 
        CJD | CJF | CJP, 
        CND | CNF | CNP, 
        RRD | RRF | RRP, 
        RJD | RJF | RJP, 
        RND | RNF | RNP
      ] = js.native
  }
  object jqXHR {
    
    type AlwaysCallback[TResolve, TjqXHR] = Callback3[TResolve | TjqXHR, TextStatus, TjqXHR | String]
    
    type DoneCallback[TResolve, TjqXHR] = Callback3[TResolve, SuccessTextStatus, TjqXHR]
    
    type FailCallback[TjqXHR] = Callback3[TjqXHR, ErrorTextStatus, String]
  }
}
