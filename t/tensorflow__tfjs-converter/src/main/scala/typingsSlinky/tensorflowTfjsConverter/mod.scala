package typingsSlinky.tensorflowTfjsConverter

import typingsSlinky.tensorflowTfjsConverter.operationsTypesMod.OpExecutor
import typingsSlinky.tensorflowTfjsCore.typesMod.IOHandler
import typingsSlinky.tensorflowTfjsCore.typesMod.LoadOptions
import scala.scalajs.js
import scala.scalajs.js.`|`
import scala.scalajs.js.annotation.{JSGlobalScope, JSGlobal, JSImport, JSName, JSBracketAccess}

@JSImport("@tensorflow/tfjs-converter", JSImport.Namespace)
@js.native
object mod extends js.Object {
  
  def deregisterOp(name: String): Unit = js.native
  
  def loadGraphModel(modelUrl: String): js.Promise[typingsSlinky.tensorflowTfjsConverter.graphModelMod.GraphModel] = js.native
  def loadGraphModel(modelUrl: String, options: LoadOptions): js.Promise[typingsSlinky.tensorflowTfjsConverter.graphModelMod.GraphModel] = js.native
  def loadGraphModel(modelUrl: IOHandler): js.Promise[typingsSlinky.tensorflowTfjsConverter.graphModelMod.GraphModel] = js.native
  def loadGraphModel(modelUrl: IOHandler, options: LoadOptions): js.Promise[typingsSlinky.tensorflowTfjsConverter.graphModelMod.GraphModel] = js.native
  
  def registerOp(name: String, opFunc: OpExecutor): Unit = js.native
  
  @JSName("version_converter")
  val versionConverter: /* "2.0.1" */ String = js.native
  
  @js.native
  class GraphModel protected ()
    extends typingsSlinky.tensorflowTfjsConverter.graphModelMod.GraphModel {
    /**
      * @param modelUrl url for the model, or an `io.IOHandler`.
      * @param weightManifestUrl url for the weight file generated by
      * scripts/convert.py script.
      * @param requestOption options for Request, which allows to send credentials
      * and custom headers.
      * @param onProgress Optional, progress callback function, fired periodically
      * before the load is completed.
      */
    def this(modelUrl: String) = this()
    def this(modelUrl: IOHandler) = this()
    def this(modelUrl: String, loadOptions: LoadOptions) = this()
    def this(modelUrl: IOHandler, loadOptions: LoadOptions) = this()
  }
}
