package typingsSlinky.tensorflowTfjsLayers.datasetFakesMod

import org.scalablytyped.runtime.StringDictionary
import typingsSlinky.tensorflowTfjsCore.distTensorMod.Tensor
import typingsSlinky.tensorflowTfjsCore.distTypesMod.Rank
import typingsSlinky.tensorflowTfjsLayers.kerasFormatCommonMod.Shape
import scala.scalajs.js
import scala.scalajs.js.`|`
import scala.scalajs.js.annotation.{JSGlobalScope, JSGlobal, JSImport, JSName, JSBracketAccess}

@js.native
trait FakeDatasetArgs extends js.Object {
  
  /**
    * The size of each batch generated by the iterator.
    */
  var batchSize: Double = js.native
  
  /**
    * The number of batches an iterator generates before declaring done to be
    * true.
    */
  var numBatches: Double = js.native
  
  /**
    * The shape(s) of the features of a single example.
    *
    * Use an object mapping name to shape, if more than one feature tensors
    * are required.
    */
  var xShape: Shape | StringDictionary[Shape] = js.native
  
  /**
    * A function that generates preset sequence of X tensors.
    *
    * This function is invoked each time a new iterator is created.
    */
  var xTensorsFunc: js.UndefOr[js.Function0[js.Array[Tensor[Rank]] | StringDictionary[js.Array[Tensor[Rank]]]]] = js.native
  
  /**
    * The shape of the target(s) of a single exapmle.
    */
  var yShape: Shape | StringDictionary[Shape] = js.native
  
  /**
    * A function that generates preset sequence of Y tensors.
    *
    * This function is invoked each time a new iterator is created.
    */
  var yTensorsFunc: js.UndefOr[js.Function0[js.Array[Tensor[Rank]] | StringDictionary[js.Array[Tensor[Rank]]]]] = js.native
}
object FakeDatasetArgs {
  
  @scala.inline
  def apply(
    batchSize: Double,
    numBatches: Double,
    xShape: Shape | StringDictionary[Shape],
    yShape: Shape | StringDictionary[Shape]
  ): FakeDatasetArgs = {
    val __obj = js.Dynamic.literal(batchSize = batchSize.asInstanceOf[js.Any], numBatches = numBatches.asInstanceOf[js.Any], xShape = xShape.asInstanceOf[js.Any], yShape = yShape.asInstanceOf[js.Any])
    __obj.asInstanceOf[FakeDatasetArgs]
  }
  
  @scala.inline
  implicit class FakeDatasetArgsOps[Self <: FakeDatasetArgs] (val x: Self) extends AnyVal {
    
    @scala.inline
    def duplicate: Self = (js.Dynamic.global.Object.assign(js.Dynamic.literal(), x)).asInstanceOf[Self]
    
    @scala.inline
    def combineWith[Other <: js.Any](other: Other): Self with Other = (js.Dynamic.global.Object.assign(js.Dynamic.literal(), x, other.asInstanceOf[js.Any])).asInstanceOf[Self with Other]
    
    @scala.inline
    def set(key: String, value: js.Any): Self = {
      x.asInstanceOf[js.Dynamic].updateDynamic(key)(value)
      x
    }
    
    @scala.inline
    def setBatchSize(value: Double): Self = this.set("batchSize", value.asInstanceOf[js.Any])
    
    @scala.inline
    def setNumBatches(value: Double): Self = this.set("numBatches", value.asInstanceOf[js.Any])
    
    @scala.inline
    def setXShapeVarargs(value: (Null | Double)*): Self = this.set("xShape", js.Array(value :_*))
    
    @scala.inline
    def setXShape(value: Shape | StringDictionary[Shape]): Self = this.set("xShape", value.asInstanceOf[js.Any])
    
    @scala.inline
    def setYShapeVarargs(value: (Null | Double)*): Self = this.set("yShape", js.Array(value :_*))
    
    @scala.inline
    def setYShape(value: Shape | StringDictionary[Shape]): Self = this.set("yShape", value.asInstanceOf[js.Any])
    
    @scala.inline
    def setXTensorsFunc(value: () => js.Array[Tensor[Rank]] | StringDictionary[js.Array[Tensor[Rank]]]): Self = this.set("xTensorsFunc", js.Any.fromFunction0(value))
    
    @scala.inline
    def deleteXTensorsFunc: Self = this.set("xTensorsFunc", js.undefined)
    
    @scala.inline
    def setYTensorsFunc(value: () => js.Array[Tensor[Rank]] | StringDictionary[js.Array[Tensor[Rank]]]): Self = this.set("yTensorsFunc", js.Any.fromFunction0(value))
    
    @scala.inline
    def deleteYTensorsFunc: Self = this.set("yTensorsFunc", js.undefined)
  }
}
