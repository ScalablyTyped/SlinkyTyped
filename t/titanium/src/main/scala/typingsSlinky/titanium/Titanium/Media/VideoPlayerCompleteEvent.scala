package typingsSlinky.titanium.Titanium.Media

import scala.scalajs.js
import scala.scalajs.js.`|`
import scala.scalajs.js.annotation.{JSGlobalScope, JSGlobal, JSImport, JSName, JSBracketAccess}

/**
  * Fired when movie playback ends or a user exits playback.
  */
@js.native
trait VideoPlayerCompleteEvent extends VideoPlayerBaseEvent {
  
  /**
    * Error code.
    * Error code will be 0 if `success` is `true`, nonzero otherwise. If the error
    * was generated by the operating system, that system's error value is used.
    * Otherwise, this value will be -1.
    */
  var code: Double = js.native
  
  /**
    * Error message, if any returned. Will be undefined if `success` is `true`.
    */
  var error: String = js.native
  
  /**
    * Reason that playback ended.
    */
  var reason: Double = js.native
  
  /**
    * Indicates if the video was played successfully. User exit counts as a success.
    * Returns `true` if `reason` is not
    * [VIDEO_FINISH_REASON_PLAYBACK_ERROR](Titanium.Media.VIDEO_FINISH_REASON_PLAYBACK_ERROR),
    * `false` otherwise.
    */
  var success: Boolean = js.native
}
object VideoPlayerCompleteEvent {
  
  @scala.inline
  def apply(code: Double, error: String, reason: Double, source: VideoPlayer, success: Boolean): VideoPlayerCompleteEvent = {
    val __obj = js.Dynamic.literal(code = code.asInstanceOf[js.Any], error = error.asInstanceOf[js.Any], reason = reason.asInstanceOf[js.Any], source = source.asInstanceOf[js.Any], success = success.asInstanceOf[js.Any])
    __obj.asInstanceOf[VideoPlayerCompleteEvent]
  }
  
  @scala.inline
  implicit class VideoPlayerCompleteEventOps[Self <: VideoPlayerCompleteEvent] (val x: Self) extends AnyVal {
    
    @scala.inline
    def duplicate: Self = (js.Dynamic.global.Object.assign(js.Dynamic.literal(), x)).asInstanceOf[Self]
    
    @scala.inline
    def combineWith[Other <: js.Any](other: Other): Self with Other = (js.Dynamic.global.Object.assign(js.Dynamic.literal(), x, other.asInstanceOf[js.Any])).asInstanceOf[Self with Other]
    
    @scala.inline
    def set(key: String, value: js.Any): Self = {
      x.asInstanceOf[js.Dynamic].updateDynamic(key)(value)
      x
    }
    
    @scala.inline
    def setCode(value: Double): Self = this.set("code", value.asInstanceOf[js.Any])
    
    @scala.inline
    def setError(value: String): Self = this.set("error", value.asInstanceOf[js.Any])
    
    @scala.inline
    def setReason(value: Double): Self = this.set("reason", value.asInstanceOf[js.Any])
    
    @scala.inline
    def setSuccess(value: Boolean): Self = this.set("success", value.asInstanceOf[js.Any])
  }
}
