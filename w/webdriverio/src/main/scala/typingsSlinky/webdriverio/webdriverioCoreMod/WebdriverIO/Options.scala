package typingsSlinky.webdriverio.webdriverioCoreMod.WebdriverIO

import typingsSlinky.webdriver.WebDriver.DesiredCapabilities
import scala.scalajs.js
import scala.scalajs.js.`|`
import scala.scalajs.js.annotation.{JSGlobalScope, JSGlobal, JSImport, JSName, JSBracketAccess}

@js.native
trait Options extends js.Object {
  
  /**
    * Define the protocol you want to use for your browser automation.
    * Currently only [`webdriver`](https://www.npmjs.com/package/webdriver) and
    * [`devtools`](https://www.npmjs.com/package/devtools) are supported,
    * as these are the main browser automation technologies available.
    */
  var automationProtocol: js.UndefOr[String] = js.native
  
  /**
    * If you want your test run to stop after a specific number of test failures, use bail.
    * (It defaults to 0, which runs all tests no matter what.) Note: Please be aware that
    * when using a third party test runner (such as Mocha), additional configuration might
    * be required.
    */
  var bail: js.UndefOr[Double] = js.native
  
  /**
    * Shorten url command calls by setting a base URL.
    */
  var baseUrl: js.UndefOr[String] = js.native
  
  var capabilities: js.UndefOr[js.Array[DesiredCapabilities] | MultiRemoteCapabilities] = js.native
  
  /**
    * Exclude specs from test execution.
    */
  var exclude: js.UndefOr[js.Array[String]] = js.native
  
  /**
    * Node arguments to specify when launching child processes.
    */
  var execArgv: js.UndefOr[js.Array[String]] = js.native
  
  /**
    * Defines the test framework to be used by the WDIO testrunner.
    */
  var framework: js.UndefOr[String] = js.native
  
  /**
    * Sauce Labs provides a headless offering that allows you to run Chrome and Firefox tests headless.
    */
  var headless: js.UndefOr[String] = js.native
  
  /**
    * Your cloud service access key or secret key (only works for Sauce Labs, Browserstack,
    * TestingBot, CrossBrowserTesting or LambdaTest accounts). If set, WebdriverIO will
    * automatically set connection options for you.
    */
  var key: js.UndefOr[String] = js.native
  
  /**
    * Maximum number of total parallel running workers.
    */
  var maxInstances: js.UndefOr[Double] = js.native
  
  /**
    * Maximum number of total parallel running workers per capability.
    */
  var maxInstancesPerCapability: js.UndefOr[Double] = js.native
  
  /**
    * Directory to store all testrunner log files (including reporter logs and wdio logs).
    * If not set, all logs are streamed to stdout. Since most reporters are made to log to
    * stdout, it is recommended to only use this option for specific reporters where it
    * makes more sense to push report into a file (like the junit reporter, for example).
    *
    * When running in standalone mode, the only log generated by WebdriverIO will be the wdio log.
    */
  var outputDir: js.UndefOr[String] = js.native
  
  /**
    * If running on Sauce Labs, you can choose to run tests between different datacenters:
    * US or EU. To change your region to EU, add region: 'eu' to your config.
    */
  var region: js.UndefOr[String] = js.native
  
  /**
    * Determines in which interval the reporter should check if they are synchronised
    * if they report their logs asynchronously (e.g. if logs are streamed to a 3rd
    * party vendor).
    */
  var reporterSyncInterval: js.UndefOr[Double] = js.native
  
  /**
    * Determines the maximum time reporters have to finish uploading all their logs
    * until an error is being thrown by the testrunner.
    */
  var reporterSyncTimeout: js.UndefOr[Double] = js.native
  
  /**
    * List of reporters to use. A reporter can be either a string, or an array of
    * `['reporterName', { <reporter options> }]` where the first element is a string
    * with the reporter name and the second element an object with reporter options.
    */
  var reporters: js.UndefOr[js.Array[String | js.Object]] = js.native
  
  var runner: js.UndefOr[String] = js.native
  
  /**
    * Services take over a specific job you don't want to take care of. They enhance
    * your test setup with almost no effort.
    */
  var services: js.UndefOr[js.Array[ServiceEntry]] = js.native
  
  /**
    * The number of retry attempts for an entire specfile when it fails as a whole.
    */
  var specFileRetries: js.UndefOr[Double] = js.native
  
  val specFileRetryAttempts: js.UndefOr[Double] = js.native
  
  /**
    * Define specs for test execution.
    */
  var specs: js.UndefOr[js.Array[String]] = js.native
  
  /**
    * An object describing various of suites, which you can then specify
    * with the --suite option on the wdio CLI.
    */
  var suites: js.UndefOr[js.Object] = js.native
  
  /**
    * Your cloud service username (only works for Sauce Labs, Browserstack, TestingBot,
    * CrossBrowserTesting or LambdaTest accounts). If set, WebdriverIO will automatically
    * set connection options for you.
    */
  var user: js.UndefOr[String] = js.native
  
  /**
    * Default interval for all `waitFor*` commands to check if an expected state (e.g.,
    * visibility) has been changed.
    */
  var waitforInterval: js.UndefOr[Double] = js.native
  
  /**
    * Default timeout for all `waitFor*` commands. (Note the lowercase f in the option name.)
    * This timeout only affects commands starting with `waitFor*` and their default wait time.
    */
  var waitforTimeout: js.UndefOr[Double] = js.native
}
object Options {
  
  @scala.inline
  def apply(): Options = {
    val __obj = js.Dynamic.literal()
    __obj.asInstanceOf[Options]
  }
  
  @scala.inline
  implicit class OptionsOps[Self <: Options] (val x: Self) extends AnyVal {
    
    @scala.inline
    def duplicate: Self = (js.Dynamic.global.Object.assign(js.Dynamic.literal(), x)).asInstanceOf[Self]
    
    @scala.inline
    def combineWith[Other <: js.Any](other: Other): Self with Other = (js.Dynamic.global.Object.assign(js.Dynamic.literal(), x, other.asInstanceOf[js.Any])).asInstanceOf[Self with Other]
    
    @scala.inline
    def set(key: String, value: js.Any): Self = {
      x.asInstanceOf[js.Dynamic].updateDynamic(key)(value)
      x
    }
    
    @scala.inline
    def setAutomationProtocol(value: String): Self = this.set("automationProtocol", value.asInstanceOf[js.Any])
    
    @scala.inline
    def deleteAutomationProtocol: Self = this.set("automationProtocol", js.undefined)
    
    @scala.inline
    def setBail(value: Double): Self = this.set("bail", value.asInstanceOf[js.Any])
    
    @scala.inline
    def deleteBail: Self = this.set("bail", js.undefined)
    
    @scala.inline
    def setBaseUrl(value: String): Self = this.set("baseUrl", value.asInstanceOf[js.Any])
    
    @scala.inline
    def deleteBaseUrl: Self = this.set("baseUrl", js.undefined)
    
    @scala.inline
    def setCapabilitiesVarargs(value: DesiredCapabilities*): Self = this.set("capabilities", js.Array(value :_*))
    
    @scala.inline
    def setCapabilities(value: js.Array[DesiredCapabilities] | MultiRemoteCapabilities): Self = this.set("capabilities", value.asInstanceOf[js.Any])
    
    @scala.inline
    def deleteCapabilities: Self = this.set("capabilities", js.undefined)
    
    @scala.inline
    def setExcludeVarargs(value: String*): Self = this.set("exclude", js.Array(value :_*))
    
    @scala.inline
    def setExclude(value: js.Array[String]): Self = this.set("exclude", value.asInstanceOf[js.Any])
    
    @scala.inline
    def deleteExclude: Self = this.set("exclude", js.undefined)
    
    @scala.inline
    def setExecArgvVarargs(value: String*): Self = this.set("execArgv", js.Array(value :_*))
    
    @scala.inline
    def setExecArgv(value: js.Array[String]): Self = this.set("execArgv", value.asInstanceOf[js.Any])
    
    @scala.inline
    def deleteExecArgv: Self = this.set("execArgv", js.undefined)
    
    @scala.inline
    def setFramework(value: String): Self = this.set("framework", value.asInstanceOf[js.Any])
    
    @scala.inline
    def deleteFramework: Self = this.set("framework", js.undefined)
    
    @scala.inline
    def setHeadless(value: String): Self = this.set("headless", value.asInstanceOf[js.Any])
    
    @scala.inline
    def deleteHeadless: Self = this.set("headless", js.undefined)
    
    @scala.inline
    def setKey(value: String): Self = this.set("key", value.asInstanceOf[js.Any])
    
    @scala.inline
    def deleteKey: Self = this.set("key", js.undefined)
    
    @scala.inline
    def setMaxInstances(value: Double): Self = this.set("maxInstances", value.asInstanceOf[js.Any])
    
    @scala.inline
    def deleteMaxInstances: Self = this.set("maxInstances", js.undefined)
    
    @scala.inline
    def setMaxInstancesPerCapability(value: Double): Self = this.set("maxInstancesPerCapability", value.asInstanceOf[js.Any])
    
    @scala.inline
    def deleteMaxInstancesPerCapability: Self = this.set("maxInstancesPerCapability", js.undefined)
    
    @scala.inline
    def setOutputDir(value: String): Self = this.set("outputDir", value.asInstanceOf[js.Any])
    
    @scala.inline
    def deleteOutputDir: Self = this.set("outputDir", js.undefined)
    
    @scala.inline
    def setRegion(value: String): Self = this.set("region", value.asInstanceOf[js.Any])
    
    @scala.inline
    def deleteRegion: Self = this.set("region", js.undefined)
    
    @scala.inline
    def setReporterSyncInterval(value: Double): Self = this.set("reporterSyncInterval", value.asInstanceOf[js.Any])
    
    @scala.inline
    def deleteReporterSyncInterval: Self = this.set("reporterSyncInterval", js.undefined)
    
    @scala.inline
    def setReporterSyncTimeout(value: Double): Self = this.set("reporterSyncTimeout", value.asInstanceOf[js.Any])
    
    @scala.inline
    def deleteReporterSyncTimeout: Self = this.set("reporterSyncTimeout", js.undefined)
    
    @scala.inline
    def setReportersVarargs(value: (String | js.Object)*): Self = this.set("reporters", js.Array(value :_*))
    
    @scala.inline
    def setReporters(value: js.Array[String | js.Object]): Self = this.set("reporters", value.asInstanceOf[js.Any])
    
    @scala.inline
    def deleteReporters: Self = this.set("reporters", js.undefined)
    
    @scala.inline
    def setRunner(value: String): Self = this.set("runner", value.asInstanceOf[js.Any])
    
    @scala.inline
    def deleteRunner: Self = this.set("runner", js.undefined)
    
    @scala.inline
    def setServicesVarargs(value: ServiceEntry*): Self = this.set("services", js.Array(value :_*))
    
    @scala.inline
    def setServices(value: js.Array[ServiceEntry]): Self = this.set("services", value.asInstanceOf[js.Any])
    
    @scala.inline
    def deleteServices: Self = this.set("services", js.undefined)
    
    @scala.inline
    def setSpecFileRetries(value: Double): Self = this.set("specFileRetries", value.asInstanceOf[js.Any])
    
    @scala.inline
    def deleteSpecFileRetries: Self = this.set("specFileRetries", js.undefined)
    
    @scala.inline
    def setSpecFileRetryAttempts(value: Double): Self = this.set("specFileRetryAttempts", value.asInstanceOf[js.Any])
    
    @scala.inline
    def deleteSpecFileRetryAttempts: Self = this.set("specFileRetryAttempts", js.undefined)
    
    @scala.inline
    def setSpecsVarargs(value: String*): Self = this.set("specs", js.Array(value :_*))
    
    @scala.inline
    def setSpecs(value: js.Array[String]): Self = this.set("specs", value.asInstanceOf[js.Any])
    
    @scala.inline
    def deleteSpecs: Self = this.set("specs", js.undefined)
    
    @scala.inline
    def setSuites(value: js.Object): Self = this.set("suites", value.asInstanceOf[js.Any])
    
    @scala.inline
    def deleteSuites: Self = this.set("suites", js.undefined)
    
    @scala.inline
    def setUser(value: String): Self = this.set("user", value.asInstanceOf[js.Any])
    
    @scala.inline
    def deleteUser: Self = this.set("user", js.undefined)
    
    @scala.inline
    def setWaitforInterval(value: Double): Self = this.set("waitforInterval", value.asInstanceOf[js.Any])
    
    @scala.inline
    def deleteWaitforInterval: Self = this.set("waitforInterval", js.undefined)
    
    @scala.inline
    def setWaitforTimeout(value: Double): Self = this.set("waitforTimeout", value.asInstanceOf[js.Any])
    
    @scala.inline
    def deleteWaitforTimeout: Self = this.set("waitforTimeout", js.undefined)
  }
}
