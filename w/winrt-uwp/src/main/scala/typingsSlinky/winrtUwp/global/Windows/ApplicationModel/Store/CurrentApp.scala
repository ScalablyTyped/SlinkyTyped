package typingsSlinky.winrtUwp.global.Windows.ApplicationModel.Store

import typingsSlinky.winrtUwp.Windows.Foundation.Collections.IIterable
import typingsSlinky.winrtUwp.Windows.Foundation.Collections.IVectorView
import typingsSlinky.winrtUwp.Windows.Foundation.IPromiseWithIAsyncOperation
import typingsSlinky.winrtUwp.Windows.Foundation.Uri
import scala.scalajs.js
import scala.scalajs.js.`|`
import scala.scalajs.js.annotation.{JSGlobalScope, JSGlobal, JSImport, JSName, JSBracketAccess}

/** Defines methods and properties you can use to get license and listing info about the current app and perform in-app product purchases. */
@JSGlobal("Windows.ApplicationModel.Store.CurrentApp")
@js.native
abstract class CurrentApp ()
  extends typingsSlinky.winrtUwp.Windows.ApplicationModel.Store.CurrentApp
/* static members */
@JSGlobal("Windows.ApplicationModel.Store.CurrentApp")
@js.native
object CurrentApp extends js.Object {
  
  /** Gets the GUID generated by the Windows Store when your app has been certified for listing in the Windows Store. */
  var appId: String = js.native
  
  /**
    * Retrieves the promotion campaign ID for the current app.
    * @return The advertising campaign ID for your app.
    */
  def getAppPurchaseCampaignIdAsync(): IPromiseWithIAsyncOperation[String] = js.native
  
  /**
    * Requests all receipts for the purchase of the app and any in-app products. For examples of how receipt information can be used, see Using receipts to verify product purchases.
    * @return An XML-formatted string that contains all receipt information for the purchase of the app and any in-app products.
    */
  def getAppReceiptAsync(): IPromiseWithIAsyncOperation[String] = js.native
  
  var getCustomerCollectionsIdAsync: js.Any = js.native
  
   /* unmapped type */ var getCustomerPurchaseIdAsync: js.Any = js.native
  
   /* unmapped type */ /**
    * Requests the receipt for the productId specified. For examples of how receipt information can be used, see Using receipts to verify product purchases.
    * @param productId The unique identifier for the product that you specified this identifier when you submitted the app to the Windows Store
    * @return An XML-formatted string that contains the receipt for the specified productId.
    */
  def getProductReceiptAsync(productId: String): IPromiseWithIAsyncOperation[String] = js.native
  
  /**
    * Returns a list of purchased consumable in-app products that have not been reported to the Windows Store as fulfilled.
    * @return When the operation completes, a list of consumable in-app products not yet reported as fulfilled is returned ( UnfulfilledConsumable objects). Each item of this list provides the product ID, offer ID, and transaction ID associated with a product.
    */
  def getUnfulfilledConsumablesAsync(): IPromiseWithIAsyncOperation[IVectorView[_]] = js.native
  
  /** Gets the license metadata for the current app. */
  var licenseInformation: typingsSlinky.winrtUwp.Windows.ApplicationModel.Store.LicenseInformation = js.native
  
  /** Gets the Uniform Resource Identifier (URI) of the app's listing page in the web catalog of the Windows Store. */
  var linkUri: Uri = js.native
  
  /**
    * Loads the app's listing information asynchronously. Implements the IAsyncInfo interface.
    * @return The apps' listing information. If the method fails, it returns an HRESULT error code.
    */
  def loadListingInformationAsync(): IPromiseWithIAsyncOperation[typingsSlinky.winrtUwp.Windows.ApplicationModel.Store.ListingInformation] = js.native
  
  /**
    * Windows Phone only. Loads the app listing information asynchronously, returning features and products in the ProductListings collection that match all supplied keywords. Implements the IAsyncInfo interface.
    * @param keywords The list of keywords by which to filter the ProductListings collection that is returned in the ListingInformation object.
    * @return The app's listing information, with ProductListings collection filtered by keywords. If the method fails, it returns an HRESULT error code. If no products or features are found that match all of the given keywords, the ProductListings collection will be empty.
    */
  def loadListingInformationByKeywordsAsync(keywords: IIterable[String]): IPromiseWithIAsyncOperation[typingsSlinky.winrtUwp.Windows.ApplicationModel.Store.ListingInformation] = js.native
  
  /**
    * Windows Phone only. Loads the app listing information asynchronously, returning features and products in the ProductListings collection that match any of the given products IDs. Implements the IAsyncInfo interface.
    * @param productIds The list of product IDs by which to filter the ProductListings collection.
    * @return The app's listing information, with ProductListings collection filtered by product IDs. If the method fails, it returns an HRESULT error code. If no products or features are found that match the given product IDs, the ProductListings collection will be empty.
    */
  def loadListingInformationByProductIdsAsync(productIds: IIterable[String]): IPromiseWithIAsyncOperation[typingsSlinky.winrtUwp.Windows.ApplicationModel.Store.ListingInformation] = js.native
  
  /**
    * Notifies the Windows Store that the purchase of a consumable is fulfilled and that the user has the right to access the content.
    * @param productId Identifies the consumable.
    * @param transactionId Identifies a transaction that includes the purchase of the consumable ( productId).
    * @return A value that indicates the status of fulfillment for a consumable in-app product. Possible values are defined by the FulfillmentResult enumeration.
    */
  def reportConsumableFulfillmentAsync(productId: String, transactionId: String): IPromiseWithIAsyncOperation[typingsSlinky.winrtUwp.Windows.ApplicationModel.Store.FulfillmentResult] = js.native
  
  /**
    * Notifies the Windows Store that the application has fulfilled the in-app product. This product cannot be re-purchased until the app has confirmed fulfillment using this method.
    * @param productId The ID of the product that has been delivered to the user.
    */
  def reportProductFulfillment(productId: String): Unit = js.native
  
  /**
    * Requests the purchase of a full app license.
    * @param includeReceipt Determines if this method should return the receipts for this app.
    * @return If the includeReceipt parameter is set to true, this string contains XML that represents all receipts for the app and any in-app purchases. If includeReceipt is set to false, this string is empty.
    */
  def requestAppPurchaseAsync(includeReceipt: Boolean): IPromiseWithIAsyncOperation[String] = js.native
  
  /**
    * Requests the purchase of an in-app product. Additionally, calling this method displays the UI that is used to complete the transaction via the Windows Store.
    * @param productId Specifies the id of the in-app product.
    * @return The results of the in-app product purchase request.
    */
  def requestProductPurchaseAsync(productId: String): IPromiseWithIAsyncOperation[typingsSlinky.winrtUwp.Windows.ApplicationModel.Store.PurchaseResults] = js.native
  /**
    * Requests the purchase of an in-app product. Additionally, calling this method displays the UI that is used to complete the transaction via the Windows Store.
    * @param productId Specifies the id of the in-app product.
    * @param includeReceipt Determines if the method should return the receipts for the specified productId.
    * @return A string providing in-app transaction details for the provided productId. If includeReceipt is set true, the returned string will include a full receipt xml.
    */
  def requestProductPurchaseAsync(productId: String, includeReceipt: Boolean): IPromiseWithIAsyncOperation[String] = js.native
  /**
    * Requests the purchase of an in-app product. Additionally, calling this method displays the UI that is used to complete the transaction via the Windows Store.
    * @param productId Specifies the id of the in-app product.
    * @param offerId The specific in-app feature or content within the large purchase catalog represented on the Windows Store by the productId. This value correlates with the content your app is responsible for fulfilling. The Windows Store only uses this value to itemize the PurchaseResults .
    * @param displayProperties The name of the app feature or content offer that is displayed to the user at time of purchase.
    * @return The results of the in-app product purchase request.
    */
  def requestProductPurchaseAsync(
    productId: String,
    offerId: String,
    displayProperties: typingsSlinky.winrtUwp.Windows.ApplicationModel.Store.ProductPurchaseDisplayProperties
  ): IPromiseWithIAsyncOperation[typingsSlinky.winrtUwp.Windows.ApplicationModel.Store.PurchaseResults] = js.native
}
