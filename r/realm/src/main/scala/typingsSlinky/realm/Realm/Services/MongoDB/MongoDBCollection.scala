package typingsSlinky.realm.Realm.Services.MongoDB

import typingsSlinky.realm.anon.Ids
import typingsSlinky.std.AsyncGenerator
import scala.scalajs.js
import scala.scalajs.js.`|`
import scala.scalajs.js.annotation.{JSGlobalScope, JSGlobal, JSImport, JSName, JSBracketAccess}

/**
  * A remote collection of documents in a MongoDB database.
  */
@js.native
trait MongoDBCollection[T /* <: Document[_] */] extends js.Object {
  
  // TODO: Verify pipeline and return type
  /**
    * Runs an aggregation framework pipeline against this collection.
    *
    * @param pipeline An array of aggregation pipeline stages.
    * @returns The result.
    */
  def aggregate(pipeline: js.Array[AggregatePipelineStage]): js.Promise[_] = js.native
  
  /**
    * Counts the number of documents in this collection matching the provided filter.
    */
  def count(): js.Promise[Double] = js.native
  def count(filter: js.UndefOr[scala.Nothing], options: CountOptions): js.Promise[Double] = js.native
  def count(filter: Filter): js.Promise[Double] = js.native
  def count(filter: Filter, options: CountOptions): js.Promise[Double] = js.native
  
  /**
    * Deletes multiple documents.
    *
    * @param filter A filter applied to narrow down the result.
    * @returns The result.
    */
  def deleteMany(filter: Filter): js.Promise[DeleteResult] = js.native
  
  /**
    * Deletes a single matching document from the collection.
    *
    * @param filter A filter applied to narrow down the result.
    * @returns The result.
    */
  def deleteOne(filter: Filter): js.Promise[DeleteResult] = js.native
  
  /**
    * Finds the documents which match the provided query.
    *
    * @param filter An optional filter applied to narrow down the results.
    * @param options Additional options to apply.
    * @returns The documents.
    */
  def find(): js.Promise[js.Array[T]] = js.native
  def find(filter: js.UndefOr[scala.Nothing], options: FindOptions): js.Promise[js.Array[T]] = js.native
  def find(filter: Filter): js.Promise[js.Array[T]] = js.native
  def find(filter: Filter, options: FindOptions): js.Promise[js.Array[T]] = js.native
  
  /**
    * Finds a document which matches the provided filter.
    *
    * @param filter A filter applied to narrow down the result.
    * @param options Additional options to apply.
    * @returns The document.
    */
  def findOne(): js.Promise[T | Null] = js.native
  def findOne(filter: js.UndefOr[scala.Nothing], options: FindOneOptions): js.Promise[T | Null] = js.native
  def findOne(filter: Filter): js.Promise[T | Null] = js.native
  def findOne(filter: Filter, options: FindOneOptions): js.Promise[T | Null] = js.native
  
  /**
    * Finds a document which matches the provided filter and deletes it
    *
    * @param filter A filter applied to narrow down the result.
    * @param options Additional options to apply.
    * @returns The document found before deleting it.
    */
  def findOneAndDelete(filter: Filter): js.Promise[T | Null] = js.native
  def findOneAndDelete(filter: Filter, options: FindOneOptions): js.Promise[T | Null] = js.native
  
  /**
    * Finds a document which matches the provided filter and replaces it with a new document.
    *
    * @param filter A filter applied to narrow down the result.
    * @param replacement The new replacing document.
    * @param options Additional options to apply.
    * @returns The document found before replacing it.
    */
  def findOneAndReplace(filter: Filter, replacement: NewDocument[T]): js.Promise[T | Null] = js.native
  def findOneAndReplace(filter: Filter, replacement: NewDocument[T], options: FindOneAndModifyOptions): js.Promise[T | Null] = js.native
  
  /**
    * Finds a document which matches the provided query and performs the desired update to individual fields.
    *
    * @param filter A filter applied to narrow down the result.
    * @param update The new values for the document.
    * @param options Additional options to apply.
    * @returns The document found before updating it.
    */
  def findOneAndUpdate(filter: Filter, update: Update): js.Promise[T | Null] = js.native
  def findOneAndUpdate(filter: Filter, update: Update, options: FindOneAndModifyOptions): js.Promise[T | Null] = js.native
  
  /**
    * Inserts an array of documents into the collection.
    * If any values are missing identifiers, they will be generated by the server.
    *
    * @param document The array of documents.
    * @returns The result.
    */
  def insertMany(documents: js.Array[NewDocument[T]]): js.Promise[
    InsertManyResult[
      /* import warning: importer.ImportType#apply Failed type conversion: T['_id'] */ js.Any
    ]
  ] = js.native
  
  /**
    * Inserts a single document into the collection.
    * Note: If the document is missing an _id, one will be generated for it by the server.
    *
    * @param document The document.
    * @returns The result.
    */
  def insertOne(document: NewDocument[T]): js.Promise[
    InsertOneResult[
      /* import warning: importer.ImportType#apply Failed type conversion: T['_id'] */ js.Any
    ]
  ] = js.native
  
  /**
    * Updates multiple documents matching the provided filter in this collection.
    *
    * @param filter A filter applied to narrow down the result.
    * @param update The new values for the documents.
    * @param options Additional options to apply.
    * @returns The result.
    */
  def updateMany(filter: Filter, update: Update): js.Promise[
    UpdateResult[
      /* import warning: importer.ImportType#apply Failed type conversion: T['_id'] */ js.Any
    ]
  ] = js.native
  def updateMany(filter: Filter, update: Update, options: UpdateOptions): js.Promise[
    UpdateResult[
      /* import warning: importer.ImportType#apply Failed type conversion: T['_id'] */ js.Any
    ]
  ] = js.native
  
  /**
    * Updates a single document matching the provided filter in this collection.
    *
    * @param filter A filter applied to narrow down the result.
    * @param update The new values for the document.
    * @param options Additional options to apply.
    * @returns The result.
    */
  def updateOne(filter: Filter, update: Update): js.Promise[
    UpdateResult[
      /* import warning: importer.ImportType#apply Failed type conversion: T['_id'] */ js.Any
    ]
  ] = js.native
  def updateOne(filter: Filter, update: Update, options: UpdateOptions): js.Promise[
    UpdateResult[
      /* import warning: importer.ImportType#apply Failed type conversion: T['_id'] */ js.Any
    ]
  ] = js.native
  
  /**
    * Creates an asynchronous change stream to monitor this collection for changes.
    *
    * By default, yields all change events for this collection. You may specify at most one of
    * the `filter` or `ids` options.
    *
    * @param options.filter A filter for which change events you are interested in.
    * @param options.ids A list of ids that you are interested in watching.
    *
    * @see https://docs.mongodb.com/manual/reference/change-events/
    */
  def watch(): AsyncGenerator[ChangeEvent[T], _, _] = js.native
  def watch(options: js.Object): AsyncGenerator[ChangeEvent[T], _, _] = js.native
  /**
    * Creates an asynchronous change stream to monitor this collection for changes.
    *
    * By default, yields all change events for this collection.
    * You may specify at most one of the `filter` or `ids` options.
    *
    * @param options.filter A filter for which change events you are interested in.
    * @param options.ids A list of ids that you are interested in watching.
    *
    * @see https://docs.mongodb.com/manual/reference/change-events/
    */
  def watch(options: typingsSlinky.realm.anon.Filter): AsyncGenerator[ChangeEvent[T], _, _] = js.native
  /**
    * Creates an asynchronous change stream to monitor this collection for changes.
    *
    * By default, yields all change events for this collection. You may specify at most one of
    * the `filter` or `ids` options.
    *
    * @param options.filter A filter for which change events you are interested in.
    * @param options.ids A list of ids that you are interested in watching.
    *
    * @see https://docs.mongodb.com/manual/reference/change-events/
    */
  def watch(options: Ids[T]): AsyncGenerator[ChangeEvent[T], _, _] = js.native
}
