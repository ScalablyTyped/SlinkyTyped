package typingsSlinky.showdown.mod

import org.scalablytyped.runtime.StringDictionary
import scala.scalajs.js
import scala.scalajs.js.`|`
import scala.scalajs.js.annotation.{JSGlobalScope, JSGlobal, JSImport, JSName, JSBracketAccess}

@js.native
trait Extension_ extends js.Object {
  
  /**
    * Event listeners functions that called on the conversion, when the `event` occurs.
    */
  var listeners: js.UndefOr[StringDictionary[EventListener]] = js.native
  
  /**
    * Property defines the nature of said sub-extensions and can assume 2 values:
    *
    * * `lang`  - Language extensions add new markdown syntax to showdown.
    * * `output` - Output extensions (or modifiers) alter the HTML output generated by showdown.
    * * `listener` - Listener extensions for listening to a conversion event.
    */
  var `type`: String = js.native
}
object Extension_ {
  
  @scala.inline
  def apply(`type`: String): Extension_ = {
    val __obj = js.Dynamic.literal()
    __obj.updateDynamic("type")(`type`.asInstanceOf[js.Any])
    __obj.asInstanceOf[Extension_]
  }
  
  @scala.inline
  implicit class Extension_Ops[Self <: Extension_] (val x: Self) extends AnyVal {
    
    @scala.inline
    def duplicate: Self = (js.Dynamic.global.Object.assign(js.Dynamic.literal(), x)).asInstanceOf[Self]
    
    @scala.inline
    def combineWith[Other <: js.Any](other: Other): Self with Other = (js.Dynamic.global.Object.assign(js.Dynamic.literal(), x, other.asInstanceOf[js.Any])).asInstanceOf[Self with Other]
    
    @scala.inline
    def set(key: String, value: js.Any): Self = {
      x.asInstanceOf[js.Dynamic].updateDynamic(key)(value)
      x
    }
    
    @scala.inline
    def setType(value: String): Self = this.set("type", value.asInstanceOf[js.Any])
    
    @scala.inline
    def setListeners(value: StringDictionary[EventListener]): Self = this.set("listeners", value.asInstanceOf[js.Any])
    
    @scala.inline
    def deleteListeners: Self = this.set("listeners", js.undefined)
  }
}
