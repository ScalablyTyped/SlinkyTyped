package typingsSlinky.showdown.mod

import org.scalablytyped.runtime.StringDictionary
import scala.scalajs.js
import scala.scalajs.js.`|`
import scala.scalajs.js.annotation.{JSGlobalScope, JSGlobal, JSImport, JSName, JSBracketAccess}

/**
  * Showdown options.
  *
  * @see https://github.com/showdownjs/showdown#valid-options
  * @see https://github.com/showdownjs/showdown/wiki/Showdown-options
  * @see https://github.com/showdownjs/showdown/blob/master/src/options.js
  */
@js.native
trait ShowdownOptions
  extends /**
  * For custom options {extension, subParser} And also an out-of-date definitions
  */
/* key */ StringDictionary[js.Any] {
  
  /**
    * Support for HTML Tag escaping.
    *
    * @example
    * **input**:
    *
    * ```md
    * \<div>foo\</div>.
    * ```
    *
    * **backslashEscapesHTMLTags** = false
    * ```html
    * <p>\<div>foo\</div></p>
    * ```
    * 
    * **backslashEscapesHTMLTags** = true
    * ```html
    * <p>&lt;div&gt;foo&lt;/div&gt;</p>
    * ```
    * @default false
    * @since 1.7.2
    */
  var backslashEscapesHTMLTags: js.UndefOr[Boolean] = js.native
  
  /**
    * Outputs a complete html document, including <html>, <head> and <body> tags' instead of an HTML fragment.
    *
    * @example
    * **input**:
    *
    * ```md
    * # Showdown
    * ```
    *
    * **completeHTMLDocument** = false
    * ```html
    * <p><strong>Showdown</strong></p>
    * ```
    * 
    * **completeHTMLDocument** = true
    * ```html
    * <!DOCTYPE HTML>
    * <html>
    * <head>
    * <meta charset="utf-8">
    * </head>
    * <body>
    * <p><strong>Showdown</strong></p>
    * </body>
    * </html>
    * ```
    * @default false
    * @since 1.8.5
    */
  var completeHTMLDocument: js.UndefOr[Boolean] = js.native
  
  /**
    * Use text in curly braces as header id.
    *
    * @example
    *  ```md
    *   ## Sample header {real-id}     will use real-id as id
    *  ```
    * @default false
    * @since 1.7.0
    */
  var customizedHeaderId: js.UndefOr[Boolean] = js.native
  
  /**
    * Disables the requirement of indenting sublists by 4 spaces for them to be nested,
    * effectively reverting to the old behavior where 2 or 3 spaces were enough.
    *
    * @example
    * **input**:
    *
    * ```md
    * - one
    *   - two
    *
    * ...
    *
    * - one
    *     - two
    * ```
    *
    * **disableForced4SpacesIndentedSublists** = false
    *
    * ```html
    * <ul>
    * <li>one</li>
    * <li>two</li>
    * </ul>
    * <p>...</p>
    * <ul>
    * <li>one
    *    <ul>
    *        <li>two</li>
    *    </ul>
    * </li>
    * </ul>
    * ```
    *
    * **disableForced4SpacesIndentedSublists** = true
    *
    * ```html
    * <ul>
    * <li>one
    *    <ul>
    *        <li>two</li>
    *    </ul>
    * </li>
    * </ul>
    * <p>...</p>
    * <ul>
    * <li>one
    *    <ul>
    *        <li>two</li>
    *    </ul>
    * </li>
    * </ul>
    * ```
    * @default false
    * @since 1.5.0
    */
  var disableForced4SpacesIndentedSublists: js.UndefOr[Boolean] = js.native
  
  /**
    * Enable emoji support.
    * 
    * @example
    * ```md
    * this is a :smile: emoji
    * ```
    * @default false
    * @see https://github.com/showdownjs/showdown/wiki/Emojis
    * @since 1.8.0
    */
  var emoji: js.UndefOr[Boolean] = js.native
  
  /**
    * Enables e-mail addresses encoding through the use of Character Entities, transforming ASCII e-mail addresses into its equivalent decimal entities.
    *
    * @remarks Prior to version 1.6.1, emails would always be obfuscated through dec and hex encoding.
    * @example
    * **input**:
    *
    * ```
    * <myself@example.com>
    * ```
    *
    * **encodeEmails** = false
    *
    * ```html
    * <a href="mailto:myself@example.com">myself@example.com</a>
    * ```
    *
    * **encodeEmails** = true
    *
    * ```html
    * <a href="&#109;&#97;&#105;&#108;t&#x6f;&#x3a;&#109;&#x79;s&#x65;&#x6c;&#102;&#64;&#x65;xa&#109;&#112;&#108;&#101;&#x2e;c&#x6f;&#109;">&#x6d;&#121;s&#101;&#108;f&#x40;&#x65;&#120;a&#x6d;&#x70;&#108;&#x65;&#x2e;&#99;&#x6f;&#109;</a>
    * ```
    * @default true
    * @since 1.6.1
    */
  var encodeEmails: js.UndefOr[Boolean] = js.native
  
  /**
    * @deprecated https://github.com/showdownjs/showdown/commit/d3ebff7ef0cde5abfc3874463946d5297fc82e78
    * 
    * This option excludes trailing punctuation from autolinking urls.
    * Punctuation excluded: . ! ? ( ).
    *
    * @remarks This option only applies to links generated by {@link Showdown.ShowdownOptions.simplifiedAutoLink}.
    * @example
    * **input**:
    *
    * ```md
    *    check this link www.google.com.
    * ```
    *
    * **excludeTrailingPunctuationFromURLs** = false
    *
    * ```html
    * <p>check this link <a href="www.google.com">www.google.com.</a></p>
    * ```
    *
    * **excludeTrailingPunctuationFromURLs** = true
    *
    * ```html
    * <p>check this link <a href="www.google.com">www.google.com</a>.</p>
    * ```
    * @default false
    * @since 1.5.1
    */
  var excludeTrailingPunctuationFromURLs: js.UndefOr[Boolean] = js.native
  
  /**
    * Enable support for GFM code block style syntax (fenced codeblocks).
    *
    * @example
    * **syntax**:
    *
    *     ```md
    *        some code here
    *        ```
    * @default true
    * @since 1.2.0
    */
  var ghCodeBlocks: js.UndefOr[Boolean] = js.native
  
  /**
    * Generate header ids compatible with github style (spaces are replaced
    * with dashes and a bunch of non alphanumeric chars are removed).
    *
    * @example
    * **input**:
    *
    * ```md
    * # This is a header with @#$%
    * ```
    *
    * **ghCompatibleHeaderId** = false
    *
    * ```html
    * <h1 id="thisisaheader">This is a header</h1>
    * ```
    *
    * **ghCompatibleHeaderId** = true
    *
    * ```html
    * <h1 id="this-is-a-header-with-">This is a header with @#$%</h1>
    * ```
    * @default false
    * @since 1.5.5
    */
  var ghCompatibleHeaderId: js.UndefOr[Boolean] = js.native
  
  /**
    * Enables support for github @mentions, which links to the github profile page of the username mentioned.
    *
    * @example
    * **input**:
    *
    * ```md
    * hello there @tivie
    * ```
    *
    * **ghMentions** = false
    *
    * ```html
    * <p>hello there @tivie</p>
    * ```
    *
    * **ghMentions** = true
    *
    * ```html
    * <p>hello there <a href="https://www.github.com/tivie>@tivie</a></p>
    * ```
    * @default false
    * @since 1.6.0
    */
  var ghMentions: js.UndefOr[Boolean] = js.native
  
  /**
    * Changes the link generated by @mentions. `{u}` is replaced by the text of the mentions. Only applies if **[ghMentions][]** is enabled.
    *
    * @example
    * **input**:
    *
    * ```md
    * hello there @tivie
    * ```
    *
    * **ghMentionsLink** = https://github.com/{u}
    *
    * ```html
    * <p>hello there <a href="https://www.github.com/tivie>@tivie</a></p>
    * ```
    *
    * **ghMentionsLink** = http://mysite.com/{u}/profile
    *
    * ```html
    * <p>hello there <a href="//mysite.com/tivie/profile">@tivie</a></p>
    * ```
    * @default https://github.com/{u}
    * @since 1.6.2
    */
  var ghMentionsLink: js.UndefOr[String] = js.native
  
  /**
    * Set the header starting level. For instance, setting this to 3 means that
    * 
    * @example
    *  **input**:
    *
    * ```md
    * # header
    * ```
    *
    * **headerLevelStart** = 1
    *
    * ```html
    * <h1>header</h1>
    * ```
    *
    * **headerLevelStart** = 3
    *
    * ```html
    * <h3>header</h3>
    * ```
    * @default 1
    * @since 1.1.0
    */
  var headerLevelStart: js.UndefOr[Double] = js.native
  
  /**
    * Turning this on will stop showdown from interpreting underscores in the middle of
    * words as <em> and <strong> and instead treat them as literal underscores.
    *
    * @example
    * **input**:
    *
    * ```md
    * some text with__underscores__in middle
    * ```
    *
    * **literalMidWordUnderscores** = false
    *
    * ```html
    * <p>some text with<strong>underscores</strong>in middle</p>
    * ```
    *
    * **literalMidWordUnderscores** = true
    *
    * ```html
    * <p>some text with__underscores__in middle</p>
    * ```
    * @default false
    * @since 1.2.0
    */
  var literalMidWordUnderscores: js.UndefOr[Boolean] = js.native
  
  /**
    * Enable support for document metadata (defined at the top of the document
    * between `«««` and `»»»` or between `---` and `---`).
    * 
    * @example
    *  ```js
    *  var conv = new showdown.Converter({metadata: true});
    *  var html = conv.makeHtml(someMd);
    *  var metadata = conv.getMetadata(); // returns an object with the document metadata
    * ```
    * @default false
    * @since 1.8.5
    */
  var metadata: js.UndefOr[Boolean] = js.native
  
  /**
    * Disable the automatic generation of header ids.
    * Showdown generates an id for headings automatically. This is useful for linking to a specific header.
    * This behavior, however, can be disabled with this option.
    *
    * @example
    * **input**:
    *
    * ```md
    * # This is a header
    * ```
    *
    * **noHeaderId** = false
    *
    * ```html
    * <h1 id="thisisaheader">This is a header</h1>
    * ```
    *
    * **noHeaderId** = true
    *
    * ```html
    * <h1>This is a header</h1>
    * ```
    * @default false
    * @since 1.1.0
    */
  var noHeaderId: js.UndefOr[Boolean] = js.native
  
  /**
    * Omit the trailing newline in a code block.
    * By default, showdown adds a newline before the closing tags in code blocks. By enabling this option, that newline is removed.
    * This option affects both indented and fenced (gfm style) code blocks.
    *
    * @example
    *
    * **input**:
    *
    * ```md
    * var foo = 'bar';
    * ```
    *
    * **omitExtraWLInCodeBlocks** = false:
    *
    * ```html
    * <code><pre>var foo = 'bar';
    * </pre></code>
    * ```
    * **omitExtraWLInCodeBlocks** = true:
    *
    * ```html
    * <code><pre>var foo = 'bar';</pre></code>
    * ```
    * @default false
    * @since 1.0.0
    */
  var omitExtraWLInCodeBlocks: js.UndefOr[Boolean] = js.native
  
  /**
    * Open all links in new windows (by adding the attribute target="_blank" to <a> tags).
    *
    * @example
    * **input**:
    *
    * ```md
    * [Showdown](http://showdownjs.com)
    * ```
    *
    * **openLinksInNewWindow** = false
    * ```html
    * <p><a href="http://showdownjs.com">Showdown</a></p>
    * ```
    * 
    * **openLinksInNewWindow** = true
    * ```html
    * <p><a href="http://showdownjs.com" target="_blank">Showdown</a></p>
    * ```
    * @default false
    * @since 1.7.0
    */
  var openLinksInNewWindow: js.UndefOr[Boolean] = js.native
  
  /**
    * Enable support for setting image dimensions from within markdown syntax.
    * 
    * @example
    * ```md
    * ![foo](foo.jpg =100x80)   simple, assumes units are in px
    * ![bar](bar.jpg =100x*)    sets the height to "auto"
    * ![baz](baz.jpg =80%x5em)  Image with width of 80% and height of 5em
    * ```
    * @default false
    * @since 1.1.0
    */
  var parseImgDimensions: js.UndefOr[Boolean] = js.native
  
  /**
    * Add a prefix to the generated header ids.
    * Passing a string will prefix that string to the header id.
    * Setting to true will add a generic 'section' prefix.
    *
    * @default false
    * @since 1.0.0
    */
  var prefixHeaderId: js.UndefOr[String | Boolean] = js.native
  
  /**
    * Remove only spaces, ' and " from generated header ids (including prefixes),
    * replacing them with dashes (-).
    * WARNING: This might result in malformed ids.
    *
    * @default false
    * @since 1.7.3
    */
  var rawHeaderId: js.UndefOr[Boolean] = js.native
  
  /**
    * Setting this option to true will prevent showdown from modifying the prefix.
    * This might result in malformed IDs (if, for instance, the " char is used in the prefix).
    * Has no effect if prefixHeaderId is set to false.
    *
    * @default false
    * @since 1.7.3
    */
  var rawPrefixHeaderId: js.UndefOr[Boolean] = js.native
  
  /**
    * Makes adding a space between # and the header text mandatory.
    *
    * @example
    * **input**:
    *
    * ```md
    * #header
    * ```
    *
    * **requireSpaceBeforeHeadingText** = false
    *
    * ```html
    * <h1 id="header">header</h1>
    * ```
    *
    * **simpleLineBreaks** = true
    *
    * ```html
    * <p>#header</p>
    * ```
    *
    * @default false
    * @since 1.5.3
    */
  var requireSpaceBeforeHeadingText: js.UndefOr[Boolean] = js.native
  
  /**
    * Parses line breaks as like GitHub does, without needing 2 spaces at the end of the line.
    *
    * @example
    * **input**:
    *
    * ```md
    * a line
    * wrapped in two
    * ```
    *
    * **simpleLineBreaks** = false
    *
    * ```html
    * <p>a line
    * wrapped in two</p>
    * ```
    *
    * **simpleLineBreaks** = true
    *
    * ```html
    * <p>a line<br>
    * wrapped in two</p>
    * ```
    * @default false
    * @since 1.5.1
    */
  var simpleLineBreaks: js.UndefOr[Boolean] = js.native
  
  /**
    * Turning this option on will enable automatic linking to urls.
    *
    * @example
    * **input**:
    *
    * ```md
    * some text www.google.com
    * ```
    *
    * **simplifiedAutoLink** = false
    *
    * ```html
    * <p>some text www.google.com</p>
    * ```
    *
    * **simplifiedAutoLink** = true
    *
    * ```html
    * <p>some text <a href="www.google.com">www.google.com</a></p>
    * ```
    * @default false
    * @since 1.2.0
    */
  var simplifiedAutoLink: js.UndefOr[Boolean] = js.native
  
  /**
    * Tries to smartly fix indentation problems related to es6 template
    * strings in the midst of indented code.
    *
    * @default false
    * @since 1.4.2
    */
  var smartIndentationFix: js.UndefOr[Boolean] = js.native
  
  /**
    * Prevents weird effects in live previews due to incomplete input.
    * 
    * @example
    * ![awkward effect](http://i.imgur.com/YQ9iHTL.gif)
    * You can prevent this by enabling this option.
    * @default false
    */
  var smoothLivePreview: js.UndefOr[Boolean] = js.native
  
  /**
    * Split adjacent blockquote blocks.
    *
    * @since 1.8.6
    */
  var splitAdjacentBlockquotes: js.UndefOr[Boolean] = js.native
  
  /**
    * Enable support for strikethrough syntax.
    *
    * @example
    *  **syntax**:
    *
    * ```md
    * ~~strikethrough~~
    * ```
    *
    * ```html
    * <del>strikethrough</del>
    * ```
    * @default false
    * @since 1.2.0
    */
  var strikethrough: js.UndefOr[Boolean] = js.native
  
  /**
    * Enable support for tables syntax.
    *
    * @example
    *  **syntax**:
    *
    * ```md
    * | h1    |    h2   |      h3 |
    * |:------|:-------:|--------:|
    * | 100   | [a][1]  | ![b][2] |
    * | *foo* | **bar** | ~~baz~~ |
    * ```
    * @default false
    * @since 1.2.0
    */
  var tables: js.UndefOr[Boolean] = js.native
  
  /**
    * If enabled adds an id property to table headers tags.
    *
    * @remarks This options only applies if **[tables][]** is enabled.
    * @default false
    * @since 1.2.0
    */
  var tablesHeaderId: js.UndefOr[Boolean] = js.native
  
  /**
    * Enable support for GFM takslists.
    *
    * @example
    * **syntax**:
    *
    * ```md
    *  - [x] This task is done
    *  - [ ] This is still pending
    * ```
    * @default false
    * @since 1.2.0
    */
  var tasklists: js.UndefOr[Boolean] = js.native
  
  /**
    * Enable support for underline. Syntax is double or triple underscores: `__underline word__`. With this option enabled,
    * underscores no longer parses into `<em>` and `<strong>`
    *
    * @example
    * **input**:
    *
    * ```md
    * __underline word__
    * ```
    *
    * **underline** = false
    * ```html
    * <p><strong>underlined word</strong></p>
    * ```
    * 
    * **underline** = true
    * ```html
    * <p><u>underlined word</u></p>
    * ```
    * @default false
    * @since 1.8.0
    */
  var underline: js.UndefOr[Boolean] = js.native
}
object ShowdownOptions {
  
  @scala.inline
  def apply(): ShowdownOptions = {
    val __obj = js.Dynamic.literal()
    __obj.asInstanceOf[ShowdownOptions]
  }
  
  @scala.inline
  implicit class ShowdownOptionsOps[Self <: ShowdownOptions] (val x: Self) extends AnyVal {
    
    @scala.inline
    def duplicate: Self = (js.Dynamic.global.Object.assign(js.Dynamic.literal(), x)).asInstanceOf[Self]
    
    @scala.inline
    def combineWith[Other <: js.Any](other: Other): Self with Other = (js.Dynamic.global.Object.assign(js.Dynamic.literal(), x, other.asInstanceOf[js.Any])).asInstanceOf[Self with Other]
    
    @scala.inline
    def set(key: String, value: js.Any): Self = {
      x.asInstanceOf[js.Dynamic].updateDynamic(key)(value)
      x
    }
    
    @scala.inline
    def setBackslashEscapesHTMLTags(value: Boolean): Self = this.set("backslashEscapesHTMLTags", value.asInstanceOf[js.Any])
    
    @scala.inline
    def deleteBackslashEscapesHTMLTags: Self = this.set("backslashEscapesHTMLTags", js.undefined)
    
    @scala.inline
    def setCompleteHTMLDocument(value: Boolean): Self = this.set("completeHTMLDocument", value.asInstanceOf[js.Any])
    
    @scala.inline
    def deleteCompleteHTMLDocument: Self = this.set("completeHTMLDocument", js.undefined)
    
    @scala.inline
    def setCustomizedHeaderId(value: Boolean): Self = this.set("customizedHeaderId", value.asInstanceOf[js.Any])
    
    @scala.inline
    def deleteCustomizedHeaderId: Self = this.set("customizedHeaderId", js.undefined)
    
    @scala.inline
    def setDisableForced4SpacesIndentedSublists(value: Boolean): Self = this.set("disableForced4SpacesIndentedSublists", value.asInstanceOf[js.Any])
    
    @scala.inline
    def deleteDisableForced4SpacesIndentedSublists: Self = this.set("disableForced4SpacesIndentedSublists", js.undefined)
    
    @scala.inline
    def setEmoji(value: Boolean): Self = this.set("emoji", value.asInstanceOf[js.Any])
    
    @scala.inline
    def deleteEmoji: Self = this.set("emoji", js.undefined)
    
    @scala.inline
    def setEncodeEmails(value: Boolean): Self = this.set("encodeEmails", value.asInstanceOf[js.Any])
    
    @scala.inline
    def deleteEncodeEmails: Self = this.set("encodeEmails", js.undefined)
    
    @scala.inline
    def setExcludeTrailingPunctuationFromURLs(value: Boolean): Self = this.set("excludeTrailingPunctuationFromURLs", value.asInstanceOf[js.Any])
    
    @scala.inline
    def deleteExcludeTrailingPunctuationFromURLs: Self = this.set("excludeTrailingPunctuationFromURLs", js.undefined)
    
    @scala.inline
    def setGhCodeBlocks(value: Boolean): Self = this.set("ghCodeBlocks", value.asInstanceOf[js.Any])
    
    @scala.inline
    def deleteGhCodeBlocks: Self = this.set("ghCodeBlocks", js.undefined)
    
    @scala.inline
    def setGhCompatibleHeaderId(value: Boolean): Self = this.set("ghCompatibleHeaderId", value.asInstanceOf[js.Any])
    
    @scala.inline
    def deleteGhCompatibleHeaderId: Self = this.set("ghCompatibleHeaderId", js.undefined)
    
    @scala.inline
    def setGhMentions(value: Boolean): Self = this.set("ghMentions", value.asInstanceOf[js.Any])
    
    @scala.inline
    def deleteGhMentions: Self = this.set("ghMentions", js.undefined)
    
    @scala.inline
    def setGhMentionsLink(value: String): Self = this.set("ghMentionsLink", value.asInstanceOf[js.Any])
    
    @scala.inline
    def deleteGhMentionsLink: Self = this.set("ghMentionsLink", js.undefined)
    
    @scala.inline
    def setHeaderLevelStart(value: Double): Self = this.set("headerLevelStart", value.asInstanceOf[js.Any])
    
    @scala.inline
    def deleteHeaderLevelStart: Self = this.set("headerLevelStart", js.undefined)
    
    @scala.inline
    def setLiteralMidWordUnderscores(value: Boolean): Self = this.set("literalMidWordUnderscores", value.asInstanceOf[js.Any])
    
    @scala.inline
    def deleteLiteralMidWordUnderscores: Self = this.set("literalMidWordUnderscores", js.undefined)
    
    @scala.inline
    def setMetadata(value: Boolean): Self = this.set("metadata", value.asInstanceOf[js.Any])
    
    @scala.inline
    def deleteMetadata: Self = this.set("metadata", js.undefined)
    
    @scala.inline
    def setNoHeaderId(value: Boolean): Self = this.set("noHeaderId", value.asInstanceOf[js.Any])
    
    @scala.inline
    def deleteNoHeaderId: Self = this.set("noHeaderId", js.undefined)
    
    @scala.inline
    def setOmitExtraWLInCodeBlocks(value: Boolean): Self = this.set("omitExtraWLInCodeBlocks", value.asInstanceOf[js.Any])
    
    @scala.inline
    def deleteOmitExtraWLInCodeBlocks: Self = this.set("omitExtraWLInCodeBlocks", js.undefined)
    
    @scala.inline
    def setOpenLinksInNewWindow(value: Boolean): Self = this.set("openLinksInNewWindow", value.asInstanceOf[js.Any])
    
    @scala.inline
    def deleteOpenLinksInNewWindow: Self = this.set("openLinksInNewWindow", js.undefined)
    
    @scala.inline
    def setParseImgDimensions(value: Boolean): Self = this.set("parseImgDimensions", value.asInstanceOf[js.Any])
    
    @scala.inline
    def deleteParseImgDimensions: Self = this.set("parseImgDimensions", js.undefined)
    
    @scala.inline
    def setPrefixHeaderId(value: String | Boolean): Self = this.set("prefixHeaderId", value.asInstanceOf[js.Any])
    
    @scala.inline
    def deletePrefixHeaderId: Self = this.set("prefixHeaderId", js.undefined)
    
    @scala.inline
    def setRawHeaderId(value: Boolean): Self = this.set("rawHeaderId", value.asInstanceOf[js.Any])
    
    @scala.inline
    def deleteRawHeaderId: Self = this.set("rawHeaderId", js.undefined)
    
    @scala.inline
    def setRawPrefixHeaderId(value: Boolean): Self = this.set("rawPrefixHeaderId", value.asInstanceOf[js.Any])
    
    @scala.inline
    def deleteRawPrefixHeaderId: Self = this.set("rawPrefixHeaderId", js.undefined)
    
    @scala.inline
    def setRequireSpaceBeforeHeadingText(value: Boolean): Self = this.set("requireSpaceBeforeHeadingText", value.asInstanceOf[js.Any])
    
    @scala.inline
    def deleteRequireSpaceBeforeHeadingText: Self = this.set("requireSpaceBeforeHeadingText", js.undefined)
    
    @scala.inline
    def setSimpleLineBreaks(value: Boolean): Self = this.set("simpleLineBreaks", value.asInstanceOf[js.Any])
    
    @scala.inline
    def deleteSimpleLineBreaks: Self = this.set("simpleLineBreaks", js.undefined)
    
    @scala.inline
    def setSimplifiedAutoLink(value: Boolean): Self = this.set("simplifiedAutoLink", value.asInstanceOf[js.Any])
    
    @scala.inline
    def deleteSimplifiedAutoLink: Self = this.set("simplifiedAutoLink", js.undefined)
    
    @scala.inline
    def setSmartIndentationFix(value: Boolean): Self = this.set("smartIndentationFix", value.asInstanceOf[js.Any])
    
    @scala.inline
    def deleteSmartIndentationFix: Self = this.set("smartIndentationFix", js.undefined)
    
    @scala.inline
    def setSmoothLivePreview(value: Boolean): Self = this.set("smoothLivePreview", value.asInstanceOf[js.Any])
    
    @scala.inline
    def deleteSmoothLivePreview: Self = this.set("smoothLivePreview", js.undefined)
    
    @scala.inline
    def setSplitAdjacentBlockquotes(value: Boolean): Self = this.set("splitAdjacentBlockquotes", value.asInstanceOf[js.Any])
    
    @scala.inline
    def deleteSplitAdjacentBlockquotes: Self = this.set("splitAdjacentBlockquotes", js.undefined)
    
    @scala.inline
    def setStrikethrough(value: Boolean): Self = this.set("strikethrough", value.asInstanceOf[js.Any])
    
    @scala.inline
    def deleteStrikethrough: Self = this.set("strikethrough", js.undefined)
    
    @scala.inline
    def setTables(value: Boolean): Self = this.set("tables", value.asInstanceOf[js.Any])
    
    @scala.inline
    def deleteTables: Self = this.set("tables", js.undefined)
    
    @scala.inline
    def setTablesHeaderId(value: Boolean): Self = this.set("tablesHeaderId", value.asInstanceOf[js.Any])
    
    @scala.inline
    def deleteTablesHeaderId: Self = this.set("tablesHeaderId", js.undefined)
    
    @scala.inline
    def setTasklists(value: Boolean): Self = this.set("tasklists", value.asInstanceOf[js.Any])
    
    @scala.inline
    def deleteTasklists: Self = this.set("tasklists", js.undefined)
    
    @scala.inline
    def setUnderline(value: Boolean): Self = this.set("underline", value.asInstanceOf[js.Any])
    
    @scala.inline
    def deleteUnderline: Self = this.set("underline", js.undefined)
  }
}
