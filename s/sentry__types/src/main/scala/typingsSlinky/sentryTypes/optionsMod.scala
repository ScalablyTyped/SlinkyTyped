package typingsSlinky.sentryTypes

import org.scalablytyped.runtime.StringDictionary
import typingsSlinky.sentryTypes.breadcrumbMod.Breadcrumb
import typingsSlinky.sentryTypes.breadcrumbMod.BreadcrumbHint
import typingsSlinky.sentryTypes.eventMod.Event
import typingsSlinky.sentryTypes.eventMod.EventHint
import typingsSlinky.sentryTypes.integrationMod.Integration
import typingsSlinky.sentryTypes.loglevelMod.LogLevel
import typingsSlinky.sentryTypes.sentryTypesBooleans.`false`
import typingsSlinky.sentryTypes.transactionMod.SamplingContext
import typingsSlinky.sentryTypes.transportMod.Transport
import typingsSlinky.sentryTypes.transportMod.TransportClass
import typingsSlinky.sentryTypes.transportMod.TransportOptions
import org.scalablytyped.runtime.StObject
import scala.scalajs.js
import scala.scalajs.js.`|`
import scala.scalajs.js.annotation.{JSGlobalScope, JSGlobal, JSImport, JSName, JSBracketAccess}

object optionsMod {
  
  @js.native
  trait Options extends StObject {
    
    /**
      * Options which are in beta, or otherwise not guaranteed to be stable.
      */
    var _experiments: js.UndefOr[StringDictionary[js.Any]] = js.native
    
    /** Attaches stacktraces to pure capture message / log integrations */
    var attachStacktrace: js.UndefOr[Boolean] = js.native
    
    /**
      * A callback invoked when adding a breadcrumb, allowing to optionally modify
      * it before adding it to future events.
      *
      * Note that you must return a valid breadcrumb from this callback. If you do
      * not wish to modify the breadcrumb, simply return it at the end.
      * Returning null will cause the breadcrumb to be dropped.
      *
      * @param breadcrumb The breadcrumb as created by the SDK.
      * @returns The breadcrumb that will be added | null.
      */
    var beforeBreadcrumb: js.UndefOr[
        js.Function2[
          /* breadcrumb */ Breadcrumb, 
          /* hint */ js.UndefOr[BreadcrumbHint], 
          Breadcrumb | Null
        ]
      ] = js.native
    
    /**
      * A callback invoked during event submission, allowing to optionally modify
      * the event before it is sent to Sentry.
      *
      * Note that you must return a valid event from this callback. If you do not
      * wish to modify the event, simply return it at the end.
      * Returning null will cause the event to be dropped.
      *
      * @param event The error or message event generated by the SDK.
      * @param hint May contain additional information about the original exception.
      * @returns A new event that will be sent | null.
      */
    var beforeSend: js.UndefOr[
        js.Function2[
          /* event */ Event, 
          /* hint */ js.UndefOr[EventHint], 
          (js.Thenable[Event | Null]) | Event | Null
        ]
      ] = js.native
    
    /**
      * Enable debug functionality in the SDK itself
      */
    var debug: js.UndefOr[Boolean] = js.native
    
    /**
      * If this is set to false, default integrations will not be added, otherwise this will internally be set to the
      * recommended default integrations.
      */
    var defaultIntegrations: js.UndefOr[`false` | js.Array[Integration]] = js.native
    
    /** Sets the distribution for all events */
    var dist: js.UndefOr[String] = js.native
    
    /**
      * The Dsn used to connect to Sentry and identify the project. If omitted, the
      * SDK will not send any data to Sentry.
      */
    var dsn: js.UndefOr[String] = js.native
    
    /**
      * Specifies whether this SDK should activate and send events to Sentry.
      * Disabling the SDK reduces all overhead from instrumentation, collecting
      * breadcrumbs and capturing events. Defaults to true.
      */
    var enabled: js.UndefOr[Boolean] = js.native
    
    /** The current environment of your application (e.g. "production"). */
    var environment: js.UndefOr[String] = js.native
    
    /**
      * A pattern for error messages which should not be sent to Sentry.
      * By default, all errors will be sent.
      */
    var ignoreErrors: js.UndefOr[js.Array[String | js.RegExp]] = js.native
    
    /**
      * List of integrations that should be installed after SDK was initialized.
      * Accepts either a list of integrations or a function that receives
      * default integrations and returns a new, updated list.
      */
    var integrations: js.UndefOr[
        js.Array[Integration] | (js.Function1[/* integrations */ js.Array[Integration], js.Array[Integration]])
      ] = js.native
    
    /** Console logging verbosity for the SDK Client. */
    var logLevel: js.UndefOr[LogLevel] = js.native
    
    /**
      * The maximum number of breadcrumbs sent with events. Defaults to 100.
      * Values over 100 will be ignored and 100 used instead.
      */
    var maxBreadcrumbs: js.UndefOr[Double] = js.native
    
    /** Maxium number of chars a single value can have before it will be truncated. */
    var maxValueLength: js.UndefOr[Double] = js.native
    
    /**
      * Maximum number of levels that normalization algorithm will traverse in objects and arrays.
      * Used when normalizing an event before sending, on all of the listed attributes:
      * - `breadcrumbs.data`
      * - `user`
      * - `contexts`
      * - `extra`
      * Defaults to `3`. Set to `0` to disable.
      */
    var normalizeDepth: js.UndefOr[Double] = js.native
    
    /**
      * The release identifier used when uploading respective source maps. Specify
      * this value to allow Sentry to resolve the correct source maps when
      * processing events.
      */
    var release: js.UndefOr[String] = js.native
    
    /** A global sample rate to apply to all events (0 - 1). */
    var sampleRate: js.UndefOr[Double] = js.native
    
    /**
      * Controls how many milliseconds to wait before shutting down. The default is
      * SDK-specific but typically around 2 seconds. Setting this too low can cause
      * problems for sending events from command line applications. Setting it too
      * high can cause the application to block for users with network connectivity
      * problems.
      */
    var shutdownTimeout: js.UndefOr[Double] = js.native
    
    /**
      * Sample rate to determine trace sampling.
      *
      * 0.0 = 0% chance of a given trace being sent (send no traces) 1.0 = 100% chance of a given trace being sent (send
      * all traces)
      *
      * Tracing is enabled if either this or `tracesSampler` is defined. If both are defined, `tracesSampleRate` is
      * ignored.
      */
    var tracesSampleRate: js.UndefOr[Double] = js.native
    
    /**
      * Function to compute tracing sample rate dynamically and filter unwanted traces.
      *
      * Tracing is enabled if either this or `tracesSampleRate` is defined. If both are defined, `tracesSampleRate` is
      * ignored.
      *
      * Will automatically be passed a context object of default and optional custom data. See
      * {@link Transaction.samplingContext} and {@link Hub.startTransaction}.
      *
      * @returns A sample rate between 0 and 1 (0 drops the trace, 1 guarantees it will be sent). Returning `true` is
      * equivalent to returning 1 and returning `false` is equivalent to returning 0.
      */
    var tracesSampler: js.UndefOr[js.Function1[/* samplingContext */ SamplingContext, Double | Boolean]] = js.native
    
    /**
      * Transport object that should be used to send events to Sentry
      */
    var transport: js.UndefOr[TransportClass[Transport]] = js.native
    
    /**
      * Options for the default transport that the SDK uses.
      */
    var transportOptions: js.UndefOr[TransportOptions] = js.native
  }
  object Options {
    
    @scala.inline
    def apply(): Options = {
      val __obj = js.Dynamic.literal()
      __obj.asInstanceOf[Options]
    }
    
    @scala.inline
    implicit class OptionsMutableBuilder[Self <: Options] (val x: Self) extends AnyVal {
      
      @scala.inline
      def setAttachStacktrace(value: Boolean): Self = StObject.set(x, "attachStacktrace", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setAttachStacktraceUndefined: Self = StObject.set(x, "attachStacktrace", js.undefined)
      
      @scala.inline
      def setBeforeBreadcrumb(value: (/* breadcrumb */ Breadcrumb, /* hint */ js.UndefOr[BreadcrumbHint]) => Breadcrumb | Null): Self = StObject.set(x, "beforeBreadcrumb", js.Any.fromFunction2(value))
      
      @scala.inline
      def setBeforeBreadcrumbUndefined: Self = StObject.set(x, "beforeBreadcrumb", js.undefined)
      
      @scala.inline
      def setBeforeSend(
        value: (/* event */ Event, /* hint */ js.UndefOr[EventHint]) => (js.Thenable[Event | Null]) | Event | Null
      ): Self = StObject.set(x, "beforeSend", js.Any.fromFunction2(value))
      
      @scala.inline
      def setBeforeSendUndefined: Self = StObject.set(x, "beforeSend", js.undefined)
      
      @scala.inline
      def setDebug(value: Boolean): Self = StObject.set(x, "debug", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setDebugUndefined: Self = StObject.set(x, "debug", js.undefined)
      
      @scala.inline
      def setDefaultIntegrations(value: `false` | js.Array[Integration]): Self = StObject.set(x, "defaultIntegrations", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setDefaultIntegrationsUndefined: Self = StObject.set(x, "defaultIntegrations", js.undefined)
      
      @scala.inline
      def setDefaultIntegrationsVarargs(value: Integration*): Self = StObject.set(x, "defaultIntegrations", js.Array(value :_*))
      
      @scala.inline
      def setDist(value: String): Self = StObject.set(x, "dist", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setDistUndefined: Self = StObject.set(x, "dist", js.undefined)
      
      @scala.inline
      def setDsn(value: String): Self = StObject.set(x, "dsn", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setDsnUndefined: Self = StObject.set(x, "dsn", js.undefined)
      
      @scala.inline
      def setEnabled(value: Boolean): Self = StObject.set(x, "enabled", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setEnabledUndefined: Self = StObject.set(x, "enabled", js.undefined)
      
      @scala.inline
      def setEnvironment(value: String): Self = StObject.set(x, "environment", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setEnvironmentUndefined: Self = StObject.set(x, "environment", js.undefined)
      
      @scala.inline
      def setIgnoreErrors(value: js.Array[String | js.RegExp]): Self = StObject.set(x, "ignoreErrors", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setIgnoreErrorsUndefined: Self = StObject.set(x, "ignoreErrors", js.undefined)
      
      @scala.inline
      def setIgnoreErrorsVarargs(value: (String | js.RegExp)*): Self = StObject.set(x, "ignoreErrors", js.Array(value :_*))
      
      @scala.inline
      def setIntegrations(
        value: js.Array[Integration] | (js.Function1[/* integrations */ js.Array[Integration], js.Array[Integration]])
      ): Self = StObject.set(x, "integrations", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setIntegrationsFunction1(value: /* integrations */ js.Array[Integration] => js.Array[Integration]): Self = StObject.set(x, "integrations", js.Any.fromFunction1(value))
      
      @scala.inline
      def setIntegrationsUndefined: Self = StObject.set(x, "integrations", js.undefined)
      
      @scala.inline
      def setIntegrationsVarargs(value: Integration*): Self = StObject.set(x, "integrations", js.Array(value :_*))
      
      @scala.inline
      def setLogLevel(value: LogLevel): Self = StObject.set(x, "logLevel", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setLogLevelUndefined: Self = StObject.set(x, "logLevel", js.undefined)
      
      @scala.inline
      def setMaxBreadcrumbs(value: Double): Self = StObject.set(x, "maxBreadcrumbs", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setMaxBreadcrumbsUndefined: Self = StObject.set(x, "maxBreadcrumbs", js.undefined)
      
      @scala.inline
      def setMaxValueLength(value: Double): Self = StObject.set(x, "maxValueLength", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setMaxValueLengthUndefined: Self = StObject.set(x, "maxValueLength", js.undefined)
      
      @scala.inline
      def setNormalizeDepth(value: Double): Self = StObject.set(x, "normalizeDepth", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setNormalizeDepthUndefined: Self = StObject.set(x, "normalizeDepth", js.undefined)
      
      @scala.inline
      def setRelease(value: String): Self = StObject.set(x, "release", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setReleaseUndefined: Self = StObject.set(x, "release", js.undefined)
      
      @scala.inline
      def setSampleRate(value: Double): Self = StObject.set(x, "sampleRate", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setSampleRateUndefined: Self = StObject.set(x, "sampleRate", js.undefined)
      
      @scala.inline
      def setShutdownTimeout(value: Double): Self = StObject.set(x, "shutdownTimeout", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setShutdownTimeoutUndefined: Self = StObject.set(x, "shutdownTimeout", js.undefined)
      
      @scala.inline
      def setTracesSampleRate(value: Double): Self = StObject.set(x, "tracesSampleRate", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setTracesSampleRateUndefined: Self = StObject.set(x, "tracesSampleRate", js.undefined)
      
      @scala.inline
      def setTracesSampler(value: /* samplingContext */ SamplingContext => Double | Boolean): Self = StObject.set(x, "tracesSampler", js.Any.fromFunction1(value))
      
      @scala.inline
      def setTracesSamplerUndefined: Self = StObject.set(x, "tracesSampler", js.undefined)
      
      @scala.inline
      def setTransport(value: TransportClass[Transport]): Self = StObject.set(x, "transport", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setTransportOptions(value: TransportOptions): Self = StObject.set(x, "transportOptions", value.asInstanceOf[js.Any])
      
      @scala.inline
      def setTransportOptionsUndefined: Self = StObject.set(x, "transportOptions", js.undefined)
      
      @scala.inline
      def setTransportUndefined: Self = StObject.set(x, "transport", js.undefined)
      
      @scala.inline
      def set_experiments(value: StringDictionary[js.Any]): Self = StObject.set(x, "_experiments", value.asInstanceOf[js.Any])
      
      @scala.inline
      def set_experimentsUndefined: Self = StObject.set(x, "_experiments", js.undefined)
    }
  }
}
