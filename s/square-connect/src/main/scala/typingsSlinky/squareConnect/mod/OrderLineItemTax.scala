package typingsSlinky.squareConnect.mod

import typingsSlinky.std.Record
import scala.scalajs.js
import scala.scalajs.js.`|`
import scala.scalajs.js.annotation.{JSGlobalScope, JSGlobal, JSImport, JSName, JSBracketAccess}

@JSImport("square-connect", "OrderLineItemTax")
@js.native
class OrderLineItemTax () extends js.Object {
  
  /**
    * The amount of the money applied by the tax in the order.
    */
  var applied_money: js.UndefOr[Money] = js.native
  
  /**
    * The catalog object id referencing `CatalogTax`.
    */
  var catalog_object_id: js.UndefOr[String] = js.native
  
  /**
    * Application-defined data attached to this tax. Metadata fields are intended to store descriptive references or
    * associations with an entity in another system or store brief information about the object. Square does not process
    * this field; it only stores and returns it in relevant API calls. Do not use metadata to store any sensitive information
    * (personally identifiable information, card details, etc.). Keys written by applications must be 60 characters
    * or less and must be in the character set `[a-zA-Z0-9_-]`. Entries may also include metadata generated by Square.
    * These keys are prefixed with a namespace, separated from the key with a ':' character. Values have a max length
    * of 255 characters. An application may have up to 10 entries per metadata field. Entries written by applications
    * are private and can only be read or modified by the same application.
    * See [Metadata](https://developer.squareup.com/docs/build-basics/metadata) for more information.
    */
  var metadata: js.UndefOr[Record[String, String]] = js.native
  
  /**
    * The tax's name.
    */
  var name: js.UndefOr[String] = js.native
  
  /**
    * The percentage of the tax, as a string representation of a decimal number.
    * For example, a value of "7.25" corresponds to a percentage of 7.25%.
    */
  var percentage: js.UndefOr[String] = js.native
  
  /**
    * Indicates the level at which the tax applies. For `ORDER` scoped taxes, Square generates references in
    * `applied_taxes` on all order line items that do not have them. For `LINE_ITEM` scoped taxes, the tax will only
    * apply to line items with references in their `applied_taxes` field. This field is immutable.
    * To change the scope, you must delete the tax and re-add it as a new tax.
    * See [OrderLineItemTaxScope](#type-orderlineitemtaxscope) for possible values.
    */
  var scope: js.UndefOr[TaxApplicationScopeType] = js.native
  
  /**
    * Indicates the calculation method used to apply the tax.
    * See [OrderLineItemTaxType](#type-orderlineitemtaxtype) for possible values.
    */
  var `type`: js.UndefOr[TaxType] = js.native
  
  /**
    * Unique ID that identifies the tax only within this order.
    */
  var uid: js.UndefOr[String] = js.native
}
