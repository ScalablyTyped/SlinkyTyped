package typingsSlinky.squareConnect.mod

import typingsSlinky.std.Record
import scala.scalajs.js
import scala.scalajs.js.`|`
import scala.scalajs.js.annotation.{JSGlobalScope, JSGlobal, JSImport, JSName, JSBracketAccess}

@JSImport("square-connect", "OrderLineItemDiscount")
@js.native
class OrderLineItemDiscount () extends js.Object {
  
  /**
    * The total declared monetary amount of the discount. `amount_money` is not set for percentage-based discounts.
    */
  var amount_money: js.UndefOr[Money] = js.native
  
  /**
    * The amount of discount actually applied to the line item. Represents the amount of money applied as a line
    * item-scoped discount. When an amount-based discount is scoped to the entire order, the value of `applied_money`
    * is different from `amount_money` because the total amount of the discount is distributed across all line items.
    */
  var applied_money: js.UndefOr[Money] = js.native
  
  /**
    * The catalog object id referencing `CatalogDiscount`.
    */
  var catalog_object_id: js.UndefOr[String] = js.native
  
  /**
    * Application-defined data attached to this discount. Metadata fields are intended to store descriptive references
    * or associations with an entity in another system or store brief information about the object. Square does not process
    * this field; it only stores and returns it in relevant API calls. Do not use metadata to store any sensitive information
    * (personally identifiable information, card details, etc.). Keys written by applications must be 60 characters or
    * less and must be in the character set `[a-zA-Z0-9_-]`. Entries may also include metadata generated by Square.
    * These keys are prefixed with a namespace, separated from the key with a ':' character. Values have a max length
    * of 255 characters. An application may have up to 10 entries per metadata field. Entries written by applications
    * are private and can only be read or modified by the same application.
    * See [Metadata](https://developer.squareup.com/docs/build-basics/metadata) for more information.
    */
  var metadata: js.UndefOr[Record[String, String]] = js.native
  
  /**
    * The discount's name.
    */
  var name: js.UndefOr[String] = js.native
  
  /**
    * The percentage of the discount, as a string representation of a decimal number.
    * A value of `7.25` corresponds to a percentage of 7.25%. `percentage` is not set for amount-based discounts.
    */
  var percentage: js.UndefOr[String] = js.native
  
  /**
    * The object identifier of a `pricing rule` to be applied automatically to this discount.
    * The specification and application of the discounts, to which a `pricing_rule_id` is assigned,
    * are completely controlled by the corresponding pricing rule.
    */
  var pricing_rule_id: js.UndefOr[String] = js.native
  
  /**
    * The reward identifiers corresponding to this discount.
    * The application and specification of discounts that have `reward_ids` are completely controlled by the backing
    * criteria corresponding to the reward tiers of the rewards that are added to the order through the Loyalty API.
    * To manually unapply discounts that are the result of added rewards, the rewards must be removed from the order through the Loyalty API.
    */
  var reward_ids: js.UndefOr[js.Array[String]] = js.native
  
  /**
    * Indicates the level at which the discount applies. For `ORDER` scoped discounts, Square generates references
    * in `applied_discounts` on all order line items that do not have them. For `LINE_ITEM` scoped discounts,
    * the discount only applies to line items with a discount reference in their `applied_discounts` field.
    * This field is immutable. To change the scope of a discount you must delete the discount and re-add it as a new discount.
    * See [OrderLineItemDiscountScope](#type-orderlineitemdiscountscope) for possible values.
    */
  var scope: js.UndefOr[DiscountApplicationScopeType] = js.native
  
  /**
    * The type of the discount. Discounts that don't reference a catalog object ID must have a type of `FIXED_PERCENTAGE`
    * or `FIXED_AMOUNT`. See [OrderLineItemDiscountType](#type-orderlineitemdiscounttype) for possible values.
    */
  var `type`: js.UndefOr[DiscountType] = js.native
  
  /**
    * Unique ID that identifies the discount only within this order.
    */
  var uid: js.UndefOr[String] = js.native
}
