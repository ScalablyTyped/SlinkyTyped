package typingsSlinky.squareConnect.mod

import typingsSlinky.squareConnect.squareConnectStrings.COMPLETED
import typingsSlinky.squareConnect.squareConnectStrings.FAILED
import typingsSlinky.squareConnect.squareConnectStrings.PENDING
import typingsSlinky.squareConnect.squareConnectStrings.REJECTED
import org.scalablytyped.runtime.StObject
import scala.scalajs.js
import scala.scalajs.js.`|`
import scala.scalajs.js.annotation.{JSGlobalScope, JSGlobal, JSImport, JSName, JSBracketAccess}

@JSImport("square-connect", "PaymentRefund")
@js.native
class PaymentRefund () extends StObject {
  
  /**
    * The amount of money refunded, specified in the smallest denomination of the applicable currency.
    * For example, US dollar amounts are specified in cents.
    */
  var amount_money: Money = js.native
  
  /**
    * Amount of money the app developer contributed to help cover the refunded amount. Specified in the smallest
    * denomination of the applicable currency. For example, US dollar amounts are specified in cents.
    * See [Working with monetary amounts](https://developer.squareup.com/docs/build-basics/working-with-monetary-amounts) for details.
    */
  var app_fee_money: js.UndefOr[Money] = js.native
  
  /**
    * Timestamp of when the refund was created, in RFC 3339 format.
    */
  var created_at: js.UndefOr[String] = js.native
  
  /**
    * Unique ID for this refund, generated by Square.
    */
  var id: String = js.native
  
  /**
    * Location ID associated with the payment this refund is attached to.
    */
  var location_id: js.UndefOr[String] = js.native
  
  /**
    * The ID of the order associated with the refund.
    */
  var order_id: js.UndefOr[String] = js.native
  
  /**
    * The ID of the payment assocated with this refund.
    */
  var payment_id: js.UndefOr[String] = js.native
  
  /**
    * Processing fees and fee adjustments assessed by Square on this refund.
    */
  var processing_fee: js.UndefOr[js.Array[ProcessingFee]] = js.native
  
  /**
    * The reason for the refund.
    */
  var reason: js.UndefOr[String] = js.native
  
  /**
    * The refund's status:
    * - `PENDING` - awaiting approval
    * - `COMPLETED` - successfully completed
    * - `REJECTED` - the refund was rejected
    * - `FAILED` - an error occurred
    */
  var status: PENDING | COMPLETED | REJECTED | FAILED = js.native
  
  /**
    * Timestamp of when the refund was last updated, in RFC 3339 format.
    */
  var updated_at: js.UndefOr[String] = js.native
}
