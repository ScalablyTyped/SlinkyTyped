package typingsSlinky.squareConnect.mod

import org.scalablytyped.runtime.StringDictionary
import org.scalablytyped.runtime.StObject
import scala.scalajs.js
import scala.scalajs.js.`|`
import scala.scalajs.js.annotation.{JSGlobalScope, JSGlobal, JSImport, JSName, JSBracketAccess}

@JSImport("square-connect", "Order")
@js.native
class Order () extends StObject {
  
  /**
    * Timestamp for when the order reached a terminal [state](#property-state). In RFC 3339 format, e.g., \"2016-09-04T23:59:33.123Z\".
    */
  var closed_at: js.UndefOr[String] = js.native
  
  /**
    * Timestamp for when the order was created. In RFC 3339 format, e.g., "2016-09-04T23:59:33.123Z".
    */
  var created_at: js.UndefOr[String] = js.native
  
  /**
    * The `Customer` ID of the customer associated with the order.
    */
  var customer_id: js.UndefOr[String] = js.native
  
  /**
    * The list of all discounts associated with the order. Discounts can be scoped to either `ORDER` or `LINE_ITEM`.
    * For discounts scoped to `LINE_ITEM`, an `OrderLineItemAppliedDiscount` must be added to each line item that the
    * discount applies to. For discounts with `ORDER` scope, the server will generate an `OrderLineItemAppliedDiscount`
    * for every line item.
    * @note If `LINE_ITEM` scope is set on any discounts in this field, usage of the deprecated `line_items.discounts`
    * field will result in an error. Please use `line_items.applied_discounts` instead.
    */
  var discounts: js.UndefOr[js.Array[OrderLineItemDiscount]] = js.native
  
  /**
    * Details on order fulfillment. Orders can only be created with at most one fulfillment.
    * However, orders returned by the API may contain multiple fulfillments.
    */
  var fulfillments: js.UndefOr[js.Array[OrderFulfillment]] = js.native
  
  /**
    * The order's unique ID.
    */
  var id: js.UndefOr[String] = js.native
  
  /**
    * The line items included in the order.
    */
  var line_items: js.UndefOr[js.Array[OrderLineItem]] = js.native
  
  /**
    * The ID of the merchant location this order is associated with.
    */
  var location_id: js.UndefOr[String] = js.native
  
  /**
    * Application-defined data attached to this order. Metadata fields are intended to store descriptive references
    * or associations with an entity in another system or store brief information about the object.
    * Square does not process this field; it only stores and returns it in relevant API calls. Do not use metadata to
    * store any sensitive information (personally identifiable information, card details, etc.).
    * Keys written by applications must be 60 characters or less and must be in the character set `[a-zA-Z0-9_-]`.
    * Entries may also include metadata generated by Square. These keys are prefixed with a namespace, separated
    * from the key with a ':' character. Values have a max length of 255 characters. An application may have up to
    * 10 entries per metadata field. Entries written by applications are private and can only be read or modified by
    * the same application. See [Metadata](https://developer.squareup.com/docs/build-basics/metadata) for more information.
    */
  var metadata: js.UndefOr[StringDictionary[String]] = js.native
  
  /**
    * Net money amounts (sale money - return money).
    */
  var net_amounts: js.UndefOr[OrderMoneyAmounts] = js.native
  
  /**
    * Pricing options for an order. The options affect how the order's price is calculated.
    * They can be used, for example, to apply automatic price adjustments that are based on pre-configured
    * [pricing rules](https://developer.squareup.com/docs/reference/square/objects/CatalogPricingRule).
    */
  var pricing_options: js.UndefOr[OrderPricingOptions] = js.native
  
  /**
    * A client specified identifier to associate an entity in another system with this order.
    */
  var reference_id: js.UndefOr[String] = js.native
  
  /**
    * The Refunds that are part of this Order.
    */
  var refunds: js.UndefOr[js.Array[Refund]] = js.native
  
  /**
    * Rollup of returned money amounts.
    */
  var return_amounts: js.UndefOr[OrderMoneyAmounts] = js.native
  
  /**
    * Collection of items from sale Orders being returned in this one. Normally part of an Itemized Return or Exchange.
    * There will be exactly one `Return` object per sale Order being referenced.
    */
  var returns: js.UndefOr[js.Array[OrderReturn]] = js.native
  
  /**
    * A set-like list of rewards that have been added to the order.
    */
  var rewards: js.UndefOr[js.Array[OrderReward]] = js.native
  
  /**
    * A positive or negative rounding adjustment to the total of the order, commonly used to apply Cash Rounding when
    * the minimum unit of account is smaller than the lowest physical denomination of currency.
    */
  var rounding_adjustment: js.UndefOr[OrderRoundingAdjustment] = js.native
  
  /**
    * A list of service charges applied to the order.
    */
  var service_charges: js.UndefOr[js.Array[OrderServiceCharge]] = js.native
  
  /**
    * The origination details of the order.
    */
  var source: js.UndefOr[OrderSource] = js.native
  
  /**
    * The current state of the order. `OPEN`,`COMPLETED`,`CANCELED` See [OrderState](#type-orderstate) for possible values.
    */
  var state: js.UndefOr[OrderStateType] = js.native
  
  /**
    * The list of all taxes associated with the order. Taxes can be scoped to either `ORDER` or `LINE_ITEM`.
    * For taxes with `LINE_ITEM` scope, an `OrderLineItemAppliedTax` must be added to each line item that the tax applies to.
    * For taxes with `ORDER` scope, the server will generate an `OrderLineItemAppliedTax` for every line item.
    * On reads, each tax in the list will include the total amount of that tax applied to the order.
    * @note If `LINE_ITEM` scope is set on any taxes in this field, usage of the deprecated `line_items.taxes`
    * field will result in an error. Please use `line_items.applied_taxes` instead.
    */
  var taxes: js.UndefOr[js.Array[OrderLineItemTax]] = js.native
  
  /**
    * The Tenders which were used to pay for the Order.
    */
  var tenders: js.UndefOr[js.Array[Tender]] = js.native
  
  /**
    * The total discount amount of money to collect for the order.
    */
  var total_discount_money: js.UndefOr[Money] = js.native
  
  /**
    * The total amount of money to collect for the order.
    */
  var total_money: js.UndefOr[Money] = js.native
  
  /**
    * The total amount of money collected in service charges for the order.
    * @note `total_service_charge_money` is the sum of `applied_money` fields for each individual service charge.
    *  Therefore, `total_service_charge_money` will only include inclusive tax amounts, not additive tax amounts.
    */
  var total_service_charge_money: js.UndefOr[Money] = js.native
  
  /**
    * The total tax amount of money to collect for the order.
    */
  var total_tax_money: js.UndefOr[Money] = js.native
  
  /**
    * The total tip amount of money to collect for the order.
    */
  var total_tip_money: js.UndefOr[Money] = js.native
  
  /**
    * Timestamp for when the order was last updated. In RFC 3339 format, e.g., "2016-09-04T23:59:33.123Z".
    */
  var updated_at: js.UndefOr[String] = js.native
  
  /**
    * Version number which is incremented each time an update is committed to the order. Orders that were not created
    * through the API will not include a version and thus cannot be updated.
    * [Read more about working with versions](https://developer.squareup.com/docs/orders-api/manage-orders#update-orders).
    */
  var version: js.UndefOr[Double] = js.native
}
