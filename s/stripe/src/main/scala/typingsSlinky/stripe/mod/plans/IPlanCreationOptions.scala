package typingsSlinky.stripe.mod.plans

import typingsSlinky.stripe.mod.IDataOptionsWithMetadata
import typingsSlinky.stripe.mod.IMetadata
import typingsSlinky.stripe.stripeStrings.graduated
import typingsSlinky.stripe.stripeStrings.last_during_period
import typingsSlinky.stripe.stripeStrings.last_ever
import typingsSlinky.stripe.stripeStrings.licensed
import typingsSlinky.stripe.stripeStrings.max
import typingsSlinky.stripe.stripeStrings.metered
import typingsSlinky.stripe.stripeStrings.per_unit
import typingsSlinky.stripe.stripeStrings.sum
import typingsSlinky.stripe.stripeStrings.tiered
import typingsSlinky.stripe.stripeStrings.volume
import scala.scalajs.js
import scala.scalajs.js.`|`
import scala.scalajs.js.annotation.{JSGlobalScope, JSGlobal, JSImport, JSName, JSBracketAccess}

@js.native
trait IPlanCreationOptions extends IDataOptionsWithMetadata {
  
  /**
    * Whether the plan is currently available for new subscriptions. Defaults to `true`.
    */
  var active: js.UndefOr[Boolean] = js.native
  
  /**
    * Specifies a usage aggregation strategy for plans of `usage_type=metered`. Allowed values are `sum` for summing up all usage during a period, `last_during_period` for picking the last usage record reported within a period, `last_ever` for picking the last usage record ever (across period bounds) or `max` which picks the usage record with the maximum reported usage during a period. Defaults to `sum`.
    */
  var aggregate_usage: js.UndefOr[sum | last_during_period | last_ever | max] = js.native
  
  /**
    * A positive integer in cents (or 0 for a free plan) representing how much to charge on a recurring basis.
    */
  var amount: js.UndefOr[Double] = js.native
  
  /**
    * Same as `amount`, but accepts a decimal value with at most 12 decimal places. Only one of `amount` and `amount_decimal` can be set.
    */
  var amount_decimal: js.UndefOr[Double] = js.native
  
  /**
    * Describes how to compute the price per period. Either `per_unit` or `tiered`. `per_unit` indicates that the fixed amount (specified in `amount`) will be charged per unit in `quantity` (for plans with `usage_type=licensed`), or per unit of total usage (for plans with `usage_type=metered`). `tiered` indicates that the unit pricing will be computed using a tiering strategy as defined using the `tiers` and `tiers_mode` attributes.
    */
  var billing_scheme: js.UndefOr[per_unit | tiered] = js.native
  
  /**
    * 3-letter ISO code for currency.
    */
  var currency: String = js.native
  
  /**
    * An identifier randomly generated by Stripe. Used to identify this plan when subscribing a customer. You can optionally override this
    * ID, but the ID must be unique across all plans in your Stripe account. You can, however, use the same plan ID in both live and test
    * modes.
    */
  var id: js.UndefOr[String] = js.native
  
  /**
    * Specifies billing frequency. Either "day", "week", "month" or "year".
    */
  var interval: IntervalUnit = js.native
  
  /**
    * The number of intervals between each subscription billing. For example, interval=month and interval_count=3 bills every 3 months.
    * Maximum of one year interval allowed (1 year, 12 months, or 52 weeks).
    */
  var interval_count: js.UndefOr[Double] = js.native
  
  /**
    * Set of key-value pairs that you can attach to an object. This can be useful for storing additional information about the object in a structured format.
    */
  @JSName("metadata")
  var metadata_IPlanCreationOptions: js.UndefOr[IMetadata] = js.native
  
  /**
    * A brief description of the plan, hidden from customers.
    */
  var nickname: js.UndefOr[String] = js.native
  
  /**
    * The product whose pricing the created plan will represent. This can either be the ID of an existing product, or a dictionary containing
    * fields used to create a service product.
    */
  var product: String | IPlanCreationOptionsProductHash = js.native
  
  /**
    * Each element represents a pricing tier. This parameter requires `billing_scheme` to be set to `tiered`. See also the documentation for `billing_scheme`.
    */
  var tiers: js.UndefOr[js.Array[ITier]] = js.native
  
  /**
    * Defines if the tiering price should be `graduated` or `volume` based. In `volume`-based tiering, the maximum quantity within a period determines the per unit price, in `graduated` tiering pricing can successively change as the quantity grows.
    */
  var tiers_mode: js.UndefOr[graduated | volume] = js.native
  
  /**
    * Apply a transformation to the reported usage or set quantity before computing the billed price. Cannot be combined with `tiers`.
    */
  var transform_usage: js.UndefOr[ITransformUsage] = js.native
  
  /**
    * Default number of trial days when subscribing a customer to this plan using `trial_from_plan=true`.
    */
  var trial_period_days: js.UndefOr[Double] = js.native
  
  /**
    * Configures how the quantity per period should be determined, can be either `metered` or `licensed`. `licensed` will automatically bill the `quantity` set for a plan when adding it to a subscription, `metered` will aggregate the total usage based on usage records. Defaults to `licensed`.
    */
  var usage_type: js.UndefOr[metered | licensed] = js.native
}
object IPlanCreationOptions {
  
  @scala.inline
  def apply(currency: String, interval: IntervalUnit, product: String | IPlanCreationOptionsProductHash): IPlanCreationOptions = {
    val __obj = js.Dynamic.literal(currency = currency.asInstanceOf[js.Any], interval = interval.asInstanceOf[js.Any], product = product.asInstanceOf[js.Any])
    __obj.asInstanceOf[IPlanCreationOptions]
  }
  
  @scala.inline
  implicit class IPlanCreationOptionsOps[Self <: IPlanCreationOptions] (val x: Self) extends AnyVal {
    
    @scala.inline
    def duplicate: Self = (js.Dynamic.global.Object.assign(js.Dynamic.literal(), x)).asInstanceOf[Self]
    
    @scala.inline
    def combineWith[Other <: js.Any](other: Other): Self with Other = (js.Dynamic.global.Object.assign(js.Dynamic.literal(), x, other.asInstanceOf[js.Any])).asInstanceOf[Self with Other]
    
    @scala.inline
    def set(key: String, value: js.Any): Self = {
      x.asInstanceOf[js.Dynamic].updateDynamic(key)(value)
      x
    }
    
    @scala.inline
    def setCurrency(value: String): Self = this.set("currency", value.asInstanceOf[js.Any])
    
    @scala.inline
    def setInterval(value: IntervalUnit): Self = this.set("interval", value.asInstanceOf[js.Any])
    
    @scala.inline
    def setProduct(value: String | IPlanCreationOptionsProductHash): Self = this.set("product", value.asInstanceOf[js.Any])
    
    @scala.inline
    def setActive(value: Boolean): Self = this.set("active", value.asInstanceOf[js.Any])
    
    @scala.inline
    def deleteActive: Self = this.set("active", js.undefined)
    
    @scala.inline
    def setAggregate_usage(value: sum | last_during_period | last_ever | max): Self = this.set("aggregate_usage", value.asInstanceOf[js.Any])
    
    @scala.inline
    def deleteAggregate_usage: Self = this.set("aggregate_usage", js.undefined)
    
    @scala.inline
    def setAmount(value: Double): Self = this.set("amount", value.asInstanceOf[js.Any])
    
    @scala.inline
    def deleteAmount: Self = this.set("amount", js.undefined)
    
    @scala.inline
    def setAmount_decimal(value: Double): Self = this.set("amount_decimal", value.asInstanceOf[js.Any])
    
    @scala.inline
    def deleteAmount_decimal: Self = this.set("amount_decimal", js.undefined)
    
    @scala.inline
    def setBilling_scheme(value: per_unit | tiered): Self = this.set("billing_scheme", value.asInstanceOf[js.Any])
    
    @scala.inline
    def deleteBilling_scheme: Self = this.set("billing_scheme", js.undefined)
    
    @scala.inline
    def setId(value: String): Self = this.set("id", value.asInstanceOf[js.Any])
    
    @scala.inline
    def deleteId: Self = this.set("id", js.undefined)
    
    @scala.inline
    def setInterval_count(value: Double): Self = this.set("interval_count", value.asInstanceOf[js.Any])
    
    @scala.inline
    def deleteInterval_count: Self = this.set("interval_count", js.undefined)
    
    @scala.inline
    def setMetadata(value: IMetadata): Self = this.set("metadata", value.asInstanceOf[js.Any])
    
    @scala.inline
    def deleteMetadata: Self = this.set("metadata", js.undefined)
    
    @scala.inline
    def setNickname(value: String): Self = this.set("nickname", value.asInstanceOf[js.Any])
    
    @scala.inline
    def deleteNickname: Self = this.set("nickname", js.undefined)
    
    @scala.inline
    def setTiersVarargs(value: ITier*): Self = this.set("tiers", js.Array(value :_*))
    
    @scala.inline
    def setTiers(value: js.Array[ITier]): Self = this.set("tiers", value.asInstanceOf[js.Any])
    
    @scala.inline
    def deleteTiers: Self = this.set("tiers", js.undefined)
    
    @scala.inline
    def setTiers_mode(value: graduated | volume): Self = this.set("tiers_mode", value.asInstanceOf[js.Any])
    
    @scala.inline
    def deleteTiers_mode: Self = this.set("tiers_mode", js.undefined)
    
    @scala.inline
    def setTransform_usage(value: ITransformUsage): Self = this.set("transform_usage", value.asInstanceOf[js.Any])
    
    @scala.inline
    def deleteTransform_usage: Self = this.set("transform_usage", js.undefined)
    
    @scala.inline
    def setTrial_period_days(value: Double): Self = this.set("trial_period_days", value.asInstanceOf[js.Any])
    
    @scala.inline
    def deleteTrial_period_days: Self = this.set("trial_period_days", js.undefined)
    
    @scala.inline
    def setUsage_type(value: metered | licensed): Self = this.set("usage_type", value.asInstanceOf[js.Any])
    
    @scala.inline
    def deleteUsage_type: Self = this.set("usage_type", js.undefined)
  }
}
