package typingsSlinky.awsSdk.forecastqueryserviceMod

import typingsSlinky.awsSdk.configMod.ConfigBase
import typingsSlinky.awsSdk.errorMod.AWSError
import typingsSlinky.awsSdk.requestMod.Request
import typingsSlinky.awsSdk.serviceMod.Service
import scala.scalajs.js
import scala.scalajs.js.`|`
import scala.scalajs.js.annotation.{JSGlobalScope, JSGlobal, JSImport, JSName, JSBracketAccess}

@js.native
trait ForecastQueryService extends Service {
  
  @JSName("config")
  var config_ForecastQueryService: ConfigBase with ClientConfiguration = js.native
  
  /**
    * Retrieves a forecast for a single item, filtered by the supplied criteria. The criteria is a key-value pair. The key is either item_id (or the equivalent non-timestamp, non-target field) from the TARGET_TIME_SERIES dataset, or one of the forecast dimensions specified as part of the FeaturizationConfig object. By default, QueryForecast returns the complete date range for the filtered forecast. You can request a specific date range. To get the full forecast, use the CreateForecastExportJob operation.  The forecasts generated by Amazon Forecast are in the same timezone as the dataset that was used to create the predictor. 
    */
  def queryForecast(): Request[QueryForecastResponse, AWSError] = js.native
  def queryForecast(callback: js.Function2[/* err */ AWSError, /* data */ QueryForecastResponse, Unit]): Request[QueryForecastResponse, AWSError] = js.native
  /**
    * Retrieves a forecast for a single item, filtered by the supplied criteria. The criteria is a key-value pair. The key is either item_id (or the equivalent non-timestamp, non-target field) from the TARGET_TIME_SERIES dataset, or one of the forecast dimensions specified as part of the FeaturizationConfig object. By default, QueryForecast returns the complete date range for the filtered forecast. You can request a specific date range. To get the full forecast, use the CreateForecastExportJob operation.  The forecasts generated by Amazon Forecast are in the same timezone as the dataset that was used to create the predictor. 
    */
  def queryForecast(params: QueryForecastRequest): Request[QueryForecastResponse, AWSError] = js.native
  def queryForecast(
    params: QueryForecastRequest,
    callback: js.Function2[/* err */ AWSError, /* data */ QueryForecastResponse, Unit]
  ): Request[QueryForecastResponse, AWSError] = js.native
}
