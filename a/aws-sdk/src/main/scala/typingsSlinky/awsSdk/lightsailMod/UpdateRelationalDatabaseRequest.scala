package typingsSlinky.awsSdk.lightsailMod

import scala.scalajs.js
import scala.scalajs.js.`|`
import scala.scalajs.js.annotation.{JSGlobalScope, JSGlobal, JSImport, JSName, JSBracketAccess}

@js.native
trait UpdateRelationalDatabaseRequest extends js.Object {
  
  /**
    * When true, applies changes immediately. When false, applies changes during the preferred maintenance window. Some changes may cause an outage. Default: false 
    */
  var applyImmediately: js.UndefOr[Boolean] = js.native
  
  /**
    * Indicates the certificate that needs to be associated with the database.
    */
  var caCertificateIdentifier: js.UndefOr[String] = js.native
  
  /**
    * When true, disables automated backup retention for your database. Disabling backup retention deletes all automated database backups. Before disabling this, you may want to create a snapshot of your database using the create relational database snapshot operation. Updates are applied during the next maintenance window because this can result in an outage.
    */
  var disableBackupRetention: js.UndefOr[Boolean] = js.native
  
  /**
    * When true, enables automated backup retention for your database. Updates are applied during the next maintenance window because this can result in an outage.
    */
  var enableBackupRetention: js.UndefOr[Boolean] = js.native
  
  /**
    * The password for the master user of your database. The password can include any printable ASCII character except "/", """, or "@". Constraints: Must contain 8 to 41 characters.
    */
  var masterUserPassword: js.UndefOr[SensitiveString] = js.native
  
  /**
    * The daily time range during which automated backups are created for your database if automated backups are enabled. Constraints:   Must be in the hh24:mi-hh24:mi format. Example: 16:00-16:30    Specified in Coordinated Universal Time (UTC).   Must not conflict with the preferred maintenance window.   Must be at least 30 minutes.  
    */
  var preferredBackupWindow: js.UndefOr[String] = js.native
  
  /**
    * The weekly time range during which system maintenance can occur on your database. The default is a 30-minute window selected at random from an 8-hour block of time for each AWS Region, occurring on a random day of the week. Constraints:   Must be in the ddd:hh24:mi-ddd:hh24:mi format.   Valid days: Mon, Tue, Wed, Thu, Fri, Sat, Sun.   Must be at least 30 minutes.   Specified in Coordinated Universal Time (UTC).   Example: Tue:17:00-Tue:17:30   
    */
  var preferredMaintenanceWindow: js.UndefOr[String] = js.native
  
  /**
    * Specifies the accessibility options for your database. A value of true specifies a database that is available to resources outside of your Lightsail account. A value of false specifies a database that is available only to your Lightsail resources in the same region as your database.
    */
  var publiclyAccessible: js.UndefOr[Boolean] = js.native
  
  /**
    * The name of your database to update.
    */
  var relationalDatabaseName: ResourceName = js.native
  
  /**
    * When true, the master user password is changed to a new strong password generated by Lightsail. Use the get relational database master user password operation to get the new password.
    */
  var rotateMasterUserPassword: js.UndefOr[Boolean] = js.native
}
object UpdateRelationalDatabaseRequest {
  
  @scala.inline
  def apply(relationalDatabaseName: ResourceName): UpdateRelationalDatabaseRequest = {
    val __obj = js.Dynamic.literal(relationalDatabaseName = relationalDatabaseName.asInstanceOf[js.Any])
    __obj.asInstanceOf[UpdateRelationalDatabaseRequest]
  }
  
  @scala.inline
  implicit class UpdateRelationalDatabaseRequestOps[Self <: UpdateRelationalDatabaseRequest] (val x: Self) extends AnyVal {
    
    @scala.inline
    def duplicate: Self = (js.Dynamic.global.Object.assign(js.Dynamic.literal(), x)).asInstanceOf[Self]
    
    @scala.inline
    def combineWith[Other <: js.Any](other: Other): Self with Other = (js.Dynamic.global.Object.assign(js.Dynamic.literal(), x, other.asInstanceOf[js.Any])).asInstanceOf[Self with Other]
    
    @scala.inline
    def set(key: String, value: js.Any): Self = {
      x.asInstanceOf[js.Dynamic].updateDynamic(key)(value)
      x
    }
    
    @scala.inline
    def setRelationalDatabaseName(value: ResourceName): Self = this.set("relationalDatabaseName", value.asInstanceOf[js.Any])
    
    @scala.inline
    def setApplyImmediately(value: Boolean): Self = this.set("applyImmediately", value.asInstanceOf[js.Any])
    
    @scala.inline
    def deleteApplyImmediately: Self = this.set("applyImmediately", js.undefined)
    
    @scala.inline
    def setCaCertificateIdentifier(value: String): Self = this.set("caCertificateIdentifier", value.asInstanceOf[js.Any])
    
    @scala.inline
    def deleteCaCertificateIdentifier: Self = this.set("caCertificateIdentifier", js.undefined)
    
    @scala.inline
    def setDisableBackupRetention(value: Boolean): Self = this.set("disableBackupRetention", value.asInstanceOf[js.Any])
    
    @scala.inline
    def deleteDisableBackupRetention: Self = this.set("disableBackupRetention", js.undefined)
    
    @scala.inline
    def setEnableBackupRetention(value: Boolean): Self = this.set("enableBackupRetention", value.asInstanceOf[js.Any])
    
    @scala.inline
    def deleteEnableBackupRetention: Self = this.set("enableBackupRetention", js.undefined)
    
    @scala.inline
    def setMasterUserPassword(value: SensitiveString): Self = this.set("masterUserPassword", value.asInstanceOf[js.Any])
    
    @scala.inline
    def deleteMasterUserPassword: Self = this.set("masterUserPassword", js.undefined)
    
    @scala.inline
    def setPreferredBackupWindow(value: String): Self = this.set("preferredBackupWindow", value.asInstanceOf[js.Any])
    
    @scala.inline
    def deletePreferredBackupWindow: Self = this.set("preferredBackupWindow", js.undefined)
    
    @scala.inline
    def setPreferredMaintenanceWindow(value: String): Self = this.set("preferredMaintenanceWindow", value.asInstanceOf[js.Any])
    
    @scala.inline
    def deletePreferredMaintenanceWindow: Self = this.set("preferredMaintenanceWindow", js.undefined)
    
    @scala.inline
    def setPubliclyAccessible(value: Boolean): Self = this.set("publiclyAccessible", value.asInstanceOf[js.Any])
    
    @scala.inline
    def deletePubliclyAccessible: Self = this.set("publiclyAccessible", js.undefined)
    
    @scala.inline
    def setRotateMasterUserPassword(value: Boolean): Self = this.set("rotateMasterUserPassword", value.asInstanceOf[js.Any])
    
    @scala.inline
    def deleteRotateMasterUserPassword: Self = this.set("rotateMasterUserPassword", js.undefined)
  }
}
