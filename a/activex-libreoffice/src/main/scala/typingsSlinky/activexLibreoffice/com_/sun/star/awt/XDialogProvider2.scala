package typingsSlinky.activexLibreoffice.com_.sun.star.awt

import typingsSlinky.activexLibreoffice.LibreOffice.SeqEquiv
import typingsSlinky.activexLibreoffice.`type`
import typingsSlinky.activexLibreoffice.com_.sun.star.beans.NamedValue
import typingsSlinky.activexLibreoffice.com_.sun.star.uno.XInterface
import scala.scalajs.js
import scala.scalajs.js.`|`
import scala.scalajs.js.annotation.{JSGlobalScope, JSGlobal, JSImport, JSName, JSBracketAccess}

/** provides dialogs implementing the {@link com.sun.star.awt.XDialog} interface. */
@js.native
trait XDialogProvider2 extends XDialogProvider {
  
  /**
    * creates a dialog for the given URL, accepting additional creation parameters
    *
    * The arguments accepted so far are **ParentWindow** - must be a component supporting the {@link XWindowPeer} interface, or a component supporting the
    * {@link XControl} interface, so an `XWindowPeer` can be obtained from it. The given window will be used as parent window for the to-be-created
    * dialog.**EventHandler** - specifies a component handling events in the dialog. See {@link createDialogWithHandler()} for a detailed specification of
    * dialog event handling.
    */
  def createDialogWithArguments(URL: String, Arguments: SeqEquiv[NamedValue]): XDialog = js.native
  
  /**
    * creates a dialog for the given URL accepting an Interface used to handle dialog events.
    * @param URL is the URL.
    * @param xHandler is the interface that will be called to handle the Events that are generated by the dialog (and all controls placed on it) and bound to
    * @returns a dialog implementing the {@link com.sun.star.awt.XDialog} interface.
    * @see com.sun.star.awt.XDialogEventHandler
    * @throws com::sun::star::lang::IllegalArgumentException if no dialog for the given URL is found or if the URL is invalid or xHandler is null.
    */
  def createDialogWithHandler(URL: String, xHandler: XInterface): XDialog = js.native
}
object XDialogProvider2 {
  
  @scala.inline
  def apply(
    acquire: () => Unit,
    createDialog: String => XDialog,
    createDialogWithArguments: (String, SeqEquiv[NamedValue]) => XDialog,
    createDialogWithHandler: (String, XInterface) => XDialog,
    queryInterface: `type` => js.Any,
    release: () => Unit
  ): XDialogProvider2 = {
    val __obj = js.Dynamic.literal(acquire = js.Any.fromFunction0(acquire), createDialog = js.Any.fromFunction1(createDialog), createDialogWithArguments = js.Any.fromFunction2(createDialogWithArguments), createDialogWithHandler = js.Any.fromFunction2(createDialogWithHandler), queryInterface = js.Any.fromFunction1(queryInterface), release = js.Any.fromFunction0(release))
    __obj.asInstanceOf[XDialogProvider2]
  }
  
  @scala.inline
  implicit class XDialogProvider2Ops[Self <: XDialogProvider2] (val x: Self) extends AnyVal {
    
    @scala.inline
    def duplicate: Self = (js.Dynamic.global.Object.assign(js.Dynamic.literal(), x)).asInstanceOf[Self]
    
    @scala.inline
    def combineWith[Other <: js.Any](other: Other): Self with Other = (js.Dynamic.global.Object.assign(js.Dynamic.literal(), x, other.asInstanceOf[js.Any])).asInstanceOf[Self with Other]
    
    @scala.inline
    def set(key: String, value: js.Any): Self = {
      x.asInstanceOf[js.Dynamic].updateDynamic(key)(value)
      x
    }
    
    @scala.inline
    def setCreateDialogWithArguments(value: (String, SeqEquiv[NamedValue]) => XDialog): Self = this.set("createDialogWithArguments", js.Any.fromFunction2(value))
    
    @scala.inline
    def setCreateDialogWithHandler(value: (String, XInterface) => XDialog): Self = this.set("createDialogWithHandler", js.Any.fromFunction2(value))
  }
}
