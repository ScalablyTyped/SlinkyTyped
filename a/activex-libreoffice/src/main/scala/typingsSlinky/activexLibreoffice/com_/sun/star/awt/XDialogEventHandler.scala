package typingsSlinky.activexLibreoffice.com_.sun.star.awt

import typingsSlinky.activexLibreoffice.`type`
import typingsSlinky.activexLibreoffice.com_.sun.star.uno.XInterface
import typingsSlinky.std.SafeArray
import scala.scalajs.js
import scala.scalajs.js.`|`
import scala.scalajs.js.annotation.{JSGlobalScope, JSGlobal, JSImport, JSName, JSBracketAccess}

/** Handles events fired by dialogs represented by a {@link com.sun.star.awt.XDialog} interface. */
@js.native
trait XDialogEventHandler extends XInterface {
  
  /**
    * returns a sequence of supported method names
    * @returns all method names that will be accepted in calls to callHandlerMethod.
    */
  val SupportedMethodNames: SafeArray[String] = js.native
  
  /**
    * Handles an event generated by a dialog.
    *
    * The implementation must be aware that the EventObject argument contains types which it is not prepared to handle. Similarly this applies for the
    * MethodName argument. In this case the method should simply return false.
    * @param xDialog the dialog instance that generated the event. This is the same dialog instance that was returned by the {@link com.sun.star.awt.XDialogPr
    * @param EventObject an object describing the event which occurred in the dialog or anything else that provides additional information for the event. If t
    * @param MethodName the name of the function which is to be called.
    * @returns true if the event was handled, otherwise false.
    * @throws com::sun::star::lang::WrappedTargetException if the implementation of the method, which is determined by the argument MethodName, throws an excep
    */
  def callHandlerMethod(xDialog: XDialog, EventObject: js.Any, MethodName: String): Boolean = js.native
  
  /**
    * returns a sequence of supported method names
    * @returns all method names that will be accepted in calls to callHandlerMethod.
    */
  def getSupportedMethodNames(): SafeArray[String] = js.native
}
object XDialogEventHandler {
  
  @scala.inline
  def apply(
    SupportedMethodNames: SafeArray[String],
    acquire: () => Unit,
    callHandlerMethod: (XDialog, js.Any, String) => Boolean,
    getSupportedMethodNames: () => SafeArray[String],
    queryInterface: `type` => js.Any,
    release: () => Unit
  ): XDialogEventHandler = {
    val __obj = js.Dynamic.literal(SupportedMethodNames = SupportedMethodNames.asInstanceOf[js.Any], acquire = js.Any.fromFunction0(acquire), callHandlerMethod = js.Any.fromFunction3(callHandlerMethod), getSupportedMethodNames = js.Any.fromFunction0(getSupportedMethodNames), queryInterface = js.Any.fromFunction1(queryInterface), release = js.Any.fromFunction0(release))
    __obj.asInstanceOf[XDialogEventHandler]
  }
  
  @scala.inline
  implicit class XDialogEventHandlerOps[Self <: XDialogEventHandler] (val x: Self) extends AnyVal {
    
    @scala.inline
    def duplicate: Self = (js.Dynamic.global.Object.assign(js.Dynamic.literal(), x)).asInstanceOf[Self]
    
    @scala.inline
    def combineWith[Other <: js.Any](other: Other): Self with Other = (js.Dynamic.global.Object.assign(js.Dynamic.literal(), x, other.asInstanceOf[js.Any])).asInstanceOf[Self with Other]
    
    @scala.inline
    def set(key: String, value: js.Any): Self = {
      x.asInstanceOf[js.Dynamic].updateDynamic(key)(value)
      x
    }
    
    @scala.inline
    def setSupportedMethodNames(value: SafeArray[String]): Self = this.set("SupportedMethodNames", value.asInstanceOf[js.Any])
    
    @scala.inline
    def setCallHandlerMethod(value: (XDialog, js.Any, String) => Boolean): Self = this.set("callHandlerMethod", js.Any.fromFunction3(value))
    
    @scala.inline
    def setGetSupportedMethodNames(value: () => SafeArray[String]): Self = this.set("getSupportedMethodNames", js.Any.fromFunction0(value))
  }
}
