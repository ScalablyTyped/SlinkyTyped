package typingsSlinky.activexLibreoffice.com_.sun.star.sdbc

import typingsSlinky.activexLibreoffice.`type`
import typingsSlinky.activexLibreoffice.com_.sun.star.uno.XInterface
import scala.scalajs.js
import scala.scalajs.js.`|`
import scala.scalajs.js.annotation.{JSGlobalScope, JSGlobal, JSImport, JSName, JSBracketAccess}

/**
  * is used for executing a static SQL statement and obtaining the results produced by it.
  *
  * Only one {@link ResultSet} per {@link Statement} can be open at any point in time; therefore, if the reading of one {@link ResultSet} is interleaved
  * with the reading of another, each must have been generated by different Statements. All statement `execute` methods implicitly close a statement's
  * current {@link ResultSet} if an open one exists.
  */
@js.native
trait XStatement extends XInterface {
  
  /**
    * returns the {@link com.sun.star.sdbc.Connection} object that produced this `Statement` object.
    * @returns the connection that produced this statement
    * @throws SQLException if a database access error occurs.
    */
  val Connection: XConnection = js.native
  
  /**
    * executes a SQL statement that may return multiple results.
    *
    * Under some (uncommon) situations a single SQL statement may return multiple result sets and/or update counts. Normally you can ignore this unless you
    * are (1) executing a stored procedure that you know may return multiple results or (2) you are dynamically executing an unknown SQL string. The
    * navigation through multiple results is covered by {@link com.sun.star.sdbc.XMultipleResults} .
    *
    * The `execute` method executes a SQL statement and indicates the form of the first result. You can then use {@link
    * com.sun.star.sdbc.XMultipleResults.getResultSet()} or {@link com.sun.star.sdbc.XMultipleResults.getUpdateCount()} to retrieve the result, and {@link
    * com.sun.star.sdbc.XMultipleResults.getMoreResults()} to move to any subsequent result(s).
    * @param sql any SQL statement
    * @returns `TRUE` if the next result is a {@link ResultSet} ; `FALSE` if it is an update count or there are no more results
    * @throws SQLException if a database access error occurs.
    */
  def execute(sql: String): Boolean = js.native
  
  /**
    * executes a SQL statement that returns a single {@link ResultSet} .
    * @param sql the SQL statement which should be executed
    * @returns a {@link ResultSet} that contains the data produced by the query; never `NULL`
    * @throws SQLException if a database access error occurs.
    */
  def executeQuery(sql: String): XResultSet = js.native
  
  /**
    * executes an SQL INSERT, UPDATE, or DELETE statement. In addition, SQL statements that return nothing, such as SQL DDL statements, can be executed.
    * @param sql a SQL INSERT, UPDATE or DELETE statement or a SQL statement that returns nothing
    * @returns either the row count for INSERT, UPDATE or DELETE or 0 for SQL statements that return nothing
    * @throws SQLException if a database access error occurs.
    */
  def executeUpdate(sql: String): Double = js.native
  
  /**
    * returns the {@link com.sun.star.sdbc.Connection} object that produced this `Statement` object.
    * @returns the connection that produced this statement
    * @throws SQLException if a database access error occurs.
    */
  def getConnection(): XConnection = js.native
}
object XStatement {
  
  @scala.inline
  def apply(
    Connection: XConnection,
    acquire: () => Unit,
    execute: String => Boolean,
    executeQuery: String => XResultSet,
    executeUpdate: String => Double,
    getConnection: () => XConnection,
    queryInterface: `type` => js.Any,
    release: () => Unit
  ): XStatement = {
    val __obj = js.Dynamic.literal(Connection = Connection.asInstanceOf[js.Any], acquire = js.Any.fromFunction0(acquire), execute = js.Any.fromFunction1(execute), executeQuery = js.Any.fromFunction1(executeQuery), executeUpdate = js.Any.fromFunction1(executeUpdate), getConnection = js.Any.fromFunction0(getConnection), queryInterface = js.Any.fromFunction1(queryInterface), release = js.Any.fromFunction0(release))
    __obj.asInstanceOf[XStatement]
  }
  
  @scala.inline
  implicit class XStatementOps[Self <: XStatement] (val x: Self) extends AnyVal {
    
    @scala.inline
    def duplicate: Self = (js.Dynamic.global.Object.assign(js.Dynamic.literal(), x)).asInstanceOf[Self]
    
    @scala.inline
    def combineWith[Other <: js.Any](other: Other): Self with Other = (js.Dynamic.global.Object.assign(js.Dynamic.literal(), x, other.asInstanceOf[js.Any])).asInstanceOf[Self with Other]
    
    @scala.inline
    def set(key: String, value: js.Any): Self = {
      x.asInstanceOf[js.Dynamic].updateDynamic(key)(value)
      x
    }
    
    @scala.inline
    def setConnection(value: XConnection): Self = this.set("Connection", value.asInstanceOf[js.Any])
    
    @scala.inline
    def setExecute(value: String => Boolean): Self = this.set("execute", js.Any.fromFunction1(value))
    
    @scala.inline
    def setExecuteQuery(value: String => XResultSet): Self = this.set("executeQuery", js.Any.fromFunction1(value))
    
    @scala.inline
    def setExecuteUpdate(value: String => Double): Self = this.set("executeUpdate", js.Any.fromFunction1(value))
    
    @scala.inline
    def setGetConnection(value: () => XConnection): Self = this.set("getConnection", js.Any.fromFunction0(value))
  }
}
