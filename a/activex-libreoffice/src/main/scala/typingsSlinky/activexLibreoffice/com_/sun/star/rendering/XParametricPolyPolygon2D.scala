package typingsSlinky.activexLibreoffice.com_.sun.star.rendering

import typingsSlinky.activexLibreoffice.`type`
import typingsSlinky.activexLibreoffice.com_.sun.star.geometry.RealPoint2D
import typingsSlinky.activexLibreoffice.com_.sun.star.uno.XInterface
import typingsSlinky.std.SafeArray
import scala.scalajs.js
import scala.scalajs.js.`|`
import scala.scalajs.js.annotation.{JSGlobalScope, JSGlobal, JSImport, JSName, JSBracketAccess}

/**
  * Interface to a dynamic poly-polygon generator, that generates poly-polygons depending on a given parameter value.
  *
  * The returned poly-polygon should normally be contained in the [0,1]x[0,1] rectangle. At least that is the dimension expected at other places. e.g.
  * {@link Texture} .
  */
@js.native
trait XParametricPolyPolygon2D extends XInterface {
  
  /**
    * Query the color space employed by this object
    * @returns the color space the colors generated by this object are to be interpreted in.
    */
  val ColorSpace: XColorSpace = js.native
  
  /**
    * Query the color value for the polygonal area at the specified parameter value.
    * @param t Parameter value in the range [0,1]. During painting, this range is swept through starting from 0.
    */
  def getColor(t: Double): SafeArray[ColorComponent] = js.native
  
  /**
    * Query the color space employed by this object
    * @returns the color space the colors generated by this object are to be interpreted in.
    */
  def getColorSpace(): XColorSpace = js.native
  
  /**
    * Query the polygonal outline at the specified value.
    *
    * The returned outline should be clipped to the [0,1]x[0,1] rectangle.
    * @param t Parameter value in the range [0,1]. During painting, this range is swept through starting from 0. When using such a parametric poly-polygon for
    */
  def getOutline(t: Double): XPolyPolygon2D = js.native
  
  /**
    * Query the color for a dedicated point in the plane.
    * @param point The permissible parameter range for point is [0,1]x[0,1]
    */
  def getPointColor(point: RealPoint2D): SafeArray[ColorComponent] = js.native
}
object XParametricPolyPolygon2D {
  
  @scala.inline
  def apply(
    ColorSpace: XColorSpace,
    acquire: () => Unit,
    getColor: Double => SafeArray[ColorComponent],
    getColorSpace: () => XColorSpace,
    getOutline: Double => XPolyPolygon2D,
    getPointColor: RealPoint2D => SafeArray[ColorComponent],
    queryInterface: `type` => js.Any,
    release: () => Unit
  ): XParametricPolyPolygon2D = {
    val __obj = js.Dynamic.literal(ColorSpace = ColorSpace.asInstanceOf[js.Any], acquire = js.Any.fromFunction0(acquire), getColor = js.Any.fromFunction1(getColor), getColorSpace = js.Any.fromFunction0(getColorSpace), getOutline = js.Any.fromFunction1(getOutline), getPointColor = js.Any.fromFunction1(getPointColor), queryInterface = js.Any.fromFunction1(queryInterface), release = js.Any.fromFunction0(release))
    __obj.asInstanceOf[XParametricPolyPolygon2D]
  }
  
  @scala.inline
  implicit class XParametricPolyPolygon2DOps[Self <: XParametricPolyPolygon2D] (val x: Self) extends AnyVal {
    
    @scala.inline
    def duplicate: Self = (js.Dynamic.global.Object.assign(js.Dynamic.literal(), x)).asInstanceOf[Self]
    
    @scala.inline
    def combineWith[Other <: js.Any](other: Other): Self with Other = (js.Dynamic.global.Object.assign(js.Dynamic.literal(), x, other.asInstanceOf[js.Any])).asInstanceOf[Self with Other]
    
    @scala.inline
    def set(key: String, value: js.Any): Self = {
      x.asInstanceOf[js.Dynamic].updateDynamic(key)(value)
      x
    }
    
    @scala.inline
    def setColorSpace(value: XColorSpace): Self = this.set("ColorSpace", value.asInstanceOf[js.Any])
    
    @scala.inline
    def setGetColor(value: Double => SafeArray[ColorComponent]): Self = this.set("getColor", js.Any.fromFunction1(value))
    
    @scala.inline
    def setGetColorSpace(value: () => XColorSpace): Self = this.set("getColorSpace", js.Any.fromFunction0(value))
    
    @scala.inline
    def setGetOutline(value: Double => XPolyPolygon2D): Self = this.set("getOutline", js.Any.fromFunction1(value))
    
    @scala.inline
    def setGetPointColor(value: RealPoint2D => SafeArray[ColorComponent]): Self = this.set("getPointColor", js.Any.fromFunction1(value))
  }
}
