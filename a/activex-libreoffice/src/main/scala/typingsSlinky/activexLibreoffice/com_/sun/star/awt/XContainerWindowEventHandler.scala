package typingsSlinky.activexLibreoffice.com_.sun.star.awt

import typingsSlinky.activexLibreoffice.`type`
import typingsSlinky.activexLibreoffice.com_.sun.star.uno.XInterface
import typingsSlinky.std.SafeArray
import org.scalablytyped.runtime.StObject
import scala.scalajs.js
import scala.scalajs.js.`|`
import scala.scalajs.js.annotation.{JSGlobalScope, JSGlobal, JSImport, JSName, JSBracketAccess}

/** Handles events fired by windows represented by a {@link com.sun.star.awt.XWindow} interface. */
@js.native
trait XContainerWindowEventHandler extends XInterface {
  
  /**
    * returns a sequence of supported method names
    * @returns all method names that will be accepted in calls to callHandlerMethod.
    */
  val SupportedMethodNames: SafeArray[String] = js.native
  
  /**
    * Handles an event generated by a window.
    *
    * The implementation must be aware that the EventObject argument contains types which it is not prepared to handle. Similarly this applies for the
    * MethodName argument. In this case the method should simply return false.
    * @param xWindow the window instance that generated the event. If used in the scope of {@link com.sun.star.awt.XContainerWindowProvider} this is the same
    * @param EventObject an object describing the event which occurred in the window or anything else that provides additional information for the event. If t
    * @param MethodName the name of the function which is to be called.
    * @returns true if the event was handled, otherwise false.
    * @throws com::sun::star::lang::WrappedTargetException if the implementation of the method, which is determined by the argument MethodName, throws an excep
    */
  def callHandlerMethod(xWindow: XWindow, EventObject: js.Any, MethodName: String): Boolean = js.native
  
  /**
    * returns a sequence of supported method names
    * @returns all method names that will be accepted in calls to callHandlerMethod.
    */
  def getSupportedMethodNames(): SafeArray[String] = js.native
}
object XContainerWindowEventHandler {
  
  @scala.inline
  def apply(
    SupportedMethodNames: SafeArray[String],
    acquire: () => Unit,
    callHandlerMethod: (XWindow, js.Any, String) => Boolean,
    getSupportedMethodNames: () => SafeArray[String],
    queryInterface: `type` => js.Any,
    release: () => Unit
  ): XContainerWindowEventHandler = {
    val __obj = js.Dynamic.literal(SupportedMethodNames = SupportedMethodNames.asInstanceOf[js.Any], acquire = js.Any.fromFunction0(acquire), callHandlerMethod = js.Any.fromFunction3(callHandlerMethod), getSupportedMethodNames = js.Any.fromFunction0(getSupportedMethodNames), queryInterface = js.Any.fromFunction1(queryInterface), release = js.Any.fromFunction0(release))
    __obj.asInstanceOf[XContainerWindowEventHandler]
  }
  
  @scala.inline
  implicit class XContainerWindowEventHandlerMutableBuilder[Self <: XContainerWindowEventHandler] (val x: Self) extends AnyVal {
    
    @scala.inline
    def setCallHandlerMethod(value: (XWindow, js.Any, String) => Boolean): Self = StObject.set(x, "callHandlerMethod", js.Any.fromFunction3(value))
    
    @scala.inline
    def setGetSupportedMethodNames(value: () => SafeArray[String]): Self = StObject.set(x, "getSupportedMethodNames", js.Any.fromFunction0(value))
    
    @scala.inline
    def setSupportedMethodNames(value: SafeArray[String]): Self = StObject.set(x, "SupportedMethodNames", value.asInstanceOf[js.Any])
  }
}
