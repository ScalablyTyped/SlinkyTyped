package typingsSlinky.detox.mod.global.Detox_

import typingsSlinky.detox.anon.SourceApp
import typingsSlinky.detox.detoxStrings.android
import typingsSlinky.detox.detoxStrings.ios
import scala.scalajs.js
import scala.scalajs.js.`|`
import scala.scalajs.js.annotation.{JSGlobalScope, JSGlobal, JSImport, JSName, JSBracketAccess}

@js.native
trait Device extends js.Object {
  
  /**
    * Clears the simulator keychain (iOS Only)
    */
  def clearKeychain(): js.Promise[Unit] = js.native
  
  /**
    * Disable EarlGrey's synchronization mechanism (enabled by default) This is being reset on every new instance of the app.
    * @example
    * await device.disableSynchronization();
    */
  def disableSynchronization(): js.Promise[Unit] = js.native
  
  /**
    * Enable EarlGrey's synchronization mechanism (enabled by default). This is being reset on every new instance of the app.
    * @example
    * await device.enableSynchronization();
    */
  def enableSynchronization(): js.Promise[Unit] = js.native
  
  /**
    * Returns the current device, ios or android.
    * @example
    * if (device.getPlatform() === 'ios') {
    *     await expect(loopSwitch).toHaveValue('1');
    * }
    */
  def getPlatform(): ios | android = js.native
  
  /**
    * (Android Only)
    * Exposes UiAutomator's UiDevice API (https://developer.android.com/reference/android/support/test/uiautomator/UiDevice).
    * This is not a part of the official Detox API,
    * it may break and change whenever an update to UiDevice or UiAutomator gradle dependencies ('androidx.test.uiautomator:uiautomator') is introduced.
    * UIDevice's autogenerated code reference: https://github.com/wix/Detox/blob/master/detox/src/android/espressoapi/UIDevice.js
    */
  def getUiDevice(): js.Promise[Unit] = js.native
  
  /**
    * Holds the environment-unique ID of the device - namely, the adb ID on Android (e.g. emulator-5554) and the Mac-global simulator UDID on iOS,
    * as used by simctl (e.g. AAAAAAAA-BBBB-CCCC-DDDD-EEEEEEEEEEEE).
    *
    * The value will be undefined until the device is properly prepared (i.e. in detox.init())
    */
  var id: String = js.native
  
  /**
    * By default, installApp() with no params will install the app file defined in the current configuration.
    * To install another app, specify its path
    * @param path
    * @example await device.installApp('path/to/other/app');
    */
  def installApp(): js.Promise[Unit] = js.native
  def installApp(path: js.Any): js.Promise[Unit] = js.native
  
  /**
    * Launch the app
    * @param config
    * @example // Terminate the app and launch it again. If set to false, the simulator will try to bring app from background,
    * // if the app isn't running, it will launch a new instance. default is false
    * await device.launchApp({newInstance: true});
    * // Grant or deny runtime permissions for your application.
    * await device.launchApp({permissions: {calendar: 'YES'}});
    * // Mock opening the app from URL to test your app's deep link handling mechanism.
    * await device.launchApp({url: url});
    */
  def launchApp(config: DeviceLanchAppConfig): js.Promise[Unit] = js.native
  
  /**
    * Simulates the success of a face match via FaceID (iOS Only)
    */
  def matchFace(): js.Promise[Unit] = js.native
  
  /**
    * Simulates the success of a finger match via TouchID (iOS Only)
    */
  def matchFinger(): js.Promise[Unit] = js.native
  
  /**
    * Holds a descriptive name of the device. Example: emulator-5554 (Pixel_API_26)
    * The value will be undefined until the device is properly prepared (i.e. in detox.init()).
    */
  var name: String = js.native
  
  /**
    * Mock opening the app from URL. sourceApp is an optional parameter to specify source application bundle id.
    * @param url
    */
  def openURL(url: SourceApp): js.Promise[Unit] = js.native
  
  /**
    * Simulate press back button (Android Only)
    * @example
    * await device.pressBack();
    */
  def pressBack(): js.Promise[Unit] = js.native
  
  /**
    * If this is a React Native app, reload the React Native JS bundle. This action is much faster than device.launchApp(), and can be used if you just need to reset your React Native logic.
    * @example await device.reloadReactNative()
    */
  def reloadReactNative(): js.Promise[Unit] = js.native
  
  /**
    * Resets the Simulator to clean state (like the Simulator > Reset Content and Settings... menu item), especially removing previously set permissions.
    * @example
    * await device.resetContentAndSettings();
    */
  def resetContentAndSettings(): js.Promise[Unit] = js.native
  
  /**
    * Send application to background by bringing com.apple.springboard to the foreground.
    * Combining sendToHome() with launchApp({newInstance: false}) will simulate app coming back from background.
    * @example await device.sendToHome();
    * await device.launchApp({newInstance: false});
    */
  def sendToHome(): js.Promise[Unit] = js.native
  
  /**
    * Mock handling of received user activity when app is in foreground.
    * @param params
    */
  def sendUserActivity(params: js.Any*): js.Promise[Unit] = js.native
  
  /**
    * Mock handling of received user notification when app is in foreground.
    * @param params
    */
  def sendUserNotification(params: js.Any*): js.Promise[Unit] = js.native
  
  /**
    * Toggles device enrollment in biometric auth (TouchID or FaceID) (iOS Only)
    * @example
    * await device.setBiometricEnrollment(true);
    * // or
    * await device.setBiometricEnrollment(false);
    */
  def setBiometricEnrollment(enabled: Boolean): js.Promise[Unit] = js.native
  
  /**
    * Note: setLocation is dependent on fbsimctl. if fbsimctl is not installed, the command will fail, it must be installed. Sets the simulator location to the given latitude and longitude.
    * @param lat
    * @param lon
    * @example await device.setLocation(32.0853, 34.7818);
    */
  def setLocation(lat: Double, lon: Double): js.Promise[Unit] = js.native
  
  /**
    * Takes "portrait" or "landscape" and rotates the device to the given orientation. Currently only available in the iOS Simulator.
    * @param orientation
    */
  def setOrientation(orientation: Orientation): js.Promise[Unit] = js.native
  
  /**
    * Disable EarlGrey's network synchronization mechanism on preffered endpoints. Usful if you want to on skip over synchronizing on certain URLs.
    * @param urls
    * @example await device.setURLBlacklist(['.*127.0.0.1.*']);
    */
  def setURLBlacklist(urls: js.Array[String]): js.Promise[Unit] = js.native
  
  /**
    * Simulate shake (iOS Only)
    */
  def shake(): js.Promise[Unit] = js.native
  
  /**
    * Takes a screenshot on the device and schedules putting it to the artifacts folder upon completion of the current test.
    * @param text
    * @example
    * await device.takeScreenshot('tap on menu');
    *
    * • If the test passes, the screenshot will be put to <artifacts-location>/✓ Menu items should have Logout/tap on menu.png.
    * • If the test fails, the screenshot will be put to <artifacts-location>/✗ Menu items should have Logout/tap on menu.png.
    *
    * > NOTE: At the moment, taking screenshots on-demand in --take-screenshots failing mode is not yet implemented.
    */
  def takeScreenshot(name: String): js.Promise[Unit] = js.native
  
  /**
    * By default, terminateApp() with no params will terminate the app
    * To terminate another app, specify its bundle id
    * @param bundle
    * @example await device.terminateApp('other.bundle.id');
    */
  def terminateApp(): js.Promise[Unit] = js.native
  def terminateApp(bundle: String): js.Promise[Unit] = js.native
  
  /**
    * By default, uninstallApp() with no params will uninstall the app defined in the current configuration.
    * To uninstall another app, specify its bundle id
    * @param bundle
    * @example await device.installApp('other.bundle.id');
    */
  def uninstallApp(): js.Promise[Unit] = js.native
  def uninstallApp(bundle: String): js.Promise[Unit] = js.native
  
  /**
    * Simulates the failure of a face match via FaceID (iOS Only)
    */
  def unmatchFace(): js.Promise[Unit] = js.native
  
  /**
    * Simulates the failure of a finger match via TouchID (iOS Only)
    */
  def unmatchFinger(): js.Promise[Unit] = js.native
}
