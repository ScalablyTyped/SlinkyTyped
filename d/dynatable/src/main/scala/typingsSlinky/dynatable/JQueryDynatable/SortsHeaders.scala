package typingsSlinky.dynatable.JQueryDynatable

import org.scalajs.dom.raw.Element
import org.scalajs.dom.raw.Event
import typingsSlinky.dynatable.JQuery
import scala.scalajs.js
import scala.scalajs.js.`|`
import scala.scalajs.js.annotation.{JSGlobalScope, JSGlobal, JSImport, JSName, JSBracketAccess}

@js.native
trait SortsHeaders extends js.Object {
  
  /**
    * Inject the arrow down inside the $link
    *
    * @param $link The jQuery object to be used
    */
  def appendArrowDown($link: JQuery): Unit = js.native
  
  /**
    * Inject the arrow up inside the $link
    *
    * @param $link The jQuery object to be used
    */
  def appendArrowUp($link: JQuery): Unit = js.native
  
  /** Go through each cell and call `attachOne` */
  def attach(): Unit = js.native
  
  /**
    * If sorting is allowed for the provided cell, it injects the hml generated by `create`
    *
    * @param cell The cell Element to be parsed
    */
  def attachOne(cell: Element): Unit = js.native
  
  /**
    * Generate the html markup to be inserted inside the header of the sortable column
    *
    * @param cell An Element which point to the cell in the header row
    * @return A jQuery object containing the markup of the link
    */
  def create(cell: Element): JQuery = js.native
  
  /** Create and init the sorts */
  def init(): Unit = js.native
  
  /**
    * Check if sort feature is enabled
    *
    * @return A boolean if sort feature is enabled
    */
  def initOnLoad(): Boolean = js.native
  
  /** Remove all the sort headers from the table */
  def removeAll(): Unit = js.native
  
  /** Remove all arrows Elements from the table */
  def removeAllArrows(): Unit = js.native
  
  /**
    * Remove the arrow found inside the provided $link
    *
    * @param $link The jQuery object containing the `<a>` markup in the sortable headers
    */
  def removeArrow($link: JQuery): Unit = js.native
  
  /**
    * Remove the link generated by dynatable inside the sortable header
    * and restore its original html content
    *
    * @param cell The cell Element that will be parsed
    */
  def removeOne(cell: Element): Unit = js.native
  
  /**
    * @todo learn more about this method and document it
    *
    * @param $link The jQuery object to be used
    * @param column The Column object that will be used
    * @return A boolean which is true if supplied test function passes for ALL items in an array
    */
  def sortedByColumn($link: JQuery, column: Column): Boolean = js.native
  
  /**
    * Inspect the settings to determine the order to use
    *
    * @param column The Column object that will be used
    * @return A number (-1 or +1) describing the order to use (DESC or ASC)
    */
  def sortedByColumnValue(column: Column): Double = js.native
  
  /**
    * Refresh the [multi] sorting of the dataset
    *
    * @param $e The event object (of the click on the table sortable header)
    * @param $link The header link
    * @param column The Column object to be sorted
    */
  def toggleSort(e: Event, $link: JQuery, column: Column): Unit = js.native
}
object SortsHeaders {
  
  @scala.inline
  def apply(
    appendArrowDown: JQuery => Unit,
    appendArrowUp: JQuery => Unit,
    attach: () => Unit,
    attachOne: Element => Unit,
    create: Element => JQuery,
    init: () => Unit,
    initOnLoad: () => Boolean,
    removeAll: () => Unit,
    removeAllArrows: () => Unit,
    removeArrow: JQuery => Unit,
    removeOne: Element => Unit,
    sortedByColumn: (JQuery, Column) => Boolean,
    sortedByColumnValue: Column => Double,
    toggleSort: (Event, JQuery, Column) => Unit
  ): SortsHeaders = {
    val __obj = js.Dynamic.literal(appendArrowDown = js.Any.fromFunction1(appendArrowDown), appendArrowUp = js.Any.fromFunction1(appendArrowUp), attach = js.Any.fromFunction0(attach), attachOne = js.Any.fromFunction1(attachOne), create = js.Any.fromFunction1(create), init = js.Any.fromFunction0(init), initOnLoad = js.Any.fromFunction0(initOnLoad), removeAll = js.Any.fromFunction0(removeAll), removeAllArrows = js.Any.fromFunction0(removeAllArrows), removeArrow = js.Any.fromFunction1(removeArrow), removeOne = js.Any.fromFunction1(removeOne), sortedByColumn = js.Any.fromFunction2(sortedByColumn), sortedByColumnValue = js.Any.fromFunction1(sortedByColumnValue), toggleSort = js.Any.fromFunction3(toggleSort))
    __obj.asInstanceOf[SortsHeaders]
  }
  
  @scala.inline
  implicit class SortsHeadersOps[Self <: SortsHeaders] (val x: Self) extends AnyVal {
    
    @scala.inline
    def duplicate: Self = (js.Dynamic.global.Object.assign(js.Dynamic.literal(), x)).asInstanceOf[Self]
    
    @scala.inline
    def combineWith[Other <: js.Any](other: Other): Self with Other = (js.Dynamic.global.Object.assign(js.Dynamic.literal(), x, other.asInstanceOf[js.Any])).asInstanceOf[Self with Other]
    
    @scala.inline
    def set(key: String, value: js.Any): Self = {
      x.asInstanceOf[js.Dynamic].updateDynamic(key)(value)
      x
    }
    
    @scala.inline
    def setAppendArrowDown(value: JQuery => Unit): Self = this.set("appendArrowDown", js.Any.fromFunction1(value))
    
    @scala.inline
    def setAppendArrowUp(value: JQuery => Unit): Self = this.set("appendArrowUp", js.Any.fromFunction1(value))
    
    @scala.inline
    def setAttach(value: () => Unit): Self = this.set("attach", js.Any.fromFunction0(value))
    
    @scala.inline
    def setAttachOne(value: Element => Unit): Self = this.set("attachOne", js.Any.fromFunction1(value))
    
    @scala.inline
    def setCreate(value: Element => JQuery): Self = this.set("create", js.Any.fromFunction1(value))
    
    @scala.inline
    def setInit(value: () => Unit): Self = this.set("init", js.Any.fromFunction0(value))
    
    @scala.inline
    def setInitOnLoad(value: () => Boolean): Self = this.set("initOnLoad", js.Any.fromFunction0(value))
    
    @scala.inline
    def setRemoveAll(value: () => Unit): Self = this.set("removeAll", js.Any.fromFunction0(value))
    
    @scala.inline
    def setRemoveAllArrows(value: () => Unit): Self = this.set("removeAllArrows", js.Any.fromFunction0(value))
    
    @scala.inline
    def setRemoveArrow(value: JQuery => Unit): Self = this.set("removeArrow", js.Any.fromFunction1(value))
    
    @scala.inline
    def setRemoveOne(value: Element => Unit): Self = this.set("removeOne", js.Any.fromFunction1(value))
    
    @scala.inline
    def setSortedByColumn(value: (JQuery, Column) => Boolean): Self = this.set("sortedByColumn", js.Any.fromFunction2(value))
    
    @scala.inline
    def setSortedByColumnValue(value: Column => Double): Self = this.set("sortedByColumnValue", js.Any.fromFunction1(value))
    
    @scala.inline
    def setToggleSort(value: (Event, JQuery, Column) => Unit): Self = this.set("toggleSort", js.Any.fromFunction3(value))
  }
}
