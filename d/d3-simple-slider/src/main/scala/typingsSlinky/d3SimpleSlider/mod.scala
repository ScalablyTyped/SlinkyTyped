package typingsSlinky.d3SimpleSlider

import org.scalajs.dom.raw.SVGGElement
import org.scalajs.dom.raw.SVGSVGElement
import typingsSlinky.d3Selection.mod.Selection_
import typingsSlinky.d3Selection.mod.TransitionLike
import org.scalablytyped.runtime.StObject
import scala.scalajs.js
import scala.scalajs.js.`|`
import scala.scalajs.js.annotation.{JSGlobalScope, JSGlobal, JSImport, JSName, JSBracketAccess}

object mod {
  
  @JSImport("d3-simple-slider", "sliderBottom")
  @js.native
  def sliderBottom[Domain /* <: SliderDomain */](scale: SliderScale[Domain]): Slider[Domain] = js.native
  
  @JSImport("d3-simple-slider", "sliderLeft")
  @js.native
  def sliderLeft[Domain /* <: SliderDomain */](scale: SliderScale[Domain]): Slider[Domain] = js.native
  
  @JSImport("d3-simple-slider", "sliderRight")
  @js.native
  def sliderRight[Domain /* <: SliderDomain */](scale: SliderScale[Domain]): Slider[Domain] = js.native
  
  @JSImport("d3-simple-slider", "sliderTop")
  @js.native
  def sliderTop[Domain /* <: SliderDomain */](scale: SliderScale[Domain]): Slider[Domain] = js.native
  
  @js.native
  trait Slider[Domain] extends StObject {
    
    /**
      * Render the slider to the given _context_, which may be either a [selection](https://github.com/d3/d3-selection) of SVG containers (either SVG or G elements)
      * or a corresponding [transition](https://github.com/d3/d3-transition).
      *
      * @param context A [selection](https://github.com/d3/d3-selection) of SVG containers (either SVG or G elements) or a corresponding [transition](https://github.com/d3/d3-transition).
      */
    def apply(context: Selection_[SVGGElement | SVGSVGElement, _, _, _]): Unit = js.native
    def apply(context: TransitionLike[SVGGElement | SVGSVGElement, _]): Unit = js.native
    
    /**
      * Gets the current domain underlying the slider.
      */
    def domain(): js.Tuple2[Double, Double] = js.native
    /**
      * Sets the domain and returns the slider.
      *
      * @param domain The domain to be used for slider generation.
      */
    def domain(domain: js.Tuple2[Double, Double]): this.type = js.native
    
    /**
      * Returns the callback for the specified typenames, if any.
      * If multiple typenames are specified, the first matching callback is returned.
      *
      * @param types An event typename.
      * @param callback A callback.
      */
    def on(typenames: String): js.Function1[/* val */ Domain, js.UndefOr[Unit]] = js.native
    /**
      * Adds the callback for the specified typenames.
      * The callback is registered for the specified (fully-qualified) typenames.
      * If a callback was already registered for the given typenames,
      * the existing callback is removed before the new callback is added.
      *
      * @param types An event typename.
      * @param callback A callback.
      */
    def on(typenames: String, callback: js.Function1[/* val */ Domain, Unit]): this.type = js.native
    /**
      * Removes the callback for the specified typenames.
      * To remove all callbacks for a given name `foo`, say `slider.on(".foo", null).`
      *
      * @param types An event typename.
      */
    def on(typenames: String, callback: Null): this.type = js.native
    
    /**
      * Returns the currently set tick format function, which defaults to null.
      */
    def tickFormat(): (js.Function2[/* domainValue */ Domain, /* index */ Double, String]) | Null = js.native
    /**
      * Sets the tick format function and returns the s;lider.
      *
      * @param format A function mapping a value from the slider Domain to a formatted string
      * for display purposes. When invoked, the format function is also passed a second argument representing the zero-based index
      * of the tick label in the array of generated tick labels.
      */
    def tickFormat(format: js.Function2[/* domainValue */ Domain, /* index */ Double, String]): this.type = js.native
    /**
      * Reset the tick format function. A null format indicates that the scale’s
      * default formatter should be used, which is generated by calling scale.tickFormat.
      *
      * @param format null
      */
    def tickFormat(format: Null): this.type = js.native
    
    /**
      * Returns the current tick values, which defaults to null.
      */
    def tickValues(): js.Array[Domain] | Null = js.native
    /**
      * If a values array is specified, the specified values are used for ticks rather than using the sliders' automatic tick generator.
      * If values is null, clears any previously-set explicit tick values and reverts back to the sliders' tick generator.
      * If values is not specified, returns the current tick values, which defaults to null. For example, to generate ticks at specific values:
      *
      * ```js
      * slider.tickValues([1, 2, 3, 5, 8, 13, 21]);
      * ```
      *
      * @param values An array with values from the Domain of the scale underlying the slider.
      */
    def tickValues(values: js.Array[Domain]): this.type = js.native
    /**
      * Clears any previously-set explicit tick values and reverts back to the scale’s tick generator.
      *
      * @param values null
      */
    def tickValues(values: Null): this.type = js.native
    
    def ticks(): js.Array[Double] = js.native
    /**
      * To generate twenty ticks:
      *
      * ```js
      * slider.ticks(20);
      * ```
      *
      * @param count Number of ticks that should be rendered.
      */
    def ticks(count: Double): this.type = js.native
  }
  
  type SliderContainerElement = SVGSVGElement | SVGGElement
  
  type SliderDomain = Double
  
  @js.native
  trait SliderScale[Domain] extends StObject {
    
    def apply(x: Domain): js.UndefOr[Double] = js.native
    
    def copy(): this.type = js.native
    
    def domain(): js.Array[Domain] = js.native
    
    def range(): js.Array[Double] = js.native
    
    var tickFormat: js.UndefOr[
        js.Function2[
          /* count */ js.UndefOr[Double], 
          /* specifier */ js.UndefOr[String], 
          js.Function1[/* d */ Double, String]
        ]
      ] = js.native
    
    var ticks: js.UndefOr[js.Function1[/* count */ js.UndefOr[Double], js.Array[Domain]]] = js.native
  }
}
