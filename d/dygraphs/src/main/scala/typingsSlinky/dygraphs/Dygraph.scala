package typingsSlinky.dygraphs

import org.scalajs.dom.raw.MouseEvent
import typingsSlinky.dygraphs.dygraphs.Annotation
import typingsSlinky.dygraphs.dygraphs.Area
import typingsSlinky.dygraphs.dygraphs.Axis
import typingsSlinky.dygraphs.dygraphs.Options
import typingsSlinky.dygraphs.dygraphs.SeriesProperties
import typingsSlinky.dygraphs.dygraphsStrings.x
import typingsSlinky.dygraphs.dygraphsStrings.y
import org.scalablytyped.runtime.StObject
import scala.scalajs.js
import scala.scalajs.js.`|`
import scala.scalajs.js.annotation.{JSGlobalScope, JSGlobal, JSImport, JSName, JSBracketAccess}

@js.native
trait Dygraph extends StObject {
  
  /**
    * Adjusts the number of points in the rolling average. Updates the graph to
    * reflect the new averaging period.
    * @param {number} length Number of points over which to average the data.
    */
  def adjustRoll(length: Double): Unit = js.native
  
  /**
    * Return the list of annotations.
    */
  def annotations(): js.Array[Annotation] = js.native
  
  /**
    * Clears the current selection (i.e. points that were highlighted by moving
    * the mouse over the chart).
    */
  def clearSelection(): Unit = js.native
  
  /**
    * Detach DOM elements in the dygraph and null out all data references.
    * Calling this when you're done with a dygraph can dramatically reduce memory
    * usage. See, e.g., the tests/perf.html example.
    */
  def destroy(): Unit = js.native
  
  /**
    * Convert a mouse event to DOM coordinates relative to the graph origin.
    *
    * Returns a two-element array: [X, Y].
    */
  def eventToDomCoords(event: MouseEvent): js.Tuple2[Double, Double] = js.native
  
  /**
    * Get the current graph's area object.
    */
  def getArea(): Area = js.native
  
  /**
    * Return the list of colors. This is either the list of colors passed in the
    * attributes or the autogenerated list of rgb(r,g,b) strings.
    * This does not return colors for invisible series.
    * @return {Array.<string>} The list of colors.
    */
  def getColors(): js.Array[String] = js.native
  
  /**
    * Returns the name of the currently-highlighted series.
    * Only available when the highlightSeriesOpts option is in use.
    */
  def getHighlightSeries(): String = js.native
  
  /**
    * Get the list of label names for this graph. The first column is the
    * x-axis, so the data series names start at index 1.
    *
    * Returns null when labels have not yet been defined.
    */
  def getLabels(): js.Array[String] = js.native
  
  /**
    * Returns the current value for an option, as set in the constructor or via
    * updateOptions. You may pass in an (optional) series name to get per-series
    * values for the option.
    *
    * All values returned by this method should be considered immutable. If you
    * modify them, there is no guarantee that the changes will be honored or that
    * dygraphs will remain in a consistent state. If you want to modify an option,
    * use updateOptions() instead.
    *
    * @param {string} name The name of the option (e.g. 'strokeWidth')
    * @param {string=} opt_seriesName Series name to get per-series values.
    * @return {*} The value of the option.
    */
  def getOption(name: String): js.Any = js.native
  def getOption(name: String, seriesName: String): js.Any = js.native
  
  /**
    * Get the value of an option on a per-axis basis.
    */
  def getOptionForAxis(name: String, axis: Axis): js.Any = js.native
  
  /**
    * Returns a few attributes of a series, i.e. its color, its visibility, which
    * axis it's assigned to, and its column in the original data.
    * Returns null if the series does not exist.
    * Otherwise, returns an object with column, visibility, color and axis properties.
    * The "axis" property will be set to 1 for y1 and 2 for y2.
    * The "column" property can be fed back into getValue(row, column) to get
    * values for this series.
    */
  def getPropertiesForSeries(series_name: String): SeriesProperties = js.native
  
  /**
    * Find the row number corresponding to the given x-value.
    * Returns null if there is no such x-value in the data.
    * If there are multiple rows with the same x-value, this will return the
    * first one.
    * @param xVal The x-value to look for (e.g. millis since epoch).
    * @return The row number, which you can pass to getValue(), or null.
    */
  def getRowForX(xVal: Double): Double | Null = js.native
  
  /**
    * Returns the number of the currently selected row. To get data for this row,
    * you can use the getValue method.
    * @return {number} row number, or -1 if nothing is selected
    */
  def getSelection(): Double = js.native
  
  /**
    * Returns the value in the given row and column. If the row and column exceed
    * the bounds on the data, returns null. Also returns null if the value is
    * missing.
    * @param {number} row The row number of the data (0-based). Row 0 is the
    *         first row of data, not a header row.
    * @param {number} col The column number of the data (0-based)
    * @return {number} The value in the specified cell or null if the row/col
    *         were out of range.
    */
  def getValue(row: Double, col: Double): Double = js.native
  
  /**
    * Get the index of a series (column) given its name. The first column is the
    * x-axis, so the data series start with index 1.
    */
  def indexFromSetName(name: String): Double = js.native
  
  /**
    * Returns true if the currently-highlighted series was locked
    * via setSelection(..., seriesName, true).
    */
  def isSeriesLocked(): Boolean = js.native
  
  /**
    * Returns the zoomed status of the chart for one or both axes.
    *
    * Axis is an optional parameter. Can be set to 'x' or 'y'.
    *
    * The zoomed status for an axis is set whenever a user zooms using the mouse
    * or when the dateWindow or valueRange are updated (unless the
    * isZoomedIgnoreProgrammaticZoom option is also specified).
    */
  def isZoomed(): Boolean = js.native
  @JSName("isZoomed")
  def isZoomed_x(axis: x): Boolean = js.native
  @JSName("isZoomed")
  def isZoomed_y(axis: y): Boolean = js.native
  
  /**
    * Returns the number of y-axes on the chart.
    */
  def numAxes(): Double = js.native
  
  /**
    * Returns the number of columns (including the independent variable).
    */
  def numColumns(): Double = js.native
  
  /**
    * Returns the number of rows (excluding any header/label row).
    */
  def numRows(): Double = js.native
  
  /**
    * Trigger a callback when the dygraph has drawn itself and is ready to be
    * manipulated. This is primarily useful when dygraphs has to do an XHR for the
    * data (i.e. a URL is passed as the data source) and the chart is drawn
    * asynchronously. If the chart has already drawn, the callback will fire
    * immediately.
    *
    * This is a good place to call setAnnotations().
    */
  def ready(callback: js.Function1[/* g */ this.type, _]): Unit = js.native
  
  /**
    * Reset the zoom to the original view coordinates. This is the same as
    * double-clicking on the graph.
    */
  def resetZoom(): Unit = js.native
  
  /**
    * Resizes the dygraph. If no parameters are specified, resizes to fill the
    * containing div (which has presumably changed size since the dygraph was
    * instantiated. If the width/height are specified, the div will be resized.
    *
    * This is far more efficient than destroying and re-instantiating a
    * Dygraph, since it doesn't have to reparse the underlying data.
    *
    * @param {number} width Width (in pixels)
    * @param {number} height Height (in pixels)
    */
  def resize(width: Double, height: Double): Unit = js.native
  
  /**
    * Returns the current rolling period, as set by the user or an option.
    */
  def rollPeriod(): Double = js.native
  
  /**
    * Update the list of annotations and redraw the chart.
    * See dygraphs.com/annotations.html for more info on how to use annotations.
    * @param ann {Array} An array of annotation objects.
    * @param suppressDraw {Boolean} Set to "true" to block chart redraw (optional).
    */
  def setAnnotations(ann: js.Array[Annotation]): Unit = js.native
  def setAnnotations(ann: js.Array[Annotation], suppressDraw: Boolean): Unit = js.native
  
  def setSelection(row: Boolean): Unit = js.native
  def setSelection(row: Boolean, seriesName: js.UndefOr[scala.Nothing], locked: Boolean): Unit = js.native
  def setSelection(row: Boolean, seriesName: String): Unit = js.native
  def setSelection(row: Boolean, seriesName: String, locked: Boolean): Unit = js.native
  /**
    * Manually set the selected points and display information about them in the
    * legend. The selection can be cleared using clearSelection() and queried
    * using getSelection().
    * @param {number} row Row number that should be highlighted (i.e. appear with
    * hover dots on the chart).
    * @param {seriesName} optional series name to highlight that series with the
    * the highlightSeriesOpts setting.
    * @param { locked } optional If true, keep seriesName selected when mousing
    * over the graph, disabling closest-series highlighting. Call clearSelection()
    * to unlock it.
    */
  def setSelection(row: Double): Unit = js.native
  def setSelection(row: Double, seriesName: js.UndefOr[scala.Nothing], locked: Boolean): Unit = js.native
  def setSelection(row: Double, seriesName: String): Unit = js.native
  def setSelection(row: Double, seriesName: String, locked: Boolean): Unit = js.native
  
  /**
    * Changes the visiblity of a series.
    *
    * @param {number} num the series index
    * @param {boolean} value true or false, identifying the visibility.
    */
  def setVisibility(num: Double, value: Boolean): Unit = js.native
  
  /**
    * Convert from canvas/div coords to data coordinates.
    * If specified, do this conversion for the coordinate system of a particular
    * axis. Uses the first axis by default.
    * Returns a two-element array: [X, Y].
    *
    * Note: use toDataXCoord instead of toDataCoords(x, null) and use toDataYCoord
    * instead of toDataCoords(null, y, axis).
    */
  def toDataCoords(x: Double, y: Double): js.Tuple2[Double, Double] = js.native
  def toDataCoords(x: Double, y: Double, axis: Double): js.Tuple2[Double, Double] = js.native
  
  /**
    * Convert from canvas/div x coordinate to data coordinate.
    *
    * If x is null, this returns null.
    */
  def toDataXCoord(x: Double): Double = js.native
  
  /**
    * Convert from canvas/div y coord to value.
    *
    * If y is null, this returns null.
    * if axis is null, this uses the first axis.
    */
  def toDataYCoord(y: Double): Double = js.native
  def toDataYCoord(y: Double, axis: Double): Double = js.native
  
  /**
    * Convert from data coordinates to canvas/div X/Y coordinates.
    * If specified, do this conversion for the coordinate system of a particular
    * axis. Uses the first axis by default.
    * Returns a two-element array: [X, Y]
    *
    * Note: use toDomXCoord instead of toDomCoords(x, null) and use toDomYCoord
    * instead of toDomCoords(null, y, axis).
    */
  def toDomCoords(x: Double, y: Double): js.Tuple2[Double, Double] = js.native
  def toDomCoords(x: Double, y: Double, axis: Double): js.Tuple2[Double, Double] = js.native
  
  /**
    * Convert from data x coordinates to canvas/div X coordinate.
    * If specified, do this conversion for the coordinate system of a particular
    * axis.
    * Returns a single value or null if x is null.
    */
  def toDomXCoord(x: Double): Double = js.native
  
  /**
    * Convert from data y coordinates to canvas/div Y coordinate and optional
    * axis. Uses the first axis by default.
    *
    * returns a single value or null if y is null.
    */
  def toDomYCoord(y: Double): Double = js.native
  def toDomYCoord(y: Double, axis: Double): Double = js.native
  
  /**
    * Converts an x value to a percentage from the left to the right of
    * the drawing area.
    *
    * If the coordinate represents a value visible on the canvas, then
    * the value will be between 0 and 1, where 0 is the left of the canvas.
    * However, this method will return values outside the range, as
    * values can fall outside the canvas.
    *
    * If x is null, this returns null.
    * @param {number} x The data x-coordinate.
    * @return {number} A fraction in [0, 1] where 0 = the left edge.
    */
  def toPercentXCoord(x: Double): Double = js.native
  
  /**
    * Converts a y for an axis to a percentage from the top to the
    * bottom of the drawing area.
    *
    * If the coordinate represents a value visible on the canvas, then
    * the value will be between 0 and 1, where 0 is the top of the canvas.
    * However, this method will return values outside the range, as
    * values can fall outside the canvas.
    *
    * If y is null, this returns null.
    * if axis is null, this uses the first axis.
    *
    * @param {number} y The data y-coordinate.
    * @param {number} [axis] The axis number on which the data coordinate lives.
    * @return {number} A fraction in [0, 1] where 0 = the top edge.
    */
  def toPercentYCoord(y: Double): Double = js.native
  def toPercentYCoord(y: Double, axis: Double): Double = js.native
  
  /**
    * Changes various properties of the graph. These can include:
    * <ul>
    * <li>file: changes the source data for the graph</li>
    * <li>errorBars: changes whether the data contains stddev</li>
    * </ul>
    *
    * There's a huge variety of options that can be passed to this method. For a
    * full list, see http://dygraphs.com/options.html.
    *
    * @param {Object} input_attrs The new properties and values
    * @param {boolean} block_redraw Usually the chart is redrawn after every
    *         call to updateOptions(). If you know better, you can pass true to
    *         explicitly block the redraw. This can be useful for chaining
    *         updateOptions() calls, avoiding the occasional infinite loop and
    *         preventing redraws when it's not necessary (e.g. when updating a
    *         callback).
    */
  def updateOptions(input_attrs: Options): Unit = js.native
  def updateOptions(input_attrs: Options, block_redraw: Boolean): Unit = js.native
  
  /**
    * Returns a boolean array of visibility statuses.
    */
  def visibility(): js.Array[Boolean] = js.native
  
  /**
    * Returns the lower- and upper-bound x-axis values of the data set.
    */
  def xAxisExtremes(): js.Tuple2[Double, Double] = js.native
  
  /**
    * Returns the currently-visible x-range. This can be affected by zooming,
    * panning or a call to updateOptions.
    * Returns a two-element array: [left, right].
    * If the Dygraph has dates on the x-axis, these will be millis since epoch.
    */
  def xAxisRange(): js.Tuple2[Double, Double] = js.native
  
  /**
    * Returns the currently-visible y-range for an axis. This can be affected by
    * zooming, panning or a call to updateOptions. Axis indices are zero-based. If
    * called with no arguments, returns the range of the first axis.
    * Returns a two-element array: [bottom, top].
    */
  def yAxisRange(): js.Tuple2[Double, Double] = js.native
  def yAxisRange(idx: Double): js.Tuple2[Double, Double] = js.native
  
  /**
    * Returns the currently-visible y-ranges for each axis. This can be affected by
    * zooming, panning, calls to updateOptions, etc.
    * Returns an array of [bottom, top] pairs, one for each y-axis.
    */
  def yAxisRanges(): js.Array[js.Tuple2[Double, Double]] = js.native
}
