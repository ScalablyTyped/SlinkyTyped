package typingsSlinky.fsMerger.mod

import typingsSlinky.fsMerger.anon.At
import typingsSlinky.fsMerger.anon.Typeofreaddir
import typingsSlinky.node.Buffer
import typingsSlinky.node.fsMod.PathLike
import typingsSlinky.node.fsMod.Stats
import typingsSlinky.walkSync.mod.Entry
import typingsSlinky.walkSync.mod.Options
import scala.scalajs.js
import scala.scalajs.js.`|`
import scala.scalajs.js.annotation.{JSGlobalScope, JSGlobal, JSImport, JSName, JSBracketAccess}

/* Inlined std.Pick<{readonly unlinkSync (path : node.fs.PathLike): void,   WriteStream :new (): node.fs.WriteStream, readonly truncateSync (path : node.fs.PathLike): void, readonly truncateSync (path : node.fs.PathLike): void, readonly truncateSync (path : node.fs.PathLike, len : number): void, readonly fchownSync (fd : number, uid : number, gid : number): void,  readonly writev :{readonly ^ (fd : number, buffers : std.Array<node.NodeJS.ArrayBufferView>, cb : (err : node.NodeJS.ErrnoException | null, bytesWritten : number, buffers : std.Array<node.NodeJS.ArrayBufferView>): void): void, readonly ^ (fd : number, buffers : std.Array<node.NodeJS.ArrayBufferView>, position : number, cb : (err : node.NodeJS.ErrnoException | null, bytesWritten : number, buffers : std.Array<node.NodeJS.ArrayBufferView>): void): void}, readonly mkdtempSync (prefix : string): string, readonly mkdtempSync (prefix : string): string, readonly mkdtempSync (prefix : string, options : node.fs.BaseEncodingOptions): string, readonly mkdtempSync (prefix : string, options : node.BufferEncoding): string, readonly mkdtempSync (prefix : string, options : node.fs.BufferEncodingOption): node.Buffer, readonly mkdtempSync (prefix : string): string | node.Buffer, readonly mkdtempSync (prefix : string): string | node.Buffer, readonly mkdtempSync (prefix : string, options : node.fs.BaseEncodingOptions): string | node.Buffer, readonly mkdtempSync (prefix : string, options : string): string | node.Buffer, readonly chmodSync (path : node.fs.PathLike, mode : node.fs.Mode): void,  readonly appendFile :{readonly ^ (file : node.fs.PathLike, data : string, options : node.fs.WriteFileOptions, callback : node.fs.NoParamCallback): void, readonly ^ (file : number, data : string, options : node.fs.WriteFileOptions, callback : node.fs.NoParamCallback): void, readonly ^ (file : node.fs.PathLike, data : std.Uint8Array, options : node.fs.WriteFileOptions, callback : node.fs.NoParamCallback): void, readonly ^ (file : number, data : std.Uint8Array, options : node.fs.WriteFileOptions, callback : node.fs.NoParamCallback): void, readonly ^ (file : node.fs.PathLike, data : string, callback : node.fs.NoParamCallback): void, readonly ^ (file : number, data : string, callback : node.fs.NoParamCallback): void, readonly ^ (file : node.fs.PathLike, data : std.Uint8Array, callback : node.fs.NoParamCallback): void, readonly ^ (file : number, data : std.Uint8Array, callback : node.fs.NoParamCallback): void},  readonly lchmod :{readonly ^ (path : node.fs.PathLike, mode : node.fs.Mode, callback : node.fs.NoParamCallback): void},  readonly fchmod :{readonly ^ (fd : number, mode : node.fs.Mode, callback : node.fs.NoParamCallback): void},  readonly truncate :{readonly ^ (path : node.fs.PathLike, len : number, callback : node.fs.NoParamCallback): void, readonly ^ (path : node.fs.PathLike, len : undefined, callback : node.fs.NoParamCallback): void, readonly ^ (path : node.fs.PathLike, len : null, callback : node.fs.NoParamCallback): void, readonly ^ (path : node.fs.PathLike, callback : node.fs.NoParamCallback): void}, readonly fdatasyncSync (fd : number): void, readonly fchmodSync (fd : number, mode : node.fs.Mode): void,   ReadStream :new (): node.fs.ReadStream,  readonly promises :{readonly appendFile (path : node.fs.PathLike, data : string): std.Promise<void>, readonly appendFile (path : node.fs/promises.FileHandle, data : string): std.Promise<void>, readonly appendFile (path : node.fs.PathLike, data : std.Uint8Array): std.Promise<void>, readonly appendFile (path : node.fs/promises.FileHandle, data : std.Uint8Array): std.Promise<void>, readonly appendFile (path : node.fs.PathLike, data : string): std.Promise<void>, readonly appendFile (path : node.fs/promises.FileHandle, data : string): std.Promise<void>, readonly appendFile (path : node.fs.PathLike, data : std.Uint8Array): std.Promise<void>, readonly appendFile (path : node.fs/promises.FileHandle, data : std.Uint8Array): std.Promise<void>, readonly appendFile (path : node.fs.PathLike, data : string, options : node.anon.BaseEncodingOptionsmodeMo): std.Promise<void>, readonly appendFile (path : node.fs/promises.FileHandle, data : string, options : node.anon.BaseEncodingOptionsmodeMo): std.Promise<void>, readonly appendFile (path : node.fs.PathLike, data : std.Uint8Array, options : node.anon.BaseEncodingOptionsmodeMo): std.Promise<void>, readonly appendFile (path : node.fs/promises.FileHandle, data : std.Uint8Array, options : node.anon.BaseEncodingOptionsmodeMo): std.Promise<void>, readonly appendFile (path : node.fs.PathLike, data : string, options : node.BufferEncoding): std.Promise<void>, readonly appendFile (path : node.fs/promises.FileHandle, data : string, options : node.BufferEncoding): std.Promise<void>, readonly appendFile (path : node.fs.PathLike, data : std.Uint8Array, options : node.BufferEncoding): std.Promise<void>, readonly appendFile (path : node.fs/promises.FileHandle, data : std.Uint8Array, options : node.BufferEncoding): std.Promise<void>, readonly lchmod (path : node.fs.PathLike, mode : node.fs.Mode): std.Promise<void>, readonly fchmod (handle : node.fs/promises.FileHandle, mode : node.fs.Mode): std.Promise<void>, readonly truncate (path : node.fs.PathLike): std.Promise<void>, readonly truncate (path : node.fs.PathLike, len : number): std.Promise<void>, readonly chmod (path : node.fs.PathLike, mode : node.fs.Mode): std.Promise<void>, readonly lstat (path : node.fs.PathLike): std.Promise<node.fs.Stats>, readonly readFile (path : node.fs.PathLike): std.Promise<node.Buffer>, readonly readFile (path : node.fs/promises.FileHandle): std.Promise<node.Buffer>, readonly readFile (path : node.fs.PathLike): std.Promise<node.Buffer>, readonly readFile (path : node.fs/promises.FileHandle): std.Promise<node.Buffer>, readonly readFile (path : node.fs.PathLike, options : node.anon.Flag): std.Promise<node.Buffer>, readonly readFile (path : node.fs/promises.FileHandle, options : node.anon.Flag): std.Promise<node.Buffer>, readonly readFile (path : node.fs.PathLike, options : node.anon.EncodingFlag): std.Promise<string>, readonly readFile (path : node.fs/promises.FileHandle, options : node.anon.EncodingFlag): std.Promise<string>, readonly readFile (path : node.fs.PathLike, options : node.BufferEncoding): std.Promise<string>, readonly readFile (path : node.fs/promises.FileHandle, options : node.BufferEncoding): std.Promise<string>, readonly readFile (path : node.fs.PathLike): std.Promise<string | node.Buffer>, readonly readFile (path : node.fs/promises.FileHandle): std.Promise<string | node.Buffer>, readonly readFile (path : node.fs.PathLike): std.Promise<string | node.Buffer>, readonly readFile (path : node.fs/promises.FileHandle): std.Promise<string | node.Buffer>, readonly readFile (path : node.fs.PathLike, options : node.anon.BaseEncodingOptionsflagOp): std.Promise<string | node.Buffer>, readonly readFile (path : node.fs/promises.FileHandle, options : node.anon.BaseEncodingOptionsflagOp): std.Promise<string | node.Buffer>, readonly readFile (path : node.fs.PathLike, options : node.BufferEncoding): std.Promise<string | node.Buffer>, readonly readFile (path : node.fs/promises.FileHandle, options : node.BufferEncoding): std.Promise<string | node.Buffer>, readonly opendir (path : string): std.Promise<node.fs.Dir>, readonly opendir (path : string, options : node.fs.OpenDirOptions): std.Promise<node.fs.Dir>, readonly fstat (handle : node.fs/promises.FileHandle): std.Promise<node.fs.Stats>, readonly link (existingPath : node.fs.PathLike, newPath : node.fs.PathLike): std.Promise<void>, readonly writeFile (path : node.fs.PathLike, data : string): std.Promise<void>, readonly writeFile (path : node.fs/promises.FileHandle, data : string): std.Promise<void>, readonly writeFile (path : node.fs.PathLike, data : std.Uint8Array): std.Promise<void>, readonly writeFile (path : node.fs/promises.FileHandle, data : std.Uint8Array): std.Promise<void>, readonly writeFile (path : node.fs.PathLike, data : string): std.Promise<void>, readonly writeFile (path : node.fs/promises.FileHandle, data : string): std.Promise<void>, readonly writeFile (path : node.fs.PathLike, data : std.Uint8Array): std.Promise<void>, readonly writeFile (path : node.fs/promises.FileHandle, data : std.Uint8Array): std.Promise<void>, readonly writeFile (path : node.fs.PathLike, data : string, options : node.anon.BaseEncodingOptionsmodeMo): std.Promise<void>, readonly writeFile (path : node.fs/promises.FileHandle, data : string, options : node.anon.BaseEncodingOptionsmodeMo): std.Promise<void>, readonly writeFile (path : node.fs.PathLike, data : std.Uint8Array, options : node.anon.BaseEncodingOptionsmodeMo): std.Promise<void>, readonly writeFile (path : node.fs/promises.FileHandle, data : std.Uint8Array, options : node.anon.BaseEncodingOptionsmodeMo): std.Promise<void>, readonly writeFile (path : node.fs.PathLike, data : string, options : node.BufferEncoding): std.Promise<void>, readonly writeFile (path : node.fs/promises.FileHandle, data : string, options : node.BufferEncoding): std.Promise<void>, readonly writeFile (path : node.fs.PathLike, data : std.Uint8Array, options : node.BufferEncoding): std.Promise<void>, readonly writeFile (path : node.fs/promises.FileHandle, data : std.Uint8Array, options : node.BufferEncoding): std.Promise<void>, readonly readlink (path : node.fs.PathLike): std.Promise<string>, readonly readlink (path : node.fs.PathLike): std.Promise<string>, readonly readlink (path : node.fs.PathLike, options : node.fs.BaseEncodingOptions): std.Promise<string>, readonly readlink (path : node.fs.PathLike, options : node.BufferEncoding): std.Promise<string>, readonly readlink (path : node.fs.PathLike, options : node.fs.BufferEncodingOption): std.Promise<node.Buffer>, readonly readlink (path : node.fs.PathLike): std.Promise<string | node.Buffer>, readonly readlink (path : node.fs.PathLike): std.Promise<string | node.Buffer>, readonly readlink (path : node.fs.PathLike, options : node.fs.BaseEncodingOptions): std.Promise<string | node.Buffer>, readonly readlink (path : node.fs.PathLike, options : string): std.Promise<string | node.Buffer>, readonly stat (path : node.fs.PathLike): std.Promise<node.fs.Stats>, readonly access (path : node.fs.PathLike): std.Promise<void>, readonly access (path : node.fs.PathLike, mode : number): std.Promise<void>, readonly symlink (target : node.fs.PathLike, path : node.fs.PathLike): std.Promise<void>, readonly symlink (target : node.fs.PathLike, path : node.fs.PathLike): std.Promise<void>, readonly symlink (target : node.fs.PathLike, path : node.fs.PathLike, type : string): std.Promise<void>, readonly lchown (path : node.fs.PathLike, uid : number, gid : number): std.Promise<void>, readonly utimes (path : node.fs.PathLike, atime : string, mtime : string): std.Promise<void>, readonly utimes (path : node.fs.PathLike, atime : number, mtime : string): std.Promise<void>, readonly utimes (path : node.fs.PathLike, atime : std.Date, mtime : string): std.Promise<void>, readonly utimes (path : node.fs.PathLike, atime : string, mtime : number): std.Promise<void>, readonly utimes (path : node.fs.PathLike, atime : number, mtime : number): std.Promise<void>, readonly utimes (path : node.fs.PathLike, atime : std.Date, mtime : number): std.Promise<void>, readonly utimes (path : node.fs.PathLike, atime : string, mtime : std.Date): std.Promise<void>, readonly utimes (path : node.fs.PathLike, atime : number, mtime : std.Date): std.Promise<void>, readonly utimes (path : node.fs.PathLike, atime : std.Date, mtime : std.Date): std.Promise<void>, readonly mkdir (path : node.fs.PathLike, options : node.anon.MakeDirectoryOptionsrecur): std.Promise<string>, readonly mkdir (path : node.fs.PathLike): std.Promise<void>, readonly mkdir (path : node.fs.PathLike): std.Promise<void>, readonly mkdir (path : node.fs.PathLike, options : node.fs.Mode): std.Promise<void>, readonly mkdir (path : node.fs.PathLike, options : node.anon.MakeDirectoryOptionsrecurMode): std.Promise<void>, readonly mkdir (path : node.fs.PathLike): std.Promise<string | undefined>, readonly mkdir (path : node.fs.PathLike): std.Promise<string | undefined>, readonly mkdir (path : node.fs.PathLike, options : node.fs.Mode): std.Promise<string | undefined>, readonly mkdir (path : node.fs.PathLike, options : node.fs.MakeDirectoryOptions): std.Promise<string | undefined>, readonly rename (oldPath : node.fs.PathLike, newPath : node.fs.PathLike): std.Promise<void>, readonly open (path : node.fs.PathLike, flags : string): std.Promise<node.fs/promises.FileHandle>, readonly open (path : node.fs.PathLike, flags : number): std.Promise<node.fs/promises.FileHandle>, readonly open (path : node.fs.PathLike, flags : string, mode : node.fs.Mode): std.Promise<node.fs/promises.FileHandle>, readonly open (path : node.fs.PathLike, flags : number, mode : node.fs.Mode): std.Promise<node.fs/promises.FileHandle>, readonly fdatasync (handle : node.fs/promises.FileHandle): std.Promise<void>, readonly ftruncate (handle : node.fs/promises.FileHandle): std.Promise<void>, readonly ftruncate (handle : node.fs/promises.FileHandle, len : number): std.Promise<void>, readonly rmdir (path : node.fs.PathLike): std.Promise<void>, readonly rmdir (path : node.fs.PathLike, options : node.fs.RmDirAsyncOptions): std.Promise<void>, readonly read <TBuffer extends std.Uint8Array>(handle : node.fs/promises.FileHandle, buffer : TBuffer): std.Promise<node.anon.Buffer<TBuffer>>, readonly read <TBuffer extends std.Uint8Array>(handle : node.fs/promises.FileHandle, buffer : TBuffer): std.Promise<node.anon.Buffer<TBuffer>>, readonly read <TBuffer extends std.Uint8Array>(handle : node.fs/promises.FileHandle, buffer : TBuffer): std.Promise<node.anon.Buffer<TBuffer>>, readonly read <TBuffer extends std.Uint8Array>(handle : node.fs/promises.FileHandle, buffer : TBuffer): std.Promise<node.anon.Buffer<TBuffer>>, readonly read <TBuffer extends std.Uint8Array>(handle : node.fs/promises.FileHandle, buffer : TBuffer): std.Promise<node.anon.Buffer<TBuffer>>, readonly read <TBuffer extends std.Uint8Array>(handle : node.fs/promises.FileHandle, buffer : TBuffer): std.Promise<node.anon.Buffer<TBuffer>>, readonly read <TBuffer extends std.Uint8Array>(handle : node.fs/promises.FileHandle, buffer : TBuffer): std.Promise<node.anon.Buffer<TBuffer>>, readonly read <TBuffer extends std.Uint8Array>(handle : node.fs/promises.FileHandle, buffer : TBuffer): std.Promise<node.anon.Buffer<TBuffer>>, readonly read <TBuffer extends std.Uint8Array>(handle : node.fs/promises.FileHandle, buffer : TBuffer, offset : number): std.Promise<node.anon.Buffer<TBuffer>>, readonly read <TBuffer extends std.Uint8Array>(handle : node.fs/promises.FileHandle, buffer : TBuffer, offset : number): std.Promise<node.anon.Buffer<TBuffer>>, readonly read <TBuffer extends std.Uint8Array>(handle : node.fs/promises.FileHandle, buffer : TBuffer, offset : number): std.Promise<node.anon.Buffer<TBuffer>>, readonly read <TBuffer extends std.Uint8Array>(handle : node.fs/promises.FileHandle, buffer : TBuffer, offset : number): std.Promise<node.anon.Buffer<TBuffer>>, readonly read <TBuffer extends std.Uint8Array>(handle : node.fs/promises.FileHandle, buffer : TBuffer, offset : number, length : number): std.Promise<node.anon.Buffer<TBuffer>>, readonly read <TBuffer extends std.Uint8Array>(handle : node.fs/promises.FileHandle, buffer : TBuffer, offset : null, length : number): std.Promise<node.anon.Buffer<TBuffer>>, readonly read <TBuffer extends std.Uint8Array>(handle : node.fs/promises.FileHandle, buffer : TBuffer, offset : undefined, length : number): std.Promise<node.anon.Buffer<TBuffer>>, readonly read <TBuffer extends std.Uint8Array>(handle : node.fs/promises.FileHandle, buffer : TBuffer, offset : number, length : number): std.Promise<node.anon.Buffer<TBuffer>>, readonly read <TBuffer extends std.Uint8Array>(handle : node.fs/promises.FileHandle, buffer : TBuffer, offset : null, length : number): std.Promise<node.anon.Buffer<TBuffer>>, readonly read <TBuffer extends std.Uint8Array>(handle : node.fs/promises.FileHandle, buffer : TBuffer, offset : undefined, length : number): std.Promise<node.anon.Buffer<TBuffer>>, readonly read <TBuffer extends std.Uint8Array>(handle : node.fs/promises.FileHandle, buffer : TBuffer, offset : number, length : number, position : number): std.Promise<node.anon.Buffer<TBuffer>>, readonly read <TBuffer extends std.Uint8Array>(handle : node.fs/promises.FileHandle, buffer : TBuffer, offset : null, length : number, position : number): std.Promise<node.anon.Buffer<TBuffer>>, readonly read <TBuffer extends std.Uint8Array>(handle : node.fs/promises.FileHandle, buffer : TBuffer, offset : undefined, length : number, position : number): std.Promise<node.anon.Buffer<TBuffer>>, readonly read <TBuffer extends std.Uint8Array>(handle : node.fs/promises.FileHandle, buffer : TBuffer, offset : number, length : null, position : number): std.Promise<node.anon.Buffer<TBuffer>>, readonly read <TBuffer extends std.Uint8Array>(handle : node.fs/promises.FileHandle, buffer : TBuffer, offset : null, length : null, position : number): std.Promise<node.anon.Buffer<TBuffer>>, readonly read <TBuffer extends std.Uint8Array>(handle : node.fs/promises.FileHandle, buffer : TBuffer, offset : undefined, length : null, position : number): std.Promise<node.anon.Buffer<TBuffer>>, readonly read <TBuffer extends std.Uint8Array>(handle : node.fs/promises.FileHandle, buffer : TBuffer, offset : number, length : undefined, position : number): std.Promise<node.anon.Buffer<TBuffer>>, readonly read <TBuffer extends std.Uint8Array>(handle : node.fs/promises.FileHandle, buffer : TBuffer, offset : null, length : undefined, position : number): std.Promise<node.anon.Buffer<TBuffer>>, readonly read <TBuffer extends std.Uint8Array>(handle : node.fs/promises.FileHandle, buffer : TBuffer, offset : undefined, length : undefined, position : number): std.Promise<node.anon.Buffer<TBuffer>>, readonly fsync (handle : node.fs/promises.FileHandle): std.Promise<void>, readonly unlink (path : node.fs.PathLike): std.Promise<void>, readonly chown (path : node.fs.PathLike, uid : number, gid : number): std.Promise<void>, readonly futimes (handle : node.fs/promises.FileHandle, atime : string, mtime : string): std.Promise<void>, readonly futimes (handle : node.fs/promises.FileHandle, atime : number, mtime : string): std.Promise<void>, readonly futimes (handle : node.fs/promises.FileHandle, atime : std.Date, mtime : string): std.Promise<void>, readonly futimes (handle : node.fs/promises.FileHandle, atime : string, mtime : number): std.Promise<void>, readonly futimes (handle : node.fs/promises.FileHandle, atime : number, mtime : number): std.Promise<void>, readonly futimes (handle : node.fs/promises.FileHandle, atime : std.Date, mtime : number): std.Promise<void>, readonly futimes (handle : node.fs/promises.FileHandle, atime : string, mtime : std.Date): std.Promise<void>, readonly futimes (handle : node.fs/promises.FileHandle, atime : number, mtime : std.Date): std.Promise<void>, readonly futimes (handle : node.fs/promises.FileHandle, atime : std.Date, mtime : std.Date): std.Promise<void>, readonly copyFile (src : node.fs.PathLike, dest : node.fs.PathLike): std.Promise<void>, readonly copyFile (src : node.fs.PathLike, dest : node.fs.PathLike, flags : number): std.Promise<void>, readonly write <TBuffer extends std.Uint8Array>(handle : node.fs/promises.FileHandle, buffer : TBuffer): std.Promise<node.anon.BytesWritten<TBuffer>>, readonly write <TBuffer extends std.Uint8Array>(handle : node.fs/promises.FileHandle, buffer : TBuffer): std.Promise<node.anon.BytesWritten<TBuffer>>, readonly write <TBuffer extends std.Uint8Array>(handle : node.fs/promises.FileHandle, buffer : TBuffer): std.Promise<node.anon.BytesWritten<TBuffer>>, readonly write <TBuffer extends std.Uint8Array>(handle : node.fs/promises.FileHandle, buffer : TBuffer): std.Promise<node.anon.BytesWritten<TBuffer>>, readonly write <TBuffer extends std.Uint8Array>(handle : node.fs/promises.FileHandle, buffer : TBuffer): std.Promise<node.anon.BytesWritten<TBuffer>>, readonly write <TBuffer extends std.Uint8Array>(handle : node.fs/promises.FileHandle, buffer : TBuffer): std.Promise<node.anon.BytesWritten<TBuffer>>, readonly write <TBuffer extends std.Uint8Array>(handle : node.fs/promises.FileHandle, buffer : TBuffer): std.Promise<node.anon.BytesWritten<TBuffer>>, readonly write <TBuffer extends std.Uint8Array>(handle : node.fs/promises.FileHandle, buffer : TBuffer): std.Promise<node.anon.BytesWritten<TBuffer>>, readonly write <TBuffer extends std.Uint8Array>(handle : node.fs/promises.FileHandle, buffer : TBuffer, offset : number): std.Promise<node.anon.BytesWritten<TBuffer>>, readonly write <TBuffer extends std.Uint8Array>(handle : node.fs/promises.FileHandle, buffer : TBuffer, offset : number): std.Promise<node.anon.BytesWritten<TBuffer>>, readonly write <TBuffer extends std.Uint8Array>(handle : node.fs/promises.FileHandle, buffer : TBuffer, offset : number): std.Promise<node.anon.BytesWritten<TBuffer>>, readonly write <TBuffer extends std.Uint8Array>(handle : node.fs/promises.FileHandle, buffer : TBuffer, offset : number): std.Promise<node.anon.BytesWritten<TBuffer>>, readonly write <TBuffer extends std.Uint8Array>(handle : node.fs/promises.FileHandle, buffer : TBuffer, offset : number, length : number): std.Promise<node.anon.BytesWritten<TBuffer>>, readonly write <TBuffer extends std.Uint8Array>(handle : node.fs/promises.FileHandle, buffer : TBuffer, offset : null, length : number): std.Promise<node.anon.BytesWritten<TBuffer>>, readonly write <TBuffer extends std.Uint8Array>(handle : node.fs/promises.FileHandle, buffer : TBuffer, offset : undefined, length : number): std.Promise<node.anon.BytesWritten<TBuffer>>, readonly write <TBuffer extends std.Uint8Array>(handle : node.fs/promises.FileHandle, buffer : TBuffer, offset : number, length : number): std.Promise<node.anon.BytesWritten<TBuffer>>, readonly write <TBuffer extends std.Uint8Array>(handle : node.fs/promises.FileHandle, buffer : TBuffer, offset : null, length : number): std.Promise<node.anon.BytesWritten<TBuffer>>, readonly write <TBuffer extends std.Uint8Array>(handle : node.fs/promises.FileHandle, buffer : TBuffer, offset : undefined, length : number): std.Promise<node.anon.BytesWritten<TBuffer>>, readonly write <TBuffer extends std.Uint8Array>(handle : node.fs/promises.FileHandle, buffer : TBuffer, offset : number, length : number, position : number): std.Promise<node.anon.BytesWritten<TBuffer>>, readonly write <TBuffer extends std.Uint8Array>(handle : node.fs/promises.FileHandle, buffer : TBuffer, offset : null, length : number, position : number): std.Promise<node.anon.BytesWritten<TBuffer>>, readonly write <TBuffer extends std.Uint8Array>(handle : node.fs/promises.FileHandle, buffer : TBuffer, offset : undefined, length : number, position : number): std.Promise<node.anon.BytesWritten<TBuffer>>, readonly write <TBuffer extends std.Uint8Array>(handle : node.fs/promises.FileHandle, buffer : TBuffer, offset : number, length : null, position : number): std.Promise<node.anon.BytesWritten<TBuffer>>, readonly write <TBuffer extends std.Uint8Array>(handle : node.fs/promises.FileHandle, buffer : TBuffer, offset : null, length : null, position : number): std.Promise<node.anon.BytesWritten<TBuffer>>, readonly write <TBuffer extends std.Uint8Array>(handle : node.fs/promises.FileHandle, buffer : TBuffer, offset : undefined, length : null, position : number): std.Promise<node.anon.BytesWritten<TBuffer>>, readonly write <TBuffer extends std.Uint8Array>(handle : node.fs/promises.FileHandle, buffer : TBuffer, offset : number, length : undefined, position : number): std.Promise<node.anon.BytesWritten<TBuffer>>, readonly write <TBuffer extends std.Uint8Array>(handle : node.fs/promises.FileHandle, buffer : TBuffer, offset : null, length : undefined, position : number): std.Promise<node.anon.BytesWritten<TBuffer>>, readonly write <TBuffer extends std.Uint8Array>(handle : node.fs/promises.FileHandle, buffer : TBuffer, offset : undefined, length : undefined, position : number): std.Promise<node.anon.BytesWritten<TBuffer>>, readonly write (handle : node.fs/promises.FileHandle, string : string): std.Promise<node.anon.BufferBytesWritten>, readonly write (handle : node.fs/promises.FileHandle, string : string): std.Promise<node.anon.BufferBytesWritten>, readonly write (handle : node.fs/promises.FileHandle, string : string): std.Promise<node.anon.BufferBytesWritten>, readonly write (handle : node.fs/promises.FileHandle, string : string): std.Promise<node.anon.BufferBytesWritten>, readonly write (handle : node.fs/promises.FileHandle, string : string, position : number): std.Promise<node.anon.BufferBytesWritten>, readonly write (handle : node.fs/promises.FileHandle, string : string, position : number): std.Promise<node.anon.BufferBytesWritten>, readonly write (handle : node.fs/promises.FileHandle, string : string, position : number, encoding : node.BufferEncoding): std.Promise<node.anon.BufferBytesWritten>, readonly write (handle : node.fs/promises.FileHandle, string : string, position : null, encoding : node.BufferEncoding): std.Promise<node.anon.BufferBytesWritten>, readonly write (handle : node.fs/promises.FileHandle, string : string, position : undefined, encoding : node.BufferEncoding): std.Promise<node.anon.BufferBytesWritten>, readonly fchown (handle : node.fs/promises.FileHandle, uid : number, gid : number): std.Promise<void>, readonly realpath (path : node.fs.PathLike): std.Promise<string>, readonly realpath (path : node.fs.PathLike): std.Promise<string>, readonly realpath (path : node.fs.PathLike, options : node.fs.BaseEncodingOptions): std.Promise<string>, readonly realpath (path : node.fs.PathLike, options : node.BufferEncoding): std.Promise<string>, readonly realpath (path : node.fs.PathLike, options : node.fs.BufferEncodingOption): std.Promise<node.Buffer>, readonly realpath (path : node.fs.PathLike): std.Promise<string | node.Buffer>, readonly realpath (path : node.fs.PathLike): std.Promise<string | node.Buffer>, readonly realpath (path : node.fs.PathLike, options : node.fs.BaseEncodingOptions): std.Promise<string | node.Buffer>, readonly realpath (path : node.fs.PathLike, options : node.BufferEncoding): std.Promise<string | node.Buffer>, readonly readdir (path : node.fs.PathLike): std.Promise<std.Array<string>>, readonly readdir (path : node.fs.PathLike): std.Promise<std.Array<string>>, readonly readdir (path : node.fs.PathLike, options : node.anon.BaseEncodingOptionswithFi): std.Promise<std.Array<string>>, readonly readdir (path : node.fs.PathLike, options : node.BufferEncoding): std.Promise<std.Array<string>>, readonly readdir (path : node.fs.PathLike, options : node.anon.Encoding): std.Promise<std.Array<node.Buffer>>, readonly readdir (path : node.fs.PathLike, options : 'buffer'): std.Promise<std.Array<node.Buffer>>, readonly readdir (path : node.fs.PathLike): std.Promise<std.Array<string> | std.Array<node.Buffer>>, readonly readdir (path : node.fs.PathLike): std.Promise<std.Array<string> | std.Array<node.Buffer>>, readonly readdir (path : node.fs.PathLike, options : node.anon.BaseEncodingOptionswithFi): std.Promise<std.Array<string> | std.Array<node.Buffer>>, readonly readdir (path : node.fs.PathLike, options : node.BufferEncoding): std.Promise<std.Array<string> | std.Array<node.Buffer>>, readonly readdir (path : node.fs.PathLike, options : node.anon.BaseEncodingOptionswithFiEncoding): std.Promise<std.Array<node.fs.Dirent>>, readonly mkdtemp (prefix : string): std.Promise<string>, readonly mkdtemp (prefix : string): std.Promise<string>, readonly mkdtemp (prefix : string, options : node.fs.BaseEncodingOptions): std.Promise<string>, readonly mkdtemp (prefix : string, options : node.BufferEncoding): std.Promise<string>, readonly mkdtemp (prefix : string, options : node.fs.BufferEncodingOption): std.Promise<node.Buffer>, readonly mkdtemp (prefix : string): std.Promise<string | node.Buffer>, readonly mkdtemp (prefix : string): std.Promise<string | node.Buffer>, readonly mkdtemp (prefix : string, options : node.fs.BaseEncodingOptions): std.Promise<string | node.Buffer>, readonly mkdtemp (prefix : string, options : node.BufferEncoding): std.Promise<string | node.Buffer>}, readonly lchmodSync (path : node.fs.PathLike, mode : node.fs.Mode): void,  readonly chmod :{readonly ^ (path : node.fs.PathLike, mode : node.fs.Mode, callback : node.fs.NoParamCallback): void},  readonly lstat :{readonly ^ (path : node.fs.PathLike, callback : (err : node.NodeJS.ErrnoException | null, stats : node.fs.Stats): void): void},  readonly readFile :{readonly ^ (path : node.fs.PathLike, options : node.anon.3, callback : (err : node.NodeJS.ErrnoException | null, data : node.Buffer): void): void, readonly ^ (path : number, options : node.anon.3, callback : (err : node.NodeJS.ErrnoException | null, data : node.Buffer): void): void, readonly ^ (path : node.fs.PathLike, options : undefined, callback : (err : node.NodeJS.ErrnoException | null, data : node.Buffer): void): void, readonly ^ (path : number, options : undefined, callback : (err : node.NodeJS.ErrnoException | null, data : node.Buffer): void): void, readonly ^ (path : node.fs.PathLike, options : null, callback : (err : node.NodeJS.ErrnoException | null, data : node.Buffer): void): void, readonly ^ (path : number, options : null, callback : (err : node.NodeJS.ErrnoException | null, data : node.Buffer): void): void, readonly ^ (path : node.fs.PathLike, options : node.anon.EncodingBufferEncoding, callback : (err : node.NodeJS.ErrnoException | null, data : string): void): void, readonly ^ (path : number, options : node.anon.EncodingBufferEncoding, callback : (err : node.NodeJS.ErrnoException | null, data : string): void): void, readonly ^ (path : node.fs.PathLike, options : string, callback : (err : node.NodeJS.ErrnoException | null, data : string): void): void, readonly ^ (path : number, options : string, callback : (err : node.NodeJS.ErrnoException | null, data : string): void): void, readonly ^ (path : node.fs.PathLike, options : node.anon.BaseEncodingOptionsflagst, callback : (err : node.NodeJS.ErrnoException | null, data : string | node.Buffer): void): void, readonly ^ (path : number, options : node.anon.BaseEncodingOptionsflagst, callback : (err : node.NodeJS.ErrnoException | null, data : string | node.Buffer): void): void, readonly ^ (path : node.fs.PathLike, options : string, callback : (err : node.NodeJS.ErrnoException | null, data : string | node.Buffer): void): void, readonly ^ (path : number, options : string, callback : (err : node.NodeJS.ErrnoException | null, data : string | node.Buffer): void): void, readonly ^ (path : node.fs.PathLike, options : undefined, callback : (err : node.NodeJS.ErrnoException | null, data : string | node.Buffer): void): void, readonly ^ (path : number, options : undefined, callback : (err : node.NodeJS.ErrnoException | null, data : string | node.Buffer): void): void, readonly ^ (path : node.fs.PathLike, options : null, callback : (err : node.NodeJS.ErrnoException | null, data : string | node.Buffer): void): void, readonly ^ (path : number, options : null, callback : (err : node.NodeJS.ErrnoException | null, data : string | node.Buffer): void): void, readonly ^ (path : node.fs.PathLike, callback : (err : node.NodeJS.ErrnoException | null, data : node.Buffer): void): void, readonly ^ (path : number, callback : (err : node.NodeJS.ErrnoException | null, data : node.Buffer): void): void},  readonly exists :{readonly ^ (path : node.fs.PathLike, callback : (exists : boolean): void): void}, readonly copyFileSync (src : node.fs.PathLike, dest : node.fs.PathLike): void, readonly copyFileSync (src : node.fs.PathLike, dest : node.fs.PathLike, flags : number): void,  readonly opendir :{readonly ^ (path : string, cb : (err : node.NodeJS.ErrnoException | null, dir : node.fs.Dir): void): void, readonly ^ (path : string, options : node.fs.OpenDirOptions, cb : (err : node.NodeJS.ErrnoException | null, dir : node.fs.Dir): void): void}, readonly ftruncateSync (fd : number): void, readonly ftruncateSync (fd : number): void, readonly ftruncateSync (fd : number, len : number): void, readonly appendFileSync (file : node.fs.PathLike, data : string): void, readonly appendFileSync (file : number, data : string): void, readonly appendFileSync (file : node.fs.PathLike, data : std.Uint8Array): void, readonly appendFileSync (file : number, data : std.Uint8Array): void, readonly appendFileSync (file : node.fs.PathLike, data : string, options : node.fs.WriteFileOptions): void, readonly appendFileSync (file : number, data : string, options : node.fs.WriteFileOptions): void, readonly appendFileSync (file : node.fs.PathLike, data : std.Uint8Array, options : node.fs.WriteFileOptions): void, readonly appendFileSync (file : number, data : std.Uint8Array, options : node.fs.WriteFileOptions): void,  readonly close :{readonly ^ (fd : number, callback : node.fs.NoParamCallback): void}, readonly statSync (path : node.fs.PathLike): node.fs.Stats, readonly accessSync (path : node.fs.PathLike): void, readonly accessSync (path : node.fs.PathLike, mode : number): void, readonly symlinkSync (target : node.fs.PathLike, path : node.fs.PathLike): void, readonly symlinkSync (target : node.fs.PathLike, path : node.fs.PathLike): void, readonly symlinkSync (target : node.fs.PathLike, path : node.fs.PathLike, type : node.fs.symlink.Type): void,  readonly fstat :{readonly ^ (fd : number, callback : (err : node.NodeJS.ErrnoException | null, stats : node.fs.Stats): void): void},  readonly link :{readonly ^ (existingPath : node.fs.PathLike, newPath : node.fs.PathLike, callback : node.fs.NoParamCallback): void},  readonly realpathSync :{readonly native (path : node.fs.PathLike): string, readonly native (path : node.fs.PathLike): string, readonly native (path : node.fs.PathLike, options : node.fs.BaseEncodingOptions): string, readonly native (path : node.fs.PathLike, options : node.BufferEncoding): string, readonly native (path : node.fs.PathLike, options : node.fs.BufferEncodingOption): node.Buffer, readonly native (path : node.fs.PathLike): string | node.Buffer, readonly native (path : node.fs.PathLike): string | node.Buffer, readonly native (path : node.fs.PathLike, options : node.fs.BaseEncodingOptions): string | node.Buffer, readonly native (path : node.fs.PathLike, options : string): string | node.Buffer, readonly ^ (path : node.fs.PathLike): string, readonly ^ (path : node.fs.PathLike): string, readonly ^ (path : node.fs.PathLike, options : node.fs.BaseEncodingOptions): string, readonly ^ (path : node.fs.PathLike, options : node.BufferEncoding): string, readonly ^ (path : node.fs.PathLike, options : node.fs.BufferEncodingOption): node.Buffer, readonly ^ (path : node.fs.PathLike): string | node.Buffer, readonly ^ (path : node.fs.PathLike): string | node.Buffer, readonly ^ (path : node.fs.PathLike, options : node.fs.BaseEncodingOptions): string | node.Buffer, readonly ^ (path : node.fs.PathLike, options : string): string | node.Buffer},  readonly writeFile :{readonly ^ (path : node.fs.PathLike, data : string, options : node.fs.WriteFileOptions, callback : node.fs.NoParamCallback): void, readonly ^ (path : number, data : string, options : node.fs.WriteFileOptions, callback : node.fs.NoParamCallback): void, readonly ^ (path : node.fs.PathLike, data : node.NodeJS.ArrayBufferView, options : node.fs.WriteFileOptions, callback : node.fs.NoParamCallback): void, readonly ^ (path : number, data : node.NodeJS.ArrayBufferView, options : node.fs.WriteFileOptions, callback : node.fs.NoParamCallback): void, readonly ^ (path : node.fs.PathLike, data : string, callback : node.fs.NoParamCallback): void, readonly ^ (path : number, data : string, callback : node.fs.NoParamCallback): void, readonly ^ (path : node.fs.PathLike, data : node.NodeJS.ArrayBufferView, callback : node.fs.NoParamCallback): void, readonly ^ (path : number, data : node.NodeJS.ArrayBufferView, callback : node.fs.NoParamCallback): void},  readonly readlink :{readonly ^ (path : node.fs.PathLike, options : node.fs.BaseEncodingOptions, callback : (err : node.NodeJS.ErrnoException | null, linkString : string): void): void, readonly ^ (path : node.fs.PathLike, options : node.BufferEncoding, callback : (err : node.NodeJS.ErrnoException | null, linkString : string): void): void, readonly ^ (path : node.fs.PathLike, options : undefined, callback : (err : node.NodeJS.ErrnoException | null, linkString : string): void): void, readonly ^ (path : node.fs.PathLike, options : null, callback : (err : node.NodeJS.ErrnoException | null, linkString : string): void): void, readonly ^ (path : node.fs.PathLike, options : node.fs.BufferEncodingOption, callback : (err : node.NodeJS.ErrnoException | null, linkString : node.Buffer): void): void, readonly ^ (path : node.fs.PathLike, options : node.fs.BaseEncodingOptions, callback : (err : node.NodeJS.ErrnoException | null, linkString : string | node.Buffer): void): void, readonly ^ (path : node.fs.PathLike, options : string, callback : (err : node.NodeJS.ErrnoException | null, linkString : string | node.Buffer): void): void, readonly ^ (path : node.fs.PathLike, options : undefined, callback : (err : node.NodeJS.ErrnoException | null, linkString : string | node.Buffer): void): void, readonly ^ (path : node.fs.PathLike, options : null, callback : (err : node.NodeJS.ErrnoException | null, linkString : string | node.Buffer): void): void, readonly ^ (path : node.fs.PathLike, callback : (err : node.NodeJS.ErrnoException | null, linkString : string): void): void}, readonly writevSync (fd : number, buffers : std.Array<node.NodeJS.ArrayBufferView>): number, readonly writevSync (fd : number, buffers : std.Array<node.NodeJS.ArrayBufferView>, position : number): number, readonly createWriteStream (path : node.fs.PathLike): node.fs.WriteStream, readonly createWriteStream (path : node.fs.PathLike, options : string): node.fs.WriteStream, readonly createWriteStream (path : node.fs.PathLike, options : node.anon.EmitClose): node.fs.WriteStream,   Stats :new (): node.fs.Stats, readonly readSync (fd : number, buffer : node.NodeJS.ArrayBufferView, offset : number, length : number): number, readonly readSync (fd : number, buffer : node.NodeJS.ArrayBufferView, offset : number, length : number, position : number): number, readonly readSync (fd : number, buffer : node.NodeJS.ArrayBufferView): number, readonly readSync (fd : number, buffer : node.NodeJS.ArrayBufferView, opts : node.fs.ReadSyncOptions): number, readonly readFileSync (path : node.fs.PathLike): node.Buffer, readonly readFileSync (path : number): node.Buffer, readonly readFileSync (path : node.fs.PathLike): node.Buffer, readonly readFileSync (path : number): node.Buffer, readonly readFileSync (path : node.fs.PathLike, options : node.anon.3): node.Buffer, readonly readFileSync (path : number, options : node.anon.3): node.Buffer, readonly readFileSync (path : node.fs.PathLike, options : node.anon.EncodingBufferEncoding): string, readonly readFileSync (path : number, options : node.anon.EncodingBufferEncoding): string, readonly readFileSync (path : node.fs.PathLike, options : node.BufferEncoding): string, readonly readFileSync (path : number, options : node.BufferEncoding): string, readonly readFileSync (path : node.fs.PathLike): string | node.Buffer, readonly readFileSync (path : number): string | node.Buffer, readonly readFileSync (path : node.fs.PathLike): string | node.Buffer, readonly readFileSync (path : number): string | node.Buffer, readonly readFileSync (path : node.fs.PathLike, options : node.anon.BaseEncodingOptionsflagst): string | node.Buffer, readonly readFileSync (path : number, options : node.anon.BaseEncodingOptionsflagst): string | node.Buffer, readonly readFileSync (path : node.fs.PathLike, options : node.BufferEncoding): string | node.Buffer, readonly readFileSync (path : number, options : node.BufferEncoding): string | node.Buffer,  readonly stat :{readonly ^ (path : node.fs.PathLike, callback : (err : node.NodeJS.ErrnoException | null, stats : node.fs.Stats): void): void}, readonly unwatchFile (filename : node.fs.PathLike): void, readonly unwatchFile (filename : node.fs.PathLike, listener : (curr : node.fs.Stats, prev : node.fs.Stats): void): void,  readonly readv :{readonly ^ (fd : number, buffers : std.Array<node.NodeJS.ArrayBufferView>, cb : (err : node.NodeJS.ErrnoException | null, bytesRead : number, buffers : std.Array<node.NodeJS.ArrayBufferView>): void): void, readonly ^ (fd : number, buffers : std.Array<node.NodeJS.ArrayBufferView>, position : number, cb : (err : node.NodeJS.ErrnoException | null, bytesRead : number, buffers : std.Array<node.NodeJS.ArrayBufferView>): void): void},  readonly access :{readonly ^ (path : node.fs.PathLike, mode : number, callback : node.fs.NoParamCallback): void, readonly ^ (path : node.fs.PathLike, mode : undefined, callback : node.fs.NoParamCallback): void, readonly ^ (path : node.fs.PathLike, callback : node.fs.NoParamCallback): void},  readonly constants :{ readonly O_RDONLY :number,  readonly O_DIRECT :number,  readonly UV_FS_O_FILEMAP :number,  readonly S_IXGRP :number,  readonly S_IFMT :number,  readonly S_IFLNK :number,  readonly S_IFREG :number,  readonly O_NOCTTY :number,  readonly S_IFIFO :number,  readonly O_NOFOLLOW :number,  readonly O_WRONLY :number,  readonly S_IFBLK :number,  readonly COPYFILE_EXCL :number,  readonly S_IRGRP :number,  readonly O_APPEND :number,  readonly S_IRWXU :number,  readonly COPYFILE_FICLONE_FORCE :number,  readonly S_IFSOCK :number,  readonly S_IWOTH :number,  readonly O_NONBLOCK :number,  readonly O_RDWR :number,  readonly S_IWGRP :number,  readonly S_IFCHR :number,  readonly S_IRWXO :number,  readonly O_NOATIME :number,  readonly O_EXCL :number,  readonly S_IWUSR :number,  readonly S_IXUSR :number,  readonly F_OK :number,  readonly X_OK :number,  readonly COPYFILE_FICLONE :number,  readonly O_SYMLINK :number,  readonly O_DSYNC :number,  readonly O_TRUNC :number,  readonly S_IRUSR :number,  readonly O_SYNC :number,  readonly R_OK :number,  readonly S_IXOTH :number,  readonly S_IROTH :number,  readonly O_DIRECTORY :number,  readonly S_IRWXG :number,  readonly S_IFDIR :number,  readonly O_CREAT :number,  readonly W_OK :number},  readonly symlink :{readonly ^ (target : node.fs.PathLike, path : node.fs.PathLike, type : node.fs.symlink.Type, callback : node.fs.NoParamCallback): void, readonly ^ (target : node.fs.PathLike, path : node.fs.PathLike, type : undefined, callback : node.fs.NoParamCallback): void, readonly ^ (target : node.fs.PathLike, path : node.fs.PathLike, type : null, callback : node.fs.NoParamCallback): void, readonly ^ (target : node.fs.PathLike, path : node.fs.PathLike, callback : node.fs.NoParamCallback): void},  readonly lchown :{readonly ^ (path : node.fs.PathLike, uid : number, gid : number, callback : node.fs.NoParamCallback): void}, readonly chownSync (path : node.fs.PathLike, uid : number, gid : number): void,  readonly utimes :{readonly ^ (path : node.fs.PathLike, atime : string, mtime : string, callback : node.fs.NoParamCallback): void, readonly ^ (path : node.fs.PathLike, atime : number, mtime : string, callback : node.fs.NoParamCallback): void, readonly ^ (path : node.fs.PathLike, atime : std.Date, mtime : string, callback : node.fs.NoParamCallback): void, readonly ^ (path : node.fs.PathLike, atime : string, mtime : number, callback : node.fs.NoParamCallback): void, readonly ^ (path : node.fs.PathLike, atime : number, mtime : number, callback : node.fs.NoParamCallback): void, readonly ^ (path : node.fs.PathLike, atime : std.Date, mtime : number, callback : node.fs.NoParamCallback): void, readonly ^ (path : node.fs.PathLike, atime : string, mtime : std.Date, callback : node.fs.NoParamCallback): void, readonly ^ (path : node.fs.PathLike, atime : number, mtime : std.Date, callback : node.fs.NoParamCallback): void, readonly ^ (path : node.fs.PathLike, atime : std.Date, mtime : std.Date, callback : node.fs.NoParamCallback): void}, readonly lchownSync (path : node.fs.PathLike, uid : number, gid : number): void, readonly closeSync (fd : number): void, readonly opendirSync (path : string): node.fs.Dir, readonly opendirSync (path : string, options : node.fs.OpenDirOptions): node.fs.Dir, readonly readvSync (fd : number, buffers : std.Array<node.NodeJS.ArrayBufferView>): number, readonly readvSync (fd : number, buffers : std.Array<node.NodeJS.ArrayBufferView>, position : number): number, readonly watchFile (filename : node.fs.PathLike, options : node.anon.Interval, listener : (curr : node.fs.Stats, prev : node.fs.Stats): void): void, readonly watchFile (filename : node.fs.PathLike, options : undefined, listener : (curr : node.fs.Stats, prev : node.fs.Stats): void): void, readonly watchFile (filename : node.fs.PathLike, listener : (curr : node.fs.Stats, prev : node.fs.Stats): void): void,  readonly mkdir :{readonly ^ (path : node.fs.PathLike, options : node.anon.MakeDirectoryOptionsrecur, callback : (err : node.NodeJS.ErrnoException | null, path : string): void): void, readonly ^ (path : node.fs.PathLike, options : node.fs.Mode, callback : node.fs.NoParamCallback): void, readonly ^ (path : node.fs.PathLike, options : node.anon.MakeDirectoryOptionsrecurMode, callback : node.fs.NoParamCallback): void, readonly ^ (path : node.fs.PathLike, options : null, callback : node.fs.NoParamCallback): void, readonly ^ (path : node.fs.PathLike, options : undefined, callback : node.fs.NoParamCallback): void, readonly ^ (path : node.fs.PathLike, options : node.fs.Mode, callback : (err : node.NodeJS.ErrnoException | null, path : string | undefined): void): void, readonly ^ (path : node.fs.PathLike, options : node.fs.MakeDirectoryOptions, callback : (err : node.NodeJS.ErrnoException | null, path : string | undefined): void): void, readonly ^ (path : node.fs.PathLike, options : null, callback : (err : node.NodeJS.ErrnoException | null, path : string | undefined): void): void, readonly ^ (path : node.fs.PathLike, options : undefined, callback : (err : node.NodeJS.ErrnoException | null, path : string | undefined): void): void, readonly ^ (path : node.fs.PathLike, callback : node.fs.NoParamCallback): void},  readonly rename :{readonly ^ (oldPath : node.fs.PathLike, newPath : node.fs.PathLike, callback : node.fs.NoParamCallback): void},   Dirent :new (): node.fs.Dirent, readonly fstatSync (fd : number): node.fs.Stats,  readonly open :{readonly ^ (path : node.fs.PathLike, flags : node.fs.OpenMode, mode : node.fs.Mode, callback : (err : node.NodeJS.ErrnoException | null, fd : number): void): void, readonly ^ (path : node.fs.PathLike, flags : node.fs.OpenMode, mode : undefined, callback : (err : node.NodeJS.ErrnoException | null, fd : number): void): void, readonly ^ (path : node.fs.PathLike, flags : node.fs.OpenMode, mode : null, callback : (err : node.NodeJS.ErrnoException | null, fd : number): void): void, readonly ^ (path : node.fs.PathLike, flags : node.fs.OpenMode, callback : (err : node.NodeJS.ErrnoException | null, fd : number): void): void},  readonly fdatasync :{readonly ^ (fd : number, callback : node.fs.NoParamCallback): void}, readonly createReadStream (path : node.fs.PathLike): node.fs.ReadStream, readonly createReadStream (path : node.fs.PathLike, options : string): node.fs.ReadStream, readonly createReadStream (path : node.fs.PathLike, options : node.anon.AutoClose): node.fs.ReadStream, readonly fsyncSync (fd : number): void,  readonly ftruncate :{readonly ^ (fd : number, len : number, callback : node.fs.NoParamCallback): void, readonly ^ (fd : number, len : undefined, callback : node.fs.NoParamCallback): void, readonly ^ (fd : number, len : null, callback : node.fs.NoParamCallback): void, readonly ^ (fd : number, callback : node.fs.NoParamCallback): void},  readonly rmdir :{readonly ^ (path : node.fs.PathLike, callback : node.fs.NoParamCallback): void, readonly ^ (path : node.fs.PathLike, options : node.fs.RmDirAsyncOptions, callback : node.fs.NoParamCallback): void}, readonly lstatSync (path : node.fs.PathLike): node.fs.Stats,  readonly read :{readonly ^ (fd : number, buffer : std.Uint8Array, offset : number, length : number, position : number, callback : (err : node.NodeJS.ErrnoException | null, bytesRead : number, buffer : std.Uint8Array): void): void, readonly ^ (fd : number, buffer : std.Uint8Array, offset : number, length : number, position : null, callback : (err : node.NodeJS.ErrnoException | null, bytesRead : number, buffer : std.Uint8Array): void): void, readonly ^ (fd : number, buffer : std.Uint8ClampedArray, offset : number, length : number, position : number, callback : (err : node.NodeJS.ErrnoException | null, bytesRead : number, buffer : std.Uint8ClampedArray): void): void, readonly ^ (fd : number, buffer : std.Uint8ClampedArray, offset : number, length : number, position : null, callback : (err : node.NodeJS.ErrnoException | null, bytesRead : number, buffer : std.Uint8ClampedArray): void): void, readonly ^ (fd : number, buffer : std.Uint16Array, offset : number, length : number, position : number, callback : (err : node.NodeJS.ErrnoException | null, bytesRead : number, buffer : std.Uint16Array): void): void, readonly ^ (fd : number, buffer : std.Uint16Array, offset : number, length : number, position : null, callback : (err : node.NodeJS.ErrnoException | null, bytesRead : number, buffer : std.Uint16Array): void): void, readonly ^ (fd : number, buffer : std.Uint32Array, offset : number, length : number, position : number, callback : (err : node.NodeJS.ErrnoException | null, bytesRead : number, buffer : std.Uint32Array): void): void, readonly ^ (fd : number, buffer : std.Uint32Array, offset : number, length : number, position : null, callback : (err : node.NodeJS.ErrnoException | null, bytesRead : number, buffer : std.Uint32Array): void): void, readonly ^ (fd : number, buffer : std.Int8Array, offset : number, length : number, position : number, callback : (err : node.NodeJS.ErrnoException | null, bytesRead : number, buffer : std.Int8Array): void): void, readonly ^ (fd : number, buffer : std.Int8Array, offset : number, length : number, position : null, callback : (err : node.NodeJS.ErrnoException | null, bytesRead : number, buffer : std.Int8Array): void): void, readonly ^ (fd : number, buffer : std.Int16Array, offset : number, length : number, position : number, callback : (err : node.NodeJS.ErrnoException | null, bytesRead : number, buffer : std.Int16Array): void): void, readonly ^ (fd : number, buffer : std.Int16Array, offset : number, length : number, position : null, callback : (err : node.NodeJS.ErrnoException | null, bytesRead : number, buffer : std.Int16Array): void): void, readonly ^ (fd : number, buffer : std.Int32Array, offset : number, length : number, position : number, callback : (err : node.NodeJS.ErrnoException | null, bytesRead : number, buffer : std.Int32Array): void): void, readonly ^ (fd : number, buffer : std.Int32Array, offset : number, length : number, position : null, callback : (err : node.NodeJS.ErrnoException | null, bytesRead : number, buffer : std.Int32Array): void): void, readonly ^ (fd : number, buffer : std.Float32Array, offset : number, length : number, position : number, callback : (err : node.NodeJS.ErrnoException | null, bytesRead : number, buffer : std.Float32Array): void): void, readonly ^ (fd : number, buffer : std.Float32Array, offset : number, length : number, position : null, callback : (err : node.NodeJS.ErrnoException | null, bytesRead : number, buffer : std.Float32Array): void): void, readonly ^ (fd : number, buffer : std.Float64Array, offset : number, length : number, position : number, callback : (err : node.NodeJS.ErrnoException | null, bytesRead : number, buffer : std.Float64Array): void): void, readonly ^ (fd : number, buffer : std.Float64Array, offset : number, length : number, position : null, callback : (err : node.NodeJS.ErrnoException | null, bytesRead : number, buffer : std.Float64Array): void): void, readonly ^ (fd : number, buffer : std.DataView, offset : number, length : number, position : number, callback : (err : node.NodeJS.ErrnoException | null, bytesRead : number, buffer : std.DataView): void): void, readonly ^ (fd : number, buffer : std.DataView, offset : number, length : number, position : null, callback : (err : node.NodeJS.ErrnoException | null, bytesRead : number, buffer : std.DataView): void): void},   Dir :new (): node.fs.Dir, readonly writeSync (fd : number, buffer : node.NodeJS.ArrayBufferView): number, readonly writeSync (fd : number, buffer : node.NodeJS.ArrayBufferView): number, readonly writeSync (fd : number, buffer : node.NodeJS.ArrayBufferView): number, readonly writeSync (fd : number, buffer : node.NodeJS.ArrayBufferView): number, readonly writeSync (fd : number, buffer : node.NodeJS.ArrayBufferView): number, readonly writeSync (fd : number, buffer : node.NodeJS.ArrayBufferView): number, readonly writeSync (fd : number, buffer : node.NodeJS.ArrayBufferView): number, readonly writeSync (fd : number, buffer : node.NodeJS.ArrayBufferView): number, readonly writeSync (fd : number, buffer : node.NodeJS.ArrayBufferView, offset : number): number, readonly writeSync (fd : number, buffer : node.NodeJS.ArrayBufferView, offset : number): number, readonly writeSync (fd : number, buffer : node.NodeJS.ArrayBufferView, offset : number): number, readonly writeSync (fd : number, buffer : node.NodeJS.ArrayBufferView, offset : number): number, readonly writeSync (fd : number, buffer : node.NodeJS.ArrayBufferView, offset : number, length : number): number, readonly writeSync (fd : number, buffer : node.NodeJS.ArrayBufferView, offset : null, length : number): number, readonly writeSync (fd : number, buffer : node.NodeJS.ArrayBufferView, offset : undefined, length : number): number, readonly writeSync (fd : number, buffer : node.NodeJS.ArrayBufferView, offset : number, length : number): number, readonly writeSync (fd : number, buffer : node.NodeJS.ArrayBufferView, offset : null, length : number): number, readonly writeSync (fd : number, buffer : node.NodeJS.ArrayBufferView, offset : undefined, length : number): number, readonly writeSync (fd : number, buffer : node.NodeJS.ArrayBufferView, offset : number, length : number, position : number): number, readonly writeSync (fd : number, buffer : node.NodeJS.ArrayBufferView, offset : null, length : number, position : number): number, readonly writeSync (fd : number, buffer : node.NodeJS.ArrayBufferView, offset : undefined, length : number, position : number): number, readonly writeSync (fd : number, buffer : node.NodeJS.ArrayBufferView, offset : number, length : null, position : number): number, readonly writeSync (fd : number, buffer : node.NodeJS.ArrayBufferView, offset : null, length : null, position : number): number, readonly writeSync (fd : number, buffer : node.NodeJS.ArrayBufferView, offset : undefined, length : null, position : number): number, readonly writeSync (fd : number, buffer : node.NodeJS.ArrayBufferView, offset : number, length : undefined, position : number): number, readonly writeSync (fd : number, buffer : node.NodeJS.ArrayBufferView, offset : null, length : undefined, position : number): number, readonly writeSync (fd : number, buffer : node.NodeJS.ArrayBufferView, offset : undefined, length : undefined, position : number): number, readonly writeSync (fd : number, string : string): number, readonly writeSync (fd : number, string : string): number, readonly writeSync (fd : number, string : string): number, readonly writeSync (fd : number, string : string): number, readonly writeSync (fd : number, string : string, position : number): number, readonly writeSync (fd : number, string : string, position : number): number, readonly writeSync (fd : number, string : string, position : number, encoding : node.BufferEncoding): number, readonly writeSync (fd : number, string : string, position : null, encoding : node.BufferEncoding): number, readonly writeSync (fd : number, string : string, position : undefined, encoding : node.BufferEncoding): number, readonly rmdirSync (path : node.fs.PathLike): void, readonly rmdirSync (path : node.fs.PathLike, options : node.fs.RmDirOptions): void, readonly utimesSync (path : node.fs.PathLike, atime : string, mtime : string): void, readonly utimesSync (path : node.fs.PathLike, atime : number, mtime : string): void, readonly utimesSync (path : node.fs.PathLike, atime : std.Date, mtime : string): void, readonly utimesSync (path : node.fs.PathLike, atime : string, mtime : number): void, readonly utimesSync (path : node.fs.PathLike, atime : number, mtime : number): void, readonly utimesSync (path : node.fs.PathLike, atime : std.Date, mtime : number): void, readonly utimesSync (path : node.fs.PathLike, atime : string, mtime : std.Date): void, readonly utimesSync (path : node.fs.PathLike, atime : number, mtime : std.Date): void, readonly utimesSync (path : node.fs.PathLike, atime : std.Date, mtime : std.Date): void,  readonly fsync :{readonly ^ (fd : number, callback : node.fs.NoParamCallback): void}, readonly linkSync (existingPath : node.fs.PathLike, newPath : node.fs.PathLike): void, readonly mkdirSync (path : node.fs.PathLike, options : node.anon.MakeDirectoryOptionsrecur): string, readonly mkdirSync (path : node.fs.PathLike): void, readonly mkdirSync (path : node.fs.PathLike): void, readonly mkdirSync (path : node.fs.PathLike, options : node.fs.Mode): void, readonly mkdirSync (path : node.fs.PathLike, options : node.anon.MakeDirectoryOptionsrecurMode): void, readonly mkdirSync (path : node.fs.PathLike): string | undefined, readonly mkdirSync (path : node.fs.PathLike): string | undefined, readonly mkdirSync (path : node.fs.PathLike, options : node.fs.Mode): string | undefined, readonly mkdirSync (path : node.fs.PathLike, options : node.fs.MakeDirectoryOptions): string | undefined,  readonly unlink :{readonly ^ (path : node.fs.PathLike, callback : node.fs.NoParamCallback): void},  readonly chown :{readonly ^ (path : node.fs.PathLike, uid : number, gid : number, callback : node.fs.NoParamCallback): void},  readonly futimes :{readonly ^ (fd : number, atime : string, mtime : string, callback : node.fs.NoParamCallback): void, readonly ^ (fd : number, atime : number, mtime : string, callback : node.fs.NoParamCallback): void, readonly ^ (fd : number, atime : std.Date, mtime : string, callback : node.fs.NoParamCallback): void, readonly ^ (fd : number, atime : string, mtime : number, callback : node.fs.NoParamCallback): void, readonly ^ (fd : number, atime : number, mtime : number, callback : node.fs.NoParamCallback): void, readonly ^ (fd : number, atime : std.Date, mtime : number, callback : node.fs.NoParamCallback): void, readonly ^ (fd : number, atime : string, mtime : std.Date, callback : node.fs.NoParamCallback): void, readonly ^ (fd : number, atime : number, mtime : std.Date, callback : node.fs.NoParamCallback): void, readonly ^ (fd : number, atime : std.Date, mtime : std.Date, callback : node.fs.NoParamCallback): void}, readonly renameSync (oldPath : node.fs.PathLike, newPath : node.fs.PathLike): void,  readonly copyFile :{readonly ^ (src : node.fs.PathLike, dest : node.fs.PathLike, callback : node.fs.NoParamCallback): void, readonly ^ (src : node.fs.PathLike, dest : node.fs.PathLike, flags : number, callback : node.fs.NoParamCallback): void}, readonly openSync (path : node.fs.PathLike, flags : node.fs.OpenMode): number, readonly openSync (path : node.fs.PathLike, flags : node.fs.OpenMode): number, readonly openSync (path : node.fs.PathLike, flags : node.fs.OpenMode, mode : node.fs.Mode): number,  readonly write :{readonly ^ (fd : number, buffer : std.Uint8Array, offset : number, length : number, position : number, callback : (err : node.NodeJS.ErrnoException | null, written : number, buffer : std.Uint8Array): void): void, readonly ^ (fd : number, buffer : std.Uint8Array, offset : undefined, length : number, position : number, callback : (err : node.NodeJS.ErrnoException | null, written : number, buffer : std.Uint8Array): void): void, readonly ^ (fd : number, buffer : std.Uint8Array, offset : null, length : number, position : number, callback : (err : node.NodeJS.ErrnoException | null, written : number, buffer : std.Uint8Array): void): void, readonly ^ (fd : number, buffer : std.Uint8Array, offset : number, length : undefined, position : number, callback : (err : node.NodeJS.ErrnoException | null, written : number, buffer : std.Uint8Array): void): void, readonly ^ (fd : number, buffer : std.Uint8Array, offset : undefined, length : undefined, position : number, callback : (err : node.NodeJS.ErrnoException | null, written : number, buffer : std.Uint8Array): void): void, readonly ^ (fd : number, buffer : std.Uint8Array, offset : null, length : undefined, position : number, callback : (err : node.NodeJS.ErrnoException | null, written : number, buffer : std.Uint8Array): void): void, readonly ^ (fd : number, buffer : std.Uint8Array, offset : number, length : null, position : number, callback : (err : node.NodeJS.ErrnoException | null, written : number, buffer : std.Uint8Array): void): void, readonly ^ (fd : number, buffer : std.Uint8Array, offset : undefined, length : null, position : number, callback : (err : node.NodeJS.ErrnoException | null, written : number, buffer : std.Uint8Array): void): void, readonly ^ (fd : number, buffer : std.Uint8Array, offset : null, length : null, position : number, callback : (err : node.NodeJS.ErrnoException | null, written : number, buffer : std.Uint8Array): void): void, readonly ^ (fd : number, buffer : std.Uint8Array, offset : number, length : number, position : undefined, callback : (err : node.NodeJS.ErrnoException | null, written : number, buffer : std.Uint8Array): void): void, readonly ^ (fd : number, buffer : std.Uint8Array, offset : undefined, length : number, position : undefined, callback : (err : node.NodeJS.ErrnoException | null, written : number, buffer : std.Uint8Array): void): void, readonly ^ (fd : number, buffer : std.Uint8Array, offset : null, length : number, position : undefined, callback : (err : node.NodeJS.ErrnoException | null, written : number, buffer : std.Uint8Array): void): void, readonly ^ (fd : number, buffer : std.Uint8Array, offset : number, length : undefined, position : undefined, callback : (err : node.NodeJS.ErrnoException | null, written : number, buffer : std.Uint8Array): void): void, readonly ^ (fd : number, buffer : std.Uint8Array, offset : undefined, length : undefined, position : undefined, callback : (err : node.NodeJS.ErrnoException | null, written : number, buffer : std.Uint8Array): void): void, readonly ^ (fd : number, buffer : std.Uint8Array, offset : null, length : undefined, position : undefined, callback : (err : node.NodeJS.ErrnoException | null, written : number, buffer : std.Uint8Array): void): void, readonly ^ (fd : number, buffer : std.Uint8Array, offset : number, length : null, position : undefined, callback : (err : node.NodeJS.ErrnoException | null, written : number, buffer : std.Uint8Array): void): void, readonly ^ (fd : number, buffer : std.Uint8Array, offset : undefined, length : null, position : undefined, callback : (err : node.NodeJS.ErrnoException | null, written : number, buffer : std.Uint8Array): void): void, readonly ^ (fd : number, buffer : std.Uint8Array, offset : null, length : null, position : undefined, callback : (err : node.NodeJS.ErrnoException | null, written : number, buffer : std.Uint8Array): void): void, readonly ^ (fd : number, buffer : std.Uint8Array, offset : number, length : number, position : null, callback : (err : node.NodeJS.ErrnoException | null, written : number, buffer : std.Uint8Array): void): void, readonly ^ (fd : number, buffer : std.Uint8Array, offset : undefined, length : number, position : null, callback : (err : node.NodeJS.ErrnoException | null, written : number, buffer : std.Uint8Array): void): void, readonly ^ (fd : number, buffer : std.Uint8Array, offset : null, length : number, position : null, callback : (err : node.NodeJS.ErrnoException | null, written : number, buffer : std.Uint8Array): void): void, readonly ^ (fd : number, buffer : std.Uint8Array, offset : number, length : undefined, position : null, callback : (err : node.NodeJS.ErrnoException | null, written : number, buffer : std.Uint8Array): void): void, readonly ^ (fd : number, buffer : std.Uint8Array, offset : undefined, length : undefined, position : null, callback : (err : node.NodeJS.ErrnoException | null, written : number, buffer : std.Uint8Array): void): void, readonly ^ (fd : number, buffer : std.Uint8Array, offset : null, length : undefined, position : null, callback : (err : node.NodeJS.ErrnoException | null, written : number, buffer : std.Uint8Array): void): void, readonly ^ (fd : number, buffer : std.Uint8Array, offset : number, length : null, position : null, callback : (err : node.NodeJS.ErrnoException | null, written : number, buffer : std.Uint8Array): void): void, readonly ^ (fd : number, buffer : std.Uint8Array, offset : undefined, length : null, position : null, callback : (err : node.NodeJS.ErrnoException | null, written : number, buffer : std.Uint8Array): void): void, readonly ^ (fd : number, buffer : std.Uint8Array, offset : null, length : null, position : null, callback : (err : node.NodeJS.ErrnoException | null, written : number, buffer : std.Uint8Array): void): void, readonly ^ (fd : number, buffer : std.Uint8ClampedArray, offset : number, length : number, position : number, callback : (err : node.NodeJS.ErrnoException | null, written : number, buffer : std.Uint8ClampedArray): void): void, readonly ^ (fd : number, buffer : std.Uint8ClampedArray, offset : undefined, length : number, position : number, callback : (err : node.NodeJS.ErrnoException | null, written : number, buffer : std.Uint8ClampedArray): void): void, readonly ^ (fd : number, buffer : std.Uint8ClampedArray, offset : null, length : number, position : number, callback : (err : node.NodeJS.ErrnoException | null, written : number, buffer : std.Uint8ClampedArray): void): void, readonly ^ (fd : number, buffer : std.Uint8ClampedArray, offset : number, length : undefined, position : number, callback : (err : node.NodeJS.ErrnoException | null, written : number, buffer : std.Uint8ClampedArray): void): void, readonly ^ (fd : number, buffer : std.Uint8ClampedArray, offset : undefined, length : undefined, position : number, callback : (err : node.NodeJS.ErrnoException | null, written : number, buffer : std.Uint8ClampedArray): void): void, readonly ^ (fd : number, buffer : std.Uint8ClampedArray, offset : null, length : undefined, position : number, callback : (err : node.NodeJS.ErrnoException | null, written : number, buffer : std.Uint8ClampedArray): void): void, readonly ^ (fd : number, buffer : std.Uint8ClampedArray, offset : number, length : null, position : number, callback : (err : node.NodeJS.ErrnoException | null, written : number, buffer : std.Uint8ClampedArray): void): void, readonly ^ (fd : number, buffer : std.Uint8ClampedArray, offset : undefined, length : null, position : number, callback : (err : node.NodeJS.ErrnoException | null, written : number, buffer : std.Uint8ClampedArray): void): void, readonly ^ (fd : number, buffer : std.Uint8ClampedArray, offset : null, length : null, position : number, callback : (err : node.NodeJS.ErrnoException | null, written : number, buffer : std.Uint8ClampedArray): void): void, readonly ^ (fd : number, buffer : std.Uint8ClampedArray, offset : number, length : number, position : undefined, callback : (err : node.NodeJS.ErrnoException | null, written : number, buffer : std.Uint8ClampedArray): void): void, readonly ^ (fd : number, buffer : std.Uint8ClampedArray, offset : undefined, length : number, position : undefined, callback : (err : node.NodeJS.ErrnoException | null, written : number, buffer : std.Uint8ClampedArray): void): void, readonly ^ (fd : number, buffer : std.Uint8ClampedArray, offset : null, length : number, position : undefined, callback : (err : node.NodeJS.ErrnoException | null, written : number, buffer : std.Uint8ClampedArray): void): void, readonly ^ (fd : number, buffer : std.Uint8ClampedArray, offset : number, length : undefined, position : undefined, callback : (err : node.NodeJS.ErrnoException | null, written : number, buffer : std.Uint8ClampedArray): void): void, readonly ^ (fd : number, buffer : std.Uint8ClampedArray, offset : undefined, length : undefined, position : undefined, callback : (err : node.NodeJS.ErrnoException | null, written : number, buffer : std.Uint8ClampedArray): void): void, readonly ^ (fd : number, buffer : std.Uint8ClampedArray, offset : null, length : undefined, position : undefined, callback : (err : node.NodeJS.ErrnoException | null, written : number, buffer : std.Uint8ClampedArray): void): void, readonly ^ (fd : number, buffer : std.Uint8ClampedArray, offset : number, length : null, position : undefined, callback : (err : node.NodeJS.ErrnoException | null, written : number, buffer : std.Uint8ClampedArray): void): void, readonly ^ (fd : number, buffer : std.Uint8ClampedArray, offset : undefined, length : null, position : undefined, callback : (err : node.NodeJS.ErrnoException | null, written : number, buffer : std.Uint8ClampedArray): void): void, readonly ^ (fd : number, buffer : std.Uint8ClampedArray, offset : null, length : null, position : undefined, callback : (err : node.NodeJS.ErrnoException | null, written : number, buffer : std.Uint8ClampedArray): void): void, readonly ^ (fd : number, buffer : std.Uint8ClampedArray, offset : number, length : number, position : null, callback : (err : node.NodeJS.ErrnoException | null, written : number, buffer : std.Uint8ClampedArray): void): void, readonly ^ (fd : number, buffer : std.Uint8ClampedArray, offset : undefined, length : number, position : null, callback : (err : node.NodeJS.ErrnoException | null, written : number, buffer : std.Uint8ClampedArray): void): void, readonly ^ (fd : number, buffer : std.Uint8ClampedArray, offset : null, length : number, position : null, callback : (err : node.NodeJS.ErrnoException | null, written : number, buffer : std.Uint8ClampedArray): void): void, readonly ^ (fd : number, buffer : std.Uint8ClampedArray, offset : number, length : undefined, position : null, callback : (err : node.NodeJS.ErrnoException | null, written : number, buffer : std.Uint8ClampedArray): void): void, readonly ^ (fd : number, buffer : std.Uint8ClampedArray, offset : undefined, length : undefined, position : null, callback : (err : node.NodeJS.ErrnoException | null, written : number, buffer : std.Uint8ClampedArray): void): void, readonly ^ (fd : number, buffer : std.Uint8ClampedArray, offset : null, length : undefined, position : null, callback : (err : node.NodeJS.ErrnoException | null, written : number, buffer : std.Uint8ClampedArray): void): void, readonly ^ (fd : number, buffer : std.Uint8ClampedArray, offset : number, length : null, position : null, callback : (err : node.NodeJS.ErrnoException | null, written : number, buffer : std.Uint8ClampedArray): void): void, readonly ^ (fd : number, buffer : std.Uint8ClampedArray, offset : undefined, length : null, position : null, callback : (err : node.NodeJS.ErrnoException | null, written : number, buffer : std.Uint8ClampedArray): void): void, readonly ^ (fd : number, buffer : std.Uint8ClampedArray, offset : null, length : null, position : null, callback : (err : node.NodeJS.ErrnoException | null, written : number, buffer : std.Uint8ClampedArray): void): void, readonly ^ (fd : number, buffer : std.Uint16Array, offset : number, length : number, position : number, callback : (err : node.NodeJS.ErrnoException | null, written : number, buffer : std.Uint16Array): void): void, readonly ^ (fd : number, buffer : std.Uint16Array, offset : undefined, length : number, position : number, callback : (err : node.NodeJS.ErrnoException | null, written : number, buffer : std.Uint16Array): void): void, readonly ^ (fd : number, buffer : std.Uint16Array, offset : null, length : number, position : number, callback : (err : node.NodeJS.ErrnoException | null, written : number, buffer : std.Uint16Array): void): void, readonly ^ (fd : number, buffer : std.Uint16Array, offset : number, length : undefined, position : number, callback : (err : node.NodeJS.ErrnoException | null, written : number, buffer : std.Uint16Array): void): void, readonly ^ (fd : number, buffer : std.Uint16Array, offset : undefined, length : undefined, position : number, callback : (err : node.NodeJS.ErrnoException | null, written : number, buffer : std.Uint16Array): void): void, readonly ^ (fd : number, buffer : std.Uint16Array, offset : null, length : undefined, position : number, callback : (err : node.NodeJS.ErrnoException | null, written : number, buffer : std.Uint16Array): void): void, readonly ^ (fd : number, buffer : std.Uint16Array, offset : number, length : null, position : number, callback : (err : node.NodeJS.ErrnoException | null, written : number, buffer : std.Uint16Array): void): void, readonly ^ (fd : number, buffer : std.Uint16Array, offset : undefined, length : null, position : number, callback : (err : node.NodeJS.ErrnoException | null, written : number, buffer : std.Uint16Array): void): void, readonly ^ (fd : number, buffer : std.Uint16Array, offset : null, length : null, position : number, callback : (err : node.NodeJS.ErrnoException | null, written : number, buffer : std.Uint16Array): void): void, readonly ^ (fd : number, buffer : std.Uint16Array, offset : number, length : number, position : undefined, callback : (err : node.NodeJS.ErrnoException | null, written : number, buffer : std.Uint16Array): void): void, readonly ^ (fd : number, buffer : std.Uint16Array, offset : undefined, length : number, position : undefined, callback : (err : node.NodeJS.ErrnoException | null, written : number, buffer : std.Uint16Array): void): void, readonly ^ (fd : number, buffer : std.Uint16Array, offset : null, length : number, position : undefined, callback : (err : node.NodeJS.ErrnoException | null, written : number, buffer : std.Uint16Array): void): void, readonly ^ (fd : number, buffer : std.Uint16Array, offset : number, length : undefined, position : undefined, callback : (err : node.NodeJS.ErrnoException | null, written : number, buffer : std.Uint16Array): void): void, readonly ^ (fd : number, buffer : std.Uint16Array, offset : undefined, length : undefined, position : undefined, callback : (err : node.NodeJS.ErrnoException | null, written : number, buffer : std.Uint16Array): void): void, readonly ^ (fd : number, buffer : std.Uint16Array, offset : null, length : undefined, position : undefined, callback : (err : node.NodeJS.ErrnoException | null, written : number, buffer : std.Uint16Array): void): void, readonly ^ (fd : number, buffer : std.Uint16Array, offset : number, length : null, position : undefined, callback : (err : node.NodeJS.ErrnoException | null, written : number, buffer : std.Uint16Array): void): void, readonly ^ (fd : number, buffer : std.Uint16Array, offset : undefined, length : null, position : undefined, callback : (err : node.NodeJS.ErrnoException | null, written : number, buffer : std.Uint16Array): void): void, readonly ^ (fd : number, buffer : std.Uint16Array, offset : null, length : null, position : undefined, callback : (err : node.NodeJS.ErrnoException | null, written : number, buffer : std.Uint16Array): void): void, readonly ^ (fd : number, buffer : std.Uint16Array, offset : number, length : number, position : null, callback : (err : node.NodeJS.ErrnoException | null, written : number, buffer : std.Uint16Array): void): void, readonly ^ (fd : number, buffer : std.Uint16Array, offset : undefined, length : number, position : null, callback : (err : node.NodeJS.ErrnoException | null, written : number, buffer : std.Uint16Array): void): void, readonly ^ (fd : number, buffer : std.Uint16Array, offset : null, length : number, position : null, callback : (err : node.NodeJS.ErrnoException | null, written : number, buffer : std.Uint16Array): void): void, readonly ^ (fd : number, buffer : std.Uint16Array, offset : number, length : undefined, position : null, callback : (err : node.NodeJS.ErrnoException | null, written : number, buffer : std.Uint16Array): void): void, readonly ^ (fd : number, buffer : std.Uint16Array, offset : undefined, length : undefined, position : null, callback : (err : node.NodeJS.ErrnoException | null, written : number, buffer : std.Uint16Array): void): void, readonly ^ (fd : number, buffer : std.Uint16Array, offset : null, length : undefined, position : null, callback : (err : node.NodeJS.ErrnoException | null, written : number, buffer : std.Uint16Array): void): void, readonly ^ (fd : number, buffer : std.Uint16Array, offset : number, length : null, position : null, callback : (err : node.NodeJS.ErrnoException | null, written : number, buffer : std.Uint16Array): void): void, readonly ^ (fd : number, buffer : std.Uint16Array, offset : undefined, length : null, position : null, callback : (err : node.NodeJS.ErrnoException | null, written : number, buffer : std.Uint16Array): void): void, readonly ^ (fd : number, buffer : std.Uint16Array, offset : null, length : null, position : null, callback : (err : node.NodeJS.ErrnoException | null, written : number, buffer : std.Uint16Array): void): void, readonly ^ (fd : number, buffer : std.Uint32Array, offset : number, length : number, position : number, callback : (err : node.NodeJS.ErrnoException | null, written : number, buffer : std.Uint32Array): void): void, readonly ^ (fd : number, buffer : std.Uint32Array, offset : undefined, length : number, position : number, callback : (err : node.NodeJS.ErrnoException | null, written : number, buffer : std.Uint32Array): void): void, readonly ^ (fd : number, buffer : std.Uint32Array, offset : null, length : number, position : number, callback : (err : node.NodeJS.ErrnoException | null, written : number, buffer : std.Uint32Array): void): void, readonly ^ (fd : number, buffer : std.Uint32Array, offset : number, length : undefined, position : number, callback : (err : node.NodeJS.ErrnoException | null, written : number, buffer : std.Uint32Array): void): void, readonly ^ (fd : number, buffer : std.Uint32Array, offset : undefined, length : undefined, position : number, callback : (err : node.NodeJS.ErrnoException | null, written : number, buffer : std.Uint32Array): void): void, readonly ^ (fd : number, buffer : std.Uint32Array, offset : null, length : undefined, position : number, callback : (err : node.NodeJS.ErrnoException | null, written : number, buffer : std.Uint32Array): void): void, readonly ^ (fd : number, buffer : std.Uint32Array, offset : number, length : null, position : number, callback : (err : node.NodeJS.ErrnoException | null, written : number, buffer : std.Uint32Array): void): void, readonly ^ (fd : number, buffer : std.Uint32Array, offset : undefined, length : null, position : number, callback : (err : node.NodeJS.ErrnoException | null, written : number, buffer : std.Uint32Array): void): void, readonly ^ (fd : number, buffer : std.Uint32Array, offset : null, length : null, position : number, callback : (err : node.NodeJS.ErrnoException | null, written : number, buffer : std.Uint32Array): void): void, readonly ^ (fd : number, buffer : std.Uint32Array, offset : number, length : number, position : undefined, callback : (err : node.NodeJS.ErrnoException | null, written : number, buffer : std.Uint32Array): void): void, readonly ^ (fd : number, buffer : std.Uint32Array, offset : undefined, length : number, position : undefined, callback : (err : node.NodeJS.ErrnoException | null, written : number, buffer : std.Uint32Array): void): void, readonly ^ (fd : number, buffer : std.Uint32Array, offset : null, length : number, position : undefined, callback : (err : node.NodeJS.ErrnoException | null, written : number, buffer : std.Uint32Array): void): void, readonly ^ (fd : number, buffer : std.Uint32Array, offset : number, length : undefined, position : undefined, callback : (err : node.NodeJS.ErrnoException | null, written : number, buffer : std.Uint32Array): void): void, readonly ^ (fd : number, buffer : std.Uint32Array, offset : undefined, length : undefined, position : undefined, callback : (err : node.NodeJS.ErrnoException | null, written : number, buffer : std.Uint32Array): void): void, readonly ^ (fd : number, buffer : std.Uint32Array, offset : null, length : undefined, position : undefined, callback : (err : node.NodeJS.ErrnoException | null, written : number, buffer : std.Uint32Array): void): void, readonly ^ (fd : number, buffer : std.Uint32Array, offset : number, length : null, position : undefined, callback : (err : node.NodeJS.ErrnoException | null, written : number, buffer : std.Uint32Array): void): void, readonly ^ (fd : number, buffer : std.Uint32Array, offset : undefined, length : null, position : undefined, callback : (err : node.NodeJS.ErrnoException | null, written : number, buffer : std.Uint32Array): void): void, readonly ^ (fd : number, buffer : std.Uint32Array, offset : null, length : null, position : undefined, callback : (err : node.NodeJS.ErrnoException | null, written : number, buffer : std.Uint32Array): void): void, readonly ^ (fd : number, buffer : std.Uint32Array, offset : number, length : number, position : null, callback : (err : node.NodeJS.ErrnoException | null, written : number, buffer : std.Uint32Array): void): void, readonly ^ (fd : number, buffer : std.Uint32Array, offset : undefined, length : number, position : null, callback : (err : node.NodeJS.ErrnoException | null, written : number, buffer : std.Uint32Array): void): void, readonly ^ (fd : number, buffer : std.Uint32Array, offset : null, length : number, position : null, callback : (err : node.NodeJS.ErrnoException | null, written : number, buffer : std.Uint32Array): void): void, readonly ^ (fd : number, buffer : std.Uint32Array, offset : number, length : undefined, position : null, callback : (err : node.NodeJS.ErrnoException | null, written : number, buffer : std.Uint32Array): void): void, readonly ^ (fd : number, buffer : std.Uint32Array, offset : undefined, length : undefined, position : null, callback : (err : node.NodeJS.ErrnoException | null, written : number, buffer : std.Uint32Array): void): void, readonly ^ (fd : number, buffer : std.Uint32Array, offset : null, length : undefined, position : null, callback : (err : node.NodeJS.ErrnoException | null, written : number, buffer : std.Uint32Array): void): void, readonly ^ (fd : number, buffer : std.Uint32Array, offset : number, length : null, position : null, callback : (err : node.NodeJS.ErrnoException | null, written : number, buffer : std.Uint32Array): void): void, readonly ^ (fd : number, buffer : std.Uint32Array, offset : undefined, length : null, position : null, callback : (err : node.NodeJS.ErrnoException | null, written : number, buffer : std.Uint32Array): void): void, readonly ^ (fd : number, buffer : std.Uint32Array, offset : null, length : null, position : null, callback : (err : node.NodeJS.ErrnoException | null, written : number, buffer : std.Uint32Array): void): void, readonly ^ (fd : number, buffer : std.Int8Array, offset : number, length : number, position : number, callback : (err : node.NodeJS.ErrnoException | null, written : number, buffer : std.Int8Array): void): void, readonly ^ (fd : number, buffer : std.Int8Array, offset : undefined, length : number, position : number, callback : (err : node.NodeJS.ErrnoException | null, written : number, buffer : std.Int8Array): void): void, readonly ^ (fd : number, buffer : std.Int8Array, offset : null, length : number, position : number, callback : (err : node.NodeJS.ErrnoException | null, written : number, buffer : std.Int8Array): void): void, readonly ^ (fd : number, buffer : std.Int8Array, offset : number, length : undefined, position : number, callback : (err : node.NodeJS.ErrnoException | null, written : number, buffer : std.Int8Array): void): void, readonly ^ (fd : number, buffer : std.Int8Array, offset : undefined, length : undefined, position : number, callback : (err : node.NodeJS.ErrnoException | null, written : number, buffer : std.Int8Array): void): void, readonly ^ (fd : number, buffer : std.Int8Array, offset : null, length : undefined, position : number, callback : (err : node.NodeJS.ErrnoException | null, written : number, buffer : std.Int8Array): void): void, readonly ^ (fd : number, buffer : std.Int8Array, offset : number, length : null, position : number, callback : (err : node.NodeJS.ErrnoException | null, written : number, buffer : std.Int8Array): void): void, readonly ^ (fd : number, buffer : std.Int8Array, offset : undefined, length : null, position : number, callback : (err : node.NodeJS.ErrnoException | null, written : number, buffer : std.Int8Array): void): void, readonly ^ (fd : number, buffer : std.Int8Array, offset : null, length : null, position : number, callback : (err : node.NodeJS.ErrnoException | null, written : number, buffer : std.Int8Array): void): void, readonly ^ (fd : number, buffer : std.Int8Array, offset : number, length : number, position : undefined, callback : (err : node.NodeJS.ErrnoException | null, written : number, buffer : std.Int8Array): void): void, readonly ^ (fd : number, buffer : std.Int8Array, offset : undefined, length : number, position : undefined, callback : (err : node.NodeJS.ErrnoException | null, written : number, buffer : std.Int8Array): void): void, readonly ^ (fd : number, buffer : std.Int8Array, offset : null, length : number, position : undefined, callback : (err : node.NodeJS.ErrnoException | null, written : number, buffer : std.Int8Array): void): void, readonly ^ (fd : number, buffer : std.Int8Array, offset : number, length : undefined, position : undefined, callback : (err : node.NodeJS.ErrnoException | null, written : number, buffer : std.Int8Array): void): void, readonly ^ (fd : number, buffer : std.Int8Array, offset : undefined, length : undefined, position : undefined, callback : (err : node.NodeJS.ErrnoException | null, written : number, buffer : std.Int8Array): void): void, readonly ^ (fd : number, buffer : std.Int8Array, offset : null, length : undefined, position : undefined, callback : (err : node.NodeJS.ErrnoException | null, written : number, buffer : std.Int8Array): void): void, readonly ^ (fd : number, buffer : std.Int8Array, offset : number, length : null, position : undefined, callback : (err : node.NodeJS.ErrnoException | null, written : number, buffer : std.Int8Array): void): void, readonly ^ (fd : number, buffer : std.Int8Array, offset : undefined, length : null, position : undefined, callback : (err : node.NodeJS.ErrnoException | null, written : number, buffer : std.Int8Array): void): void, readonly ^ (fd : number, buffer : std.Int8Array, offset : null, length : null, position : undefined, callback : (err : node.NodeJS.ErrnoException | null, written : number, buffer : std.Int8Array): void): void, readonly ^ (fd : number, buffer : std.Int8Array, offset : number, length : number, position : null, callback : (err : node.NodeJS.ErrnoException | null, written : number, buffer : std.Int8Array): void): void, readonly ^ (fd : number, buffer : std.Int8Array, offset : undefined, length : number, position : null, callback : (err : node.NodeJS.ErrnoException | null, written : number, buffer : std.Int8Array): void): void, readonly ^ (fd : number, buffer : std.Int8Array, offset : null, length : number, position : null, callback : (err : node.NodeJS.ErrnoException | null, written : number, buffer : std.Int8Array): void): void, readonly ^ (fd : number, buffer : std.Int8Array, offset : number, length : undefined, position : null, callback : (err : node.NodeJS.ErrnoException | null, written : number, buffer : std.Int8Array): void): void, readonly ^ (fd : number, buffer : std.Int8Array, offset : undefined, length : undefined, position : null, callback : (err : node.NodeJS.ErrnoException | null, written : number, buffer : std.Int8Array): void): void, readonly ^ (fd : number, buffer : std.Int8Array, offset : null, length : undefined, position : null, callback : (err : node.NodeJS.ErrnoException | null, written : number, buffer : std.Int8Array): void): void, readonly ^ (fd : number, buffer : std.Int8Array, offset : number, length : null, position : null, callback : (err : node.NodeJS.ErrnoException | null, written : number, buffer : std.Int8Array): void): void, readonly ^ (fd : number, buffer : std.Int8Array, offset : undefined, length : null, position : null, callback : (err : node.NodeJS.ErrnoException | null, written : number, buffer : std.Int8Array): void): void, readonly ^ (fd : number, buffer : std.Int8Array, offset : null, length : null, position : null, callback : (err : node.NodeJS.ErrnoException | null, written : number, buffer : std.Int8Array): void): void, readonly ^ (fd : number, buffer : std.Int16Array, offset : number, length : number, position : number, callback : (err : node.NodeJS.ErrnoException | null, written : number, buffer : std.Int16Array): void): void, readonly ^ (fd : number, buffer : std.Int16Array, offset : undefined, length : number, position : number, callback : (err : node.NodeJS.ErrnoException | null, written : number, buffer : std.Int16Array): void): void, readonly ^ (fd : number, buffer : std.Int16Array, offset : null, length : number, position : number, callback : (err : node.NodeJS.ErrnoException | null, written : number, buffer : std.Int16Array): void): void, readonly ^ (fd : number, buffer : std.Int16Array, offset : number, length : undefined, position : number, callback : (err : node.NodeJS.ErrnoException | null, written : number, buffer : std.Int16Array): void): void, readonly ^ (fd : number, buffer : std.Int16Array, offset : undefined, length : undefined, position : number, callback : (err : node.NodeJS.ErrnoException | null, written : number, buffer : std.Int16Array): void): void, readonly ^ (fd : number, buffer : std.Int16Array, offset : null, length : undefined, position : number, callback : (err : node.NodeJS.ErrnoException | null, written : number, buffer : std.Int16Array): void): void, readonly ^ (fd : number, buffer : std.Int16Array, offset : number, length : null, position : number, callback : (err : node.NodeJS.ErrnoException | null, written : number, buffer : std.Int16Array): void): void, readonly ^ (fd : number, buffer : std.Int16Array, offset : undefined, length : null, position : number, callback : (err : node.NodeJS.ErrnoException | null, written : number, buffer : std.Int16Array): void): void, readonly ^ (fd : number, buffer : std.Int16Array, offset : null, length : null, position : number, callback : (err : node.NodeJS.ErrnoException | null, written : number, buffer : std.Int16Array): void): void, readonly ^ (fd : number, buffer : std.Int16Array, offset : number, length : number, position : undefined, callback : (err : node.NodeJS.ErrnoException | null, written : number, buffer : std.Int16Array): void): void, readonly ^ (fd : number, buffer : std.Int16Array, offset : undefined, length : number, position : undefined, callback : (err : node.NodeJS.ErrnoException | null, written : number, buffer : std.Int16Array): void): void, readonly ^ (fd : number, buffer : std.Int16Array, offset : null, length : number, position : undefined, callback : (err : node.NodeJS.ErrnoException | null, written : number, buffer : std.Int16Array): void): void, readonly ^ (fd : number, buffer : std.Int16Array, offset : number, length : undefined, position : undefined, callback : (err : node.NodeJS.ErrnoException | null, written : number, buffer : std.Int16Array): void): void, readonly ^ (fd : number, buffer : std.Int16Array, offset : undefined, length : undefined, position : undefined, callback : (err : node.NodeJS.ErrnoException | null, written : number, buffer : std.Int16Array): void): void, readonly ^ (fd : number, buffer : std.Int16Array, offset : null, length : undefined, position : undefined, callback : (err : node.NodeJS.ErrnoException | null, written : number, buffer : std.Int16Array): void): void, readonly ^ (fd : number, buffer : std.Int16Array, offset : number, length : null, position : undefined, callback : (err : node.NodeJS.ErrnoException | null, written : number, buffer : std.Int16Array): void): void, readonly ^ (fd : number, buffer : std.Int16Array, offset : undefined, length : null, position : undefined, callback : (err : node.NodeJS.ErrnoException | null, written : number, buffer : std.Int16Array): void): void, readonly ^ (fd : number, buffer : std.Int16Array, offset : null, length : null, position : undefined, callback : (err : node.NodeJS.ErrnoException | null, written : number, buffer : std.Int16Array): void): void, readonly ^ (fd : number, buffer : std.Int16Array, offset : number, length : number, position : null, callback : (err : node.NodeJS.ErrnoException | null, written : number, buffer : std.Int16Array): void): void, readonly ^ (fd : number, buffer : std.Int16Array, offset : undefined, length : number, position : null, callback : (err : node.NodeJS.ErrnoException | null, written : number, buffer : std.Int16Array): void): void, readonly ^ (fd : number, buffer : std.Int16Array, offset : null, length : number, position : null, callback : (err : node.NodeJS.ErrnoException | null, written : number, buffer : std.Int16Array): void): void, readonly ^ (fd : number, buffer : std.Int16Array, offset : number, length : undefined, position : null, callback : (err : node.NodeJS.ErrnoException | null, written : number, buffer : std.Int16Array): void): void, readonly ^ (fd : number, buffer : std.Int16Array, offset : undefined, length : undefined, position : null, callback : (err : node.NodeJS.ErrnoException | null, written : number, buffer : std.Int16Array): void): void, readonly ^ (fd : number, buffer : std.Int16Array, offset : null, length : undefined, position : null, callback : (err : node.NodeJS.ErrnoException | null, written : number, buffer : std.Int16Array): void): void, readonly ^ (fd : number, buffer : std.Int16Array, offset : number, length : null, position : null, callback : (err : node.NodeJS.ErrnoException | null, written : number, buffer : std.Int16Array): void): void, readonly ^ (fd : number, buffer : std.Int16Array, offset : undefined, length : null, position : null, callback : (err : node.NodeJS.ErrnoException | null, written : number, buffer : std.Int16Array): void): void, readonly ^ (fd : number, buffer : std.Int16Array, offset : null, length : null, position : null, callback : (err : node.NodeJS.ErrnoException | null, written : number, buffer : std.Int16Array): void): void, readonly ^ (fd : number, buffer : std.Int32Array, offset : number, length : number, position : number, callback : (err : node.NodeJS.ErrnoException | null, written : number, buffer : std.Int32Array): void): void, readonly ^ (fd : number, buffer : std.Int32Array, offset : undefined, length : number, position : number, callback : (err : node.NodeJS.ErrnoException | null, written : number, buffer : std.Int32Array): void): void, readonly ^ (fd : number, buffer : std.Int32Array, offset : null, length : number, position : number, callback : (err : node.NodeJS.ErrnoException | null, written : number, buffer : std.Int32Array): void): void, readonly ^ (fd : number, buffer : std.Int32Array, offset : number, length : undefined, position : number, callback : (err : node.NodeJS.ErrnoException | null, written : number, buffer : std.Int32Array): void): void, readonly ^ (fd : number, buffer : std.Int32Array, offset : undefined, length : undefined, position : number, callback : (err : node.NodeJS.ErrnoException | null, written : number, buffer : std.Int32Array): void): void, readonly ^ (fd : number, buffer : std.Int32Array, offset : null, length : undefined, position : number, callback : (err : node.NodeJS.ErrnoException | null, written : number, buffer : std.Int32Array): void): void, readonly ^ (fd : number, buffer : std.Int32Array, offset : number, length : null, position : number, callback : (err : node.NodeJS.ErrnoException | null, written : number, buffer : std.Int32Array): void): void, readonly ^ (fd : number, buffer : std.Int32Array, offset : undefined, length : null, position : number, callback : (err : node.NodeJS.ErrnoException | null, written : number, buffer : std.Int32Array): void): void, readonly ^ (fd : number, buffer : std.Int32Array, offset : null, length : null, position : number, callback : (err : node.NodeJS.ErrnoException | null, written : number, buffer : std.Int32Array): void): void, readonly ^ (fd : number, buffer : std.Int32Array, offset : number, length : number, position : undefined, callback : (err : node.NodeJS.ErrnoException | null, written : number, buffer : std.Int32Array): void): void, readonly ^ (fd : number, buffer : std.Int32Array, offset : undefined, length : number, position : undefined, callback : (err : node.NodeJS.ErrnoException | null, written : number, buffer : std.Int32Array): void): void, readonly ^ (fd : number, buffer : std.Int32Array, offset : null, length : number, position : undefined, callback : (err : node.NodeJS.ErrnoException | null, written : number, buffer : std.Int32Array): void): void, readonly ^ (fd : number, buffer : std.Int32Array, offset : number, length : undefined, position : undefined, callback : (err : node.NodeJS.ErrnoException | null, written : number, buffer : std.Int32Array): void): void, readonly ^ (fd : number, buffer : std.Int32Array, offset : undefined, length : undefined, position : undefined, callback : (err : node.NodeJS.ErrnoException | null, written : number, buffer : std.Int32Array): void): void, readonly ^ (fd : number, buffer : std.Int32Array, offset : null, length : undefined, position : undefined, callback : (err : node.NodeJS.ErrnoException | null, written : number, buffer : std.Int32Array): void): void, readonly ^ (fd : number, buffer : std.Int32Array, offset : number, length : null, position : undefined, callback : (err : node.NodeJS.ErrnoException | null, written : number, buffer : std.Int32Array): void): void, readonly ^ (fd : number, buffer : std.Int32Array, offset : undefined, length : null, position : undefined, callback : (err : node.NodeJS.ErrnoException | null, written : number, buffer : std.Int32Array): void): void, readonly ^ (fd : number, buffer : std.Int32Array, offset : null, length : null, position : undefined, callback : (err : node.NodeJS.ErrnoException | null, written : number, buffer : std.Int32Array): void): void, readonly ^ (fd : number, buffer : std.Int32Array, offset : number, length : number, position : null, callback : (err : node.NodeJS.ErrnoException | null, written : number, buffer : std.Int32Array): void): void, readonly ^ (fd : number, buffer : std.Int32Array, offset : undefined, length : number, position : null, callback : (err : node.NodeJS.ErrnoException | null, written : number, buffer : std.Int32Array): void): void, readonly ^ (fd : number, buffer : std.Int32Array, offset : null, length : number, position : null, callback : (err : node.NodeJS.ErrnoException | null, written : number, buffer : std.Int32Array): void): void, readonly ^ (fd : number, buffer : std.Int32Array, offset : number, length : undefined, position : null, callback : (err : node.NodeJS.ErrnoException | null, written : number, buffer : std.Int32Array): void): void, readonly ^ (fd : number, buffer : std.Int32Array, offset : undefined, length : undefined, position : null, callback : (err : node.NodeJS.ErrnoException | null, written : number, buffer : std.Int32Array): void): void, readonly ^ (fd : number, buffer : std.Int32Array, offset : null, length : undefined, position : null, callback : (err : node.NodeJS.ErrnoException | null, written : number, buffer : std.Int32Array): void): void, readonly ^ (fd : number, buffer : std.Int32Array, offset : number, length : null, position : null, callback : (err : node.NodeJS.ErrnoException | null, written : number, buffer : std.Int32Array): void): void, readonly ^ (fd : number, buffer : std.Int32Array, offset : undefined, length : null, position : null, callback : (err : node.NodeJS.ErrnoException | null, written : number, buffer : std.Int32Array): void): void, readonly ^ (fd : number, buffer : std.Int32Array, offset : null, length : null, position : null, callback : (err : node.NodeJS.ErrnoException | null, written : number, buffer : std.Int32Array): void): void, readonly ^ (fd : number, buffer : std.Float32Array, offset : number, length : number, position : number, callback : (err : node.NodeJS.ErrnoException | null, written : number, buffer : std.Float32Array): void): void, readonly ^ (fd : number, buffer : std.Float32Array, offset : undefined, length : number, position : number, callback : (err : node.NodeJS.ErrnoException | null, written : number, buffer : std.Float32Array): void): void, readonly ^ (fd : number, buffer : std.Float32Array, offset : null, length : number, position : number, callback : (err : node.NodeJS.ErrnoException | null, written : number, buffer : std.Float32Array): void): void, readonly ^ (fd : number, buffer : std.Float32Array, offset : number, length : undefined, position : number, callback : (err : node.NodeJS.ErrnoException | null, written : number, buffer : std.Float32Array): void): void, readonly ^ (fd : number, buffer : std.Float32Array, offset : undefined, length : undefined, position : number, callback : (err : node.NodeJS.ErrnoException | null, written : number, buffer : std.Float32Array): void): void, readonly ^ (fd : number, buffer : std.Float32Array, offset : null, length : undefined, position : number, callback : (err : node.NodeJS.ErrnoException | null, written : number, buffer : std.Float32Array): void): void, readonly ^ (fd : number, buffer : std.Float32Array, offset : number, length : null, position : number, callback : (err : node.NodeJS.ErrnoException | null, written : number, buffer : std.Float32Array): void): void, readonly ^ (fd : number, buffer : std.Float32Array, offset : undefined, length : null, position : number, callback : (err : node.NodeJS.ErrnoException | null, written : number, buffer : std.Float32Array): void): void, readonly ^ (fd : number, buffer : std.Float32Array, offset : null, length : null, position : number, callback : (err : node.NodeJS.ErrnoException | null, written : number, buffer : std.Float32Array): void): void, readonly ^ (fd : number, buffer : std.Float32Array, offset : number, length : number, position : undefined, callback : (err : node.NodeJS.ErrnoException | null, written : number, buffer : std.Float32Array): void): void, readonly ^ (fd : number, buffer : std.Float32Array, offset : undefined, length : number, position : undefined, callback : (err : node.NodeJS.ErrnoException | null, written : number, buffer : std.Float32Array): void): void, readonly ^ (fd : number, buffer : std.Float32Array, offset : null, length : number, position : undefined, callback : (err : node.NodeJS.ErrnoException | null, written : number, buffer : std.Float32Array): void): void, readonly ^ (fd : number, buffer : std.Float32Array, offset : number, length : undefined, position : undefined, callback : (err : node.NodeJS.ErrnoException | null, written : number, buffer : std.Float32Array): void): void, readonly ^ (fd : number, buffer : std.Float32Array, offset : undefined, length : undefined, position : undefined, callback : (err : node.NodeJS.ErrnoException | null, written : number, buffer : std.Float32Array): void): void, readonly ^ (fd : number, buffer : std.Float32Array, offset : null, length : undefined, position : undefined, callback : (err : node.NodeJS.ErrnoException | null, written : number, buffer : std.Float32Array): void): void, readonly ^ (fd : number, buffer : std.Float32Array, offset : number, length : null, position : undefined, callback : (err : node.NodeJS.ErrnoException | null, written : number, buffer : std.Float32Array): void): void, readonly ^ (fd : number, buffer : std.Float32Array, offset : undefined, length : null, position : undefined, callback : (err : node.NodeJS.ErrnoException | null, written : number, buffer : std.Float32Array): void): void, readonly ^ (fd : number, buffer : std.Float32Array, offset : null, length : null, position : undefined, callback : (err : node.NodeJS.ErrnoException | null, written : number, buffer : std.Float32Array): void): void, readonly ^ (fd : number, buffer : std.Float32Array, offset : number, length : number, position : null, callback : (err : node.NodeJS.ErrnoException | null, written : number, buffer : std.Float32Array): void): void, readonly ^ (fd : number, buffer : std.Float32Array, offset : undefined, length : number, position : null, callback : (err : node.NodeJS.ErrnoException | null, written : number, buffer : std.Float32Array): void): void, readonly ^ (fd : number, buffer : std.Float32Array, offset : null, length : number, position : null, callback : (err : node.NodeJS.ErrnoException | null, written : number, buffer : std.Float32Array): void): void, readonly ^ (fd : number, buffer : std.Float32Array, offset : number, length : undefined, position : null, callback : (err : node.NodeJS.ErrnoException | null, written : number, buffer : std.Float32Array): void): void, readonly ^ (fd : number, buffer : std.Float32Array, offset : undefined, length : undefined, position : null, callback : (err : node.NodeJS.ErrnoException | null, written : number, buffer : std.Float32Array): void): void, readonly ^ (fd : number, buffer : std.Float32Array, offset : null, length : undefined, position : null, callback : (err : node.NodeJS.ErrnoException | null, written : number, buffer : std.Float32Array): void): void, readonly ^ (fd : number, buffer : std.Float32Array, offset : number, length : null, position : null, callback : (err : node.NodeJS.ErrnoException | null, written : number, buffer : std.Float32Array): void): void, readonly ^ (fd : number, buffer : std.Float32Array, offset : undefined, length : null, position : null, callback : (err : node.NodeJS.ErrnoException | null, written : number, buffer : std.Float32Array): void): void, readonly ^ (fd : number, buffer : std.Float32Array, offset : null, length : null, position : null, callback : (err : node.NodeJS.ErrnoException | null, written : number, buffer : std.Float32Array): void): void, readonly ^ (fd : number, buffer : std.Float64Array, offset : number, length : number, position : number, callback : (err : node.NodeJS.ErrnoException | null, written : number, buffer : std.Float64Array): void): void, readonly ^ (fd : number, buffer : std.Float64Array, offset : undefined, length : number, position : number, callback : (err : node.NodeJS.ErrnoException | null, written : number, buffer : std.Float64Array): void): void, readonly ^ (fd : number, buffer : std.Float64Array, offset : null, length : number, position : number, callback : (err : node.NodeJS.ErrnoException | null, written : number, buffer : std.Float64Array): void): void, readonly ^ (fd : number, buffer : std.Float64Array, offset : number, length : undefined, position : number, callback : (err : node.NodeJS.ErrnoException | null, written : number, buffer : std.Float64Array): void): void, readonly ^ (fd : number, buffer : std.Float64Array, offset : undefined, length : undefined, position : number, callback : (err : node.NodeJS.ErrnoException | null, written : number, buffer : std.Float64Array): void): void, readonly ^ (fd : number, buffer : std.Float64Array, offset : null, length : undefined, position : number, callback : (err : node.NodeJS.ErrnoException | null, written : number, buffer : std.Float64Array): void): void, readonly ^ (fd : number, buffer : std.Float64Array, offset : number, length : null, position : number, callback : (err : node.NodeJS.ErrnoException | null, written : number, buffer : std.Float64Array): void): void, readonly ^ (fd : number, buffer : std.Float64Array, offset : undefined, length : null, position : number, callback : (err : node.NodeJS.ErrnoException | null, written : number, buffer : std.Float64Array): void): void, readonly ^ (fd : number, buffer : std.Float64Array, offset : null, length : null, position : number, callback : (err : node.NodeJS.ErrnoException | null, written : number, buffer : std.Float64Array): void): void, readonly ^ (fd : number, buffer : std.Float64Array, offset : number, length : number, position : undefined, callback : (err : node.NodeJS.ErrnoException | null, written : number, buffer : std.Float64Array): void): void, readonly ^ (fd : number, buffer : std.Float64Array, offset : undefined, length : number, position : undefined, callback : (err : node.NodeJS.ErrnoException | null, written : number, buffer : std.Float64Array): void): void, readonly ^ (fd : number, buffer : std.Float64Array, offset : null, length : number, position : undefined, callback : (err : node.NodeJS.ErrnoException | null, written : number, buffer : std.Float64Array): void): void, readonly ^ (fd : number, buffer : std.Float64Array, offset : number, length : undefined, position : undefined, callback : (err : node.NodeJS.ErrnoException | null, written : number, buffer : std.Float64Array): void): void, readonly ^ (fd : number, buffer : std.Float64Array, offset : undefined, length : undefined, position : undefined, callback : (err : node.NodeJS.ErrnoException | null, written : number, buffer : std.Float64Array): void): void, readonly ^ (fd : number, buffer : std.Float64Array, offset : null, length : undefined, position : undefined, callback : (err : node.NodeJS.ErrnoException | null, written : number, buffer : std.Float64Array): void): void, readonly ^ (fd : number, buffer : std.Float64Array, offset : number, length : null, position : undefined, callback : (err : node.NodeJS.ErrnoException | null, written : number, buffer : std.Float64Array): void): void, readonly ^ (fd : number, buffer : std.Float64Array, offset : undefined, length : null, position : undefined, callback : (err : node.NodeJS.ErrnoException | null, written : number, buffer : std.Float64Array): void): void, readonly ^ (fd : number, buffer : std.Float64Array, offset : null, length : null, position : undefined, callback : (err : node.NodeJS.ErrnoException | null, written : number, buffer : std.Float64Array): void): void, readonly ^ (fd : number, buffer : std.Float64Array, offset : number, length : number, position : null, callback : (err : node.NodeJS.ErrnoException | null, written : number, buffer : std.Float64Array): void): void, readonly ^ (fd : number, buffer : std.Float64Array, offset : undefined, length : number, position : null, callback : (err : node.NodeJS.ErrnoException | null, written : number, buffer : std.Float64Array): void): void, readonly ^ (fd : number, buffer : std.Float64Array, offset : null, length : number, position : null, callback : (err : node.NodeJS.ErrnoException | null, written : number, buffer : std.Float64Array): void): void, readonly ^ (fd : number, buffer : std.Float64Array, offset : number, length : undefined, position : null, callback : (err : node.NodeJS.ErrnoException | null, written : number, buffer : std.Float64Array): void): void, readonly ^ (fd : number, buffer : std.Float64Array, offset : undefined, length : undefined, position : null, callback : (err : node.NodeJS.ErrnoException | null, written : number, buffer : std.Float64Array): void): void, readonly ^ (fd : number, buffer : std.Float64Array, offset : null, length : undefined, position : null, callback : (err : node.NodeJS.ErrnoException | null, written : number, buffer : std.Float64Array): void): void, readonly ^ (fd : number, buffer : std.Float64Array, offset : number, length : null, position : null, callback : (err : node.NodeJS.ErrnoException | null, written : number, buffer : std.Float64Array): void): void, readonly ^ (fd : number, buffer : std.Float64Array, offset : undefined, length : null, position : null, callback : (err : node.NodeJS.ErrnoException | null, written : number, buffer : std.Float64Array): void): void, readonly ^ (fd : number, buffer : std.Float64Array, offset : null, length : null, position : null, callback : (err : node.NodeJS.ErrnoException | null, written : number, buffer : std.Float64Array): void): void, readonly ^ (fd : number, buffer : std.DataView, offset : number, length : number, position : number, callback : (err : node.NodeJS.ErrnoException | null, written : number, buffer : std.DataView): void): void, readonly ^ (fd : number, buffer : std.DataView, offset : undefined, length : number, position : number, callback : (err : node.NodeJS.ErrnoException | null, written : number, buffer : std.DataView): void): void, readonly ^ (fd : number, buffer : std.DataView, offset : null, length : number, position : number, callback : (err : node.NodeJS.ErrnoException | null, written : number, buffer : std.DataView): void): void, readonly ^ (fd : number, buffer : std.DataView, offset : number, length : undefined, position : number, callback : (err : node.NodeJS.ErrnoException | null, written : number, buffer : std.DataView): void): void, readonly ^ (fd : number, buffer : std.DataView, offset : undefined, length : undefined, position : number, callback : (err : node.NodeJS.ErrnoException | null, written : number, buffer : std.DataView): void): void, readonly ^ (fd : number, buffer : std.DataView, offset : null, length : undefined, position : number, callback : (err : node.NodeJS.ErrnoException | null, written : number, buffer : std.DataView): void): void, readonly ^ (fd : number, buffer : std.DataView, offset : number, length : null, position : number, callback : (err : node.NodeJS.ErrnoException | null, written : number, buffer : std.DataView): void): void, readonly ^ (fd : number, buffer : std.DataView, offset : undefined, length : null, position : number, callback : (err : node.NodeJS.ErrnoException | null, written : number, buffer : std.DataView): void): void, readonly ^ (fd : number, buffer : std.DataView, offset : null, length : null, position : number, callback : (err : node.NodeJS.ErrnoException | null, written : number, buffer : std.DataView): void): void, readonly ^ (fd : number, buffer : std.DataView, offset : number, length : number, position : undefined, callback : (err : node.NodeJS.ErrnoException | null, written : number, buffer : std.DataView): void): void, readonly ^ (fd : number, buffer : std.DataView, offset : undefined, length : number, position : undefined, callback : (err : node.NodeJS.ErrnoException | null, written : number, buffer : std.DataView): void): void, readonly ^ (fd : number, buffer : std.DataView, offset : null, length : number, position : undefined, callback : (err : node.NodeJS.ErrnoException | null, written : number, buffer : std.DataView): void): void, readonly ^ (fd : number, buffer : std.DataView, offset : number, length : undefined, position : undefined, callback : (err : node.NodeJS.ErrnoException | null, written : number, buffer : std.DataView): void): void, readonly ^ (fd : number, buffer : std.DataView, offset : undefined, length : undefined, position : undefined, callback : (err : node.NodeJS.ErrnoException | null, written : number, buffer : std.DataView): void): void, readonly ^ (fd : number, buffer : std.DataView, offset : null, length : undefined, position : undefined, callback : (err : node.NodeJS.ErrnoException | null, written : number, buffer : std.DataView): void): void, readonly ^ (fd : number, buffer : std.DataView, offset : number, length : null, position : undefined, callback : (err : node.NodeJS.ErrnoException | null, written : number, buffer : std.DataView): void): void, readonly ^ (fd : number, buffer : std.DataView, offset : undefined, length : null, position : undefined, callback : (err : node.NodeJS.ErrnoException | null, written : number, buffer : std.DataView): void): void, readonly ^ (fd : number, buffer : std.DataView, offset : null, length : null, position : undefined, callback : (err : node.NodeJS.ErrnoException | null, written : number, buffer : std.DataView): void): void, readonly ^ (fd : number, buffer : std.DataView, offset : number, length : number, position : null, callback : (err : node.NodeJS.ErrnoException | null, written : number, buffer : std.DataView): void): void, readonly ^ (fd : number, buffer : std.DataView, offset : undefined, length : number, position : null, callback : (err : node.NodeJS.ErrnoException | null, written : number, buffer : std.DataView): void): void, readonly ^ (fd : number, buffer : std.DataView, offset : null, length : number, position : null, callback : (err : node.NodeJS.ErrnoException | null, written : number, buffer : std.DataView): void): void, readonly ^ (fd : number, buffer : std.DataView, offset : number, length : undefined, position : null, callback : (err : node.NodeJS.ErrnoException | null, written : number, buffer : std.DataView): void): void, readonly ^ (fd : number, buffer : std.DataView, offset : undefined, length : undefined, position : null, callback : (err : node.NodeJS.ErrnoException | null, written : number, buffer : std.DataView): void): void, readonly ^ (fd : number, buffer : std.DataView, offset : null, length : undefined, position : null, callback : (err : node.NodeJS.ErrnoException | null, written : number, buffer : std.DataView): void): void, readonly ^ (fd : number, buffer : std.DataView, offset : number, length : null, position : null, callback : (err : node.NodeJS.ErrnoException | null, written : number, buffer : std.DataView): void): void, readonly ^ (fd : number, buffer : std.DataView, offset : undefined, length : null, position : null, callback : (err : node.NodeJS.ErrnoException | null, written : number, buffer : std.DataView): void): void, readonly ^ (fd : number, buffer : std.DataView, offset : null, length : null, position : null, callback : (err : node.NodeJS.ErrnoException | null, written : number, buffer : std.DataView): void): void, readonly ^ (fd : number, buffer : std.Uint8Array, offset : number, length : number, callback : (err : node.NodeJS.ErrnoException | null, written : number, buffer : std.Uint8Array): void): void, readonly ^ (fd : number, buffer : std.Uint8Array, offset : undefined, length : number, callback : (err : node.NodeJS.ErrnoException | null, written : number, buffer : std.Uint8Array): void): void, readonly ^ (fd : number, buffer : std.Uint8Array, offset : null, length : number, callback : (err : node.NodeJS.ErrnoException | null, written : number, buffer : std.Uint8Array): void): void, readonly ^ (fd : number, buffer : std.Uint8Array, offset : number, length : undefined, callback : (err : node.NodeJS.ErrnoException | null, written : number, buffer : std.Uint8Array): void): void, readonly ^ (fd : number, buffer : std.Uint8Array, offset : undefined, length : undefined, callback : (err : node.NodeJS.ErrnoException | null, written : number, buffer : std.Uint8Array): void): void, readonly ^ (fd : number, buffer : std.Uint8Array, offset : null, length : undefined, callback : (err : node.NodeJS.ErrnoException | null, written : number, buffer : std.Uint8Array): void): void, readonly ^ (fd : number, buffer : std.Uint8Array, offset : number, length : null, callback : (err : node.NodeJS.ErrnoException | null, written : number, buffer : std.Uint8Array): void): void, readonly ^ (fd : number, buffer : std.Uint8Array, offset : undefined, length : null, callback : (err : node.NodeJS.ErrnoException | null, written : number, buffer : std.Uint8Array): void): void, readonly ^ (fd : number, buffer : std.Uint8Array, offset : null, length : null, callback : (err : node.NodeJS.ErrnoException | null, written : number, buffer : std.Uint8Array): void): void, readonly ^ (fd : number, buffer : std.Uint8ClampedArray, offset : number, length : number, callback : (err : node.NodeJS.ErrnoException | null, written : number, buffer : std.Uint8ClampedArray): void): void, readonly ^ (fd : number, buffer : std.Uint8ClampedArray, offset : undefined, length : number, callback : (err : node.NodeJS.ErrnoException | null, written : number, buffer : std.Uint8ClampedArray): void): void, readonly ^ (fd : number, buffer : std.Uint8ClampedArray, offset : null, length : number, callback : (err : node.NodeJS.ErrnoException | null, written : number, buffer : std.Uint8ClampedArray): void): void, readonly ^ (fd : number, buffer : std.Uint8ClampedArray, offset : number, length : undefined, callback : (err : node.NodeJS.ErrnoException | null, written : number, buffer : std.Uint8ClampedArray): void): void, readonly ^ (fd : number, buffer : std.Uint8ClampedArray, offset : undefined, length : undefined, callback : (err : node.NodeJS.ErrnoException | null, written : number, buffer : std.Uint8ClampedArray): void): void, readonly ^ (fd : number, buffer : std.Uint8ClampedArray, offset : null, length : undefined, callback : (err : node.NodeJS.ErrnoException | null, written : number, buffer : std.Uint8ClampedArray): void): void, readonly ^ (fd : number, buffer : std.Uint8ClampedArray, offset : number, length : null, callback : (err : node.NodeJS.ErrnoException | null, written : number, buffer : std.Uint8ClampedArray): void): void, readonly ^ (fd : number, buffer : std.Uint8ClampedArray, offset : undefined, length : null, callback : (err : node.NodeJS.ErrnoException | null, written : number, buffer : std.Uint8ClampedArray): void): void, readonly ^ (fd : number, buffer : std.Uint8ClampedArray, offset : null, length : null, callback : (err : node.NodeJS.ErrnoException | null, written : number, buffer : std.Uint8ClampedArray): void): void, readonly ^ (fd : number, buffer : std.Uint16Array, offset : number, length : number, callback : (err : node.NodeJS.ErrnoException | null, written : number, buffer : std.Uint16Array): void): void, readonly ^ (fd : number, buffer : std.Uint16Array, offset : undefined, length : number, callback : (err : node.NodeJS.ErrnoException | null, written : number, buffer : std.Uint16Array): void): void, readonly ^ (fd : number, buffer : std.Uint16Array, offset : null, length : number, callback : (err : node.NodeJS.ErrnoException | null, written : number, buffer : std.Uint16Array): void): void, readonly ^ (fd : number, buffer : std.Uint16Array, offset : number, length : undefined, callback : (err : node.NodeJS.ErrnoException | null, written : number, buffer : std.Uint16Array): void): void, readonly ^ (fd : number, buffer : std.Uint16Array, offset : undefined, length : undefined, callback : (err : node.NodeJS.ErrnoException | null, written : number, buffer : std.Uint16Array): void): void, readonly ^ (fd : number, buffer : std.Uint16Array, offset : null, length : undefined, callback : (err : node.NodeJS.ErrnoException | null, written : number, buffer : std.Uint16Array): void): void, readonly ^ (fd : number, buffer : std.Uint16Array, offset : number, length : null, callback : (err : node.NodeJS.ErrnoException | null, written : number, buffer : std.Uint16Array): void): void, readonly ^ (fd : number, buffer : std.Uint16Array, offset : undefined, length : null, callback : (err : node.NodeJS.ErrnoException | null, written : number, buffer : std.Uint16Array): void): void, readonly ^ (fd : number, buffer : std.Uint16Array, offset : null, length : null, callback : (err : node.NodeJS.ErrnoException | null, written : number, buffer : std.Uint16Array): void): void, readonly ^ (fd : number, buffer : std.Uint32Array, offset : number, length : number, callback : (err : node.NodeJS.ErrnoException | null, written : number, buffer : std.Uint32Array): void): void, readonly ^ (fd : number, buffer : std.Uint32Array, offset : undefined, length : number, callback : (err : node.NodeJS.ErrnoException | null, written : number, buffer : std.Uint32Array): void): void, readonly ^ (fd : number, buffer : std.Uint32Array, offset : null, length : number, callback : (err : node.NodeJS.ErrnoException | null, written : number, buffer : std.Uint32Array): void): void, readonly ^ (fd : number, buffer : std.Uint32Array, offset : number, length : undefined, callback : (err : node.NodeJS.ErrnoException | null, written : number, buffer : std.Uint32Array): void): void, readonly ^ (fd : number, buffer : std.Uint32Array, offset : undefined, length : undefined, callback : (err : node.NodeJS.ErrnoException | null, written : number, buffer : std.Uint32Array): void): void, readonly ^ (fd : number, buffer : std.Uint32Array, offset : null, length : undefined, callback : (err : node.NodeJS.ErrnoException | null, written : number, buffer : std.Uint32Array): void): void, readonly ^ (fd : number, buffer : std.Uint32Array, offset : number, length : null, callback : (err : node.NodeJS.ErrnoException | null, written : number, buffer : std.Uint32Array): void): void, readonly ^ (fd : number, buffer : std.Uint32Array, offset : undefined, length : null, callback : (err : node.NodeJS.ErrnoException | null, written : number, buffer : std.Uint32Array): void): void, readonly ^ (fd : number, buffer : std.Uint32Array, offset : null, length : null, callback : (err : node.NodeJS.ErrnoException | null, written : number, buffer : std.Uint32Array): void): void, readonly ^ (fd : number, buffer : std.Int8Array, offset : number, length : number, callback : (err : node.NodeJS.ErrnoException | null, written : number, buffer : std.Int8Array): void): void, readonly ^ (fd : number, buffer : std.Int8Array, offset : undefined, length : number, callback : (err : node.NodeJS.ErrnoException | null, written : number, buffer : std.Int8Array): void): void, readonly ^ (fd : number, buffer : std.Int8Array, offset : null, length : number, callback : (err : node.NodeJS.ErrnoException | null, written : number, buffer : std.Int8Array): void): void, readonly ^ (fd : number, buffer : std.Int8Array, offset : number, length : undefined, callback : (err : node.NodeJS.ErrnoException | null, written : number, buffer : std.Int8Array): void): void, readonly ^ (fd : number, buffer : std.Int8Array, offset : undefined, length : undefined, callback : (err : node.NodeJS.ErrnoException | null, written : number, buffer : std.Int8Array): void): void, readonly ^ (fd : number, buffer : std.Int8Array, offset : null, length : undefined, callback : (err : node.NodeJS.ErrnoException | null, written : number, buffer : std.Int8Array): void): void, readonly ^ (fd : number, buffer : std.Int8Array, offset : number, length : null, callback : (err : node.NodeJS.ErrnoException | null, written : number, buffer : std.Int8Array): void): void, readonly ^ (fd : number, buffer : std.Int8Array, offset : undefined, length : null, callback : (err : node.NodeJS.ErrnoException | null, written : number, buffer : std.Int8Array): void): void, readonly ^ (fd : number, buffer : std.Int8Array, offset : null, length : null, callback : (err : node.NodeJS.ErrnoException | null, written : number, buffer : std.Int8Array): void): void, readonly ^ (fd : number, buffer : std.Int16Array, offset : number, length : number, callback : (err : node.NodeJS.ErrnoException | null, written : number, buffer : std.Int16Array): void): void, readonly ^ (fd : number, buffer : std.Int16Array, offset : undefined, length : number, callback : (err : node.NodeJS.ErrnoException | null, written : number, buffer : std.Int16Array): void): void, readonly ^ (fd : number, buffer : std.Int16Array, offset : null, length : number, callback : (err : node.NodeJS.ErrnoException | null, written : number, buffer : std.Int16Array): void): void, readonly ^ (fd : number, buffer : std.Int16Array, offset : number, length : undefined, callback : (err : node.NodeJS.ErrnoException | null, written : number, buffer : std.Int16Array): void): void, readonly ^ (fd : number, buffer : std.Int16Array, offset : undefined, length : undefined, callback : (err : node.NodeJS.ErrnoException | null, written : number, buffer : std.Int16Array): void): void, readonly ^ (fd : number, buffer : std.Int16Array, offset : null, length : undefined, callback : (err : node.NodeJS.ErrnoException | null, written : number, buffer : std.Int16Array): void): void, readonly ^ (fd : number, buffer : std.Int16Array, offset : number, length : null, callback : (err : node.NodeJS.ErrnoException | null, written : number, buffer : std.Int16Array): void): void, readonly ^ (fd : number, buffer : std.Int16Array, offset : undefined, length : null, callback : (err : node.NodeJS.ErrnoException | null, written : number, buffer : std.Int16Array): void): void, readonly ^ (fd : number, buffer : std.Int16Array, offset : null, length : null, callback : (err : node.NodeJS.ErrnoException | null, written : number, buffer : std.Int16Array): void): void, readonly ^ (fd : number, buffer : std.Int32Array, offset : number, length : number, callback : (err : node.NodeJS.ErrnoException | null, written : number, buffer : std.Int32Array): void): void, readonly ^ (fd : number, buffer : std.Int32Array, offset : undefined, length : number, callback : (err : node.NodeJS.ErrnoException | null, written : number, buffer : std.Int32Array): void): void, readonly ^ (fd : number, buffer : std.Int32Array, offset : null, length : number, callback : (err : node.NodeJS.ErrnoException | null, written : number, buffer : std.Int32Array): void): void, readonly ^ (fd : number, buffer : std.Int32Array, offset : number, length : undefined, callback : (err : node.NodeJS.ErrnoException | null, written : number, buffer : std.Int32Array): void): void, readonly ^ (fd : number, buffer : std.Int32Array, offset : undefined, length : undefined, callback : (err : node.NodeJS.ErrnoException | null, written : number, buffer : std.Int32Array): void): void, readonly ^ (fd : number, buffer : std.Int32Array, offset : null, length : undefined, callback : (err : node.NodeJS.ErrnoException | null, written : number, buffer : std.Int32Array): void): void, readonly ^ (fd : number, buffer : std.Int32Array, offset : number, length : null, callback : (err : node.NodeJS.ErrnoException | null, written : number, buffer : std.Int32Array): void): void, readonly ^ (fd : number, buffer : std.Int32Array, offset : undefined, length : null, callback : (err : node.NodeJS.ErrnoException | null, written : number, buffer : std.Int32Array): void): void, readonly ^ (fd : number, buffer : std.Int32Array, offset : null, length : null, callback : (err : node.NodeJS.ErrnoException | null, written : number, buffer : std.Int32Array): void): void, readonly ^ (fd : number, buffer : std.Float32Array, offset : number, length : number, callback : (err : node.NodeJS.ErrnoException | null, written : number, buffer : std.Float32Array): void): void, readonly ^ (fd : number, buffer : std.Float32Array, offset : undefined, length : number, callback : (err : node.NodeJS.ErrnoException | null, written : number, buffer : std.Float32Array): void): void, readonly ^ (fd : number, buffer : std.Float32Array, offset : null, length : number, callback : (err : node.NodeJS.ErrnoException | null, written : number, buffer : std.Float32Array): void): void, readonly ^ (fd : number, buffer : std.Float32Array, offset : number, length : undefined, callback : (err : node.NodeJS.ErrnoException | null, written : number, buffer : std.Float32Array): void): void, readonly ^ (fd : number, buffer : std.Float32Array, offset : undefined, length : undefined, callback : (err : node.NodeJS.ErrnoException | null, written : number, buffer : std.Float32Array): void): void, readonly ^ (fd : number, buffer : std.Float32Array, offset : null, length : undefined, callback : (err : node.NodeJS.ErrnoException | null, written : number, buffer : std.Float32Array): void): void, readonly ^ (fd : number, buffer : std.Float32Array, offset : number, length : null, callback : (err : node.NodeJS.ErrnoException | null, written : number, buffer : std.Float32Array): void): void, readonly ^ (fd : number, buffer : std.Float32Array, offset : undefined, length : null, callback : (err : node.NodeJS.ErrnoException | null, written : number, buffer : std.Float32Array): void): void, readonly ^ (fd : number, buffer : std.Float32Array, offset : null, length : null, callback : (err : node.NodeJS.ErrnoException | null, written : number, buffer : std.Float32Array): void): void, readonly ^ (fd : number, buffer : std.Float64Array, offset : number, length : number, callback : (err : node.NodeJS.ErrnoException | null, written : number, buffer : std.Float64Array): void): void, readonly ^ (fd : number, buffer : std.Float64Array, offset : undefined, length : number, callback : (err : node.NodeJS.ErrnoException | null, written : number, buffer : std.Float64Array): void): void, readonly ^ (fd : number, buffer : std.Float64Array, offset : null, length : number, callback : (err : node.NodeJS.ErrnoException | null, written : number, buffer : std.Float64Array): void): void, readonly ^ (fd : number, buffer : std.Float64Array, offset : number, length : undefined, callback : (err : node.NodeJS.ErrnoException | null, written : number, buffer : std.Float64Array): void): void, readonly ^ (fd : number, buffer : std.Float64Array, offset : undefined, length : undefined, callback : (err : node.NodeJS.ErrnoException | null, written : number, buffer : std.Float64Array): void): void, readonly ^ (fd : number, buffer : std.Float64Array, offset : null, length : undefined, callback : (err : node.NodeJS.ErrnoException | null, written : number, buffer : std.Float64Array): void): void, readonly ^ (fd : number, buffer : std.Float64Array, offset : number, length : null, callback : (err : node.NodeJS.ErrnoException | null, written : number, buffer : std.Float64Array): void): void, readonly ^ (fd : number, buffer : std.Float64Array, offset : undefined, length : null, callback : (err : node.NodeJS.ErrnoException | null, written : number, buffer : std.Float64Array): void): void, readonly ^ (fd : number, buffer : std.Float64Array, offset : null, length : null, callback : (err : node.NodeJS.ErrnoException | null, written : number, buffer : std.Float64Array): void): void, readonly ^ (fd : number, buffer : std.DataView, offset : number, length : number, callback : (err : node.NodeJS.ErrnoException | null, written : number, buffer : std.DataView): void): void, readonly ^ (fd : number, buffer : std.DataView, offset : undefined, length : number, callback : (err : node.NodeJS.ErrnoException | null, written : number, buffer : std.DataView): void): void, readonly ^ (fd : number, buffer : std.DataView, offset : null, length : number, callback : (err : node.NodeJS.ErrnoException | null, written : number, buffer : std.DataView): void): void, readonly ^ (fd : number, buffer : std.DataView, offset : number, length : undefined, callback : (err : node.NodeJS.ErrnoException | null, written : number, buffer : std.DataView): void): void, readonly ^ (fd : number, buffer : std.DataView, offset : undefined, length : undefined, callback : (err : node.NodeJS.ErrnoException | null, written : number, buffer : std.DataView): void): void, readonly ^ (fd : number, buffer : std.DataView, offset : null, length : undefined, callback : (err : node.NodeJS.ErrnoException | null, written : number, buffer : std.DataView): void): void, readonly ^ (fd : number, buffer : std.DataView, offset : number, length : null, callback : (err : node.NodeJS.ErrnoException | null, written : number, buffer : std.DataView): void): void, readonly ^ (fd : number, buffer : std.DataView, offset : undefined, length : null, callback : (err : node.NodeJS.ErrnoException | null, written : number, buffer : std.DataView): void): void, readonly ^ (fd : number, buffer : std.DataView, offset : null, length : null, callback : (err : node.NodeJS.ErrnoException | null, written : number, buffer : std.DataView): void): void, readonly ^ (fd : number, buffer : std.Uint8Array, offset : number, callback : (err : node.NodeJS.ErrnoException | null, written : number, buffer : std.Uint8Array): void): void, readonly ^ (fd : number, buffer : std.Uint8Array, offset : undefined, callback : (err : node.NodeJS.ErrnoException | null, written : number, buffer : std.Uint8Array): void): void, readonly ^ (fd : number, buffer : std.Uint8Array, offset : null, callback : (err : node.NodeJS.ErrnoException | null, written : number, buffer : std.Uint8Array): void): void, readonly ^ (fd : number, buffer : std.Uint8ClampedArray, offset : number, callback : (err : node.NodeJS.ErrnoException | null, written : number, buffer : std.Uint8ClampedArray): void): void, readonly ^ (fd : number, buffer : std.Uint8ClampedArray, offset : undefined, callback : (err : node.NodeJS.ErrnoException | null, written : number, buffer : std.Uint8ClampedArray): void): void, readonly ^ (fd : number, buffer : std.Uint8ClampedArray, offset : null, callback : (err : node.NodeJS.ErrnoException | null, written : number, buffer : std.Uint8ClampedArray): void): void, readonly ^ (fd : number, buffer : std.Uint16Array, offset : number, callback : (err : node.NodeJS.ErrnoException | null, written : number, buffer : std.Uint16Array): void): void, readonly ^ (fd : number, buffer : std.Uint16Array, offset : undefined, callback : (err : node.NodeJS.ErrnoException | null, written : number, buffer : std.Uint16Array): void): void, readonly ^ (fd : number, buffer : std.Uint16Array, offset : null, callback : (err : node.NodeJS.ErrnoException | null, written : number, buffer : std.Uint16Array): void): void, readonly ^ (fd : number, buffer : std.Uint32Array, offset : number, callback : (err : node.NodeJS.ErrnoException | null, written : number, buffer : std.Uint32Array): void): void, readonly ^ (fd : number, buffer : std.Uint32Array, offset : undefined, callback : (err : node.NodeJS.ErrnoException | null, written : number, buffer : std.Uint32Array): void): void, readonly ^ (fd : number, buffer : std.Uint32Array, offset : null, callback : (err : node.NodeJS.ErrnoException | null, written : number, buffer : std.Uint32Array): void): void, readonly ^ (fd : number, buffer : std.Int8Array, offset : number, callback : (err : node.NodeJS.ErrnoException | null, written : number, buffer : std.Int8Array): void): void, readonly ^ (fd : number, buffer : std.Int8Array, offset : undefined, callback : (err : node.NodeJS.ErrnoException | null, written : number, buffer : std.Int8Array): void): void, readonly ^ (fd : number, buffer : std.Int8Array, offset : null, callback : (err : node.NodeJS.ErrnoException | null, written : number, buffer : std.Int8Array): void): void, readonly ^ (fd : number, buffer : std.Int16Array, offset : number, callback : (err : node.NodeJS.ErrnoException | null, written : number, buffer : std.Int16Array): void): void, readonly ^ (fd : number, buffer : std.Int16Array, offset : undefined, callback : (err : node.NodeJS.ErrnoException | null, written : number, buffer : std.Int16Array): void): void, readonly ^ (fd : number, buffer : std.Int16Array, offset : null, callback : (err : node.NodeJS.ErrnoException | null, written : number, buffer : std.Int16Array): void): void, readonly ^ (fd : number, buffer : std.Int32Array, offset : number, callback : (err : node.NodeJS.ErrnoException | null, written : number, buffer : std.Int32Array): void): void, readonly ^ (fd : number, buffer : std.Int32Array, offset : undefined, callback : (err : node.NodeJS.ErrnoException | null, written : number, buffer : std.Int32Array): void): void, readonly ^ (fd : number, buffer : std.Int32Array, offset : null, callback : (err : node.NodeJS.ErrnoException | null, written : number, buffer : std.Int32Array): void): void, readonly ^ (fd : number, buffer : std.Float32Array, offset : number, callback : (err : node.NodeJS.ErrnoException | null, written : number, buffer : std.Float32Array): void): void, readonly ^ (fd : number, buffer : std.Float32Array, offset : undefined, callback : (err : node.NodeJS.ErrnoException | null, written : number, buffer : std.Float32Array): void): void, readonly ^ (fd : number, buffer : std.Float32Array, offset : null, callback : (err : node.NodeJS.ErrnoException | null, written : number, buffer : std.Float32Array): void): void, readonly ^ (fd : number, buffer : std.Float64Array, offset : number, callback : (err : node.NodeJS.ErrnoException | null, written : number, buffer : std.Float64Array): void): void, readonly ^ (fd : number, buffer : std.Float64Array, offset : undefined, callback : (err : node.NodeJS.ErrnoException | null, written : number, buffer : std.Float64Array): void): void, readonly ^ (fd : number, buffer : std.Float64Array, offset : null, callback : (err : node.NodeJS.ErrnoException | null, written : number, buffer : std.Float64Array): void): void, readonly ^ (fd : number, buffer : std.DataView, offset : number, callback : (err : node.NodeJS.ErrnoException | null, written : number, buffer : std.DataView): void): void, readonly ^ (fd : number, buffer : std.DataView, offset : undefined, callback : (err : node.NodeJS.ErrnoException | null, written : number, buffer : std.DataView): void): void, readonly ^ (fd : number, buffer : std.DataView, offset : null, callback : (err : node.NodeJS.ErrnoException | null, written : number, buffer : std.DataView): void): void, readonly ^ (fd : number, buffer : std.Uint8Array, callback : (err : node.NodeJS.ErrnoException | null, written : number, buffer : std.Uint8Array): void): void, readonly ^ (fd : number, buffer : std.Uint8ClampedArray, callback : (err : node.NodeJS.ErrnoException | null, written : number, buffer : std.Uint8ClampedArray): void): void, readonly ^ (fd : number, buffer : std.Uint16Array, callback : (err : node.NodeJS.ErrnoException | null, written : number, buffer : std.Uint16Array): void): void, readonly ^ (fd : number, buffer : std.Uint32Array, callback : (err : node.NodeJS.ErrnoException | null, written : number, buffer : std.Uint32Array): void): void, readonly ^ (fd : number, buffer : std.Int8Array, callback : (err : node.NodeJS.ErrnoException | null, written : number, buffer : std.Int8Array): void): void, readonly ^ (fd : number, buffer : std.Int16Array, callback : (err : node.NodeJS.ErrnoException | null, written : number, buffer : std.Int16Array): void): void, readonly ^ (fd : number, buffer : std.Int32Array, callback : (err : node.NodeJS.ErrnoException | null, written : number, buffer : std.Int32Array): void): void, readonly ^ (fd : number, buffer : std.Float32Array, callback : (err : node.NodeJS.ErrnoException | null, written : number, buffer : std.Float32Array): void): void, readonly ^ (fd : number, buffer : std.Float64Array, callback : (err : node.NodeJS.ErrnoException | null, written : number, buffer : std.Float64Array): void): void, readonly ^ (fd : number, buffer : std.DataView, callback : (err : node.NodeJS.ErrnoException | null, written : number, buffer : std.DataView): void): void, readonly ^ (fd : number, string : string, position : number, encoding : node.BufferEncoding, callback : (err : node.NodeJS.ErrnoException | null, written : number, str : string): void): void, readonly ^ (fd : number, string : string, position : undefined, encoding : node.BufferEncoding, callback : (err : node.NodeJS.ErrnoException | null, written : number, str : string): void): void, readonly ^ (fd : number, string : string, position : null, encoding : node.BufferEncoding, callback : (err : node.NodeJS.ErrnoException | null, written : number, str : string): void): void, readonly ^ (fd : number, string : string, position : number, encoding : undefined, callback : (err : node.NodeJS.ErrnoException | null, written : number, str : string): void): void, readonly ^ (fd : number, string : string, position : undefined, encoding : undefined, callback : (err : node.NodeJS.ErrnoException | null, written : number, str : string): void): void, readonly ^ (fd : number, string : string, position : null, encoding : undefined, callback : (err : node.NodeJS.ErrnoException | null, written : number, str : string): void): void, readonly ^ (fd : number, string : string, position : number, encoding : null, callback : (err : node.NodeJS.ErrnoException | null, written : number, str : string): void): void, readonly ^ (fd : number, string : string, position : undefined, encoding : null, callback : (err : node.NodeJS.ErrnoException | null, written : number, str : string): void): void, readonly ^ (fd : number, string : string, position : null, encoding : null, callback : (err : node.NodeJS.ErrnoException | null, written : number, str : string): void): void, readonly ^ (fd : number, string : string, position : number, callback : (err : node.NodeJS.ErrnoException | null, written : number, str : string): void): void, readonly ^ (fd : number, string : string, position : undefined, callback : (err : node.NodeJS.ErrnoException | null, written : number, str : string): void): void, readonly ^ (fd : number, string : string, position : null, callback : (err : node.NodeJS.ErrnoException | null, written : number, str : string): void): void, readonly ^ (fd : number, string : string, callback : (err : node.NodeJS.ErrnoException | null, written : number, str : string): void): void},  readonly fchown :{readonly ^ (fd : number, uid : number, gid : number, callback : node.fs.NoParamCallback): void}, readonly writeFileSync (path : node.fs.PathLike, data : string): void, readonly writeFileSync (path : number, data : string): void, readonly writeFileSync (path : node.fs.PathLike, data : node.NodeJS.ArrayBufferView): void, readonly writeFileSync (path : number, data : node.NodeJS.ArrayBufferView): void, readonly writeFileSync (path : node.fs.PathLike, data : string, options : node.fs.WriteFileOptions): void, readonly writeFileSync (path : number, data : string, options : node.fs.WriteFileOptions): void, readonly writeFileSync (path : node.fs.PathLike, data : node.NodeJS.ArrayBufferView, options : node.fs.WriteFileOptions): void, readonly writeFileSync (path : number, data : node.NodeJS.ArrayBufferView, options : node.fs.WriteFileOptions): void, readonly readdirSync (path : node.fs.PathLike): std.Array<string>, readonly readdirSync (path : node.fs.PathLike): std.Array<string>, readonly readdirSync (path : node.fs.PathLike, options : node.anon.WithFileTypes): std.Array<string>, readonly readdirSync (path : node.fs.PathLike, options : node.BufferEncoding): std.Array<string>, readonly readdirSync (path : node.fs.PathLike, options : node.anon.Encoding): std.Array<node.Buffer>, readonly readdirSync (path : node.fs.PathLike, options : 'buffer'): std.Array<node.Buffer>, readonly readdirSync (path : node.fs.PathLike): std.Array<string> | std.Array<node.Buffer>, readonly readdirSync (path : node.fs.PathLike): std.Array<string> | std.Array<node.Buffer>, readonly readdirSync (path : node.fs.PathLike, options : node.anon.BaseEncodingOptionswithFi): std.Array<string> | std.Array<node.Buffer>, readonly readdirSync (path : node.fs.PathLike, options : node.BufferEncoding): std.Array<string> | std.Array<node.Buffer>, readonly readdirSync (path : node.fs.PathLike, options : node.anon.BaseEncodingOptionswithFiEncoding): std.Array<node.fs.Dirent>, readonly readlinkSync (path : node.fs.PathLike): string, readonly readlinkSync (path : node.fs.PathLike): string, readonly readlinkSync (path : node.fs.PathLike, options : node.fs.BaseEncodingOptions): string, readonly readlinkSync (path : node.fs.PathLike, options : node.BufferEncoding): string, readonly readlinkSync (path : node.fs.PathLike, options : node.fs.BufferEncodingOption): node.Buffer, readonly readlinkSync (path : node.fs.PathLike): string | node.Buffer, readonly readlinkSync (path : node.fs.PathLike): string | node.Buffer, readonly readlinkSync (path : node.fs.PathLike, options : node.fs.BaseEncodingOptions): string | node.Buffer, readonly readlinkSync (path : node.fs.PathLike, options : string): string | node.Buffer,  readonly realpath :{readonly native (path : node.fs.PathLike, options : node.fs.BaseEncodingOptions, callback : (err : node.NodeJS.ErrnoException | null, resolvedPath : string): void): void, readonly native (path : node.fs.PathLike, options : node.BufferEncoding, callback : (err : node.NodeJS.ErrnoException | null, resolvedPath : string): void): void, readonly native (path : node.fs.PathLike, options : undefined, callback : (err : node.NodeJS.ErrnoException | null, resolvedPath : string): void): void, readonly native (path : node.fs.PathLike, options : null, callback : (err : node.NodeJS.ErrnoException | null, resolvedPath : string): void): void, readonly native (path : node.fs.PathLike, options : node.fs.BufferEncodingOption, callback : (err : node.NodeJS.ErrnoException | null, resolvedPath : node.Buffer): void): void, readonly native (path : node.fs.PathLike, options : node.fs.BaseEncodingOptions, callback : (err : node.NodeJS.ErrnoException | null, resolvedPath : string | node.Buffer): void): void, readonly native (path : node.fs.PathLike, options : string, callback : (err : node.NodeJS.ErrnoException | null, resolvedPath : string | node.Buffer): void): void, readonly native (path : node.fs.PathLike, options : undefined, callback : (err : node.NodeJS.ErrnoException | null, resolvedPath : string | node.Buffer): void): void, readonly native (path : node.fs.PathLike, options : null, callback : (err : node.NodeJS.ErrnoException | null, resolvedPath : string | node.Buffer): void): void, readonly native (path : node.fs.PathLike, callback : (err : node.NodeJS.ErrnoException | null, resolvedPath : string): void): void, readonly ^ (path : node.fs.PathLike, options : node.fs.BaseEncodingOptions, callback : (err : node.NodeJS.ErrnoException | null, resolvedPath : string): void): void, readonly ^ (path : node.fs.PathLike, options : node.BufferEncoding, callback : (err : node.NodeJS.ErrnoException | null, resolvedPath : string): void): void, readonly ^ (path : node.fs.PathLike, options : undefined, callback : (err : node.NodeJS.ErrnoException | null, resolvedPath : string): void): void, readonly ^ (path : node.fs.PathLike, options : null, callback : (err : node.NodeJS.ErrnoException | null, resolvedPath : string): void): void, readonly ^ (path : node.fs.PathLike, options : node.fs.BufferEncodingOption, callback : (err : node.NodeJS.ErrnoException | null, resolvedPath : node.Buffer): void): void, readonly ^ (path : node.fs.PathLike, options : node.fs.BaseEncodingOptions, callback : (err : node.NodeJS.ErrnoException | null, resolvedPath : string | node.Buffer): void): void, readonly ^ (path : node.fs.PathLike, options : string, callback : (err : node.NodeJS.ErrnoException | null, resolvedPath : string | node.Buffer): void): void, readonly ^ (path : node.fs.PathLike, options : undefined, callback : (err : node.NodeJS.ErrnoException | null, resolvedPath : string | node.Buffer): void): void, readonly ^ (path : node.fs.PathLike, options : null, callback : (err : node.NodeJS.ErrnoException | null, resolvedPath : string | node.Buffer): void): void, readonly ^ (path : node.fs.PathLike, callback : (err : node.NodeJS.ErrnoException | null, resolvedPath : string): void): void}, readonly existsSync (path : node.fs.PathLike): boolean, readonly futimesSync (fd : number, atime : string, mtime : string): void, readonly futimesSync (fd : number, atime : number, mtime : string): void, readonly futimesSync (fd : number, atime : std.Date, mtime : string): void, readonly futimesSync (fd : number, atime : string, mtime : number): void, readonly futimesSync (fd : number, atime : number, mtime : number): void, readonly futimesSync (fd : number, atime : std.Date, mtime : number): void, readonly futimesSync (fd : number, atime : string, mtime : std.Date): void, readonly futimesSync (fd : number, atime : number, mtime : std.Date): void, readonly futimesSync (fd : number, atime : std.Date, mtime : std.Date): void,  readonly readdir :{readonly ^ (path : node.fs.PathLike, options : node.anon.WithFileTypes, callback : (err : node.NodeJS.ErrnoException | null, files : std.Array<string>): void): void, readonly ^ (path : node.fs.PathLike, options : node.BufferEncoding, callback : (err : node.NodeJS.ErrnoException | null, files : std.Array<string>): void): void, readonly ^ (path : node.fs.PathLike, options : undefined, callback : (err : node.NodeJS.ErrnoException | null, files : std.Array<string>): void): void, readonly ^ (path : node.fs.PathLike, options : null, callback : (err : node.NodeJS.ErrnoException | null, files : std.Array<string>): void): void, readonly ^ (path : node.fs.PathLike, options : node.anon.Encoding, callback : (err : node.NodeJS.ErrnoException | null, files : std.Array<node.Buffer>): void): void, readonly ^ (path : node.fs.PathLike, options : 'buffer', callback : (err : node.NodeJS.ErrnoException | null, files : std.Array<node.Buffer>): void): void, readonly ^ (path : node.fs.PathLike, options : node.anon.BaseEncodingOptionswithFi, callback : (err : node.NodeJS.ErrnoException | null, files : std.Array<string> | std.Array<node.Buffer>): void): void, readonly ^ (path : node.fs.PathLike, options : node.BufferEncoding, callback : (err : node.NodeJS.ErrnoException | null, files : std.Array<string> | std.Array<node.Buffer>): void): void, readonly ^ (path : node.fs.PathLike, options : undefined, callback : (err : node.NodeJS.ErrnoException | null, files : std.Array<string> | std.Array<node.Buffer>): void): void, readonly ^ (path : node.fs.PathLike, options : null, callback : (err : node.NodeJS.ErrnoException | null, files : std.Array<string> | std.Array<node.Buffer>): void): void, readonly ^ (path : node.fs.PathLike, callback : (err : node.NodeJS.ErrnoException | null, files : std.Array<string>): void): void, readonly ^ (path : node.fs.PathLike, options : node.anon.BaseEncodingOptionswithFiEncoding, callback : (err : node.NodeJS.ErrnoException | null, files : std.Array<node.fs.Dirent>): void): void}, readonly watch (filename : node.fs.PathLike): node.fs.FSWatcher, readonly watch (filename : node.fs.PathLike): node.fs.FSWatcher, readonly watch (filename : node.fs.PathLike, options : node.anon.Persistent): node.fs.FSWatcher, readonly watch (filename : node.fs.PathLike, options : node.BufferEncoding): node.fs.FSWatcher, readonly watch (filename : node.fs.PathLike, options : node.anon.Persistent, listener : (event : string, filename : string): void): node.fs.FSWatcher, readonly watch (filename : node.fs.PathLike, options : node.BufferEncoding, listener : (event : string, filename : string): void): node.fs.FSWatcher, readonly watch (filename : node.fs.PathLike, options : undefined, listener : (event : string, filename : string): void): node.fs.FSWatcher, readonly watch (filename : node.fs.PathLike, options : null, listener : (event : string, filename : string): void): node.fs.FSWatcher, readonly watch (filename : node.fs.PathLike, options : node.anon.Recursive): node.fs.FSWatcher, readonly watch (filename : node.fs.PathLike, options : 'buffer'): node.fs.FSWatcher, readonly watch (filename : node.fs.PathLike, options : node.anon.Recursive, listener : (event : string, filename : node.Buffer): void): node.fs.FSWatcher, readonly watch (filename : node.fs.PathLike, options : 'buffer', listener : (event : string, filename : node.Buffer): void): node.fs.FSWatcher, readonly watch (filename : node.fs.PathLike): node.fs.FSWatcher, readonly watch (filename : node.fs.PathLike, options : node.anon.Persistent): node.fs.FSWatcher, readonly watch (filename : node.fs.PathLike, options : string): node.fs.FSWatcher, readonly watch (filename : node.fs.PathLike, options : node.anon.Persistent, listener : (event : string, filename : string | node.Buffer): void): node.fs.FSWatcher, readonly watch (filename : node.fs.PathLike, options : string, listener : (event : string, filename : string | node.Buffer): void): node.fs.FSWatcher, readonly watch (filename : node.fs.PathLike, options : null, listener : (event : string, filename : string | node.Buffer): void): node.fs.FSWatcher, readonly watch (filename : node.fs.PathLike): node.fs.FSWatcher, readonly watch (filename : node.fs.PathLike, listener : (event : string, filename : string): any): node.fs.FSWatcher,  readonly mkdtemp :{readonly ^ (prefix : string, options : node.fs.BaseEncodingOptions, callback : (err : node.NodeJS.ErrnoException | null, folder : string): void): void, readonly ^ (prefix : string, options : node.BufferEncoding, callback : (err : node.NodeJS.ErrnoException | null, folder : string): void): void, readonly ^ (prefix : string, options : undefined, callback : (err : node.NodeJS.ErrnoException | null, folder : string): void): void, readonly ^ (prefix : string, options : null, callback : (err : node.NodeJS.ErrnoException | null, folder : string): void): void, readonly ^ (prefix : string, options : 'buffer', callback : (err : node.NodeJS.ErrnoException | null, folder : node.Buffer): void): void, readonly ^ (prefix : string, options : node.anon.2, callback : (err : node.NodeJS.ErrnoException | null, folder : node.Buffer): void): void, readonly ^ (prefix : string, options : node.fs.BaseEncodingOptions, callback : (err : node.NodeJS.ErrnoException | null, folder : string | node.Buffer): void): void, readonly ^ (prefix : string, options : string, callback : (err : node.NodeJS.ErrnoException | null, folder : string | node.Buffer): void): void, readonly ^ (prefix : string, options : undefined, callback : (err : node.NodeJS.ErrnoException | null, folder : string | node.Buffer): void): void, readonly ^ (prefix : string, options : null, callback : (err : node.NodeJS.ErrnoException | null, folder : string | node.Buffer): void): void, readonly ^ (prefix : string, callback : (err : node.NodeJS.ErrnoException | null, folder : string): void): void}}, 'readFileSync' | 'readdirSync' | 'readdir' | 'existsSync' | 'lstatSync' | 'statSync'> & std.Pick<fs-merger.fs-merger.FSMerger, 'at' | 'readFileMeta' | 'entries' | 'relativePathTo'> */
@js.native
trait FS extends js.Object {
  
  def at(index: Double): FSMerger = js.native
  @JSName("at")
  var at_Original: js.Function1[/* index */ Double, FSMerger] = js.native
  
  def entries(): js.Array[Entry] = js.native
  def entries(dirPath: js.UndefOr[scala.Nothing], options: Options): js.Array[Entry] = js.native
  def entries(dirPath: String): js.Array[Entry] = js.native
  def entries(dirPath: String, options: Options): js.Array[Entry] = js.native
  @JSName("entries")
  var entries_Original: js.Function2[/* dirPath */ js.UndefOr[String], /* options */ js.UndefOr[Options], js.Array[Entry]] = js.native
  
  def existsSync(path: PathLike): Boolean = js.native
  @JSName("existsSync")
  var existsSync_Original: js.Function1[/* path */ PathLike, Boolean] = js.native
  
  def lstatSync(path: PathLike): Stats = js.native
  @JSName("lstatSync")
  var lstatSync_Original: js.Function1[/* path */ PathLike, Stats] = js.native
  
  def readFileMeta(filePath: String): js.UndefOr[FileMeta] = js.native
  def readFileMeta(filePath: String, options: FileMetaOption): js.UndefOr[FileMeta] = js.native
  @JSName("readFileMeta")
  var readFileMeta_Original: js.Function2[
    /* filePath */ String, 
    /* options */ js.UndefOr[FileMetaOption], 
    js.UndefOr[FileMeta]
  ] = js.native
  
  def readFileSync(path: PathLike): Buffer = js.native
  @JSName("readFileSync")
  var readFileSync_Original: js.Function1[/* path */ PathLike, Buffer] = js.native
  
  var readdir: Typeofreaddir = js.native
  
  def readdirSync(path: PathLike): js.Array[String] = js.native
  @JSName("readdirSync")
  var readdirSync_Original: js.Function1[/* path */ PathLike, js.Array[String]] = js.native
  
  def relativePathTo(absolutePath: String): At | Null = js.native
  @JSName("relativePathTo")
  var relativePathTo_Original: js.Function1[/* absolutePath */ String, At | Null] = js.native
  
  def statSync(path: PathLike): Stats = js.native
  @JSName("statSync")
  var statSync_Original: js.Function1[/* path */ PathLike, Stats] = js.native
}
