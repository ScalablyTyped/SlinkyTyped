package typingsSlinky.faviconsWebpackPlugin.optionsMod

import typingsSlinky.faviconsWebpackPlugin.anon.PartialConfiguration
import typingsSlinky.faviconsWebpackPlugin.faviconsWebpackPluginStrings.light
import typingsSlinky.faviconsWebpackPlugin.faviconsWebpackPluginStrings.webapp
import scala.scalajs.js
import scala.scalajs.js.`|`
import scala.scalajs.js.annotation.{JSGlobalScope, JSGlobal, JSImport, JSName, JSBracketAccess}

/* Inlined std.Required<std.Omit<favicons-webpack-plugin.favicons-webpack-plugin/src/options.FaviconWebpackPlugionOptions, 'mode' | 'devMode' | 'publicPath' | 'outputPath'>> & favicons-webpack-plugin.favicons-webpack-plugin/src/options.FaviconWebpackPlugionOptions */
@js.native
trait FaviconWebpackPlugionInternalOptions extends js.Object {
  
  /** 
    * Enable caching and optionally specify the path to store cached data
    *  Note: disabling caching may increase build times considerably
    */
  var cache: Boolean with js.UndefOr[Boolean] = js.native
  
  /**
    * Favicon generation modes used during development  
    * - `light`  
    *     the light mode is using the original logo as favicon
    *     this mode has a very fast compilation but limited features
    *     by default this mode is used for development
    * - `webapp`  
    *     the webapp mode is convertig the original logo into different favicons
    *     this mode has a quite slow compilation but wide browser support
    *     by default this mode is used for production
    */
  var devMode: js.UndefOr[light | webapp] = js.native
  
  /** 
    * Favicons configuration option 
    * @see https://github.com/itgalaxy/favicons
    */
  var favicons: PartialConfiguration with js.UndefOr[PartialConfiguration] = js.native
  
  /**
    * 
    * Inject html links/metadata (requires html-webpack-plugin).
    * This option accepts arguments of different types:
    * - boolean
    *   `false`: disables injection
    *   `true`: enables injection if that is not disabled in html-webpack-plugin
    * - function
    *   any predicate that takes an instance of html-webpack-plugin and returns either
    *   `true` or `false` to control the injection of html metadata for the html files
    *   generated by this instance.
    */
  var inject: (Boolean | (js.Function1[/* htmlWebpackPlugin */ js.Any, Boolean])) with (js.UndefOr[Boolean | (js.Function1[/* htmlWebpackPlugin */ js.Any, Boolean])]) = js.native
  
  /** our source logo - can be png or svg (required) */
  var logo: String = js.native
  
  /**
    * Favicon generation modes
    * - `light`  
    *     the light mode is using the original logo as favicon
    *     this mode has a very fast compilation but limited features
    *     by default this mode is used for development
    * - `webapp`  
    *     the webapp mode is convertig the original logo into different favicons
    *     this mode has a quite slow compilation but wide browser support
    *     by default this mode is used for production
    */
  var mode: js.UndefOr[light | webapp] = js.native
  
  /**
    * The directory to output the assets relative to the webpack output dir.
    * Relative string paths are allowed here ie '../public/static'. If this
    * option is not set, `prefix` is used.
    */
  var outputPath: js.UndefOr[String] = js.native
  
  /**
    * Prefix path for generated assets
    */
  var prefix: String with js.UndefOr[String] = js.native
  
  /** Override the publicPath option usually read from webpack configuration */
  var publicPath: js.UndefOr[String] = js.native
}
object FaviconWebpackPlugionInternalOptions {
  
  @scala.inline
  def apply(
    cache: Boolean with js.UndefOr[Boolean],
    favicons: PartialConfiguration with js.UndefOr[PartialConfiguration],
    inject: (Boolean | (js.Function1[/* htmlWebpackPlugin */ js.Any, Boolean])) with (js.UndefOr[Boolean | (js.Function1[/* htmlWebpackPlugin */ js.Any, Boolean])]),
    logo: String,
    prefix: String with js.UndefOr[String]
  ): FaviconWebpackPlugionInternalOptions = {
    val __obj = js.Dynamic.literal(cache = cache.asInstanceOf[js.Any], favicons = favicons.asInstanceOf[js.Any], inject = inject.asInstanceOf[js.Any], logo = logo.asInstanceOf[js.Any], prefix = prefix.asInstanceOf[js.Any])
    __obj.asInstanceOf[FaviconWebpackPlugionInternalOptions]
  }
  
  @scala.inline
  implicit class FaviconWebpackPlugionInternalOptionsOps[Self <: FaviconWebpackPlugionInternalOptions] (val x: Self) extends AnyVal {
    
    @scala.inline
    def duplicate: Self = (js.Dynamic.global.Object.assign(js.Dynamic.literal(), x)).asInstanceOf[Self]
    
    @scala.inline
    def combineWith[Other <: js.Any](other: Other): Self with Other = (js.Dynamic.global.Object.assign(js.Dynamic.literal(), x, other.asInstanceOf[js.Any])).asInstanceOf[Self with Other]
    
    @scala.inline
    def set(key: String, value: js.Any): Self = {
      x.asInstanceOf[js.Dynamic].updateDynamic(key)(value)
      x
    }
    
    @scala.inline
    def setCache(value: Boolean with js.UndefOr[Boolean]): Self = this.set("cache", value.asInstanceOf[js.Any])
    
    @scala.inline
    def setFavicons(value: PartialConfiguration with js.UndefOr[PartialConfiguration]): Self = this.set("favicons", value.asInstanceOf[js.Any])
    
    @scala.inline
    def setInject(
      value: (Boolean | (js.Function1[/* htmlWebpackPlugin */ js.Any, Boolean])) with (js.UndefOr[Boolean | (js.Function1[/* htmlWebpackPlugin */ js.Any, Boolean])])
    ): Self = this.set("inject", value.asInstanceOf[js.Any])
    
    @scala.inline
    def setLogo(value: String): Self = this.set("logo", value.asInstanceOf[js.Any])
    
    @scala.inline
    def setPrefix(value: String with js.UndefOr[String]): Self = this.set("prefix", value.asInstanceOf[js.Any])
    
    @scala.inline
    def setDevMode(value: light | webapp): Self = this.set("devMode", value.asInstanceOf[js.Any])
    
    @scala.inline
    def deleteDevMode: Self = this.set("devMode", js.undefined)
    
    @scala.inline
    def setMode(value: light | webapp): Self = this.set("mode", value.asInstanceOf[js.Any])
    
    @scala.inline
    def deleteMode: Self = this.set("mode", js.undefined)
    
    @scala.inline
    def setOutputPath(value: String): Self = this.set("outputPath", value.asInstanceOf[js.Any])
    
    @scala.inline
    def deleteOutputPath: Self = this.set("outputPath", js.undefined)
    
    @scala.inline
    def setPublicPath(value: String): Self = this.set("publicPath", value.asInstanceOf[js.Any])
    
    @scala.inline
    def deletePublicPath: Self = this.set("publicPath", js.undefined)
  }
}
