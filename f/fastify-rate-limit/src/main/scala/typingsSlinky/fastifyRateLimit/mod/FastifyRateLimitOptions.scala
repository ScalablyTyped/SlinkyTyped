package typingsSlinky.fastifyRateLimit.mod

import typingsSlinky.ioredis.mod.Redis
import scala.scalajs.js
import scala.scalajs.js.`|`
import scala.scalajs.js.annotation.{JSGlobalScope, JSGlobal, JSImport, JSName, JSBracketAccess}

@js.native
trait FastifyRateLimitOptions[T] extends js.Object {
  
  /**
    * This plugin internally uses a lru cache to handle the clients, you can
    * change the size of the cache with this option.
    *
    * default: 5000
    */
  var cache: js.UndefOr[Double] = js.native
  
  /**
    * Function to generate a unique identifier for each incoming request.
    *
    * default: (req) => req.ip
    */
  var keyGenerator: js.UndefOr[js.Function1[/* req */ T, String]] = js.native
  
  /**
    * Is the maximum number of requests a single client can perform inside a
    * timeWindow.
    *
    * default: 1000
    */
  var max: js.UndefOr[Double] = js.native
  
  /**
    * By default this plugins uses an in-memory store, which is fast but if
    * you application works on more than one server it is useless, since the
    * data is store locally. You can pass a Redis client here and magically
    * the issue is solved. To achieve the maximum speed, this plugins requires
    * the use of ioredis.
    *
    * default: null
    */
  var redis: js.UndefOr[Redis] = js.native
  
  /**
    * If `true` it will skip errors generated by the storage (eg, redis not
    * reachable).
    *
    * default: false
    */
  var skipOnError: js.UndefOr[Boolean] = js.native
  
  /**
    * The duration of the time window, can be expressed in milliseconds (as a
    * number) or as a string, see ms too see the supported formats
    *
    * default: 1000 * 60
    */
  var timeWindow: js.UndefOr[Double] = js.native
  
  /**
    * Array of string of ips to exclude from rate limiting.
    *
    * default: []
    */
  var whitelist: js.UndefOr[js.Array[String]] = js.native
}
object FastifyRateLimitOptions {
  
  @scala.inline
  def apply[T](): FastifyRateLimitOptions[T] = {
    val __obj = js.Dynamic.literal()
    __obj.asInstanceOf[FastifyRateLimitOptions[T]]
  }
  
  @scala.inline
  implicit class FastifyRateLimitOptionsOps[Self <: FastifyRateLimitOptions[_], T] (val x: Self with FastifyRateLimitOptions[T]) extends AnyVal {
    
    @scala.inline
    def duplicate: Self = (js.Dynamic.global.Object.assign(js.Dynamic.literal(), x)).asInstanceOf[Self]
    
    @scala.inline
    def combineWith[Other <: js.Any](other: Other): Self with Other = (js.Dynamic.global.Object.assign(js.Dynamic.literal(), x, other.asInstanceOf[js.Any])).asInstanceOf[Self with Other]
    
    @scala.inline
    def set(key: String, value: js.Any): Self = {
      x.asInstanceOf[js.Dynamic].updateDynamic(key)(value)
      x
    }
    
    @scala.inline
    def setCache(value: Double): Self = this.set("cache", value.asInstanceOf[js.Any])
    
    @scala.inline
    def deleteCache: Self = this.set("cache", js.undefined)
    
    @scala.inline
    def setKeyGenerator(value: /* req */ T => String): Self = this.set("keyGenerator", js.Any.fromFunction1(value))
    
    @scala.inline
    def deleteKeyGenerator: Self = this.set("keyGenerator", js.undefined)
    
    @scala.inline
    def setMax(value: Double): Self = this.set("max", value.asInstanceOf[js.Any])
    
    @scala.inline
    def deleteMax: Self = this.set("max", js.undefined)
    
    @scala.inline
    def setRedis(value: Redis): Self = this.set("redis", value.asInstanceOf[js.Any])
    
    @scala.inline
    def deleteRedis: Self = this.set("redis", js.undefined)
    
    @scala.inline
    def setSkipOnError(value: Boolean): Self = this.set("skipOnError", value.asInstanceOf[js.Any])
    
    @scala.inline
    def deleteSkipOnError: Self = this.set("skipOnError", js.undefined)
    
    @scala.inline
    def setTimeWindow(value: Double): Self = this.set("timeWindow", value.asInstanceOf[js.Any])
    
    @scala.inline
    def deleteTimeWindow: Self = this.set("timeWindow", js.undefined)
    
    @scala.inline
    def setWhitelistVarargs(value: String*): Self = this.set("whitelist", js.Array(value :_*))
    
    @scala.inline
    def setWhitelist(value: js.Array[String]): Self = this.set("whitelist", value.asInstanceOf[js.Any])
    
    @scala.inline
    def deleteWhitelist: Self = this.set("whitelist", js.undefined)
  }
}
