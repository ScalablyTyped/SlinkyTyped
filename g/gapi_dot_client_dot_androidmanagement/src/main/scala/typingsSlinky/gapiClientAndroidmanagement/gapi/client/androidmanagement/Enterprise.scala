package typingsSlinky.gapiClientAndroidmanagement.gapi.client.androidmanagement

import scala.scalajs.js
import scala.scalajs.js.`|`
import scala.scalajs.js.annotation.{JSGlobalScope, JSGlobal, JSImport, JSName, JSBracketAccess}

@js.native
trait Enterprise extends js.Object {
  
  /**
    * Whether app auto-approval is enabled. When enabled, apps installed via policy for this enterprise have all permissions automatically approved. When
    * enabled, it is the caller's responsibility to display the permissions required by an app to the enterprise admin before setting the app to be installed
    * in a policy.
    */
  var appAutoApprovalEnabled: js.UndefOr[Boolean] = js.native
  
  /** The notification types to enable via Google Cloud Pub/Sub. */
  var enabledNotificationTypes: js.UndefOr[js.Array[String]] = js.native
  
  /** The name of the enterprise as it will appear to users. */
  var enterpriseDisplayName: js.UndefOr[String] = js.native
  
  /**
    * An image displayed as a logo during device provisioning. Supported types are: image/bmp, image/gif, image/x-ico, image/jpeg, image/png, image/webp,
    * image/vnd.wap.wbmp, image/x-adobe-dng.
    */
  var logo: js.UndefOr[ExternalData] = js.native
  
  /** The name of the enterprise which is generated by the server during creation, in the form enterprises/{enterpriseId} */
  var name: js.UndefOr[String] = js.native
  
  /**
    * A color in RGB format indicating the predominant color to display in the device management app UI. The color components are stored as follows: (red <<
    * 16) | (green << 8) | blue, where each component may take a value between 0 and 255 inclusive.
    */
  var primaryColor: js.UndefOr[Double] = js.native
  
  /**
    * When Cloud Pub/Sub notifications are enabled, this field is required to indicate the topic to which the notifications will be published. The format of
    * this field is projects/{project}/topics/{topic}. You must have granted the publish permission on this topic to
    * android-cloud-policy@system.gserviceaccount.com
    */
  var pubsubTopic: js.UndefOr[String] = js.native
}
object Enterprise {
  
  @scala.inline
  def apply(): Enterprise = {
    val __obj = js.Dynamic.literal()
    __obj.asInstanceOf[Enterprise]
  }
  
  @scala.inline
  implicit class EnterpriseOps[Self <: Enterprise] (val x: Self) extends AnyVal {
    
    @scala.inline
    def duplicate: Self = (js.Dynamic.global.Object.assign(js.Dynamic.literal(), x)).asInstanceOf[Self]
    
    @scala.inline
    def combineWith[Other <: js.Any](other: Other): Self with Other = (js.Dynamic.global.Object.assign(js.Dynamic.literal(), x, other.asInstanceOf[js.Any])).asInstanceOf[Self with Other]
    
    @scala.inline
    def set(key: String, value: js.Any): Self = {
      x.asInstanceOf[js.Dynamic].updateDynamic(key)(value)
      x
    }
    
    @scala.inline
    def setAppAutoApprovalEnabled(value: Boolean): Self = this.set("appAutoApprovalEnabled", value.asInstanceOf[js.Any])
    
    @scala.inline
    def deleteAppAutoApprovalEnabled: Self = this.set("appAutoApprovalEnabled", js.undefined)
    
    @scala.inline
    def setEnabledNotificationTypesVarargs(value: String*): Self = this.set("enabledNotificationTypes", js.Array(value :_*))
    
    @scala.inline
    def setEnabledNotificationTypes(value: js.Array[String]): Self = this.set("enabledNotificationTypes", value.asInstanceOf[js.Any])
    
    @scala.inline
    def deleteEnabledNotificationTypes: Self = this.set("enabledNotificationTypes", js.undefined)
    
    @scala.inline
    def setEnterpriseDisplayName(value: String): Self = this.set("enterpriseDisplayName", value.asInstanceOf[js.Any])
    
    @scala.inline
    def deleteEnterpriseDisplayName: Self = this.set("enterpriseDisplayName", js.undefined)
    
    @scala.inline
    def setLogo(value: ExternalData): Self = this.set("logo", value.asInstanceOf[js.Any])
    
    @scala.inline
    def deleteLogo: Self = this.set("logo", js.undefined)
    
    @scala.inline
    def setName(value: String): Self = this.set("name", value.asInstanceOf[js.Any])
    
    @scala.inline
    def deleteName: Self = this.set("name", js.undefined)
    
    @scala.inline
    def setPrimaryColor(value: Double): Self = this.set("primaryColor", value.asInstanceOf[js.Any])
    
    @scala.inline
    def deletePrimaryColor: Self = this.set("primaryColor", js.undefined)
    
    @scala.inline
    def setPubsubTopic(value: String): Self = this.set("pubsubTopic", value.asInstanceOf[js.Any])
    
    @scala.inline
    def deletePubsubTopic: Self = this.set("pubsubTopic", js.undefined)
  }
}
