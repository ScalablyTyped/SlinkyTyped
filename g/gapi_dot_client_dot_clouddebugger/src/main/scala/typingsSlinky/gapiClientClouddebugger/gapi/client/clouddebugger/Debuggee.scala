package typingsSlinky.gapiClientClouddebugger.gapi.client.clouddebugger

import typingsSlinky.std.Record
import scala.scalajs.js
import scala.scalajs.js.`|`
import scala.scalajs.js.annotation.{JSGlobalScope, JSGlobal, JSImport, JSName, JSBracketAccess}

@js.native
trait Debuggee extends js.Object {
  
  /**
    * Version ID of the agent.
    * Schema: `domain/language-platform/vmajor.minor` (for example
    * `google.com/java-gcp/v1.1`).
    */
  var agentVersion: js.UndefOr[String] = js.native
  
  /**
    * Human readable description of the debuggee.
    * Including a human-readable project name, environment name and version
    * information is recommended.
    */
  var description: js.UndefOr[String] = js.native
  
  /**
    * References to the locations and revisions of the source code used in the
    * deployed application.
    *
    * NOTE: this field is experimental and can be ignored.
    */
  var extSourceContexts: js.UndefOr[js.Array[ExtendedSourceContext]] = js.native
  
  /** Unique identifier for the debuggee generated by the controller service. */
  var id: js.UndefOr[String] = js.native
  
  /**
    * If set to `true`, indicates that the agent should disable itself and
    * detach from the debuggee.
    */
  var isDisabled: js.UndefOr[Boolean] = js.native
  
  /**
    * If set to `true`, indicates that Controller service does not detect any
    * activity from the debuggee agents and the application is possibly stopped.
    */
  var isInactive: js.UndefOr[Boolean] = js.native
  
  /**
    * A set of custom debuggee properties, populated by the agent, to be
    * displayed to the user.
    */
  var labels: js.UndefOr[Record[String, String]] = js.native
  
  /**
    * Project the debuggee is associated with.
    * Use project number or id when registering a Google Cloud Platform project.
    */
  var project: js.UndefOr[String] = js.native
  
  /**
    * References to the locations and revisions of the source code used in the
    * deployed application.
    */
  var sourceContexts: js.UndefOr[js.Array[SourceContext]] = js.native
  
  /**
    * Human readable message to be displayed to the user about this debuggee.
    * Absence of this field indicates no status. The message can be either
    * informational or an error status.
    */
  var status: js.UndefOr[StatusMessage] = js.native
  
  /**
    * Uniquifier to further distiguish the application.
    * It is possible that different applications might have identical values in
    * the debuggee message, thus, incorrectly identified as a single application
    * by the Controller service. This field adds salt to further distiguish the
    * application. Agents should consider seeding this field with value that
    * identifies the code, binary, configuration and environment.
    */
  var uniquifier: js.UndefOr[String] = js.native
}
object Debuggee {
  
  @scala.inline
  def apply(): Debuggee = {
    val __obj = js.Dynamic.literal()
    __obj.asInstanceOf[Debuggee]
  }
  
  @scala.inline
  implicit class DebuggeeOps[Self <: Debuggee] (val x: Self) extends AnyVal {
    
    @scala.inline
    def duplicate: Self = (js.Dynamic.global.Object.assign(js.Dynamic.literal(), x)).asInstanceOf[Self]
    
    @scala.inline
    def combineWith[Other <: js.Any](other: Other): Self with Other = (js.Dynamic.global.Object.assign(js.Dynamic.literal(), x, other.asInstanceOf[js.Any])).asInstanceOf[Self with Other]
    
    @scala.inline
    def set(key: String, value: js.Any): Self = {
      x.asInstanceOf[js.Dynamic].updateDynamic(key)(value)
      x
    }
    
    @scala.inline
    def setAgentVersion(value: String): Self = this.set("agentVersion", value.asInstanceOf[js.Any])
    
    @scala.inline
    def deleteAgentVersion: Self = this.set("agentVersion", js.undefined)
    
    @scala.inline
    def setDescription(value: String): Self = this.set("description", value.asInstanceOf[js.Any])
    
    @scala.inline
    def deleteDescription: Self = this.set("description", js.undefined)
    
    @scala.inline
    def setExtSourceContextsVarargs(value: ExtendedSourceContext*): Self = this.set("extSourceContexts", js.Array(value :_*))
    
    @scala.inline
    def setExtSourceContexts(value: js.Array[ExtendedSourceContext]): Self = this.set("extSourceContexts", value.asInstanceOf[js.Any])
    
    @scala.inline
    def deleteExtSourceContexts: Self = this.set("extSourceContexts", js.undefined)
    
    @scala.inline
    def setId(value: String): Self = this.set("id", value.asInstanceOf[js.Any])
    
    @scala.inline
    def deleteId: Self = this.set("id", js.undefined)
    
    @scala.inline
    def setIsDisabled(value: Boolean): Self = this.set("isDisabled", value.asInstanceOf[js.Any])
    
    @scala.inline
    def deleteIsDisabled: Self = this.set("isDisabled", js.undefined)
    
    @scala.inline
    def setIsInactive(value: Boolean): Self = this.set("isInactive", value.asInstanceOf[js.Any])
    
    @scala.inline
    def deleteIsInactive: Self = this.set("isInactive", js.undefined)
    
    @scala.inline
    def setLabels(value: Record[String, String]): Self = this.set("labels", value.asInstanceOf[js.Any])
    
    @scala.inline
    def deleteLabels: Self = this.set("labels", js.undefined)
    
    @scala.inline
    def setProject(value: String): Self = this.set("project", value.asInstanceOf[js.Any])
    
    @scala.inline
    def deleteProject: Self = this.set("project", js.undefined)
    
    @scala.inline
    def setSourceContextsVarargs(value: SourceContext*): Self = this.set("sourceContexts", js.Array(value :_*))
    
    @scala.inline
    def setSourceContexts(value: js.Array[SourceContext]): Self = this.set("sourceContexts", value.asInstanceOf[js.Any])
    
    @scala.inline
    def deleteSourceContexts: Self = this.set("sourceContexts", js.undefined)
    
    @scala.inline
    def setStatus(value: StatusMessage): Self = this.set("status", value.asInstanceOf[js.Any])
    
    @scala.inline
    def deleteStatus: Self = this.set("status", js.undefined)
    
    @scala.inline
    def setUniquifier(value: String): Self = this.set("uniquifier", value.asInstanceOf[js.Any])
    
    @scala.inline
    def deleteUniquifier: Self = this.set("uniquifier", js.undefined)
  }
}
