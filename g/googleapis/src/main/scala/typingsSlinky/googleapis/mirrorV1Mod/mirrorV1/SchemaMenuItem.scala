package typingsSlinky.googleapis.mirrorV1Mod.mirrorV1

import scala.scalajs.js
import scala.scalajs.js.`|`
import scala.scalajs.js.annotation.{JSGlobalScope, JSGlobal, JSImport, JSName, JSBracketAccess}

/**
  * A custom menu item that can be presented to the user by a timeline item.
  */
@js.native
trait SchemaMenuItem extends js.Object {
  
  /**
    * Controls the behavior when the user picks the menu option. Allowed values
    * are:   - CUSTOM - Custom action set by the service. When the user selects
    * this menuItem, the API triggers a notification to your callbackUrl with
    * the userActions.type set to CUSTOM and the userActions.payload set to the
    * ID of this menu item. This is the default value.  - Built-in actions:   -
    * REPLY - Initiate a reply to the timeline item using the voice recording
    * UI. The creator attribute must be set in the timeline item for this menu
    * to be available.  - REPLY_ALL - Same behavior as REPLY. The original
    * timeline item&#39;s recipients will be added to the reply item.  - DELETE
    * - Delete the timeline item.  - SHARE - Share the timeline item with the
    * available contacts.  - READ_ALOUD - Read the timeline item&#39;s
    * speakableText aloud; if this field is not set, read the text field; if
    * none of those fields are set, this menu item is ignored.  -
    * GET_MEDIA_INPUT - Allow users to provide media payloads to Glassware from
    * a menu item (currently, only transcribed text from voice input is
    * supported). Subscribe to notifications when users invoke this menu item
    * to receive the timeline item ID. Retrieve the media from the timeline
    * item in the payload property.  - VOICE_CALL - Initiate a phone call using
    * the timeline item&#39;s creator.phoneNumber attribute as recipient.  -
    * NAVIGATE - Navigate to the timeline item&#39;s location.  - TOGGLE_PINNED
    * - Toggle the isPinned state of the timeline item.  - OPEN_URI - Open the
    * payload of the menu item in the browser.  - PLAY_VIDEO - Open the payload
    * of the menu item in the Glass video player.  - SEND_MESSAGE - Initiate
    * sending a message to the timeline item&#39;s creator:   - If the
    * creator.phoneNumber is set and Glass is connected to an Android phone,
    * the message is an SMS.  - Otherwise, if the creator.email is set, the
    * message is an email.
    */
  var action: js.UndefOr[String] = js.native
  
  /**
    * The ContextualMenus.Command associated with this MenuItem (e.g.
    * READ_ALOUD). The voice label for this command will be displayed in the
    * voice menu and the touch label will be displayed in the touch menu. Note
    * that the default menu value&#39;s display name will be overriden if you
    * specify this property. Values that do not correspond to a
    * ContextualMenus.Command name will be ignored.
    */
  var contextual_command: js.UndefOr[String] = js.native
  
  /**
    * The ID for this menu item. This is generated by the application and is
    * treated as an opaque token.
    */
  var id: js.UndefOr[String] = js.native
  
  /**
    * A generic payload whose meaning changes depending on this MenuItem&#39;s
    * action.   - When the action is OPEN_URI, the payload is the URL of the
    * website to view.  - When the action is PLAY_VIDEO, the payload is the
    * streaming URL of the video  - When the action is GET_MEDIA_INPUT, the
    * payload is the text transcription of a user&#39;s speech input
    */
  var payload: js.UndefOr[String] = js.native
  
  /**
    * If set to true on a CUSTOM menu item, that item will be removed from the
    * menu after it is selected.
    */
  var removeWhenSelected: js.UndefOr[Boolean] = js.native
  
  /**
    * For CUSTOM items, a list of values controlling the appearance of the menu
    * item in each of its states. A value for the DEFAULT state must be
    * provided. If the PENDING or CONFIRMED states are missing, they will not
    * be shown.
    */
  var values: js.UndefOr[js.Array[SchemaMenuValue]] = js.native
}
object SchemaMenuItem {
  
  @scala.inline
  def apply(): SchemaMenuItem = {
    val __obj = js.Dynamic.literal()
    __obj.asInstanceOf[SchemaMenuItem]
  }
  
  @scala.inline
  implicit class SchemaMenuItemOps[Self <: SchemaMenuItem] (val x: Self) extends AnyVal {
    
    @scala.inline
    def duplicate: Self = (js.Dynamic.global.Object.assign(js.Dynamic.literal(), x)).asInstanceOf[Self]
    
    @scala.inline
    def combineWith[Other <: js.Any](other: Other): Self with Other = (js.Dynamic.global.Object.assign(js.Dynamic.literal(), x, other.asInstanceOf[js.Any])).asInstanceOf[Self with Other]
    
    @scala.inline
    def set(key: String, value: js.Any): Self = {
      x.asInstanceOf[js.Dynamic].updateDynamic(key)(value)
      x
    }
    
    @scala.inline
    def setAction(value: String): Self = this.set("action", value.asInstanceOf[js.Any])
    
    @scala.inline
    def deleteAction: Self = this.set("action", js.undefined)
    
    @scala.inline
    def setContextual_command(value: String): Self = this.set("contextual_command", value.asInstanceOf[js.Any])
    
    @scala.inline
    def deleteContextual_command: Self = this.set("contextual_command", js.undefined)
    
    @scala.inline
    def setId(value: String): Self = this.set("id", value.asInstanceOf[js.Any])
    
    @scala.inline
    def deleteId: Self = this.set("id", js.undefined)
    
    @scala.inline
    def setPayload(value: String): Self = this.set("payload", value.asInstanceOf[js.Any])
    
    @scala.inline
    def deletePayload: Self = this.set("payload", js.undefined)
    
    @scala.inline
    def setRemoveWhenSelected(value: Boolean): Self = this.set("removeWhenSelected", value.asInstanceOf[js.Any])
    
    @scala.inline
    def deleteRemoveWhenSelected: Self = this.set("removeWhenSelected", js.undefined)
    
    @scala.inline
    def setValuesVarargs(value: SchemaMenuValue*): Self = this.set("values", js.Array(value :_*))
    
    @scala.inline
    def setValues(value: js.Array[SchemaMenuValue]): Self = this.set("values", value.asInstanceOf[js.Any])
    
    @scala.inline
    def deleteValues: Self = this.set("values", js.undefined)
  }
}
