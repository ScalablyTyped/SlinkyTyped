package typingsSlinky.googleapis.gamesV1Mod.gamesV1

import scala.scalajs.js
import scala.scalajs.js.`|`
import scala.scalajs.js.annotation.{JSGlobalScope, JSGlobal, JSImport, JSName, JSBracketAccess}

/**
  * This is a JSON template for a turn-based match resource object.
  */
@js.native
trait SchemaTurnBasedMatch extends js.Object {
  
  /**
    * The ID of the application being played.
    */
  var applicationId: js.UndefOr[String] = js.native
  
  /**
    * Criteria for auto-matching players into this match.
    */
  var autoMatchingCriteria: js.UndefOr[SchemaTurnBasedAutoMatchingCriteria] = js.native
  
  /**
    * Details about the match creation.
    */
  var creationDetails: js.UndefOr[SchemaTurnBasedMatchModification] = js.native
  
  /**
    * The data / game state for this match.
    */
  var data: js.UndefOr[SchemaTurnBasedMatchData] = js.native
  
  /**
    * This short description is generated by our servers based on turn state
    * and is localized and worded relative to the player requesting the match.
    * It is intended to be displayed when the match is shown in a list.
    */
  var description: js.UndefOr[String] = js.native
  
  /**
    * The ID of the participant that invited the user to the match. Not set if
    * the user was not invited to the match.
    */
  var inviterId: js.UndefOr[String] = js.native
  
  /**
    * Uniquely identifies the type of this resource. Value is always the fixed
    * string games#turnBasedMatch.
    */
  var kind: js.UndefOr[String] = js.native
  
  /**
    * Details about the last update to the match.
    */
  var lastUpdateDetails: js.UndefOr[SchemaTurnBasedMatchModification] = js.native
  
  /**
    * Globally unique ID for a turn-based match.
    */
  var matchId: js.UndefOr[String] = js.native
  
  /**
    * The number of the match in a chain of rematches. Will be set to 1 for the
    * first match and incremented by 1 for each rematch.
    */
  var matchNumber: js.UndefOr[Double] = js.native
  
  /**
    * The version of this match: an increasing counter, used to avoid
    * out-of-date updates to the match.
    */
  var matchVersion: js.UndefOr[Double] = js.native
  
  /**
    * The participants involved in the match, along with their statuses.
    * Includes participants who have left or declined invitations.
    */
  var participants: js.UndefOr[js.Array[SchemaTurnBasedMatchParticipant]] = js.native
  
  /**
    * The ID of the participant that is taking a turn.
    */
  var pendingParticipantId: js.UndefOr[String] = js.native
  
  /**
    * The data / game state for the previous match; set for the first turn of
    * rematches only.
    */
  var previousMatchData: js.UndefOr[SchemaTurnBasedMatchData] = js.native
  
  /**
    * The ID of a rematch of this match. Only set for completed matches that
    * have been rematched.
    */
  var rematchId: js.UndefOr[String] = js.native
  
  /**
    * The results reported for this match.
    */
  var results: js.UndefOr[js.Array[SchemaParticipantResult]] = js.native
  
  /**
    * The status of the match. Possible values are:   -
    * &quot;MATCH_AUTO_MATCHING&quot; - One or more slots need to be filled by
    * auto-matching; the match cannot be established until they are filled.  -
    * &quot;MATCH_ACTIVE&quot; - The match has started.  -
    * &quot;MATCH_COMPLETE&quot; - The match has finished.  -
    * &quot;MATCH_CANCELED&quot; - The match was canceled.  -
    * &quot;MATCH_EXPIRED&quot; - The match expired due to inactivity.  -
    * &quot;MATCH_DELETED&quot; - The match should no longer be shown on the
    * client. Returned only for tombstones for matches when sync is called.
    */
  var status: js.UndefOr[String] = js.native
  
  /**
    * The status of the current user in the match. Derived from the match type,
    * match status, the user&#39;s participant status, and the pending
    * participant for the match. Possible values are:   -
    * &quot;USER_INVITED&quot; - The user has been invited to join the match
    * and has not responded yet.  - &quot;USER_AWAITING_TURN&quot; - The user
    * is waiting for their turn.  - &quot;USER_TURN&quot; - The user has an
    * action to take in the match.  - &quot;USER_MATCH_COMPLETED&quot; - The
    * match has ended (it is completed, canceled, or expired.)
    */
  var userMatchStatus: js.UndefOr[String] = js.native
  
  /**
    * The variant / mode of the application being played; can be any integer
    * value, or left blank.
    */
  var variant: js.UndefOr[Double] = js.native
  
  /**
    * The ID of another participant in the match that can be used when
    * describing the participants the user is playing with.
    */
  var withParticipantId: js.UndefOr[String] = js.native
}
object SchemaTurnBasedMatch {
  
  @scala.inline
  def apply(): SchemaTurnBasedMatch = {
    val __obj = js.Dynamic.literal()
    __obj.asInstanceOf[SchemaTurnBasedMatch]
  }
  
  @scala.inline
  implicit class SchemaTurnBasedMatchOps[Self <: SchemaTurnBasedMatch] (val x: Self) extends AnyVal {
    
    @scala.inline
    def duplicate: Self = (js.Dynamic.global.Object.assign(js.Dynamic.literal(), x)).asInstanceOf[Self]
    
    @scala.inline
    def combineWith[Other <: js.Any](other: Other): Self with Other = (js.Dynamic.global.Object.assign(js.Dynamic.literal(), x, other.asInstanceOf[js.Any])).asInstanceOf[Self with Other]
    
    @scala.inline
    def set(key: String, value: js.Any): Self = {
      x.asInstanceOf[js.Dynamic].updateDynamic(key)(value)
      x
    }
    
    @scala.inline
    def setApplicationId(value: String): Self = this.set("applicationId", value.asInstanceOf[js.Any])
    
    @scala.inline
    def deleteApplicationId: Self = this.set("applicationId", js.undefined)
    
    @scala.inline
    def setAutoMatchingCriteria(value: SchemaTurnBasedAutoMatchingCriteria): Self = this.set("autoMatchingCriteria", value.asInstanceOf[js.Any])
    
    @scala.inline
    def deleteAutoMatchingCriteria: Self = this.set("autoMatchingCriteria", js.undefined)
    
    @scala.inline
    def setCreationDetails(value: SchemaTurnBasedMatchModification): Self = this.set("creationDetails", value.asInstanceOf[js.Any])
    
    @scala.inline
    def deleteCreationDetails: Self = this.set("creationDetails", js.undefined)
    
    @scala.inline
    def setData(value: SchemaTurnBasedMatchData): Self = this.set("data", value.asInstanceOf[js.Any])
    
    @scala.inline
    def deleteData: Self = this.set("data", js.undefined)
    
    @scala.inline
    def setDescription(value: String): Self = this.set("description", value.asInstanceOf[js.Any])
    
    @scala.inline
    def deleteDescription: Self = this.set("description", js.undefined)
    
    @scala.inline
    def setInviterId(value: String): Self = this.set("inviterId", value.asInstanceOf[js.Any])
    
    @scala.inline
    def deleteInviterId: Self = this.set("inviterId", js.undefined)
    
    @scala.inline
    def setKind(value: String): Self = this.set("kind", value.asInstanceOf[js.Any])
    
    @scala.inline
    def deleteKind: Self = this.set("kind", js.undefined)
    
    @scala.inline
    def setLastUpdateDetails(value: SchemaTurnBasedMatchModification): Self = this.set("lastUpdateDetails", value.asInstanceOf[js.Any])
    
    @scala.inline
    def deleteLastUpdateDetails: Self = this.set("lastUpdateDetails", js.undefined)
    
    @scala.inline
    def setMatchId(value: String): Self = this.set("matchId", value.asInstanceOf[js.Any])
    
    @scala.inline
    def deleteMatchId: Self = this.set("matchId", js.undefined)
    
    @scala.inline
    def setMatchNumber(value: Double): Self = this.set("matchNumber", value.asInstanceOf[js.Any])
    
    @scala.inline
    def deleteMatchNumber: Self = this.set("matchNumber", js.undefined)
    
    @scala.inline
    def setMatchVersion(value: Double): Self = this.set("matchVersion", value.asInstanceOf[js.Any])
    
    @scala.inline
    def deleteMatchVersion: Self = this.set("matchVersion", js.undefined)
    
    @scala.inline
    def setParticipantsVarargs(value: SchemaTurnBasedMatchParticipant*): Self = this.set("participants", js.Array(value :_*))
    
    @scala.inline
    def setParticipants(value: js.Array[SchemaTurnBasedMatchParticipant]): Self = this.set("participants", value.asInstanceOf[js.Any])
    
    @scala.inline
    def deleteParticipants: Self = this.set("participants", js.undefined)
    
    @scala.inline
    def setPendingParticipantId(value: String): Self = this.set("pendingParticipantId", value.asInstanceOf[js.Any])
    
    @scala.inline
    def deletePendingParticipantId: Self = this.set("pendingParticipantId", js.undefined)
    
    @scala.inline
    def setPreviousMatchData(value: SchemaTurnBasedMatchData): Self = this.set("previousMatchData", value.asInstanceOf[js.Any])
    
    @scala.inline
    def deletePreviousMatchData: Self = this.set("previousMatchData", js.undefined)
    
    @scala.inline
    def setRematchId(value: String): Self = this.set("rematchId", value.asInstanceOf[js.Any])
    
    @scala.inline
    def deleteRematchId: Self = this.set("rematchId", js.undefined)
    
    @scala.inline
    def setResultsVarargs(value: SchemaParticipantResult*): Self = this.set("results", js.Array(value :_*))
    
    @scala.inline
    def setResults(value: js.Array[SchemaParticipantResult]): Self = this.set("results", value.asInstanceOf[js.Any])
    
    @scala.inline
    def deleteResults: Self = this.set("results", js.undefined)
    
    @scala.inline
    def setStatus(value: String): Self = this.set("status", value.asInstanceOf[js.Any])
    
    @scala.inline
    def deleteStatus: Self = this.set("status", js.undefined)
    
    @scala.inline
    def setUserMatchStatus(value: String): Self = this.set("userMatchStatus", value.asInstanceOf[js.Any])
    
    @scala.inline
    def deleteUserMatchStatus: Self = this.set("userMatchStatus", js.undefined)
    
    @scala.inline
    def setVariant(value: Double): Self = this.set("variant", value.asInstanceOf[js.Any])
    
    @scala.inline
    def deleteVariant: Self = this.set("variant", js.undefined)
    
    @scala.inline
    def setWithParticipantId(value: String): Self = this.set("withParticipantId", value.asInstanceOf[js.Any])
    
    @scala.inline
    def deleteWithParticipantId: Self = this.set("withParticipantId", js.undefined)
  }
}
