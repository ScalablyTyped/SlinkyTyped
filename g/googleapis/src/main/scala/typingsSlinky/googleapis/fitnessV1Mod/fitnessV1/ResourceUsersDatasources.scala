package typingsSlinky.googleapis.fitnessV1Mod.fitnessV1

import typingsSlinky.gaxios.commonMod.GaxiosPromise
import typingsSlinky.googleapisCommon.apiMod.APIRequestContext
import typingsSlinky.googleapisCommon.apiMod.BodyResponseCallback
import typingsSlinky.googleapisCommon.apiMod.MethodOptions
import org.scalablytyped.runtime.StObject
import scala.scalajs.js
import scala.scalajs.js.`|`
import scala.scalajs.js.annotation.{JSGlobalScope, JSGlobal, JSImport, JSName, JSBracketAccess}

@JSImport("googleapis/build/src/apis/fitness/v1", "fitness_v1.Resource$Users$Datasources")
@js.native
class ResourceUsersDatasources protected () extends StObject {
  def this(context: APIRequestContext) = this()
  
  var context: APIRequestContext = js.native
  
  /**
    * fitness.users.dataSources.create
    * @desc Creates a new data source that is unique across all data sources
    * belonging to this user. The data stream ID field can be omitted and will
    * be generated by the server with the correct format. The data stream ID is
    * an ordered combination of some fields from the data source. In addition
    * to the data source fields reflected into the data source ID, the
    * developer project number that is authenticated when creating the data
    * source is included. This developer project number is obfuscated when read
    * by any other developer reading public data types.
    * @alias fitness.users.dataSources.create
    * @memberOf! ()
    *
    * @param {object} params Parameters for request
    * @param {string} params.userId Create the data source for the person identified. Use me to indicate the authenticated user. Only me is supported at this time.
    * @param {().DataSource} params.resource Request body data
    * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.
    * @param {callback} callback The callback that handles the response.
    * @return {object} Request object
    */
  def create(): GaxiosPromise[SchemaDataSource] = js.native
  def create(callback: BodyResponseCallback[SchemaDataSource]): Unit = js.native
  def create(params: js.UndefOr[scala.Nothing], options: MethodOptions): GaxiosPromise[SchemaDataSource] = js.native
  def create(params: ParamsResourceUsersDatasourcesCreate): GaxiosPromise[SchemaDataSource] = js.native
  def create(params: ParamsResourceUsersDatasourcesCreate, callback: BodyResponseCallback[SchemaDataSource]): Unit = js.native
  def create(
    params: ParamsResourceUsersDatasourcesCreate,
    options: BodyResponseCallback[SchemaDataSource],
    callback: BodyResponseCallback[SchemaDataSource]
  ): Unit = js.native
  def create(params: ParamsResourceUsersDatasourcesCreate, options: MethodOptions): GaxiosPromise[SchemaDataSource] = js.native
  def create(
    params: ParamsResourceUsersDatasourcesCreate,
    options: MethodOptions,
    callback: BodyResponseCallback[SchemaDataSource]
  ): Unit = js.native
  
  var dataPointChanges: ResourceUsersDatasourcesDatapointchanges = js.native
  
  var datasets: ResourceUsersDatasourcesDatasets = js.native
  
  /**
    * fitness.users.dataSources.delete
    * @desc Deletes the specified data source. The request will fail if the
    * data source contains any data points.
    * @alias fitness.users.dataSources.delete
    * @memberOf! ()
    *
    * @param {object} params Parameters for request
    * @param {string} params.dataSourceId The data stream ID of the data source to delete.
    * @param {string} params.userId Retrieve a data source for the person identified. Use me to indicate the authenticated user. Only me is supported at this time.
    * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.
    * @param {callback} callback The callback that handles the response.
    * @return {object} Request object
    */
  def delete(): GaxiosPromise[SchemaDataSource] = js.native
  def delete(callback: BodyResponseCallback[SchemaDataSource]): Unit = js.native
  def delete(params: js.UndefOr[scala.Nothing], options: MethodOptions): GaxiosPromise[SchemaDataSource] = js.native
  def delete(params: ParamsResourceUsersDatasourcesDelete): GaxiosPromise[SchemaDataSource] = js.native
  def delete(params: ParamsResourceUsersDatasourcesDelete, callback: BodyResponseCallback[SchemaDataSource]): Unit = js.native
  def delete(
    params: ParamsResourceUsersDatasourcesDelete,
    options: BodyResponseCallback[SchemaDataSource],
    callback: BodyResponseCallback[SchemaDataSource]
  ): Unit = js.native
  def delete(params: ParamsResourceUsersDatasourcesDelete, options: MethodOptions): GaxiosPromise[SchemaDataSource] = js.native
  def delete(
    params: ParamsResourceUsersDatasourcesDelete,
    options: MethodOptions,
    callback: BodyResponseCallback[SchemaDataSource]
  ): Unit = js.native
  
  /**
    * fitness.users.dataSources.get
    * @desc Returns the specified data source.
    * @alias fitness.users.dataSources.get
    * @memberOf! ()
    *
    * @param {object} params Parameters for request
    * @param {string} params.dataSourceId The data stream ID of the data source to retrieve.
    * @param {string} params.userId Retrieve a data source for the person identified. Use me to indicate the authenticated user. Only me is supported at this time.
    * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.
    * @param {callback} callback The callback that handles the response.
    * @return {object} Request object
    */
  def get(): GaxiosPromise[SchemaDataSource] = js.native
  def get(callback: BodyResponseCallback[SchemaDataSource]): Unit = js.native
  def get(params: js.UndefOr[scala.Nothing], options: MethodOptions): GaxiosPromise[SchemaDataSource] = js.native
  def get(params: ParamsResourceUsersDatasourcesGet): GaxiosPromise[SchemaDataSource] = js.native
  def get(params: ParamsResourceUsersDatasourcesGet, callback: BodyResponseCallback[SchemaDataSource]): Unit = js.native
  def get(
    params: ParamsResourceUsersDatasourcesGet,
    options: BodyResponseCallback[SchemaDataSource],
    callback: BodyResponseCallback[SchemaDataSource]
  ): Unit = js.native
  def get(params: ParamsResourceUsersDatasourcesGet, options: MethodOptions): GaxiosPromise[SchemaDataSource] = js.native
  def get(
    params: ParamsResourceUsersDatasourcesGet,
    options: MethodOptions,
    callback: BodyResponseCallback[SchemaDataSource]
  ): Unit = js.native
  
  /**
    * fitness.users.dataSources.list
    * @desc Lists all data sources that are visible to the developer, using the
    * OAuth scopes provided. The list is not exhaustive; the user may have
    * private data sources that are only visible to other developers, or calls
    * using other scopes.
    * @alias fitness.users.dataSources.list
    * @memberOf! ()
    *
    * @param {object} params Parameters for request
    * @param {string=} params.dataTypeName The names of data types to include in the list. If not specified, all data sources will be returned.
    * @param {string} params.userId List data sources for the person identified. Use me to indicate the authenticated user. Only me is supported at this time.
    * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.
    * @param {callback} callback The callback that handles the response.
    * @return {object} Request object
    */
  def list(): GaxiosPromise[SchemaListDataSourcesResponse] = js.native
  def list(callback: BodyResponseCallback[SchemaListDataSourcesResponse]): Unit = js.native
  def list(params: js.UndefOr[scala.Nothing], options: MethodOptions): GaxiosPromise[SchemaListDataSourcesResponse] = js.native
  def list(params: ParamsResourceUsersDatasourcesList): GaxiosPromise[SchemaListDataSourcesResponse] = js.native
  def list(
    params: ParamsResourceUsersDatasourcesList,
    callback: BodyResponseCallback[SchemaListDataSourcesResponse]
  ): Unit = js.native
  def list(
    params: ParamsResourceUsersDatasourcesList,
    options: BodyResponseCallback[SchemaListDataSourcesResponse],
    callback: BodyResponseCallback[SchemaListDataSourcesResponse]
  ): Unit = js.native
  def list(params: ParamsResourceUsersDatasourcesList, options: MethodOptions): GaxiosPromise[SchemaListDataSourcesResponse] = js.native
  def list(
    params: ParamsResourceUsersDatasourcesList,
    options: MethodOptions,
    callback: BodyResponseCallback[SchemaListDataSourcesResponse]
  ): Unit = js.native
  
  /**
    * fitness.users.dataSources.update
    * @desc Updates the specified data source. The dataStreamId, dataType,
    * type, dataStreamName, and device properties with the exception of
    * version, cannot be modified.  Data sources are identified by their
    * dataStreamId.
    * @alias fitness.users.dataSources.update
    * @memberOf! ()
    *
    * @param {object} params Parameters for request
    * @param {string} params.dataSourceId The data stream ID of the data source to update.
    * @param {string} params.userId Update the data source for the person identified. Use me to indicate the authenticated user. Only me is supported at this time.
    * @param {().DataSource} params.resource Request body data
    * @param {object} [options] Optionally override request options, such as `url`, `method`, and `encoding`.
    * @param {callback} callback The callback that handles the response.
    * @return {object} Request object
    */
  def update(): GaxiosPromise[SchemaDataSource] = js.native
  def update(callback: BodyResponseCallback[SchemaDataSource]): Unit = js.native
  def update(params: js.UndefOr[scala.Nothing], options: MethodOptions): GaxiosPromise[SchemaDataSource] = js.native
  def update(params: ParamsResourceUsersDatasourcesUpdate): GaxiosPromise[SchemaDataSource] = js.native
  def update(params: ParamsResourceUsersDatasourcesUpdate, callback: BodyResponseCallback[SchemaDataSource]): Unit = js.native
  def update(
    params: ParamsResourceUsersDatasourcesUpdate,
    options: BodyResponseCallback[SchemaDataSource],
    callback: BodyResponseCallback[SchemaDataSource]
  ): Unit = js.native
  def update(params: ParamsResourceUsersDatasourcesUpdate, options: MethodOptions): GaxiosPromise[SchemaDataSource] = js.native
  def update(
    params: ParamsResourceUsersDatasourcesUpdate,
    options: MethodOptions,
    callback: BodyResponseCallback[SchemaDataSource]
  ): Unit = js.native
}
