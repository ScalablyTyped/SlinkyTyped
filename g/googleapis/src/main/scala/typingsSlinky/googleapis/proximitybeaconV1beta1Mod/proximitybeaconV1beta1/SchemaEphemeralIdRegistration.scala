package typingsSlinky.googleapis.proximitybeaconV1beta1Mod.proximitybeaconV1beta1

import org.scalablytyped.runtime.StObject
import scala.scalajs.js
import scala.scalajs.js.`|`
import scala.scalajs.js.annotation.{JSGlobalScope, JSGlobal, JSImport, JSName, JSBracketAccess}

/**
  * Write-only registration parameters for beacons using Eddystone-EID format.
  * Two ways of securely registering an Eddystone-EID beacon with the service
  * are supported:  1. Perform an ECDH key exchange via this API, including a
  * previous call    to `GET /v1beta1/eidparams`. In this case the fields
  * `beacon_ecdh_public_key` and `service_ecdh_public_key` should be populated
  * and `beacon_identity_key` should not be populated. This    method ensures
  * that only the two parties in the ECDH key exchange can    compute the
  * identity key, which becomes a secret between them. 2. Derive or obtain the
  * beacon&#39;s identity key via other secure means    (perhaps an ECDH key
  * exchange between the beacon and a mobile device    or any other secure
  * method), and then submit the resulting identity key    to the service. In
  * this case `beacon_identity_key` field should be    populated, and neither
  * of `beacon_ecdh_public_key` nor    `service_ecdh_public_key` fields should
  * be. The security of this method    depends on how securely the parties
  * involved (in particular the    bluetooth client) handle the identity key,
  * and obviously on how    securely the identity key was generated.  See [the
  * Eddystone
  * specification](https://github.com/google/eddystone/tree/master/eddystone-eid)
  * at GitHub.
  */
@js.native
trait SchemaEphemeralIdRegistration extends StObject {
  
  /**
    * The beacon&#39;s public key used for the Elliptic curve Diffie-Hellman
    * key exchange. When this field is populated, `service_ecdh_public_key`
    * must also be populated, and `beacon_identity_key` must not be.
    */
  var beaconEcdhPublicKey: js.UndefOr[String] = js.native
  
  /**
    * The private key of the beacon. If this field is populated,
    * `beacon_ecdh_public_key` and `service_ecdh_public_key` must not be
    * populated.
    */
  var beaconIdentityKey: js.UndefOr[String] = js.native
  
  /**
    * The initial clock value of the beacon. The beacon&#39;s clock must have
    * begun counting at this value immediately prior to transmitting this value
    * to the resolving service. Significant delay in transmitting this value to
    * the service risks registration or resolution failures. If a value is not
    * provided, the default is zero.
    */
  var initialClockValue: js.UndefOr[String] = js.native
  
  /**
    * An initial ephemeral ID calculated using the clock value submitted as
    * `initial_clock_value`, and the secret key generated by the Diffie-Hellman
    * key exchange using `service_ecdh_public_key` and
    * `service_ecdh_public_key`. This initial EID value will be used by the
    * service to confirm that the key exchange process was successful.
    */
  var initialEid: js.UndefOr[String] = js.native
  
  /**
    * Indicates the nominal period between each rotation of the beacon&#39;s
    * ephemeral ID. &quot;Nominal&quot; because the beacon should randomize the
    * actual interval. See [the spec at
    * github](https://github.com/google/eddystone/tree/master/eddystone-eid)
    * for details. This value corresponds to a power-of-two scaler on the
    * beacon&#39;s clock: when the scaler value is K, the beacon will begin
    * broadcasting a new ephemeral ID on average every 2^K seconds.
    */
  var rotationPeriodExponent: js.UndefOr[Double] = js.native
  
  /**
    * The service&#39;s public key used for the Elliptic curve Diffie-Hellman
    * key exchange. When this field is populated, `beacon_ecdh_public_key` must
    * also be populated, and `beacon_identity_key` must not be.
    */
  var serviceEcdhPublicKey: js.UndefOr[String] = js.native
}
object SchemaEphemeralIdRegistration {
  
  @scala.inline
  def apply(): SchemaEphemeralIdRegistration = {
    val __obj = js.Dynamic.literal()
    __obj.asInstanceOf[SchemaEphemeralIdRegistration]
  }
  
  @scala.inline
  implicit class SchemaEphemeralIdRegistrationMutableBuilder[Self <: SchemaEphemeralIdRegistration] (val x: Self) extends AnyVal {
    
    @scala.inline
    def setBeaconEcdhPublicKey(value: String): Self = StObject.set(x, "beaconEcdhPublicKey", value.asInstanceOf[js.Any])
    
    @scala.inline
    def setBeaconEcdhPublicKeyUndefined: Self = StObject.set(x, "beaconEcdhPublicKey", js.undefined)
    
    @scala.inline
    def setBeaconIdentityKey(value: String): Self = StObject.set(x, "beaconIdentityKey", value.asInstanceOf[js.Any])
    
    @scala.inline
    def setBeaconIdentityKeyUndefined: Self = StObject.set(x, "beaconIdentityKey", js.undefined)
    
    @scala.inline
    def setInitialClockValue(value: String): Self = StObject.set(x, "initialClockValue", value.asInstanceOf[js.Any])
    
    @scala.inline
    def setInitialClockValueUndefined: Self = StObject.set(x, "initialClockValue", js.undefined)
    
    @scala.inline
    def setInitialEid(value: String): Self = StObject.set(x, "initialEid", value.asInstanceOf[js.Any])
    
    @scala.inline
    def setInitialEidUndefined: Self = StObject.set(x, "initialEid", js.undefined)
    
    @scala.inline
    def setRotationPeriodExponent(value: Double): Self = StObject.set(x, "rotationPeriodExponent", value.asInstanceOf[js.Any])
    
    @scala.inline
    def setRotationPeriodExponentUndefined: Self = StObject.set(x, "rotationPeriodExponent", js.undefined)
    
    @scala.inline
    def setServiceEcdhPublicKey(value: String): Self = StObject.set(x, "serviceEcdhPublicKey", value.asInstanceOf[js.Any])
    
    @scala.inline
    def setServiceEcdhPublicKeyUndefined: Self = StObject.set(x, "serviceEcdhPublicKey", js.undefined)
  }
}
