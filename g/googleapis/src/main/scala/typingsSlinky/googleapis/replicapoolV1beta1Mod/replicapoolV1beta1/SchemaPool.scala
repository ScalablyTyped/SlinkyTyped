package typingsSlinky.googleapis.replicapoolV1beta1Mod.replicapoolV1beta1

import org.scalablytyped.runtime.StObject
import scala.scalajs.js
import scala.scalajs.js.`|`
import scala.scalajs.js.annotation.{JSGlobalScope, JSGlobal, JSImport, JSName, JSBracketAccess}

@js.native
trait SchemaPool extends StObject {
  
  /**
    * Whether replicas in this pool should be restarted if they experience a
    * failure. The default value is true.
    */
  var autoRestart: js.UndefOr[Boolean] = js.native
  
  /**
    * The base instance name to use for the replicas in this pool. This must
    * match the regex [a-z]([-a-z0-9]*[a-z0-9])?. If specified, the instances
    * in this replica pool will be named in the format
    * &lt;base-instance-name&gt;-&lt;ID&gt;. The &lt;ID&gt; postfix will be a
    * four character alphanumeric identifier generated by the service.  If this
    * is not specified by the user, a random base instance name is generated by
    * the service.
    */
  var baseInstanceName: js.UndefOr[String] = js.native
  
  /**
    * [Output Only] The current number of replicas in the pool.
    */
  var currentNumReplicas: js.UndefOr[Double] = js.native
  
  /**
    * An optional description of the replica pool.
    */
  var description: js.UndefOr[String] = js.native
  
  /**
    * Deprecated. Please use template[].healthChecks instead.
    */
  var healthChecks: js.UndefOr[js.Array[SchemaHealthCheck]] = js.native
  
  /**
    * The initial number of replicas this pool should have. You must provide a
    * value greater than or equal to 0.
    */
  var initialNumReplicas: js.UndefOr[Double] = js.native
  
  /**
    * A list of labels to attach to this replica pool and all created virtual
    * machines in this replica pool.
    */
  var labels: js.UndefOr[js.Array[SchemaLabel]] = js.native
  
  /**
    * The name of the replica pool. Must follow the regex
    * [a-z]([-a-z0-9]*[a-z0-9])? and be 1-28 characters long.
    */
  var name: js.UndefOr[String] = js.native
  
  /**
    * Deprecated! Use initial_num_replicas instead.
    */
  var numReplicas: js.UndefOr[Double] = js.native
  
  /**
    * The list of resource views that should be updated with all the replicas
    * that are managed by this pool.
    */
  var resourceViews: js.UndefOr[js.Array[String]] = js.native
  
  /**
    * [Output Only] A self-link to the replica pool.
    */
  var selfLink: js.UndefOr[String] = js.native
  
  /**
    * Deprecated, please use target_pools instead.
    */
  var targetPool: js.UndefOr[String] = js.native
  
  /**
    * A list of target pools to update with the replicas that are managed by
    * this pool. If specified, the replicas in this replica pool will be added
    * to the specified target pools for load balancing purposes. The replica
    * pool must live in the same region as the specified target pools. These
    * values must be the target pool resource names, and not fully qualified
    * URLs.
    */
  var targetPools: js.UndefOr[js.Array[String]] = js.native
  
  /**
    * The template to use when creating replicas in this pool. This template is
    * used during initial instance creation of the pool, when growing the pool
    * in size, or when a replica restarts.
    */
  var template: js.UndefOr[SchemaTemplate] = js.native
  
  /**
    * Deprecated! Do not set.
    */
  var `type`: js.UndefOr[String] = js.native
}
object SchemaPool {
  
  @scala.inline
  def apply(): SchemaPool = {
    val __obj = js.Dynamic.literal()
    __obj.asInstanceOf[SchemaPool]
  }
  
  @scala.inline
  implicit class SchemaPoolMutableBuilder[Self <: SchemaPool] (val x: Self) extends AnyVal {
    
    @scala.inline
    def setAutoRestart(value: Boolean): Self = StObject.set(x, "autoRestart", value.asInstanceOf[js.Any])
    
    @scala.inline
    def setAutoRestartUndefined: Self = StObject.set(x, "autoRestart", js.undefined)
    
    @scala.inline
    def setBaseInstanceName(value: String): Self = StObject.set(x, "baseInstanceName", value.asInstanceOf[js.Any])
    
    @scala.inline
    def setBaseInstanceNameUndefined: Self = StObject.set(x, "baseInstanceName", js.undefined)
    
    @scala.inline
    def setCurrentNumReplicas(value: Double): Self = StObject.set(x, "currentNumReplicas", value.asInstanceOf[js.Any])
    
    @scala.inline
    def setCurrentNumReplicasUndefined: Self = StObject.set(x, "currentNumReplicas", js.undefined)
    
    @scala.inline
    def setDescription(value: String): Self = StObject.set(x, "description", value.asInstanceOf[js.Any])
    
    @scala.inline
    def setDescriptionUndefined: Self = StObject.set(x, "description", js.undefined)
    
    @scala.inline
    def setHealthChecks(value: js.Array[SchemaHealthCheck]): Self = StObject.set(x, "healthChecks", value.asInstanceOf[js.Any])
    
    @scala.inline
    def setHealthChecksUndefined: Self = StObject.set(x, "healthChecks", js.undefined)
    
    @scala.inline
    def setHealthChecksVarargs(value: SchemaHealthCheck*): Self = StObject.set(x, "healthChecks", js.Array(value :_*))
    
    @scala.inline
    def setInitialNumReplicas(value: Double): Self = StObject.set(x, "initialNumReplicas", value.asInstanceOf[js.Any])
    
    @scala.inline
    def setInitialNumReplicasUndefined: Self = StObject.set(x, "initialNumReplicas", js.undefined)
    
    @scala.inline
    def setLabels(value: js.Array[SchemaLabel]): Self = StObject.set(x, "labels", value.asInstanceOf[js.Any])
    
    @scala.inline
    def setLabelsUndefined: Self = StObject.set(x, "labels", js.undefined)
    
    @scala.inline
    def setLabelsVarargs(value: SchemaLabel*): Self = StObject.set(x, "labels", js.Array(value :_*))
    
    @scala.inline
    def setName(value: String): Self = StObject.set(x, "name", value.asInstanceOf[js.Any])
    
    @scala.inline
    def setNameUndefined: Self = StObject.set(x, "name", js.undefined)
    
    @scala.inline
    def setNumReplicas(value: Double): Self = StObject.set(x, "numReplicas", value.asInstanceOf[js.Any])
    
    @scala.inline
    def setNumReplicasUndefined: Self = StObject.set(x, "numReplicas", js.undefined)
    
    @scala.inline
    def setResourceViews(value: js.Array[String]): Self = StObject.set(x, "resourceViews", value.asInstanceOf[js.Any])
    
    @scala.inline
    def setResourceViewsUndefined: Self = StObject.set(x, "resourceViews", js.undefined)
    
    @scala.inline
    def setResourceViewsVarargs(value: String*): Self = StObject.set(x, "resourceViews", js.Array(value :_*))
    
    @scala.inline
    def setSelfLink(value: String): Self = StObject.set(x, "selfLink", value.asInstanceOf[js.Any])
    
    @scala.inline
    def setSelfLinkUndefined: Self = StObject.set(x, "selfLink", js.undefined)
    
    @scala.inline
    def setTargetPool(value: String): Self = StObject.set(x, "targetPool", value.asInstanceOf[js.Any])
    
    @scala.inline
    def setTargetPoolUndefined: Self = StObject.set(x, "targetPool", js.undefined)
    
    @scala.inline
    def setTargetPools(value: js.Array[String]): Self = StObject.set(x, "targetPools", value.asInstanceOf[js.Any])
    
    @scala.inline
    def setTargetPoolsUndefined: Self = StObject.set(x, "targetPools", js.undefined)
    
    @scala.inline
    def setTargetPoolsVarargs(value: String*): Self = StObject.set(x, "targetPools", js.Array(value :_*))
    
    @scala.inline
    def setTemplate(value: SchemaTemplate): Self = StObject.set(x, "template", value.asInstanceOf[js.Any])
    
    @scala.inline
    def setTemplateUndefined: Self = StObject.set(x, "template", js.undefined)
    
    @scala.inline
    def setType(value: String): Self = StObject.set(x, "type", value.asInstanceOf[js.Any])
    
    @scala.inline
    def setTypeUndefined: Self = StObject.set(x, "type", js.undefined)
  }
}
