package typingsSlinky.googleapis.betaMod.computeBeta

import org.scalablytyped.runtime.StringDictionary
import typingsSlinky.googleapis.anon.ContainerType
import org.scalablytyped.runtime.StObject
import scala.scalajs.js
import scala.scalajs.js.`|`
import scala.scalajs.js.annotation.{JSGlobalScope, JSGlobal, JSImport, JSName, JSBracketAccess}

/**
  * An Image resource. (== resource_for beta.images ==) (== resource_for
  * v1.images ==)
  */
@js.native
trait SchemaImage extends StObject {
  
  /**
    * Size of the image tar.gz archive stored in Google Cloud Storage (in
    * bytes).
    */
  var archiveSizeBytes: js.UndefOr[String] = js.native
  
  /**
    * [Output Only] Creation timestamp in RFC3339 text format.
    */
  var creationTimestamp: js.UndefOr[String] = js.native
  
  /**
    * The deprecation status associated with this image.
    */
  var deprecated: js.UndefOr[SchemaDeprecationStatus] = js.native
  
  /**
    * An optional description of this resource. Provide this property when you
    * create the resource.
    */
  var description: js.UndefOr[String] = js.native
  
  /**
    * Size of the image when restored onto a persistent disk (in GB).
    */
  var diskSizeGb: js.UndefOr[String] = js.native
  
  /**
    * The name of the image family to which this image belongs. You can create
    * disks by specifying an image family instead of a specific image name. The
    * image family always returns its latest image that is not deprecated. The
    * name of the image family must comply with RFC1035.
    */
  var family: js.UndefOr[String] = js.native
  
  /**
    * A list of features to enable on the guest operating system. Applicable
    * only for bootable images. Read  Enabling guest operating system features
    * to see a list of available options.
    */
  var guestOsFeatures: js.UndefOr[js.Array[SchemaGuestOsFeature]] = js.native
  
  /**
    * [Output Only] The unique identifier for the resource. This identifier is
    * defined by the server.
    */
  var id: js.UndefOr[String] = js.native
  
  /**
    * Encrypts the image using a customer-supplied encryption key.  After you
    * encrypt an image with a customer-supplied key, you must provide the same
    * key if you use the image later (e.g. to create a disk from the image).
    * Customer-supplied encryption keys do not protect access to metadata of
    * the disk.  If you do not provide an encryption key when creating the
    * image, then the disk will be encrypted using an automatically generated
    * key and you do not need to provide a key to use the image later.
    */
  var imageEncryptionKey: js.UndefOr[SchemaCustomerEncryptionKey] = js.native
  
  /**
    * [Output Only] Type of the resource. Always compute#image for images.
    */
  var kind: js.UndefOr[String] = js.native
  
  /**
    * A fingerprint for the labels being applied to this image, which is
    * essentially a hash of the labels used for optimistic locking. The
    * fingerprint is initially generated by Compute Engine and changes after
    * every request to modify or update labels. You must always provide an
    * up-to-date fingerprint hash in order to update or change labels,
    * otherwise the request will fail with error 412 conditionNotMet.  To see
    * the latest fingerprint, make a get() request to retrieve an image.
    */
  var labelFingerprint: js.UndefOr[String] = js.native
  
  /**
    * Labels to apply to this image. These can be later modified by the
    * setLabels method.
    */
  var labels: js.UndefOr[StringDictionary[String]] = js.native
  
  /**
    * Integer license codes indicating which licenses are attached to this
    * image.
    */
  var licenseCodes: js.UndefOr[js.Array[String]] = js.native
  
  /**
    * Any applicable license URI.
    */
  var licenses: js.UndefOr[js.Array[String]] = js.native
  
  /**
    * Name of the resource; provided by the client when the resource is
    * created. The name must be 1-63 characters long, and comply with RFC1035.
    * Specifically, the name must be 1-63 characters long and match the regular
    * expression `[a-z]([-a-z0-9]*[a-z0-9])?` which means the first character
    * must be a lowercase letter, and all following characters must be a dash,
    * lowercase letter, or digit, except the last character, which cannot be a
    * dash.
    */
  var name: js.UndefOr[String] = js.native
  
  /**
    * The parameters of the raw disk image.
    */
  var rawDisk: js.UndefOr[ContainerType] = js.native
  
  /**
    * [Output Only] Server-defined URL for the resource.
    */
  var selfLink: js.UndefOr[String] = js.native
  
  /**
    * URL of the source disk used to create this image. This can be a full or
    * valid partial URL. You must provide either this property or the
    * rawDisk.source property but not both to create an image. For example, the
    * following are valid values:   -
    * https://www.googleapis.com/compute/v1/projects/project/zones/zone/disks/disk
    * - projects/project/zones/zone/disks/disk  - zones/zone/disks/disk
    */
  var sourceDisk: js.UndefOr[String] = js.native
  
  /**
    * The customer-supplied encryption key of the source disk. Required if the
    * source disk is protected by a customer-supplied encryption key.
    */
  var sourceDiskEncryptionKey: js.UndefOr[SchemaCustomerEncryptionKey] = js.native
  
  /**
    * [Output Only] The ID value of the disk used to create this image. This
    * value may be used to determine whether the image was taken from the
    * current or a previous instance of a given disk name.
    */
  var sourceDiskId: js.UndefOr[String] = js.native
  
  /**
    * URL of the source image used to create this image. This can be a full or
    * valid partial URL. You must provide exactly one of:   - this property, or
    * - the rawDisk.source property, or   - the sourceDisk property   in order
    * to create an image.
    */
  var sourceImage: js.UndefOr[String] = js.native
  
  /**
    * The customer-supplied encryption key of the source image. Required if the
    * source image is protected by a customer-supplied encryption key.
    */
  var sourceImageEncryptionKey: js.UndefOr[SchemaCustomerEncryptionKey] = js.native
  
  /**
    * [Output Only] The ID value of the image used to create this image. This
    * value may be used to determine whether the image was taken from the
    * current or a previous instance of a given image name.
    */
  var sourceImageId: js.UndefOr[String] = js.native
  
  /**
    * URL of the source snapshot used to create this image. This can be a full
    * or valid partial URL. You must provide exactly one of:   - this property,
    * or   - the sourceImage property, or   - the rawDisk.source property, or
    * - the sourceDisk property   in order to create an image.
    */
  var sourceSnapshot: js.UndefOr[String] = js.native
  
  /**
    * The customer-supplied encryption key of the source snapshot. Required if
    * the source snapshot is protected by a customer-supplied encryption key.
    */
  var sourceSnapshotEncryptionKey: js.UndefOr[SchemaCustomerEncryptionKey] = js.native
  
  /**
    * [Output Only] The ID value of the snapshot used to create this image.
    * This value may be used to determine whether the snapshot was taken from
    * the current or a previous instance of a given snapshot name.
    */
  var sourceSnapshotId: js.UndefOr[String] = js.native
  
  /**
    * The type of the image used to create this disk. The default and only
    * value is RAW
    */
  var sourceType: js.UndefOr[String] = js.native
  
  /**
    * [Output Only] The status of the image. An image can be used to create
    * other resources, such as instances, only after the image has been
    * successfully created and the status is set to READY. Possible values are
    * FAILED, PENDING, or READY.
    */
  var status: js.UndefOr[String] = js.native
}
object SchemaImage {
  
  @scala.inline
  def apply(): SchemaImage = {
    val __obj = js.Dynamic.literal()
    __obj.asInstanceOf[SchemaImage]
  }
  
  @scala.inline
  implicit class SchemaImageMutableBuilder[Self <: SchemaImage] (val x: Self) extends AnyVal {
    
    @scala.inline
    def setArchiveSizeBytes(value: String): Self = StObject.set(x, "archiveSizeBytes", value.asInstanceOf[js.Any])
    
    @scala.inline
    def setArchiveSizeBytesUndefined: Self = StObject.set(x, "archiveSizeBytes", js.undefined)
    
    @scala.inline
    def setCreationTimestamp(value: String): Self = StObject.set(x, "creationTimestamp", value.asInstanceOf[js.Any])
    
    @scala.inline
    def setCreationTimestampUndefined: Self = StObject.set(x, "creationTimestamp", js.undefined)
    
    @scala.inline
    def setDeprecated(value: SchemaDeprecationStatus): Self = StObject.set(x, "deprecated", value.asInstanceOf[js.Any])
    
    @scala.inline
    def setDeprecatedUndefined: Self = StObject.set(x, "deprecated", js.undefined)
    
    @scala.inline
    def setDescription(value: String): Self = StObject.set(x, "description", value.asInstanceOf[js.Any])
    
    @scala.inline
    def setDescriptionUndefined: Self = StObject.set(x, "description", js.undefined)
    
    @scala.inline
    def setDiskSizeGb(value: String): Self = StObject.set(x, "diskSizeGb", value.asInstanceOf[js.Any])
    
    @scala.inline
    def setDiskSizeGbUndefined: Self = StObject.set(x, "diskSizeGb", js.undefined)
    
    @scala.inline
    def setFamily(value: String): Self = StObject.set(x, "family", value.asInstanceOf[js.Any])
    
    @scala.inline
    def setFamilyUndefined: Self = StObject.set(x, "family", js.undefined)
    
    @scala.inline
    def setGuestOsFeatures(value: js.Array[SchemaGuestOsFeature]): Self = StObject.set(x, "guestOsFeatures", value.asInstanceOf[js.Any])
    
    @scala.inline
    def setGuestOsFeaturesUndefined: Self = StObject.set(x, "guestOsFeatures", js.undefined)
    
    @scala.inline
    def setGuestOsFeaturesVarargs(value: SchemaGuestOsFeature*): Self = StObject.set(x, "guestOsFeatures", js.Array(value :_*))
    
    @scala.inline
    def setId(value: String): Self = StObject.set(x, "id", value.asInstanceOf[js.Any])
    
    @scala.inline
    def setIdUndefined: Self = StObject.set(x, "id", js.undefined)
    
    @scala.inline
    def setImageEncryptionKey(value: SchemaCustomerEncryptionKey): Self = StObject.set(x, "imageEncryptionKey", value.asInstanceOf[js.Any])
    
    @scala.inline
    def setImageEncryptionKeyUndefined: Self = StObject.set(x, "imageEncryptionKey", js.undefined)
    
    @scala.inline
    def setKind(value: String): Self = StObject.set(x, "kind", value.asInstanceOf[js.Any])
    
    @scala.inline
    def setKindUndefined: Self = StObject.set(x, "kind", js.undefined)
    
    @scala.inline
    def setLabelFingerprint(value: String): Self = StObject.set(x, "labelFingerprint", value.asInstanceOf[js.Any])
    
    @scala.inline
    def setLabelFingerprintUndefined: Self = StObject.set(x, "labelFingerprint", js.undefined)
    
    @scala.inline
    def setLabels(value: StringDictionary[String]): Self = StObject.set(x, "labels", value.asInstanceOf[js.Any])
    
    @scala.inline
    def setLabelsUndefined: Self = StObject.set(x, "labels", js.undefined)
    
    @scala.inline
    def setLicenseCodes(value: js.Array[String]): Self = StObject.set(x, "licenseCodes", value.asInstanceOf[js.Any])
    
    @scala.inline
    def setLicenseCodesUndefined: Self = StObject.set(x, "licenseCodes", js.undefined)
    
    @scala.inline
    def setLicenseCodesVarargs(value: String*): Self = StObject.set(x, "licenseCodes", js.Array(value :_*))
    
    @scala.inline
    def setLicenses(value: js.Array[String]): Self = StObject.set(x, "licenses", value.asInstanceOf[js.Any])
    
    @scala.inline
    def setLicensesUndefined: Self = StObject.set(x, "licenses", js.undefined)
    
    @scala.inline
    def setLicensesVarargs(value: String*): Self = StObject.set(x, "licenses", js.Array(value :_*))
    
    @scala.inline
    def setName(value: String): Self = StObject.set(x, "name", value.asInstanceOf[js.Any])
    
    @scala.inline
    def setNameUndefined: Self = StObject.set(x, "name", js.undefined)
    
    @scala.inline
    def setRawDisk(value: ContainerType): Self = StObject.set(x, "rawDisk", value.asInstanceOf[js.Any])
    
    @scala.inline
    def setRawDiskUndefined: Self = StObject.set(x, "rawDisk", js.undefined)
    
    @scala.inline
    def setSelfLink(value: String): Self = StObject.set(x, "selfLink", value.asInstanceOf[js.Any])
    
    @scala.inline
    def setSelfLinkUndefined: Self = StObject.set(x, "selfLink", js.undefined)
    
    @scala.inline
    def setSourceDisk(value: String): Self = StObject.set(x, "sourceDisk", value.asInstanceOf[js.Any])
    
    @scala.inline
    def setSourceDiskEncryptionKey(value: SchemaCustomerEncryptionKey): Self = StObject.set(x, "sourceDiskEncryptionKey", value.asInstanceOf[js.Any])
    
    @scala.inline
    def setSourceDiskEncryptionKeyUndefined: Self = StObject.set(x, "sourceDiskEncryptionKey", js.undefined)
    
    @scala.inline
    def setSourceDiskId(value: String): Self = StObject.set(x, "sourceDiskId", value.asInstanceOf[js.Any])
    
    @scala.inline
    def setSourceDiskIdUndefined: Self = StObject.set(x, "sourceDiskId", js.undefined)
    
    @scala.inline
    def setSourceDiskUndefined: Self = StObject.set(x, "sourceDisk", js.undefined)
    
    @scala.inline
    def setSourceImage(value: String): Self = StObject.set(x, "sourceImage", value.asInstanceOf[js.Any])
    
    @scala.inline
    def setSourceImageEncryptionKey(value: SchemaCustomerEncryptionKey): Self = StObject.set(x, "sourceImageEncryptionKey", value.asInstanceOf[js.Any])
    
    @scala.inline
    def setSourceImageEncryptionKeyUndefined: Self = StObject.set(x, "sourceImageEncryptionKey", js.undefined)
    
    @scala.inline
    def setSourceImageId(value: String): Self = StObject.set(x, "sourceImageId", value.asInstanceOf[js.Any])
    
    @scala.inline
    def setSourceImageIdUndefined: Self = StObject.set(x, "sourceImageId", js.undefined)
    
    @scala.inline
    def setSourceImageUndefined: Self = StObject.set(x, "sourceImage", js.undefined)
    
    @scala.inline
    def setSourceSnapshot(value: String): Self = StObject.set(x, "sourceSnapshot", value.asInstanceOf[js.Any])
    
    @scala.inline
    def setSourceSnapshotEncryptionKey(value: SchemaCustomerEncryptionKey): Self = StObject.set(x, "sourceSnapshotEncryptionKey", value.asInstanceOf[js.Any])
    
    @scala.inline
    def setSourceSnapshotEncryptionKeyUndefined: Self = StObject.set(x, "sourceSnapshotEncryptionKey", js.undefined)
    
    @scala.inline
    def setSourceSnapshotId(value: String): Self = StObject.set(x, "sourceSnapshotId", value.asInstanceOf[js.Any])
    
    @scala.inline
    def setSourceSnapshotIdUndefined: Self = StObject.set(x, "sourceSnapshotId", js.undefined)
    
    @scala.inline
    def setSourceSnapshotUndefined: Self = StObject.set(x, "sourceSnapshot", js.undefined)
    
    @scala.inline
    def setSourceType(value: String): Self = StObject.set(x, "sourceType", value.asInstanceOf[js.Any])
    
    @scala.inline
    def setSourceTypeUndefined: Self = StObject.set(x, "sourceType", js.undefined)
    
    @scala.inline
    def setStatus(value: String): Self = StObject.set(x, "status", value.asInstanceOf[js.Any])
    
    @scala.inline
    def setStatusUndefined: Self = StObject.set(x, "status", js.undefined)
  }
}
