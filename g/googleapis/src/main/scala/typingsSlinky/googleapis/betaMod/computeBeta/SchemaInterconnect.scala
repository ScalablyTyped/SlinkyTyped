package typingsSlinky.googleapis.betaMod.computeBeta

import org.scalablytyped.runtime.StringDictionary
import org.scalablytyped.runtime.StObject
import scala.scalajs.js
import scala.scalajs.js.`|`
import scala.scalajs.js.annotation.{JSGlobalScope, JSGlobal, JSImport, JSName, JSBracketAccess}

/**
  * Represents an Interconnects resource. The Interconnects resource is a
  * dedicated connection between Google&#39;s network and your on-premises
  * network. For more information, see the  Dedicated overview page. (==
  * resource_for v1.interconnects ==) (== resource_for beta.interconnects ==)
  */
@js.native
trait SchemaInterconnect extends StObject {
  
  /**
    * Administrative status of the interconnect. When this is set to true, the
    * Interconnect is functional and can carry traffic. When set to false, no
    * packets can be carried over the interconnect and no BGP routes are
    * exchanged over it. By default, the status is set to true.
    */
  var adminEnabled: js.UndefOr[Boolean] = js.native
  
  /**
    * [Output Only] A list of CircuitInfo objects, that describe the individual
    * circuits in this LAG.
    */
  var circuitInfos: js.UndefOr[js.Array[SchemaInterconnectCircuitInfo]] = js.native
  
  /**
    * [Output Only] Creation timestamp in RFC3339 text format.
    */
  var creationTimestamp: js.UndefOr[String] = js.native
  
  /**
    * Customer name, to put in the Letter of Authorization as the party
    * authorized to request a crossconnect.
    */
  var customerName: js.UndefOr[String] = js.native
  
  /**
    * An optional description of this resource. Provide this property when you
    * create the resource.
    */
  var description: js.UndefOr[String] = js.native
  
  /**
    * [Output Only] A list of outages expected for this Interconnect.
    */
  var expectedOutages: js.UndefOr[js.Array[SchemaInterconnectOutageNotification]] = js.native
  
  /**
    * [Output Only] IP address configured on the Google side of the
    * Interconnect link. This can be used only for ping tests.
    */
  var googleIpAddress: js.UndefOr[String] = js.native
  
  /**
    * [Output Only] Google reference ID to be used when raising support tickets
    * with Google or otherwise to debug backend connectivity issues.
    */
  var googleReferenceId: js.UndefOr[String] = js.native
  
  /**
    * [Output Only] The unique identifier for the resource. This identifier is
    * defined by the server.
    */
  var id: js.UndefOr[String] = js.native
  
  /**
    * [Output Only] A list of the URLs of all InterconnectAttachments
    * configured to use this Interconnect.
    */
  var interconnectAttachments: js.UndefOr[js.Array[String]] = js.native
  
  /**
    * Type of interconnect. Note that &quot;IT_PRIVATE&quot; has been
    * deprecated in favor of &quot;DEDICATED&quot;
    */
  var interconnectType: js.UndefOr[String] = js.native
  
  /**
    * [Output Only] Type of the resource. Always compute#interconnect for
    * interconnects.
    */
  var kind: js.UndefOr[String] = js.native
  
  /**
    * A fingerprint for the labels being applied to this Interconnect, which is
    * essentially a hash of the labels set used for optimistic locking. The
    * fingerprint is initially generated by Compute Engine and changes after
    * every request to modify or update labels. You must always provide an
    * up-to-date fingerprint hash in order to update or change labels,
    * otherwise the request will fail with error 412 conditionNotMet.  To see
    * the latest fingerprint, make a get() request to retrieve an Interconnect.
    */
  var labelFingerprint: js.UndefOr[String] = js.native
  
  /**
    * Labels to apply to this Interconnect resource. These can be later
    * modified by the setLabels method. Each label key/value must comply with
    * RFC1035. Label values may be empty.
    */
  var labels: js.UndefOr[StringDictionary[String]] = js.native
  
  /**
    * Type of link requested. This field indicates speed of each of the links
    * in the bundle, not the entire bundle.
    */
  var linkType: js.UndefOr[String] = js.native
  
  /**
    * URL of the InterconnectLocation object that represents where this
    * connection is to be provisioned.
    */
  var location: js.UndefOr[String] = js.native
  
  /**
    * Name of the resource. Provided by the client when the resource is
    * created. The name must be 1-63 characters long, and comply with RFC1035.
    * Specifically, the name must be 1-63 characters long and match the regular
    * expression `[a-z]([-a-z0-9]*[a-z0-9])?` which means the first character
    * must be a lowercase letter, and all following characters must be a dash,
    * lowercase letter, or digit, except the last character, which cannot be a
    * dash.
    */
  var name: js.UndefOr[String] = js.native
  
  /**
    * Email address to contact the customer NOC for operations and maintenance
    * notifications regarding this Interconnect. If specified, this will be
    * used for notifications in addition to all other forms described, such as
    * Stackdriver logs alerting and Cloud Notifications.
    */
  var nocContactEmail: js.UndefOr[String] = js.native
  
  /**
    * [Output Only] The current status of whether or not this Interconnect is
    * functional.
    */
  var operationalStatus: js.UndefOr[String] = js.native
  
  /**
    * [Output Only] IP address configured on the customer side of the
    * Interconnect link. The customer should configure this IP address during
    * turnup when prompted by Google NOC. This can be used only for ping tests.
    */
  var peerIpAddress: js.UndefOr[String] = js.native
  
  /**
    * [Output Only] Number of links actually provisioned in this interconnect.
    */
  var provisionedLinkCount: js.UndefOr[Double] = js.native
  
  /**
    * Target number of physical links in the link bundle, as requested by the
    * customer.
    */
  var requestedLinkCount: js.UndefOr[Double] = js.native
  
  /**
    * [Output Only] Server-defined URL for the resource.
    */
  var selfLink: js.UndefOr[String] = js.native
  
  /**
    * [Output Only] The current state of whether or not this Interconnect is
    * functional.
    */
  var state: js.UndefOr[String] = js.native
}
object SchemaInterconnect {
  
  @scala.inline
  def apply(): SchemaInterconnect = {
    val __obj = js.Dynamic.literal()
    __obj.asInstanceOf[SchemaInterconnect]
  }
  
  @scala.inline
  implicit class SchemaInterconnectMutableBuilder[Self <: SchemaInterconnect] (val x: Self) extends AnyVal {
    
    @scala.inline
    def setAdminEnabled(value: Boolean): Self = StObject.set(x, "adminEnabled", value.asInstanceOf[js.Any])
    
    @scala.inline
    def setAdminEnabledUndefined: Self = StObject.set(x, "adminEnabled", js.undefined)
    
    @scala.inline
    def setCircuitInfos(value: js.Array[SchemaInterconnectCircuitInfo]): Self = StObject.set(x, "circuitInfos", value.asInstanceOf[js.Any])
    
    @scala.inline
    def setCircuitInfosUndefined: Self = StObject.set(x, "circuitInfos", js.undefined)
    
    @scala.inline
    def setCircuitInfosVarargs(value: SchemaInterconnectCircuitInfo*): Self = StObject.set(x, "circuitInfos", js.Array(value :_*))
    
    @scala.inline
    def setCreationTimestamp(value: String): Self = StObject.set(x, "creationTimestamp", value.asInstanceOf[js.Any])
    
    @scala.inline
    def setCreationTimestampUndefined: Self = StObject.set(x, "creationTimestamp", js.undefined)
    
    @scala.inline
    def setCustomerName(value: String): Self = StObject.set(x, "customerName", value.asInstanceOf[js.Any])
    
    @scala.inline
    def setCustomerNameUndefined: Self = StObject.set(x, "customerName", js.undefined)
    
    @scala.inline
    def setDescription(value: String): Self = StObject.set(x, "description", value.asInstanceOf[js.Any])
    
    @scala.inline
    def setDescriptionUndefined: Self = StObject.set(x, "description", js.undefined)
    
    @scala.inline
    def setExpectedOutages(value: js.Array[SchemaInterconnectOutageNotification]): Self = StObject.set(x, "expectedOutages", value.asInstanceOf[js.Any])
    
    @scala.inline
    def setExpectedOutagesUndefined: Self = StObject.set(x, "expectedOutages", js.undefined)
    
    @scala.inline
    def setExpectedOutagesVarargs(value: SchemaInterconnectOutageNotification*): Self = StObject.set(x, "expectedOutages", js.Array(value :_*))
    
    @scala.inline
    def setGoogleIpAddress(value: String): Self = StObject.set(x, "googleIpAddress", value.asInstanceOf[js.Any])
    
    @scala.inline
    def setGoogleIpAddressUndefined: Self = StObject.set(x, "googleIpAddress", js.undefined)
    
    @scala.inline
    def setGoogleReferenceId(value: String): Self = StObject.set(x, "googleReferenceId", value.asInstanceOf[js.Any])
    
    @scala.inline
    def setGoogleReferenceIdUndefined: Self = StObject.set(x, "googleReferenceId", js.undefined)
    
    @scala.inline
    def setId(value: String): Self = StObject.set(x, "id", value.asInstanceOf[js.Any])
    
    @scala.inline
    def setIdUndefined: Self = StObject.set(x, "id", js.undefined)
    
    @scala.inline
    def setInterconnectAttachments(value: js.Array[String]): Self = StObject.set(x, "interconnectAttachments", value.asInstanceOf[js.Any])
    
    @scala.inline
    def setInterconnectAttachmentsUndefined: Self = StObject.set(x, "interconnectAttachments", js.undefined)
    
    @scala.inline
    def setInterconnectAttachmentsVarargs(value: String*): Self = StObject.set(x, "interconnectAttachments", js.Array(value :_*))
    
    @scala.inline
    def setInterconnectType(value: String): Self = StObject.set(x, "interconnectType", value.asInstanceOf[js.Any])
    
    @scala.inline
    def setInterconnectTypeUndefined: Self = StObject.set(x, "interconnectType", js.undefined)
    
    @scala.inline
    def setKind(value: String): Self = StObject.set(x, "kind", value.asInstanceOf[js.Any])
    
    @scala.inline
    def setKindUndefined: Self = StObject.set(x, "kind", js.undefined)
    
    @scala.inline
    def setLabelFingerprint(value: String): Self = StObject.set(x, "labelFingerprint", value.asInstanceOf[js.Any])
    
    @scala.inline
    def setLabelFingerprintUndefined: Self = StObject.set(x, "labelFingerprint", js.undefined)
    
    @scala.inline
    def setLabels(value: StringDictionary[String]): Self = StObject.set(x, "labels", value.asInstanceOf[js.Any])
    
    @scala.inline
    def setLabelsUndefined: Self = StObject.set(x, "labels", js.undefined)
    
    @scala.inline
    def setLinkType(value: String): Self = StObject.set(x, "linkType", value.asInstanceOf[js.Any])
    
    @scala.inline
    def setLinkTypeUndefined: Self = StObject.set(x, "linkType", js.undefined)
    
    @scala.inline
    def setLocation(value: String): Self = StObject.set(x, "location", value.asInstanceOf[js.Any])
    
    @scala.inline
    def setLocationUndefined: Self = StObject.set(x, "location", js.undefined)
    
    @scala.inline
    def setName(value: String): Self = StObject.set(x, "name", value.asInstanceOf[js.Any])
    
    @scala.inline
    def setNameUndefined: Self = StObject.set(x, "name", js.undefined)
    
    @scala.inline
    def setNocContactEmail(value: String): Self = StObject.set(x, "nocContactEmail", value.asInstanceOf[js.Any])
    
    @scala.inline
    def setNocContactEmailUndefined: Self = StObject.set(x, "nocContactEmail", js.undefined)
    
    @scala.inline
    def setOperationalStatus(value: String): Self = StObject.set(x, "operationalStatus", value.asInstanceOf[js.Any])
    
    @scala.inline
    def setOperationalStatusUndefined: Self = StObject.set(x, "operationalStatus", js.undefined)
    
    @scala.inline
    def setPeerIpAddress(value: String): Self = StObject.set(x, "peerIpAddress", value.asInstanceOf[js.Any])
    
    @scala.inline
    def setPeerIpAddressUndefined: Self = StObject.set(x, "peerIpAddress", js.undefined)
    
    @scala.inline
    def setProvisionedLinkCount(value: Double): Self = StObject.set(x, "provisionedLinkCount", value.asInstanceOf[js.Any])
    
    @scala.inline
    def setProvisionedLinkCountUndefined: Self = StObject.set(x, "provisionedLinkCount", js.undefined)
    
    @scala.inline
    def setRequestedLinkCount(value: Double): Self = StObject.set(x, "requestedLinkCount", value.asInstanceOf[js.Any])
    
    @scala.inline
    def setRequestedLinkCountUndefined: Self = StObject.set(x, "requestedLinkCount", js.undefined)
    
    @scala.inline
    def setSelfLink(value: String): Self = StObject.set(x, "selfLink", value.asInstanceOf[js.Any])
    
    @scala.inline
    def setSelfLinkUndefined: Self = StObject.set(x, "selfLink", js.undefined)
    
    @scala.inline
    def setState(value: String): Self = StObject.set(x, "state", value.asInstanceOf[js.Any])
    
    @scala.inline
    def setStateUndefined: Self = StObject.set(x, "state", js.undefined)
  }
}
