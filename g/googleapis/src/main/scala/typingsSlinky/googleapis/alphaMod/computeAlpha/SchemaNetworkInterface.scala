package typingsSlinky.googleapis.alphaMod.computeAlpha

import scala.scalajs.js
import scala.scalajs.js.`|`
import scala.scalajs.js.annotation.{JSGlobalScope, JSGlobal, JSImport, JSName, JSBracketAccess}

/**
  * A network interface resource attached to an instance.
  */
@js.native
trait SchemaNetworkInterface extends js.Object {
  
  /**
    * An array of configurations for this interface. Currently, only one access
    * config, ONE_TO_ONE_NAT, is supported. If there are no accessConfigs
    * specified, then this instance will have no external internet access.
    */
  var accessConfigs: js.UndefOr[js.Array[SchemaAccessConfig]] = js.native
  
  /**
    * An array of alias IP ranges for this network interface. Can only be
    * specified for network interfaces on subnet-mode networks.
    */
  var aliasIpRanges: js.UndefOr[js.Array[SchemaAliasIpRange]] = js.native
  
  /**
    * Fingerprint hash of contents stored in this network interface. This field
    * will be ignored when inserting an Instance or adding a NetworkInterface.
    * An up-to-date fingerprint must be provided in order to update the
    * NetworkInterface, otherwise the request will fail with error 412
    * conditionNotMet.
    */
  var fingerprint: js.UndefOr[String] = js.native
  
  /**
    * [Output Only] An IPv6 internal network address for this network
    * interface.
    */
  var ipv6Address: js.UndefOr[String] = js.native
  
  /**
    * [Output Only] Type of the resource. Always compute#networkInterface for
    * network interfaces.
    */
  var kind: js.UndefOr[String] = js.native
  
  /**
    * [Output Only] The name of the network interface, generated by the server.
    * For network devices, these are eth0, eth1, etc.
    */
  var name: js.UndefOr[String] = js.native
  
  /**
    * URL of the network resource for this instance. When creating an instance,
    * if neither the network nor the subnetwork is specified, the default
    * network global/networks/default is used; if the network is not specified
    * but the subnetwork is specified, the network is inferred.  This field is
    * optional when creating a firewall rule. If not specified when creating a
    * firewall rule, the default network global/networks/default is used.  If
    * you specify this property, you can specify the network as a full or
    * partial URL. For example, the following are all valid URLs:   -
    * https://www.googleapis.com/compute/v1/projects/project/global/networks/network
    * - projects/project/global/networks/network  - global/networks/default
    */
  var network: js.UndefOr[String] = js.native
  
  /**
    * An IPv4 internal network address to assign to the instance for this
    * network interface. If not specified by the user, an unused internal IP is
    * assigned by the system.
    */
  var networkIP: js.UndefOr[String] = js.native
  
  /**
    * The URL of the Subnetwork resource for this instance. If the network
    * resource is in legacy mode, do not provide this property. If the network
    * is in auto subnet mode, providing the subnetwork is optional. If the
    * network is in custom subnet mode, then this field should be specified. If
    * you specify this property, you can specify the subnetwork as a full or
    * partial URL. For example, the following are all valid URLs:   -
    * https://www.googleapis.com/compute/v1/projects/project/regions/region/subnetworks/subnetwork
    * - regions/region/subnetworks/subnetwork
    */
  var subnetwork: js.UndefOr[String] = js.native
}
object SchemaNetworkInterface {
  
  @scala.inline
  def apply(): SchemaNetworkInterface = {
    val __obj = js.Dynamic.literal()
    __obj.asInstanceOf[SchemaNetworkInterface]
  }
  
  @scala.inline
  implicit class SchemaNetworkInterfaceOps[Self <: SchemaNetworkInterface] (val x: Self) extends AnyVal {
    
    @scala.inline
    def duplicate: Self = (js.Dynamic.global.Object.assign(js.Dynamic.literal(), x)).asInstanceOf[Self]
    
    @scala.inline
    def combineWith[Other <: js.Any](other: Other): Self with Other = (js.Dynamic.global.Object.assign(js.Dynamic.literal(), x, other.asInstanceOf[js.Any])).asInstanceOf[Self with Other]
    
    @scala.inline
    def set(key: String, value: js.Any): Self = {
      x.asInstanceOf[js.Dynamic].updateDynamic(key)(value)
      x
    }
    
    @scala.inline
    def setAccessConfigsVarargs(value: SchemaAccessConfig*): Self = this.set("accessConfigs", js.Array(value :_*))
    
    @scala.inline
    def setAccessConfigs(value: js.Array[SchemaAccessConfig]): Self = this.set("accessConfigs", value.asInstanceOf[js.Any])
    
    @scala.inline
    def deleteAccessConfigs: Self = this.set("accessConfigs", js.undefined)
    
    @scala.inline
    def setAliasIpRangesVarargs(value: SchemaAliasIpRange*): Self = this.set("aliasIpRanges", js.Array(value :_*))
    
    @scala.inline
    def setAliasIpRanges(value: js.Array[SchemaAliasIpRange]): Self = this.set("aliasIpRanges", value.asInstanceOf[js.Any])
    
    @scala.inline
    def deleteAliasIpRanges: Self = this.set("aliasIpRanges", js.undefined)
    
    @scala.inline
    def setFingerprint(value: String): Self = this.set("fingerprint", value.asInstanceOf[js.Any])
    
    @scala.inline
    def deleteFingerprint: Self = this.set("fingerprint", js.undefined)
    
    @scala.inline
    def setIpv6Address(value: String): Self = this.set("ipv6Address", value.asInstanceOf[js.Any])
    
    @scala.inline
    def deleteIpv6Address: Self = this.set("ipv6Address", js.undefined)
    
    @scala.inline
    def setKind(value: String): Self = this.set("kind", value.asInstanceOf[js.Any])
    
    @scala.inline
    def deleteKind: Self = this.set("kind", js.undefined)
    
    @scala.inline
    def setName(value: String): Self = this.set("name", value.asInstanceOf[js.Any])
    
    @scala.inline
    def deleteName: Self = this.set("name", js.undefined)
    
    @scala.inline
    def setNetwork(value: String): Self = this.set("network", value.asInstanceOf[js.Any])
    
    @scala.inline
    def deleteNetwork: Self = this.set("network", js.undefined)
    
    @scala.inline
    def setNetworkIP(value: String): Self = this.set("networkIP", value.asInstanceOf[js.Any])
    
    @scala.inline
    def deleteNetworkIP: Self = this.set("networkIP", js.undefined)
    
    @scala.inline
    def setSubnetwork(value: String): Self = this.set("subnetwork", value.asInstanceOf[js.Any])
    
    @scala.inline
    def deleteSubnetwork: Self = this.set("subnetwork", js.undefined)
  }
}
