package typingsSlinky.googleapis.computeV1Mod.computeV1

import org.scalablytyped.runtime.StObject
import scala.scalajs.js
import scala.scalajs.js.`|`
import scala.scalajs.js.annotation.{JSGlobalScope, JSGlobal, JSImport, JSName, JSBracketAccess}

/**
  * InstanceGroups (== resource_for beta.instanceGroups ==) (== resource_for
  * v1.instanceGroups ==) (== resource_for beta.regionInstanceGroups ==) (==
  * resource_for v1.regionInstanceGroups ==)
  */
@js.native
trait SchemaInstanceGroup extends StObject {
  
  /**
    * [Output Only] The creation timestamp for this instance group in RFC3339
    * text format.
    */
  var creationTimestamp: js.UndefOr[String] = js.native
  
  /**
    * An optional description of this resource. Provide this property when you
    * create the resource.
    */
  var description: js.UndefOr[String] = js.native
  
  /**
    * [Output Only] The fingerprint of the named ports. The system uses this
    * fingerprint to detect conflicts when multiple users change the named
    * ports concurrently.
    */
  var fingerprint: js.UndefOr[String] = js.native
  
  /**
    * [Output Only] A unique identifier for this instance group, generated by
    * the server.
    */
  var id: js.UndefOr[String] = js.native
  
  /**
    * [Output Only] The resource type, which is always compute#instanceGroup
    * for instance groups.
    */
  var kind: js.UndefOr[String] = js.native
  
  /**
    * The name of the instance group. The name must be 1-63 characters long,
    * and comply with RFC1035.
    */
  var name: js.UndefOr[String] = js.native
  
  /**
    * Assigns a name to a port number. For example: {name: &quot;http&quot;,
    * port: 80}  This allows the system to reference ports by the assigned name
    * instead of a port number. Named ports can also contain multiple ports.
    * For example: [{name: &quot;http&quot;, port: 80},{name: &quot;http&quot;,
    * port: 8080}]   Named ports apply to all instances in this instance group.
    */
  var namedPorts: js.UndefOr[js.Array[SchemaNamedPort]] = js.native
  
  /**
    * The URL of the network to which all instances in the instance group
    * belong.
    */
  var network: js.UndefOr[String] = js.native
  
  /**
    * [Output Only] The URL of the region where the instance group is located
    * (for regional resources).
    */
  var region: js.UndefOr[String] = js.native
  
  /**
    * [Output Only] The URL for this instance group. The server generates this
    * URL.
    */
  var selfLink: js.UndefOr[String] = js.native
  
  /**
    * [Output Only] The total number of instances in the instance group.
    */
  var size: js.UndefOr[Double] = js.native
  
  /**
    * [Output Only] The URL of the subnetwork to which all instances in the
    * instance group belong.
    */
  var subnetwork: js.UndefOr[String] = js.native
  
  /**
    * [Output Only] The URL of the zone where the instance group is located
    * (for zonal resources).
    */
  var zone: js.UndefOr[String] = js.native
}
object SchemaInstanceGroup {
  
  @scala.inline
  def apply(): SchemaInstanceGroup = {
    val __obj = js.Dynamic.literal()
    __obj.asInstanceOf[SchemaInstanceGroup]
  }
  
  @scala.inline
  implicit class SchemaInstanceGroupMutableBuilder[Self <: SchemaInstanceGroup] (val x: Self) extends AnyVal {
    
    @scala.inline
    def setCreationTimestamp(value: String): Self = StObject.set(x, "creationTimestamp", value.asInstanceOf[js.Any])
    
    @scala.inline
    def setCreationTimestampUndefined: Self = StObject.set(x, "creationTimestamp", js.undefined)
    
    @scala.inline
    def setDescription(value: String): Self = StObject.set(x, "description", value.asInstanceOf[js.Any])
    
    @scala.inline
    def setDescriptionUndefined: Self = StObject.set(x, "description", js.undefined)
    
    @scala.inline
    def setFingerprint(value: String): Self = StObject.set(x, "fingerprint", value.asInstanceOf[js.Any])
    
    @scala.inline
    def setFingerprintUndefined: Self = StObject.set(x, "fingerprint", js.undefined)
    
    @scala.inline
    def setId(value: String): Self = StObject.set(x, "id", value.asInstanceOf[js.Any])
    
    @scala.inline
    def setIdUndefined: Self = StObject.set(x, "id", js.undefined)
    
    @scala.inline
    def setKind(value: String): Self = StObject.set(x, "kind", value.asInstanceOf[js.Any])
    
    @scala.inline
    def setKindUndefined: Self = StObject.set(x, "kind", js.undefined)
    
    @scala.inline
    def setName(value: String): Self = StObject.set(x, "name", value.asInstanceOf[js.Any])
    
    @scala.inline
    def setNameUndefined: Self = StObject.set(x, "name", js.undefined)
    
    @scala.inline
    def setNamedPorts(value: js.Array[SchemaNamedPort]): Self = StObject.set(x, "namedPorts", value.asInstanceOf[js.Any])
    
    @scala.inline
    def setNamedPortsUndefined: Self = StObject.set(x, "namedPorts", js.undefined)
    
    @scala.inline
    def setNamedPortsVarargs(value: SchemaNamedPort*): Self = StObject.set(x, "namedPorts", js.Array(value :_*))
    
    @scala.inline
    def setNetwork(value: String): Self = StObject.set(x, "network", value.asInstanceOf[js.Any])
    
    @scala.inline
    def setNetworkUndefined: Self = StObject.set(x, "network", js.undefined)
    
    @scala.inline
    def setRegion(value: String): Self = StObject.set(x, "region", value.asInstanceOf[js.Any])
    
    @scala.inline
    def setRegionUndefined: Self = StObject.set(x, "region", js.undefined)
    
    @scala.inline
    def setSelfLink(value: String): Self = StObject.set(x, "selfLink", value.asInstanceOf[js.Any])
    
    @scala.inline
    def setSelfLinkUndefined: Self = StObject.set(x, "selfLink", js.undefined)
    
    @scala.inline
    def setSize(value: Double): Self = StObject.set(x, "size", value.asInstanceOf[js.Any])
    
    @scala.inline
    def setSizeUndefined: Self = StObject.set(x, "size", js.undefined)
    
    @scala.inline
    def setSubnetwork(value: String): Self = StObject.set(x, "subnetwork", value.asInstanceOf[js.Any])
    
    @scala.inline
    def setSubnetworkUndefined: Self = StObject.set(x, "subnetwork", js.undefined)
    
    @scala.inline
    def setZone(value: String): Self = StObject.set(x, "zone", value.asInstanceOf[js.Any])
    
    @scala.inline
    def setZoneUndefined: Self = StObject.set(x, "zone", js.undefined)
  }
}
