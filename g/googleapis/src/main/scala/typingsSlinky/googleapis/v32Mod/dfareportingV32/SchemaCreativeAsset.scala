package typingsSlinky.googleapis.v32Mod.dfareportingV32

import org.scalablytyped.runtime.StObject
import scala.scalajs.js
import scala.scalajs.js.`|`
import scala.scalajs.js.annotation.{JSGlobalScope, JSGlobal, JSImport, JSName, JSBracketAccess}

/**
  * Creative Asset.
  */
@js.native
trait SchemaCreativeAsset extends StObject {
  
  /**
    * Whether ActionScript3 is enabled for the flash asset. This is a read-only
    * field. Applicable to the following creative type: FLASH_INPAGE.
    * Applicable to DISPLAY when the primary asset type is not HTML_IMAGE.
    */
  var actionScript3: js.UndefOr[Boolean] = js.native
  
  /**
    * Whether the video or audio asset is active. This is a read-only field for
    * VPAID_NON_LINEAR_VIDEO assets. Applicable to the following creative
    * types: INSTREAM_AUDIO, INSTREAM_VIDEO and all VPAID.
    */
  var active: js.UndefOr[Boolean] = js.native
  
  /**
    * Additional sizes associated with this creative asset. HTML5 asset
    * generated by compatible software such as GWD will be able to support more
    * sizes this creative asset can render.
    */
  var additionalSizes: js.UndefOr[js.Array[SchemaSize]] = js.native
  
  /**
    * Possible alignments for an asset. This is a read-only field. Applicable
    * to the following creative types:
    * RICH_MEDIA_DISPLAY_MULTI_FLOATING_INTERSTITIAL.
    */
  var alignment: js.UndefOr[String] = js.native
  
  /**
    * Artwork type of rich media creative. This is a read-only field.
    * Applicable to the following creative types: all RICH_MEDIA.
    */
  var artworkType: js.UndefOr[String] = js.native
  
  /**
    * Identifier of this asset. This is the same identifier returned during
    * creative asset insert operation. This is a required field. Applicable to
    * all but the following creative types: all REDIRECT and TRACKING_TEXT.
    */
  var assetIdentifier: js.UndefOr[SchemaCreativeAssetId] = js.native
  
  /**
    * Exit event configured for the backup image. Applicable to the following
    * creative types: all RICH_MEDIA.
    */
  var backupImageExit: js.UndefOr[SchemaCreativeCustomEvent] = js.native
  
  /**
    * Detected bit-rate for audio or video asset. This is a read-only field.
    * Applicable to the following creative types: INSTREAM_AUDIO,
    * INSTREAM_VIDEO and all VPAID.
    */
  var bitRate: js.UndefOr[Double] = js.native
  
  /**
    * Rich media child asset type. This is a read-only field. Applicable to the
    * following creative types: all VPAID.
    */
  var childAssetType: js.UndefOr[String] = js.native
  
  /**
    * Size of an asset when collapsed. This is a read-only field. Applicable to
    * the following creative types: all RICH_MEDIA and all VPAID. Additionally,
    * applicable to assets whose displayType is ASSET_DISPLAY_TYPE_EXPANDING or
    * ASSET_DISPLAY_TYPE_PEEL_DOWN.
    */
  var collapsedSize: js.UndefOr[SchemaSize] = js.native
  
  /**
    * List of companion creatives assigned to an in-stream video creative
    * asset. Acceptable values include IDs of existing flash and image
    * creatives. Applicable to INSTREAM_VIDEO creative type with
    * dynamicAssetSelection set to true.
    */
  var companionCreativeIds: js.UndefOr[js.Array[String]] = js.native
  
  /**
    * Custom start time in seconds for making the asset visible. Applicable to
    * the following creative types: all RICH_MEDIA. Value must be greater than
    * or equal to 0.
    */
  var customStartTimeValue: js.UndefOr[Double] = js.native
  
  /**
    * List of feature dependencies for the creative asset that are detected by
    * Campaign Manager. Feature dependencies are features that a browser must
    * be able to support in order to render your HTML5 creative correctly. This
    * is a read-only, auto-generated field. Applicable to the following
    * creative types: HTML5_BANNER. Applicable to DISPLAY when the primary
    * asset type is not HTML_IMAGE.
    */
  var detectedFeatures: js.UndefOr[js.Array[String]] = js.native
  
  /**
    * Type of rich media asset. This is a read-only field. Applicable to the
    * following creative types: all RICH_MEDIA.
    */
  var displayType: js.UndefOr[String] = js.native
  
  /**
    * Duration in seconds for which an asset will be displayed. Applicable to
    * the following creative types: INSTREAM_AUDIO, INSTREAM_VIDEO and
    * VPAID_LINEAR_VIDEO. Value must be greater than or equal to 1.
    */
  var duration: js.UndefOr[Double] = js.native
  
  /**
    * Duration type for which an asset will be displayed. Applicable to the
    * following creative types: all RICH_MEDIA.
    */
  var durationType: js.UndefOr[String] = js.native
  
  /**
    * Detected expanded dimension for video asset. This is a read-only field.
    * Applicable to the following creative types: INSTREAM_VIDEO and all VPAID.
    */
  var expandedDimension: js.UndefOr[SchemaSize] = js.native
  
  /**
    * File size associated with this creative asset. This is a read-only field.
    * Applicable to all but the following creative types: all REDIRECT and
    * TRACKING_TEXT.
    */
  var fileSize: js.UndefOr[String] = js.native
  
  /**
    * Flash version of the asset. This is a read-only field. Applicable to the
    * following creative types: FLASH_INPAGE, all RICH_MEDIA, and all VPAID.
    * Applicable to DISPLAY when the primary asset type is not HTML_IMAGE.
    */
  var flashVersion: js.UndefOr[Double] = js.native
  
  /**
    * Whether to hide Flash objects flag for an asset. Applicable to the
    * following creative types: all RICH_MEDIA.
    */
  var hideFlashObjects: js.UndefOr[Boolean] = js.native
  
  /**
    * Whether to hide selection boxes flag for an asset. Applicable to the
    * following creative types: all RICH_MEDIA.
    */
  var hideSelectionBoxes: js.UndefOr[Boolean] = js.native
  
  /**
    * Whether the asset is horizontally locked. This is a read-only field.
    * Applicable to the following creative types: all RICH_MEDIA.
    */
  var horizontallyLocked: js.UndefOr[Boolean] = js.native
  
  /**
    * Numeric ID of this creative asset. This is a required field and should
    * not be modified. Applicable to all but the following creative types: all
    * REDIRECT and TRACKING_TEXT.
    */
  var id: js.UndefOr[String] = js.native
  
  /**
    * Dimension value for the ID of the asset. This is a read-only,
    * auto-generated field.
    */
  var idDimensionValue: js.UndefOr[SchemaDimensionValue] = js.native
  
  /**
    * Detected duration for audio or video asset. This is a read-only field.
    * Applicable to the following creative types: INSTREAM_AUDIO,
    * INSTREAM_VIDEO and all VPAID.
    */
  var mediaDuration: js.UndefOr[Double] = js.native
  
  /**
    * Detected MIME type for audio or video asset. This is a read-only field.
    * Applicable to the following creative types: INSTREAM_AUDIO,
    * INSTREAM_VIDEO and all VPAID.
    */
  var mimeType: js.UndefOr[String] = js.native
  
  /**
    * Offset position for an asset in collapsed mode. This is a read-only
    * field. Applicable to the following creative types: all RICH_MEDIA and all
    * VPAID. Additionally, only applicable to assets whose displayType is
    * ASSET_DISPLAY_TYPE_EXPANDING or ASSET_DISPLAY_TYPE_PEEL_DOWN.
    */
  var offset: js.UndefOr[SchemaOffsetPosition] = js.native
  
  /**
    * Orientation of video asset. This is a read-only, auto-generated field.
    */
  var orientation: js.UndefOr[String] = js.native
  
  /**
    * Whether the backup asset is original or changed by the user in Campaign
    * Manager. Applicable to the following creative types: all RICH_MEDIA.
    */
  var originalBackup: js.UndefOr[Boolean] = js.native
  
  /**
    * Offset position for an asset. Applicable to the following creative types:
    * all RICH_MEDIA.
    */
  var position: js.UndefOr[SchemaOffsetPosition] = js.native
  
  /**
    * Offset left unit for an asset. This is a read-only field. Applicable to
    * the following creative types: all RICH_MEDIA.
    */
  var positionLeftUnit: js.UndefOr[String] = js.native
  
  /**
    * Offset top unit for an asset. This is a read-only field if the asset
    * displayType is ASSET_DISPLAY_TYPE_OVERLAY. Applicable to the following
    * creative types: all RICH_MEDIA.
    */
  var positionTopUnit: js.UndefOr[String] = js.native
  
  /**
    * Progressive URL for video asset. This is a read-only field. Applicable to
    * the following creative types: INSTREAM_VIDEO and all VPAID.
    */
  var progressiveServingUrl: js.UndefOr[String] = js.native
  
  /**
    * Whether the asset pushes down other content. Applicable to the following
    * creative types: all RICH_MEDIA. Additionally, only applicable when the
    * asset offsets are 0, the collapsedSize.width matches size.width, and the
    * collapsedSize.height is less than size.height.
    */
  var pushdown: js.UndefOr[Boolean] = js.native
  
  /**
    * Pushdown duration in seconds for an asset. Applicable to the following
    * creative types: all RICH_MEDIA.Additionally, only applicable when the
    * asset pushdown field is true, the offsets are 0, the collapsedSize.width
    * matches size.width, and the collapsedSize.height is less than
    * size.height. Acceptable values are 0 to 9.99, inclusive.
    */
  var pushdownDuration: js.UndefOr[Double] = js.native
  
  /**
    * Role of the asset in relation to creative. Applicable to all but the
    * following creative types: all REDIRECT and TRACKING_TEXT. This is a
    * required field. PRIMARY applies to DISPLAY, FLASH_INPAGE, HTML5_BANNER,
    * IMAGE, DISPLAY_IMAGE_GALLERY, all RICH_MEDIA (which may contain multiple
    * primary assets), and all VPAID creatives. BACKUP_IMAGE applies to
    * FLASH_INPAGE, HTML5_BANNER, all RICH_MEDIA, and all VPAID creatives.
    * Applicable to DISPLAY when the primary asset type is not HTML_IMAGE.
    * ADDITIONAL_IMAGE and ADDITIONAL_FLASH apply to FLASH_INPAGE creatives.
    * OTHER refers to assets from sources other than Campaign Manager, such as
    * Studio uploaded assets, applicable to all RICH_MEDIA and all VPAID
    * creatives. PARENT_VIDEO refers to videos uploaded by the user in Campaign
    * Manager and is applicable to INSTREAM_VIDEO and VPAID_LINEAR_VIDEO
    * creatives. TRANSCODED_VIDEO refers to videos transcoded by Campaign
    * Manager from PARENT_VIDEO assets and is applicable to INSTREAM_VIDEO and
    * VPAID_LINEAR_VIDEO creatives. ALTERNATE_VIDEO refers to the Campaign
    * Manager representation of child asset videos from Studio, and is
    * applicable to VPAID_LINEAR_VIDEO creatives. These cannot be added or
    * removed within Campaign Manager. For VPAID_LINEAR_VIDEO creatives,
    * PARENT_VIDEO, TRANSCODED_VIDEO and ALTERNATE_VIDEO assets that are marked
    * active serve as backup in case the VPAID creative cannot be served. Only
    * PARENT_VIDEO assets can be added or removed for an INSTREAM_VIDEO or
    * VPAID_LINEAR_VIDEO creative. PARENT_AUDIO refers to audios uploaded by
    * the user in Campaign Manager and is applicable to INSTREAM_AUDIO
    * creatives. TRANSCODED_AUDIO refers to audios transcoded by Campaign
    * Manager from PARENT_AUDIO assets and is applicable to INSTREAM_AUDIO
    * creatives.
    */
  var role: js.UndefOr[String] = js.native
  
  /**
    * Size associated with this creative asset. This is a required field when
    * applicable; however for IMAGE and FLASH_INPAGE, creatives if left blank,
    * this field will be automatically set using the actual size of the
    * associated image asset. Applicable to the following creative types:
    * DISPLAY_IMAGE_GALLERY, FLASH_INPAGE, HTML5_BANNER, IMAGE, and all
    * RICH_MEDIA. Applicable to DISPLAY when the primary asset type is not
    * HTML_IMAGE.
    */
  var size: js.UndefOr[SchemaSize] = js.native
  
  /**
    * Whether the asset is SSL-compliant. This is a read-only field. Applicable
    * to all but the following creative types: all REDIRECT and TRACKING_TEXT.
    */
  var sslCompliant: js.UndefOr[Boolean] = js.native
  
  /**
    * Initial wait time type before making the asset visible. Applicable to the
    * following creative types: all RICH_MEDIA.
    */
  var startTimeType: js.UndefOr[String] = js.native
  
  /**
    * Streaming URL for video asset. This is a read-only field. Applicable to
    * the following creative types: INSTREAM_VIDEO and all VPAID.
    */
  var streamingServingUrl: js.UndefOr[String] = js.native
  
  /**
    * Whether the asset is transparent. Applicable to the following creative
    * types: all RICH_MEDIA. Additionally, only applicable to HTML5 assets.
    */
  var transparency: js.UndefOr[Boolean] = js.native
  
  /**
    * Whether the asset is vertically locked. This is a read-only field.
    * Applicable to the following creative types: all RICH_MEDIA.
    */
  var verticallyLocked: js.UndefOr[Boolean] = js.native
  
  /**
    * Window mode options for flash assets. Applicable to the following
    * creative types: FLASH_INPAGE, RICH_MEDIA_DISPLAY_EXPANDING,
    * RICH_MEDIA_IM_EXPAND, RICH_MEDIA_DISPLAY_BANNER, and
    * RICH_MEDIA_INPAGE_FLOATING.
    */
  var windowMode: js.UndefOr[String] = js.native
  
  /**
    * zIndex value of an asset. Applicable to the following creative types: all
    * RICH_MEDIA.Additionally, only applicable to assets whose displayType is
    * NOT one of the following types: ASSET_DISPLAY_TYPE_INPAGE or
    * ASSET_DISPLAY_TYPE_OVERLAY. Acceptable values are -999999999 to
    * 999999999, inclusive.
    */
  var zIndex: js.UndefOr[Double] = js.native
  
  /**
    * File name of zip file. This is a read-only field. Applicable to the
    * following creative types: HTML5_BANNER.
    */
  var zipFilename: js.UndefOr[String] = js.native
  
  /**
    * Size of zip file. This is a read-only field. Applicable to the following
    * creative types: HTML5_BANNER.
    */
  var zipFilesize: js.UndefOr[String] = js.native
}
object SchemaCreativeAsset {
  
  @scala.inline
  def apply(): SchemaCreativeAsset = {
    val __obj = js.Dynamic.literal()
    __obj.asInstanceOf[SchemaCreativeAsset]
  }
  
  @scala.inline
  implicit class SchemaCreativeAssetMutableBuilder[Self <: SchemaCreativeAsset] (val x: Self) extends AnyVal {
    
    @scala.inline
    def setActionScript3(value: Boolean): Self = StObject.set(x, "actionScript3", value.asInstanceOf[js.Any])
    
    @scala.inline
    def setActionScript3Undefined: Self = StObject.set(x, "actionScript3", js.undefined)
    
    @scala.inline
    def setActive(value: Boolean): Self = StObject.set(x, "active", value.asInstanceOf[js.Any])
    
    @scala.inline
    def setActiveUndefined: Self = StObject.set(x, "active", js.undefined)
    
    @scala.inline
    def setAdditionalSizes(value: js.Array[SchemaSize]): Self = StObject.set(x, "additionalSizes", value.asInstanceOf[js.Any])
    
    @scala.inline
    def setAdditionalSizesUndefined: Self = StObject.set(x, "additionalSizes", js.undefined)
    
    @scala.inline
    def setAdditionalSizesVarargs(value: SchemaSize*): Self = StObject.set(x, "additionalSizes", js.Array(value :_*))
    
    @scala.inline
    def setAlignment(value: String): Self = StObject.set(x, "alignment", value.asInstanceOf[js.Any])
    
    @scala.inline
    def setAlignmentUndefined: Self = StObject.set(x, "alignment", js.undefined)
    
    @scala.inline
    def setArtworkType(value: String): Self = StObject.set(x, "artworkType", value.asInstanceOf[js.Any])
    
    @scala.inline
    def setArtworkTypeUndefined: Self = StObject.set(x, "artworkType", js.undefined)
    
    @scala.inline
    def setAssetIdentifier(value: SchemaCreativeAssetId): Self = StObject.set(x, "assetIdentifier", value.asInstanceOf[js.Any])
    
    @scala.inline
    def setAssetIdentifierUndefined: Self = StObject.set(x, "assetIdentifier", js.undefined)
    
    @scala.inline
    def setBackupImageExit(value: SchemaCreativeCustomEvent): Self = StObject.set(x, "backupImageExit", value.asInstanceOf[js.Any])
    
    @scala.inline
    def setBackupImageExitUndefined: Self = StObject.set(x, "backupImageExit", js.undefined)
    
    @scala.inline
    def setBitRate(value: Double): Self = StObject.set(x, "bitRate", value.asInstanceOf[js.Any])
    
    @scala.inline
    def setBitRateUndefined: Self = StObject.set(x, "bitRate", js.undefined)
    
    @scala.inline
    def setChildAssetType(value: String): Self = StObject.set(x, "childAssetType", value.asInstanceOf[js.Any])
    
    @scala.inline
    def setChildAssetTypeUndefined: Self = StObject.set(x, "childAssetType", js.undefined)
    
    @scala.inline
    def setCollapsedSize(value: SchemaSize): Self = StObject.set(x, "collapsedSize", value.asInstanceOf[js.Any])
    
    @scala.inline
    def setCollapsedSizeUndefined: Self = StObject.set(x, "collapsedSize", js.undefined)
    
    @scala.inline
    def setCompanionCreativeIds(value: js.Array[String]): Self = StObject.set(x, "companionCreativeIds", value.asInstanceOf[js.Any])
    
    @scala.inline
    def setCompanionCreativeIdsUndefined: Self = StObject.set(x, "companionCreativeIds", js.undefined)
    
    @scala.inline
    def setCompanionCreativeIdsVarargs(value: String*): Self = StObject.set(x, "companionCreativeIds", js.Array(value :_*))
    
    @scala.inline
    def setCustomStartTimeValue(value: Double): Self = StObject.set(x, "customStartTimeValue", value.asInstanceOf[js.Any])
    
    @scala.inline
    def setCustomStartTimeValueUndefined: Self = StObject.set(x, "customStartTimeValue", js.undefined)
    
    @scala.inline
    def setDetectedFeatures(value: js.Array[String]): Self = StObject.set(x, "detectedFeatures", value.asInstanceOf[js.Any])
    
    @scala.inline
    def setDetectedFeaturesUndefined: Self = StObject.set(x, "detectedFeatures", js.undefined)
    
    @scala.inline
    def setDetectedFeaturesVarargs(value: String*): Self = StObject.set(x, "detectedFeatures", js.Array(value :_*))
    
    @scala.inline
    def setDisplayType(value: String): Self = StObject.set(x, "displayType", value.asInstanceOf[js.Any])
    
    @scala.inline
    def setDisplayTypeUndefined: Self = StObject.set(x, "displayType", js.undefined)
    
    @scala.inline
    def setDuration(value: Double): Self = StObject.set(x, "duration", value.asInstanceOf[js.Any])
    
    @scala.inline
    def setDurationType(value: String): Self = StObject.set(x, "durationType", value.asInstanceOf[js.Any])
    
    @scala.inline
    def setDurationTypeUndefined: Self = StObject.set(x, "durationType", js.undefined)
    
    @scala.inline
    def setDurationUndefined: Self = StObject.set(x, "duration", js.undefined)
    
    @scala.inline
    def setExpandedDimension(value: SchemaSize): Self = StObject.set(x, "expandedDimension", value.asInstanceOf[js.Any])
    
    @scala.inline
    def setExpandedDimensionUndefined: Self = StObject.set(x, "expandedDimension", js.undefined)
    
    @scala.inline
    def setFileSize(value: String): Self = StObject.set(x, "fileSize", value.asInstanceOf[js.Any])
    
    @scala.inline
    def setFileSizeUndefined: Self = StObject.set(x, "fileSize", js.undefined)
    
    @scala.inline
    def setFlashVersion(value: Double): Self = StObject.set(x, "flashVersion", value.asInstanceOf[js.Any])
    
    @scala.inline
    def setFlashVersionUndefined: Self = StObject.set(x, "flashVersion", js.undefined)
    
    @scala.inline
    def setHideFlashObjects(value: Boolean): Self = StObject.set(x, "hideFlashObjects", value.asInstanceOf[js.Any])
    
    @scala.inline
    def setHideFlashObjectsUndefined: Self = StObject.set(x, "hideFlashObjects", js.undefined)
    
    @scala.inline
    def setHideSelectionBoxes(value: Boolean): Self = StObject.set(x, "hideSelectionBoxes", value.asInstanceOf[js.Any])
    
    @scala.inline
    def setHideSelectionBoxesUndefined: Self = StObject.set(x, "hideSelectionBoxes", js.undefined)
    
    @scala.inline
    def setHorizontallyLocked(value: Boolean): Self = StObject.set(x, "horizontallyLocked", value.asInstanceOf[js.Any])
    
    @scala.inline
    def setHorizontallyLockedUndefined: Self = StObject.set(x, "horizontallyLocked", js.undefined)
    
    @scala.inline
    def setId(value: String): Self = StObject.set(x, "id", value.asInstanceOf[js.Any])
    
    @scala.inline
    def setIdDimensionValue(value: SchemaDimensionValue): Self = StObject.set(x, "idDimensionValue", value.asInstanceOf[js.Any])
    
    @scala.inline
    def setIdDimensionValueUndefined: Self = StObject.set(x, "idDimensionValue", js.undefined)
    
    @scala.inline
    def setIdUndefined: Self = StObject.set(x, "id", js.undefined)
    
    @scala.inline
    def setMediaDuration(value: Double): Self = StObject.set(x, "mediaDuration", value.asInstanceOf[js.Any])
    
    @scala.inline
    def setMediaDurationUndefined: Self = StObject.set(x, "mediaDuration", js.undefined)
    
    @scala.inline
    def setMimeType(value: String): Self = StObject.set(x, "mimeType", value.asInstanceOf[js.Any])
    
    @scala.inline
    def setMimeTypeUndefined: Self = StObject.set(x, "mimeType", js.undefined)
    
    @scala.inline
    def setOffset(value: SchemaOffsetPosition): Self = StObject.set(x, "offset", value.asInstanceOf[js.Any])
    
    @scala.inline
    def setOffsetUndefined: Self = StObject.set(x, "offset", js.undefined)
    
    @scala.inline
    def setOrientation(value: String): Self = StObject.set(x, "orientation", value.asInstanceOf[js.Any])
    
    @scala.inline
    def setOrientationUndefined: Self = StObject.set(x, "orientation", js.undefined)
    
    @scala.inline
    def setOriginalBackup(value: Boolean): Self = StObject.set(x, "originalBackup", value.asInstanceOf[js.Any])
    
    @scala.inline
    def setOriginalBackupUndefined: Self = StObject.set(x, "originalBackup", js.undefined)
    
    @scala.inline
    def setPosition(value: SchemaOffsetPosition): Self = StObject.set(x, "position", value.asInstanceOf[js.Any])
    
    @scala.inline
    def setPositionLeftUnit(value: String): Self = StObject.set(x, "positionLeftUnit", value.asInstanceOf[js.Any])
    
    @scala.inline
    def setPositionLeftUnitUndefined: Self = StObject.set(x, "positionLeftUnit", js.undefined)
    
    @scala.inline
    def setPositionTopUnit(value: String): Self = StObject.set(x, "positionTopUnit", value.asInstanceOf[js.Any])
    
    @scala.inline
    def setPositionTopUnitUndefined: Self = StObject.set(x, "positionTopUnit", js.undefined)
    
    @scala.inline
    def setPositionUndefined: Self = StObject.set(x, "position", js.undefined)
    
    @scala.inline
    def setProgressiveServingUrl(value: String): Self = StObject.set(x, "progressiveServingUrl", value.asInstanceOf[js.Any])
    
    @scala.inline
    def setProgressiveServingUrlUndefined: Self = StObject.set(x, "progressiveServingUrl", js.undefined)
    
    @scala.inline
    def setPushdown(value: Boolean): Self = StObject.set(x, "pushdown", value.asInstanceOf[js.Any])
    
    @scala.inline
    def setPushdownDuration(value: Double): Self = StObject.set(x, "pushdownDuration", value.asInstanceOf[js.Any])
    
    @scala.inline
    def setPushdownDurationUndefined: Self = StObject.set(x, "pushdownDuration", js.undefined)
    
    @scala.inline
    def setPushdownUndefined: Self = StObject.set(x, "pushdown", js.undefined)
    
    @scala.inline
    def setRole(value: String): Self = StObject.set(x, "role", value.asInstanceOf[js.Any])
    
    @scala.inline
    def setRoleUndefined: Self = StObject.set(x, "role", js.undefined)
    
    @scala.inline
    def setSize(value: SchemaSize): Self = StObject.set(x, "size", value.asInstanceOf[js.Any])
    
    @scala.inline
    def setSizeUndefined: Self = StObject.set(x, "size", js.undefined)
    
    @scala.inline
    def setSslCompliant(value: Boolean): Self = StObject.set(x, "sslCompliant", value.asInstanceOf[js.Any])
    
    @scala.inline
    def setSslCompliantUndefined: Self = StObject.set(x, "sslCompliant", js.undefined)
    
    @scala.inline
    def setStartTimeType(value: String): Self = StObject.set(x, "startTimeType", value.asInstanceOf[js.Any])
    
    @scala.inline
    def setStartTimeTypeUndefined: Self = StObject.set(x, "startTimeType", js.undefined)
    
    @scala.inline
    def setStreamingServingUrl(value: String): Self = StObject.set(x, "streamingServingUrl", value.asInstanceOf[js.Any])
    
    @scala.inline
    def setStreamingServingUrlUndefined: Self = StObject.set(x, "streamingServingUrl", js.undefined)
    
    @scala.inline
    def setTransparency(value: Boolean): Self = StObject.set(x, "transparency", value.asInstanceOf[js.Any])
    
    @scala.inline
    def setTransparencyUndefined: Self = StObject.set(x, "transparency", js.undefined)
    
    @scala.inline
    def setVerticallyLocked(value: Boolean): Self = StObject.set(x, "verticallyLocked", value.asInstanceOf[js.Any])
    
    @scala.inline
    def setVerticallyLockedUndefined: Self = StObject.set(x, "verticallyLocked", js.undefined)
    
    @scala.inline
    def setWindowMode(value: String): Self = StObject.set(x, "windowMode", value.asInstanceOf[js.Any])
    
    @scala.inline
    def setWindowModeUndefined: Self = StObject.set(x, "windowMode", js.undefined)
    
    @scala.inline
    def setZIndex(value: Double): Self = StObject.set(x, "zIndex", value.asInstanceOf[js.Any])
    
    @scala.inline
    def setZIndexUndefined: Self = StObject.set(x, "zIndex", js.undefined)
    
    @scala.inline
    def setZipFilename(value: String): Self = StObject.set(x, "zipFilename", value.asInstanceOf[js.Any])
    
    @scala.inline
    def setZipFilenameUndefined: Self = StObject.set(x, "zipFilename", js.undefined)
    
    @scala.inline
    def setZipFilesize(value: String): Self = StObject.set(x, "zipFilesize", value.asInstanceOf[js.Any])
    
    @scala.inline
    def setZipFilesizeUndefined: Self = StObject.set(x, "zipFilesize", js.undefined)
  }
}
