package typingsSlinky.gapiClientGenomics.gapi.client.genomics

import typingsSlinky.std.Record
import scala.scalajs.js
import scala.scalajs.js.`|`
import scala.scalajs.js.annotation.{JSGlobalScope, JSGlobal, JSImport, JSName, JSBracketAccess}

@js.native
trait ImportVariantsRequest extends js.Object {
  
  /**
    * The format of the variant data being imported. If unspecified, defaults to
    * to `VCF`.
    */
  var format: js.UndefOr[String] = js.native
  
  /**
    * A mapping between info field keys and the InfoMergeOperations to
    * be performed on them. This is plumbed down to the MergeVariantRequests
    * generated by the resulting import job.
    */
  var infoMergeConfig: js.UndefOr[Record[String, String]] = js.native
  
  /**
    * Convert reference names to the canonical representation.
    * hg19 haploytypes (those reference names containing "_hap")
    * are not modified in any way.
    * All other reference names are modified according to the following rules:
    * The reference name is capitalized.
    * The "chr" prefix is dropped for all autosomes and sex chromsomes.
    * For example "chr17" becomes "17" and "chrX" becomes "X".
    * All mitochondrial chromosomes ("chrM", "chrMT", etc) become "MT".
    */
  var normalizeReferenceNames: js.UndefOr[Boolean] = js.native
  
  /**
    * A list of URIs referencing variant files in Google Cloud Storage. URIs can
    * include wildcards [as described
    * here](https://cloud.google.com/storage/docs/gsutil/addlhelp/WildcardNames).
    * Note that recursive wildcards ('&#42;&#42;') are not supported.
    */
  var sourceUris: js.UndefOr[js.Array[String]] = js.native
  
  /** Required. The variant set to which variant data should be imported. */
  var variantSetId: js.UndefOr[String] = js.native
}
object ImportVariantsRequest {
  
  @scala.inline
  def apply(): ImportVariantsRequest = {
    val __obj = js.Dynamic.literal()
    __obj.asInstanceOf[ImportVariantsRequest]
  }
  
  @scala.inline
  implicit class ImportVariantsRequestOps[Self <: ImportVariantsRequest] (val x: Self) extends AnyVal {
    
    @scala.inline
    def duplicate: Self = (js.Dynamic.global.Object.assign(js.Dynamic.literal(), x)).asInstanceOf[Self]
    
    @scala.inline
    def combineWith[Other <: js.Any](other: Other): Self with Other = (js.Dynamic.global.Object.assign(js.Dynamic.literal(), x, other.asInstanceOf[js.Any])).asInstanceOf[Self with Other]
    
    @scala.inline
    def set(key: String, value: js.Any): Self = {
      x.asInstanceOf[js.Dynamic].updateDynamic(key)(value)
      x
    }
    
    @scala.inline
    def setFormat(value: String): Self = this.set("format", value.asInstanceOf[js.Any])
    
    @scala.inline
    def deleteFormat: Self = this.set("format", js.undefined)
    
    @scala.inline
    def setInfoMergeConfig(value: Record[String, String]): Self = this.set("infoMergeConfig", value.asInstanceOf[js.Any])
    
    @scala.inline
    def deleteInfoMergeConfig: Self = this.set("infoMergeConfig", js.undefined)
    
    @scala.inline
    def setNormalizeReferenceNames(value: Boolean): Self = this.set("normalizeReferenceNames", value.asInstanceOf[js.Any])
    
    @scala.inline
    def deleteNormalizeReferenceNames: Self = this.set("normalizeReferenceNames", js.undefined)
    
    @scala.inline
    def setSourceUrisVarargs(value: String*): Self = this.set("sourceUris", js.Array(value :_*))
    
    @scala.inline
    def setSourceUris(value: js.Array[String]): Self = this.set("sourceUris", value.asInstanceOf[js.Any])
    
    @scala.inline
    def deleteSourceUris: Self = this.set("sourceUris", js.undefined)
    
    @scala.inline
    def setVariantSetId(value: String): Self = this.set("variantSetId", value.asInstanceOf[js.Any])
    
    @scala.inline
    def deleteVariantSetId: Self = this.set("variantSetId", js.undefined)
  }
}
