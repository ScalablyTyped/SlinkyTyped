package typingsSlinky.googlePicker.google.picker

import scala.scalajs.js
import scala.scalajs.js.`|`
import scala.scalajs.js.annotation.{JSGlobalScope, JSGlobal, JSImport, JSName, JSBracketAccess}

@js.native
trait PickerBuilder extends js.Object {
  
  // Add a View to the navigation pane.
  def addView(viewOrId: js.Any): PickerBuilder = js.native
  
  // Add a ViewGroup to the top-level navigation pane.
  def addViewGroup(viewGroup: js.Any): PickerBuilder = js.native
  
  // Construct the Picker object. The Picker object is returned.
  def build(): Picker = js.native
  
  // Disable a picker feature.
  def disableFeature(feature: String): PickerBuilder = js.native
  
  // Enable a picker feature.
  def enableFeature(feature: String): PickerBuilder = js.native
  
  // Get the relay URL, used for gadgets.rpc.
  def getRelayUrl(): String = js.native
  
  // Get the dialog title.
  def getTitle(): String = js.native
  
  // Disable the title bar from being shown. To re-enable, call setTitle with a non-empty title or undefined.
  def hideTitleBar(): PickerBuilder = js.native
  
  // Check if a picker Feature is enabled.
  def isFeatureEnabled(feature: String): Boolean = js.native
  
  // Sets the Google Drive App ID needed to allow application to access the user's files via the Google Drive API.
  def setAppId(appId: String): PickerBuilder = js.native
  
  // Set the callback method called when the user picks and item (or items), or cancels. The callback method receives a single callback object. The structure of the callback object is described in the JSON Guide.
  def setCallback(method: js.Function): PickerBuilder = js.native
  
  // Sets the Browser API key obtained from Google Developers Console. See the Developer's Guide for details on how to obtain the Browser API key.
  def setDeveloperKey(key: String): PickerBuilder = js.native
  
  // Set the document.
  def setDocument(document: String): PickerBuilder = js.native
  
  // ISO 639 language code. If the language is not supported, en-US is used. This method provides an alternative to setting the locale at google.load() time. See the Developer's Guide for a list of supported locales.
  def setLocale(locale: String): PickerBuilder = js.native
  
  // Sets the maximum number of items a user can pick.
  def setMaxItems(max: Double): PickerBuilder = js.native
  
  // Sets an OAuth token to use for authenticating the current user. Depending on the scope of the token, only certain views will display data. Valid scopes are Google Docs, Drive, Photos, YouTube.
  def setOAuthToken(token: String): PickerBuilder = js.native
  
  // Sets the origin of picker dialog. The origin should be set to the window.location.protocol + '//' + window.location.host of the top-most page, if your application is running in an iframe.
  def setOrigin(origin: String): PickerBuilder = js.native
  
  // Set the relay URL, used for gadgets.rpc.
  def setRelayUrl(url: String): PickerBuilder = js.native
  
  // Set the list of MIME types which will be selectable. Use commas to separate MIME types if more than one is required.
  def setSelectableMimeTypes(`type`: String): PickerBuilder = js.native
  
  // Set the preferred dialog size. The dialog will be auto-centered. It has a minimum size of (566,350) and a maximum size of (1051,650).
  def setSize(width: Double, height: Double): PickerBuilder = js.native
  
  // Set the dialog title.
  def setTitle(title: String): PickerBuilder = js.native
  
  // Specify an album ID for photo uploads. See Picasa Web Albums Data API documentation for more information about albums.
  def setUploadToAlbumId(albumId: String): PickerBuilder = js.native
  
  // Returns the URI generated by this builder.
  def toUri(): String = js.native
}
object PickerBuilder {
  
  @scala.inline
  def apply(
    addView: js.Any => PickerBuilder,
    addViewGroup: js.Any => PickerBuilder,
    build: () => Picker,
    disableFeature: String => PickerBuilder,
    enableFeature: String => PickerBuilder,
    getRelayUrl: () => String,
    getTitle: () => String,
    hideTitleBar: () => PickerBuilder,
    isFeatureEnabled: String => Boolean,
    setAppId: String => PickerBuilder,
    setCallback: js.Function => PickerBuilder,
    setDeveloperKey: String => PickerBuilder,
    setDocument: String => PickerBuilder,
    setLocale: String => PickerBuilder,
    setMaxItems: Double => PickerBuilder,
    setOAuthToken: String => PickerBuilder,
    setOrigin: String => PickerBuilder,
    setRelayUrl: String => PickerBuilder,
    setSelectableMimeTypes: String => PickerBuilder,
    setSize: (Double, Double) => PickerBuilder,
    setTitle: String => PickerBuilder,
    setUploadToAlbumId: String => PickerBuilder,
    toUri: () => String
  ): PickerBuilder = {
    val __obj = js.Dynamic.literal(addView = js.Any.fromFunction1(addView), addViewGroup = js.Any.fromFunction1(addViewGroup), build = js.Any.fromFunction0(build), disableFeature = js.Any.fromFunction1(disableFeature), enableFeature = js.Any.fromFunction1(enableFeature), getRelayUrl = js.Any.fromFunction0(getRelayUrl), getTitle = js.Any.fromFunction0(getTitle), hideTitleBar = js.Any.fromFunction0(hideTitleBar), isFeatureEnabled = js.Any.fromFunction1(isFeatureEnabled), setAppId = js.Any.fromFunction1(setAppId), setCallback = js.Any.fromFunction1(setCallback), setDeveloperKey = js.Any.fromFunction1(setDeveloperKey), setDocument = js.Any.fromFunction1(setDocument), setLocale = js.Any.fromFunction1(setLocale), setMaxItems = js.Any.fromFunction1(setMaxItems), setOAuthToken = js.Any.fromFunction1(setOAuthToken), setOrigin = js.Any.fromFunction1(setOrigin), setRelayUrl = js.Any.fromFunction1(setRelayUrl), setSelectableMimeTypes = js.Any.fromFunction1(setSelectableMimeTypes), setSize = js.Any.fromFunction2(setSize), setTitle = js.Any.fromFunction1(setTitle), setUploadToAlbumId = js.Any.fromFunction1(setUploadToAlbumId), toUri = js.Any.fromFunction0(toUri))
    __obj.asInstanceOf[PickerBuilder]
  }
  
  @scala.inline
  implicit class PickerBuilderOps[Self <: PickerBuilder] (val x: Self) extends AnyVal {
    
    @scala.inline
    def duplicate: Self = (js.Dynamic.global.Object.assign(js.Dynamic.literal(), x)).asInstanceOf[Self]
    
    @scala.inline
    def combineWith[Other <: js.Any](other: Other): Self with Other = (js.Dynamic.global.Object.assign(js.Dynamic.literal(), x, other.asInstanceOf[js.Any])).asInstanceOf[Self with Other]
    
    @scala.inline
    def set(key: String, value: js.Any): Self = {
      x.asInstanceOf[js.Dynamic].updateDynamic(key)(value)
      x
    }
    
    @scala.inline
    def setAddView(value: js.Any => PickerBuilder): Self = this.set("addView", js.Any.fromFunction1(value))
    
    @scala.inline
    def setAddViewGroup(value: js.Any => PickerBuilder): Self = this.set("addViewGroup", js.Any.fromFunction1(value))
    
    @scala.inline
    def setBuild(value: () => Picker): Self = this.set("build", js.Any.fromFunction0(value))
    
    @scala.inline
    def setDisableFeature(value: String => PickerBuilder): Self = this.set("disableFeature", js.Any.fromFunction1(value))
    
    @scala.inline
    def setEnableFeature(value: String => PickerBuilder): Self = this.set("enableFeature", js.Any.fromFunction1(value))
    
    @scala.inline
    def setGetRelayUrl(value: () => String): Self = this.set("getRelayUrl", js.Any.fromFunction0(value))
    
    @scala.inline
    def setGetTitle(value: () => String): Self = this.set("getTitle", js.Any.fromFunction0(value))
    
    @scala.inline
    def setHideTitleBar(value: () => PickerBuilder): Self = this.set("hideTitleBar", js.Any.fromFunction0(value))
    
    @scala.inline
    def setIsFeatureEnabled(value: String => Boolean): Self = this.set("isFeatureEnabled", js.Any.fromFunction1(value))
    
    @scala.inline
    def setSetAppId(value: String => PickerBuilder): Self = this.set("setAppId", js.Any.fromFunction1(value))
    
    @scala.inline
    def setSetCallback(value: js.Function => PickerBuilder): Self = this.set("setCallback", js.Any.fromFunction1(value))
    
    @scala.inline
    def setSetDeveloperKey(value: String => PickerBuilder): Self = this.set("setDeveloperKey", js.Any.fromFunction1(value))
    
    @scala.inline
    def setSetDocument(value: String => PickerBuilder): Self = this.set("setDocument", js.Any.fromFunction1(value))
    
    @scala.inline
    def setSetLocale(value: String => PickerBuilder): Self = this.set("setLocale", js.Any.fromFunction1(value))
    
    @scala.inline
    def setSetMaxItems(value: Double => PickerBuilder): Self = this.set("setMaxItems", js.Any.fromFunction1(value))
    
    @scala.inline
    def setSetOAuthToken(value: String => PickerBuilder): Self = this.set("setOAuthToken", js.Any.fromFunction1(value))
    
    @scala.inline
    def setSetOrigin(value: String => PickerBuilder): Self = this.set("setOrigin", js.Any.fromFunction1(value))
    
    @scala.inline
    def setSetRelayUrl(value: String => PickerBuilder): Self = this.set("setRelayUrl", js.Any.fromFunction1(value))
    
    @scala.inline
    def setSetSelectableMimeTypes(value: String => PickerBuilder): Self = this.set("setSelectableMimeTypes", js.Any.fromFunction1(value))
    
    @scala.inline
    def setSetSize(value: (Double, Double) => PickerBuilder): Self = this.set("setSize", js.Any.fromFunction2(value))
    
    @scala.inline
    def setSetTitle(value: String => PickerBuilder): Self = this.set("setTitle", js.Any.fromFunction1(value))
    
    @scala.inline
    def setSetUploadToAlbumId(value: String => PickerBuilder): Self = this.set("setUploadToAlbumId", js.Any.fromFunction1(value))
    
    @scala.inline
    def setToUri(value: () => String): Self = this.set("toUri", js.Any.fromFunction0(value))
  }
}
