package typingsSlinky.googlepay.google.payments.api

import scala.scalajs.js
import scala.scalajs.js.`|`
import scala.scalajs.js.annotation.{JSGlobalScope, JSGlobal, JSImport, JSName, JSBracketAccess}

/**
  * Detailed information about the transaction.
  */
@js.native
trait TransactionInfo extends js.Object {
  
  /**
    * Optional checkout option parameter. Whether to use the 'Continue' or
    * the 'Pay Now' button for a buy flow.
    *
    * If omitted, defaults to [[CheckoutOption|`DEFAULT`]] and renders
    * the 'Continue' button for a buy flow.
    *
    * @default "DEFAULT"
    */
  var checkoutOption: js.UndefOr[CheckoutOption] = js.native
  
  /**
    * ISO 3166-1 alpha-2 country code for the country where the transaction
    * will be completed/processed.
    *
    * This is an optional field. We recommend setting this field to allow
    * country-specific customizations (for example, in some countries we
    * may need to provide extra information to you or your processor in
    * order to complete a transaction).
    */
  var countryCode: js.UndefOr[String] = js.native
  
  /**
    * ISO 4217 alphabetic currency code of the transaction.
    *
    * This is a required field.
    */
  var currencyCode: String = js.native
  
  /**
    * This can be used to display a high level breakdown of the total
    * price. e.g. 'subtotal', 'discount'.
    */
  var displayItems: js.UndefOr[js.Array[DisplayItem]] = js.native
  
  /**
    * Total price of this transaction.
    *
    * The format of this string should follow the regular expression
    * format:
    * `[0-9]+(\.[0-9][0-9])?` (e.g., `"10.45"`)
    *
    * This field is required if
    * [[CheckoutOption.TransactionInfo.totalPriceStatus|`CheckoutOption.TransactionInfo.totalPriceStatus`]]
    * is set to
    * [[TotalPriceStatus|`ESTIMATED`]] or
    * [[TotalPriceStatus|`FINAL`]].
    */
  var totalPrice: String = js.native
  
  /**
    * Total price label of this transaction.
    *
    * The string will be shown as the total price label on the cart modal
    * dialog page.
    *
    * This field is optional, but required if developer wants to show cart
    * information. Otherwise the cart modal dialog will not be rendered
    * even if transactionInfo.displayItems is set.
    */
  var totalPriceLabel: js.UndefOr[String] = js.native
  
  /**
    * Status of this transaction's total price.
    *
    * This field is required.
    *
    * Note: some payment methods require that this field be set to
    * [[TotalPriceStatus|`FINAL`]] and that
    * the total price to be specified and final.
    */
  var totalPriceStatus: TotalPriceStatus = js.native
  
  /**
    * Correlation ID to refer to this transaction.
    *
    * This field is optional. It is generated by the merchant and is used
    * for referring to this transaction later on (e.g. for debugging issues
    * when communicating with Google).
    */
  var transactionId: js.UndefOr[String] = js.native
  
  /**
    * Transaction note.
    *
    * This field is optional except when the following payment methods are
    * used:
    *
    * - [[PaymentMethodType|`UPI`]]
    *   this will be passed to NPCI (National Payments Corporation of
    *   India) and can seen as the transaction description in the order
    *   screen. The note should have details related to the order or the
    *   reservation details. The maximum length allowed for this field
    *   is 80.
    */
  var transactionNote: js.UndefOr[String] = js.native
}
object TransactionInfo {
  
  @scala.inline
  def apply(currencyCode: String, totalPrice: String, totalPriceStatus: TotalPriceStatus): TransactionInfo = {
    val __obj = js.Dynamic.literal(currencyCode = currencyCode.asInstanceOf[js.Any], totalPrice = totalPrice.asInstanceOf[js.Any], totalPriceStatus = totalPriceStatus.asInstanceOf[js.Any])
    __obj.asInstanceOf[TransactionInfo]
  }
  
  @scala.inline
  implicit class TransactionInfoOps[Self <: TransactionInfo] (val x: Self) extends AnyVal {
    
    @scala.inline
    def duplicate: Self = (js.Dynamic.global.Object.assign(js.Dynamic.literal(), x)).asInstanceOf[Self]
    
    @scala.inline
    def combineWith[Other <: js.Any](other: Other): Self with Other = (js.Dynamic.global.Object.assign(js.Dynamic.literal(), x, other.asInstanceOf[js.Any])).asInstanceOf[Self with Other]
    
    @scala.inline
    def set(key: String, value: js.Any): Self = {
      x.asInstanceOf[js.Dynamic].updateDynamic(key)(value)
      x
    }
    
    @scala.inline
    def setCurrencyCode(value: String): Self = this.set("currencyCode", value.asInstanceOf[js.Any])
    
    @scala.inline
    def setTotalPrice(value: String): Self = this.set("totalPrice", value.asInstanceOf[js.Any])
    
    @scala.inline
    def setTotalPriceStatus(value: TotalPriceStatus): Self = this.set("totalPriceStatus", value.asInstanceOf[js.Any])
    
    @scala.inline
    def setCheckoutOption(value: CheckoutOption): Self = this.set("checkoutOption", value.asInstanceOf[js.Any])
    
    @scala.inline
    def deleteCheckoutOption: Self = this.set("checkoutOption", js.undefined)
    
    @scala.inline
    def setCountryCode(value: String): Self = this.set("countryCode", value.asInstanceOf[js.Any])
    
    @scala.inline
    def deleteCountryCode: Self = this.set("countryCode", js.undefined)
    
    @scala.inline
    def setDisplayItemsVarargs(value: DisplayItem*): Self = this.set("displayItems", js.Array(value :_*))
    
    @scala.inline
    def setDisplayItems(value: js.Array[DisplayItem]): Self = this.set("displayItems", value.asInstanceOf[js.Any])
    
    @scala.inline
    def deleteDisplayItems: Self = this.set("displayItems", js.undefined)
    
    @scala.inline
    def setTotalPriceLabel(value: String): Self = this.set("totalPriceLabel", value.asInstanceOf[js.Any])
    
    @scala.inline
    def deleteTotalPriceLabel: Self = this.set("totalPriceLabel", js.undefined)
    
    @scala.inline
    def setTransactionId(value: String): Self = this.set("transactionId", value.asInstanceOf[js.Any])
    
    @scala.inline
    def deleteTransactionId: Self = this.set("transactionId", js.undefined)
    
    @scala.inline
    def setTransactionNote(value: String): Self = this.set("transactionNote", value.asInstanceOf[js.Any])
    
    @scala.inline
    def deleteTransactionNote: Self = this.set("transactionNote", js.undefined)
  }
}
