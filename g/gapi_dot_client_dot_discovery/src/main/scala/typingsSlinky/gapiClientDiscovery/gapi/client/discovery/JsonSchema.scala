package typingsSlinky.gapiClientDiscovery.gapi.client.discovery

import org.scalablytyped.runtime.TopLevel
import typingsSlinky.gapiClientDiscovery.anon.Discriminant
import typingsSlinky.gapiClientDiscovery.anon.Required
import scala.scalajs.js
import scala.scalajs.js.`|`
import scala.scalajs.js.annotation.{JSGlobalScope, JSGlobal, JSImport, JSName, JSBracketAccess}

@js.native
trait JsonSchema extends js.Object {
  
  /** A reference to another schema. The value of this property is the "id" of another schema. */
  @JSName("$ref")
  var $ref: js.UndefOr[String] = js.native
  
  /** If this is a schema for an object, this property is the schema for any additional properties with dynamic keys on this object. */
  var additionalProperties: js.UndefOr[JsonSchema] = js.native
  
  /** Additional information about this property. */
  var annotations: js.UndefOr[Required] = js.native
  
  /** The default value of this property (if one exists). */
  var default: js.UndefOr[String] = js.native
  
  /** A description of this object. */
  var description: js.UndefOr[String] = js.native
  
  /** Values this parameter may take (if it is an enum). */
  var enum: js.UndefOr[js.Array[String]] = js.native
  
  /** The descriptions for the enums. Each position maps to the corresponding value in the "enum" array. */
  var enumDescriptions: js.UndefOr[js.Array[String]] = js.native
  
  /**
    * An additional regular expression or key that helps constrain the value. For more details see:
    * http://tools.ietf.org/html/draft-zyp-json-schema-03#section-5.23
    */
  var format: js.UndefOr[String] = js.native
  
  /** Unique identifier for this schema. */
  var id: js.UndefOr[String] = js.native
  
  /** If this is a schema for an array, this property is the schema for each element in the array. */
  var items: js.UndefOr[JsonSchema] = js.native
  
  /** Whether this parameter goes in the query or the path for REST requests. */
  var location: js.UndefOr[String] = js.native
  
  /** The maximum value of this parameter. */
  var maximum: js.UndefOr[String] = js.native
  
  /** The minimum value of this parameter. */
  var minimum: js.UndefOr[String] = js.native
  
  /** The regular expression this parameter must conform to. Uses Java 6 regex format: http://docs.oracle.com/javase/6/docs/api/java/util/regex/Pattern.html */
  var pattern: js.UndefOr[String] = js.native
  
  /** If this is a schema for an object, list the schema for each property of this object. */
  var properties: js.UndefOr[
    /* import warning: importer.ImportType#apply c Unsupported type mapping: 
  {[ P in string ]: gapi.client.discovery.gapi.client.discovery.JsonSchema}
    */ typingsSlinky.gapiClientDiscovery.gapiClientDiscoveryStrings.JsonSchema with TopLevel[js.Any]
  ] = js.native
  
  /**
    * The value is read-only, generated by the service. The value cannot be modified by the client. If the value is included in a POST, PUT, or PATCH
    * request, it is ignored by the service.
    */
  var readOnly: js.UndefOr[Boolean] = js.native
  
  /** Whether this parameter may appear multiple times. */
  var repeated: js.UndefOr[Boolean] = js.native
  
  /** Whether the parameter is required. */
  var required: js.UndefOr[Boolean] = js.native
  
  /** The value type for this schema. A list of values can be found here: http://tools.ietf.org/html/draft-zyp-json-schema-03#section-5.1 */
  var `type`: js.UndefOr[String] = js.native
  
  /**
    * In a variant data type, the value of one property is used to determine how to interpret the entire entity. Its value must exist in a map of
    * descriminant values to schema names.
    */
  var variant: js.UndefOr[Discriminant] = js.native
}
object JsonSchema {
  
  @scala.inline
  def apply(): JsonSchema = {
    val __obj = js.Dynamic.literal()
    __obj.asInstanceOf[JsonSchema]
  }
  
  @scala.inline
  implicit class JsonSchemaOps[Self <: JsonSchema] (val x: Self) extends AnyVal {
    
    @scala.inline
    def duplicate: Self = (js.Dynamic.global.Object.assign(js.Dynamic.literal(), x)).asInstanceOf[Self]
    
    @scala.inline
    def combineWith[Other <: js.Any](other: Other): Self with Other = (js.Dynamic.global.Object.assign(js.Dynamic.literal(), x, other.asInstanceOf[js.Any])).asInstanceOf[Self with Other]
    
    @scala.inline
    def set(key: String, value: js.Any): Self = {
      x.asInstanceOf[js.Dynamic].updateDynamic(key)(value)
      x
    }
    
    @scala.inline
    def set$ref(value: String): Self = this.set("$ref", value.asInstanceOf[js.Any])
    
    @scala.inline
    def delete$ref: Self = this.set("$ref", js.undefined)
    
    @scala.inline
    def setAdditionalProperties(value: JsonSchema): Self = this.set("additionalProperties", value.asInstanceOf[js.Any])
    
    @scala.inline
    def deleteAdditionalProperties: Self = this.set("additionalProperties", js.undefined)
    
    @scala.inline
    def setAnnotations(value: Required): Self = this.set("annotations", value.asInstanceOf[js.Any])
    
    @scala.inline
    def deleteAnnotations: Self = this.set("annotations", js.undefined)
    
    @scala.inline
    def setDefault(value: String): Self = this.set("default", value.asInstanceOf[js.Any])
    
    @scala.inline
    def deleteDefault: Self = this.set("default", js.undefined)
    
    @scala.inline
    def setDescription(value: String): Self = this.set("description", value.asInstanceOf[js.Any])
    
    @scala.inline
    def deleteDescription: Self = this.set("description", js.undefined)
    
    @scala.inline
    def setEnumVarargs(value: String*): Self = this.set("enum", js.Array(value :_*))
    
    @scala.inline
    def setEnum(value: js.Array[String]): Self = this.set("enum", value.asInstanceOf[js.Any])
    
    @scala.inline
    def deleteEnum: Self = this.set("enum", js.undefined)
    
    @scala.inline
    def setEnumDescriptionsVarargs(value: String*): Self = this.set("enumDescriptions", js.Array(value :_*))
    
    @scala.inline
    def setEnumDescriptions(value: js.Array[String]): Self = this.set("enumDescriptions", value.asInstanceOf[js.Any])
    
    @scala.inline
    def deleteEnumDescriptions: Self = this.set("enumDescriptions", js.undefined)
    
    @scala.inline
    def setFormat(value: String): Self = this.set("format", value.asInstanceOf[js.Any])
    
    @scala.inline
    def deleteFormat: Self = this.set("format", js.undefined)
    
    @scala.inline
    def setId(value: String): Self = this.set("id", value.asInstanceOf[js.Any])
    
    @scala.inline
    def deleteId: Self = this.set("id", js.undefined)
    
    @scala.inline
    def setItems(value: JsonSchema): Self = this.set("items", value.asInstanceOf[js.Any])
    
    @scala.inline
    def deleteItems: Self = this.set("items", js.undefined)
    
    @scala.inline
    def setLocation(value: String): Self = this.set("location", value.asInstanceOf[js.Any])
    
    @scala.inline
    def deleteLocation: Self = this.set("location", js.undefined)
    
    @scala.inline
    def setMaximum(value: String): Self = this.set("maximum", value.asInstanceOf[js.Any])
    
    @scala.inline
    def deleteMaximum: Self = this.set("maximum", js.undefined)
    
    @scala.inline
    def setMinimum(value: String): Self = this.set("minimum", value.asInstanceOf[js.Any])
    
    @scala.inline
    def deleteMinimum: Self = this.set("minimum", js.undefined)
    
    @scala.inline
    def setPattern(value: String): Self = this.set("pattern", value.asInstanceOf[js.Any])
    
    @scala.inline
    def deletePattern: Self = this.set("pattern", js.undefined)
    
    @scala.inline
    def setProperties(
      value: /* import warning: importer.ImportType#apply c Unsupported type mapping: 
    {[ P in string ]: gapi.client.discovery.gapi.client.discovery.JsonSchema}
      */ typingsSlinky.gapiClientDiscovery.gapiClientDiscoveryStrings.JsonSchema with TopLevel[js.Any]
    ): Self = this.set("properties", value.asInstanceOf[js.Any])
    
    @scala.inline
    def deleteProperties: Self = this.set("properties", js.undefined)
    
    @scala.inline
    def setReadOnly(value: Boolean): Self = this.set("readOnly", value.asInstanceOf[js.Any])
    
    @scala.inline
    def deleteReadOnly: Self = this.set("readOnly", js.undefined)
    
    @scala.inline
    def setRepeated(value: Boolean): Self = this.set("repeated", value.asInstanceOf[js.Any])
    
    @scala.inline
    def deleteRepeated: Self = this.set("repeated", js.undefined)
    
    @scala.inline
    def setRequired(value: Boolean): Self = this.set("required", value.asInstanceOf[js.Any])
    
    @scala.inline
    def deleteRequired: Self = this.set("required", js.undefined)
    
    @scala.inline
    def setType(value: String): Self = this.set("type", value.asInstanceOf[js.Any])
    
    @scala.inline
    def deleteType: Self = this.set("type", js.undefined)
    
    @scala.inline
    def setVariant(value: Discriminant): Self = this.set("variant", value.asInstanceOf[js.Any])
    
    @scala.inline
    def deleteVariant: Self = this.set("variant", js.undefined)
  }
}
