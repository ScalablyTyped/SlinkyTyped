package typingsSlinky.gapiClientCompute.gapi.client.compute

import typingsSlinky.gapiClientCompute.anon.ContainerType
import typingsSlinky.std.Record
import scala.scalajs.js
import scala.scalajs.js.`|`
import scala.scalajs.js.annotation.{JSGlobalScope, JSGlobal, JSImport, JSName, JSBracketAccess}

@js.native
trait Image extends js.Object {
  
  /** Size of the image tar.gz archive stored in Google Cloud Storage (in bytes). */
  var archiveSizeBytes: js.UndefOr[String] = js.native
  
  /** [Output Only] Creation timestamp in RFC3339 text format. */
  var creationTimestamp: js.UndefOr[String] = js.native
  
  /** The deprecation status associated with this image. */
  var deprecated: js.UndefOr[DeprecationStatus] = js.native
  
  /** An optional description of this resource. Provide this property when you create the resource. */
  var description: js.UndefOr[String] = js.native
  
  /** Size of the image when restored onto a persistent disk (in GB). */
  var diskSizeGb: js.UndefOr[String] = js.native
  
  /**
    * The name of the image family to which this image belongs. You can create disks by specifying an image family instead of a specific image name. The
    * image family always returns its latest image that is not deprecated. The name of the image family must comply with RFC1035.
    */
  var family: js.UndefOr[String] = js.native
  
  /**
    * A list of features to enable on the guest OS. Applicable for bootable images only. Currently, only one feature can be enabled, VIRTIO_SCSI_MULTIQUEUE,
    * which allows each virtual CPU to have its own queue. For Windows images, you can only enable VIRTIO_SCSI_MULTIQUEUE on images with driver version
    * 1.2.0.1621 or higher. Linux images with kernel versions 3.17 and higher will support VIRTIO_SCSI_MULTIQUEUE.
    *
    * For newer Windows images, the server might also populate this property with the value WINDOWS to indicate that this is a Windows image.
    */
  var guestOsFeatures: js.UndefOr[js.Array[GuestOsFeature]] = js.native
  
  /** [Output Only] The unique identifier for the resource. This identifier is defined by the server. */
  var id: js.UndefOr[String] = js.native
  
  /**
    * Encrypts the image using a customer-supplied encryption key.
    *
    * After you encrypt an image with a customer-supplied key, you must provide the same key if you use the image later (e.g. to create a disk from the
    * image).
    *
    * Customer-supplied encryption keys do not protect access to metadata of the disk.
    *
    * If you do not provide an encryption key when creating the image, then the disk will be encrypted using an automatically generated key and you do not
    * need to provide a key to use the image later.
    */
  var imageEncryptionKey: js.UndefOr[CustomerEncryptionKey] = js.native
  
  /** [Output Only] Type of the resource. Always compute#image for images. */
  var kind: js.UndefOr[String] = js.native
  
  /**
    * A fingerprint for the labels being applied to this image, which is essentially a hash of the labels used for optimistic locking. The fingerprint is
    * initially generated by Compute Engine and changes after every request to modify or update labels. You must always provide an up-to-date fingerprint
    * hash in order to update or change labels.
    *
    * To see the latest fingerprint, make a get() request to retrieve an image.
    */
  var labelFingerprint: js.UndefOr[String] = js.native
  
  /** Labels to apply to this image. These can be later modified by the setLabels method. */
  var labels: js.UndefOr[Record[String, String]] = js.native
  
  /** Any applicable license URI. */
  var licenses: js.UndefOr[js.Array[String]] = js.native
  
  /**
    * Name of the resource; provided by the client when the resource is created. The name must be 1-63 characters long, and comply with RFC1035.
    * Specifically, the name must be 1-63 characters long and match the regular expression [a-z]([-a-z0-9]&#42;[a-z0-9])? which means the first character must be
    * a lowercase letter, and all following characters must be a dash, lowercase letter, or digit, except the last character, which cannot be a dash.
    */
  var name: js.UndefOr[String] = js.native
  
  /** The parameters of the raw disk image. */
  var rawDisk: js.UndefOr[ContainerType] = js.native
  
  /** [Output Only] Server-defined URL for the resource. */
  var selfLink: js.UndefOr[String] = js.native
  
  /**
    * URL of the source disk used to create this image. This can be a full or valid partial URL. You must provide either this property or the rawDisk.source
    * property but not both to create an image. For example, the following are valid values:
    * - https://www.googleapis.com/compute/v1/projects/project/zones/zone/disks/disk
    * - projects/project/zones/zone/disks/disk
    * - zones/zone/disks/disk
    */
  var sourceDisk: js.UndefOr[String] = js.native
  
  /** The customer-supplied encryption key of the source disk. Required if the source disk is protected by a customer-supplied encryption key. */
  var sourceDiskEncryptionKey: js.UndefOr[CustomerEncryptionKey] = js.native
  
  /**
    * The ID value of the disk used to create this image. This value may be used to determine whether the image was taken from the current or a previous
    * instance of a given disk name.
    */
  var sourceDiskId: js.UndefOr[String] = js.native
  
  /**
    * URL of the source image used to create this image. This can be a full or valid partial URL. You must provide exactly one of:
    * - this property, or
    * - the rawDisk.source property, or
    * - the sourceDisk property   in order to create an image.
    */
  var sourceImage: js.UndefOr[String] = js.native
  
  /** The customer-supplied encryption key of the source image. Required if the source image is protected by a customer-supplied encryption key. */
  var sourceImageEncryptionKey: js.UndefOr[CustomerEncryptionKey] = js.native
  
  /**
    * [Output Only] The ID value of the image used to create this image. This value may be used to determine whether the image was taken from the current or
    * a previous instance of a given image name.
    */
  var sourceImageId: js.UndefOr[String] = js.native
  
  /** The type of the image used to create this disk. The default and only value is RAW */
  var sourceType: js.UndefOr[String] = js.native
  
  /**
    * [Output Only] The status of the image. An image can be used to create other resources, such as instances, only after the image has been successfully
    * created and the status is set to READY. Possible values are FAILED, PENDING, or READY.
    */
  var status: js.UndefOr[String] = js.native
}
object Image {
  
  @scala.inline
  def apply(): Image = {
    val __obj = js.Dynamic.literal()
    __obj.asInstanceOf[Image]
  }
  
  @scala.inline
  implicit class ImageOps[Self <: Image] (val x: Self) extends AnyVal {
    
    @scala.inline
    def duplicate: Self = (js.Dynamic.global.Object.assign(js.Dynamic.literal(), x)).asInstanceOf[Self]
    
    @scala.inline
    def combineWith[Other <: js.Any](other: Other): Self with Other = (js.Dynamic.global.Object.assign(js.Dynamic.literal(), x, other.asInstanceOf[js.Any])).asInstanceOf[Self with Other]
    
    @scala.inline
    def set(key: String, value: js.Any): Self = {
      x.asInstanceOf[js.Dynamic].updateDynamic(key)(value)
      x
    }
    
    @scala.inline
    def setArchiveSizeBytes(value: String): Self = this.set("archiveSizeBytes", value.asInstanceOf[js.Any])
    
    @scala.inline
    def deleteArchiveSizeBytes: Self = this.set("archiveSizeBytes", js.undefined)
    
    @scala.inline
    def setCreationTimestamp(value: String): Self = this.set("creationTimestamp", value.asInstanceOf[js.Any])
    
    @scala.inline
    def deleteCreationTimestamp: Self = this.set("creationTimestamp", js.undefined)
    
    @scala.inline
    def setDeprecated(value: DeprecationStatus): Self = this.set("deprecated", value.asInstanceOf[js.Any])
    
    @scala.inline
    def deleteDeprecated: Self = this.set("deprecated", js.undefined)
    
    @scala.inline
    def setDescription(value: String): Self = this.set("description", value.asInstanceOf[js.Any])
    
    @scala.inline
    def deleteDescription: Self = this.set("description", js.undefined)
    
    @scala.inline
    def setDiskSizeGb(value: String): Self = this.set("diskSizeGb", value.asInstanceOf[js.Any])
    
    @scala.inline
    def deleteDiskSizeGb: Self = this.set("diskSizeGb", js.undefined)
    
    @scala.inline
    def setFamily(value: String): Self = this.set("family", value.asInstanceOf[js.Any])
    
    @scala.inline
    def deleteFamily: Self = this.set("family", js.undefined)
    
    @scala.inline
    def setGuestOsFeaturesVarargs(value: GuestOsFeature*): Self = this.set("guestOsFeatures", js.Array(value :_*))
    
    @scala.inline
    def setGuestOsFeatures(value: js.Array[GuestOsFeature]): Self = this.set("guestOsFeatures", value.asInstanceOf[js.Any])
    
    @scala.inline
    def deleteGuestOsFeatures: Self = this.set("guestOsFeatures", js.undefined)
    
    @scala.inline
    def setId(value: String): Self = this.set("id", value.asInstanceOf[js.Any])
    
    @scala.inline
    def deleteId: Self = this.set("id", js.undefined)
    
    @scala.inline
    def setImageEncryptionKey(value: CustomerEncryptionKey): Self = this.set("imageEncryptionKey", value.asInstanceOf[js.Any])
    
    @scala.inline
    def deleteImageEncryptionKey: Self = this.set("imageEncryptionKey", js.undefined)
    
    @scala.inline
    def setKind(value: String): Self = this.set("kind", value.asInstanceOf[js.Any])
    
    @scala.inline
    def deleteKind: Self = this.set("kind", js.undefined)
    
    @scala.inline
    def setLabelFingerprint(value: String): Self = this.set("labelFingerprint", value.asInstanceOf[js.Any])
    
    @scala.inline
    def deleteLabelFingerprint: Self = this.set("labelFingerprint", js.undefined)
    
    @scala.inline
    def setLabels(value: Record[String, String]): Self = this.set("labels", value.asInstanceOf[js.Any])
    
    @scala.inline
    def deleteLabels: Self = this.set("labels", js.undefined)
    
    @scala.inline
    def setLicensesVarargs(value: String*): Self = this.set("licenses", js.Array(value :_*))
    
    @scala.inline
    def setLicenses(value: js.Array[String]): Self = this.set("licenses", value.asInstanceOf[js.Any])
    
    @scala.inline
    def deleteLicenses: Self = this.set("licenses", js.undefined)
    
    @scala.inline
    def setName(value: String): Self = this.set("name", value.asInstanceOf[js.Any])
    
    @scala.inline
    def deleteName: Self = this.set("name", js.undefined)
    
    @scala.inline
    def setRawDisk(value: ContainerType): Self = this.set("rawDisk", value.asInstanceOf[js.Any])
    
    @scala.inline
    def deleteRawDisk: Self = this.set("rawDisk", js.undefined)
    
    @scala.inline
    def setSelfLink(value: String): Self = this.set("selfLink", value.asInstanceOf[js.Any])
    
    @scala.inline
    def deleteSelfLink: Self = this.set("selfLink", js.undefined)
    
    @scala.inline
    def setSourceDisk(value: String): Self = this.set("sourceDisk", value.asInstanceOf[js.Any])
    
    @scala.inline
    def deleteSourceDisk: Self = this.set("sourceDisk", js.undefined)
    
    @scala.inline
    def setSourceDiskEncryptionKey(value: CustomerEncryptionKey): Self = this.set("sourceDiskEncryptionKey", value.asInstanceOf[js.Any])
    
    @scala.inline
    def deleteSourceDiskEncryptionKey: Self = this.set("sourceDiskEncryptionKey", js.undefined)
    
    @scala.inline
    def setSourceDiskId(value: String): Self = this.set("sourceDiskId", value.asInstanceOf[js.Any])
    
    @scala.inline
    def deleteSourceDiskId: Self = this.set("sourceDiskId", js.undefined)
    
    @scala.inline
    def setSourceImage(value: String): Self = this.set("sourceImage", value.asInstanceOf[js.Any])
    
    @scala.inline
    def deleteSourceImage: Self = this.set("sourceImage", js.undefined)
    
    @scala.inline
    def setSourceImageEncryptionKey(value: CustomerEncryptionKey): Self = this.set("sourceImageEncryptionKey", value.asInstanceOf[js.Any])
    
    @scala.inline
    def deleteSourceImageEncryptionKey: Self = this.set("sourceImageEncryptionKey", js.undefined)
    
    @scala.inline
    def setSourceImageId(value: String): Self = this.set("sourceImageId", value.asInstanceOf[js.Any])
    
    @scala.inline
    def deleteSourceImageId: Self = this.set("sourceImageId", js.undefined)
    
    @scala.inline
    def setSourceType(value: String): Self = this.set("sourceType", value.asInstanceOf[js.Any])
    
    @scala.inline
    def deleteSourceType: Self = this.set("sourceType", js.undefined)
    
    @scala.inline
    def setStatus(value: String): Self = this.set("status", value.asInstanceOf[js.Any])
    
    @scala.inline
    def deleteStatus: Self = this.set("status", js.undefined)
  }
}
