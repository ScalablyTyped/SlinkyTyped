package typingsSlinky.qlikEngineapi.EngineAPI

import scala.scalajs.js
import scala.scalajs.js.`|`
import scala.scalajs.js.annotation.{JSGlobalScope, JSGlobal, JSImport, JSName, JSBracketAccess}

/**
  * Connection...
  */
@js.native
trait IConnection extends js.Object {
  
  /**
    * One of:
    *
    *   - ODBC CONNECT TO [<provider name>]
    *   - OLEDB CONNECT TO [<provider name>]
    *   - CUSTOM CONNECT TO [<provider name>]
    *   - "<local absolute or relative path,UNC path >"
    *   - "<URL>"
    *
    * Connection string.
    * This parameter is mandatory and must be set when creating or modifying a connection.
    */
  var qConnectionString: String = js.native
  
  /**
    * Identifier of the connection.
    * Is generated by the engine and is unique.
    */
  var qId: String = js.native
  
  /**
    * Select which user credentials to use to connect to the source.
    *
    * - LOG_ON_SERVICE_USER: Disables
    * - LOG_ON_CURRENT_USER: Enables
    */
  var qLogOn: LogonType = js.native
  
  /**
    * Information about the connection.
    */
  var qMeta: INxMeta = js.native
  
  /**
    * Is generated by the engine.
    * Creation date of the connection or last modification date of the connection.
    */
  var qModifiedDate: String = js.native
  
  /**
    * Name of the connection.
    * This parameter is mandatory and must be set when creating or modifying a connection.
    */
  var qName: String = js.native
  
  /**
    * Password of the user who creates the connection.
    * This parameter is optional; it is only used for OLEDB, ODBC and CUSTOM connections.
    * A call to GetConnection method does not return the password.
    */
  var qPassword: js.UndefOr[String] = js.native
  
  /**
    * One of:
    *          - ODBC
    *          - OLEDB
    *          - <Name of the custom connection file>
    *          - folder
    *          - internet
    *
    * Type of the connection.
    * This parameter is mandatory and must be set when creating or modifying a connection.
    * For ODBC, OLEDB and custom connections, the engine checks that the connection type matches the connection string.
    * >> The type is not case sensitive.
    */
  var qType: String = js.native
  
  /**
    * Name of the user who creates the connection.
    * This parameter is optional; it is only used for OLEDB, ODBC and CUSTOM connections.
    * A call to GetConnection method does not return the user name.
    */
  var qUserName: js.UndefOr[String] = js.native
}
object IConnection {
  
  @scala.inline
  def apply(
    qConnectionString: String,
    qId: String,
    qLogOn: LogonType,
    qMeta: INxMeta,
    qModifiedDate: String,
    qName: String,
    qType: String
  ): IConnection = {
    val __obj = js.Dynamic.literal(qConnectionString = qConnectionString.asInstanceOf[js.Any], qId = qId.asInstanceOf[js.Any], qLogOn = qLogOn.asInstanceOf[js.Any], qMeta = qMeta.asInstanceOf[js.Any], qModifiedDate = qModifiedDate.asInstanceOf[js.Any], qName = qName.asInstanceOf[js.Any], qType = qType.asInstanceOf[js.Any])
    __obj.asInstanceOf[IConnection]
  }
  
  @scala.inline
  implicit class IConnectionOps[Self <: IConnection] (val x: Self) extends AnyVal {
    
    @scala.inline
    def duplicate: Self = (js.Dynamic.global.Object.assign(js.Dynamic.literal(), x)).asInstanceOf[Self]
    
    @scala.inline
    def combineWith[Other <: js.Any](other: Other): Self with Other = (js.Dynamic.global.Object.assign(js.Dynamic.literal(), x, other.asInstanceOf[js.Any])).asInstanceOf[Self with Other]
    
    @scala.inline
    def set(key: String, value: js.Any): Self = {
      x.asInstanceOf[js.Dynamic].updateDynamic(key)(value)
      x
    }
    
    @scala.inline
    def setQConnectionString(value: String): Self = this.set("qConnectionString", value.asInstanceOf[js.Any])
    
    @scala.inline
    def setQId(value: String): Self = this.set("qId", value.asInstanceOf[js.Any])
    
    @scala.inline
    def setQLogOn(value: LogonType): Self = this.set("qLogOn", value.asInstanceOf[js.Any])
    
    @scala.inline
    def setQMeta(value: INxMeta): Self = this.set("qMeta", value.asInstanceOf[js.Any])
    
    @scala.inline
    def setQModifiedDate(value: String): Self = this.set("qModifiedDate", value.asInstanceOf[js.Any])
    
    @scala.inline
    def setQName(value: String): Self = this.set("qName", value.asInstanceOf[js.Any])
    
    @scala.inline
    def setQType(value: String): Self = this.set("qType", value.asInstanceOf[js.Any])
    
    @scala.inline
    def setQPassword(value: String): Self = this.set("qPassword", value.asInstanceOf[js.Any])
    
    @scala.inline
    def deleteQPassword: Self = this.set("qPassword", js.undefined)
    
    @scala.inline
    def setQUserName(value: String): Self = this.set("qUserName", value.asInstanceOf[js.Any])
    
    @scala.inline
    def deleteQUserName: Self = this.set("qUserName", js.undefined)
  }
}
